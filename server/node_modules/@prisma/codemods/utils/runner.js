"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runTransform = exports.jscodeshiftExecutable = exports.transformerDirectory = void 0;
const execa_1 = __importDefault(require("execa"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
exports.transformerDirectory = path_1.default.join(__dirname, "../", "transforms");
exports.jscodeshiftExecutable = require.resolve(".bin/jscodeshift");
function runTransform({ projectDir, flags, transformer, customImportPath, testMode }) {
    const transformerPath = path_1.default.join(exports.transformerDirectory, `${transformer}.js`);
    let args = [];
    const { dry, print, runInBand } = flags;
    if (dry) {
        args.push("--dry");
    }
    if (print) {
        args.push("--print");
    }
    if (runInBand) {
        args.push("--run-in-band");
    }
    if (testMode) {
        args.push("--verbose=2");
    }
    else {
        args.push("--verbose=0");
    }
    if (customImportPath) {
        args.push(`--ignore-pattern=**/${customImportPath}/**`);
    }
    if (typeof projectDir === 'string') {
        if (fs_1.default.existsSync(path_1.default.join(projectDir, '.gitignore'))) {
            args.push(`--ignore-config=${path_1.default.join(projectDir, '.gitignore')}`);
        }
        else if (fs_1.default.existsSync(path_1.default.join(projectDir, '..', '.gitignore'))) {
            args.push(`--ignore-config=${path_1.default.join(projectDir, '..', '.gitignore')}`);
        }
    }
    args.push("--ignore-pattern=**/node_modules/**");
    // TODO Check TSX parser
    args.push("--extensions=tsx,ts,js,tsx");
    args.push("--parser=tsx");
    args = args.concat(["--transform", transformerPath]);
    args = args.concat(projectDir);
    console.log(`Executing command: jscodeshift ${args.join(" ")}`);
    const result = execa_1.default.sync(exports.jscodeshiftExecutable, args, {
        stdio: testMode ? "pipe" : "inherit",
        stripFinalNewline: false,
    });
    if (result.stderr) {
        throw result.stderr;
    }
    return result;
}
exports.runTransform = runTransform;
//# sourceMappingURL=runner.js.map