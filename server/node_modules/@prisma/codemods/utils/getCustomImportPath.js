"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTopLevelExports = exports.getCustomImportPath = void 0;
const sdk_1 = require("@prisma/sdk");
const getSchema_1 = require("@prisma/sdk/dist/cli/getSchema");
const fs_1 = __importDefault(require("fs"));
const tempy_1 = __importDefault(require("tempy"));
function getCustomImportPath(options) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!(options === null || options === void 0 ? void 0 : options.cwd)) {
            return '';
        }
        const schemaPath = yield getSchema_1.getSchemaPathInternal(options === null || options === void 0 ? void 0 : options.schemaPathFromArgs, { cwd: options.cwd });
        const datamodel = schemaPath && fs_1.default.readFileSync(schemaPath, { encoding: 'utf8' });
        if (datamodel) {
            const config = yield sdk_1.getConfig({ datamodel, ignoreEnvVarErrors: true });
            process.env.PRISMA_TOP_LEVEL_EXPORTS_FILE = yield getTopLevelExports(datamodel);
            const generator = config.generators[0];
            if (generator) {
                return (generator === null || generator === void 0 ? void 0 : generator.output) ? generator.output.replace(/\.\.\//g, '') : '';
            }
        }
        return '';
    });
}
exports.getCustomImportPath = getCustomImportPath;
function getModelNames(model) {
    return model ? model.map(it => it.name) : [];
}
function getTopLevelExports(datamodel) {
    return __awaiter(this, void 0, void 0, function* () {
        const dmmf = yield sdk_1.getDMMF({ datamodel });
        const schema = dmmf.schema;
        const inputs = getModelNames(schema.inputObjectTypes.model);
        const outputs = getModelNames(schema.outputObjectTypes.model);
        const enums = getModelNames(schema.enumTypes.model);
        const expts = [...inputs, ...outputs, ...enums].filter((v, i, a) => a.indexOf(v) === i);
        const filePath = tempy_1.default.writeSync(expts.join(','));
        return filePath;
    });
}
exports.getTopLevelExports = getTopLevelExports;
//# sourceMappingURL=getCustomImportPath.js.map