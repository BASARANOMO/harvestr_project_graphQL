"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserEngine = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
class BrowserEngine {
    constructor({ fetcher }) {
        this.defaultFetcher = async ({ query, typeName, }) => {
            return cross_fetch_1.default(this.url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ query, variables: {}, operationName: '' }),
            })
                .then((response) => {
                if (!response.ok) {
                    return response.text().then((body) => {
                        const { status, statusText } = response;
                        this.handleErrors({
                            errors: {
                                status,
                                statusText,
                                body,
                            },
                            query,
                        });
                    });
                }
                else {
                    return response.json();
                }
            })
                .catch((errors) => {
                return this.handleErrors({ errors, query });
            });
        };
        this.fetcher = fetcher || this.defaultFetcher;
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    async start() { }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    async stop() { }
    async request(query, typeName) {
        return this.fetcher({ query, typeName }).then((result) => {
            const { data } = result;
            const errors = result.error || result.errors;
            if (errors) {
                return this.handleErrors({
                    errors,
                    query,
                });
            }
            return data;
        });
    }
    handleErrors({ errors, query, }) {
        const stringified = errors ? JSON.stringify(errors, null, 2) : null;
        const message = stringified.length > 0
            ? stringified
            : `Error in prisma.\$\{rootField || 'query'}`; // eslint-disable-line no-useless-escape
        throw new Error(message);
    }
}
exports.BrowserEngine = BrowserEngine;
//# sourceMappingURL=BrowserEngine.js.map