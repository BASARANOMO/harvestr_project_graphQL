"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getErrorMessageWithLink = exports.PrismaClientInitializationError = exports.PrismaClientRustPanicError = exports.PrismaClientUnknownRequestError = exports.PrismaClientKnownRequestError = exports.getMessage = void 0;
const log_1 = require("./log");
const debug_1 = require("@prisma/debug");
const util_1 = require("./util");
const strip_ansi_1 = __importDefault(require("strip-ansi"));
function getMessage(log) {
    if (typeof log === 'string') {
        return log;
    }
    else if (log_1.isRustError(log)) {
        return log.message;
    }
    else if (log.fields && log.fields.message) {
        if (log.fields.reason) {
            return `${log.fields.message}: ${log.fields.reason}`;
        }
        return log.fields.message;
    }
    else {
        return JSON.stringify(log);
    }
}
exports.getMessage = getMessage;
class PrismaClientKnownRequestError extends Error {
    constructor(message, code, clientVersion, meta) {
        super(message);
        this.code = code;
        this.clientVersion = clientVersion;
        this.meta = meta;
    }
}
exports.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
class PrismaClientUnknownRequestError extends Error {
    constructor(message, clientVersion) {
        super(message);
        this.clientVersion = clientVersion;
    }
}
exports.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
class PrismaClientRustPanicError extends Error {
    constructor(message, clientVersion) {
        super(message);
        this.clientVersion = clientVersion;
    }
}
exports.PrismaClientRustPanicError = PrismaClientRustPanicError;
class PrismaClientInitializationError extends Error {
    constructor(message, clientVersion) {
        super(message);
        this.clientVersion = clientVersion;
    }
}
exports.PrismaClientInitializationError = PrismaClientInitializationError;
function getErrorMessageWithLink({ version, platform, title, description, }) {
    var _a;
    const logs = normalizeLogs(strip_ansi_1.default(debug_1.getLogs()));
    const moreInfo = description
        ? `# Description\n\`\`\`\n${description}\n\`\`\``
        : '';
    const body = strip_ansi_1.default(`Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | ${(_a = process.version) === null || _a === void 0 ? void 0 : _a.padEnd(19)}| 
| OS              | ${platform === null || platform === void 0 ? void 0 : platform.padEnd(19)}|
| Prisma Client   | ${version === null || version === void 0 ? void 0 : version.padEnd(19)}|

${moreInfo}

## Logs
\`\`\`
${logs}
\`\`\``);
    const url = util_1.getGithubIssueUrl({ title, body });
    return `${title}

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

${util_1.link(url)}

If you want the Prisma team to look into it, please open the link above 🙏
`;
}
exports.getErrorMessageWithLink = getErrorMessageWithLink;
/**
 * Removes the leading timestamps (from docker) and trailing ms (from debug)
 * @param logs logs to normalize
 */
function normalizeLogs(logs) {
    return logs
        .split('\n')
        .map((l) => {
        return l
            .replace(/^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)\s*/, '')
            .replace(/\+\d+\s*ms$/, '');
    })
        .join('\n');
}
//# sourceMappingURL=Engine.js.map