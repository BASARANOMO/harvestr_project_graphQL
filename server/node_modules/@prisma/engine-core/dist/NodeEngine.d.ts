import { DataSource, GeneratorConfig } from '@prisma/generator-helper';
import { Platform } from '@prisma/get-platform';
import { Undici } from './undici';
export interface DatasourceOverwrite {
    name: string;
    url: string;
}
export interface EngineConfig {
    cwd?: string;
    datamodelPath: string;
    enableDebugLogs?: boolean;
    enableEngineDebugMode?: boolean;
    prismaPath?: string;
    fetcher?: (query: string) => Promise<{
        data?: any;
        error?: any;
    }>;
    generator?: GeneratorConfig;
    datasources?: DatasourceOverwrite[];
    showColors?: boolean;
    logQueries?: boolean;
    logLevel?: 'info' | 'warn';
    env?: Record<string, string>;
    flags?: string[];
    clientVersion?: string;
    enableExperimental?: string[];
    engineEndpoint?: string;
    useUds?: boolean;
}
declare type GetConfigResult = {
    datasources: DataSource[];
    generators: GeneratorConfig[];
};
export declare type Deferred = {
    resolve: () => void;
    reject: (err: Error) => void;
};
export declare type StopDeferred = {
    resolve: (code: number | null) => void;
    reject: (err: Error) => void;
};
export declare class NodeEngine {
    private logEmitter;
    private showColors;
    private logQueries;
    private logLevel?;
    private env?;
    private flags;
    private port?;
    private enableDebugLogs;
    private enableEngineDebugMode;
    private child?;
    private clientVersion?;
    private lastPanic?;
    private globalKillSignalReceived?;
    private restartCount;
    private backoffPromise?;
    private queryEngineStarted;
    private enableExperimental;
    private engineEndpoint?;
    private lastLog?;
    private lastErrorLog?;
    private lastError?;
    private useUds;
    private socketPath?;
    private getConfigPromise?;
    private stopPromise?;
    private beforeExitListener?;
    exitCode: number;
    /**
     * exiting is used to tell the .on('exit') hook, if the exit came from our script.
     * As soon as the Prisma binary returns a correct return code (like 1 or 0), we don't need this anymore
     */
    queryEngineKilled: boolean;
    managementApiEnabled: boolean;
    datamodelJson?: string;
    cwd: string;
    datamodelPath: string;
    prismaPath?: string;
    url: string;
    ready: boolean;
    stderrLogs: string;
    stdoutLogs: string;
    currentRequestPromise?: any;
    cwdPromise: Promise<string>;
    platformPromise: Promise<Platform>;
    platform?: Platform | string;
    generator?: GeneratorConfig;
    incorrectlyPinnedBinaryTarget?: string;
    datasources?: DatasourceOverwrite[];
    startPromise?: Promise<any>;
    engineStartDeferred?: Deferred;
    engineStopDeferred?: StopDeferred;
    undici: Undici;
    constructor({ cwd, datamodelPath, prismaPath, generator, datasources, showColors, logLevel, logQueries, env, flags, clientVersion, enableExperimental, engineEndpoint, enableDebugLogs, enableEngineDebugMode, useUds, }: EngineConfig);
    private checkForTooManyEngines;
    private resolveCwd;
    on(event: 'query' | 'info' | 'warn' | 'error' | 'beforeExit', listener: (args?: any) => any): void;
    emitExit(): Promise<void>;
    getPlatform(): Promise<Platform>;
    private getQueryEnginePath;
    private handlePanic;
    private resolvePrismaPath;
    private getPrismaPath;
    private getFixedGenerator;
    printDatasources(): string;
    /**
     * Starts the engine, returns the url that it runs on
     */
    start(): Promise<void>;
    private getEngineEnvVars;
    private internalStart;
    stop(): Promise<void>;
    /**
     * If Prisma runs, stop it
     */
    _stop(): Promise<void>;
    kill(signal: string): Promise<void>;
    /**
     * Use the port 0 trick to get a new port
     */
    protected getFreePort(): Promise<number>;
    getConfig(): Promise<GetConfigResult>;
    _getConfig(): Promise<GetConfigResult>;
    version(): Promise<string>;
    request<T>(query: string, headers: Record<string, string>, numTry?: number): Promise<T>;
    requestBatch<T>(queries: string[], transaction?: boolean, numTry?: number): Promise<T>;
    private handleRequestError;
    private getLastLog;
    private graphQLToJSError;
}
export {};
