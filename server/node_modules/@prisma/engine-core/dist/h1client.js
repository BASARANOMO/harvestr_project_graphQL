"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.H1Client = void 0;
const http = __importStar(require("http"));
class H1Client {
    constructor() {
        this.closed = false;
        this.agent = new http.Agent({ keepAlive: true, maxSockets: 100 });
    }
    status(port) {
        return new Promise((resolve, reject) => {
            const req = http.request({
                agent: this.agent,
                hostname: 'localhost',
                path: '/',
                method: 'GET',
                port,
            }, (res) => {
                const chunks = [];
                res.on('data', (chunk) => {
                    chunks.push(chunk);
                });
                res.on('end', () => {
                    resolve({
                        data: String(Buffer.concat(chunks)),
                        headers: res.headers,
                    });
                });
            });
            req.on('error', reject);
            req.end();
        });
    }
    request(port, body) {
        return new Promise((resolve, reject) => {
            const req = http.request({
                agent: this.agent,
                hostname: 'localhost',
                path: '/',
                method: 'POST',
                port,
                headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': Buffer.byteLength(body),
                },
            }, (res) => {
                const chunks = [];
                res.on('data', (chunk) => {
                    chunks.push(chunk);
                });
                res.on('end', () => {
                    resolve({
                        data: JSON.parse(Buffer.concat(chunks)),
                        headers: res.headers,
                    });
                });
            });
            req.on('error', reject);
            req.write(body);
            req.end();
        });
    }
    close() {
        this.agent.destroy();
        this.closed = true;
    }
}
exports.H1Client = H1Client;
//# sourceMappingURL=h1client.js.map