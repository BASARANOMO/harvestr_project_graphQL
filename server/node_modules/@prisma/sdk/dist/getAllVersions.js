"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.engineVersions = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
var versions_1 = require("./versions");
Object.defineProperty(exports, "engineVersions", { enumerable: true, get: function () { return versions_1.engineVersions; } });
async function getAllVersions() {
    var _a, _b;
    const url = `https://registry.npmjs.org/@prisma/cli`;
    const pkg = await node_fetch_1.default(url).then(r => r.json());
    if (pkg.versions) {
        const obj = Object.create(null);
        for (const version in pkg.versions) {
            if (!version.startsWith('2.0.0-alpha') && version.startsWith('2.')) {
                const prismaVersion = (_b = (_a = pkg.versions[version]) === null || _a === void 0 ? void 0 : _a.prisma) === null || _b === void 0 ? void 0 : _b.version;
                if (prismaVersion) {
                    obj[version] = prismaVersion;
                }
            }
        }
        return obj;
    }
    return null;
}
async function saveVersions() {
    const versions = await getAllVersions();
    const str = JSON.stringify(versions);
    fs_1.default.writeFileSync(path_1.default.join(__dirname, 'versions.json'), str, 'utf-8');
}
// saveVersions()
//# sourceMappingURL=getAllVersions.js.map