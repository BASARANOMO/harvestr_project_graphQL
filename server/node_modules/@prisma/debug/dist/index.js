"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLogs = void 0;
const debug_1 = __importDefault(require("debug"));
const cache = [];
const MAX_LOGS = 100;
const namespaces = [];
// for our use-case, map is faster, as retrieving values is faster than with Set or Object
const enabledNamespaces = new Map();
// parse the enabled namespaces that come from process.env.DEBUG
const envDebug = process.env.DEBUG ? process.env.DEBUG + ',' : '';
const skips = debug_1.default.skips.slice();
const names = debug_1.default.names.slice();
// same algorithm as original `debug` library:
function isEnabledByEnvVar(name) {
    if (name[name.length - 1] === '*') {
        return true;
    }
    for (const skip of skips) {
        if (skip.test(name)) {
            return false;
        }
    }
    for (const nameRegex of names) {
        if (nameRegex.test(name)) {
            return true;
        }
    }
    return false;
}
function Debug(namespace) {
    const debug = debug_1.default(namespace);
    namespaces.push(namespace);
    debug_1.default.enable(envDebug + namespaces.join(','));
    // revert debug
    process.env.DEBUG = envDebug;
    if (isEnabledByEnvVar(namespace)) {
        enabledNamespaces.set(namespace, true);
    }
    const newDebug = (formatter, ...args) => {
        return debug(formatter, ...args);
    };
    newDebug.log = console.error.bind(console);
    newDebug.color = debug.color;
    newDebug.namespace = debug.namespace;
    newDebug.enabled = debug.enabled;
    newDebug.destroy = debug.destroy;
    newDebug.extend = debug.extend;
    debug.log = (...args) => {
        cache.push(args);
        // keeping 100 logs is just a heuristic. The real truncating comes later
        if (cache.length > MAX_LOGS) {
            cache.shift();
        }
        if (enabledNamespaces.has(namespace)) {
            newDebug.log(...args);
        }
    };
    return newDebug;
}
exports.default = Debug;
Debug.enable = (namespace) => {
    enabledNamespaces.set(namespace, true);
};
Debug.enabled = (namespace) => enabledNamespaces.has(namespace);
// https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers
// we need some space for other characters, so we go for 30k here
function getLogs(numChars = 7500) {
    // flatmap on text level
    let output = cache.map((c) => c.join('  ')).join('\n');
    if (output.length < numChars) {
        return output;
    }
    return output.slice(-numChars);
}
exports.getLogs = getLogs;
//# sourceMappingURL=index.js.map