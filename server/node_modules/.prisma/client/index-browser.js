
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.13.0
 * Query Engine version: 833ab05d2a20e822f6736a39a27de4fc8f6b3e49
 */
Prisma.prismaVersion = {
  client: "2.13.0",
  engine: "833ab05d2a20e822f6736a39a27de4fc8f6b3e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AccountScalarFieldEnum = makeEnum({
  id: 'id',
  username: 'username',
  hashedPassword: 'hashedPassword',
  personId: 'personId',
  projectId: 'projectId',
  type: 'type'
});

exports.Prisma.ChunkScalarFieldEnum = makeEnum({
  projectId: 'projectId',
  id: 'id',
  messageId: 'messageId',
  discoveryId: 'discoveryId'
});

exports.Prisma.ContributorAttributeScalarFieldEnum = makeEnum({
  projectId: 'projectId',
  id: 'id',
  appliesTo: 'appliesTo',
  name: 'name',
  type: 'type'
});

exports.Prisma.ContributorAttributeValueScalarFieldEnum = makeEnum({
  id: 'id',
  contributorAttributeId: 'contributorAttributeId',
  contributorAttributeType: 'contributorAttributeType',
  personId: 'personId',
  organizationId: 'organizationId',
  valuetext: 'valuetext'
});

exports.Prisma.DiscoveryScalarFieldEnum = makeEnum({
  projectId: 'projectId',
  id: 'id',
  title: 'title',
  description: 'description'
});

exports.Prisma.MessageScalarFieldEnum = makeEnum({
  projectId: 'projectId',
  id: 'id',
  requesterId: 'requesterId',
  submitterId: 'submitterId',
  clientId: 'clientId',
  title: 'title',
  content: 'content'
});

exports.Prisma.OrganizationScalarFieldEnum = makeEnum({
  projectId: 'projectId',
  id: 'id',
  name: 'name'
});

exports.Prisma.PersonScalarFieldEnum = makeEnum({
  projectId: 'projectId',
  id: 'id',
  name: 'name',
  email: 'email',
  organizationId: 'organizationId'
});

exports.Prisma.ProjectScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.SubMessageScalarFieldEnum = makeEnum({
  id: 'id',
  submitterId: 'submitterId',
  content: 'content',
  messageId: 'messageId'
});

exports.Prisma.TextSelectionScalarFieldEnum = makeEnum({
  id: 'id',
  offsetstart: 'offsetstart',
  length: 'length',
  submessagenumber: 'submessagenumber',
  content: 'content',
  chunkId: 'chunkId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.ACCOUNT_TYPE = makeEnum({
  MAIN_ADMIN: 'MAIN_ADMIN',
  ADMIN: 'ADMIN',
  VIEWER: 'VIEWER'
});

exports.ENTITY_TYPE = makeEnum({
  Person: 'Person',
  Organization: 'Organization'
});

exports.CONTRIBUTOR_ATTRIBUTE_TYPE = makeEnum({
  TEXT: 'TEXT',
  NUMERIC: 'NUMERIC',
  FINANCIAL: 'FINANCIAL',
  DECIMAL: 'DECIMAL',
  RATING: 'RATING',
  BOOLEAN: 'BOOLEAN',
  DATE: 'DATE',
  LIST: 'LIST',
  URL: 'URL'
});

exports.Prisma.ModelName = makeEnum({
  Account: 'Account',
  Chunk: 'Chunk',
  ContributorAttribute: 'ContributorAttribute',
  ContributorAttributeValue: 'ContributorAttributeValue',
  Discovery: 'Discovery',
  Message: 'Message',
  Organization: 'Organization',
  Person: 'Person',
  Project: 'Project',
  SubMessage: 'SubMessage',
  TextSelection: 'TextSelection'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma-client-js/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
