
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.13.0
 * Query Engine version: 833ab05d2a20e822f6736a39a27de4fc8f6b3e49
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;



/**
 * Used by group by
 */
export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>

/**
 * Like `Pick`, but with an array
 */
type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>





/**
 * Model Account
 */

export type Account = {
  id: number
  username: string
  hashedPassword: string
  personId: number
  projectId: number
  type: ACCOUNT_TYPE | null
}

/**
 * Model Chunk
 */

export type Chunk = {
  projectId: number
  id: number
  messageId: number
  discoveryId: number
}

/**
 * Model ContributorAttribute
 */

export type ContributorAttribute = {
  projectId: number
  id: number
  appliesTo: ENTITY_TYPE | null
  name: string
  type: CONTRIBUTOR_ATTRIBUTE_TYPE
}

/**
 * Model ContributorAttributeValue
 */

export type ContributorAttributeValue = {
  id: number
  contributorAttributeId: number
  contributorAttributeType: CONTRIBUTOR_ATTRIBUTE_TYPE
  personId: number
  organizationId: number
  valuetext: string | null
}

/**
 * Model Discovery
 */

export type Discovery = {
  projectId: number
  id: number
  title: string
  description: string | null
}

/**
 * Model Message
 */

export type Message = {
  projectId: number
  id: number
  requesterId: number
  submitterId: number
  clientId: string | null
  title: string | null
  content: string | null
}

/**
 * Model Organization
 */

export type Organization = {
  projectId: number
  id: number
  name: string
}

/**
 * Model Person
 */

export type Person = {
  projectId: number
  id: number
  name: string
  email: string
  organizationId: number
}

/**
 * Model Project
 */

export type Project = {
  id: number
  name: string
}

/**
 * Model SubMessage
 */

export type SubMessage = {
  id: number
  submitterId: number
  content: string
  messageId: number
}

/**
 * Model TextSelection
 */

export type TextSelection = {
  id: number
  offsetstart: number
  length: number
  submessagenumber: number
  content: string
  chunkId: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const ACCOUNT_TYPE: {
  MAIN_ADMIN: 'MAIN_ADMIN',
  ADMIN: 'ADMIN',
  VIEWER: 'VIEWER'
};

export type ACCOUNT_TYPE = (typeof ACCOUNT_TYPE)[keyof typeof ACCOUNT_TYPE]


export const ENTITY_TYPE: {
  Person: 'Person',
  Organization: 'Organization'
};

export type ENTITY_TYPE = (typeof ENTITY_TYPE)[keyof typeof ENTITY_TYPE]


export const CONTRIBUTOR_ATTRIBUTE_TYPE: {
  TEXT: 'TEXT',
  NUMERIC: 'NUMERIC',
  FINANCIAL: 'FINANCIAL',
  DECIMAL: 'DECIMAL',
  RATING: 'RATING',
  BOOLEAN: 'BOOLEAN',
  DATE: 'DATE',
  LIST: 'LIST',
  URL: 'URL'
};

export type CONTRIBUTOR_ATTRIBUTE_TYPE = (typeof CONTRIBUTOR_ATTRIBUTE_TYPE)[keyof typeof CONTRIBUTOR_ATTRIBUTE_TYPE]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Accounts
 * const accounts = await prisma.account.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Accounts
   * const accounts = await prisma.account.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate;

  /**
   * `prisma.chunk`: Exposes CRUD operations for the **Chunk** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chunks
    * const chunks = await prisma.chunk.findMany()
    * ```
    */
  get chunk(): Prisma.ChunkDelegate;

  /**
   * `prisma.contributorAttribute`: Exposes CRUD operations for the **ContributorAttribute** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContributorAttributes
    * const contributorAttributes = await prisma.contributorAttribute.findMany()
    * ```
    */
  get contributorAttribute(): Prisma.ContributorAttributeDelegate;

  /**
   * `prisma.contributorAttributeValue`: Exposes CRUD operations for the **ContributorAttributeValue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ContributorAttributeValues
    * const contributorAttributeValues = await prisma.contributorAttributeValue.findMany()
    * ```
    */
  get contributorAttributeValue(): Prisma.ContributorAttributeValueDelegate;

  /**
   * `prisma.discovery`: Exposes CRUD operations for the **Discovery** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Discoveries
    * const discoveries = await prisma.discovery.findMany()
    * ```
    */
  get discovery(): Prisma.DiscoveryDelegate;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate;

  /**
   * `prisma.person`: Exposes CRUD operations for the **Person** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more People
    * const people = await prisma.person.findMany()
    * ```
    */
  get person(): Prisma.PersonDelegate;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate;

  /**
   * `prisma.subMessage`: Exposes CRUD operations for the **SubMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubMessages
    * const subMessages = await prisma.subMessage.findMany()
    * ```
    */
  get subMessage(): Prisma.SubMessageDelegate;

  /**
   * `prisma.textSelection`: Exposes CRUD operations for the **TextSelection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TextSelections
    * const textSelections = await prisma.textSelection.findMany()
    * ```
    */
  get textSelection(): Prisma.TextSelectionDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.13.0
   * Query Engine version: 833ab05d2a20e822f6736a39a27de4fc8f6b3e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;



  /**
   * Used by group by
   */
  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Account: 'Account',
    Chunk: 'Chunk',
    ContributorAttribute: 'ContributorAttribute',
    ContributorAttributeValue: 'ContributorAttributeValue',
    Discovery: 'Discovery',
    Message: 'Message',
    Organization: 'Organization',
    Person: 'Person',
    Project: 'Project',
    SubMessage: 'SubMessage',
    TextSelection: 'TextSelection'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model Account
   */


  export type AggregateAccount = {
    count: number | null
    avg: AccountAvgAggregateOutputType | null
    sum: AccountSumAggregateOutputType | null
    min: AccountMinAggregateOutputType | null
    max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    id: number
    personId: number
    projectId: number
  }

  export type AccountSumAggregateOutputType = {
    id: number
    personId: number
    projectId: number
  }

  export type AccountMinAggregateOutputType = {
    id: number
    username: string | null
    hashedPassword: string | null
    personId: number
    projectId: number
    type: ACCOUNT_TYPE | null
  }

  export type AccountMaxAggregateOutputType = {
    id: number
    username: string | null
    hashedPassword: string | null
    personId: number
    projectId: number
    type: ACCOUNT_TYPE | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    username: number | null
    hashedPassword: number | null
    personId: number
    projectId: number
    type: number | null
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    id?: true
    personId?: true
    projectId?: true
  }

  export type AccountSumAggregateInputType = {
    id?: true
    personId?: true
    projectId?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    username?: true
    hashedPassword?: true
    personId?: true
    projectId?: true
    type?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    username?: true
    hashedPassword?: true
    personId?: true
    projectId?: true
    type?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    username?: true
    hashedPassword?: true
    personId?: true
    projectId?: true
    type?: true
    _all?: true
  }

  export type AggregateAccountArgs = {
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByInput>
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: AccountAvgAggregateInputType
    sum?: AccountSumAggregateInputType
    min?: AccountMinAggregateInputType
    max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AggregateAccountArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetAccountAggregateScalarType<T[P]>
  }

  export type GetAccountAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof AccountAvgAggregateOutputType ? AccountAvgAggregateOutputType[P] : never
  }

    



  export type AccountSelect = {
    id?: boolean
    username?: boolean
    hashedPassword?: boolean
    personId?: boolean
    projectId?: boolean
    type?: boolean
    person?: boolean | PersonArgs
    project?: boolean | ProjectArgs
  }

  export type AccountInclude = {
    person?: boolean | PersonArgs
    project?: boolean | ProjectArgs
  }

  export type AccountGetPayload<
    S extends boolean | null | undefined | AccountArgs,
    U = keyof S
      > = S extends true
        ? Account
    : S extends undefined
    ? never
    : S extends AccountArgs | FindManyAccountArgs
    ?'include' extends U
    ? Account  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'person'
        ? PersonGetPayload<S['include'][P]> :
        P extends 'project'
        ? ProjectGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Account ?Account [P]
  : 
          P extends 'person'
        ? PersonGetPayload<S['select'][P]> :
        P extends 'project'
        ? ProjectGetPayload<S['select'][P]> : never
  } 
    : Account
  : Account


  export interface AccountDelegate {
    /**
     * Find zero or one Account that matches the filter.
     * @param {FindUniqueAccountArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueAccountArgs>(
      args: Subset<T, FindUniqueAccountArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account | null>, Prisma__AccountClient<AccountGetPayload<T> | null>>
    /**
     * Find the first Account that matches the filter.
     * @param {FindFirstAccountArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstAccountArgs>(
      args?: Subset<T, FindFirstAccountArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account | null>, Prisma__AccountClient<AccountGetPayload<T> | null>>
    /**
     * Find zero or more Accounts that matches the filter.
     * @param {FindManyAccountArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyAccountArgs>(
      args?: Subset<T, FindManyAccountArgs>
    ): CheckSelect<T, Promise<Array<Account>>, Promise<Array<AccountGetPayload<T>>>>
    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs>(
      args: Subset<T, AccountCreateArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>
    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs>(
      args: Subset<T, AccountDeleteArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>
    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs>(
      args: Subset<T, AccountUpdateArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>
    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs>(
      args?: Subset<T, AccountDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Accounts.
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs>(
      args: Subset<T, AccountUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs>(
      args: Subset<T, AccountUpsertArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account>, Prisma__AccountClient<AccountGetPayload<T>>>
    /**
     * Find zero or one Account that matches the filter.
     * @param {FindUniqueAccountArgs} args - Arguments to find a Account
     * @deprecated This will be deprecated please use prisma.account.findUnique
     * @example
     * // Get one Account
     * const account = await prisma.account.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueAccountArgs>(
      args: Subset<T, FindUniqueAccountArgs>
    ): CheckSelect<T, Prisma__AccountClient<Account | null>, Prisma__AccountClient<AccountGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyAccountArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateAccountArgs>(args: Subset<T, AggregateAccountArgs>): Promise<GetAccountAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccountClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    person<T extends PersonArgs = {}>(args?: Subset<T, PersonArgs>): CheckSelect<T, Prisma__PersonClient<Person | null>, Prisma__PersonClient<PersonGetPayload<T> | null>>;

    project<T extends ProjectArgs = {}>(args?: Subset<T, ProjectArgs>): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Account findUnique
   */
  export type FindUniqueAccountArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account findFirst
   */
  export type FindFirstAccountArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AccountInclude | null
    /**
     * Filter, which Account to fetch.
    **/
    where?: AccountWhereInput
    orderBy?: Enumerable<AccountOrderByInput>
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account findMany
   */
  export type FindManyAccountArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AccountInclude | null
    /**
     * Filter, which Accounts to fetch.
    **/
    where?: AccountWhereInput
    /**
     * Determine the order of the Accounts to fetch.
    **/
    orderBy?: Enumerable<AccountOrderByInput>
    /**
     * Sets the position for listing Accounts.
    **/
    cursor?: AccountWhereUniqueInput
    /**
     * The number of Accounts to fetch. If negative number, it will take Accounts before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Accounts.
    **/
    skip?: number
    distinct?: Enumerable<AccountScalarFieldEnum>
  }


  /**
   * Account create
   */
  export type AccountCreateArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AccountInclude | null
    /**
     * The data needed to create a Account.
    **/
    data: AccountCreateInput
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AccountInclude | null
    /**
     * The data needed to update a Account.
    **/
    data: AccountUpdateInput
    /**
     * Choose, which Account to update.
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs = {
    data: AccountUpdateManyMutationInput
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AccountInclude | null
    /**
     * The filter to search for the Account to update in case it exists.
    **/
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
    **/
    create: AccountCreateInput
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
    **/
    update: AccountUpdateInput
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AccountInclude | null
    /**
     * Filter which Account to delete.
    **/
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs = {
    where?: AccountWhereInput
  }


  /**
   * Account without action
   */
  export type AccountArgs = {
    /**
     * Select specific fields to fetch from the Account
    **/
    select?: AccountSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: AccountInclude | null
  }



  /**
   * Model Chunk
   */


  export type AggregateChunk = {
    count: number | null
    avg: ChunkAvgAggregateOutputType | null
    sum: ChunkSumAggregateOutputType | null
    min: ChunkMinAggregateOutputType | null
    max: ChunkMaxAggregateOutputType | null
  }

  export type ChunkAvgAggregateOutputType = {
    projectId: number
    id: number
    messageId: number
    discoveryId: number
  }

  export type ChunkSumAggregateOutputType = {
    projectId: number
    id: number
    messageId: number
    discoveryId: number
  }

  export type ChunkMinAggregateOutputType = {
    projectId: number
    id: number
    messageId: number
    discoveryId: number
  }

  export type ChunkMaxAggregateOutputType = {
    projectId: number
    id: number
    messageId: number
    discoveryId: number
  }

  export type ChunkCountAggregateOutputType = {
    projectId: number
    id: number
    messageId: number
    discoveryId: number
    _all: number
  }


  export type ChunkAvgAggregateInputType = {
    projectId?: true
    id?: true
    messageId?: true
    discoveryId?: true
  }

  export type ChunkSumAggregateInputType = {
    projectId?: true
    id?: true
    messageId?: true
    discoveryId?: true
  }

  export type ChunkMinAggregateInputType = {
    projectId?: true
    id?: true
    messageId?: true
    discoveryId?: true
  }

  export type ChunkMaxAggregateInputType = {
    projectId?: true
    id?: true
    messageId?: true
    discoveryId?: true
  }

  export type ChunkCountAggregateInputType = {
    projectId?: true
    id?: true
    messageId?: true
    discoveryId?: true
    _all?: true
  }

  export type AggregateChunkArgs = {
    where?: ChunkWhereInput
    orderBy?: Enumerable<ChunkOrderByInput>
    cursor?: ChunkWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: ChunkAvgAggregateInputType
    sum?: ChunkSumAggregateInputType
    min?: ChunkMinAggregateInputType
    max?: ChunkMaxAggregateInputType
  }

  export type GetChunkAggregateType<T extends AggregateChunkArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetChunkAggregateScalarType<T[P]>
  }

  export type GetChunkAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof ChunkAvgAggregateOutputType ? ChunkAvgAggregateOutputType[P] : never
  }

    



  export type ChunkSelect = {
    projectId?: boolean
    id?: boolean
    messageId?: boolean
    discoveryId?: boolean
    discovery?: boolean | DiscoveryArgs
    message?: boolean | MessageArgs
    project?: boolean | ProjectArgs
    textSelections?: boolean | FindManyTextSelectionArgs
  }

  export type ChunkInclude = {
    discovery?: boolean | DiscoveryArgs
    message?: boolean | MessageArgs
    project?: boolean | ProjectArgs
    textSelections?: boolean | FindManyTextSelectionArgs
  }

  export type ChunkGetPayload<
    S extends boolean | null | undefined | ChunkArgs,
    U = keyof S
      > = S extends true
        ? Chunk
    : S extends undefined
    ? never
    : S extends ChunkArgs | FindManyChunkArgs
    ?'include' extends U
    ? Chunk  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'discovery'
        ? DiscoveryGetPayload<S['include'][P]> :
        P extends 'message'
        ? MessageGetPayload<S['include'][P]> :
        P extends 'project'
        ? ProjectGetPayload<S['include'][P]> :
        P extends 'textSelections'
        ? Array < TextSelectionGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Chunk ?Chunk [P]
  : 
          P extends 'discovery'
        ? DiscoveryGetPayload<S['select'][P]> :
        P extends 'message'
        ? MessageGetPayload<S['select'][P]> :
        P extends 'project'
        ? ProjectGetPayload<S['select'][P]> :
        P extends 'textSelections'
        ? Array < TextSelectionGetPayload<S['select'][P]>>  : never
  } 
    : Chunk
  : Chunk


  export interface ChunkDelegate {
    /**
     * Find zero or one Chunk that matches the filter.
     * @param {FindUniqueChunkArgs} args - Arguments to find a Chunk
     * @example
     * // Get one Chunk
     * const chunk = await prisma.chunk.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueChunkArgs>(
      args: Subset<T, FindUniqueChunkArgs>
    ): CheckSelect<T, Prisma__ChunkClient<Chunk | null>, Prisma__ChunkClient<ChunkGetPayload<T> | null>>
    /**
     * Find the first Chunk that matches the filter.
     * @param {FindFirstChunkArgs} args - Arguments to find a Chunk
     * @example
     * // Get one Chunk
     * const chunk = await prisma.chunk.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstChunkArgs>(
      args?: Subset<T, FindFirstChunkArgs>
    ): CheckSelect<T, Prisma__ChunkClient<Chunk | null>, Prisma__ChunkClient<ChunkGetPayload<T> | null>>
    /**
     * Find zero or more Chunks that matches the filter.
     * @param {FindManyChunkArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chunks
     * const chunks = await prisma.chunk.findMany()
     * 
     * // Get first 10 Chunks
     * const chunks = await prisma.chunk.findMany({ take: 10 })
     * 
     * // Only select the `projectId`
     * const chunkWithProjectIdOnly = await prisma.chunk.findMany({ select: { projectId: true } })
     * 
    **/
    findMany<T extends FindManyChunkArgs>(
      args?: Subset<T, FindManyChunkArgs>
    ): CheckSelect<T, Promise<Array<Chunk>>, Promise<Array<ChunkGetPayload<T>>>>
    /**
     * Create a Chunk.
     * @param {ChunkCreateArgs} args - Arguments to create a Chunk.
     * @example
     * // Create one Chunk
     * const Chunk = await prisma.chunk.create({
     *   data: {
     *     // ... data to create a Chunk
     *   }
     * })
     * 
    **/
    create<T extends ChunkCreateArgs>(
      args: Subset<T, ChunkCreateArgs>
    ): CheckSelect<T, Prisma__ChunkClient<Chunk>, Prisma__ChunkClient<ChunkGetPayload<T>>>
    /**
     * Delete a Chunk.
     * @param {ChunkDeleteArgs} args - Arguments to delete one Chunk.
     * @example
     * // Delete one Chunk
     * const Chunk = await prisma.chunk.delete({
     *   where: {
     *     // ... filter to delete one Chunk
     *   }
     * })
     * 
    **/
    delete<T extends ChunkDeleteArgs>(
      args: Subset<T, ChunkDeleteArgs>
    ): CheckSelect<T, Prisma__ChunkClient<Chunk>, Prisma__ChunkClient<ChunkGetPayload<T>>>
    /**
     * Update one Chunk.
     * @param {ChunkUpdateArgs} args - Arguments to update one Chunk.
     * @example
     * // Update one Chunk
     * const chunk = await prisma.chunk.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChunkUpdateArgs>(
      args: Subset<T, ChunkUpdateArgs>
    ): CheckSelect<T, Prisma__ChunkClient<Chunk>, Prisma__ChunkClient<ChunkGetPayload<T>>>
    /**
     * Delete zero or more Chunks.
     * @param {ChunkDeleteManyArgs} args - Arguments to filter Chunks to delete.
     * @example
     * // Delete a few Chunks
     * const { count } = await prisma.chunk.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChunkDeleteManyArgs>(
      args?: Subset<T, ChunkDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Chunks.
     * @param {ChunkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chunks
     * const chunk = await prisma.chunk.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChunkUpdateManyArgs>(
      args: Subset<T, ChunkUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Chunk.
     * @param {ChunkUpsertArgs} args - Arguments to update or create a Chunk.
     * @example
     * // Update or create a Chunk
     * const chunk = await prisma.chunk.upsert({
     *   create: {
     *     // ... data to create a Chunk
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chunk we want to update
     *   }
     * })
    **/
    upsert<T extends ChunkUpsertArgs>(
      args: Subset<T, ChunkUpsertArgs>
    ): CheckSelect<T, Prisma__ChunkClient<Chunk>, Prisma__ChunkClient<ChunkGetPayload<T>>>
    /**
     * Find zero or one Chunk that matches the filter.
     * @param {FindUniqueChunkArgs} args - Arguments to find a Chunk
     * @deprecated This will be deprecated please use prisma.chunk.findUnique
     * @example
     * // Get one Chunk
     * const chunk = await prisma.chunk.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueChunkArgs>(
      args: Subset<T, FindUniqueChunkArgs>
    ): CheckSelect<T, Prisma__ChunkClient<Chunk | null>, Prisma__ChunkClient<ChunkGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyChunkArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateChunkArgs>(args: Subset<T, AggregateChunkArgs>): Promise<GetChunkAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chunk.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChunkClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    discovery<T extends DiscoveryArgs = {}>(args?: Subset<T, DiscoveryArgs>): CheckSelect<T, Prisma__DiscoveryClient<Discovery | null>, Prisma__DiscoveryClient<DiscoveryGetPayload<T> | null>>;

    message<T extends MessageArgs = {}>(args?: Subset<T, MessageArgs>): CheckSelect<T, Prisma__MessageClient<Message | null>, Prisma__MessageClient<MessageGetPayload<T> | null>>;

    project<T extends ProjectArgs = {}>(args?: Subset<T, ProjectArgs>): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>;

    textSelections<T extends FindManyTextSelectionArgs = {}>(args?: Subset<T, FindManyTextSelectionArgs>): CheckSelect<T, Promise<Array<TextSelection>>, Promise<Array<TextSelectionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Chunk findUnique
   */
  export type FindUniqueChunkArgs = {
    /**
     * Select specific fields to fetch from the Chunk
    **/
    select?: ChunkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ChunkInclude | null
    /**
     * Filter, which Chunk to fetch.
    **/
    where: ChunkWhereUniqueInput
  }


  /**
   * Chunk findFirst
   */
  export type FindFirstChunkArgs = {
    /**
     * Select specific fields to fetch from the Chunk
    **/
    select?: ChunkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ChunkInclude | null
    /**
     * Filter, which Chunk to fetch.
    **/
    where?: ChunkWhereInput
    orderBy?: Enumerable<ChunkOrderByInput>
    cursor?: ChunkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChunkScalarFieldEnum>
  }


  /**
   * Chunk findMany
   */
  export type FindManyChunkArgs = {
    /**
     * Select specific fields to fetch from the Chunk
    **/
    select?: ChunkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ChunkInclude | null
    /**
     * Filter, which Chunks to fetch.
    **/
    where?: ChunkWhereInput
    /**
     * Determine the order of the Chunks to fetch.
    **/
    orderBy?: Enumerable<ChunkOrderByInput>
    /**
     * Sets the position for listing Chunks.
    **/
    cursor?: ChunkWhereUniqueInput
    /**
     * The number of Chunks to fetch. If negative number, it will take Chunks before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Chunks.
    **/
    skip?: number
    distinct?: Enumerable<ChunkScalarFieldEnum>
  }


  /**
   * Chunk create
   */
  export type ChunkCreateArgs = {
    /**
     * Select specific fields to fetch from the Chunk
    **/
    select?: ChunkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ChunkInclude | null
    /**
     * The data needed to create a Chunk.
    **/
    data: ChunkCreateInput
  }


  /**
   * Chunk update
   */
  export type ChunkUpdateArgs = {
    /**
     * Select specific fields to fetch from the Chunk
    **/
    select?: ChunkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ChunkInclude | null
    /**
     * The data needed to update a Chunk.
    **/
    data: ChunkUpdateInput
    /**
     * Choose, which Chunk to update.
    **/
    where: ChunkWhereUniqueInput
  }


  /**
   * Chunk updateMany
   */
  export type ChunkUpdateManyArgs = {
    data: ChunkUpdateManyMutationInput
    where?: ChunkWhereInput
  }


  /**
   * Chunk upsert
   */
  export type ChunkUpsertArgs = {
    /**
     * Select specific fields to fetch from the Chunk
    **/
    select?: ChunkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ChunkInclude | null
    /**
     * The filter to search for the Chunk to update in case it exists.
    **/
    where: ChunkWhereUniqueInput
    /**
     * In case the Chunk found by the `where` argument doesn't exist, create a new Chunk with this data.
    **/
    create: ChunkCreateInput
    /**
     * In case the Chunk was found with the provided `where` argument, update it with this data.
    **/
    update: ChunkUpdateInput
  }


  /**
   * Chunk delete
   */
  export type ChunkDeleteArgs = {
    /**
     * Select specific fields to fetch from the Chunk
    **/
    select?: ChunkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ChunkInclude | null
    /**
     * Filter which Chunk to delete.
    **/
    where: ChunkWhereUniqueInput
  }


  /**
   * Chunk deleteMany
   */
  export type ChunkDeleteManyArgs = {
    where?: ChunkWhereInput
  }


  /**
   * Chunk without action
   */
  export type ChunkArgs = {
    /**
     * Select specific fields to fetch from the Chunk
    **/
    select?: ChunkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ChunkInclude | null
  }



  /**
   * Model ContributorAttribute
   */


  export type AggregateContributorAttribute = {
    count: number | null
    avg: ContributorAttributeAvgAggregateOutputType | null
    sum: ContributorAttributeSumAggregateOutputType | null
    min: ContributorAttributeMinAggregateOutputType | null
    max: ContributorAttributeMaxAggregateOutputType | null
  }

  export type ContributorAttributeAvgAggregateOutputType = {
    projectId: number
    id: number
  }

  export type ContributorAttributeSumAggregateOutputType = {
    projectId: number
    id: number
  }

  export type ContributorAttributeMinAggregateOutputType = {
    projectId: number
    id: number
    appliesTo: ENTITY_TYPE | null
    name: string | null
    type: CONTRIBUTOR_ATTRIBUTE_TYPE | null
  }

  export type ContributorAttributeMaxAggregateOutputType = {
    projectId: number
    id: number
    appliesTo: ENTITY_TYPE | null
    name: string | null
    type: CONTRIBUTOR_ATTRIBUTE_TYPE | null
  }

  export type ContributorAttributeCountAggregateOutputType = {
    projectId: number
    id: number
    appliesTo: number | null
    name: number | null
    type: number | null
    _all: number
  }


  export type ContributorAttributeAvgAggregateInputType = {
    projectId?: true
    id?: true
  }

  export type ContributorAttributeSumAggregateInputType = {
    projectId?: true
    id?: true
  }

  export type ContributorAttributeMinAggregateInputType = {
    projectId?: true
    id?: true
    appliesTo?: true
    name?: true
    type?: true
  }

  export type ContributorAttributeMaxAggregateInputType = {
    projectId?: true
    id?: true
    appliesTo?: true
    name?: true
    type?: true
  }

  export type ContributorAttributeCountAggregateInputType = {
    projectId?: true
    id?: true
    appliesTo?: true
    name?: true
    type?: true
    _all?: true
  }

  export type AggregateContributorAttributeArgs = {
    where?: ContributorAttributeWhereInput
    orderBy?: Enumerable<ContributorAttributeOrderByInput>
    cursor?: ContributorAttributeWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: ContributorAttributeAvgAggregateInputType
    sum?: ContributorAttributeSumAggregateInputType
    min?: ContributorAttributeMinAggregateInputType
    max?: ContributorAttributeMaxAggregateInputType
  }

  export type GetContributorAttributeAggregateType<T extends AggregateContributorAttributeArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetContributorAttributeAggregateScalarType<T[P]>
  }

  export type GetContributorAttributeAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof ContributorAttributeAvgAggregateOutputType ? ContributorAttributeAvgAggregateOutputType[P] : never
  }

    



  export type ContributorAttributeSelect = {
    projectId?: boolean
    id?: boolean
    appliesTo?: boolean
    name?: boolean
    type?: boolean
    project?: boolean | ProjectArgs
    contributorAttributeValues?: boolean | FindManyContributorAttributeValueArgs
  }

  export type ContributorAttributeInclude = {
    project?: boolean | ProjectArgs
    contributorAttributeValues?: boolean | FindManyContributorAttributeValueArgs
  }

  export type ContributorAttributeGetPayload<
    S extends boolean | null | undefined | ContributorAttributeArgs,
    U = keyof S
      > = S extends true
        ? ContributorAttribute
    : S extends undefined
    ? never
    : S extends ContributorAttributeArgs | FindManyContributorAttributeArgs
    ?'include' extends U
    ? ContributorAttribute  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'project'
        ? ProjectGetPayload<S['include'][P]> :
        P extends 'contributorAttributeValues'
        ? Array < ContributorAttributeValueGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ContributorAttribute ?ContributorAttribute [P]
  : 
          P extends 'project'
        ? ProjectGetPayload<S['select'][P]> :
        P extends 'contributorAttributeValues'
        ? Array < ContributorAttributeValueGetPayload<S['select'][P]>>  : never
  } 
    : ContributorAttribute
  : ContributorAttribute


  export interface ContributorAttributeDelegate {
    /**
     * Find zero or one ContributorAttribute that matches the filter.
     * @param {FindUniqueContributorAttributeArgs} args - Arguments to find a ContributorAttribute
     * @example
     * // Get one ContributorAttribute
     * const contributorAttribute = await prisma.contributorAttribute.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueContributorAttributeArgs>(
      args: Subset<T, FindUniqueContributorAttributeArgs>
    ): CheckSelect<T, Prisma__ContributorAttributeClient<ContributorAttribute | null>, Prisma__ContributorAttributeClient<ContributorAttributeGetPayload<T> | null>>
    /**
     * Find the first ContributorAttribute that matches the filter.
     * @param {FindFirstContributorAttributeArgs} args - Arguments to find a ContributorAttribute
     * @example
     * // Get one ContributorAttribute
     * const contributorAttribute = await prisma.contributorAttribute.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstContributorAttributeArgs>(
      args?: Subset<T, FindFirstContributorAttributeArgs>
    ): CheckSelect<T, Prisma__ContributorAttributeClient<ContributorAttribute | null>, Prisma__ContributorAttributeClient<ContributorAttributeGetPayload<T> | null>>
    /**
     * Find zero or more ContributorAttributes that matches the filter.
     * @param {FindManyContributorAttributeArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContributorAttributes
     * const contributorAttributes = await prisma.contributorAttribute.findMany()
     * 
     * // Get first 10 ContributorAttributes
     * const contributorAttributes = await prisma.contributorAttribute.findMany({ take: 10 })
     * 
     * // Only select the `projectId`
     * const contributorAttributeWithProjectIdOnly = await prisma.contributorAttribute.findMany({ select: { projectId: true } })
     * 
    **/
    findMany<T extends FindManyContributorAttributeArgs>(
      args?: Subset<T, FindManyContributorAttributeArgs>
    ): CheckSelect<T, Promise<Array<ContributorAttribute>>, Promise<Array<ContributorAttributeGetPayload<T>>>>
    /**
     * Create a ContributorAttribute.
     * @param {ContributorAttributeCreateArgs} args - Arguments to create a ContributorAttribute.
     * @example
     * // Create one ContributorAttribute
     * const ContributorAttribute = await prisma.contributorAttribute.create({
     *   data: {
     *     // ... data to create a ContributorAttribute
     *   }
     * })
     * 
    **/
    create<T extends ContributorAttributeCreateArgs>(
      args: Subset<T, ContributorAttributeCreateArgs>
    ): CheckSelect<T, Prisma__ContributorAttributeClient<ContributorAttribute>, Prisma__ContributorAttributeClient<ContributorAttributeGetPayload<T>>>
    /**
     * Delete a ContributorAttribute.
     * @param {ContributorAttributeDeleteArgs} args - Arguments to delete one ContributorAttribute.
     * @example
     * // Delete one ContributorAttribute
     * const ContributorAttribute = await prisma.contributorAttribute.delete({
     *   where: {
     *     // ... filter to delete one ContributorAttribute
     *   }
     * })
     * 
    **/
    delete<T extends ContributorAttributeDeleteArgs>(
      args: Subset<T, ContributorAttributeDeleteArgs>
    ): CheckSelect<T, Prisma__ContributorAttributeClient<ContributorAttribute>, Prisma__ContributorAttributeClient<ContributorAttributeGetPayload<T>>>
    /**
     * Update one ContributorAttribute.
     * @param {ContributorAttributeUpdateArgs} args - Arguments to update one ContributorAttribute.
     * @example
     * // Update one ContributorAttribute
     * const contributorAttribute = await prisma.contributorAttribute.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContributorAttributeUpdateArgs>(
      args: Subset<T, ContributorAttributeUpdateArgs>
    ): CheckSelect<T, Prisma__ContributorAttributeClient<ContributorAttribute>, Prisma__ContributorAttributeClient<ContributorAttributeGetPayload<T>>>
    /**
     * Delete zero or more ContributorAttributes.
     * @param {ContributorAttributeDeleteManyArgs} args - Arguments to filter ContributorAttributes to delete.
     * @example
     * // Delete a few ContributorAttributes
     * const { count } = await prisma.contributorAttribute.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContributorAttributeDeleteManyArgs>(
      args?: Subset<T, ContributorAttributeDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more ContributorAttributes.
     * @param {ContributorAttributeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContributorAttributes
     * const contributorAttribute = await prisma.contributorAttribute.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContributorAttributeUpdateManyArgs>(
      args: Subset<T, ContributorAttributeUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one ContributorAttribute.
     * @param {ContributorAttributeUpsertArgs} args - Arguments to update or create a ContributorAttribute.
     * @example
     * // Update or create a ContributorAttribute
     * const contributorAttribute = await prisma.contributorAttribute.upsert({
     *   create: {
     *     // ... data to create a ContributorAttribute
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContributorAttribute we want to update
     *   }
     * })
    **/
    upsert<T extends ContributorAttributeUpsertArgs>(
      args: Subset<T, ContributorAttributeUpsertArgs>
    ): CheckSelect<T, Prisma__ContributorAttributeClient<ContributorAttribute>, Prisma__ContributorAttributeClient<ContributorAttributeGetPayload<T>>>
    /**
     * Find zero or one ContributorAttribute that matches the filter.
     * @param {FindUniqueContributorAttributeArgs} args - Arguments to find a ContributorAttribute
     * @deprecated This will be deprecated please use prisma.contributorAttribute.findUnique
     * @example
     * // Get one ContributorAttribute
     * const contributorAttribute = await prisma.contributorAttribute.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueContributorAttributeArgs>(
      args: Subset<T, FindUniqueContributorAttributeArgs>
    ): CheckSelect<T, Prisma__ContributorAttributeClient<ContributorAttribute | null>, Prisma__ContributorAttributeClient<ContributorAttributeGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyContributorAttributeArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateContributorAttributeArgs>(args: Subset<T, AggregateContributorAttributeArgs>): Promise<GetContributorAttributeAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContributorAttribute.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContributorAttributeClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    project<T extends ProjectArgs = {}>(args?: Subset<T, ProjectArgs>): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>;

    contributorAttributeValues<T extends FindManyContributorAttributeValueArgs = {}>(args?: Subset<T, FindManyContributorAttributeValueArgs>): CheckSelect<T, Promise<Array<ContributorAttributeValue>>, Promise<Array<ContributorAttributeValueGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ContributorAttribute findUnique
   */
  export type FindUniqueContributorAttributeArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttribute
    **/
    select?: ContributorAttributeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeInclude | null
    /**
     * Filter, which ContributorAttribute to fetch.
    **/
    where: ContributorAttributeWhereUniqueInput
  }


  /**
   * ContributorAttribute findFirst
   */
  export type FindFirstContributorAttributeArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttribute
    **/
    select?: ContributorAttributeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeInclude | null
    /**
     * Filter, which ContributorAttribute to fetch.
    **/
    where?: ContributorAttributeWhereInput
    orderBy?: Enumerable<ContributorAttributeOrderByInput>
    cursor?: ContributorAttributeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ContributorAttributeScalarFieldEnum>
  }


  /**
   * ContributorAttribute findMany
   */
  export type FindManyContributorAttributeArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttribute
    **/
    select?: ContributorAttributeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeInclude | null
    /**
     * Filter, which ContributorAttributes to fetch.
    **/
    where?: ContributorAttributeWhereInput
    /**
     * Determine the order of the ContributorAttributes to fetch.
    **/
    orderBy?: Enumerable<ContributorAttributeOrderByInput>
    /**
     * Sets the position for listing ContributorAttributes.
    **/
    cursor?: ContributorAttributeWhereUniqueInput
    /**
     * The number of ContributorAttributes to fetch. If negative number, it will take ContributorAttributes before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` ContributorAttributes.
    **/
    skip?: number
    distinct?: Enumerable<ContributorAttributeScalarFieldEnum>
  }


  /**
   * ContributorAttribute create
   */
  export type ContributorAttributeCreateArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttribute
    **/
    select?: ContributorAttributeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeInclude | null
    /**
     * The data needed to create a ContributorAttribute.
    **/
    data: ContributorAttributeCreateInput
  }


  /**
   * ContributorAttribute update
   */
  export type ContributorAttributeUpdateArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttribute
    **/
    select?: ContributorAttributeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeInclude | null
    /**
     * The data needed to update a ContributorAttribute.
    **/
    data: ContributorAttributeUpdateInput
    /**
     * Choose, which ContributorAttribute to update.
    **/
    where: ContributorAttributeWhereUniqueInput
  }


  /**
   * ContributorAttribute updateMany
   */
  export type ContributorAttributeUpdateManyArgs = {
    data: ContributorAttributeUpdateManyMutationInput
    where?: ContributorAttributeWhereInput
  }


  /**
   * ContributorAttribute upsert
   */
  export type ContributorAttributeUpsertArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttribute
    **/
    select?: ContributorAttributeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeInclude | null
    /**
     * The filter to search for the ContributorAttribute to update in case it exists.
    **/
    where: ContributorAttributeWhereUniqueInput
    /**
     * In case the ContributorAttribute found by the `where` argument doesn't exist, create a new ContributorAttribute with this data.
    **/
    create: ContributorAttributeCreateInput
    /**
     * In case the ContributorAttribute was found with the provided `where` argument, update it with this data.
    **/
    update: ContributorAttributeUpdateInput
  }


  /**
   * ContributorAttribute delete
   */
  export type ContributorAttributeDeleteArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttribute
    **/
    select?: ContributorAttributeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeInclude | null
    /**
     * Filter which ContributorAttribute to delete.
    **/
    where: ContributorAttributeWhereUniqueInput
  }


  /**
   * ContributorAttribute deleteMany
   */
  export type ContributorAttributeDeleteManyArgs = {
    where?: ContributorAttributeWhereInput
  }


  /**
   * ContributorAttribute without action
   */
  export type ContributorAttributeArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttribute
    **/
    select?: ContributorAttributeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeInclude | null
  }



  /**
   * Model ContributorAttributeValue
   */


  export type AggregateContributorAttributeValue = {
    count: number | null
    avg: ContributorAttributeValueAvgAggregateOutputType | null
    sum: ContributorAttributeValueSumAggregateOutputType | null
    min: ContributorAttributeValueMinAggregateOutputType | null
    max: ContributorAttributeValueMaxAggregateOutputType | null
  }

  export type ContributorAttributeValueAvgAggregateOutputType = {
    id: number
    contributorAttributeId: number
    personId: number
    organizationId: number
  }

  export type ContributorAttributeValueSumAggregateOutputType = {
    id: number
    contributorAttributeId: number
    personId: number
    organizationId: number
  }

  export type ContributorAttributeValueMinAggregateOutputType = {
    id: number
    contributorAttributeId: number
    contributorAttributeType: CONTRIBUTOR_ATTRIBUTE_TYPE | null
    personId: number
    organizationId: number
    valuetext: string | null
  }

  export type ContributorAttributeValueMaxAggregateOutputType = {
    id: number
    contributorAttributeId: number
    contributorAttributeType: CONTRIBUTOR_ATTRIBUTE_TYPE | null
    personId: number
    organizationId: number
    valuetext: string | null
  }

  export type ContributorAttributeValueCountAggregateOutputType = {
    id: number
    contributorAttributeId: number
    contributorAttributeType: number | null
    personId: number
    organizationId: number
    valuetext: number | null
    _all: number
  }


  export type ContributorAttributeValueAvgAggregateInputType = {
    id?: true
    contributorAttributeId?: true
    personId?: true
    organizationId?: true
  }

  export type ContributorAttributeValueSumAggregateInputType = {
    id?: true
    contributorAttributeId?: true
    personId?: true
    organizationId?: true
  }

  export type ContributorAttributeValueMinAggregateInputType = {
    id?: true
    contributorAttributeId?: true
    contributorAttributeType?: true
    personId?: true
    organizationId?: true
    valuetext?: true
  }

  export type ContributorAttributeValueMaxAggregateInputType = {
    id?: true
    contributorAttributeId?: true
    contributorAttributeType?: true
    personId?: true
    organizationId?: true
    valuetext?: true
  }

  export type ContributorAttributeValueCountAggregateInputType = {
    id?: true
    contributorAttributeId?: true
    contributorAttributeType?: true
    personId?: true
    organizationId?: true
    valuetext?: true
    _all?: true
  }

  export type AggregateContributorAttributeValueArgs = {
    where?: ContributorAttributeValueWhereInput
    orderBy?: Enumerable<ContributorAttributeValueOrderByInput>
    cursor?: ContributorAttributeValueWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: ContributorAttributeValueAvgAggregateInputType
    sum?: ContributorAttributeValueSumAggregateInputType
    min?: ContributorAttributeValueMinAggregateInputType
    max?: ContributorAttributeValueMaxAggregateInputType
  }

  export type GetContributorAttributeValueAggregateType<T extends AggregateContributorAttributeValueArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetContributorAttributeValueAggregateScalarType<T[P]>
  }

  export type GetContributorAttributeValueAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof ContributorAttributeValueAvgAggregateOutputType ? ContributorAttributeValueAvgAggregateOutputType[P] : never
  }

    



  export type ContributorAttributeValueSelect = {
    id?: boolean
    contributorAttributeId?: boolean
    contributorAttributeType?: boolean
    personId?: boolean
    organizationId?: boolean
    valuetext?: boolean
    contributorAttribute?: boolean | ContributorAttributeArgs
    organization?: boolean | OrganizationArgs
    person?: boolean | PersonArgs
  }

  export type ContributorAttributeValueInclude = {
    contributorAttribute?: boolean | ContributorAttributeArgs
    organization?: boolean | OrganizationArgs
    person?: boolean | PersonArgs
  }

  export type ContributorAttributeValueGetPayload<
    S extends boolean | null | undefined | ContributorAttributeValueArgs,
    U = keyof S
      > = S extends true
        ? ContributorAttributeValue
    : S extends undefined
    ? never
    : S extends ContributorAttributeValueArgs | FindManyContributorAttributeValueArgs
    ?'include' extends U
    ? ContributorAttributeValue  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'contributorAttribute'
        ? ContributorAttributeGetPayload<S['include'][P]> :
        P extends 'organization'
        ? OrganizationGetPayload<S['include'][P]> :
        P extends 'person'
        ? PersonGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof ContributorAttributeValue ?ContributorAttributeValue [P]
  : 
          P extends 'contributorAttribute'
        ? ContributorAttributeGetPayload<S['select'][P]> :
        P extends 'organization'
        ? OrganizationGetPayload<S['select'][P]> :
        P extends 'person'
        ? PersonGetPayload<S['select'][P]> : never
  } 
    : ContributorAttributeValue
  : ContributorAttributeValue


  export interface ContributorAttributeValueDelegate {
    /**
     * Find zero or one ContributorAttributeValue that matches the filter.
     * @param {FindUniqueContributorAttributeValueArgs} args - Arguments to find a ContributorAttributeValue
     * @example
     * // Get one ContributorAttributeValue
     * const contributorAttributeValue = await prisma.contributorAttributeValue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueContributorAttributeValueArgs>(
      args: Subset<T, FindUniqueContributorAttributeValueArgs>
    ): CheckSelect<T, Prisma__ContributorAttributeValueClient<ContributorAttributeValue | null>, Prisma__ContributorAttributeValueClient<ContributorAttributeValueGetPayload<T> | null>>
    /**
     * Find the first ContributorAttributeValue that matches the filter.
     * @param {FindFirstContributorAttributeValueArgs} args - Arguments to find a ContributorAttributeValue
     * @example
     * // Get one ContributorAttributeValue
     * const contributorAttributeValue = await prisma.contributorAttributeValue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstContributorAttributeValueArgs>(
      args?: Subset<T, FindFirstContributorAttributeValueArgs>
    ): CheckSelect<T, Prisma__ContributorAttributeValueClient<ContributorAttributeValue | null>, Prisma__ContributorAttributeValueClient<ContributorAttributeValueGetPayload<T> | null>>
    /**
     * Find zero or more ContributorAttributeValues that matches the filter.
     * @param {FindManyContributorAttributeValueArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ContributorAttributeValues
     * const contributorAttributeValues = await prisma.contributorAttributeValue.findMany()
     * 
     * // Get first 10 ContributorAttributeValues
     * const contributorAttributeValues = await prisma.contributorAttributeValue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contributorAttributeValueWithIdOnly = await prisma.contributorAttributeValue.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyContributorAttributeValueArgs>(
      args?: Subset<T, FindManyContributorAttributeValueArgs>
    ): CheckSelect<T, Promise<Array<ContributorAttributeValue>>, Promise<Array<ContributorAttributeValueGetPayload<T>>>>
    /**
     * Create a ContributorAttributeValue.
     * @param {ContributorAttributeValueCreateArgs} args - Arguments to create a ContributorAttributeValue.
     * @example
     * // Create one ContributorAttributeValue
     * const ContributorAttributeValue = await prisma.contributorAttributeValue.create({
     *   data: {
     *     // ... data to create a ContributorAttributeValue
     *   }
     * })
     * 
    **/
    create<T extends ContributorAttributeValueCreateArgs>(
      args: Subset<T, ContributorAttributeValueCreateArgs>
    ): CheckSelect<T, Prisma__ContributorAttributeValueClient<ContributorAttributeValue>, Prisma__ContributorAttributeValueClient<ContributorAttributeValueGetPayload<T>>>
    /**
     * Delete a ContributorAttributeValue.
     * @param {ContributorAttributeValueDeleteArgs} args - Arguments to delete one ContributorAttributeValue.
     * @example
     * // Delete one ContributorAttributeValue
     * const ContributorAttributeValue = await prisma.contributorAttributeValue.delete({
     *   where: {
     *     // ... filter to delete one ContributorAttributeValue
     *   }
     * })
     * 
    **/
    delete<T extends ContributorAttributeValueDeleteArgs>(
      args: Subset<T, ContributorAttributeValueDeleteArgs>
    ): CheckSelect<T, Prisma__ContributorAttributeValueClient<ContributorAttributeValue>, Prisma__ContributorAttributeValueClient<ContributorAttributeValueGetPayload<T>>>
    /**
     * Update one ContributorAttributeValue.
     * @param {ContributorAttributeValueUpdateArgs} args - Arguments to update one ContributorAttributeValue.
     * @example
     * // Update one ContributorAttributeValue
     * const contributorAttributeValue = await prisma.contributorAttributeValue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ContributorAttributeValueUpdateArgs>(
      args: Subset<T, ContributorAttributeValueUpdateArgs>
    ): CheckSelect<T, Prisma__ContributorAttributeValueClient<ContributorAttributeValue>, Prisma__ContributorAttributeValueClient<ContributorAttributeValueGetPayload<T>>>
    /**
     * Delete zero or more ContributorAttributeValues.
     * @param {ContributorAttributeValueDeleteManyArgs} args - Arguments to filter ContributorAttributeValues to delete.
     * @example
     * // Delete a few ContributorAttributeValues
     * const { count } = await prisma.contributorAttributeValue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ContributorAttributeValueDeleteManyArgs>(
      args?: Subset<T, ContributorAttributeValueDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more ContributorAttributeValues.
     * @param {ContributorAttributeValueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ContributorAttributeValues
     * const contributorAttributeValue = await prisma.contributorAttributeValue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ContributorAttributeValueUpdateManyArgs>(
      args: Subset<T, ContributorAttributeValueUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one ContributorAttributeValue.
     * @param {ContributorAttributeValueUpsertArgs} args - Arguments to update or create a ContributorAttributeValue.
     * @example
     * // Update or create a ContributorAttributeValue
     * const contributorAttributeValue = await prisma.contributorAttributeValue.upsert({
     *   create: {
     *     // ... data to create a ContributorAttributeValue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ContributorAttributeValue we want to update
     *   }
     * })
    **/
    upsert<T extends ContributorAttributeValueUpsertArgs>(
      args: Subset<T, ContributorAttributeValueUpsertArgs>
    ): CheckSelect<T, Prisma__ContributorAttributeValueClient<ContributorAttributeValue>, Prisma__ContributorAttributeValueClient<ContributorAttributeValueGetPayload<T>>>
    /**
     * Find zero or one ContributorAttributeValue that matches the filter.
     * @param {FindUniqueContributorAttributeValueArgs} args - Arguments to find a ContributorAttributeValue
     * @deprecated This will be deprecated please use prisma.contributorAttributeValue.findUnique
     * @example
     * // Get one ContributorAttributeValue
     * const contributorAttributeValue = await prisma.contributorAttributeValue.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueContributorAttributeValueArgs>(
      args: Subset<T, FindUniqueContributorAttributeValueArgs>
    ): CheckSelect<T, Prisma__ContributorAttributeValueClient<ContributorAttributeValue | null>, Prisma__ContributorAttributeValueClient<ContributorAttributeValueGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyContributorAttributeValueArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateContributorAttributeValueArgs>(args: Subset<T, AggregateContributorAttributeValueArgs>): Promise<GetContributorAttributeValueAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ContributorAttributeValue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ContributorAttributeValueClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    contributorAttribute<T extends ContributorAttributeArgs = {}>(args?: Subset<T, ContributorAttributeArgs>): CheckSelect<T, Prisma__ContributorAttributeClient<ContributorAttribute | null>, Prisma__ContributorAttributeClient<ContributorAttributeGetPayload<T> | null>>;

    organization<T extends OrganizationArgs = {}>(args?: Subset<T, OrganizationArgs>): CheckSelect<T, Prisma__OrganizationClient<Organization | null>, Prisma__OrganizationClient<OrganizationGetPayload<T> | null>>;

    person<T extends PersonArgs = {}>(args?: Subset<T, PersonArgs>): CheckSelect<T, Prisma__PersonClient<Person | null>, Prisma__PersonClient<PersonGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ContributorAttributeValue findUnique
   */
  export type FindUniqueContributorAttributeValueArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttributeValue
    **/
    select?: ContributorAttributeValueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeValueInclude | null
    /**
     * Filter, which ContributorAttributeValue to fetch.
    **/
    where: ContributorAttributeValueWhereUniqueInput
  }


  /**
   * ContributorAttributeValue findFirst
   */
  export type FindFirstContributorAttributeValueArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttributeValue
    **/
    select?: ContributorAttributeValueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeValueInclude | null
    /**
     * Filter, which ContributorAttributeValue to fetch.
    **/
    where?: ContributorAttributeValueWhereInput
    orderBy?: Enumerable<ContributorAttributeValueOrderByInput>
    cursor?: ContributorAttributeValueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ContributorAttributeValueScalarFieldEnum>
  }


  /**
   * ContributorAttributeValue findMany
   */
  export type FindManyContributorAttributeValueArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttributeValue
    **/
    select?: ContributorAttributeValueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeValueInclude | null
    /**
     * Filter, which ContributorAttributeValues to fetch.
    **/
    where?: ContributorAttributeValueWhereInput
    /**
     * Determine the order of the ContributorAttributeValues to fetch.
    **/
    orderBy?: Enumerable<ContributorAttributeValueOrderByInput>
    /**
     * Sets the position for listing ContributorAttributeValues.
    **/
    cursor?: ContributorAttributeValueWhereUniqueInput
    /**
     * The number of ContributorAttributeValues to fetch. If negative number, it will take ContributorAttributeValues before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` ContributorAttributeValues.
    **/
    skip?: number
    distinct?: Enumerable<ContributorAttributeValueScalarFieldEnum>
  }


  /**
   * ContributorAttributeValue create
   */
  export type ContributorAttributeValueCreateArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttributeValue
    **/
    select?: ContributorAttributeValueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeValueInclude | null
    /**
     * The data needed to create a ContributorAttributeValue.
    **/
    data: ContributorAttributeValueCreateInput
  }


  /**
   * ContributorAttributeValue update
   */
  export type ContributorAttributeValueUpdateArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttributeValue
    **/
    select?: ContributorAttributeValueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeValueInclude | null
    /**
     * The data needed to update a ContributorAttributeValue.
    **/
    data: ContributorAttributeValueUpdateInput
    /**
     * Choose, which ContributorAttributeValue to update.
    **/
    where: ContributorAttributeValueWhereUniqueInput
  }


  /**
   * ContributorAttributeValue updateMany
   */
  export type ContributorAttributeValueUpdateManyArgs = {
    data: ContributorAttributeValueUpdateManyMutationInput
    where?: ContributorAttributeValueWhereInput
  }


  /**
   * ContributorAttributeValue upsert
   */
  export type ContributorAttributeValueUpsertArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttributeValue
    **/
    select?: ContributorAttributeValueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeValueInclude | null
    /**
     * The filter to search for the ContributorAttributeValue to update in case it exists.
    **/
    where: ContributorAttributeValueWhereUniqueInput
    /**
     * In case the ContributorAttributeValue found by the `where` argument doesn't exist, create a new ContributorAttributeValue with this data.
    **/
    create: ContributorAttributeValueCreateInput
    /**
     * In case the ContributorAttributeValue was found with the provided `where` argument, update it with this data.
    **/
    update: ContributorAttributeValueUpdateInput
  }


  /**
   * ContributorAttributeValue delete
   */
  export type ContributorAttributeValueDeleteArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttributeValue
    **/
    select?: ContributorAttributeValueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeValueInclude | null
    /**
     * Filter which ContributorAttributeValue to delete.
    **/
    where: ContributorAttributeValueWhereUniqueInput
  }


  /**
   * ContributorAttributeValue deleteMany
   */
  export type ContributorAttributeValueDeleteManyArgs = {
    where?: ContributorAttributeValueWhereInput
  }


  /**
   * ContributorAttributeValue without action
   */
  export type ContributorAttributeValueArgs = {
    /**
     * Select specific fields to fetch from the ContributorAttributeValue
    **/
    select?: ContributorAttributeValueSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ContributorAttributeValueInclude | null
  }



  /**
   * Model Discovery
   */


  export type AggregateDiscovery = {
    count: number | null
    avg: DiscoveryAvgAggregateOutputType | null
    sum: DiscoverySumAggregateOutputType | null
    min: DiscoveryMinAggregateOutputType | null
    max: DiscoveryMaxAggregateOutputType | null
  }

  export type DiscoveryAvgAggregateOutputType = {
    projectId: number
    id: number
  }

  export type DiscoverySumAggregateOutputType = {
    projectId: number
    id: number
  }

  export type DiscoveryMinAggregateOutputType = {
    projectId: number
    id: number
    title: string | null
    description: string | null
  }

  export type DiscoveryMaxAggregateOutputType = {
    projectId: number
    id: number
    title: string | null
    description: string | null
  }

  export type DiscoveryCountAggregateOutputType = {
    projectId: number
    id: number
    title: number | null
    description: number | null
    _all: number
  }


  export type DiscoveryAvgAggregateInputType = {
    projectId?: true
    id?: true
  }

  export type DiscoverySumAggregateInputType = {
    projectId?: true
    id?: true
  }

  export type DiscoveryMinAggregateInputType = {
    projectId?: true
    id?: true
    title?: true
    description?: true
  }

  export type DiscoveryMaxAggregateInputType = {
    projectId?: true
    id?: true
    title?: true
    description?: true
  }

  export type DiscoveryCountAggregateInputType = {
    projectId?: true
    id?: true
    title?: true
    description?: true
    _all?: true
  }

  export type AggregateDiscoveryArgs = {
    where?: DiscoveryWhereInput
    orderBy?: Enumerable<DiscoveryOrderByInput>
    cursor?: DiscoveryWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: DiscoveryAvgAggregateInputType
    sum?: DiscoverySumAggregateInputType
    min?: DiscoveryMinAggregateInputType
    max?: DiscoveryMaxAggregateInputType
  }

  export type GetDiscoveryAggregateType<T extends AggregateDiscoveryArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetDiscoveryAggregateScalarType<T[P]>
  }

  export type GetDiscoveryAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof DiscoveryAvgAggregateOutputType ? DiscoveryAvgAggregateOutputType[P] : never
  }

    



  export type DiscoverySelect = {
    projectId?: boolean
    id?: boolean
    title?: boolean
    description?: boolean
    project?: boolean | ProjectArgs
    chunks?: boolean | FindManyChunkArgs
  }

  export type DiscoveryInclude = {
    project?: boolean | ProjectArgs
    chunks?: boolean | FindManyChunkArgs
  }

  export type DiscoveryGetPayload<
    S extends boolean | null | undefined | DiscoveryArgs,
    U = keyof S
      > = S extends true
        ? Discovery
    : S extends undefined
    ? never
    : S extends DiscoveryArgs | FindManyDiscoveryArgs
    ?'include' extends U
    ? Discovery  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'project'
        ? ProjectGetPayload<S['include'][P]> :
        P extends 'chunks'
        ? Array < ChunkGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Discovery ?Discovery [P]
  : 
          P extends 'project'
        ? ProjectGetPayload<S['select'][P]> :
        P extends 'chunks'
        ? Array < ChunkGetPayload<S['select'][P]>>  : never
  } 
    : Discovery
  : Discovery


  export interface DiscoveryDelegate {
    /**
     * Find zero or one Discovery that matches the filter.
     * @param {FindUniqueDiscoveryArgs} args - Arguments to find a Discovery
     * @example
     * // Get one Discovery
     * const discovery = await prisma.discovery.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueDiscoveryArgs>(
      args: Subset<T, FindUniqueDiscoveryArgs>
    ): CheckSelect<T, Prisma__DiscoveryClient<Discovery | null>, Prisma__DiscoveryClient<DiscoveryGetPayload<T> | null>>
    /**
     * Find the first Discovery that matches the filter.
     * @param {FindFirstDiscoveryArgs} args - Arguments to find a Discovery
     * @example
     * // Get one Discovery
     * const discovery = await prisma.discovery.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstDiscoveryArgs>(
      args?: Subset<T, FindFirstDiscoveryArgs>
    ): CheckSelect<T, Prisma__DiscoveryClient<Discovery | null>, Prisma__DiscoveryClient<DiscoveryGetPayload<T> | null>>
    /**
     * Find zero or more Discoveries that matches the filter.
     * @param {FindManyDiscoveryArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Discoveries
     * const discoveries = await prisma.discovery.findMany()
     * 
     * // Get first 10 Discoveries
     * const discoveries = await prisma.discovery.findMany({ take: 10 })
     * 
     * // Only select the `projectId`
     * const discoveryWithProjectIdOnly = await prisma.discovery.findMany({ select: { projectId: true } })
     * 
    **/
    findMany<T extends FindManyDiscoveryArgs>(
      args?: Subset<T, FindManyDiscoveryArgs>
    ): CheckSelect<T, Promise<Array<Discovery>>, Promise<Array<DiscoveryGetPayload<T>>>>
    /**
     * Create a Discovery.
     * @param {DiscoveryCreateArgs} args - Arguments to create a Discovery.
     * @example
     * // Create one Discovery
     * const Discovery = await prisma.discovery.create({
     *   data: {
     *     // ... data to create a Discovery
     *   }
     * })
     * 
    **/
    create<T extends DiscoveryCreateArgs>(
      args: Subset<T, DiscoveryCreateArgs>
    ): CheckSelect<T, Prisma__DiscoveryClient<Discovery>, Prisma__DiscoveryClient<DiscoveryGetPayload<T>>>
    /**
     * Delete a Discovery.
     * @param {DiscoveryDeleteArgs} args - Arguments to delete one Discovery.
     * @example
     * // Delete one Discovery
     * const Discovery = await prisma.discovery.delete({
     *   where: {
     *     // ... filter to delete one Discovery
     *   }
     * })
     * 
    **/
    delete<T extends DiscoveryDeleteArgs>(
      args: Subset<T, DiscoveryDeleteArgs>
    ): CheckSelect<T, Prisma__DiscoveryClient<Discovery>, Prisma__DiscoveryClient<DiscoveryGetPayload<T>>>
    /**
     * Update one Discovery.
     * @param {DiscoveryUpdateArgs} args - Arguments to update one Discovery.
     * @example
     * // Update one Discovery
     * const discovery = await prisma.discovery.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DiscoveryUpdateArgs>(
      args: Subset<T, DiscoveryUpdateArgs>
    ): CheckSelect<T, Prisma__DiscoveryClient<Discovery>, Prisma__DiscoveryClient<DiscoveryGetPayload<T>>>
    /**
     * Delete zero or more Discoveries.
     * @param {DiscoveryDeleteManyArgs} args - Arguments to filter Discoveries to delete.
     * @example
     * // Delete a few Discoveries
     * const { count } = await prisma.discovery.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DiscoveryDeleteManyArgs>(
      args?: Subset<T, DiscoveryDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Discoveries.
     * @param {DiscoveryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Discoveries
     * const discovery = await prisma.discovery.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DiscoveryUpdateManyArgs>(
      args: Subset<T, DiscoveryUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Discovery.
     * @param {DiscoveryUpsertArgs} args - Arguments to update or create a Discovery.
     * @example
     * // Update or create a Discovery
     * const discovery = await prisma.discovery.upsert({
     *   create: {
     *     // ... data to create a Discovery
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discovery we want to update
     *   }
     * })
    **/
    upsert<T extends DiscoveryUpsertArgs>(
      args: Subset<T, DiscoveryUpsertArgs>
    ): CheckSelect<T, Prisma__DiscoveryClient<Discovery>, Prisma__DiscoveryClient<DiscoveryGetPayload<T>>>
    /**
     * Find zero or one Discovery that matches the filter.
     * @param {FindUniqueDiscoveryArgs} args - Arguments to find a Discovery
     * @deprecated This will be deprecated please use prisma.discovery.findUnique
     * @example
     * // Get one Discovery
     * const discovery = await prisma.discovery.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueDiscoveryArgs>(
      args: Subset<T, FindUniqueDiscoveryArgs>
    ): CheckSelect<T, Prisma__DiscoveryClient<Discovery | null>, Prisma__DiscoveryClient<DiscoveryGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyDiscoveryArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateDiscoveryArgs>(args: Subset<T, AggregateDiscoveryArgs>): Promise<GetDiscoveryAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Discovery.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DiscoveryClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    project<T extends ProjectArgs = {}>(args?: Subset<T, ProjectArgs>): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>;

    chunks<T extends FindManyChunkArgs = {}>(args?: Subset<T, FindManyChunkArgs>): CheckSelect<T, Promise<Array<Chunk>>, Promise<Array<ChunkGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Discovery findUnique
   */
  export type FindUniqueDiscoveryArgs = {
    /**
     * Select specific fields to fetch from the Discovery
    **/
    select?: DiscoverySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DiscoveryInclude | null
    /**
     * Filter, which Discovery to fetch.
    **/
    where: DiscoveryWhereUniqueInput
  }


  /**
   * Discovery findFirst
   */
  export type FindFirstDiscoveryArgs = {
    /**
     * Select specific fields to fetch from the Discovery
    **/
    select?: DiscoverySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DiscoveryInclude | null
    /**
     * Filter, which Discovery to fetch.
    **/
    where?: DiscoveryWhereInput
    orderBy?: Enumerable<DiscoveryOrderByInput>
    cursor?: DiscoveryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DiscoveryScalarFieldEnum>
  }


  /**
   * Discovery findMany
   */
  export type FindManyDiscoveryArgs = {
    /**
     * Select specific fields to fetch from the Discovery
    **/
    select?: DiscoverySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DiscoveryInclude | null
    /**
     * Filter, which Discoveries to fetch.
    **/
    where?: DiscoveryWhereInput
    /**
     * Determine the order of the Discoveries to fetch.
    **/
    orderBy?: Enumerable<DiscoveryOrderByInput>
    /**
     * Sets the position for listing Discoveries.
    **/
    cursor?: DiscoveryWhereUniqueInput
    /**
     * The number of Discoveries to fetch. If negative number, it will take Discoveries before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Discoveries.
    **/
    skip?: number
    distinct?: Enumerable<DiscoveryScalarFieldEnum>
  }


  /**
   * Discovery create
   */
  export type DiscoveryCreateArgs = {
    /**
     * Select specific fields to fetch from the Discovery
    **/
    select?: DiscoverySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DiscoveryInclude | null
    /**
     * The data needed to create a Discovery.
    **/
    data: DiscoveryCreateInput
  }


  /**
   * Discovery update
   */
  export type DiscoveryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Discovery
    **/
    select?: DiscoverySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DiscoveryInclude | null
    /**
     * The data needed to update a Discovery.
    **/
    data: DiscoveryUpdateInput
    /**
     * Choose, which Discovery to update.
    **/
    where: DiscoveryWhereUniqueInput
  }


  /**
   * Discovery updateMany
   */
  export type DiscoveryUpdateManyArgs = {
    data: DiscoveryUpdateManyMutationInput
    where?: DiscoveryWhereInput
  }


  /**
   * Discovery upsert
   */
  export type DiscoveryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Discovery
    **/
    select?: DiscoverySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DiscoveryInclude | null
    /**
     * The filter to search for the Discovery to update in case it exists.
    **/
    where: DiscoveryWhereUniqueInput
    /**
     * In case the Discovery found by the `where` argument doesn't exist, create a new Discovery with this data.
    **/
    create: DiscoveryCreateInput
    /**
     * In case the Discovery was found with the provided `where` argument, update it with this data.
    **/
    update: DiscoveryUpdateInput
  }


  /**
   * Discovery delete
   */
  export type DiscoveryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Discovery
    **/
    select?: DiscoverySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DiscoveryInclude | null
    /**
     * Filter which Discovery to delete.
    **/
    where: DiscoveryWhereUniqueInput
  }


  /**
   * Discovery deleteMany
   */
  export type DiscoveryDeleteManyArgs = {
    where?: DiscoveryWhereInput
  }


  /**
   * Discovery without action
   */
  export type DiscoveryArgs = {
    /**
     * Select specific fields to fetch from the Discovery
    **/
    select?: DiscoverySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: DiscoveryInclude | null
  }



  /**
   * Model Message
   */


  export type AggregateMessage = {
    count: number | null
    avg: MessageAvgAggregateOutputType | null
    sum: MessageSumAggregateOutputType | null
    min: MessageMinAggregateOutputType | null
    max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    projectId: number
    id: number
    requesterId: number
    submitterId: number
  }

  export type MessageSumAggregateOutputType = {
    projectId: number
    id: number
    requesterId: number
    submitterId: number
  }

  export type MessageMinAggregateOutputType = {
    projectId: number
    id: number
    requesterId: number
    submitterId: number
    clientId: string | null
    title: string | null
    content: string | null
  }

  export type MessageMaxAggregateOutputType = {
    projectId: number
    id: number
    requesterId: number
    submitterId: number
    clientId: string | null
    title: string | null
    content: string | null
  }

  export type MessageCountAggregateOutputType = {
    projectId: number
    id: number
    requesterId: number
    submitterId: number
    clientId: number | null
    title: number | null
    content: number | null
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    projectId?: true
    id?: true
    requesterId?: true
    submitterId?: true
  }

  export type MessageSumAggregateInputType = {
    projectId?: true
    id?: true
    requesterId?: true
    submitterId?: true
  }

  export type MessageMinAggregateInputType = {
    projectId?: true
    id?: true
    requesterId?: true
    submitterId?: true
    clientId?: true
    title?: true
    content?: true
  }

  export type MessageMaxAggregateInputType = {
    projectId?: true
    id?: true
    requesterId?: true
    submitterId?: true
    clientId?: true
    title?: true
    content?: true
  }

  export type MessageCountAggregateInputType = {
    projectId?: true
    id?: true
    requesterId?: true
    submitterId?: true
    clientId?: true
    title?: true
    content?: true
    _all?: true
  }

  export type AggregateMessageArgs = {
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByInput>
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: MessageAvgAggregateInputType
    sum?: MessageSumAggregateInputType
    min?: MessageMinAggregateInputType
    max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends AggregateMessageArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetMessageAggregateScalarType<T[P]>
  }

  export type GetMessageAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof MessageAvgAggregateOutputType ? MessageAvgAggregateOutputType[P] : never
  }

    



  export type MessageSelect = {
    projectId?: boolean
    id?: boolean
    requesterId?: boolean
    submitterId?: boolean
    clientId?: boolean
    title?: boolean
    content?: boolean
    project?: boolean | ProjectArgs
    person_Message_requesterIdToPerson?: boolean | PersonArgs
    person_Message_submitterIdToPerson?: boolean | PersonArgs
    chunks?: boolean | FindManyChunkArgs
    subMessages?: boolean | FindManySubMessageArgs
  }

  export type MessageInclude = {
    project?: boolean | ProjectArgs
    person_Message_requesterIdToPerson?: boolean | PersonArgs
    person_Message_submitterIdToPerson?: boolean | PersonArgs
    chunks?: boolean | FindManyChunkArgs
    subMessages?: boolean | FindManySubMessageArgs
  }

  export type MessageGetPayload<
    S extends boolean | null | undefined | MessageArgs,
    U = keyof S
      > = S extends true
        ? Message
    : S extends undefined
    ? never
    : S extends MessageArgs | FindManyMessageArgs
    ?'include' extends U
    ? Message  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'project'
        ? ProjectGetPayload<S['include'][P]> :
        P extends 'person_Message_requesterIdToPerson'
        ? PersonGetPayload<S['include'][P]> :
        P extends 'person_Message_submitterIdToPerson'
        ? PersonGetPayload<S['include'][P]> :
        P extends 'chunks'
        ? Array < ChunkGetPayload<S['include'][P]>>  :
        P extends 'subMessages'
        ? Array < SubMessageGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Message ?Message [P]
  : 
          P extends 'project'
        ? ProjectGetPayload<S['select'][P]> :
        P extends 'person_Message_requesterIdToPerson'
        ? PersonGetPayload<S['select'][P]> :
        P extends 'person_Message_submitterIdToPerson'
        ? PersonGetPayload<S['select'][P]> :
        P extends 'chunks'
        ? Array < ChunkGetPayload<S['select'][P]>>  :
        P extends 'subMessages'
        ? Array < SubMessageGetPayload<S['select'][P]>>  : never
  } 
    : Message
  : Message


  export interface MessageDelegate {
    /**
     * Find zero or one Message that matches the filter.
     * @param {FindUniqueMessageArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueMessageArgs>(
      args: Subset<T, FindUniqueMessageArgs>
    ): CheckSelect<T, Prisma__MessageClient<Message | null>, Prisma__MessageClient<MessageGetPayload<T> | null>>
    /**
     * Find the first Message that matches the filter.
     * @param {FindFirstMessageArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstMessageArgs>(
      args?: Subset<T, FindFirstMessageArgs>
    ): CheckSelect<T, Prisma__MessageClient<Message | null>, Prisma__MessageClient<MessageGetPayload<T> | null>>
    /**
     * Find zero or more Messages that matches the filter.
     * @param {FindManyMessageArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `projectId`
     * const messageWithProjectIdOnly = await prisma.message.findMany({ select: { projectId: true } })
     * 
    **/
    findMany<T extends FindManyMessageArgs>(
      args?: Subset<T, FindManyMessageArgs>
    ): CheckSelect<T, Promise<Array<Message>>, Promise<Array<MessageGetPayload<T>>>>
    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
    **/
    create<T extends MessageCreateArgs>(
      args: Subset<T, MessageCreateArgs>
    ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>
    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
    **/
    delete<T extends MessageDeleteArgs>(
      args: Subset<T, MessageDeleteArgs>
    ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>
    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MessageUpdateArgs>(
      args: Subset<T, MessageUpdateArgs>
    ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>
    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MessageDeleteManyArgs>(
      args?: Subset<T, MessageDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Messages.
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MessageUpdateManyArgs>(
      args: Subset<T, MessageUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
    **/
    upsert<T extends MessageUpsertArgs>(
      args: Subset<T, MessageUpsertArgs>
    ): CheckSelect<T, Prisma__MessageClient<Message>, Prisma__MessageClient<MessageGetPayload<T>>>
    /**
     * Find zero or one Message that matches the filter.
     * @param {FindUniqueMessageArgs} args - Arguments to find a Message
     * @deprecated This will be deprecated please use prisma.message.findUnique
     * @example
     * // Get one Message
     * const message = await prisma.message.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueMessageArgs>(
      args: Subset<T, FindUniqueMessageArgs>
    ): CheckSelect<T, Prisma__MessageClient<Message | null>, Prisma__MessageClient<MessageGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyMessageArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateMessageArgs>(args: Subset<T, AggregateMessageArgs>): Promise<GetMessageAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MessageClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    project<T extends ProjectArgs = {}>(args?: Subset<T, ProjectArgs>): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>;

    person_Message_requesterIdToPerson<T extends PersonArgs = {}>(args?: Subset<T, PersonArgs>): CheckSelect<T, Prisma__PersonClient<Person | null>, Prisma__PersonClient<PersonGetPayload<T> | null>>;

    person_Message_submitterIdToPerson<T extends PersonArgs = {}>(args?: Subset<T, PersonArgs>): CheckSelect<T, Prisma__PersonClient<Person | null>, Prisma__PersonClient<PersonGetPayload<T> | null>>;

    chunks<T extends FindManyChunkArgs = {}>(args?: Subset<T, FindManyChunkArgs>): CheckSelect<T, Promise<Array<Chunk>>, Promise<Array<ChunkGetPayload<T>>>>;

    subMessages<T extends FindManySubMessageArgs = {}>(args?: Subset<T, FindManySubMessageArgs>): CheckSelect<T, Promise<Array<SubMessage>>, Promise<Array<SubMessageGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Message findUnique
   */
  export type FindUniqueMessageArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
    /**
     * Filter, which Message to fetch.
    **/
    where: MessageWhereUniqueInput
  }


  /**
   * Message findFirst
   */
  export type FindFirstMessageArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
    /**
     * Filter, which Message to fetch.
    **/
    where?: MessageWhereInput
    orderBy?: Enumerable<MessageOrderByInput>
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message findMany
   */
  export type FindManyMessageArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
    /**
     * Filter, which Messages to fetch.
    **/
    where?: MessageWhereInput
    /**
     * Determine the order of the Messages to fetch.
    **/
    orderBy?: Enumerable<MessageOrderByInput>
    /**
     * Sets the position for listing Messages.
    **/
    cursor?: MessageWhereUniqueInput
    /**
     * The number of Messages to fetch. If negative number, it will take Messages before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Messages.
    **/
    skip?: number
    distinct?: Enumerable<MessageScalarFieldEnum>
  }


  /**
   * Message create
   */
  export type MessageCreateArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
    /**
     * The data needed to create a Message.
    **/
    data: MessageCreateInput
  }


  /**
   * Message update
   */
  export type MessageUpdateArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
    /**
     * The data needed to update a Message.
    **/
    data: MessageUpdateInput
    /**
     * Choose, which Message to update.
    **/
    where: MessageWhereUniqueInput
  }


  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs = {
    data: MessageUpdateManyMutationInput
    where?: MessageWhereInput
  }


  /**
   * Message upsert
   */
  export type MessageUpsertArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
    /**
     * The filter to search for the Message to update in case it exists.
    **/
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
    **/
    create: MessageCreateInput
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
    **/
    update: MessageUpdateInput
  }


  /**
   * Message delete
   */
  export type MessageDeleteArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
    /**
     * Filter which Message to delete.
    **/
    where: MessageWhereUniqueInput
  }


  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs = {
    where?: MessageWhereInput
  }


  /**
   * Message without action
   */
  export type MessageArgs = {
    /**
     * Select specific fields to fetch from the Message
    **/
    select?: MessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: MessageInclude | null
  }



  /**
   * Model Organization
   */


  export type AggregateOrganization = {
    count: number | null
    avg: OrganizationAvgAggregateOutputType | null
    sum: OrganizationSumAggregateOutputType | null
    min: OrganizationMinAggregateOutputType | null
    max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationAvgAggregateOutputType = {
    projectId: number
    id: number
  }

  export type OrganizationSumAggregateOutputType = {
    projectId: number
    id: number
  }

  export type OrganizationMinAggregateOutputType = {
    projectId: number
    id: number
    name: string | null
  }

  export type OrganizationMaxAggregateOutputType = {
    projectId: number
    id: number
    name: string | null
  }

  export type OrganizationCountAggregateOutputType = {
    projectId: number
    id: number
    name: number | null
    _all: number
  }


  export type OrganizationAvgAggregateInputType = {
    projectId?: true
    id?: true
  }

  export type OrganizationSumAggregateInputType = {
    projectId?: true
    id?: true
  }

  export type OrganizationMinAggregateInputType = {
    projectId?: true
    id?: true
    name?: true
  }

  export type OrganizationMaxAggregateInputType = {
    projectId?: true
    id?: true
    name?: true
  }

  export type OrganizationCountAggregateInputType = {
    projectId?: true
    id?: true
    name?: true
    _all?: true
  }

  export type AggregateOrganizationArgs = {
    where?: OrganizationWhereInput
    orderBy?: Enumerable<OrganizationOrderByInput>
    cursor?: OrganizationWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: OrganizationAvgAggregateInputType
    sum?: OrganizationSumAggregateInputType
    min?: OrganizationMinAggregateInputType
    max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends AggregateOrganizationArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetOrganizationAggregateScalarType<T[P]>
  }

  export type GetOrganizationAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof OrganizationAvgAggregateOutputType ? OrganizationAvgAggregateOutputType[P] : never
  }

    



  export type OrganizationSelect = {
    projectId?: boolean
    id?: boolean
    name?: boolean
    project?: boolean | ProjectArgs
    contributorAttributeValues?: boolean | FindManyContributorAttributeValueArgs
    persons?: boolean | FindManyPersonArgs
  }

  export type OrganizationInclude = {
    project?: boolean | ProjectArgs
    contributorAttributeValues?: boolean | FindManyContributorAttributeValueArgs
    persons?: boolean | FindManyPersonArgs
  }

  export type OrganizationGetPayload<
    S extends boolean | null | undefined | OrganizationArgs,
    U = keyof S
      > = S extends true
        ? Organization
    : S extends undefined
    ? never
    : S extends OrganizationArgs | FindManyOrganizationArgs
    ?'include' extends U
    ? Organization  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'project'
        ? ProjectGetPayload<S['include'][P]> :
        P extends 'contributorAttributeValues'
        ? Array < ContributorAttributeValueGetPayload<S['include'][P]>>  :
        P extends 'persons'
        ? Array < PersonGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Organization ?Organization [P]
  : 
          P extends 'project'
        ? ProjectGetPayload<S['select'][P]> :
        P extends 'contributorAttributeValues'
        ? Array < ContributorAttributeValueGetPayload<S['select'][P]>>  :
        P extends 'persons'
        ? Array < PersonGetPayload<S['select'][P]>>  : never
  } 
    : Organization
  : Organization


  export interface OrganizationDelegate {
    /**
     * Find zero or one Organization that matches the filter.
     * @param {FindUniqueOrganizationArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueOrganizationArgs>(
      args: Subset<T, FindUniqueOrganizationArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization | null>, Prisma__OrganizationClient<OrganizationGetPayload<T> | null>>
    /**
     * Find the first Organization that matches the filter.
     * @param {FindFirstOrganizationArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstOrganizationArgs>(
      args?: Subset<T, FindFirstOrganizationArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization | null>, Prisma__OrganizationClient<OrganizationGetPayload<T> | null>>
    /**
     * Find zero or more Organizations that matches the filter.
     * @param {FindManyOrganizationArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `projectId`
     * const organizationWithProjectIdOnly = await prisma.organization.findMany({ select: { projectId: true } })
     * 
    **/
    findMany<T extends FindManyOrganizationArgs>(
      args?: Subset<T, FindManyOrganizationArgs>
    ): CheckSelect<T, Promise<Array<Organization>>, Promise<Array<OrganizationGetPayload<T>>>>
    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
    **/
    create<T extends OrganizationCreateArgs>(
      args: Subset<T, OrganizationCreateArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>
    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
    **/
    delete<T extends OrganizationDeleteArgs>(
      args: Subset<T, OrganizationDeleteArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>
    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrganizationUpdateArgs>(
      args: Subset<T, OrganizationUpdateArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>
    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrganizationDeleteManyArgs>(
      args?: Subset<T, OrganizationDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Organizations.
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrganizationUpdateManyArgs>(
      args: Subset<T, OrganizationUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
    **/
    upsert<T extends OrganizationUpsertArgs>(
      args: Subset<T, OrganizationUpsertArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization>, Prisma__OrganizationClient<OrganizationGetPayload<T>>>
    /**
     * Find zero or one Organization that matches the filter.
     * @param {FindUniqueOrganizationArgs} args - Arguments to find a Organization
     * @deprecated This will be deprecated please use prisma.organization.findUnique
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueOrganizationArgs>(
      args: Subset<T, FindUniqueOrganizationArgs>
    ): CheckSelect<T, Prisma__OrganizationClient<Organization | null>, Prisma__OrganizationClient<OrganizationGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyOrganizationArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateOrganizationArgs>(args: Subset<T, AggregateOrganizationArgs>): Promise<GetOrganizationAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrganizationClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    project<T extends ProjectArgs = {}>(args?: Subset<T, ProjectArgs>): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>;

    contributorAttributeValues<T extends FindManyContributorAttributeValueArgs = {}>(args?: Subset<T, FindManyContributorAttributeValueArgs>): CheckSelect<T, Promise<Array<ContributorAttributeValue>>, Promise<Array<ContributorAttributeValueGetPayload<T>>>>;

    persons<T extends FindManyPersonArgs = {}>(args?: Subset<T, FindManyPersonArgs>): CheckSelect<T, Promise<Array<Person>>, Promise<Array<PersonGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Organization findUnique
   */
  export type FindUniqueOrganizationArgs = {
    /**
     * Select specific fields to fetch from the Organization
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrganizationInclude | null
    /**
     * Filter, which Organization to fetch.
    **/
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization findFirst
   */
  export type FindFirstOrganizationArgs = {
    /**
     * Select specific fields to fetch from the Organization
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrganizationInclude | null
    /**
     * Filter, which Organization to fetch.
    **/
    where?: OrganizationWhereInput
    orderBy?: Enumerable<OrganizationOrderByInput>
    cursor?: OrganizationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * Organization findMany
   */
  export type FindManyOrganizationArgs = {
    /**
     * Select specific fields to fetch from the Organization
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrganizationInclude | null
    /**
     * Filter, which Organizations to fetch.
    **/
    where?: OrganizationWhereInput
    /**
     * Determine the order of the Organizations to fetch.
    **/
    orderBy?: Enumerable<OrganizationOrderByInput>
    /**
     * Sets the position for listing Organizations.
    **/
    cursor?: OrganizationWhereUniqueInput
    /**
     * The number of Organizations to fetch. If negative number, it will take Organizations before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Organizations.
    **/
    skip?: number
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * Organization create
   */
  export type OrganizationCreateArgs = {
    /**
     * Select specific fields to fetch from the Organization
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrganizationInclude | null
    /**
     * The data needed to create a Organization.
    **/
    data: OrganizationCreateInput
  }


  /**
   * Organization update
   */
  export type OrganizationUpdateArgs = {
    /**
     * Select specific fields to fetch from the Organization
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrganizationInclude | null
    /**
     * The data needed to update a Organization.
    **/
    data: OrganizationUpdateInput
    /**
     * Choose, which Organization to update.
    **/
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs = {
    data: OrganizationUpdateManyMutationInput
    where?: OrganizationWhereInput
  }


  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs = {
    /**
     * Select specific fields to fetch from the Organization
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrganizationInclude | null
    /**
     * The filter to search for the Organization to update in case it exists.
    **/
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
    **/
    create: OrganizationCreateInput
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
    **/
    update: OrganizationUpdateInput
  }


  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs = {
    /**
     * Select specific fields to fetch from the Organization
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrganizationInclude | null
    /**
     * Filter which Organization to delete.
    **/
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs = {
    where?: OrganizationWhereInput
  }


  /**
   * Organization without action
   */
  export type OrganizationArgs = {
    /**
     * Select specific fields to fetch from the Organization
    **/
    select?: OrganizationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: OrganizationInclude | null
  }



  /**
   * Model Person
   */


  export type AggregatePerson = {
    count: number | null
    avg: PersonAvgAggregateOutputType | null
    sum: PersonSumAggregateOutputType | null
    min: PersonMinAggregateOutputType | null
    max: PersonMaxAggregateOutputType | null
  }

  export type PersonAvgAggregateOutputType = {
    projectId: number
    id: number
    organizationId: number
  }

  export type PersonSumAggregateOutputType = {
    projectId: number
    id: number
    organizationId: number
  }

  export type PersonMinAggregateOutputType = {
    projectId: number
    id: number
    name: string | null
    email: string | null
    organizationId: number
  }

  export type PersonMaxAggregateOutputType = {
    projectId: number
    id: number
    name: string | null
    email: string | null
    organizationId: number
  }

  export type PersonCountAggregateOutputType = {
    projectId: number
    id: number
    name: number | null
    email: number | null
    organizationId: number
    _all: number
  }


  export type PersonAvgAggregateInputType = {
    projectId?: true
    id?: true
    organizationId?: true
  }

  export type PersonSumAggregateInputType = {
    projectId?: true
    id?: true
    organizationId?: true
  }

  export type PersonMinAggregateInputType = {
    projectId?: true
    id?: true
    name?: true
    email?: true
    organizationId?: true
  }

  export type PersonMaxAggregateInputType = {
    projectId?: true
    id?: true
    name?: true
    email?: true
    organizationId?: true
  }

  export type PersonCountAggregateInputType = {
    projectId?: true
    id?: true
    name?: true
    email?: true
    organizationId?: true
    _all?: true
  }

  export type AggregatePersonArgs = {
    where?: PersonWhereInput
    orderBy?: Enumerable<PersonOrderByInput>
    cursor?: PersonWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: PersonAvgAggregateInputType
    sum?: PersonSumAggregateInputType
    min?: PersonMinAggregateInputType
    max?: PersonMaxAggregateInputType
  }

  export type GetPersonAggregateType<T extends AggregatePersonArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetPersonAggregateScalarType<T[P]>
  }

  export type GetPersonAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof PersonAvgAggregateOutputType ? PersonAvgAggregateOutputType[P] : never
  }

    



  export type PersonSelect = {
    projectId?: boolean
    id?: boolean
    name?: boolean
    email?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationArgs
    project?: boolean | ProjectArgs
    accounts?: boolean | FindManyAccountArgs
    contributorAttributeValues?: boolean | FindManyContributorAttributeValueArgs
    message_Message_requesterIdToPersons?: boolean | FindManyMessageArgs
    message_Message_submitterIdToPersons?: boolean | FindManyMessageArgs
    subMessages?: boolean | FindManySubMessageArgs
  }

  export type PersonInclude = {
    organization?: boolean | OrganizationArgs
    project?: boolean | ProjectArgs
    accounts?: boolean | FindManyAccountArgs
    contributorAttributeValues?: boolean | FindManyContributorAttributeValueArgs
    message_Message_requesterIdToPersons?: boolean | FindManyMessageArgs
    message_Message_submitterIdToPersons?: boolean | FindManyMessageArgs
    subMessages?: boolean | FindManySubMessageArgs
  }

  export type PersonGetPayload<
    S extends boolean | null | undefined | PersonArgs,
    U = keyof S
      > = S extends true
        ? Person
    : S extends undefined
    ? never
    : S extends PersonArgs | FindManyPersonArgs
    ?'include' extends U
    ? Person  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'organization'
        ? OrganizationGetPayload<S['include'][P]> :
        P extends 'project'
        ? ProjectGetPayload<S['include'][P]> :
        P extends 'accounts'
        ? Array < AccountGetPayload<S['include'][P]>>  :
        P extends 'contributorAttributeValues'
        ? Array < ContributorAttributeValueGetPayload<S['include'][P]>>  :
        P extends 'message_Message_requesterIdToPersons'
        ? Array < MessageGetPayload<S['include'][P]>>  :
        P extends 'message_Message_submitterIdToPersons'
        ? Array < MessageGetPayload<S['include'][P]>>  :
        P extends 'subMessages'
        ? Array < SubMessageGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Person ?Person [P]
  : 
          P extends 'organization'
        ? OrganizationGetPayload<S['select'][P]> :
        P extends 'project'
        ? ProjectGetPayload<S['select'][P]> :
        P extends 'accounts'
        ? Array < AccountGetPayload<S['select'][P]>>  :
        P extends 'contributorAttributeValues'
        ? Array < ContributorAttributeValueGetPayload<S['select'][P]>>  :
        P extends 'message_Message_requesterIdToPersons'
        ? Array < MessageGetPayload<S['select'][P]>>  :
        P extends 'message_Message_submitterIdToPersons'
        ? Array < MessageGetPayload<S['select'][P]>>  :
        P extends 'subMessages'
        ? Array < SubMessageGetPayload<S['select'][P]>>  : never
  } 
    : Person
  : Person


  export interface PersonDelegate {
    /**
     * Find zero or one Person that matches the filter.
     * @param {FindUniquePersonArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquePersonArgs>(
      args: Subset<T, FindUniquePersonArgs>
    ): CheckSelect<T, Prisma__PersonClient<Person | null>, Prisma__PersonClient<PersonGetPayload<T> | null>>
    /**
     * Find the first Person that matches the filter.
     * @param {FindFirstPersonArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstPersonArgs>(
      args?: Subset<T, FindFirstPersonArgs>
    ): CheckSelect<T, Prisma__PersonClient<Person | null>, Prisma__PersonClient<PersonGetPayload<T> | null>>
    /**
     * Find zero or more People that matches the filter.
     * @param {FindManyPersonArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all People
     * const people = await prisma.person.findMany()
     * 
     * // Get first 10 People
     * const people = await prisma.person.findMany({ take: 10 })
     * 
     * // Only select the `projectId`
     * const personWithProjectIdOnly = await prisma.person.findMany({ select: { projectId: true } })
     * 
    **/
    findMany<T extends FindManyPersonArgs>(
      args?: Subset<T, FindManyPersonArgs>
    ): CheckSelect<T, Promise<Array<Person>>, Promise<Array<PersonGetPayload<T>>>>
    /**
     * Create a Person.
     * @param {PersonCreateArgs} args - Arguments to create a Person.
     * @example
     * // Create one Person
     * const Person = await prisma.person.create({
     *   data: {
     *     // ... data to create a Person
     *   }
     * })
     * 
    **/
    create<T extends PersonCreateArgs>(
      args: Subset<T, PersonCreateArgs>
    ): CheckSelect<T, Prisma__PersonClient<Person>, Prisma__PersonClient<PersonGetPayload<T>>>
    /**
     * Delete a Person.
     * @param {PersonDeleteArgs} args - Arguments to delete one Person.
     * @example
     * // Delete one Person
     * const Person = await prisma.person.delete({
     *   where: {
     *     // ... filter to delete one Person
     *   }
     * })
     * 
    **/
    delete<T extends PersonDeleteArgs>(
      args: Subset<T, PersonDeleteArgs>
    ): CheckSelect<T, Prisma__PersonClient<Person>, Prisma__PersonClient<PersonGetPayload<T>>>
    /**
     * Update one Person.
     * @param {PersonUpdateArgs} args - Arguments to update one Person.
     * @example
     * // Update one Person
     * const person = await prisma.person.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PersonUpdateArgs>(
      args: Subset<T, PersonUpdateArgs>
    ): CheckSelect<T, Prisma__PersonClient<Person>, Prisma__PersonClient<PersonGetPayload<T>>>
    /**
     * Delete zero or more People.
     * @param {PersonDeleteManyArgs} args - Arguments to filter People to delete.
     * @example
     * // Delete a few People
     * const { count } = await prisma.person.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PersonDeleteManyArgs>(
      args?: Subset<T, PersonDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more People.
     * @param {PersonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many People
     * const person = await prisma.person.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PersonUpdateManyArgs>(
      args: Subset<T, PersonUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Person.
     * @param {PersonUpsertArgs} args - Arguments to update or create a Person.
     * @example
     * // Update or create a Person
     * const person = await prisma.person.upsert({
     *   create: {
     *     // ... data to create a Person
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Person we want to update
     *   }
     * })
    **/
    upsert<T extends PersonUpsertArgs>(
      args: Subset<T, PersonUpsertArgs>
    ): CheckSelect<T, Prisma__PersonClient<Person>, Prisma__PersonClient<PersonGetPayload<T>>>
    /**
     * Find zero or one Person that matches the filter.
     * @param {FindUniquePersonArgs} args - Arguments to find a Person
     * @deprecated This will be deprecated please use prisma.person.findUnique
     * @example
     * // Get one Person
     * const person = await prisma.person.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquePersonArgs>(
      args: Subset<T, FindUniquePersonArgs>
    ): CheckSelect<T, Prisma__PersonClient<Person | null>, Prisma__PersonClient<PersonGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyPersonArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregatePersonArgs>(args: Subset<T, AggregatePersonArgs>): Promise<GetPersonAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Person.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PersonClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    organization<T extends OrganizationArgs = {}>(args?: Subset<T, OrganizationArgs>): CheckSelect<T, Prisma__OrganizationClient<Organization | null>, Prisma__OrganizationClient<OrganizationGetPayload<T> | null>>;

    project<T extends ProjectArgs = {}>(args?: Subset<T, ProjectArgs>): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>;

    accounts<T extends FindManyAccountArgs = {}>(args?: Subset<T, FindManyAccountArgs>): CheckSelect<T, Promise<Array<Account>>, Promise<Array<AccountGetPayload<T>>>>;

    contributorAttributeValues<T extends FindManyContributorAttributeValueArgs = {}>(args?: Subset<T, FindManyContributorAttributeValueArgs>): CheckSelect<T, Promise<Array<ContributorAttributeValue>>, Promise<Array<ContributorAttributeValueGetPayload<T>>>>;

    message_Message_requesterIdToPersons<T extends FindManyMessageArgs = {}>(args?: Subset<T, FindManyMessageArgs>): CheckSelect<T, Promise<Array<Message>>, Promise<Array<MessageGetPayload<T>>>>;

    message_Message_submitterIdToPersons<T extends FindManyMessageArgs = {}>(args?: Subset<T, FindManyMessageArgs>): CheckSelect<T, Promise<Array<Message>>, Promise<Array<MessageGetPayload<T>>>>;

    subMessages<T extends FindManySubMessageArgs = {}>(args?: Subset<T, FindManySubMessageArgs>): CheckSelect<T, Promise<Array<SubMessage>>, Promise<Array<SubMessageGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Person findUnique
   */
  export type FindUniquePersonArgs = {
    /**
     * Select specific fields to fetch from the Person
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PersonInclude | null
    /**
     * Filter, which Person to fetch.
    **/
    where: PersonWhereUniqueInput
  }


  /**
   * Person findFirst
   */
  export type FindFirstPersonArgs = {
    /**
     * Select specific fields to fetch from the Person
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PersonInclude | null
    /**
     * Filter, which Person to fetch.
    **/
    where?: PersonWhereInput
    orderBy?: Enumerable<PersonOrderByInput>
    cursor?: PersonWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PersonScalarFieldEnum>
  }


  /**
   * Person findMany
   */
  export type FindManyPersonArgs = {
    /**
     * Select specific fields to fetch from the Person
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PersonInclude | null
    /**
     * Filter, which People to fetch.
    **/
    where?: PersonWhereInput
    /**
     * Determine the order of the People to fetch.
    **/
    orderBy?: Enumerable<PersonOrderByInput>
    /**
     * Sets the position for listing People.
    **/
    cursor?: PersonWhereUniqueInput
    /**
     * The number of People to fetch. If negative number, it will take People before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` People.
    **/
    skip?: number
    distinct?: Enumerable<PersonScalarFieldEnum>
  }


  /**
   * Person create
   */
  export type PersonCreateArgs = {
    /**
     * Select specific fields to fetch from the Person
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PersonInclude | null
    /**
     * The data needed to create a Person.
    **/
    data: PersonCreateInput
  }


  /**
   * Person update
   */
  export type PersonUpdateArgs = {
    /**
     * Select specific fields to fetch from the Person
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PersonInclude | null
    /**
     * The data needed to update a Person.
    **/
    data: PersonUpdateInput
    /**
     * Choose, which Person to update.
    **/
    where: PersonWhereUniqueInput
  }


  /**
   * Person updateMany
   */
  export type PersonUpdateManyArgs = {
    data: PersonUpdateManyMutationInput
    where?: PersonWhereInput
  }


  /**
   * Person upsert
   */
  export type PersonUpsertArgs = {
    /**
     * Select specific fields to fetch from the Person
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PersonInclude | null
    /**
     * The filter to search for the Person to update in case it exists.
    **/
    where: PersonWhereUniqueInput
    /**
     * In case the Person found by the `where` argument doesn't exist, create a new Person with this data.
    **/
    create: PersonCreateInput
    /**
     * In case the Person was found with the provided `where` argument, update it with this data.
    **/
    update: PersonUpdateInput
  }


  /**
   * Person delete
   */
  export type PersonDeleteArgs = {
    /**
     * Select specific fields to fetch from the Person
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PersonInclude | null
    /**
     * Filter which Person to delete.
    **/
    where: PersonWhereUniqueInput
  }


  /**
   * Person deleteMany
   */
  export type PersonDeleteManyArgs = {
    where?: PersonWhereInput
  }


  /**
   * Person without action
   */
  export type PersonArgs = {
    /**
     * Select specific fields to fetch from the Person
    **/
    select?: PersonSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PersonInclude | null
  }



  /**
   * Model Project
   */


  export type AggregateProject = {
    count: number | null
    avg: ProjectAvgAggregateOutputType | null
    sum: ProjectSumAggregateOutputType | null
    min: ProjectMinAggregateOutputType | null
    max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    id: number
  }

  export type ProjectSumAggregateOutputType = {
    id: number
  }

  export type ProjectMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    id?: true
  }

  export type ProjectSumAggregateInputType = {
    id?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type AggregateProjectArgs = {
    where?: ProjectWhereInput
    orderBy?: Enumerable<ProjectOrderByInput>
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: ProjectAvgAggregateInputType
    sum?: ProjectSumAggregateInputType
    min?: ProjectMinAggregateInputType
    max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends AggregateProjectArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetProjectAggregateScalarType<T[P]>
  }

  export type GetProjectAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof ProjectAvgAggregateOutputType ? ProjectAvgAggregateOutputType[P] : never
  }

    



  export type ProjectSelect = {
    id?: boolean
    name?: boolean
    accounts?: boolean | FindManyAccountArgs
    chunks?: boolean | FindManyChunkArgs
    contributorAttributes?: boolean | FindManyContributorAttributeArgs
    discoverys?: boolean | FindManyDiscoveryArgs
    messages?: boolean | FindManyMessageArgs
    organizations?: boolean | FindManyOrganizationArgs
    persons?: boolean | FindManyPersonArgs
  }

  export type ProjectInclude = {
    accounts?: boolean | FindManyAccountArgs
    chunks?: boolean | FindManyChunkArgs
    contributorAttributes?: boolean | FindManyContributorAttributeArgs
    discoverys?: boolean | FindManyDiscoveryArgs
    messages?: boolean | FindManyMessageArgs
    organizations?: boolean | FindManyOrganizationArgs
    persons?: boolean | FindManyPersonArgs
  }

  export type ProjectGetPayload<
    S extends boolean | null | undefined | ProjectArgs,
    U = keyof S
      > = S extends true
        ? Project
    : S extends undefined
    ? never
    : S extends ProjectArgs | FindManyProjectArgs
    ?'include' extends U
    ? Project  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'accounts'
        ? Array < AccountGetPayload<S['include'][P]>>  :
        P extends 'chunks'
        ? Array < ChunkGetPayload<S['include'][P]>>  :
        P extends 'contributorAttributes'
        ? Array < ContributorAttributeGetPayload<S['include'][P]>>  :
        P extends 'discoverys'
        ? Array < DiscoveryGetPayload<S['include'][P]>>  :
        P extends 'messages'
        ? Array < MessageGetPayload<S['include'][P]>>  :
        P extends 'organizations'
        ? Array < OrganizationGetPayload<S['include'][P]>>  :
        P extends 'persons'
        ? Array < PersonGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Project ?Project [P]
  : 
          P extends 'accounts'
        ? Array < AccountGetPayload<S['select'][P]>>  :
        P extends 'chunks'
        ? Array < ChunkGetPayload<S['select'][P]>>  :
        P extends 'contributorAttributes'
        ? Array < ContributorAttributeGetPayload<S['select'][P]>>  :
        P extends 'discoverys'
        ? Array < DiscoveryGetPayload<S['select'][P]>>  :
        P extends 'messages'
        ? Array < MessageGetPayload<S['select'][P]>>  :
        P extends 'organizations'
        ? Array < OrganizationGetPayload<S['select'][P]>>  :
        P extends 'persons'
        ? Array < PersonGetPayload<S['select'][P]>>  : never
  } 
    : Project
  : Project


  export interface ProjectDelegate {
    /**
     * Find zero or one Project that matches the filter.
     * @param {FindUniqueProjectArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueProjectArgs>(
      args: Subset<T, FindUniqueProjectArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>
    /**
     * Find the first Project that matches the filter.
     * @param {FindFirstProjectArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstProjectArgs>(
      args?: Subset<T, FindFirstProjectArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>
    /**
     * Find zero or more Projects that matches the filter.
     * @param {FindManyProjectArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyProjectArgs>(
      args?: Subset<T, FindManyProjectArgs>
    ): CheckSelect<T, Promise<Array<Project>>, Promise<Array<ProjectGetPayload<T>>>>
    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
    **/
    create<T extends ProjectCreateArgs>(
      args: Subset<T, ProjectCreateArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>
    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
    **/
    delete<T extends ProjectDeleteArgs>(
      args: Subset<T, ProjectDeleteArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>
    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProjectUpdateArgs>(
      args: Subset<T, ProjectUpdateArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>
    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProjectDeleteManyArgs>(
      args?: Subset<T, ProjectDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Projects.
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProjectUpdateManyArgs>(
      args: Subset<T, ProjectUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
    **/
    upsert<T extends ProjectUpsertArgs>(
      args: Subset<T, ProjectUpsertArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>
    /**
     * Find zero or one Project that matches the filter.
     * @param {FindUniqueProjectArgs} args - Arguments to find a Project
     * @deprecated This will be deprecated please use prisma.project.findUnique
     * @example
     * // Get one Project
     * const project = await prisma.project.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueProjectArgs>(
      args: Subset<T, FindUniqueProjectArgs>
    ): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyProjectArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateProjectArgs>(args: Subset<T, AggregateProjectArgs>): Promise<GetProjectAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProjectClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    accounts<T extends FindManyAccountArgs = {}>(args?: Subset<T, FindManyAccountArgs>): CheckSelect<T, Promise<Array<Account>>, Promise<Array<AccountGetPayload<T>>>>;

    chunks<T extends FindManyChunkArgs = {}>(args?: Subset<T, FindManyChunkArgs>): CheckSelect<T, Promise<Array<Chunk>>, Promise<Array<ChunkGetPayload<T>>>>;

    contributorAttributes<T extends FindManyContributorAttributeArgs = {}>(args?: Subset<T, FindManyContributorAttributeArgs>): CheckSelect<T, Promise<Array<ContributorAttribute>>, Promise<Array<ContributorAttributeGetPayload<T>>>>;

    discoverys<T extends FindManyDiscoveryArgs = {}>(args?: Subset<T, FindManyDiscoveryArgs>): CheckSelect<T, Promise<Array<Discovery>>, Promise<Array<DiscoveryGetPayload<T>>>>;

    messages<T extends FindManyMessageArgs = {}>(args?: Subset<T, FindManyMessageArgs>): CheckSelect<T, Promise<Array<Message>>, Promise<Array<MessageGetPayload<T>>>>;

    organizations<T extends FindManyOrganizationArgs = {}>(args?: Subset<T, FindManyOrganizationArgs>): CheckSelect<T, Promise<Array<Organization>>, Promise<Array<OrganizationGetPayload<T>>>>;

    persons<T extends FindManyPersonArgs = {}>(args?: Subset<T, FindManyPersonArgs>): CheckSelect<T, Promise<Array<Person>>, Promise<Array<PersonGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Project findUnique
   */
  export type FindUniqueProjectArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project findFirst
   */
  export type FindFirstProjectArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Project to fetch.
    **/
    where?: ProjectWhereInput
    orderBy?: Enumerable<ProjectOrderByInput>
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project findMany
   */
  export type FindManyProjectArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
    /**
     * Filter, which Projects to fetch.
    **/
    where?: ProjectWhereInput
    /**
     * Determine the order of the Projects to fetch.
    **/
    orderBy?: Enumerable<ProjectOrderByInput>
    /**
     * Sets the position for listing Projects.
    **/
    cursor?: ProjectWhereUniqueInput
    /**
     * The number of Projects to fetch. If negative number, it will take Projects before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` Projects.
    **/
    skip?: number
    distinct?: Enumerable<ProjectScalarFieldEnum>
  }


  /**
   * Project create
   */
  export type ProjectCreateArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
    /**
     * The data needed to create a Project.
    **/
    data: ProjectCreateInput
  }


  /**
   * Project update
   */
  export type ProjectUpdateArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
    /**
     * The data needed to update a Project.
    **/
    data: ProjectUpdateInput
    /**
     * Choose, which Project to update.
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs = {
    data: ProjectUpdateManyMutationInput
    where?: ProjectWhereInput
  }


  /**
   * Project upsert
   */
  export type ProjectUpsertArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
    /**
     * The filter to search for the Project to update in case it exists.
    **/
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
    **/
    create: ProjectCreateInput
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
    **/
    update: ProjectUpdateInput
  }


  /**
   * Project delete
   */
  export type ProjectDeleteArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
    /**
     * Filter which Project to delete.
    **/
    where: ProjectWhereUniqueInput
  }


  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs = {
    where?: ProjectWhereInput
  }


  /**
   * Project without action
   */
  export type ProjectArgs = {
    /**
     * Select specific fields to fetch from the Project
    **/
    select?: ProjectSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ProjectInclude | null
  }



  /**
   * Model SubMessage
   */


  export type AggregateSubMessage = {
    count: number | null
    avg: SubMessageAvgAggregateOutputType | null
    sum: SubMessageSumAggregateOutputType | null
    min: SubMessageMinAggregateOutputType | null
    max: SubMessageMaxAggregateOutputType | null
  }

  export type SubMessageAvgAggregateOutputType = {
    id: number
    submitterId: number
    messageId: number
  }

  export type SubMessageSumAggregateOutputType = {
    id: number
    submitterId: number
    messageId: number
  }

  export type SubMessageMinAggregateOutputType = {
    id: number
    submitterId: number
    content: string | null
    messageId: number
  }

  export type SubMessageMaxAggregateOutputType = {
    id: number
    submitterId: number
    content: string | null
    messageId: number
  }

  export type SubMessageCountAggregateOutputType = {
    id: number
    submitterId: number
    content: number | null
    messageId: number
    _all: number
  }


  export type SubMessageAvgAggregateInputType = {
    id?: true
    submitterId?: true
    messageId?: true
  }

  export type SubMessageSumAggregateInputType = {
    id?: true
    submitterId?: true
    messageId?: true
  }

  export type SubMessageMinAggregateInputType = {
    id?: true
    submitterId?: true
    content?: true
    messageId?: true
  }

  export type SubMessageMaxAggregateInputType = {
    id?: true
    submitterId?: true
    content?: true
    messageId?: true
  }

  export type SubMessageCountAggregateInputType = {
    id?: true
    submitterId?: true
    content?: true
    messageId?: true
    _all?: true
  }

  export type AggregateSubMessageArgs = {
    where?: SubMessageWhereInput
    orderBy?: Enumerable<SubMessageOrderByInput>
    cursor?: SubMessageWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: SubMessageAvgAggregateInputType
    sum?: SubMessageSumAggregateInputType
    min?: SubMessageMinAggregateInputType
    max?: SubMessageMaxAggregateInputType
  }

  export type GetSubMessageAggregateType<T extends AggregateSubMessageArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetSubMessageAggregateScalarType<T[P]>
  }

  export type GetSubMessageAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof SubMessageAvgAggregateOutputType ? SubMessageAvgAggregateOutputType[P] : never
  }

    



  export type SubMessageSelect = {
    id?: boolean
    submitterId?: boolean
    content?: boolean
    messageId?: boolean
    message?: boolean | MessageArgs
    person?: boolean | PersonArgs
  }

  export type SubMessageInclude = {
    message?: boolean | MessageArgs
    person?: boolean | PersonArgs
  }

  export type SubMessageGetPayload<
    S extends boolean | null | undefined | SubMessageArgs,
    U = keyof S
      > = S extends true
        ? SubMessage
    : S extends undefined
    ? never
    : S extends SubMessageArgs | FindManySubMessageArgs
    ?'include' extends U
    ? SubMessage  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'message'
        ? MessageGetPayload<S['include'][P]> :
        P extends 'person'
        ? PersonGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof SubMessage ?SubMessage [P]
  : 
          P extends 'message'
        ? MessageGetPayload<S['select'][P]> :
        P extends 'person'
        ? PersonGetPayload<S['select'][P]> : never
  } 
    : SubMessage
  : SubMessage


  export interface SubMessageDelegate {
    /**
     * Find zero or one SubMessage that matches the filter.
     * @param {FindUniqueSubMessageArgs} args - Arguments to find a SubMessage
     * @example
     * // Get one SubMessage
     * const subMessage = await prisma.subMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueSubMessageArgs>(
      args: Subset<T, FindUniqueSubMessageArgs>
    ): CheckSelect<T, Prisma__SubMessageClient<SubMessage | null>, Prisma__SubMessageClient<SubMessageGetPayload<T> | null>>
    /**
     * Find the first SubMessage that matches the filter.
     * @param {FindFirstSubMessageArgs} args - Arguments to find a SubMessage
     * @example
     * // Get one SubMessage
     * const subMessage = await prisma.subMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstSubMessageArgs>(
      args?: Subset<T, FindFirstSubMessageArgs>
    ): CheckSelect<T, Prisma__SubMessageClient<SubMessage | null>, Prisma__SubMessageClient<SubMessageGetPayload<T> | null>>
    /**
     * Find zero or more SubMessages that matches the filter.
     * @param {FindManySubMessageArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubMessages
     * const subMessages = await prisma.subMessage.findMany()
     * 
     * // Get first 10 SubMessages
     * const subMessages = await prisma.subMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subMessageWithIdOnly = await prisma.subMessage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManySubMessageArgs>(
      args?: Subset<T, FindManySubMessageArgs>
    ): CheckSelect<T, Promise<Array<SubMessage>>, Promise<Array<SubMessageGetPayload<T>>>>
    /**
     * Create a SubMessage.
     * @param {SubMessageCreateArgs} args - Arguments to create a SubMessage.
     * @example
     * // Create one SubMessage
     * const SubMessage = await prisma.subMessage.create({
     *   data: {
     *     // ... data to create a SubMessage
     *   }
     * })
     * 
    **/
    create<T extends SubMessageCreateArgs>(
      args: Subset<T, SubMessageCreateArgs>
    ): CheckSelect<T, Prisma__SubMessageClient<SubMessage>, Prisma__SubMessageClient<SubMessageGetPayload<T>>>
    /**
     * Delete a SubMessage.
     * @param {SubMessageDeleteArgs} args - Arguments to delete one SubMessage.
     * @example
     * // Delete one SubMessage
     * const SubMessage = await prisma.subMessage.delete({
     *   where: {
     *     // ... filter to delete one SubMessage
     *   }
     * })
     * 
    **/
    delete<T extends SubMessageDeleteArgs>(
      args: Subset<T, SubMessageDeleteArgs>
    ): CheckSelect<T, Prisma__SubMessageClient<SubMessage>, Prisma__SubMessageClient<SubMessageGetPayload<T>>>
    /**
     * Update one SubMessage.
     * @param {SubMessageUpdateArgs} args - Arguments to update one SubMessage.
     * @example
     * // Update one SubMessage
     * const subMessage = await prisma.subMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubMessageUpdateArgs>(
      args: Subset<T, SubMessageUpdateArgs>
    ): CheckSelect<T, Prisma__SubMessageClient<SubMessage>, Prisma__SubMessageClient<SubMessageGetPayload<T>>>
    /**
     * Delete zero or more SubMessages.
     * @param {SubMessageDeleteManyArgs} args - Arguments to filter SubMessages to delete.
     * @example
     * // Delete a few SubMessages
     * const { count } = await prisma.subMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubMessageDeleteManyArgs>(
      args?: Subset<T, SubMessageDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more SubMessages.
     * @param {SubMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubMessages
     * const subMessage = await prisma.subMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubMessageUpdateManyArgs>(
      args: Subset<T, SubMessageUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one SubMessage.
     * @param {SubMessageUpsertArgs} args - Arguments to update or create a SubMessage.
     * @example
     * // Update or create a SubMessage
     * const subMessage = await prisma.subMessage.upsert({
     *   create: {
     *     // ... data to create a SubMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubMessage we want to update
     *   }
     * })
    **/
    upsert<T extends SubMessageUpsertArgs>(
      args: Subset<T, SubMessageUpsertArgs>
    ): CheckSelect<T, Prisma__SubMessageClient<SubMessage>, Prisma__SubMessageClient<SubMessageGetPayload<T>>>
    /**
     * Find zero or one SubMessage that matches the filter.
     * @param {FindUniqueSubMessageArgs} args - Arguments to find a SubMessage
     * @deprecated This will be deprecated please use prisma.subMessage.findUnique
     * @example
     * // Get one SubMessage
     * const subMessage = await prisma.subMessage.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueSubMessageArgs>(
      args: Subset<T, FindUniqueSubMessageArgs>
    ): CheckSelect<T, Prisma__SubMessageClient<SubMessage | null>, Prisma__SubMessageClient<SubMessageGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManySubMessageArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateSubMessageArgs>(args: Subset<T, AggregateSubMessageArgs>): Promise<GetSubMessageAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SubMessageClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    message<T extends MessageArgs = {}>(args?: Subset<T, MessageArgs>): CheckSelect<T, Prisma__MessageClient<Message | null>, Prisma__MessageClient<MessageGetPayload<T> | null>>;

    person<T extends PersonArgs = {}>(args?: Subset<T, PersonArgs>): CheckSelect<T, Prisma__PersonClient<Person | null>, Prisma__PersonClient<PersonGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * SubMessage findUnique
   */
  export type FindUniqueSubMessageArgs = {
    /**
     * Select specific fields to fetch from the SubMessage
    **/
    select?: SubMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubMessageInclude | null
    /**
     * Filter, which SubMessage to fetch.
    **/
    where: SubMessageWhereUniqueInput
  }


  /**
   * SubMessage findFirst
   */
  export type FindFirstSubMessageArgs = {
    /**
     * Select specific fields to fetch from the SubMessage
    **/
    select?: SubMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubMessageInclude | null
    /**
     * Filter, which SubMessage to fetch.
    **/
    where?: SubMessageWhereInput
    orderBy?: Enumerable<SubMessageOrderByInput>
    cursor?: SubMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SubMessageScalarFieldEnum>
  }


  /**
   * SubMessage findMany
   */
  export type FindManySubMessageArgs = {
    /**
     * Select specific fields to fetch from the SubMessage
    **/
    select?: SubMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubMessageInclude | null
    /**
     * Filter, which SubMessages to fetch.
    **/
    where?: SubMessageWhereInput
    /**
     * Determine the order of the SubMessages to fetch.
    **/
    orderBy?: Enumerable<SubMessageOrderByInput>
    /**
     * Sets the position for listing SubMessages.
    **/
    cursor?: SubMessageWhereUniqueInput
    /**
     * The number of SubMessages to fetch. If negative number, it will take SubMessages before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` SubMessages.
    **/
    skip?: number
    distinct?: Enumerable<SubMessageScalarFieldEnum>
  }


  /**
   * SubMessage create
   */
  export type SubMessageCreateArgs = {
    /**
     * Select specific fields to fetch from the SubMessage
    **/
    select?: SubMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubMessageInclude | null
    /**
     * The data needed to create a SubMessage.
    **/
    data: SubMessageCreateInput
  }


  /**
   * SubMessage update
   */
  export type SubMessageUpdateArgs = {
    /**
     * Select specific fields to fetch from the SubMessage
    **/
    select?: SubMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubMessageInclude | null
    /**
     * The data needed to update a SubMessage.
    **/
    data: SubMessageUpdateInput
    /**
     * Choose, which SubMessage to update.
    **/
    where: SubMessageWhereUniqueInput
  }


  /**
   * SubMessage updateMany
   */
  export type SubMessageUpdateManyArgs = {
    data: SubMessageUpdateManyMutationInput
    where?: SubMessageWhereInput
  }


  /**
   * SubMessage upsert
   */
  export type SubMessageUpsertArgs = {
    /**
     * Select specific fields to fetch from the SubMessage
    **/
    select?: SubMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubMessageInclude | null
    /**
     * The filter to search for the SubMessage to update in case it exists.
    **/
    where: SubMessageWhereUniqueInput
    /**
     * In case the SubMessage found by the `where` argument doesn't exist, create a new SubMessage with this data.
    **/
    create: SubMessageCreateInput
    /**
     * In case the SubMessage was found with the provided `where` argument, update it with this data.
    **/
    update: SubMessageUpdateInput
  }


  /**
   * SubMessage delete
   */
  export type SubMessageDeleteArgs = {
    /**
     * Select specific fields to fetch from the SubMessage
    **/
    select?: SubMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubMessageInclude | null
    /**
     * Filter which SubMessage to delete.
    **/
    where: SubMessageWhereUniqueInput
  }


  /**
   * SubMessage deleteMany
   */
  export type SubMessageDeleteManyArgs = {
    where?: SubMessageWhereInput
  }


  /**
   * SubMessage without action
   */
  export type SubMessageArgs = {
    /**
     * Select specific fields to fetch from the SubMessage
    **/
    select?: SubMessageSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: SubMessageInclude | null
  }



  /**
   * Model TextSelection
   */


  export type AggregateTextSelection = {
    count: number | null
    avg: TextSelectionAvgAggregateOutputType | null
    sum: TextSelectionSumAggregateOutputType | null
    min: TextSelectionMinAggregateOutputType | null
    max: TextSelectionMaxAggregateOutputType | null
  }

  export type TextSelectionAvgAggregateOutputType = {
    id: number
    offsetstart: number
    length: number
    submessagenumber: number
    chunkId: number
  }

  export type TextSelectionSumAggregateOutputType = {
    id: number
    offsetstart: number
    length: number
    submessagenumber: number
    chunkId: number
  }

  export type TextSelectionMinAggregateOutputType = {
    id: number
    offsetstart: number
    length: number
    submessagenumber: number
    content: string | null
    chunkId: number
  }

  export type TextSelectionMaxAggregateOutputType = {
    id: number
    offsetstart: number
    length: number
    submessagenumber: number
    content: string | null
    chunkId: number
  }

  export type TextSelectionCountAggregateOutputType = {
    id: number
    offsetstart: number
    length: number
    submessagenumber: number
    content: number | null
    chunkId: number
    _all: number
  }


  export type TextSelectionAvgAggregateInputType = {
    id?: true
    offsetstart?: true
    length?: true
    submessagenumber?: true
    chunkId?: true
  }

  export type TextSelectionSumAggregateInputType = {
    id?: true
    offsetstart?: true
    length?: true
    submessagenumber?: true
    chunkId?: true
  }

  export type TextSelectionMinAggregateInputType = {
    id?: true
    offsetstart?: true
    length?: true
    submessagenumber?: true
    content?: true
    chunkId?: true
  }

  export type TextSelectionMaxAggregateInputType = {
    id?: true
    offsetstart?: true
    length?: true
    submessagenumber?: true
    content?: true
    chunkId?: true
  }

  export type TextSelectionCountAggregateInputType = {
    id?: true
    offsetstart?: true
    length?: true
    submessagenumber?: true
    content?: true
    chunkId?: true
    _all?: true
  }

  export type AggregateTextSelectionArgs = {
    where?: TextSelectionWhereInput
    orderBy?: Enumerable<TextSelectionOrderByInput>
    cursor?: TextSelectionWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: TextSelectionAvgAggregateInputType
    sum?: TextSelectionSumAggregateInputType
    min?: TextSelectionMinAggregateInputType
    max?: TextSelectionMaxAggregateInputType
  }

  export type GetTextSelectionAggregateType<T extends AggregateTextSelectionArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetTextSelectionAggregateScalarType<T[P]>
  }

  export type GetTextSelectionAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof TextSelectionAvgAggregateOutputType ? TextSelectionAvgAggregateOutputType[P] : never
  }

    



  export type TextSelectionSelect = {
    id?: boolean
    offsetstart?: boolean
    length?: boolean
    submessagenumber?: boolean
    content?: boolean
    chunkId?: boolean
    chunk?: boolean | ChunkArgs
  }

  export type TextSelectionInclude = {
    chunk?: boolean | ChunkArgs
  }

  export type TextSelectionGetPayload<
    S extends boolean | null | undefined | TextSelectionArgs,
    U = keyof S
      > = S extends true
        ? TextSelection
    : S extends undefined
    ? never
    : S extends TextSelectionArgs | FindManyTextSelectionArgs
    ?'include' extends U
    ? TextSelection  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'chunk'
        ? ChunkGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof TextSelection ?TextSelection [P]
  : 
          P extends 'chunk'
        ? ChunkGetPayload<S['select'][P]> : never
  } 
    : TextSelection
  : TextSelection


  export interface TextSelectionDelegate {
    /**
     * Find zero or one TextSelection that matches the filter.
     * @param {FindUniqueTextSelectionArgs} args - Arguments to find a TextSelection
     * @example
     * // Get one TextSelection
     * const textSelection = await prisma.textSelection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueTextSelectionArgs>(
      args: Subset<T, FindUniqueTextSelectionArgs>
    ): CheckSelect<T, Prisma__TextSelectionClient<TextSelection | null>, Prisma__TextSelectionClient<TextSelectionGetPayload<T> | null>>
    /**
     * Find the first TextSelection that matches the filter.
     * @param {FindFirstTextSelectionArgs} args - Arguments to find a TextSelection
     * @example
     * // Get one TextSelection
     * const textSelection = await prisma.textSelection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstTextSelectionArgs>(
      args?: Subset<T, FindFirstTextSelectionArgs>
    ): CheckSelect<T, Prisma__TextSelectionClient<TextSelection | null>, Prisma__TextSelectionClient<TextSelectionGetPayload<T> | null>>
    /**
     * Find zero or more TextSelections that matches the filter.
     * @param {FindManyTextSelectionArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TextSelections
     * const textSelections = await prisma.textSelection.findMany()
     * 
     * // Get first 10 TextSelections
     * const textSelections = await prisma.textSelection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const textSelectionWithIdOnly = await prisma.textSelection.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyTextSelectionArgs>(
      args?: Subset<T, FindManyTextSelectionArgs>
    ): CheckSelect<T, Promise<Array<TextSelection>>, Promise<Array<TextSelectionGetPayload<T>>>>
    /**
     * Create a TextSelection.
     * @param {TextSelectionCreateArgs} args - Arguments to create a TextSelection.
     * @example
     * // Create one TextSelection
     * const TextSelection = await prisma.textSelection.create({
     *   data: {
     *     // ... data to create a TextSelection
     *   }
     * })
     * 
    **/
    create<T extends TextSelectionCreateArgs>(
      args: Subset<T, TextSelectionCreateArgs>
    ): CheckSelect<T, Prisma__TextSelectionClient<TextSelection>, Prisma__TextSelectionClient<TextSelectionGetPayload<T>>>
    /**
     * Delete a TextSelection.
     * @param {TextSelectionDeleteArgs} args - Arguments to delete one TextSelection.
     * @example
     * // Delete one TextSelection
     * const TextSelection = await prisma.textSelection.delete({
     *   where: {
     *     // ... filter to delete one TextSelection
     *   }
     * })
     * 
    **/
    delete<T extends TextSelectionDeleteArgs>(
      args: Subset<T, TextSelectionDeleteArgs>
    ): CheckSelect<T, Prisma__TextSelectionClient<TextSelection>, Prisma__TextSelectionClient<TextSelectionGetPayload<T>>>
    /**
     * Update one TextSelection.
     * @param {TextSelectionUpdateArgs} args - Arguments to update one TextSelection.
     * @example
     * // Update one TextSelection
     * const textSelection = await prisma.textSelection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TextSelectionUpdateArgs>(
      args: Subset<T, TextSelectionUpdateArgs>
    ): CheckSelect<T, Prisma__TextSelectionClient<TextSelection>, Prisma__TextSelectionClient<TextSelectionGetPayload<T>>>
    /**
     * Delete zero or more TextSelections.
     * @param {TextSelectionDeleteManyArgs} args - Arguments to filter TextSelections to delete.
     * @example
     * // Delete a few TextSelections
     * const { count } = await prisma.textSelection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TextSelectionDeleteManyArgs>(
      args?: Subset<T, TextSelectionDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more TextSelections.
     * @param {TextSelectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TextSelections
     * const textSelection = await prisma.textSelection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TextSelectionUpdateManyArgs>(
      args: Subset<T, TextSelectionUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one TextSelection.
     * @param {TextSelectionUpsertArgs} args - Arguments to update or create a TextSelection.
     * @example
     * // Update or create a TextSelection
     * const textSelection = await prisma.textSelection.upsert({
     *   create: {
     *     // ... data to create a TextSelection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TextSelection we want to update
     *   }
     * })
    **/
    upsert<T extends TextSelectionUpsertArgs>(
      args: Subset<T, TextSelectionUpsertArgs>
    ): CheckSelect<T, Prisma__TextSelectionClient<TextSelection>, Prisma__TextSelectionClient<TextSelectionGetPayload<T>>>
    /**
     * Find zero or one TextSelection that matches the filter.
     * @param {FindUniqueTextSelectionArgs} args - Arguments to find a TextSelection
     * @deprecated This will be deprecated please use prisma.textSelection.findUnique
     * @example
     * // Get one TextSelection
     * const textSelection = await prisma.textSelection.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueTextSelectionArgs>(
      args: Subset<T, FindUniqueTextSelectionArgs>
    ): CheckSelect<T, Prisma__TextSelectionClient<TextSelection | null>, Prisma__TextSelectionClient<TextSelectionGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyTextSelectionArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateTextSelectionArgs>(args: Subset<T, AggregateTextSelectionArgs>): Promise<GetTextSelectionAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for TextSelection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TextSelectionClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    chunk<T extends ChunkArgs = {}>(args?: Subset<T, ChunkArgs>): CheckSelect<T, Prisma__ChunkClient<Chunk | null>, Prisma__ChunkClient<ChunkGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * TextSelection findUnique
   */
  export type FindUniqueTextSelectionArgs = {
    /**
     * Select specific fields to fetch from the TextSelection
    **/
    select?: TextSelectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TextSelectionInclude | null
    /**
     * Filter, which TextSelection to fetch.
    **/
    where: TextSelectionWhereUniqueInput
  }


  /**
   * TextSelection findFirst
   */
  export type FindFirstTextSelectionArgs = {
    /**
     * Select specific fields to fetch from the TextSelection
    **/
    select?: TextSelectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TextSelectionInclude | null
    /**
     * Filter, which TextSelection to fetch.
    **/
    where?: TextSelectionWhereInput
    orderBy?: Enumerable<TextSelectionOrderByInput>
    cursor?: TextSelectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TextSelectionScalarFieldEnum>
  }


  /**
   * TextSelection findMany
   */
  export type FindManyTextSelectionArgs = {
    /**
     * Select specific fields to fetch from the TextSelection
    **/
    select?: TextSelectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TextSelectionInclude | null
    /**
     * Filter, which TextSelections to fetch.
    **/
    where?: TextSelectionWhereInput
    /**
     * Determine the order of the TextSelections to fetch.
    **/
    orderBy?: Enumerable<TextSelectionOrderByInput>
    /**
     * Sets the position for listing TextSelections.
    **/
    cursor?: TextSelectionWhereUniqueInput
    /**
     * The number of TextSelections to fetch. If negative number, it will take TextSelections before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` TextSelections.
    **/
    skip?: number
    distinct?: Enumerable<TextSelectionScalarFieldEnum>
  }


  /**
   * TextSelection create
   */
  export type TextSelectionCreateArgs = {
    /**
     * Select specific fields to fetch from the TextSelection
    **/
    select?: TextSelectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TextSelectionInclude | null
    /**
     * The data needed to create a TextSelection.
    **/
    data: TextSelectionCreateInput
  }


  /**
   * TextSelection update
   */
  export type TextSelectionUpdateArgs = {
    /**
     * Select specific fields to fetch from the TextSelection
    **/
    select?: TextSelectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TextSelectionInclude | null
    /**
     * The data needed to update a TextSelection.
    **/
    data: TextSelectionUpdateInput
    /**
     * Choose, which TextSelection to update.
    **/
    where: TextSelectionWhereUniqueInput
  }


  /**
   * TextSelection updateMany
   */
  export type TextSelectionUpdateManyArgs = {
    data: TextSelectionUpdateManyMutationInput
    where?: TextSelectionWhereInput
  }


  /**
   * TextSelection upsert
   */
  export type TextSelectionUpsertArgs = {
    /**
     * Select specific fields to fetch from the TextSelection
    **/
    select?: TextSelectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TextSelectionInclude | null
    /**
     * The filter to search for the TextSelection to update in case it exists.
    **/
    where: TextSelectionWhereUniqueInput
    /**
     * In case the TextSelection found by the `where` argument doesn't exist, create a new TextSelection with this data.
    **/
    create: TextSelectionCreateInput
    /**
     * In case the TextSelection was found with the provided `where` argument, update it with this data.
    **/
    update: TextSelectionUpdateInput
  }


  /**
   * TextSelection delete
   */
  export type TextSelectionDeleteArgs = {
    /**
     * Select specific fields to fetch from the TextSelection
    **/
    select?: TextSelectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TextSelectionInclude | null
    /**
     * Filter which TextSelection to delete.
    **/
    where: TextSelectionWhereUniqueInput
  }


  /**
   * TextSelection deleteMany
   */
  export type TextSelectionDeleteManyArgs = {
    where?: TextSelectionWhereInput
  }


  /**
   * TextSelection without action
   */
  export type TextSelectionArgs = {
    /**
     * Select specific fields to fetch from the TextSelection
    **/
    select?: TextSelectionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TextSelectionInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AccountScalarFieldEnum: {
    id: 'id',
    username: 'username',
    hashedPassword: 'hashedPassword',
    personId: 'personId',
    projectId: 'projectId',
    type: 'type'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const ChunkScalarFieldEnum: {
    projectId: 'projectId',
    id: 'id',
    messageId: 'messageId',
    discoveryId: 'discoveryId'
  };

  export type ChunkScalarFieldEnum = (typeof ChunkScalarFieldEnum)[keyof typeof ChunkScalarFieldEnum]


  export const ContributorAttributeScalarFieldEnum: {
    projectId: 'projectId',
    id: 'id',
    appliesTo: 'appliesTo',
    name: 'name',
    type: 'type'
  };

  export type ContributorAttributeScalarFieldEnum = (typeof ContributorAttributeScalarFieldEnum)[keyof typeof ContributorAttributeScalarFieldEnum]


  export const ContributorAttributeValueScalarFieldEnum: {
    id: 'id',
    contributorAttributeId: 'contributorAttributeId',
    contributorAttributeType: 'contributorAttributeType',
    personId: 'personId',
    organizationId: 'organizationId',
    valuetext: 'valuetext'
  };

  export type ContributorAttributeValueScalarFieldEnum = (typeof ContributorAttributeValueScalarFieldEnum)[keyof typeof ContributorAttributeValueScalarFieldEnum]


  export const DiscoveryScalarFieldEnum: {
    projectId: 'projectId',
    id: 'id',
    title: 'title',
    description: 'description'
  };

  export type DiscoveryScalarFieldEnum = (typeof DiscoveryScalarFieldEnum)[keyof typeof DiscoveryScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    projectId: 'projectId',
    id: 'id',
    requesterId: 'requesterId',
    submitterId: 'submitterId',
    clientId: 'clientId',
    title: 'title',
    content: 'content'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    projectId: 'projectId',
    id: 'id',
    name: 'name'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const PersonScalarFieldEnum: {
    projectId: 'projectId',
    id: 'id',
    name: 'name',
    email: 'email',
    organizationId: 'organizationId'
  };

  export type PersonScalarFieldEnum = (typeof PersonScalarFieldEnum)[keyof typeof PersonScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const SubMessageScalarFieldEnum: {
    id: 'id',
    submitterId: 'submitterId',
    content: 'content',
    messageId: 'messageId'
  };

  export type SubMessageScalarFieldEnum = (typeof SubMessageScalarFieldEnum)[keyof typeof SubMessageScalarFieldEnum]


  export const TextSelectionScalarFieldEnum: {
    id: 'id',
    offsetstart: 'offsetstart',
    length: 'length',
    submessagenumber: 'submessagenumber',
    content: 'content',
    chunkId: 'chunkId'
  };

  export type TextSelectionScalarFieldEnum = (typeof TextSelectionScalarFieldEnum)[keyof typeof TextSelectionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type AccountWhereInput = {
    AND?: Enumerable<AccountWhereInput>
    OR?: Enumerable<AccountWhereInput>
    NOT?: Enumerable<AccountWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    hashedPassword?: StringFilter | string
    personId?: IntFilter | number
    projectId?: IntFilter | number
    type?: EnumACCOUNT_TYPENullableFilter | ACCOUNT_TYPE | null
    person?: XOR<PersonWhereInput, PersonRelationFilter>
    project?: XOR<ProjectWhereInput, ProjectRelationFilter>
  }

  export type AccountOrderByInput = {
    id?: SortOrder
    username?: SortOrder
    hashedPassword?: SortOrder
    personId?: SortOrder
    projectId?: SortOrder
    type?: SortOrder
  }

  export type AccountWhereUniqueInput = {
    id?: number
  }

  export type ChunkWhereInput = {
    AND?: Enumerable<ChunkWhereInput>
    OR?: Enumerable<ChunkWhereInput>
    NOT?: Enumerable<ChunkWhereInput>
    projectId?: IntFilter | number
    id?: IntFilter | number
    messageId?: IntFilter | number
    discoveryId?: IntFilter | number
    discovery?: XOR<DiscoveryWhereInput, DiscoveryRelationFilter>
    message?: XOR<MessageWhereInput, MessageRelationFilter>
    project?: XOR<ProjectWhereInput, ProjectRelationFilter>
    textSelections?: TextSelectionListRelationFilter
  }

  export type ChunkOrderByInput = {
    projectId?: SortOrder
    id?: SortOrder
    messageId?: SortOrder
    discoveryId?: SortOrder
  }

  export type ChunkWhereUniqueInput = {
    id?: number
  }

  export type ContributorAttributeWhereInput = {
    AND?: Enumerable<ContributorAttributeWhereInput>
    OR?: Enumerable<ContributorAttributeWhereInput>
    NOT?: Enumerable<ContributorAttributeWhereInput>
    projectId?: IntFilter | number
    id?: IntFilter | number
    appliesTo?: EnumENTITY_TYPENullableFilter | ENTITY_TYPE | null
    name?: StringFilter | string
    type?: EnumCONTRIBUTOR_ATTRIBUTE_TYPEFilter | CONTRIBUTOR_ATTRIBUTE_TYPE
    project?: XOR<ProjectWhereInput, ProjectRelationFilter>
    contributorAttributeValues?: ContributorAttributeValueListRelationFilter
  }

  export type ContributorAttributeOrderByInput = {
    projectId?: SortOrder
    id?: SortOrder
    appliesTo?: SortOrder
    name?: SortOrder
    type?: SortOrder
  }

  export type ContributorAttributeWhereUniqueInput = {
    id_type?: IdTypeCompoundUniqueInput
  }

  export type ContributorAttributeValueWhereInput = {
    AND?: Enumerable<ContributorAttributeValueWhereInput>
    OR?: Enumerable<ContributorAttributeValueWhereInput>
    NOT?: Enumerable<ContributorAttributeValueWhereInput>
    id?: IntFilter | number
    contributorAttributeId?: IntFilter | number
    contributorAttributeType?: EnumCONTRIBUTOR_ATTRIBUTE_TYPEFilter | CONTRIBUTOR_ATTRIBUTE_TYPE
    personId?: IntFilter | number
    organizationId?: IntFilter | number
    valuetext?: StringNullableFilter | string | null
    contributorAttribute?: XOR<ContributorAttributeWhereInput, ContributorAttributeRelationFilter>
    organization?: XOR<OrganizationWhereInput, OrganizationRelationFilter>
    person?: XOR<PersonWhereInput, PersonRelationFilter>
  }

  export type ContributorAttributeValueOrderByInput = {
    id?: SortOrder
    contributorAttributeId?: SortOrder
    contributorAttributeType?: SortOrder
    personId?: SortOrder
    organizationId?: SortOrder
    valuetext?: SortOrder
  }

  export type ContributorAttributeValueWhereUniqueInput = {
    id?: number
    ContributorAttributeValue_contributorAttributeId_personId_o_key?: ContributorAttributeValue_contributorAttributeId_personId_o_keyCompoundUniqueInput
  }

  export type DiscoveryWhereInput = {
    AND?: Enumerable<DiscoveryWhereInput>
    OR?: Enumerable<DiscoveryWhereInput>
    NOT?: Enumerable<DiscoveryWhereInput>
    projectId?: IntFilter | number
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
    project?: XOR<ProjectWhereInput, ProjectRelationFilter>
    chunks?: ChunkListRelationFilter
  }

  export type DiscoveryOrderByInput = {
    projectId?: SortOrder
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
  }

  export type DiscoveryWhereUniqueInput = {
    id?: number
  }

  export type MessageWhereInput = {
    AND?: Enumerable<MessageWhereInput>
    OR?: Enumerable<MessageWhereInput>
    NOT?: Enumerable<MessageWhereInput>
    projectId?: IntFilter | number
    id?: IntFilter | number
    requesterId?: IntFilter | number
    submitterId?: IntFilter | number
    clientId?: StringNullableFilter | string | null
    title?: StringNullableFilter | string | null
    content?: StringNullableFilter | string | null
    project?: XOR<ProjectWhereInput, ProjectRelationFilter>
    person_Message_requesterIdToPerson?: XOR<PersonWhereInput, PersonRelationFilter>
    person_Message_submitterIdToPerson?: XOR<PersonWhereInput, PersonRelationFilter>
    chunks?: ChunkListRelationFilter
    subMessages?: SubMessageListRelationFilter
  }

  export type MessageOrderByInput = {
    projectId?: SortOrder
    id?: SortOrder
    requesterId?: SortOrder
    submitterId?: SortOrder
    clientId?: SortOrder
    title?: SortOrder
    content?: SortOrder
  }

  export type MessageWhereUniqueInput = {
    id?: number
  }

  export type OrganizationWhereInput = {
    AND?: Enumerable<OrganizationWhereInput>
    OR?: Enumerable<OrganizationWhereInput>
    NOT?: Enumerable<OrganizationWhereInput>
    projectId?: IntFilter | number
    id?: IntFilter | number
    name?: StringFilter | string
    project?: XOR<ProjectWhereInput, ProjectRelationFilter>
    contributorAttributeValues?: ContributorAttributeValueListRelationFilter
    persons?: PersonListRelationFilter
  }

  export type OrganizationOrderByInput = {
    projectId?: SortOrder
    id?: SortOrder
    name?: SortOrder
  }

  export type OrganizationWhereUniqueInput = {
    id?: number
  }

  export type PersonWhereInput = {
    AND?: Enumerable<PersonWhereInput>
    OR?: Enumerable<PersonWhereInput>
    NOT?: Enumerable<PersonWhereInput>
    projectId?: IntFilter | number
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    organizationId?: IntFilter | number
    organization?: XOR<OrganizationWhereInput, OrganizationRelationFilter>
    project?: XOR<ProjectWhereInput, ProjectRelationFilter>
    accounts?: AccountListRelationFilter
    contributorAttributeValues?: ContributorAttributeValueListRelationFilter
    message_Message_requesterIdToPersons?: MessageListRelationFilter
    message_Message_submitterIdToPersons?: MessageListRelationFilter
    subMessages?: SubMessageListRelationFilter
  }

  export type PersonOrderByInput = {
    projectId?: SortOrder
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    organizationId?: SortOrder
  }

  export type PersonWhereUniqueInput = {
    id?: number
  }

  export type ProjectWhereInput = {
    AND?: Enumerable<ProjectWhereInput>
    OR?: Enumerable<ProjectWhereInput>
    NOT?: Enumerable<ProjectWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    accounts?: AccountListRelationFilter
    chunks?: ChunkListRelationFilter
    contributorAttributes?: ContributorAttributeListRelationFilter
    discoverys?: DiscoveryListRelationFilter
    messages?: MessageListRelationFilter
    organizations?: OrganizationListRelationFilter
    persons?: PersonListRelationFilter
  }

  export type ProjectOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type ProjectWhereUniqueInput = {
    id?: number
  }

  export type SubMessageWhereInput = {
    AND?: Enumerable<SubMessageWhereInput>
    OR?: Enumerable<SubMessageWhereInput>
    NOT?: Enumerable<SubMessageWhereInput>
    id?: IntFilter | number
    submitterId?: IntFilter | number
    content?: StringFilter | string
    messageId?: IntFilter | number
    message?: XOR<MessageWhereInput, MessageRelationFilter>
    person?: XOR<PersonWhereInput, PersonRelationFilter>
  }

  export type SubMessageOrderByInput = {
    id?: SortOrder
    submitterId?: SortOrder
    content?: SortOrder
    messageId?: SortOrder
  }

  export type SubMessageWhereUniqueInput = {
    id?: number
  }

  export type TextSelectionWhereInput = {
    AND?: Enumerable<TextSelectionWhereInput>
    OR?: Enumerable<TextSelectionWhereInput>
    NOT?: Enumerable<TextSelectionWhereInput>
    id?: IntFilter | number
    offsetstart?: FloatFilter | number
    length?: FloatFilter | number
    submessagenumber?: IntFilter | number
    content?: StringFilter | string
    chunkId?: IntFilter | number
    chunk?: XOR<ChunkWhereInput, ChunkRelationFilter>
  }

  export type TextSelectionOrderByInput = {
    id?: SortOrder
    offsetstart?: SortOrder
    length?: SortOrder
    submessagenumber?: SortOrder
    content?: SortOrder
    chunkId?: SortOrder
  }

  export type TextSelectionWhereUniqueInput = {
    id?: number
  }

  export type AccountCreateInput = {
    username: string
    hashedPassword: string
    type?: ACCOUNT_TYPE | null
    person: PersonCreateOneWithoutAccountsInput
    project: ProjectCreateOneWithoutAccountsInput
  }

  export type AccountUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumACCOUNT_TYPEFieldUpdateOperationsInput | ACCOUNT_TYPE | null
    person?: PersonUpdateOneRequiredWithoutAccountsInput
    project?: ProjectUpdateOneRequiredWithoutAccountsInput
  }

  export type AccountUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumACCOUNT_TYPEFieldUpdateOperationsInput | ACCOUNT_TYPE | null
  }

  export type ChunkCreateInput = {
    discovery: DiscoveryCreateOneWithoutChunksInput
    message: MessageCreateOneWithoutChunksInput
    project: ProjectCreateOneWithoutChunksInput
    textSelections?: TextSelectionCreateManyWithoutChunkInput
  }

  export type ChunkUpdateInput = {
    discovery?: DiscoveryUpdateOneRequiredWithoutChunksInput
    message?: MessageUpdateOneRequiredWithoutChunksInput
    project?: ProjectUpdateOneRequiredWithoutChunksInput
    textSelections?: TextSelectionUpdateManyWithoutChunkInput
  }

  export type ChunkUpdateManyMutationInput = {

  }

  export type ContributorAttributeCreateInput = {
    id?: number
    appliesTo?: ENTITY_TYPE | null
    name: string
    type: CONTRIBUTOR_ATTRIBUTE_TYPE
    project: ProjectCreateOneWithoutContributorAttributesInput
    contributorAttributeValues?: ContributorAttributeValueCreateManyWithoutContributorAttributeInput
  }

  export type ContributorAttributeUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    appliesTo?: NullableEnumENTITY_TYPEFieldUpdateOperationsInput | ENTITY_TYPE | null
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCONTRIBUTOR_ATTRIBUTE_TYPEFieldUpdateOperationsInput | CONTRIBUTOR_ATTRIBUTE_TYPE
    project?: ProjectUpdateOneRequiredWithoutContributorAttributesInput
    contributorAttributeValues?: ContributorAttributeValueUpdateManyWithoutContributorAttributeInput
  }

  export type ContributorAttributeUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    appliesTo?: NullableEnumENTITY_TYPEFieldUpdateOperationsInput | ENTITY_TYPE | null
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCONTRIBUTOR_ATTRIBUTE_TYPEFieldUpdateOperationsInput | CONTRIBUTOR_ATTRIBUTE_TYPE
  }

  export type ContributorAttributeValueCreateInput = {
    valuetext?: string | null
    contributorAttribute: ContributorAttributeCreateOneWithoutContributorAttributeValuesInput
    organization: OrganizationCreateOneWithoutContributorAttributeValuesInput
    person: PersonCreateOneWithoutContributorAttributeValuesInput
  }

  export type ContributorAttributeValueUpdateInput = {
    valuetext?: NullableStringFieldUpdateOperationsInput | string | null
    contributorAttribute?: ContributorAttributeUpdateOneRequiredWithoutContributorAttributeValuesInput
    organization?: OrganizationUpdateOneRequiredWithoutContributorAttributeValuesInput
    person?: PersonUpdateOneRequiredWithoutContributorAttributeValuesInput
  }

  export type ContributorAttributeValueUpdateManyMutationInput = {
    valuetext?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DiscoveryCreateInput = {
    title: string
    description?: string | null
    project: ProjectCreateOneWithoutDiscoverysInput
    chunks?: ChunkCreateManyWithoutDiscoveryInput
  }

  export type DiscoveryUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectUpdateOneRequiredWithoutDiscoverysInput
    chunks?: ChunkUpdateManyWithoutDiscoveryInput
  }

  export type DiscoveryUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MessageCreateInput = {
    clientId?: string | null
    title?: string | null
    content?: string | null
    project: ProjectCreateOneWithoutMessagesInput
    person_Message_requesterIdToPerson: PersonCreateOneWithoutMessage_Message_requesterIdToPersonsInput
    person_Message_submitterIdToPerson: PersonCreateOneWithoutMessage_Message_submitterIdToPersonsInput
    chunks?: ChunkCreateManyWithoutMessageInput
    subMessages?: SubMessageCreateManyWithoutMessageInput
  }

  export type MessageUpdateInput = {
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectUpdateOneRequiredWithoutMessagesInput
    person_Message_requesterIdToPerson?: PersonUpdateOneRequiredWithoutMessage_Message_requesterIdToPersonsInput
    person_Message_submitterIdToPerson?: PersonUpdateOneRequiredWithoutMessage_Message_submitterIdToPersonsInput
    chunks?: ChunkUpdateManyWithoutMessageInput
    subMessages?: SubMessageUpdateManyWithoutMessageInput
  }

  export type MessageUpdateManyMutationInput = {
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrganizationCreateInput = {
    name: string
    project: ProjectCreateOneWithoutOrganizationsInput
    contributorAttributeValues?: ContributorAttributeValueCreateManyWithoutOrganizationInput
    persons?: PersonCreateManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    project?: ProjectUpdateOneRequiredWithoutOrganizationsInput
    contributorAttributeValues?: ContributorAttributeValueUpdateManyWithoutOrganizationInput
    persons?: PersonUpdateManyWithoutOrganizationInput
  }

  export type OrganizationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type PersonCreateInput = {
    name: string
    email: string
    organization: OrganizationCreateOneWithoutPersonsInput
    project: ProjectCreateOneWithoutPersonsInput
    accounts?: AccountCreateManyWithoutPersonInput
    contributorAttributeValues?: ContributorAttributeValueCreateManyWithoutPersonInput
    message_Message_requesterIdToPersons?: MessageCreateManyWithoutPerson_Message_requesterIdToPersonInput
    message_Message_submitterIdToPersons?: MessageCreateManyWithoutPerson_Message_submitterIdToPersonInput
    subMessages?: SubMessageCreateManyWithoutPersonInput
  }

  export type PersonUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organization?: OrganizationUpdateOneRequiredWithoutPersonsInput
    project?: ProjectUpdateOneRequiredWithoutPersonsInput
    accounts?: AccountUpdateManyWithoutPersonInput
    contributorAttributeValues?: ContributorAttributeValueUpdateManyWithoutPersonInput
    message_Message_requesterIdToPersons?: MessageUpdateManyWithoutPerson_Message_requesterIdToPersonInput
    message_Message_submitterIdToPersons?: MessageUpdateManyWithoutPerson_Message_submitterIdToPersonInput
    subMessages?: SubMessageUpdateManyWithoutPersonInput
  }

  export type PersonUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectCreateInput = {
    name: string
    accounts?: AccountCreateManyWithoutProjectInput
    chunks?: ChunkCreateManyWithoutProjectInput
    contributorAttributes?: ContributorAttributeCreateManyWithoutProjectInput
    discoverys?: DiscoveryCreateManyWithoutProjectInput
    messages?: MessageCreateManyWithoutProjectInput
    organizations?: OrganizationCreateManyWithoutProjectInput
    persons?: PersonCreateManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutProjectInput
    chunks?: ChunkUpdateManyWithoutProjectInput
    contributorAttributes?: ContributorAttributeUpdateManyWithoutProjectInput
    discoverys?: DiscoveryUpdateManyWithoutProjectInput
    messages?: MessageUpdateManyWithoutProjectInput
    organizations?: OrganizationUpdateManyWithoutProjectInput
    persons?: PersonUpdateManyWithoutProjectInput
  }

  export type ProjectUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type SubMessageCreateInput = {
    content: string
    message: MessageCreateOneWithoutSubMessagesInput
    person: PersonCreateOneWithoutSubMessagesInput
  }

  export type SubMessageUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    message?: MessageUpdateOneRequiredWithoutSubMessagesInput
    person?: PersonUpdateOneRequiredWithoutSubMessagesInput
  }

  export type SubMessageUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
  }

  export type TextSelectionCreateInput = {
    offsetstart: number
    length: number
    submessagenumber: number
    content: string
    chunk: ChunkCreateOneWithoutTextSelectionsInput
  }

  export type TextSelectionUpdateInput = {
    offsetstart?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    submessagenumber?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    chunk?: ChunkUpdateOneRequiredWithoutTextSelectionsInput
  }

  export type TextSelectionUpdateManyMutationInput = {
    offsetstart?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    submessagenumber?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type EnumACCOUNT_TYPENullableFilter = {
    equals?: ACCOUNT_TYPE | null
    in?: Enumerable<ACCOUNT_TYPE> | null
    notIn?: Enumerable<ACCOUNT_TYPE> | null
    not?: NestedEnumACCOUNT_TYPENullableFilter | ACCOUNT_TYPE | null
  }

  export type PersonRelationFilter = {
    is?: PersonWhereInput
    isNot?: PersonWhereInput
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type DiscoveryRelationFilter = {
    is?: DiscoveryWhereInput
    isNot?: DiscoveryWhereInput
  }

  export type MessageRelationFilter = {
    is?: MessageWhereInput
    isNot?: MessageWhereInput
  }

  export type TextSelectionListRelationFilter = {
    every?: TextSelectionWhereInput
    some?: TextSelectionWhereInput
    none?: TextSelectionWhereInput
  }

  export type EnumENTITY_TYPENullableFilter = {
    equals?: ENTITY_TYPE | null
    in?: Enumerable<ENTITY_TYPE> | null
    notIn?: Enumerable<ENTITY_TYPE> | null
    not?: NestedEnumENTITY_TYPENullableFilter | ENTITY_TYPE | null
  }

  export type EnumCONTRIBUTOR_ATTRIBUTE_TYPEFilter = {
    equals?: CONTRIBUTOR_ATTRIBUTE_TYPE
    in?: Enumerable<CONTRIBUTOR_ATTRIBUTE_TYPE>
    notIn?: Enumerable<CONTRIBUTOR_ATTRIBUTE_TYPE>
    not?: NestedEnumCONTRIBUTOR_ATTRIBUTE_TYPEFilter | CONTRIBUTOR_ATTRIBUTE_TYPE
  }

  export type ContributorAttributeValueListRelationFilter = {
    every?: ContributorAttributeValueWhereInput
    some?: ContributorAttributeValueWhereInput
    none?: ContributorAttributeValueWhereInput
  }

  export type IdTypeCompoundUniqueInput = {
    id: number
    type: CONTRIBUTOR_ATTRIBUTE_TYPE
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type ContributorAttributeRelationFilter = {
    is?: ContributorAttributeWhereInput
    isNot?: ContributorAttributeWhereInput
  }

  export type OrganizationRelationFilter = {
    is?: OrganizationWhereInput
    isNot?: OrganizationWhereInput
  }

  export type ContributorAttributeValue_contributorAttributeId_personId_o_keyCompoundUniqueInput = {
    contributorAttributeId: number
    personId: number
    organizationId: number
  }

  export type ChunkListRelationFilter = {
    every?: ChunkWhereInput
    some?: ChunkWhereInput
    none?: ChunkWhereInput
  }

  export type SubMessageListRelationFilter = {
    every?: SubMessageWhereInput
    some?: SubMessageWhereInput
    none?: SubMessageWhereInput
  }

  export type PersonListRelationFilter = {
    every?: PersonWhereInput
    some?: PersonWhereInput
    none?: PersonWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type ContributorAttributeListRelationFilter = {
    every?: ContributorAttributeWhereInput
    some?: ContributorAttributeWhereInput
    none?: ContributorAttributeWhereInput
  }

  export type DiscoveryListRelationFilter = {
    every?: DiscoveryWhereInput
    some?: DiscoveryWhereInput
    none?: DiscoveryWhereInput
  }

  export type OrganizationListRelationFilter = {
    every?: OrganizationWhereInput
    some?: OrganizationWhereInput
    none?: OrganizationWhereInput
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type ChunkRelationFilter = {
    is?: ChunkWhereInput
    isNot?: ChunkWhereInput
  }

  export type PersonCreateOneWithoutAccountsInput = {
    create?: PersonCreateWithoutAccountsInput
    connect?: PersonWhereUniqueInput
    connectOrCreate?: PersonCreateOrConnectWithoutaccountsInput
  }

  export type ProjectCreateOneWithoutAccountsInput = {
    create?: ProjectCreateWithoutAccountsInput
    connect?: ProjectWhereUniqueInput
    connectOrCreate?: ProjectCreateOrConnectWithoutaccountsInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableEnumACCOUNT_TYPEFieldUpdateOperationsInput = {
    set?: ACCOUNT_TYPE | null
  }

  export type PersonUpdateOneRequiredWithoutAccountsInput = {
    create?: PersonCreateWithoutAccountsInput
    connect?: PersonWhereUniqueInput
    update?: PersonUpdateWithoutAccountsInput
    upsert?: PersonUpsertWithoutAccountsInput
    connectOrCreate?: PersonCreateOrConnectWithoutaccountsInput
  }

  export type ProjectUpdateOneRequiredWithoutAccountsInput = {
    create?: ProjectCreateWithoutAccountsInput
    connect?: ProjectWhereUniqueInput
    update?: ProjectUpdateWithoutAccountsInput
    upsert?: ProjectUpsertWithoutAccountsInput
    connectOrCreate?: ProjectCreateOrConnectWithoutaccountsInput
  }

  export type DiscoveryCreateOneWithoutChunksInput = {
    create?: DiscoveryCreateWithoutChunksInput
    connect?: DiscoveryWhereUniqueInput
    connectOrCreate?: DiscoveryCreateOrConnectWithoutchunksInput
  }

  export type MessageCreateOneWithoutChunksInput = {
    create?: MessageCreateWithoutChunksInput
    connect?: MessageWhereUniqueInput
    connectOrCreate?: MessageCreateOrConnectWithoutchunksInput
  }

  export type ProjectCreateOneWithoutChunksInput = {
    create?: ProjectCreateWithoutChunksInput
    connect?: ProjectWhereUniqueInput
    connectOrCreate?: ProjectCreateOrConnectWithoutchunksInput
  }

  export type TextSelectionCreateManyWithoutChunkInput = {
    create?: Enumerable<TextSelectionCreateWithoutChunkInput>
    connect?: Enumerable<TextSelectionWhereUniqueInput>
    connectOrCreate?: Enumerable<TextSelectionCreateOrConnectWithoutchunkInput>
  }

  export type DiscoveryUpdateOneRequiredWithoutChunksInput = {
    create?: DiscoveryCreateWithoutChunksInput
    connect?: DiscoveryWhereUniqueInput
    update?: DiscoveryUpdateWithoutChunksInput
    upsert?: DiscoveryUpsertWithoutChunksInput
    connectOrCreate?: DiscoveryCreateOrConnectWithoutchunksInput
  }

  export type MessageUpdateOneRequiredWithoutChunksInput = {
    create?: MessageCreateWithoutChunksInput
    connect?: MessageWhereUniqueInput
    update?: MessageUpdateWithoutChunksInput
    upsert?: MessageUpsertWithoutChunksInput
    connectOrCreate?: MessageCreateOrConnectWithoutchunksInput
  }

  export type ProjectUpdateOneRequiredWithoutChunksInput = {
    create?: ProjectCreateWithoutChunksInput
    connect?: ProjectWhereUniqueInput
    update?: ProjectUpdateWithoutChunksInput
    upsert?: ProjectUpsertWithoutChunksInput
    connectOrCreate?: ProjectCreateOrConnectWithoutchunksInput
  }

  export type TextSelectionUpdateManyWithoutChunkInput = {
    create?: Enumerable<TextSelectionCreateWithoutChunkInput>
    connect?: Enumerable<TextSelectionWhereUniqueInput>
    set?: Enumerable<TextSelectionWhereUniqueInput>
    disconnect?: Enumerable<TextSelectionWhereUniqueInput>
    delete?: Enumerable<TextSelectionWhereUniqueInput>
    update?: Enumerable<TextSelectionUpdateWithWhereUniqueWithoutChunkInput>
    updateMany?: Enumerable<TextSelectionUpdateManyWithWhereWithoutChunkInput>
    deleteMany?: Enumerable<TextSelectionScalarWhereInput>
    upsert?: Enumerable<TextSelectionUpsertWithWhereUniqueWithoutChunkInput>
    connectOrCreate?: Enumerable<TextSelectionCreateOrConnectWithoutchunkInput>
  }

  export type ProjectCreateOneWithoutContributorAttributesInput = {
    create?: ProjectCreateWithoutContributorAttributesInput
    connect?: ProjectWhereUniqueInput
    connectOrCreate?: ProjectCreateOrConnectWithoutcontributorAttributesInput
  }

  export type ContributorAttributeValueCreateManyWithoutContributorAttributeInput = {
    create?: Enumerable<ContributorAttributeValueCreateWithoutContributorAttributeInput>
    connect?: Enumerable<ContributorAttributeValueWhereUniqueInput>
    connectOrCreate?: Enumerable<ContributorAttributeValueCreateOrConnectWithoutcontributorAttributeInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableEnumENTITY_TYPEFieldUpdateOperationsInput = {
    set?: ENTITY_TYPE | null
  }

  export type EnumCONTRIBUTOR_ATTRIBUTE_TYPEFieldUpdateOperationsInput = {
    set?: CONTRIBUTOR_ATTRIBUTE_TYPE
  }

  export type ProjectUpdateOneRequiredWithoutContributorAttributesInput = {
    create?: ProjectCreateWithoutContributorAttributesInput
    connect?: ProjectWhereUniqueInput
    update?: ProjectUpdateWithoutContributorAttributesInput
    upsert?: ProjectUpsertWithoutContributorAttributesInput
    connectOrCreate?: ProjectCreateOrConnectWithoutcontributorAttributesInput
  }

  export type ContributorAttributeValueUpdateManyWithoutContributorAttributeInput = {
    create?: Enumerable<ContributorAttributeValueCreateWithoutContributorAttributeInput>
    connect?: Enumerable<ContributorAttributeValueWhereUniqueInput>
    set?: Enumerable<ContributorAttributeValueWhereUniqueInput>
    disconnect?: Enumerable<ContributorAttributeValueWhereUniqueInput>
    delete?: Enumerable<ContributorAttributeValueWhereUniqueInput>
    update?: Enumerable<ContributorAttributeValueUpdateWithWhereUniqueWithoutContributorAttributeInput>
    updateMany?: Enumerable<ContributorAttributeValueUpdateManyWithWhereWithoutContributorAttributeInput>
    deleteMany?: Enumerable<ContributorAttributeValueScalarWhereInput>
    upsert?: Enumerable<ContributorAttributeValueUpsertWithWhereUniqueWithoutContributorAttributeInput>
    connectOrCreate?: Enumerable<ContributorAttributeValueCreateOrConnectWithoutcontributorAttributeInput>
  }

  export type ContributorAttributeCreateOneWithoutContributorAttributeValuesInput = {
    create?: ContributorAttributeCreateWithoutContributorAttributeValuesInput
    connect?: ContributorAttributeWhereUniqueInput
    connectOrCreate?: ContributorAttributeCreateOrConnectWithoutcontributorAttributeValuesInput
  }

  export type OrganizationCreateOneWithoutContributorAttributeValuesInput = {
    create?: OrganizationCreateWithoutContributorAttributeValuesInput
    connect?: OrganizationWhereUniqueInput
    connectOrCreate?: OrganizationCreateOrConnectWithoutcontributorAttributeValuesInput
  }

  export type PersonCreateOneWithoutContributorAttributeValuesInput = {
    create?: PersonCreateWithoutContributorAttributeValuesInput
    connect?: PersonWhereUniqueInput
    connectOrCreate?: PersonCreateOrConnectWithoutcontributorAttributeValuesInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ContributorAttributeUpdateOneRequiredWithoutContributorAttributeValuesInput = {
    create?: ContributorAttributeCreateWithoutContributorAttributeValuesInput
    connect?: ContributorAttributeWhereUniqueInput
    update?: ContributorAttributeUpdateWithoutContributorAttributeValuesInput
    upsert?: ContributorAttributeUpsertWithoutContributorAttributeValuesInput
    connectOrCreate?: ContributorAttributeCreateOrConnectWithoutcontributorAttributeValuesInput
  }

  export type OrganizationUpdateOneRequiredWithoutContributorAttributeValuesInput = {
    create?: OrganizationCreateWithoutContributorAttributeValuesInput
    connect?: OrganizationWhereUniqueInput
    update?: OrganizationUpdateWithoutContributorAttributeValuesInput
    upsert?: OrganizationUpsertWithoutContributorAttributeValuesInput
    connectOrCreate?: OrganizationCreateOrConnectWithoutcontributorAttributeValuesInput
  }

  export type PersonUpdateOneRequiredWithoutContributorAttributeValuesInput = {
    create?: PersonCreateWithoutContributorAttributeValuesInput
    connect?: PersonWhereUniqueInput
    update?: PersonUpdateWithoutContributorAttributeValuesInput
    upsert?: PersonUpsertWithoutContributorAttributeValuesInput
    connectOrCreate?: PersonCreateOrConnectWithoutcontributorAttributeValuesInput
  }

  export type ProjectCreateOneWithoutDiscoverysInput = {
    create?: ProjectCreateWithoutDiscoverysInput
    connect?: ProjectWhereUniqueInput
    connectOrCreate?: ProjectCreateOrConnectWithoutdiscoverysInput
  }

  export type ChunkCreateManyWithoutDiscoveryInput = {
    create?: Enumerable<ChunkCreateWithoutDiscoveryInput>
    connect?: Enumerable<ChunkWhereUniqueInput>
    connectOrCreate?: Enumerable<ChunkCreateOrConnectWithoutdiscoveryInput>
  }

  export type ProjectUpdateOneRequiredWithoutDiscoverysInput = {
    create?: ProjectCreateWithoutDiscoverysInput
    connect?: ProjectWhereUniqueInput
    update?: ProjectUpdateWithoutDiscoverysInput
    upsert?: ProjectUpsertWithoutDiscoverysInput
    connectOrCreate?: ProjectCreateOrConnectWithoutdiscoverysInput
  }

  export type ChunkUpdateManyWithoutDiscoveryInput = {
    create?: Enumerable<ChunkCreateWithoutDiscoveryInput>
    connect?: Enumerable<ChunkWhereUniqueInput>
    set?: Enumerable<ChunkWhereUniqueInput>
    disconnect?: Enumerable<ChunkWhereUniqueInput>
    delete?: Enumerable<ChunkWhereUniqueInput>
    update?: Enumerable<ChunkUpdateWithWhereUniqueWithoutDiscoveryInput>
    updateMany?: Enumerable<ChunkUpdateManyWithWhereWithoutDiscoveryInput>
    deleteMany?: Enumerable<ChunkScalarWhereInput>
    upsert?: Enumerable<ChunkUpsertWithWhereUniqueWithoutDiscoveryInput>
    connectOrCreate?: Enumerable<ChunkCreateOrConnectWithoutdiscoveryInput>
  }

  export type ProjectCreateOneWithoutMessagesInput = {
    create?: ProjectCreateWithoutMessagesInput
    connect?: ProjectWhereUniqueInput
    connectOrCreate?: ProjectCreateOrConnectWithoutmessagesInput
  }

  export type PersonCreateOneWithoutMessage_Message_requesterIdToPersonsInput = {
    create?: PersonCreateWithoutMessage_Message_requesterIdToPersonsInput
    connect?: PersonWhereUniqueInput
    connectOrCreate?: PersonCreateOrConnectWithoutmessage_Message_requesterIdToPersonsInput
  }

  export type PersonCreateOneWithoutMessage_Message_submitterIdToPersonsInput = {
    create?: PersonCreateWithoutMessage_Message_submitterIdToPersonsInput
    connect?: PersonWhereUniqueInput
    connectOrCreate?: PersonCreateOrConnectWithoutmessage_Message_submitterIdToPersonsInput
  }

  export type ChunkCreateManyWithoutMessageInput = {
    create?: Enumerable<ChunkCreateWithoutMessageInput>
    connect?: Enumerable<ChunkWhereUniqueInput>
    connectOrCreate?: Enumerable<ChunkCreateOrConnectWithoutmessageInput>
  }

  export type SubMessageCreateManyWithoutMessageInput = {
    create?: Enumerable<SubMessageCreateWithoutMessageInput>
    connect?: Enumerable<SubMessageWhereUniqueInput>
    connectOrCreate?: Enumerable<SubMessageCreateOrConnectWithoutmessageInput>
  }

  export type ProjectUpdateOneRequiredWithoutMessagesInput = {
    create?: ProjectCreateWithoutMessagesInput
    connect?: ProjectWhereUniqueInput
    update?: ProjectUpdateWithoutMessagesInput
    upsert?: ProjectUpsertWithoutMessagesInput
    connectOrCreate?: ProjectCreateOrConnectWithoutmessagesInput
  }

  export type PersonUpdateOneRequiredWithoutMessage_Message_requesterIdToPersonsInput = {
    create?: PersonCreateWithoutMessage_Message_requesterIdToPersonsInput
    connect?: PersonWhereUniqueInput
    update?: PersonUpdateWithoutMessage_Message_requesterIdToPersonsInput
    upsert?: PersonUpsertWithoutMessage_Message_requesterIdToPersonsInput
    connectOrCreate?: PersonCreateOrConnectWithoutmessage_Message_requesterIdToPersonsInput
  }

  export type PersonUpdateOneRequiredWithoutMessage_Message_submitterIdToPersonsInput = {
    create?: PersonCreateWithoutMessage_Message_submitterIdToPersonsInput
    connect?: PersonWhereUniqueInput
    update?: PersonUpdateWithoutMessage_Message_submitterIdToPersonsInput
    upsert?: PersonUpsertWithoutMessage_Message_submitterIdToPersonsInput
    connectOrCreate?: PersonCreateOrConnectWithoutmessage_Message_submitterIdToPersonsInput
  }

  export type ChunkUpdateManyWithoutMessageInput = {
    create?: Enumerable<ChunkCreateWithoutMessageInput>
    connect?: Enumerable<ChunkWhereUniqueInput>
    set?: Enumerable<ChunkWhereUniqueInput>
    disconnect?: Enumerable<ChunkWhereUniqueInput>
    delete?: Enumerable<ChunkWhereUniqueInput>
    update?: Enumerable<ChunkUpdateWithWhereUniqueWithoutMessageInput>
    updateMany?: Enumerable<ChunkUpdateManyWithWhereWithoutMessageInput>
    deleteMany?: Enumerable<ChunkScalarWhereInput>
    upsert?: Enumerable<ChunkUpsertWithWhereUniqueWithoutMessageInput>
    connectOrCreate?: Enumerable<ChunkCreateOrConnectWithoutmessageInput>
  }

  export type SubMessageUpdateManyWithoutMessageInput = {
    create?: Enumerable<SubMessageCreateWithoutMessageInput>
    connect?: Enumerable<SubMessageWhereUniqueInput>
    set?: Enumerable<SubMessageWhereUniqueInput>
    disconnect?: Enumerable<SubMessageWhereUniqueInput>
    delete?: Enumerable<SubMessageWhereUniqueInput>
    update?: Enumerable<SubMessageUpdateWithWhereUniqueWithoutMessageInput>
    updateMany?: Enumerable<SubMessageUpdateManyWithWhereWithoutMessageInput>
    deleteMany?: Enumerable<SubMessageScalarWhereInput>
    upsert?: Enumerable<SubMessageUpsertWithWhereUniqueWithoutMessageInput>
    connectOrCreate?: Enumerable<SubMessageCreateOrConnectWithoutmessageInput>
  }

  export type ProjectCreateOneWithoutOrganizationsInput = {
    create?: ProjectCreateWithoutOrganizationsInput
    connect?: ProjectWhereUniqueInput
    connectOrCreate?: ProjectCreateOrConnectWithoutorganizationsInput
  }

  export type ContributorAttributeValueCreateManyWithoutOrganizationInput = {
    create?: Enumerable<ContributorAttributeValueCreateWithoutOrganizationInput>
    connect?: Enumerable<ContributorAttributeValueWhereUniqueInput>
    connectOrCreate?: Enumerable<ContributorAttributeValueCreateOrConnectWithoutorganizationInput>
  }

  export type PersonCreateManyWithoutOrganizationInput = {
    create?: Enumerable<PersonCreateWithoutOrganizationInput>
    connect?: Enumerable<PersonWhereUniqueInput>
    connectOrCreate?: Enumerable<PersonCreateOrConnectWithoutorganizationInput>
  }

  export type ProjectUpdateOneRequiredWithoutOrganizationsInput = {
    create?: ProjectCreateWithoutOrganizationsInput
    connect?: ProjectWhereUniqueInput
    update?: ProjectUpdateWithoutOrganizationsInput
    upsert?: ProjectUpsertWithoutOrganizationsInput
    connectOrCreate?: ProjectCreateOrConnectWithoutorganizationsInput
  }

  export type ContributorAttributeValueUpdateManyWithoutOrganizationInput = {
    create?: Enumerable<ContributorAttributeValueCreateWithoutOrganizationInput>
    connect?: Enumerable<ContributorAttributeValueWhereUniqueInput>
    set?: Enumerable<ContributorAttributeValueWhereUniqueInput>
    disconnect?: Enumerable<ContributorAttributeValueWhereUniqueInput>
    delete?: Enumerable<ContributorAttributeValueWhereUniqueInput>
    update?: Enumerable<ContributorAttributeValueUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<ContributorAttributeValueUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<ContributorAttributeValueScalarWhereInput>
    upsert?: Enumerable<ContributorAttributeValueUpsertWithWhereUniqueWithoutOrganizationInput>
    connectOrCreate?: Enumerable<ContributorAttributeValueCreateOrConnectWithoutorganizationInput>
  }

  export type PersonUpdateManyWithoutOrganizationInput = {
    create?: Enumerable<PersonCreateWithoutOrganizationInput>
    connect?: Enumerable<PersonWhereUniqueInput>
    set?: Enumerable<PersonWhereUniqueInput>
    disconnect?: Enumerable<PersonWhereUniqueInput>
    delete?: Enumerable<PersonWhereUniqueInput>
    update?: Enumerable<PersonUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<PersonUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<PersonScalarWhereInput>
    upsert?: Enumerable<PersonUpsertWithWhereUniqueWithoutOrganizationInput>
    connectOrCreate?: Enumerable<PersonCreateOrConnectWithoutorganizationInput>
  }

  export type OrganizationCreateOneWithoutPersonsInput = {
    create?: OrganizationCreateWithoutPersonsInput
    connect?: OrganizationWhereUniqueInput
    connectOrCreate?: OrganizationCreateOrConnectWithoutpersonsInput
  }

  export type ProjectCreateOneWithoutPersonsInput = {
    create?: ProjectCreateWithoutPersonsInput
    connect?: ProjectWhereUniqueInput
    connectOrCreate?: ProjectCreateOrConnectWithoutpersonsInput
  }

  export type AccountCreateManyWithoutPersonInput = {
    create?: Enumerable<AccountCreateWithoutPersonInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutpersonInput>
  }

  export type ContributorAttributeValueCreateManyWithoutPersonInput = {
    create?: Enumerable<ContributorAttributeValueCreateWithoutPersonInput>
    connect?: Enumerable<ContributorAttributeValueWhereUniqueInput>
    connectOrCreate?: Enumerable<ContributorAttributeValueCreateOrConnectWithoutpersonInput>
  }

  export type MessageCreateManyWithoutPerson_Message_requesterIdToPersonInput = {
    create?: Enumerable<MessageCreateWithoutPerson_Message_requesterIdToPersonInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutperson_Message_requesterIdToPersonInput>
  }

  export type MessageCreateManyWithoutPerson_Message_submitterIdToPersonInput = {
    create?: Enumerable<MessageCreateWithoutPerson_Message_submitterIdToPersonInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutperson_Message_submitterIdToPersonInput>
  }

  export type SubMessageCreateManyWithoutPersonInput = {
    create?: Enumerable<SubMessageCreateWithoutPersonInput>
    connect?: Enumerable<SubMessageWhereUniqueInput>
    connectOrCreate?: Enumerable<SubMessageCreateOrConnectWithoutpersonInput>
  }

  export type OrganizationUpdateOneRequiredWithoutPersonsInput = {
    create?: OrganizationCreateWithoutPersonsInput
    connect?: OrganizationWhereUniqueInput
    update?: OrganizationUpdateWithoutPersonsInput
    upsert?: OrganizationUpsertWithoutPersonsInput
    connectOrCreate?: OrganizationCreateOrConnectWithoutpersonsInput
  }

  export type ProjectUpdateOneRequiredWithoutPersonsInput = {
    create?: ProjectCreateWithoutPersonsInput
    connect?: ProjectWhereUniqueInput
    update?: ProjectUpdateWithoutPersonsInput
    upsert?: ProjectUpsertWithoutPersonsInput
    connectOrCreate?: ProjectCreateOrConnectWithoutpersonsInput
  }

  export type AccountUpdateManyWithoutPersonInput = {
    create?: Enumerable<AccountCreateWithoutPersonInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutPersonInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutPersonInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutPersonInput>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutpersonInput>
  }

  export type ContributorAttributeValueUpdateManyWithoutPersonInput = {
    create?: Enumerable<ContributorAttributeValueCreateWithoutPersonInput>
    connect?: Enumerable<ContributorAttributeValueWhereUniqueInput>
    set?: Enumerable<ContributorAttributeValueWhereUniqueInput>
    disconnect?: Enumerable<ContributorAttributeValueWhereUniqueInput>
    delete?: Enumerable<ContributorAttributeValueWhereUniqueInput>
    update?: Enumerable<ContributorAttributeValueUpdateWithWhereUniqueWithoutPersonInput>
    updateMany?: Enumerable<ContributorAttributeValueUpdateManyWithWhereWithoutPersonInput>
    deleteMany?: Enumerable<ContributorAttributeValueScalarWhereInput>
    upsert?: Enumerable<ContributorAttributeValueUpsertWithWhereUniqueWithoutPersonInput>
    connectOrCreate?: Enumerable<ContributorAttributeValueCreateOrConnectWithoutpersonInput>
  }

  export type MessageUpdateManyWithoutPerson_Message_requesterIdToPersonInput = {
    create?: Enumerable<MessageCreateWithoutPerson_Message_requesterIdToPersonInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutPerson_Message_requesterIdToPersonInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutPerson_Message_requesterIdToPersonInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutPerson_Message_requesterIdToPersonInput>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutperson_Message_requesterIdToPersonInput>
  }

  export type MessageUpdateManyWithoutPerson_Message_submitterIdToPersonInput = {
    create?: Enumerable<MessageCreateWithoutPerson_Message_submitterIdToPersonInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutPerson_Message_submitterIdToPersonInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutPerson_Message_submitterIdToPersonInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutPerson_Message_submitterIdToPersonInput>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutperson_Message_submitterIdToPersonInput>
  }

  export type SubMessageUpdateManyWithoutPersonInput = {
    create?: Enumerable<SubMessageCreateWithoutPersonInput>
    connect?: Enumerable<SubMessageWhereUniqueInput>
    set?: Enumerable<SubMessageWhereUniqueInput>
    disconnect?: Enumerable<SubMessageWhereUniqueInput>
    delete?: Enumerable<SubMessageWhereUniqueInput>
    update?: Enumerable<SubMessageUpdateWithWhereUniqueWithoutPersonInput>
    updateMany?: Enumerable<SubMessageUpdateManyWithWhereWithoutPersonInput>
    deleteMany?: Enumerable<SubMessageScalarWhereInput>
    upsert?: Enumerable<SubMessageUpsertWithWhereUniqueWithoutPersonInput>
    connectOrCreate?: Enumerable<SubMessageCreateOrConnectWithoutpersonInput>
  }

  export type AccountCreateManyWithoutProjectInput = {
    create?: Enumerable<AccountCreateWithoutProjectInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutprojectInput>
  }

  export type ChunkCreateManyWithoutProjectInput = {
    create?: Enumerable<ChunkCreateWithoutProjectInput>
    connect?: Enumerable<ChunkWhereUniqueInput>
    connectOrCreate?: Enumerable<ChunkCreateOrConnectWithoutprojectInput>
  }

  export type ContributorAttributeCreateManyWithoutProjectInput = {
    create?: Enumerable<ContributorAttributeCreateWithoutProjectInput>
    connect?: Enumerable<ContributorAttributeWhereUniqueInput>
    connectOrCreate?: Enumerable<ContributorAttributeCreateOrConnectWithoutprojectInput>
  }

  export type DiscoveryCreateManyWithoutProjectInput = {
    create?: Enumerable<DiscoveryCreateWithoutProjectInput>
    connect?: Enumerable<DiscoveryWhereUniqueInput>
    connectOrCreate?: Enumerable<DiscoveryCreateOrConnectWithoutprojectInput>
  }

  export type MessageCreateManyWithoutProjectInput = {
    create?: Enumerable<MessageCreateWithoutProjectInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutprojectInput>
  }

  export type OrganizationCreateManyWithoutProjectInput = {
    create?: Enumerable<OrganizationCreateWithoutProjectInput>
    connect?: Enumerable<OrganizationWhereUniqueInput>
    connectOrCreate?: Enumerable<OrganizationCreateOrConnectWithoutprojectInput>
  }

  export type PersonCreateManyWithoutProjectInput = {
    create?: Enumerable<PersonCreateWithoutProjectInput>
    connect?: Enumerable<PersonWhereUniqueInput>
    connectOrCreate?: Enumerable<PersonCreateOrConnectWithoutprojectInput>
  }

  export type AccountUpdateManyWithoutProjectInput = {
    create?: Enumerable<AccountCreateWithoutProjectInput>
    connect?: Enumerable<AccountWhereUniqueInput>
    set?: Enumerable<AccountWhereUniqueInput>
    disconnect?: Enumerable<AccountWhereUniqueInput>
    delete?: Enumerable<AccountWhereUniqueInput>
    update?: Enumerable<AccountUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<AccountUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<AccountScalarWhereInput>
    upsert?: Enumerable<AccountUpsertWithWhereUniqueWithoutProjectInput>
    connectOrCreate?: Enumerable<AccountCreateOrConnectWithoutprojectInput>
  }

  export type ChunkUpdateManyWithoutProjectInput = {
    create?: Enumerable<ChunkCreateWithoutProjectInput>
    connect?: Enumerable<ChunkWhereUniqueInput>
    set?: Enumerable<ChunkWhereUniqueInput>
    disconnect?: Enumerable<ChunkWhereUniqueInput>
    delete?: Enumerable<ChunkWhereUniqueInput>
    update?: Enumerable<ChunkUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<ChunkUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<ChunkScalarWhereInput>
    upsert?: Enumerable<ChunkUpsertWithWhereUniqueWithoutProjectInput>
    connectOrCreate?: Enumerable<ChunkCreateOrConnectWithoutprojectInput>
  }

  export type ContributorAttributeUpdateManyWithoutProjectInput = {
    create?: Enumerable<ContributorAttributeCreateWithoutProjectInput>
    connect?: Enumerable<ContributorAttributeWhereUniqueInput>
    set?: Enumerable<ContributorAttributeWhereUniqueInput>
    disconnect?: Enumerable<ContributorAttributeWhereUniqueInput>
    delete?: Enumerable<ContributorAttributeWhereUniqueInput>
    update?: Enumerable<ContributorAttributeUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<ContributorAttributeUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<ContributorAttributeScalarWhereInput>
    upsert?: Enumerable<ContributorAttributeUpsertWithWhereUniqueWithoutProjectInput>
    connectOrCreate?: Enumerable<ContributorAttributeCreateOrConnectWithoutprojectInput>
  }

  export type DiscoveryUpdateManyWithoutProjectInput = {
    create?: Enumerable<DiscoveryCreateWithoutProjectInput>
    connect?: Enumerable<DiscoveryWhereUniqueInput>
    set?: Enumerable<DiscoveryWhereUniqueInput>
    disconnect?: Enumerable<DiscoveryWhereUniqueInput>
    delete?: Enumerable<DiscoveryWhereUniqueInput>
    update?: Enumerable<DiscoveryUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<DiscoveryUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<DiscoveryScalarWhereInput>
    upsert?: Enumerable<DiscoveryUpsertWithWhereUniqueWithoutProjectInput>
    connectOrCreate?: Enumerable<DiscoveryCreateOrConnectWithoutprojectInput>
  }

  export type MessageUpdateManyWithoutProjectInput = {
    create?: Enumerable<MessageCreateWithoutProjectInput>
    connect?: Enumerable<MessageWhereUniqueInput>
    set?: Enumerable<MessageWhereUniqueInput>
    disconnect?: Enumerable<MessageWhereUniqueInput>
    delete?: Enumerable<MessageWhereUniqueInput>
    update?: Enumerable<MessageUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<MessageUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<MessageScalarWhereInput>
    upsert?: Enumerable<MessageUpsertWithWhereUniqueWithoutProjectInput>
    connectOrCreate?: Enumerable<MessageCreateOrConnectWithoutprojectInput>
  }

  export type OrganizationUpdateManyWithoutProjectInput = {
    create?: Enumerable<OrganizationCreateWithoutProjectInput>
    connect?: Enumerable<OrganizationWhereUniqueInput>
    set?: Enumerable<OrganizationWhereUniqueInput>
    disconnect?: Enumerable<OrganizationWhereUniqueInput>
    delete?: Enumerable<OrganizationWhereUniqueInput>
    update?: Enumerable<OrganizationUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<OrganizationUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<OrganizationScalarWhereInput>
    upsert?: Enumerable<OrganizationUpsertWithWhereUniqueWithoutProjectInput>
    connectOrCreate?: Enumerable<OrganizationCreateOrConnectWithoutprojectInput>
  }

  export type PersonUpdateManyWithoutProjectInput = {
    create?: Enumerable<PersonCreateWithoutProjectInput>
    connect?: Enumerable<PersonWhereUniqueInput>
    set?: Enumerable<PersonWhereUniqueInput>
    disconnect?: Enumerable<PersonWhereUniqueInput>
    delete?: Enumerable<PersonWhereUniqueInput>
    update?: Enumerable<PersonUpdateWithWhereUniqueWithoutProjectInput>
    updateMany?: Enumerable<PersonUpdateManyWithWhereWithoutProjectInput>
    deleteMany?: Enumerable<PersonScalarWhereInput>
    upsert?: Enumerable<PersonUpsertWithWhereUniqueWithoutProjectInput>
    connectOrCreate?: Enumerable<PersonCreateOrConnectWithoutprojectInput>
  }

  export type MessageCreateOneWithoutSubMessagesInput = {
    create?: MessageCreateWithoutSubMessagesInput
    connect?: MessageWhereUniqueInput
    connectOrCreate?: MessageCreateOrConnectWithoutsubMessagesInput
  }

  export type PersonCreateOneWithoutSubMessagesInput = {
    create?: PersonCreateWithoutSubMessagesInput
    connect?: PersonWhereUniqueInput
    connectOrCreate?: PersonCreateOrConnectWithoutsubMessagesInput
  }

  export type MessageUpdateOneRequiredWithoutSubMessagesInput = {
    create?: MessageCreateWithoutSubMessagesInput
    connect?: MessageWhereUniqueInput
    update?: MessageUpdateWithoutSubMessagesInput
    upsert?: MessageUpsertWithoutSubMessagesInput
    connectOrCreate?: MessageCreateOrConnectWithoutsubMessagesInput
  }

  export type PersonUpdateOneRequiredWithoutSubMessagesInput = {
    create?: PersonCreateWithoutSubMessagesInput
    connect?: PersonWhereUniqueInput
    update?: PersonUpdateWithoutSubMessagesInput
    upsert?: PersonUpsertWithoutSubMessagesInput
    connectOrCreate?: PersonCreateOrConnectWithoutsubMessagesInput
  }

  export type ChunkCreateOneWithoutTextSelectionsInput = {
    create?: ChunkCreateWithoutTextSelectionsInput
    connect?: ChunkWhereUniqueInput
    connectOrCreate?: ChunkCreateOrConnectWithouttextSelectionsInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ChunkUpdateOneRequiredWithoutTextSelectionsInput = {
    create?: ChunkCreateWithoutTextSelectionsInput
    connect?: ChunkWhereUniqueInput
    update?: ChunkUpdateWithoutTextSelectionsInput
    upsert?: ChunkUpsertWithoutTextSelectionsInput
    connectOrCreate?: ChunkCreateOrConnectWithouttextSelectionsInput
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumACCOUNT_TYPENullableFilter = {
    equals?: ACCOUNT_TYPE | null
    in?: Enumerable<ACCOUNT_TYPE> | null
    notIn?: Enumerable<ACCOUNT_TYPE> | null
    not?: NestedEnumACCOUNT_TYPENullableFilter | ACCOUNT_TYPE | null
  }

  export type NestedEnumENTITY_TYPENullableFilter = {
    equals?: ENTITY_TYPE | null
    in?: Enumerable<ENTITY_TYPE> | null
    notIn?: Enumerable<ENTITY_TYPE> | null
    not?: NestedEnumENTITY_TYPENullableFilter | ENTITY_TYPE | null
  }

  export type NestedEnumCONTRIBUTOR_ATTRIBUTE_TYPEFilter = {
    equals?: CONTRIBUTOR_ATTRIBUTE_TYPE
    in?: Enumerable<CONTRIBUTOR_ATTRIBUTE_TYPE>
    notIn?: Enumerable<CONTRIBUTOR_ATTRIBUTE_TYPE>
    not?: NestedEnumCONTRIBUTOR_ATTRIBUTE_TYPEFilter | CONTRIBUTOR_ATTRIBUTE_TYPE
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type PersonCreateWithoutAccountsInput = {
    name: string
    email: string
    organization: OrganizationCreateOneWithoutPersonsInput
    project: ProjectCreateOneWithoutPersonsInput
    contributorAttributeValues?: ContributorAttributeValueCreateManyWithoutPersonInput
    message_Message_requesterIdToPersons?: MessageCreateManyWithoutPerson_Message_requesterIdToPersonInput
    message_Message_submitterIdToPersons?: MessageCreateManyWithoutPerson_Message_submitterIdToPersonInput
    subMessages?: SubMessageCreateManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutaccountsInput = {
    where: PersonWhereUniqueInput
    create: PersonCreateWithoutAccountsInput
  }

  export type ProjectCreateWithoutAccountsInput = {
    name: string
    chunks?: ChunkCreateManyWithoutProjectInput
    contributorAttributes?: ContributorAttributeCreateManyWithoutProjectInput
    discoverys?: DiscoveryCreateManyWithoutProjectInput
    messages?: MessageCreateManyWithoutProjectInput
    organizations?: OrganizationCreateManyWithoutProjectInput
    persons?: PersonCreateManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutaccountsInput = {
    where: ProjectWhereUniqueInput
    create: ProjectCreateWithoutAccountsInput
  }

  export type PersonUpdateWithoutAccountsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organization?: OrganizationUpdateOneRequiredWithoutPersonsInput
    project?: ProjectUpdateOneRequiredWithoutPersonsInput
    contributorAttributeValues?: ContributorAttributeValueUpdateManyWithoutPersonInput
    message_Message_requesterIdToPersons?: MessageUpdateManyWithoutPerson_Message_requesterIdToPersonInput
    message_Message_submitterIdToPersons?: MessageUpdateManyWithoutPerson_Message_submitterIdToPersonInput
    subMessages?: SubMessageUpdateManyWithoutPersonInput
  }

  export type PersonUpsertWithoutAccountsInput = {
    update: PersonUpdateWithoutAccountsInput
    create: PersonCreateWithoutAccountsInput
  }

  export type ProjectUpdateWithoutAccountsInput = {
    name?: StringFieldUpdateOperationsInput | string
    chunks?: ChunkUpdateManyWithoutProjectInput
    contributorAttributes?: ContributorAttributeUpdateManyWithoutProjectInput
    discoverys?: DiscoveryUpdateManyWithoutProjectInput
    messages?: MessageUpdateManyWithoutProjectInput
    organizations?: OrganizationUpdateManyWithoutProjectInput
    persons?: PersonUpdateManyWithoutProjectInput
  }

  export type ProjectUpsertWithoutAccountsInput = {
    update: ProjectUpdateWithoutAccountsInput
    create: ProjectCreateWithoutAccountsInput
  }

  export type DiscoveryCreateWithoutChunksInput = {
    title: string
    description?: string | null
    project: ProjectCreateOneWithoutDiscoverysInput
  }

  export type DiscoveryCreateOrConnectWithoutchunksInput = {
    where: DiscoveryWhereUniqueInput
    create: DiscoveryCreateWithoutChunksInput
  }

  export type MessageCreateWithoutChunksInput = {
    clientId?: string | null
    title?: string | null
    content?: string | null
    project: ProjectCreateOneWithoutMessagesInput
    person_Message_requesterIdToPerson: PersonCreateOneWithoutMessage_Message_requesterIdToPersonsInput
    person_Message_submitterIdToPerson: PersonCreateOneWithoutMessage_Message_submitterIdToPersonsInput
    subMessages?: SubMessageCreateManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutchunksInput = {
    where: MessageWhereUniqueInput
    create: MessageCreateWithoutChunksInput
  }

  export type ProjectCreateWithoutChunksInput = {
    name: string
    accounts?: AccountCreateManyWithoutProjectInput
    contributorAttributes?: ContributorAttributeCreateManyWithoutProjectInput
    discoverys?: DiscoveryCreateManyWithoutProjectInput
    messages?: MessageCreateManyWithoutProjectInput
    organizations?: OrganizationCreateManyWithoutProjectInput
    persons?: PersonCreateManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutchunksInput = {
    where: ProjectWhereUniqueInput
    create: ProjectCreateWithoutChunksInput
  }

  export type TextSelectionCreateWithoutChunkInput = {
    offsetstart: number
    length: number
    submessagenumber: number
    content: string
  }

  export type TextSelectionCreateOrConnectWithoutchunkInput = {
    where: TextSelectionWhereUniqueInput
    create: TextSelectionCreateWithoutChunkInput
  }

  export type DiscoveryUpdateWithoutChunksInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectUpdateOneRequiredWithoutDiscoverysInput
  }

  export type DiscoveryUpsertWithoutChunksInput = {
    update: DiscoveryUpdateWithoutChunksInput
    create: DiscoveryCreateWithoutChunksInput
  }

  export type MessageUpdateWithoutChunksInput = {
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectUpdateOneRequiredWithoutMessagesInput
    person_Message_requesterIdToPerson?: PersonUpdateOneRequiredWithoutMessage_Message_requesterIdToPersonsInput
    person_Message_submitterIdToPerson?: PersonUpdateOneRequiredWithoutMessage_Message_submitterIdToPersonsInput
    subMessages?: SubMessageUpdateManyWithoutMessageInput
  }

  export type MessageUpsertWithoutChunksInput = {
    update: MessageUpdateWithoutChunksInput
    create: MessageCreateWithoutChunksInput
  }

  export type ProjectUpdateWithoutChunksInput = {
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutProjectInput
    contributorAttributes?: ContributorAttributeUpdateManyWithoutProjectInput
    discoverys?: DiscoveryUpdateManyWithoutProjectInput
    messages?: MessageUpdateManyWithoutProjectInput
    organizations?: OrganizationUpdateManyWithoutProjectInput
    persons?: PersonUpdateManyWithoutProjectInput
  }

  export type ProjectUpsertWithoutChunksInput = {
    update: ProjectUpdateWithoutChunksInput
    create: ProjectCreateWithoutChunksInput
  }

  export type TextSelectionUpdateWithWhereUniqueWithoutChunkInput = {
    where: TextSelectionWhereUniqueInput
    data: TextSelectionUpdateWithoutChunkInput
  }

  export type TextSelectionUpdateManyWithWhereWithoutChunkInput = {
    where: TextSelectionScalarWhereInput
    data: TextSelectionUpdateManyMutationInput
  }

  export type TextSelectionScalarWhereInput = {
    AND?: Enumerable<TextSelectionScalarWhereInput>
    OR?: Enumerable<TextSelectionScalarWhereInput>
    NOT?: Enumerable<TextSelectionScalarWhereInput>
    id?: IntFilter | number
    offsetstart?: FloatFilter | number
    length?: FloatFilter | number
    submessagenumber?: IntFilter | number
    content?: StringFilter | string
    chunkId?: IntFilter | number
  }

  export type TextSelectionUpsertWithWhereUniqueWithoutChunkInput = {
    where: TextSelectionWhereUniqueInput
    update: TextSelectionUpdateWithoutChunkInput
    create: TextSelectionCreateWithoutChunkInput
  }

  export type ProjectCreateWithoutContributorAttributesInput = {
    name: string
    accounts?: AccountCreateManyWithoutProjectInput
    chunks?: ChunkCreateManyWithoutProjectInput
    discoverys?: DiscoveryCreateManyWithoutProjectInput
    messages?: MessageCreateManyWithoutProjectInput
    organizations?: OrganizationCreateManyWithoutProjectInput
    persons?: PersonCreateManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutcontributorAttributesInput = {
    where: ProjectWhereUniqueInput
    create: ProjectCreateWithoutContributorAttributesInput
  }

  export type ContributorAttributeValueCreateWithoutContributorAttributeInput = {
    valuetext?: string | null
    organization: OrganizationCreateOneWithoutContributorAttributeValuesInput
    person: PersonCreateOneWithoutContributorAttributeValuesInput
  }

  export type ContributorAttributeValueCreateOrConnectWithoutcontributorAttributeInput = {
    where: ContributorAttributeValueWhereUniqueInput
    create: ContributorAttributeValueCreateWithoutContributorAttributeInput
  }

  export type ProjectUpdateWithoutContributorAttributesInput = {
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutProjectInput
    chunks?: ChunkUpdateManyWithoutProjectInput
    discoverys?: DiscoveryUpdateManyWithoutProjectInput
    messages?: MessageUpdateManyWithoutProjectInput
    organizations?: OrganizationUpdateManyWithoutProjectInput
    persons?: PersonUpdateManyWithoutProjectInput
  }

  export type ProjectUpsertWithoutContributorAttributesInput = {
    update: ProjectUpdateWithoutContributorAttributesInput
    create: ProjectCreateWithoutContributorAttributesInput
  }

  export type ContributorAttributeValueUpdateWithWhereUniqueWithoutContributorAttributeInput = {
    where: ContributorAttributeValueWhereUniqueInput
    data: ContributorAttributeValueUpdateWithoutContributorAttributeInput
  }

  export type ContributorAttributeValueUpdateManyWithWhereWithoutContributorAttributeInput = {
    where: ContributorAttributeValueScalarWhereInput
    data: ContributorAttributeValueUpdateManyMutationInput
  }

  export type ContributorAttributeValueScalarWhereInput = {
    AND?: Enumerable<ContributorAttributeValueScalarWhereInput>
    OR?: Enumerable<ContributorAttributeValueScalarWhereInput>
    NOT?: Enumerable<ContributorAttributeValueScalarWhereInput>
    id?: IntFilter | number
    contributorAttributeId?: IntFilter | number
    contributorAttributeType?: EnumCONTRIBUTOR_ATTRIBUTE_TYPEFilter | CONTRIBUTOR_ATTRIBUTE_TYPE
    personId?: IntFilter | number
    organizationId?: IntFilter | number
    valuetext?: StringNullableFilter | string | null
  }

  export type ContributorAttributeValueUpsertWithWhereUniqueWithoutContributorAttributeInput = {
    where: ContributorAttributeValueWhereUniqueInput
    update: ContributorAttributeValueUpdateWithoutContributorAttributeInput
    create: ContributorAttributeValueCreateWithoutContributorAttributeInput
  }

  export type ContributorAttributeCreateWithoutContributorAttributeValuesInput = {
    id?: number
    appliesTo?: ENTITY_TYPE | null
    name: string
    type: CONTRIBUTOR_ATTRIBUTE_TYPE
    project: ProjectCreateOneWithoutContributorAttributesInput
  }

  export type ContributorAttributeCreateOrConnectWithoutcontributorAttributeValuesInput = {
    where: ContributorAttributeWhereUniqueInput
    create: ContributorAttributeCreateWithoutContributorAttributeValuesInput
  }

  export type OrganizationCreateWithoutContributorAttributeValuesInput = {
    name: string
    project: ProjectCreateOneWithoutOrganizationsInput
    persons?: PersonCreateManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutcontributorAttributeValuesInput = {
    where: OrganizationWhereUniqueInput
    create: OrganizationCreateWithoutContributorAttributeValuesInput
  }

  export type PersonCreateWithoutContributorAttributeValuesInput = {
    name: string
    email: string
    organization: OrganizationCreateOneWithoutPersonsInput
    project: ProjectCreateOneWithoutPersonsInput
    accounts?: AccountCreateManyWithoutPersonInput
    message_Message_requesterIdToPersons?: MessageCreateManyWithoutPerson_Message_requesterIdToPersonInput
    message_Message_submitterIdToPersons?: MessageCreateManyWithoutPerson_Message_submitterIdToPersonInput
    subMessages?: SubMessageCreateManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutcontributorAttributeValuesInput = {
    where: PersonWhereUniqueInput
    create: PersonCreateWithoutContributorAttributeValuesInput
  }

  export type ContributorAttributeUpdateWithoutContributorAttributeValuesInput = {
    id?: IntFieldUpdateOperationsInput | number
    appliesTo?: NullableEnumENTITY_TYPEFieldUpdateOperationsInput | ENTITY_TYPE | null
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCONTRIBUTOR_ATTRIBUTE_TYPEFieldUpdateOperationsInput | CONTRIBUTOR_ATTRIBUTE_TYPE
    project?: ProjectUpdateOneRequiredWithoutContributorAttributesInput
  }

  export type ContributorAttributeUpsertWithoutContributorAttributeValuesInput = {
    update: ContributorAttributeUpdateWithoutContributorAttributeValuesInput
    create: ContributorAttributeCreateWithoutContributorAttributeValuesInput
  }

  export type OrganizationUpdateWithoutContributorAttributeValuesInput = {
    name?: StringFieldUpdateOperationsInput | string
    project?: ProjectUpdateOneRequiredWithoutOrganizationsInput
    persons?: PersonUpdateManyWithoutOrganizationInput
  }

  export type OrganizationUpsertWithoutContributorAttributeValuesInput = {
    update: OrganizationUpdateWithoutContributorAttributeValuesInput
    create: OrganizationCreateWithoutContributorAttributeValuesInput
  }

  export type PersonUpdateWithoutContributorAttributeValuesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organization?: OrganizationUpdateOneRequiredWithoutPersonsInput
    project?: ProjectUpdateOneRequiredWithoutPersonsInput
    accounts?: AccountUpdateManyWithoutPersonInput
    message_Message_requesterIdToPersons?: MessageUpdateManyWithoutPerson_Message_requesterIdToPersonInput
    message_Message_submitterIdToPersons?: MessageUpdateManyWithoutPerson_Message_submitterIdToPersonInput
    subMessages?: SubMessageUpdateManyWithoutPersonInput
  }

  export type PersonUpsertWithoutContributorAttributeValuesInput = {
    update: PersonUpdateWithoutContributorAttributeValuesInput
    create: PersonCreateWithoutContributorAttributeValuesInput
  }

  export type ProjectCreateWithoutDiscoverysInput = {
    name: string
    accounts?: AccountCreateManyWithoutProjectInput
    chunks?: ChunkCreateManyWithoutProjectInput
    contributorAttributes?: ContributorAttributeCreateManyWithoutProjectInput
    messages?: MessageCreateManyWithoutProjectInput
    organizations?: OrganizationCreateManyWithoutProjectInput
    persons?: PersonCreateManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutdiscoverysInput = {
    where: ProjectWhereUniqueInput
    create: ProjectCreateWithoutDiscoverysInput
  }

  export type ChunkCreateWithoutDiscoveryInput = {
    message: MessageCreateOneWithoutChunksInput
    project: ProjectCreateOneWithoutChunksInput
    textSelections?: TextSelectionCreateManyWithoutChunkInput
  }

  export type ChunkCreateOrConnectWithoutdiscoveryInput = {
    where: ChunkWhereUniqueInput
    create: ChunkCreateWithoutDiscoveryInput
  }

  export type ProjectUpdateWithoutDiscoverysInput = {
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutProjectInput
    chunks?: ChunkUpdateManyWithoutProjectInput
    contributorAttributes?: ContributorAttributeUpdateManyWithoutProjectInput
    messages?: MessageUpdateManyWithoutProjectInput
    organizations?: OrganizationUpdateManyWithoutProjectInput
    persons?: PersonUpdateManyWithoutProjectInput
  }

  export type ProjectUpsertWithoutDiscoverysInput = {
    update: ProjectUpdateWithoutDiscoverysInput
    create: ProjectCreateWithoutDiscoverysInput
  }

  export type ChunkUpdateWithWhereUniqueWithoutDiscoveryInput = {
    where: ChunkWhereUniqueInput
    data: ChunkUpdateWithoutDiscoveryInput
  }

  export type ChunkUpdateManyWithWhereWithoutDiscoveryInput = {
    where: ChunkScalarWhereInput
    data: ChunkUpdateManyMutationInput
  }

  export type ChunkScalarWhereInput = {
    AND?: Enumerable<ChunkScalarWhereInput>
    OR?: Enumerable<ChunkScalarWhereInput>
    NOT?: Enumerable<ChunkScalarWhereInput>
    projectId?: IntFilter | number
    id?: IntFilter | number
    messageId?: IntFilter | number
    discoveryId?: IntFilter | number
  }

  export type ChunkUpsertWithWhereUniqueWithoutDiscoveryInput = {
    where: ChunkWhereUniqueInput
    update: ChunkUpdateWithoutDiscoveryInput
    create: ChunkCreateWithoutDiscoveryInput
  }

  export type ProjectCreateWithoutMessagesInput = {
    name: string
    accounts?: AccountCreateManyWithoutProjectInput
    chunks?: ChunkCreateManyWithoutProjectInput
    contributorAttributes?: ContributorAttributeCreateManyWithoutProjectInput
    discoverys?: DiscoveryCreateManyWithoutProjectInput
    organizations?: OrganizationCreateManyWithoutProjectInput
    persons?: PersonCreateManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutmessagesInput = {
    where: ProjectWhereUniqueInput
    create: ProjectCreateWithoutMessagesInput
  }

  export type PersonCreateWithoutMessage_Message_requesterIdToPersonsInput = {
    name: string
    email: string
    organization: OrganizationCreateOneWithoutPersonsInput
    project: ProjectCreateOneWithoutPersonsInput
    accounts?: AccountCreateManyWithoutPersonInput
    contributorAttributeValues?: ContributorAttributeValueCreateManyWithoutPersonInput
    message_Message_submitterIdToPersons?: MessageCreateManyWithoutPerson_Message_submitterIdToPersonInput
    subMessages?: SubMessageCreateManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutmessage_Message_requesterIdToPersonsInput = {
    where: PersonWhereUniqueInput
    create: PersonCreateWithoutMessage_Message_requesterIdToPersonsInput
  }

  export type PersonCreateWithoutMessage_Message_submitterIdToPersonsInput = {
    name: string
    email: string
    organization: OrganizationCreateOneWithoutPersonsInput
    project: ProjectCreateOneWithoutPersonsInput
    accounts?: AccountCreateManyWithoutPersonInput
    contributorAttributeValues?: ContributorAttributeValueCreateManyWithoutPersonInput
    message_Message_requesterIdToPersons?: MessageCreateManyWithoutPerson_Message_requesterIdToPersonInput
    subMessages?: SubMessageCreateManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutmessage_Message_submitterIdToPersonsInput = {
    where: PersonWhereUniqueInput
    create: PersonCreateWithoutMessage_Message_submitterIdToPersonsInput
  }

  export type ChunkCreateWithoutMessageInput = {
    discovery: DiscoveryCreateOneWithoutChunksInput
    project: ProjectCreateOneWithoutChunksInput
    textSelections?: TextSelectionCreateManyWithoutChunkInput
  }

  export type ChunkCreateOrConnectWithoutmessageInput = {
    where: ChunkWhereUniqueInput
    create: ChunkCreateWithoutMessageInput
  }

  export type SubMessageCreateWithoutMessageInput = {
    content: string
    person: PersonCreateOneWithoutSubMessagesInput
  }

  export type SubMessageCreateOrConnectWithoutmessageInput = {
    where: SubMessageWhereUniqueInput
    create: SubMessageCreateWithoutMessageInput
  }

  export type ProjectUpdateWithoutMessagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutProjectInput
    chunks?: ChunkUpdateManyWithoutProjectInput
    contributorAttributes?: ContributorAttributeUpdateManyWithoutProjectInput
    discoverys?: DiscoveryUpdateManyWithoutProjectInput
    organizations?: OrganizationUpdateManyWithoutProjectInput
    persons?: PersonUpdateManyWithoutProjectInput
  }

  export type ProjectUpsertWithoutMessagesInput = {
    update: ProjectUpdateWithoutMessagesInput
    create: ProjectCreateWithoutMessagesInput
  }

  export type PersonUpdateWithoutMessage_Message_requesterIdToPersonsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organization?: OrganizationUpdateOneRequiredWithoutPersonsInput
    project?: ProjectUpdateOneRequiredWithoutPersonsInput
    accounts?: AccountUpdateManyWithoutPersonInput
    contributorAttributeValues?: ContributorAttributeValueUpdateManyWithoutPersonInput
    message_Message_submitterIdToPersons?: MessageUpdateManyWithoutPerson_Message_submitterIdToPersonInput
    subMessages?: SubMessageUpdateManyWithoutPersonInput
  }

  export type PersonUpsertWithoutMessage_Message_requesterIdToPersonsInput = {
    update: PersonUpdateWithoutMessage_Message_requesterIdToPersonsInput
    create: PersonCreateWithoutMessage_Message_requesterIdToPersonsInput
  }

  export type PersonUpdateWithoutMessage_Message_submitterIdToPersonsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organization?: OrganizationUpdateOneRequiredWithoutPersonsInput
    project?: ProjectUpdateOneRequiredWithoutPersonsInput
    accounts?: AccountUpdateManyWithoutPersonInput
    contributorAttributeValues?: ContributorAttributeValueUpdateManyWithoutPersonInput
    message_Message_requesterIdToPersons?: MessageUpdateManyWithoutPerson_Message_requesterIdToPersonInput
    subMessages?: SubMessageUpdateManyWithoutPersonInput
  }

  export type PersonUpsertWithoutMessage_Message_submitterIdToPersonsInput = {
    update: PersonUpdateWithoutMessage_Message_submitterIdToPersonsInput
    create: PersonCreateWithoutMessage_Message_submitterIdToPersonsInput
  }

  export type ChunkUpdateWithWhereUniqueWithoutMessageInput = {
    where: ChunkWhereUniqueInput
    data: ChunkUpdateWithoutMessageInput
  }

  export type ChunkUpdateManyWithWhereWithoutMessageInput = {
    where: ChunkScalarWhereInput
    data: ChunkUpdateManyMutationInput
  }

  export type ChunkUpsertWithWhereUniqueWithoutMessageInput = {
    where: ChunkWhereUniqueInput
    update: ChunkUpdateWithoutMessageInput
    create: ChunkCreateWithoutMessageInput
  }

  export type SubMessageUpdateWithWhereUniqueWithoutMessageInput = {
    where: SubMessageWhereUniqueInput
    data: SubMessageUpdateWithoutMessageInput
  }

  export type SubMessageUpdateManyWithWhereWithoutMessageInput = {
    where: SubMessageScalarWhereInput
    data: SubMessageUpdateManyMutationInput
  }

  export type SubMessageScalarWhereInput = {
    AND?: Enumerable<SubMessageScalarWhereInput>
    OR?: Enumerable<SubMessageScalarWhereInput>
    NOT?: Enumerable<SubMessageScalarWhereInput>
    id?: IntFilter | number
    submitterId?: IntFilter | number
    content?: StringFilter | string
    messageId?: IntFilter | number
  }

  export type SubMessageUpsertWithWhereUniqueWithoutMessageInput = {
    where: SubMessageWhereUniqueInput
    update: SubMessageUpdateWithoutMessageInput
    create: SubMessageCreateWithoutMessageInput
  }

  export type ProjectCreateWithoutOrganizationsInput = {
    name: string
    accounts?: AccountCreateManyWithoutProjectInput
    chunks?: ChunkCreateManyWithoutProjectInput
    contributorAttributes?: ContributorAttributeCreateManyWithoutProjectInput
    discoverys?: DiscoveryCreateManyWithoutProjectInput
    messages?: MessageCreateManyWithoutProjectInput
    persons?: PersonCreateManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutorganizationsInput = {
    where: ProjectWhereUniqueInput
    create: ProjectCreateWithoutOrganizationsInput
  }

  export type ContributorAttributeValueCreateWithoutOrganizationInput = {
    valuetext?: string | null
    contributorAttribute: ContributorAttributeCreateOneWithoutContributorAttributeValuesInput
    person: PersonCreateOneWithoutContributorAttributeValuesInput
  }

  export type ContributorAttributeValueCreateOrConnectWithoutorganizationInput = {
    where: ContributorAttributeValueWhereUniqueInput
    create: ContributorAttributeValueCreateWithoutOrganizationInput
  }

  export type PersonCreateWithoutOrganizationInput = {
    name: string
    email: string
    project: ProjectCreateOneWithoutPersonsInput
    accounts?: AccountCreateManyWithoutPersonInput
    contributorAttributeValues?: ContributorAttributeValueCreateManyWithoutPersonInput
    message_Message_requesterIdToPersons?: MessageCreateManyWithoutPerson_Message_requesterIdToPersonInput
    message_Message_submitterIdToPersons?: MessageCreateManyWithoutPerson_Message_submitterIdToPersonInput
    subMessages?: SubMessageCreateManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutorganizationInput = {
    where: PersonWhereUniqueInput
    create: PersonCreateWithoutOrganizationInput
  }

  export type ProjectUpdateWithoutOrganizationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutProjectInput
    chunks?: ChunkUpdateManyWithoutProjectInput
    contributorAttributes?: ContributorAttributeUpdateManyWithoutProjectInput
    discoverys?: DiscoveryUpdateManyWithoutProjectInput
    messages?: MessageUpdateManyWithoutProjectInput
    persons?: PersonUpdateManyWithoutProjectInput
  }

  export type ProjectUpsertWithoutOrganizationsInput = {
    update: ProjectUpdateWithoutOrganizationsInput
    create: ProjectCreateWithoutOrganizationsInput
  }

  export type ContributorAttributeValueUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ContributorAttributeValueWhereUniqueInput
    data: ContributorAttributeValueUpdateWithoutOrganizationInput
  }

  export type ContributorAttributeValueUpdateManyWithWhereWithoutOrganizationInput = {
    where: ContributorAttributeValueScalarWhereInput
    data: ContributorAttributeValueUpdateManyMutationInput
  }

  export type ContributorAttributeValueUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ContributorAttributeValueWhereUniqueInput
    update: ContributorAttributeValueUpdateWithoutOrganizationInput
    create: ContributorAttributeValueCreateWithoutOrganizationInput
  }

  export type PersonUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: PersonWhereUniqueInput
    data: PersonUpdateWithoutOrganizationInput
  }

  export type PersonUpdateManyWithWhereWithoutOrganizationInput = {
    where: PersonScalarWhereInput
    data: PersonUpdateManyMutationInput
  }

  export type PersonScalarWhereInput = {
    AND?: Enumerable<PersonScalarWhereInput>
    OR?: Enumerable<PersonScalarWhereInput>
    NOT?: Enumerable<PersonScalarWhereInput>
    projectId?: IntFilter | number
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringFilter | string
    organizationId?: IntFilter | number
  }

  export type PersonUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: PersonWhereUniqueInput
    update: PersonUpdateWithoutOrganizationInput
    create: PersonCreateWithoutOrganizationInput
  }

  export type OrganizationCreateWithoutPersonsInput = {
    name: string
    project: ProjectCreateOneWithoutOrganizationsInput
    contributorAttributeValues?: ContributorAttributeValueCreateManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutpersonsInput = {
    where: OrganizationWhereUniqueInput
    create: OrganizationCreateWithoutPersonsInput
  }

  export type ProjectCreateWithoutPersonsInput = {
    name: string
    accounts?: AccountCreateManyWithoutProjectInput
    chunks?: ChunkCreateManyWithoutProjectInput
    contributorAttributes?: ContributorAttributeCreateManyWithoutProjectInput
    discoverys?: DiscoveryCreateManyWithoutProjectInput
    messages?: MessageCreateManyWithoutProjectInput
    organizations?: OrganizationCreateManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutpersonsInput = {
    where: ProjectWhereUniqueInput
    create: ProjectCreateWithoutPersonsInput
  }

  export type AccountCreateWithoutPersonInput = {
    username: string
    hashedPassword: string
    type?: ACCOUNT_TYPE | null
    project: ProjectCreateOneWithoutAccountsInput
  }

  export type AccountCreateOrConnectWithoutpersonInput = {
    where: AccountWhereUniqueInput
    create: AccountCreateWithoutPersonInput
  }

  export type ContributorAttributeValueCreateWithoutPersonInput = {
    valuetext?: string | null
    contributorAttribute: ContributorAttributeCreateOneWithoutContributorAttributeValuesInput
    organization: OrganizationCreateOneWithoutContributorAttributeValuesInput
  }

  export type ContributorAttributeValueCreateOrConnectWithoutpersonInput = {
    where: ContributorAttributeValueWhereUniqueInput
    create: ContributorAttributeValueCreateWithoutPersonInput
  }

  export type MessageCreateWithoutPerson_Message_requesterIdToPersonInput = {
    clientId?: string | null
    title?: string | null
    content?: string | null
    project: ProjectCreateOneWithoutMessagesInput
    person_Message_submitterIdToPerson: PersonCreateOneWithoutMessage_Message_submitterIdToPersonsInput
    chunks?: ChunkCreateManyWithoutMessageInput
    subMessages?: SubMessageCreateManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutperson_Message_requesterIdToPersonInput = {
    where: MessageWhereUniqueInput
    create: MessageCreateWithoutPerson_Message_requesterIdToPersonInput
  }

  export type MessageCreateWithoutPerson_Message_submitterIdToPersonInput = {
    clientId?: string | null
    title?: string | null
    content?: string | null
    project: ProjectCreateOneWithoutMessagesInput
    person_Message_requesterIdToPerson: PersonCreateOneWithoutMessage_Message_requesterIdToPersonsInput
    chunks?: ChunkCreateManyWithoutMessageInput
    subMessages?: SubMessageCreateManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutperson_Message_submitterIdToPersonInput = {
    where: MessageWhereUniqueInput
    create: MessageCreateWithoutPerson_Message_submitterIdToPersonInput
  }

  export type SubMessageCreateWithoutPersonInput = {
    content: string
    message: MessageCreateOneWithoutSubMessagesInput
  }

  export type SubMessageCreateOrConnectWithoutpersonInput = {
    where: SubMessageWhereUniqueInput
    create: SubMessageCreateWithoutPersonInput
  }

  export type OrganizationUpdateWithoutPersonsInput = {
    name?: StringFieldUpdateOperationsInput | string
    project?: ProjectUpdateOneRequiredWithoutOrganizationsInput
    contributorAttributeValues?: ContributorAttributeValueUpdateManyWithoutOrganizationInput
  }

  export type OrganizationUpsertWithoutPersonsInput = {
    update: OrganizationUpdateWithoutPersonsInput
    create: OrganizationCreateWithoutPersonsInput
  }

  export type ProjectUpdateWithoutPersonsInput = {
    name?: StringFieldUpdateOperationsInput | string
    accounts?: AccountUpdateManyWithoutProjectInput
    chunks?: ChunkUpdateManyWithoutProjectInput
    contributorAttributes?: ContributorAttributeUpdateManyWithoutProjectInput
    discoverys?: DiscoveryUpdateManyWithoutProjectInput
    messages?: MessageUpdateManyWithoutProjectInput
    organizations?: OrganizationUpdateManyWithoutProjectInput
  }

  export type ProjectUpsertWithoutPersonsInput = {
    update: ProjectUpdateWithoutPersonsInput
    create: ProjectCreateWithoutPersonsInput
  }

  export type AccountUpdateWithWhereUniqueWithoutPersonInput = {
    where: AccountWhereUniqueInput
    data: AccountUpdateWithoutPersonInput
  }

  export type AccountUpdateManyWithWhereWithoutPersonInput = {
    where: AccountScalarWhereInput
    data: AccountUpdateManyMutationInput
  }

  export type AccountScalarWhereInput = {
    AND?: Enumerable<AccountScalarWhereInput>
    OR?: Enumerable<AccountScalarWhereInput>
    NOT?: Enumerable<AccountScalarWhereInput>
    id?: IntFilter | number
    username?: StringFilter | string
    hashedPassword?: StringFilter | string
    personId?: IntFilter | number
    projectId?: IntFilter | number
    type?: EnumACCOUNT_TYPENullableFilter | ACCOUNT_TYPE | null
  }

  export type AccountUpsertWithWhereUniqueWithoutPersonInput = {
    where: AccountWhereUniqueInput
    update: AccountUpdateWithoutPersonInput
    create: AccountCreateWithoutPersonInput
  }

  export type ContributorAttributeValueUpdateWithWhereUniqueWithoutPersonInput = {
    where: ContributorAttributeValueWhereUniqueInput
    data: ContributorAttributeValueUpdateWithoutPersonInput
  }

  export type ContributorAttributeValueUpdateManyWithWhereWithoutPersonInput = {
    where: ContributorAttributeValueScalarWhereInput
    data: ContributorAttributeValueUpdateManyMutationInput
  }

  export type ContributorAttributeValueUpsertWithWhereUniqueWithoutPersonInput = {
    where: ContributorAttributeValueWhereUniqueInput
    update: ContributorAttributeValueUpdateWithoutPersonInput
    create: ContributorAttributeValueCreateWithoutPersonInput
  }

  export type MessageUpdateWithWhereUniqueWithoutPerson_Message_requesterIdToPersonInput = {
    where: MessageWhereUniqueInput
    data: MessageUpdateWithoutPerson_Message_requesterIdToPersonInput
  }

  export type MessageUpdateManyWithWhereWithoutPerson_Message_requesterIdToPersonInput = {
    where: MessageScalarWhereInput
    data: MessageUpdateManyMutationInput
  }

  export type MessageScalarWhereInput = {
    AND?: Enumerable<MessageScalarWhereInput>
    OR?: Enumerable<MessageScalarWhereInput>
    NOT?: Enumerable<MessageScalarWhereInput>
    projectId?: IntFilter | number
    id?: IntFilter | number
    requesterId?: IntFilter | number
    submitterId?: IntFilter | number
    clientId?: StringNullableFilter | string | null
    title?: StringNullableFilter | string | null
    content?: StringNullableFilter | string | null
  }

  export type MessageUpsertWithWhereUniqueWithoutPerson_Message_requesterIdToPersonInput = {
    where: MessageWhereUniqueInput
    update: MessageUpdateWithoutPerson_Message_requesterIdToPersonInput
    create: MessageCreateWithoutPerson_Message_requesterIdToPersonInput
  }

  export type MessageUpdateWithWhereUniqueWithoutPerson_Message_submitterIdToPersonInput = {
    where: MessageWhereUniqueInput
    data: MessageUpdateWithoutPerson_Message_submitterIdToPersonInput
  }

  export type MessageUpdateManyWithWhereWithoutPerson_Message_submitterIdToPersonInput = {
    where: MessageScalarWhereInput
    data: MessageUpdateManyMutationInput
  }

  export type MessageUpsertWithWhereUniqueWithoutPerson_Message_submitterIdToPersonInput = {
    where: MessageWhereUniqueInput
    update: MessageUpdateWithoutPerson_Message_submitterIdToPersonInput
    create: MessageCreateWithoutPerson_Message_submitterIdToPersonInput
  }

  export type SubMessageUpdateWithWhereUniqueWithoutPersonInput = {
    where: SubMessageWhereUniqueInput
    data: SubMessageUpdateWithoutPersonInput
  }

  export type SubMessageUpdateManyWithWhereWithoutPersonInput = {
    where: SubMessageScalarWhereInput
    data: SubMessageUpdateManyMutationInput
  }

  export type SubMessageUpsertWithWhereUniqueWithoutPersonInput = {
    where: SubMessageWhereUniqueInput
    update: SubMessageUpdateWithoutPersonInput
    create: SubMessageCreateWithoutPersonInput
  }

  export type AccountCreateWithoutProjectInput = {
    username: string
    hashedPassword: string
    type?: ACCOUNT_TYPE | null
    person: PersonCreateOneWithoutAccountsInput
  }

  export type AccountCreateOrConnectWithoutprojectInput = {
    where: AccountWhereUniqueInput
    create: AccountCreateWithoutProjectInput
  }

  export type ChunkCreateWithoutProjectInput = {
    discovery: DiscoveryCreateOneWithoutChunksInput
    message: MessageCreateOneWithoutChunksInput
    textSelections?: TextSelectionCreateManyWithoutChunkInput
  }

  export type ChunkCreateOrConnectWithoutprojectInput = {
    where: ChunkWhereUniqueInput
    create: ChunkCreateWithoutProjectInput
  }

  export type ContributorAttributeCreateWithoutProjectInput = {
    id?: number
    appliesTo?: ENTITY_TYPE | null
    name: string
    type: CONTRIBUTOR_ATTRIBUTE_TYPE
    contributorAttributeValues?: ContributorAttributeValueCreateManyWithoutContributorAttributeInput
  }

  export type ContributorAttributeCreateOrConnectWithoutprojectInput = {
    where: ContributorAttributeWhereUniqueInput
    create: ContributorAttributeCreateWithoutProjectInput
  }

  export type DiscoveryCreateWithoutProjectInput = {
    title: string
    description?: string | null
    chunks?: ChunkCreateManyWithoutDiscoveryInput
  }

  export type DiscoveryCreateOrConnectWithoutprojectInput = {
    where: DiscoveryWhereUniqueInput
    create: DiscoveryCreateWithoutProjectInput
  }

  export type MessageCreateWithoutProjectInput = {
    clientId?: string | null
    title?: string | null
    content?: string | null
    person_Message_requesterIdToPerson: PersonCreateOneWithoutMessage_Message_requesterIdToPersonsInput
    person_Message_submitterIdToPerson: PersonCreateOneWithoutMessage_Message_submitterIdToPersonsInput
    chunks?: ChunkCreateManyWithoutMessageInput
    subMessages?: SubMessageCreateManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutprojectInput = {
    where: MessageWhereUniqueInput
    create: MessageCreateWithoutProjectInput
  }

  export type OrganizationCreateWithoutProjectInput = {
    name: string
    contributorAttributeValues?: ContributorAttributeValueCreateManyWithoutOrganizationInput
    persons?: PersonCreateManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutprojectInput = {
    where: OrganizationWhereUniqueInput
    create: OrganizationCreateWithoutProjectInput
  }

  export type PersonCreateWithoutProjectInput = {
    name: string
    email: string
    organization: OrganizationCreateOneWithoutPersonsInput
    accounts?: AccountCreateManyWithoutPersonInput
    contributorAttributeValues?: ContributorAttributeValueCreateManyWithoutPersonInput
    message_Message_requesterIdToPersons?: MessageCreateManyWithoutPerson_Message_requesterIdToPersonInput
    message_Message_submitterIdToPersons?: MessageCreateManyWithoutPerson_Message_submitterIdToPersonInput
    subMessages?: SubMessageCreateManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutprojectInput = {
    where: PersonWhereUniqueInput
    create: PersonCreateWithoutProjectInput
  }

  export type AccountUpdateWithWhereUniqueWithoutProjectInput = {
    where: AccountWhereUniqueInput
    data: AccountUpdateWithoutProjectInput
  }

  export type AccountUpdateManyWithWhereWithoutProjectInput = {
    where: AccountScalarWhereInput
    data: AccountUpdateManyMutationInput
  }

  export type AccountUpsertWithWhereUniqueWithoutProjectInput = {
    where: AccountWhereUniqueInput
    update: AccountUpdateWithoutProjectInput
    create: AccountCreateWithoutProjectInput
  }

  export type ChunkUpdateWithWhereUniqueWithoutProjectInput = {
    where: ChunkWhereUniqueInput
    data: ChunkUpdateWithoutProjectInput
  }

  export type ChunkUpdateManyWithWhereWithoutProjectInput = {
    where: ChunkScalarWhereInput
    data: ChunkUpdateManyMutationInput
  }

  export type ChunkUpsertWithWhereUniqueWithoutProjectInput = {
    where: ChunkWhereUniqueInput
    update: ChunkUpdateWithoutProjectInput
    create: ChunkCreateWithoutProjectInput
  }

  export type ContributorAttributeUpdateWithWhereUniqueWithoutProjectInput = {
    where: ContributorAttributeWhereUniqueInput
    data: ContributorAttributeUpdateWithoutProjectInput
  }

  export type ContributorAttributeUpdateManyWithWhereWithoutProjectInput = {
    where: ContributorAttributeScalarWhereInput
    data: ContributorAttributeUpdateManyMutationInput
  }

  export type ContributorAttributeScalarWhereInput = {
    AND?: Enumerable<ContributorAttributeScalarWhereInput>
    OR?: Enumerable<ContributorAttributeScalarWhereInput>
    NOT?: Enumerable<ContributorAttributeScalarWhereInput>
    projectId?: IntFilter | number
    id?: IntFilter | number
    appliesTo?: EnumENTITY_TYPENullableFilter | ENTITY_TYPE | null
    name?: StringFilter | string
    type?: EnumCONTRIBUTOR_ATTRIBUTE_TYPEFilter | CONTRIBUTOR_ATTRIBUTE_TYPE
  }

  export type ContributorAttributeUpsertWithWhereUniqueWithoutProjectInput = {
    where: ContributorAttributeWhereUniqueInput
    update: ContributorAttributeUpdateWithoutProjectInput
    create: ContributorAttributeCreateWithoutProjectInput
  }

  export type DiscoveryUpdateWithWhereUniqueWithoutProjectInput = {
    where: DiscoveryWhereUniqueInput
    data: DiscoveryUpdateWithoutProjectInput
  }

  export type DiscoveryUpdateManyWithWhereWithoutProjectInput = {
    where: DiscoveryScalarWhereInput
    data: DiscoveryUpdateManyMutationInput
  }

  export type DiscoveryScalarWhereInput = {
    AND?: Enumerable<DiscoveryScalarWhereInput>
    OR?: Enumerable<DiscoveryScalarWhereInput>
    NOT?: Enumerable<DiscoveryScalarWhereInput>
    projectId?: IntFilter | number
    id?: IntFilter | number
    title?: StringFilter | string
    description?: StringNullableFilter | string | null
  }

  export type DiscoveryUpsertWithWhereUniqueWithoutProjectInput = {
    where: DiscoveryWhereUniqueInput
    update: DiscoveryUpdateWithoutProjectInput
    create: DiscoveryCreateWithoutProjectInput
  }

  export type MessageUpdateWithWhereUniqueWithoutProjectInput = {
    where: MessageWhereUniqueInput
    data: MessageUpdateWithoutProjectInput
  }

  export type MessageUpdateManyWithWhereWithoutProjectInput = {
    where: MessageScalarWhereInput
    data: MessageUpdateManyMutationInput
  }

  export type MessageUpsertWithWhereUniqueWithoutProjectInput = {
    where: MessageWhereUniqueInput
    update: MessageUpdateWithoutProjectInput
    create: MessageCreateWithoutProjectInput
  }

  export type OrganizationUpdateWithWhereUniqueWithoutProjectInput = {
    where: OrganizationWhereUniqueInput
    data: OrganizationUpdateWithoutProjectInput
  }

  export type OrganizationUpdateManyWithWhereWithoutProjectInput = {
    where: OrganizationScalarWhereInput
    data: OrganizationUpdateManyMutationInput
  }

  export type OrganizationScalarWhereInput = {
    AND?: Enumerable<OrganizationScalarWhereInput>
    OR?: Enumerable<OrganizationScalarWhereInput>
    NOT?: Enumerable<OrganizationScalarWhereInput>
    projectId?: IntFilter | number
    id?: IntFilter | number
    name?: StringFilter | string
  }

  export type OrganizationUpsertWithWhereUniqueWithoutProjectInput = {
    where: OrganizationWhereUniqueInput
    update: OrganizationUpdateWithoutProjectInput
    create: OrganizationCreateWithoutProjectInput
  }

  export type PersonUpdateWithWhereUniqueWithoutProjectInput = {
    where: PersonWhereUniqueInput
    data: PersonUpdateWithoutProjectInput
  }

  export type PersonUpdateManyWithWhereWithoutProjectInput = {
    where: PersonScalarWhereInput
    data: PersonUpdateManyMutationInput
  }

  export type PersonUpsertWithWhereUniqueWithoutProjectInput = {
    where: PersonWhereUniqueInput
    update: PersonUpdateWithoutProjectInput
    create: PersonCreateWithoutProjectInput
  }

  export type MessageCreateWithoutSubMessagesInput = {
    clientId?: string | null
    title?: string | null
    content?: string | null
    project: ProjectCreateOneWithoutMessagesInput
    person_Message_requesterIdToPerson: PersonCreateOneWithoutMessage_Message_requesterIdToPersonsInput
    person_Message_submitterIdToPerson: PersonCreateOneWithoutMessage_Message_submitterIdToPersonsInput
    chunks?: ChunkCreateManyWithoutMessageInput
  }

  export type MessageCreateOrConnectWithoutsubMessagesInput = {
    where: MessageWhereUniqueInput
    create: MessageCreateWithoutSubMessagesInput
  }

  export type PersonCreateWithoutSubMessagesInput = {
    name: string
    email: string
    organization: OrganizationCreateOneWithoutPersonsInput
    project: ProjectCreateOneWithoutPersonsInput
    accounts?: AccountCreateManyWithoutPersonInput
    contributorAttributeValues?: ContributorAttributeValueCreateManyWithoutPersonInput
    message_Message_requesterIdToPersons?: MessageCreateManyWithoutPerson_Message_requesterIdToPersonInput
    message_Message_submitterIdToPersons?: MessageCreateManyWithoutPerson_Message_submitterIdToPersonInput
  }

  export type PersonCreateOrConnectWithoutsubMessagesInput = {
    where: PersonWhereUniqueInput
    create: PersonCreateWithoutSubMessagesInput
  }

  export type MessageUpdateWithoutSubMessagesInput = {
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectUpdateOneRequiredWithoutMessagesInput
    person_Message_requesterIdToPerson?: PersonUpdateOneRequiredWithoutMessage_Message_requesterIdToPersonsInput
    person_Message_submitterIdToPerson?: PersonUpdateOneRequiredWithoutMessage_Message_submitterIdToPersonsInput
    chunks?: ChunkUpdateManyWithoutMessageInput
  }

  export type MessageUpsertWithoutSubMessagesInput = {
    update: MessageUpdateWithoutSubMessagesInput
    create: MessageCreateWithoutSubMessagesInput
  }

  export type PersonUpdateWithoutSubMessagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organization?: OrganizationUpdateOneRequiredWithoutPersonsInput
    project?: ProjectUpdateOneRequiredWithoutPersonsInput
    accounts?: AccountUpdateManyWithoutPersonInput
    contributorAttributeValues?: ContributorAttributeValueUpdateManyWithoutPersonInput
    message_Message_requesterIdToPersons?: MessageUpdateManyWithoutPerson_Message_requesterIdToPersonInput
    message_Message_submitterIdToPersons?: MessageUpdateManyWithoutPerson_Message_submitterIdToPersonInput
  }

  export type PersonUpsertWithoutSubMessagesInput = {
    update: PersonUpdateWithoutSubMessagesInput
    create: PersonCreateWithoutSubMessagesInput
  }

  export type ChunkCreateWithoutTextSelectionsInput = {
    discovery: DiscoveryCreateOneWithoutChunksInput
    message: MessageCreateOneWithoutChunksInput
    project: ProjectCreateOneWithoutChunksInput
  }

  export type ChunkCreateOrConnectWithouttextSelectionsInput = {
    where: ChunkWhereUniqueInput
    create: ChunkCreateWithoutTextSelectionsInput
  }

  export type ChunkUpdateWithoutTextSelectionsInput = {
    discovery?: DiscoveryUpdateOneRequiredWithoutChunksInput
    message?: MessageUpdateOneRequiredWithoutChunksInput
    project?: ProjectUpdateOneRequiredWithoutChunksInput
  }

  export type ChunkUpsertWithoutTextSelectionsInput = {
    update: ChunkUpdateWithoutTextSelectionsInput
    create: ChunkCreateWithoutTextSelectionsInput
  }

  export type TextSelectionUpdateWithoutChunkInput = {
    offsetstart?: FloatFieldUpdateOperationsInput | number
    length?: FloatFieldUpdateOperationsInput | number
    submessagenumber?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
  }

  export type ContributorAttributeValueUpdateWithoutContributorAttributeInput = {
    valuetext?: NullableStringFieldUpdateOperationsInput | string | null
    organization?: OrganizationUpdateOneRequiredWithoutContributorAttributeValuesInput
    person?: PersonUpdateOneRequiredWithoutContributorAttributeValuesInput
  }

  export type ChunkUpdateWithoutDiscoveryInput = {
    message?: MessageUpdateOneRequiredWithoutChunksInput
    project?: ProjectUpdateOneRequiredWithoutChunksInput
    textSelections?: TextSelectionUpdateManyWithoutChunkInput
  }

  export type ChunkUpdateWithoutMessageInput = {
    discovery?: DiscoveryUpdateOneRequiredWithoutChunksInput
    project?: ProjectUpdateOneRequiredWithoutChunksInput
    textSelections?: TextSelectionUpdateManyWithoutChunkInput
  }

  export type SubMessageUpdateWithoutMessageInput = {
    content?: StringFieldUpdateOperationsInput | string
    person?: PersonUpdateOneRequiredWithoutSubMessagesInput
  }

  export type ContributorAttributeValueUpdateWithoutOrganizationInput = {
    valuetext?: NullableStringFieldUpdateOperationsInput | string | null
    contributorAttribute?: ContributorAttributeUpdateOneRequiredWithoutContributorAttributeValuesInput
    person?: PersonUpdateOneRequiredWithoutContributorAttributeValuesInput
  }

  export type PersonUpdateWithoutOrganizationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    project?: ProjectUpdateOneRequiredWithoutPersonsInput
    accounts?: AccountUpdateManyWithoutPersonInput
    contributorAttributeValues?: ContributorAttributeValueUpdateManyWithoutPersonInput
    message_Message_requesterIdToPersons?: MessageUpdateManyWithoutPerson_Message_requesterIdToPersonInput
    message_Message_submitterIdToPersons?: MessageUpdateManyWithoutPerson_Message_submitterIdToPersonInput
    subMessages?: SubMessageUpdateManyWithoutPersonInput
  }

  export type AccountUpdateWithoutPersonInput = {
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumACCOUNT_TYPEFieldUpdateOperationsInput | ACCOUNT_TYPE | null
    project?: ProjectUpdateOneRequiredWithoutAccountsInput
  }

  export type ContributorAttributeValueUpdateWithoutPersonInput = {
    valuetext?: NullableStringFieldUpdateOperationsInput | string | null
    contributorAttribute?: ContributorAttributeUpdateOneRequiredWithoutContributorAttributeValuesInput
    organization?: OrganizationUpdateOneRequiredWithoutContributorAttributeValuesInput
  }

  export type MessageUpdateWithoutPerson_Message_requesterIdToPersonInput = {
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectUpdateOneRequiredWithoutMessagesInput
    person_Message_submitterIdToPerson?: PersonUpdateOneRequiredWithoutMessage_Message_submitterIdToPersonsInput
    chunks?: ChunkUpdateManyWithoutMessageInput
    subMessages?: SubMessageUpdateManyWithoutMessageInput
  }

  export type MessageUpdateWithoutPerson_Message_submitterIdToPersonInput = {
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectUpdateOneRequiredWithoutMessagesInput
    person_Message_requesterIdToPerson?: PersonUpdateOneRequiredWithoutMessage_Message_requesterIdToPersonsInput
    chunks?: ChunkUpdateManyWithoutMessageInput
    subMessages?: SubMessageUpdateManyWithoutMessageInput
  }

  export type SubMessageUpdateWithoutPersonInput = {
    content?: StringFieldUpdateOperationsInput | string
    message?: MessageUpdateOneRequiredWithoutSubMessagesInput
  }

  export type AccountUpdateWithoutProjectInput = {
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    type?: NullableEnumACCOUNT_TYPEFieldUpdateOperationsInput | ACCOUNT_TYPE | null
    person?: PersonUpdateOneRequiredWithoutAccountsInput
  }

  export type ChunkUpdateWithoutProjectInput = {
    discovery?: DiscoveryUpdateOneRequiredWithoutChunksInput
    message?: MessageUpdateOneRequiredWithoutChunksInput
    textSelections?: TextSelectionUpdateManyWithoutChunkInput
  }

  export type ContributorAttributeUpdateWithoutProjectInput = {
    id?: IntFieldUpdateOperationsInput | number
    appliesTo?: NullableEnumENTITY_TYPEFieldUpdateOperationsInput | ENTITY_TYPE | null
    name?: StringFieldUpdateOperationsInput | string
    type?: EnumCONTRIBUTOR_ATTRIBUTE_TYPEFieldUpdateOperationsInput | CONTRIBUTOR_ATTRIBUTE_TYPE
    contributorAttributeValues?: ContributorAttributeValueUpdateManyWithoutContributorAttributeInput
  }

  export type DiscoveryUpdateWithoutProjectInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    chunks?: ChunkUpdateManyWithoutDiscoveryInput
  }

  export type MessageUpdateWithoutProjectInput = {
    clientId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    content?: NullableStringFieldUpdateOperationsInput | string | null
    person_Message_requesterIdToPerson?: PersonUpdateOneRequiredWithoutMessage_Message_requesterIdToPersonsInput
    person_Message_submitterIdToPerson?: PersonUpdateOneRequiredWithoutMessage_Message_submitterIdToPersonsInput
    chunks?: ChunkUpdateManyWithoutMessageInput
    subMessages?: SubMessageUpdateManyWithoutMessageInput
  }

  export type OrganizationUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    contributorAttributeValues?: ContributorAttributeValueUpdateManyWithoutOrganizationInput
    persons?: PersonUpdateManyWithoutOrganizationInput
  }

  export type PersonUpdateWithoutProjectInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    organization?: OrganizationUpdateOneRequiredWithoutPersonsInput
    accounts?: AccountUpdateManyWithoutPersonInput
    contributorAttributeValues?: ContributorAttributeValueUpdateManyWithoutPersonInput
    message_Message_requesterIdToPersons?: MessageUpdateManyWithoutPerson_Message_requesterIdToPersonInput
    message_Message_submitterIdToPersons?: MessageUpdateManyWithoutPerson_Message_submitterIdToPersonInput
    subMessages?: SubMessageUpdateManyWithoutPersonInput
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatibility introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.AccountScalarFieldEnum`
 */
export type AccountScalarFieldEnum = Prisma.AccountScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.ChunkScalarFieldEnum`
 */
export type ChunkScalarFieldEnum = Prisma.ChunkScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeScalarFieldEnum`
 */
export type ContributorAttributeScalarFieldEnum = Prisma.ContributorAttributeScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueScalarFieldEnum`
 */
export type ContributorAttributeValueScalarFieldEnum = Prisma.ContributorAttributeValueScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.DiscoveryScalarFieldEnum`
 */
export type DiscoveryScalarFieldEnum = Prisma.DiscoveryScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.MessageScalarFieldEnum`
 */
export type MessageScalarFieldEnum = Prisma.MessageScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.OrganizationScalarFieldEnum`
 */
export type OrganizationScalarFieldEnum = Prisma.OrganizationScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.PersonScalarFieldEnum`
 */
export type PersonScalarFieldEnum = Prisma.PersonScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.ProjectScalarFieldEnum`
 */
export type ProjectScalarFieldEnum = Prisma.ProjectScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SubMessageScalarFieldEnum`
 */
export type SubMessageScalarFieldEnum = Prisma.SubMessageScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.TextSelectionScalarFieldEnum`
 */
export type TextSelectionScalarFieldEnum = Prisma.TextSelectionScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.QueryMode`
 */
export type QueryMode = Prisma.QueryMode

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateAccount`
 */
export type AggregateAccount = Prisma.AggregateAccount

/**
 * @deprecated Renamed to `Prisma.AccountAvgAggregateOutputType`
 */
export type AccountAvgAggregateOutputType = Prisma.AccountAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AccountSumAggregateOutputType`
 */
export type AccountSumAggregateOutputType = Prisma.AccountSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AccountMinAggregateOutputType`
 */
export type AccountMinAggregateOutputType = Prisma.AccountMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AccountMaxAggregateOutputType`
 */
export type AccountMaxAggregateOutputType = Prisma.AccountMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AccountCountAggregateOutputType`
 */
export type AccountCountAggregateOutputType = Prisma.AccountCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateAccountArgs`
 */
export type AggregateAccountArgs = Prisma.AggregateAccountArgs

/**
 * @deprecated Renamed to `Prisma.AccountAvgAggregateInputType`
 */
export type AccountAvgAggregateInputType = Prisma.AccountAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AccountSumAggregateInputType`
 */
export type AccountSumAggregateInputType = Prisma.AccountSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AccountMinAggregateInputType`
 */
export type AccountMinAggregateInputType = Prisma.AccountMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AccountMaxAggregateInputType`
 */
export type AccountMaxAggregateInputType = Prisma.AccountMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AccountCountAggregateInputType`
 */
export type AccountCountAggregateInputType = Prisma.AccountCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.AccountSelect`
 */
export type AccountSelect = Prisma.AccountSelect

/**
 * @deprecated Renamed to `Prisma.AccountInclude`
 */
export type AccountInclude = Prisma.AccountInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueAccountArgs`
 */
export type FindUniqueAccountArgs = Prisma.FindUniqueAccountArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstAccountArgs`
 */
export type FindFirstAccountArgs = Prisma.FindFirstAccountArgs

/**
 * @deprecated Renamed to `Prisma.FindManyAccountArgs`
 */
export type FindManyAccountArgs = Prisma.FindManyAccountArgs

/**
 * @deprecated Renamed to `Prisma.AccountCreateArgs`
 */
export type AccountCreateArgs = Prisma.AccountCreateArgs

/**
 * @deprecated Renamed to `Prisma.AccountUpdateArgs`
 */
export type AccountUpdateArgs = Prisma.AccountUpdateArgs

/**
 * @deprecated Renamed to `Prisma.AccountUpdateManyArgs`
 */
export type AccountUpdateManyArgs = Prisma.AccountUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.AccountUpsertArgs`
 */
export type AccountUpsertArgs = Prisma.AccountUpsertArgs

/**
 * @deprecated Renamed to `Prisma.AccountDeleteArgs`
 */
export type AccountDeleteArgs = Prisma.AccountDeleteArgs

/**
 * @deprecated Renamed to `Prisma.AccountDeleteManyArgs`
 */
export type AccountDeleteManyArgs = Prisma.AccountDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateChunk`
 */
export type AggregateChunk = Prisma.AggregateChunk

/**
 * @deprecated Renamed to `Prisma.ChunkAvgAggregateOutputType`
 */
export type ChunkAvgAggregateOutputType = Prisma.ChunkAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ChunkSumAggregateOutputType`
 */
export type ChunkSumAggregateOutputType = Prisma.ChunkSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ChunkMinAggregateOutputType`
 */
export type ChunkMinAggregateOutputType = Prisma.ChunkMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ChunkMaxAggregateOutputType`
 */
export type ChunkMaxAggregateOutputType = Prisma.ChunkMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ChunkCountAggregateOutputType`
 */
export type ChunkCountAggregateOutputType = Prisma.ChunkCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateChunkArgs`
 */
export type AggregateChunkArgs = Prisma.AggregateChunkArgs

/**
 * @deprecated Renamed to `Prisma.ChunkAvgAggregateInputType`
 */
export type ChunkAvgAggregateInputType = Prisma.ChunkAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ChunkSumAggregateInputType`
 */
export type ChunkSumAggregateInputType = Prisma.ChunkSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ChunkMinAggregateInputType`
 */
export type ChunkMinAggregateInputType = Prisma.ChunkMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ChunkMaxAggregateInputType`
 */
export type ChunkMaxAggregateInputType = Prisma.ChunkMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ChunkCountAggregateInputType`
 */
export type ChunkCountAggregateInputType = Prisma.ChunkCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ChunkSelect`
 */
export type ChunkSelect = Prisma.ChunkSelect

/**
 * @deprecated Renamed to `Prisma.ChunkInclude`
 */
export type ChunkInclude = Prisma.ChunkInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueChunkArgs`
 */
export type FindUniqueChunkArgs = Prisma.FindUniqueChunkArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstChunkArgs`
 */
export type FindFirstChunkArgs = Prisma.FindFirstChunkArgs

/**
 * @deprecated Renamed to `Prisma.FindManyChunkArgs`
 */
export type FindManyChunkArgs = Prisma.FindManyChunkArgs

/**
 * @deprecated Renamed to `Prisma.ChunkCreateArgs`
 */
export type ChunkCreateArgs = Prisma.ChunkCreateArgs

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateArgs`
 */
export type ChunkUpdateArgs = Prisma.ChunkUpdateArgs

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateManyArgs`
 */
export type ChunkUpdateManyArgs = Prisma.ChunkUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.ChunkUpsertArgs`
 */
export type ChunkUpsertArgs = Prisma.ChunkUpsertArgs

/**
 * @deprecated Renamed to `Prisma.ChunkDeleteArgs`
 */
export type ChunkDeleteArgs = Prisma.ChunkDeleteArgs

/**
 * @deprecated Renamed to `Prisma.ChunkDeleteManyArgs`
 */
export type ChunkDeleteManyArgs = Prisma.ChunkDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateContributorAttribute`
 */
export type AggregateContributorAttribute = Prisma.AggregateContributorAttribute

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeAvgAggregateOutputType`
 */
export type ContributorAttributeAvgAggregateOutputType = Prisma.ContributorAttributeAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeSumAggregateOutputType`
 */
export type ContributorAttributeSumAggregateOutputType = Prisma.ContributorAttributeSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeMinAggregateOutputType`
 */
export type ContributorAttributeMinAggregateOutputType = Prisma.ContributorAttributeMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeMaxAggregateOutputType`
 */
export type ContributorAttributeMaxAggregateOutputType = Prisma.ContributorAttributeMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeCountAggregateOutputType`
 */
export type ContributorAttributeCountAggregateOutputType = Prisma.ContributorAttributeCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateContributorAttributeArgs`
 */
export type AggregateContributorAttributeArgs = Prisma.AggregateContributorAttributeArgs

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeAvgAggregateInputType`
 */
export type ContributorAttributeAvgAggregateInputType = Prisma.ContributorAttributeAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeSumAggregateInputType`
 */
export type ContributorAttributeSumAggregateInputType = Prisma.ContributorAttributeSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeMinAggregateInputType`
 */
export type ContributorAttributeMinAggregateInputType = Prisma.ContributorAttributeMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeMaxAggregateInputType`
 */
export type ContributorAttributeMaxAggregateInputType = Prisma.ContributorAttributeMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeCountAggregateInputType`
 */
export type ContributorAttributeCountAggregateInputType = Prisma.ContributorAttributeCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeSelect`
 */
export type ContributorAttributeSelect = Prisma.ContributorAttributeSelect

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeInclude`
 */
export type ContributorAttributeInclude = Prisma.ContributorAttributeInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueContributorAttributeArgs`
 */
export type FindUniqueContributorAttributeArgs = Prisma.FindUniqueContributorAttributeArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstContributorAttributeArgs`
 */
export type FindFirstContributorAttributeArgs = Prisma.FindFirstContributorAttributeArgs

/**
 * @deprecated Renamed to `Prisma.FindManyContributorAttributeArgs`
 */
export type FindManyContributorAttributeArgs = Prisma.FindManyContributorAttributeArgs

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeCreateArgs`
 */
export type ContributorAttributeCreateArgs = Prisma.ContributorAttributeCreateArgs

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeUpdateArgs`
 */
export type ContributorAttributeUpdateArgs = Prisma.ContributorAttributeUpdateArgs

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeUpdateManyArgs`
 */
export type ContributorAttributeUpdateManyArgs = Prisma.ContributorAttributeUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeUpsertArgs`
 */
export type ContributorAttributeUpsertArgs = Prisma.ContributorAttributeUpsertArgs

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeDeleteArgs`
 */
export type ContributorAttributeDeleteArgs = Prisma.ContributorAttributeDeleteArgs

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeDeleteManyArgs`
 */
export type ContributorAttributeDeleteManyArgs = Prisma.ContributorAttributeDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateContributorAttributeValue`
 */
export type AggregateContributorAttributeValue = Prisma.AggregateContributorAttributeValue

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueAvgAggregateOutputType`
 */
export type ContributorAttributeValueAvgAggregateOutputType = Prisma.ContributorAttributeValueAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueSumAggregateOutputType`
 */
export type ContributorAttributeValueSumAggregateOutputType = Prisma.ContributorAttributeValueSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueMinAggregateOutputType`
 */
export type ContributorAttributeValueMinAggregateOutputType = Prisma.ContributorAttributeValueMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueMaxAggregateOutputType`
 */
export type ContributorAttributeValueMaxAggregateOutputType = Prisma.ContributorAttributeValueMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueCountAggregateOutputType`
 */
export type ContributorAttributeValueCountAggregateOutputType = Prisma.ContributorAttributeValueCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateContributorAttributeValueArgs`
 */
export type AggregateContributorAttributeValueArgs = Prisma.AggregateContributorAttributeValueArgs

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueAvgAggregateInputType`
 */
export type ContributorAttributeValueAvgAggregateInputType = Prisma.ContributorAttributeValueAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueSumAggregateInputType`
 */
export type ContributorAttributeValueSumAggregateInputType = Prisma.ContributorAttributeValueSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueMinAggregateInputType`
 */
export type ContributorAttributeValueMinAggregateInputType = Prisma.ContributorAttributeValueMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueMaxAggregateInputType`
 */
export type ContributorAttributeValueMaxAggregateInputType = Prisma.ContributorAttributeValueMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueCountAggregateInputType`
 */
export type ContributorAttributeValueCountAggregateInputType = Prisma.ContributorAttributeValueCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueSelect`
 */
export type ContributorAttributeValueSelect = Prisma.ContributorAttributeValueSelect

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueInclude`
 */
export type ContributorAttributeValueInclude = Prisma.ContributorAttributeValueInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueContributorAttributeValueArgs`
 */
export type FindUniqueContributorAttributeValueArgs = Prisma.FindUniqueContributorAttributeValueArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstContributorAttributeValueArgs`
 */
export type FindFirstContributorAttributeValueArgs = Prisma.FindFirstContributorAttributeValueArgs

/**
 * @deprecated Renamed to `Prisma.FindManyContributorAttributeValueArgs`
 */
export type FindManyContributorAttributeValueArgs = Prisma.FindManyContributorAttributeValueArgs

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueCreateArgs`
 */
export type ContributorAttributeValueCreateArgs = Prisma.ContributorAttributeValueCreateArgs

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateArgs`
 */
export type ContributorAttributeValueUpdateArgs = Prisma.ContributorAttributeValueUpdateArgs

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateManyArgs`
 */
export type ContributorAttributeValueUpdateManyArgs = Prisma.ContributorAttributeValueUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpsertArgs`
 */
export type ContributorAttributeValueUpsertArgs = Prisma.ContributorAttributeValueUpsertArgs

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueDeleteArgs`
 */
export type ContributorAttributeValueDeleteArgs = Prisma.ContributorAttributeValueDeleteArgs

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueDeleteManyArgs`
 */
export type ContributorAttributeValueDeleteManyArgs = Prisma.ContributorAttributeValueDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateDiscovery`
 */
export type AggregateDiscovery = Prisma.AggregateDiscovery

/**
 * @deprecated Renamed to `Prisma.DiscoveryAvgAggregateOutputType`
 */
export type DiscoveryAvgAggregateOutputType = Prisma.DiscoveryAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DiscoverySumAggregateOutputType`
 */
export type DiscoverySumAggregateOutputType = Prisma.DiscoverySumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DiscoveryMinAggregateOutputType`
 */
export type DiscoveryMinAggregateOutputType = Prisma.DiscoveryMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DiscoveryMaxAggregateOutputType`
 */
export type DiscoveryMaxAggregateOutputType = Prisma.DiscoveryMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.DiscoveryCountAggregateOutputType`
 */
export type DiscoveryCountAggregateOutputType = Prisma.DiscoveryCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateDiscoveryArgs`
 */
export type AggregateDiscoveryArgs = Prisma.AggregateDiscoveryArgs

/**
 * @deprecated Renamed to `Prisma.DiscoveryAvgAggregateInputType`
 */
export type DiscoveryAvgAggregateInputType = Prisma.DiscoveryAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DiscoverySumAggregateInputType`
 */
export type DiscoverySumAggregateInputType = Prisma.DiscoverySumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DiscoveryMinAggregateInputType`
 */
export type DiscoveryMinAggregateInputType = Prisma.DiscoveryMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DiscoveryMaxAggregateInputType`
 */
export type DiscoveryMaxAggregateInputType = Prisma.DiscoveryMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DiscoveryCountAggregateInputType`
 */
export type DiscoveryCountAggregateInputType = Prisma.DiscoveryCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.DiscoverySelect`
 */
export type DiscoverySelect = Prisma.DiscoverySelect

/**
 * @deprecated Renamed to `Prisma.DiscoveryInclude`
 */
export type DiscoveryInclude = Prisma.DiscoveryInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueDiscoveryArgs`
 */
export type FindUniqueDiscoveryArgs = Prisma.FindUniqueDiscoveryArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstDiscoveryArgs`
 */
export type FindFirstDiscoveryArgs = Prisma.FindFirstDiscoveryArgs

/**
 * @deprecated Renamed to `Prisma.FindManyDiscoveryArgs`
 */
export type FindManyDiscoveryArgs = Prisma.FindManyDiscoveryArgs

/**
 * @deprecated Renamed to `Prisma.DiscoveryCreateArgs`
 */
export type DiscoveryCreateArgs = Prisma.DiscoveryCreateArgs

/**
 * @deprecated Renamed to `Prisma.DiscoveryUpdateArgs`
 */
export type DiscoveryUpdateArgs = Prisma.DiscoveryUpdateArgs

/**
 * @deprecated Renamed to `Prisma.DiscoveryUpdateManyArgs`
 */
export type DiscoveryUpdateManyArgs = Prisma.DiscoveryUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.DiscoveryUpsertArgs`
 */
export type DiscoveryUpsertArgs = Prisma.DiscoveryUpsertArgs

/**
 * @deprecated Renamed to `Prisma.DiscoveryDeleteArgs`
 */
export type DiscoveryDeleteArgs = Prisma.DiscoveryDeleteArgs

/**
 * @deprecated Renamed to `Prisma.DiscoveryDeleteManyArgs`
 */
export type DiscoveryDeleteManyArgs = Prisma.DiscoveryDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateMessage`
 */
export type AggregateMessage = Prisma.AggregateMessage

/**
 * @deprecated Renamed to `Prisma.MessageAvgAggregateOutputType`
 */
export type MessageAvgAggregateOutputType = Prisma.MessageAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.MessageSumAggregateOutputType`
 */
export type MessageSumAggregateOutputType = Prisma.MessageSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.MessageMinAggregateOutputType`
 */
export type MessageMinAggregateOutputType = Prisma.MessageMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.MessageMaxAggregateOutputType`
 */
export type MessageMaxAggregateOutputType = Prisma.MessageMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.MessageCountAggregateOutputType`
 */
export type MessageCountAggregateOutputType = Prisma.MessageCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateMessageArgs`
 */
export type AggregateMessageArgs = Prisma.AggregateMessageArgs

/**
 * @deprecated Renamed to `Prisma.MessageAvgAggregateInputType`
 */
export type MessageAvgAggregateInputType = Prisma.MessageAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.MessageSumAggregateInputType`
 */
export type MessageSumAggregateInputType = Prisma.MessageSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.MessageMinAggregateInputType`
 */
export type MessageMinAggregateInputType = Prisma.MessageMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.MessageMaxAggregateInputType`
 */
export type MessageMaxAggregateInputType = Prisma.MessageMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.MessageCountAggregateInputType`
 */
export type MessageCountAggregateInputType = Prisma.MessageCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.MessageSelect`
 */
export type MessageSelect = Prisma.MessageSelect

/**
 * @deprecated Renamed to `Prisma.MessageInclude`
 */
export type MessageInclude = Prisma.MessageInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueMessageArgs`
 */
export type FindUniqueMessageArgs = Prisma.FindUniqueMessageArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstMessageArgs`
 */
export type FindFirstMessageArgs = Prisma.FindFirstMessageArgs

/**
 * @deprecated Renamed to `Prisma.FindManyMessageArgs`
 */
export type FindManyMessageArgs = Prisma.FindManyMessageArgs

/**
 * @deprecated Renamed to `Prisma.MessageCreateArgs`
 */
export type MessageCreateArgs = Prisma.MessageCreateArgs

/**
 * @deprecated Renamed to `Prisma.MessageUpdateArgs`
 */
export type MessageUpdateArgs = Prisma.MessageUpdateArgs

/**
 * @deprecated Renamed to `Prisma.MessageUpdateManyArgs`
 */
export type MessageUpdateManyArgs = Prisma.MessageUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.MessageUpsertArgs`
 */
export type MessageUpsertArgs = Prisma.MessageUpsertArgs

/**
 * @deprecated Renamed to `Prisma.MessageDeleteArgs`
 */
export type MessageDeleteArgs = Prisma.MessageDeleteArgs

/**
 * @deprecated Renamed to `Prisma.MessageDeleteManyArgs`
 */
export type MessageDeleteManyArgs = Prisma.MessageDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateOrganization`
 */
export type AggregateOrganization = Prisma.AggregateOrganization

/**
 * @deprecated Renamed to `Prisma.OrganizationAvgAggregateOutputType`
 */
export type OrganizationAvgAggregateOutputType = Prisma.OrganizationAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.OrganizationSumAggregateOutputType`
 */
export type OrganizationSumAggregateOutputType = Prisma.OrganizationSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.OrganizationMinAggregateOutputType`
 */
export type OrganizationMinAggregateOutputType = Prisma.OrganizationMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.OrganizationMaxAggregateOutputType`
 */
export type OrganizationMaxAggregateOutputType = Prisma.OrganizationMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.OrganizationCountAggregateOutputType`
 */
export type OrganizationCountAggregateOutputType = Prisma.OrganizationCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateOrganizationArgs`
 */
export type AggregateOrganizationArgs = Prisma.AggregateOrganizationArgs

/**
 * @deprecated Renamed to `Prisma.OrganizationAvgAggregateInputType`
 */
export type OrganizationAvgAggregateInputType = Prisma.OrganizationAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.OrganizationSumAggregateInputType`
 */
export type OrganizationSumAggregateInputType = Prisma.OrganizationSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.OrganizationMinAggregateInputType`
 */
export type OrganizationMinAggregateInputType = Prisma.OrganizationMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.OrganizationMaxAggregateInputType`
 */
export type OrganizationMaxAggregateInputType = Prisma.OrganizationMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.OrganizationCountAggregateInputType`
 */
export type OrganizationCountAggregateInputType = Prisma.OrganizationCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.OrganizationSelect`
 */
export type OrganizationSelect = Prisma.OrganizationSelect

/**
 * @deprecated Renamed to `Prisma.OrganizationInclude`
 */
export type OrganizationInclude = Prisma.OrganizationInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueOrganizationArgs`
 */
export type FindUniqueOrganizationArgs = Prisma.FindUniqueOrganizationArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstOrganizationArgs`
 */
export type FindFirstOrganizationArgs = Prisma.FindFirstOrganizationArgs

/**
 * @deprecated Renamed to `Prisma.FindManyOrganizationArgs`
 */
export type FindManyOrganizationArgs = Prisma.FindManyOrganizationArgs

/**
 * @deprecated Renamed to `Prisma.OrganizationCreateArgs`
 */
export type OrganizationCreateArgs = Prisma.OrganizationCreateArgs

/**
 * @deprecated Renamed to `Prisma.OrganizationUpdateArgs`
 */
export type OrganizationUpdateArgs = Prisma.OrganizationUpdateArgs

/**
 * @deprecated Renamed to `Prisma.OrganizationUpdateManyArgs`
 */
export type OrganizationUpdateManyArgs = Prisma.OrganizationUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.OrganizationUpsertArgs`
 */
export type OrganizationUpsertArgs = Prisma.OrganizationUpsertArgs

/**
 * @deprecated Renamed to `Prisma.OrganizationDeleteArgs`
 */
export type OrganizationDeleteArgs = Prisma.OrganizationDeleteArgs

/**
 * @deprecated Renamed to `Prisma.OrganizationDeleteManyArgs`
 */
export type OrganizationDeleteManyArgs = Prisma.OrganizationDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregatePerson`
 */
export type AggregatePerson = Prisma.AggregatePerson

/**
 * @deprecated Renamed to `Prisma.PersonAvgAggregateOutputType`
 */
export type PersonAvgAggregateOutputType = Prisma.PersonAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PersonSumAggregateOutputType`
 */
export type PersonSumAggregateOutputType = Prisma.PersonSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PersonMinAggregateOutputType`
 */
export type PersonMinAggregateOutputType = Prisma.PersonMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PersonMaxAggregateOutputType`
 */
export type PersonMaxAggregateOutputType = Prisma.PersonMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PersonCountAggregateOutputType`
 */
export type PersonCountAggregateOutputType = Prisma.PersonCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregatePersonArgs`
 */
export type AggregatePersonArgs = Prisma.AggregatePersonArgs

/**
 * @deprecated Renamed to `Prisma.PersonAvgAggregateInputType`
 */
export type PersonAvgAggregateInputType = Prisma.PersonAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PersonSumAggregateInputType`
 */
export type PersonSumAggregateInputType = Prisma.PersonSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PersonMinAggregateInputType`
 */
export type PersonMinAggregateInputType = Prisma.PersonMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PersonMaxAggregateInputType`
 */
export type PersonMaxAggregateInputType = Prisma.PersonMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PersonCountAggregateInputType`
 */
export type PersonCountAggregateInputType = Prisma.PersonCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PersonSelect`
 */
export type PersonSelect = Prisma.PersonSelect

/**
 * @deprecated Renamed to `Prisma.PersonInclude`
 */
export type PersonInclude = Prisma.PersonInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquePersonArgs`
 */
export type FindUniquePersonArgs = Prisma.FindUniquePersonArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstPersonArgs`
 */
export type FindFirstPersonArgs = Prisma.FindFirstPersonArgs

/**
 * @deprecated Renamed to `Prisma.FindManyPersonArgs`
 */
export type FindManyPersonArgs = Prisma.FindManyPersonArgs

/**
 * @deprecated Renamed to `Prisma.PersonCreateArgs`
 */
export type PersonCreateArgs = Prisma.PersonCreateArgs

/**
 * @deprecated Renamed to `Prisma.PersonUpdateArgs`
 */
export type PersonUpdateArgs = Prisma.PersonUpdateArgs

/**
 * @deprecated Renamed to `Prisma.PersonUpdateManyArgs`
 */
export type PersonUpdateManyArgs = Prisma.PersonUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.PersonUpsertArgs`
 */
export type PersonUpsertArgs = Prisma.PersonUpsertArgs

/**
 * @deprecated Renamed to `Prisma.PersonDeleteArgs`
 */
export type PersonDeleteArgs = Prisma.PersonDeleteArgs

/**
 * @deprecated Renamed to `Prisma.PersonDeleteManyArgs`
 */
export type PersonDeleteManyArgs = Prisma.PersonDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateProject`
 */
export type AggregateProject = Prisma.AggregateProject

/**
 * @deprecated Renamed to `Prisma.ProjectAvgAggregateOutputType`
 */
export type ProjectAvgAggregateOutputType = Prisma.ProjectAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProjectSumAggregateOutputType`
 */
export type ProjectSumAggregateOutputType = Prisma.ProjectSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProjectMinAggregateOutputType`
 */
export type ProjectMinAggregateOutputType = Prisma.ProjectMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProjectMaxAggregateOutputType`
 */
export type ProjectMaxAggregateOutputType = Prisma.ProjectMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ProjectCountAggregateOutputType`
 */
export type ProjectCountAggregateOutputType = Prisma.ProjectCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateProjectArgs`
 */
export type AggregateProjectArgs = Prisma.AggregateProjectArgs

/**
 * @deprecated Renamed to `Prisma.ProjectAvgAggregateInputType`
 */
export type ProjectAvgAggregateInputType = Prisma.ProjectAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProjectSumAggregateInputType`
 */
export type ProjectSumAggregateInputType = Prisma.ProjectSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProjectMinAggregateInputType`
 */
export type ProjectMinAggregateInputType = Prisma.ProjectMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProjectMaxAggregateInputType`
 */
export type ProjectMaxAggregateInputType = Prisma.ProjectMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProjectCountAggregateInputType`
 */
export type ProjectCountAggregateInputType = Prisma.ProjectCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ProjectSelect`
 */
export type ProjectSelect = Prisma.ProjectSelect

/**
 * @deprecated Renamed to `Prisma.ProjectInclude`
 */
export type ProjectInclude = Prisma.ProjectInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueProjectArgs`
 */
export type FindUniqueProjectArgs = Prisma.FindUniqueProjectArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstProjectArgs`
 */
export type FindFirstProjectArgs = Prisma.FindFirstProjectArgs

/**
 * @deprecated Renamed to `Prisma.FindManyProjectArgs`
 */
export type FindManyProjectArgs = Prisma.FindManyProjectArgs

/**
 * @deprecated Renamed to `Prisma.ProjectCreateArgs`
 */
export type ProjectCreateArgs = Prisma.ProjectCreateArgs

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateArgs`
 */
export type ProjectUpdateArgs = Prisma.ProjectUpdateArgs

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateManyArgs`
 */
export type ProjectUpdateManyArgs = Prisma.ProjectUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.ProjectUpsertArgs`
 */
export type ProjectUpsertArgs = Prisma.ProjectUpsertArgs

/**
 * @deprecated Renamed to `Prisma.ProjectDeleteArgs`
 */
export type ProjectDeleteArgs = Prisma.ProjectDeleteArgs

/**
 * @deprecated Renamed to `Prisma.ProjectDeleteManyArgs`
 */
export type ProjectDeleteManyArgs = Prisma.ProjectDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateSubMessage`
 */
export type AggregateSubMessage = Prisma.AggregateSubMessage

/**
 * @deprecated Renamed to `Prisma.SubMessageAvgAggregateOutputType`
 */
export type SubMessageAvgAggregateOutputType = Prisma.SubMessageAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SubMessageSumAggregateOutputType`
 */
export type SubMessageSumAggregateOutputType = Prisma.SubMessageSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SubMessageMinAggregateOutputType`
 */
export type SubMessageMinAggregateOutputType = Prisma.SubMessageMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SubMessageMaxAggregateOutputType`
 */
export type SubMessageMaxAggregateOutputType = Prisma.SubMessageMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.SubMessageCountAggregateOutputType`
 */
export type SubMessageCountAggregateOutputType = Prisma.SubMessageCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateSubMessageArgs`
 */
export type AggregateSubMessageArgs = Prisma.AggregateSubMessageArgs

/**
 * @deprecated Renamed to `Prisma.SubMessageAvgAggregateInputType`
 */
export type SubMessageAvgAggregateInputType = Prisma.SubMessageAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SubMessageSumAggregateInputType`
 */
export type SubMessageSumAggregateInputType = Prisma.SubMessageSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SubMessageMinAggregateInputType`
 */
export type SubMessageMinAggregateInputType = Prisma.SubMessageMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SubMessageMaxAggregateInputType`
 */
export type SubMessageMaxAggregateInputType = Prisma.SubMessageMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SubMessageCountAggregateInputType`
 */
export type SubMessageCountAggregateInputType = Prisma.SubMessageCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.SubMessageSelect`
 */
export type SubMessageSelect = Prisma.SubMessageSelect

/**
 * @deprecated Renamed to `Prisma.SubMessageInclude`
 */
export type SubMessageInclude = Prisma.SubMessageInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueSubMessageArgs`
 */
export type FindUniqueSubMessageArgs = Prisma.FindUniqueSubMessageArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstSubMessageArgs`
 */
export type FindFirstSubMessageArgs = Prisma.FindFirstSubMessageArgs

/**
 * @deprecated Renamed to `Prisma.FindManySubMessageArgs`
 */
export type FindManySubMessageArgs = Prisma.FindManySubMessageArgs

/**
 * @deprecated Renamed to `Prisma.SubMessageCreateArgs`
 */
export type SubMessageCreateArgs = Prisma.SubMessageCreateArgs

/**
 * @deprecated Renamed to `Prisma.SubMessageUpdateArgs`
 */
export type SubMessageUpdateArgs = Prisma.SubMessageUpdateArgs

/**
 * @deprecated Renamed to `Prisma.SubMessageUpdateManyArgs`
 */
export type SubMessageUpdateManyArgs = Prisma.SubMessageUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.SubMessageUpsertArgs`
 */
export type SubMessageUpsertArgs = Prisma.SubMessageUpsertArgs

/**
 * @deprecated Renamed to `Prisma.SubMessageDeleteArgs`
 */
export type SubMessageDeleteArgs = Prisma.SubMessageDeleteArgs

/**
 * @deprecated Renamed to `Prisma.SubMessageDeleteManyArgs`
 */
export type SubMessageDeleteManyArgs = Prisma.SubMessageDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateTextSelection`
 */
export type AggregateTextSelection = Prisma.AggregateTextSelection

/**
 * @deprecated Renamed to `Prisma.TextSelectionAvgAggregateOutputType`
 */
export type TextSelectionAvgAggregateOutputType = Prisma.TextSelectionAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TextSelectionSumAggregateOutputType`
 */
export type TextSelectionSumAggregateOutputType = Prisma.TextSelectionSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TextSelectionMinAggregateOutputType`
 */
export type TextSelectionMinAggregateOutputType = Prisma.TextSelectionMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TextSelectionMaxAggregateOutputType`
 */
export type TextSelectionMaxAggregateOutputType = Prisma.TextSelectionMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TextSelectionCountAggregateOutputType`
 */
export type TextSelectionCountAggregateOutputType = Prisma.TextSelectionCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateTextSelectionArgs`
 */
export type AggregateTextSelectionArgs = Prisma.AggregateTextSelectionArgs

/**
 * @deprecated Renamed to `Prisma.TextSelectionAvgAggregateInputType`
 */
export type TextSelectionAvgAggregateInputType = Prisma.TextSelectionAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TextSelectionSumAggregateInputType`
 */
export type TextSelectionSumAggregateInputType = Prisma.TextSelectionSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TextSelectionMinAggregateInputType`
 */
export type TextSelectionMinAggregateInputType = Prisma.TextSelectionMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TextSelectionMaxAggregateInputType`
 */
export type TextSelectionMaxAggregateInputType = Prisma.TextSelectionMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TextSelectionCountAggregateInputType`
 */
export type TextSelectionCountAggregateInputType = Prisma.TextSelectionCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TextSelectionSelect`
 */
export type TextSelectionSelect = Prisma.TextSelectionSelect

/**
 * @deprecated Renamed to `Prisma.TextSelectionInclude`
 */
export type TextSelectionInclude = Prisma.TextSelectionInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueTextSelectionArgs`
 */
export type FindUniqueTextSelectionArgs = Prisma.FindUniqueTextSelectionArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstTextSelectionArgs`
 */
export type FindFirstTextSelectionArgs = Prisma.FindFirstTextSelectionArgs

/**
 * @deprecated Renamed to `Prisma.FindManyTextSelectionArgs`
 */
export type FindManyTextSelectionArgs = Prisma.FindManyTextSelectionArgs

/**
 * @deprecated Renamed to `Prisma.TextSelectionCreateArgs`
 */
export type TextSelectionCreateArgs = Prisma.TextSelectionCreateArgs

/**
 * @deprecated Renamed to `Prisma.TextSelectionUpdateArgs`
 */
export type TextSelectionUpdateArgs = Prisma.TextSelectionUpdateArgs

/**
 * @deprecated Renamed to `Prisma.TextSelectionUpdateManyArgs`
 */
export type TextSelectionUpdateManyArgs = Prisma.TextSelectionUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.TextSelectionUpsertArgs`
 */
export type TextSelectionUpsertArgs = Prisma.TextSelectionUpsertArgs

/**
 * @deprecated Renamed to `Prisma.TextSelectionDeleteArgs`
 */
export type TextSelectionDeleteArgs = Prisma.TextSelectionDeleteArgs

/**
 * @deprecated Renamed to `Prisma.TextSelectionDeleteManyArgs`
 */
export type TextSelectionDeleteManyArgs = Prisma.TextSelectionDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AccountWhereInput`
 */
export type AccountWhereInput = Prisma.AccountWhereInput

/**
 * @deprecated Renamed to `Prisma.AccountOrderByInput`
 */
export type AccountOrderByInput = Prisma.AccountOrderByInput

/**
 * @deprecated Renamed to `Prisma.AccountWhereUniqueInput`
 */
export type AccountWhereUniqueInput = Prisma.AccountWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.ChunkWhereInput`
 */
export type ChunkWhereInput = Prisma.ChunkWhereInput

/**
 * @deprecated Renamed to `Prisma.ChunkOrderByInput`
 */
export type ChunkOrderByInput = Prisma.ChunkOrderByInput

/**
 * @deprecated Renamed to `Prisma.ChunkWhereUniqueInput`
 */
export type ChunkWhereUniqueInput = Prisma.ChunkWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeWhereInput`
 */
export type ContributorAttributeWhereInput = Prisma.ContributorAttributeWhereInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeOrderByInput`
 */
export type ContributorAttributeOrderByInput = Prisma.ContributorAttributeOrderByInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeWhereUniqueInput`
 */
export type ContributorAttributeWhereUniqueInput = Prisma.ContributorAttributeWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueWhereInput`
 */
export type ContributorAttributeValueWhereInput = Prisma.ContributorAttributeValueWhereInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueOrderByInput`
 */
export type ContributorAttributeValueOrderByInput = Prisma.ContributorAttributeValueOrderByInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueWhereUniqueInput`
 */
export type ContributorAttributeValueWhereUniqueInput = Prisma.ContributorAttributeValueWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryWhereInput`
 */
export type DiscoveryWhereInput = Prisma.DiscoveryWhereInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryOrderByInput`
 */
export type DiscoveryOrderByInput = Prisma.DiscoveryOrderByInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryWhereUniqueInput`
 */
export type DiscoveryWhereUniqueInput = Prisma.DiscoveryWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.MessageWhereInput`
 */
export type MessageWhereInput = Prisma.MessageWhereInput

/**
 * @deprecated Renamed to `Prisma.MessageOrderByInput`
 */
export type MessageOrderByInput = Prisma.MessageOrderByInput

/**
 * @deprecated Renamed to `Prisma.MessageWhereUniqueInput`
 */
export type MessageWhereUniqueInput = Prisma.MessageWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.OrganizationWhereInput`
 */
export type OrganizationWhereInput = Prisma.OrganizationWhereInput

/**
 * @deprecated Renamed to `Prisma.OrganizationOrderByInput`
 */
export type OrganizationOrderByInput = Prisma.OrganizationOrderByInput

/**
 * @deprecated Renamed to `Prisma.OrganizationWhereUniqueInput`
 */
export type OrganizationWhereUniqueInput = Prisma.OrganizationWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.PersonWhereInput`
 */
export type PersonWhereInput = Prisma.PersonWhereInput

/**
 * @deprecated Renamed to `Prisma.PersonOrderByInput`
 */
export type PersonOrderByInput = Prisma.PersonOrderByInput

/**
 * @deprecated Renamed to `Prisma.PersonWhereUniqueInput`
 */
export type PersonWhereUniqueInput = Prisma.PersonWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.ProjectWhereInput`
 */
export type ProjectWhereInput = Prisma.ProjectWhereInput

/**
 * @deprecated Renamed to `Prisma.ProjectOrderByInput`
 */
export type ProjectOrderByInput = Prisma.ProjectOrderByInput

/**
 * @deprecated Renamed to `Prisma.ProjectWhereUniqueInput`
 */
export type ProjectWhereUniqueInput = Prisma.ProjectWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.SubMessageWhereInput`
 */
export type SubMessageWhereInput = Prisma.SubMessageWhereInput

/**
 * @deprecated Renamed to `Prisma.SubMessageOrderByInput`
 */
export type SubMessageOrderByInput = Prisma.SubMessageOrderByInput

/**
 * @deprecated Renamed to `Prisma.SubMessageWhereUniqueInput`
 */
export type SubMessageWhereUniqueInput = Prisma.SubMessageWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.TextSelectionWhereInput`
 */
export type TextSelectionWhereInput = Prisma.TextSelectionWhereInput

/**
 * @deprecated Renamed to `Prisma.TextSelectionOrderByInput`
 */
export type TextSelectionOrderByInput = Prisma.TextSelectionOrderByInput

/**
 * @deprecated Renamed to `Prisma.TextSelectionWhereUniqueInput`
 */
export type TextSelectionWhereUniqueInput = Prisma.TextSelectionWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.AccountCreateInput`
 */
export type AccountCreateInput = Prisma.AccountCreateInput

/**
 * @deprecated Renamed to `Prisma.AccountUpdateInput`
 */
export type AccountUpdateInput = Prisma.AccountUpdateInput

/**
 * @deprecated Renamed to `Prisma.AccountUpdateManyMutationInput`
 */
export type AccountUpdateManyMutationInput = Prisma.AccountUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.ChunkCreateInput`
 */
export type ChunkCreateInput = Prisma.ChunkCreateInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateInput`
 */
export type ChunkUpdateInput = Prisma.ChunkUpdateInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateManyMutationInput`
 */
export type ChunkUpdateManyMutationInput = Prisma.ChunkUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeCreateInput`
 */
export type ContributorAttributeCreateInput = Prisma.ContributorAttributeCreateInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeUpdateInput`
 */
export type ContributorAttributeUpdateInput = Prisma.ContributorAttributeUpdateInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeUpdateManyMutationInput`
 */
export type ContributorAttributeUpdateManyMutationInput = Prisma.ContributorAttributeUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueCreateInput`
 */
export type ContributorAttributeValueCreateInput = Prisma.ContributorAttributeValueCreateInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateInput`
 */
export type ContributorAttributeValueUpdateInput = Prisma.ContributorAttributeValueUpdateInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateManyMutationInput`
 */
export type ContributorAttributeValueUpdateManyMutationInput = Prisma.ContributorAttributeValueUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryCreateInput`
 */
export type DiscoveryCreateInput = Prisma.DiscoveryCreateInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryUpdateInput`
 */
export type DiscoveryUpdateInput = Prisma.DiscoveryUpdateInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryUpdateManyMutationInput`
 */
export type DiscoveryUpdateManyMutationInput = Prisma.DiscoveryUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateInput`
 */
export type MessageCreateInput = Prisma.MessageCreateInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateInput`
 */
export type MessageUpdateInput = Prisma.MessageUpdateInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateManyMutationInput`
 */
export type MessageUpdateManyMutationInput = Prisma.MessageUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.OrganizationCreateInput`
 */
export type OrganizationCreateInput = Prisma.OrganizationCreateInput

/**
 * @deprecated Renamed to `Prisma.OrganizationUpdateInput`
 */
export type OrganizationUpdateInput = Prisma.OrganizationUpdateInput

/**
 * @deprecated Renamed to `Prisma.OrganizationUpdateManyMutationInput`
 */
export type OrganizationUpdateManyMutationInput = Prisma.OrganizationUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateInput`
 */
export type PersonCreateInput = Prisma.PersonCreateInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateInput`
 */
export type PersonUpdateInput = Prisma.PersonUpdateInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateManyMutationInput`
 */
export type PersonUpdateManyMutationInput = Prisma.PersonUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateInput`
 */
export type ProjectCreateInput = Prisma.ProjectCreateInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateInput`
 */
export type ProjectUpdateInput = Prisma.ProjectUpdateInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateManyMutationInput`
 */
export type ProjectUpdateManyMutationInput = Prisma.ProjectUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.SubMessageCreateInput`
 */
export type SubMessageCreateInput = Prisma.SubMessageCreateInput

/**
 * @deprecated Renamed to `Prisma.SubMessageUpdateInput`
 */
export type SubMessageUpdateInput = Prisma.SubMessageUpdateInput

/**
 * @deprecated Renamed to `Prisma.SubMessageUpdateManyMutationInput`
 */
export type SubMessageUpdateManyMutationInput = Prisma.SubMessageUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.TextSelectionCreateInput`
 */
export type TextSelectionCreateInput = Prisma.TextSelectionCreateInput

/**
 * @deprecated Renamed to `Prisma.TextSelectionUpdateInput`
 */
export type TextSelectionUpdateInput = Prisma.TextSelectionUpdateInput

/**
 * @deprecated Renamed to `Prisma.TextSelectionUpdateManyMutationInput`
 */
export type TextSelectionUpdateManyMutationInput = Prisma.TextSelectionUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.EnumACCOUNT_TYPENullableFilter`
 */
export type EnumACCOUNT_TYPENullableFilter = Prisma.EnumACCOUNT_TYPENullableFilter

/**
 * @deprecated Renamed to `Prisma.PersonRelationFilter`
 */
export type PersonRelationFilter = Prisma.PersonRelationFilter

/**
 * @deprecated Renamed to `Prisma.ProjectRelationFilter`
 */
export type ProjectRelationFilter = Prisma.ProjectRelationFilter

/**
 * @deprecated Renamed to `Prisma.DiscoveryRelationFilter`
 */
export type DiscoveryRelationFilter = Prisma.DiscoveryRelationFilter

/**
 * @deprecated Renamed to `Prisma.MessageRelationFilter`
 */
export type MessageRelationFilter = Prisma.MessageRelationFilter

/**
 * @deprecated Renamed to `Prisma.TextSelectionListRelationFilter`
 */
export type TextSelectionListRelationFilter = Prisma.TextSelectionListRelationFilter

/**
 * @deprecated Renamed to `Prisma.EnumENTITY_TYPENullableFilter`
 */
export type EnumENTITY_TYPENullableFilter = Prisma.EnumENTITY_TYPENullableFilter

/**
 * @deprecated Renamed to `Prisma.EnumCONTRIBUTOR_ATTRIBUTE_TYPEFilter`
 */
export type EnumCONTRIBUTOR_ATTRIBUTE_TYPEFilter = Prisma.EnumCONTRIBUTOR_ATTRIBUTE_TYPEFilter

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueListRelationFilter`
 */
export type ContributorAttributeValueListRelationFilter = Prisma.ContributorAttributeValueListRelationFilter

/**
 * @deprecated Renamed to `Prisma.IdTypeCompoundUniqueInput`
 */
export type IdTypeCompoundUniqueInput = Prisma.IdTypeCompoundUniqueInput

/**
 * @deprecated Renamed to `Prisma.StringNullableFilter`
 */
export type StringNullableFilter = Prisma.StringNullableFilter

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeRelationFilter`
 */
export type ContributorAttributeRelationFilter = Prisma.ContributorAttributeRelationFilter

/**
 * @deprecated Renamed to `Prisma.OrganizationRelationFilter`
 */
export type OrganizationRelationFilter = Prisma.OrganizationRelationFilter

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValue_contributorAttributeId_personId_o_keyCompoundUniqueInput`
 */
export type ContributorAttributeValue_contributorAttributeId_personId_o_keyCompoundUniqueInput = Prisma.ContributorAttributeValue_contributorAttributeId_personId_o_keyCompoundUniqueInput

/**
 * @deprecated Renamed to `Prisma.ChunkListRelationFilter`
 */
export type ChunkListRelationFilter = Prisma.ChunkListRelationFilter

/**
 * @deprecated Renamed to `Prisma.SubMessageListRelationFilter`
 */
export type SubMessageListRelationFilter = Prisma.SubMessageListRelationFilter

/**
 * @deprecated Renamed to `Prisma.PersonListRelationFilter`
 */
export type PersonListRelationFilter = Prisma.PersonListRelationFilter

/**
 * @deprecated Renamed to `Prisma.AccountListRelationFilter`
 */
export type AccountListRelationFilter = Prisma.AccountListRelationFilter

/**
 * @deprecated Renamed to `Prisma.MessageListRelationFilter`
 */
export type MessageListRelationFilter = Prisma.MessageListRelationFilter

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeListRelationFilter`
 */
export type ContributorAttributeListRelationFilter = Prisma.ContributorAttributeListRelationFilter

/**
 * @deprecated Renamed to `Prisma.DiscoveryListRelationFilter`
 */
export type DiscoveryListRelationFilter = Prisma.DiscoveryListRelationFilter

/**
 * @deprecated Renamed to `Prisma.OrganizationListRelationFilter`
 */
export type OrganizationListRelationFilter = Prisma.OrganizationListRelationFilter

/**
 * @deprecated Renamed to `Prisma.FloatFilter`
 */
export type FloatFilter = Prisma.FloatFilter

/**
 * @deprecated Renamed to `Prisma.ChunkRelationFilter`
 */
export type ChunkRelationFilter = Prisma.ChunkRelationFilter

/**
 * @deprecated Renamed to `Prisma.PersonCreateOneWithoutAccountsInput`
 */
export type PersonCreateOneWithoutAccountsInput = Prisma.PersonCreateOneWithoutAccountsInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateOneWithoutAccountsInput`
 */
export type ProjectCreateOneWithoutAccountsInput = Prisma.ProjectCreateOneWithoutAccountsInput

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NullableEnumACCOUNT_TYPEFieldUpdateOperationsInput`
 */
export type NullableEnumACCOUNT_TYPEFieldUpdateOperationsInput = Prisma.NullableEnumACCOUNT_TYPEFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateOneRequiredWithoutAccountsInput`
 */
export type PersonUpdateOneRequiredWithoutAccountsInput = Prisma.PersonUpdateOneRequiredWithoutAccountsInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateOneRequiredWithoutAccountsInput`
 */
export type ProjectUpdateOneRequiredWithoutAccountsInput = Prisma.ProjectUpdateOneRequiredWithoutAccountsInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryCreateOneWithoutChunksInput`
 */
export type DiscoveryCreateOneWithoutChunksInput = Prisma.DiscoveryCreateOneWithoutChunksInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateOneWithoutChunksInput`
 */
export type MessageCreateOneWithoutChunksInput = Prisma.MessageCreateOneWithoutChunksInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateOneWithoutChunksInput`
 */
export type ProjectCreateOneWithoutChunksInput = Prisma.ProjectCreateOneWithoutChunksInput

/**
 * @deprecated Renamed to `Prisma.TextSelectionCreateManyWithoutChunkInput`
 */
export type TextSelectionCreateManyWithoutChunkInput = Prisma.TextSelectionCreateManyWithoutChunkInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryUpdateOneRequiredWithoutChunksInput`
 */
export type DiscoveryUpdateOneRequiredWithoutChunksInput = Prisma.DiscoveryUpdateOneRequiredWithoutChunksInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateOneRequiredWithoutChunksInput`
 */
export type MessageUpdateOneRequiredWithoutChunksInput = Prisma.MessageUpdateOneRequiredWithoutChunksInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateOneRequiredWithoutChunksInput`
 */
export type ProjectUpdateOneRequiredWithoutChunksInput = Prisma.ProjectUpdateOneRequiredWithoutChunksInput

/**
 * @deprecated Renamed to `Prisma.TextSelectionUpdateManyWithoutChunkInput`
 */
export type TextSelectionUpdateManyWithoutChunkInput = Prisma.TextSelectionUpdateManyWithoutChunkInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateOneWithoutContributorAttributesInput`
 */
export type ProjectCreateOneWithoutContributorAttributesInput = Prisma.ProjectCreateOneWithoutContributorAttributesInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueCreateManyWithoutContributorAttributeInput`
 */
export type ContributorAttributeValueCreateManyWithoutContributorAttributeInput = Prisma.ContributorAttributeValueCreateManyWithoutContributorAttributeInput

/**
 * @deprecated Renamed to `Prisma.IntFieldUpdateOperationsInput`
 */
export type IntFieldUpdateOperationsInput = Prisma.IntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NullableEnumENTITY_TYPEFieldUpdateOperationsInput`
 */
export type NullableEnumENTITY_TYPEFieldUpdateOperationsInput = Prisma.NullableEnumENTITY_TYPEFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.EnumCONTRIBUTOR_ATTRIBUTE_TYPEFieldUpdateOperationsInput`
 */
export type EnumCONTRIBUTOR_ATTRIBUTE_TYPEFieldUpdateOperationsInput = Prisma.EnumCONTRIBUTOR_ATTRIBUTE_TYPEFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateOneRequiredWithoutContributorAttributesInput`
 */
export type ProjectUpdateOneRequiredWithoutContributorAttributesInput = Prisma.ProjectUpdateOneRequiredWithoutContributorAttributesInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateManyWithoutContributorAttributeInput`
 */
export type ContributorAttributeValueUpdateManyWithoutContributorAttributeInput = Prisma.ContributorAttributeValueUpdateManyWithoutContributorAttributeInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeCreateOneWithoutContributorAttributeValuesInput`
 */
export type ContributorAttributeCreateOneWithoutContributorAttributeValuesInput = Prisma.ContributorAttributeCreateOneWithoutContributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.OrganizationCreateOneWithoutContributorAttributeValuesInput`
 */
export type OrganizationCreateOneWithoutContributorAttributeValuesInput = Prisma.OrganizationCreateOneWithoutContributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateOneWithoutContributorAttributeValuesInput`
 */
export type PersonCreateOneWithoutContributorAttributeValuesInput = Prisma.PersonCreateOneWithoutContributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.NullableStringFieldUpdateOperationsInput`
 */
export type NullableStringFieldUpdateOperationsInput = Prisma.NullableStringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeUpdateOneRequiredWithoutContributorAttributeValuesInput`
 */
export type ContributorAttributeUpdateOneRequiredWithoutContributorAttributeValuesInput = Prisma.ContributorAttributeUpdateOneRequiredWithoutContributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.OrganizationUpdateOneRequiredWithoutContributorAttributeValuesInput`
 */
export type OrganizationUpdateOneRequiredWithoutContributorAttributeValuesInput = Prisma.OrganizationUpdateOneRequiredWithoutContributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateOneRequiredWithoutContributorAttributeValuesInput`
 */
export type PersonUpdateOneRequiredWithoutContributorAttributeValuesInput = Prisma.PersonUpdateOneRequiredWithoutContributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateOneWithoutDiscoverysInput`
 */
export type ProjectCreateOneWithoutDiscoverysInput = Prisma.ProjectCreateOneWithoutDiscoverysInput

/**
 * @deprecated Renamed to `Prisma.ChunkCreateManyWithoutDiscoveryInput`
 */
export type ChunkCreateManyWithoutDiscoveryInput = Prisma.ChunkCreateManyWithoutDiscoveryInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateOneRequiredWithoutDiscoverysInput`
 */
export type ProjectUpdateOneRequiredWithoutDiscoverysInput = Prisma.ProjectUpdateOneRequiredWithoutDiscoverysInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateManyWithoutDiscoveryInput`
 */
export type ChunkUpdateManyWithoutDiscoveryInput = Prisma.ChunkUpdateManyWithoutDiscoveryInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateOneWithoutMessagesInput`
 */
export type ProjectCreateOneWithoutMessagesInput = Prisma.ProjectCreateOneWithoutMessagesInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateOneWithoutMessage_Message_requesterIdToPersonsInput`
 */
export type PersonCreateOneWithoutMessage_Message_requesterIdToPersonsInput = Prisma.PersonCreateOneWithoutMessage_Message_requesterIdToPersonsInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateOneWithoutMessage_Message_submitterIdToPersonsInput`
 */
export type PersonCreateOneWithoutMessage_Message_submitterIdToPersonsInput = Prisma.PersonCreateOneWithoutMessage_Message_submitterIdToPersonsInput

/**
 * @deprecated Renamed to `Prisma.ChunkCreateManyWithoutMessageInput`
 */
export type ChunkCreateManyWithoutMessageInput = Prisma.ChunkCreateManyWithoutMessageInput

/**
 * @deprecated Renamed to `Prisma.SubMessageCreateManyWithoutMessageInput`
 */
export type SubMessageCreateManyWithoutMessageInput = Prisma.SubMessageCreateManyWithoutMessageInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateOneRequiredWithoutMessagesInput`
 */
export type ProjectUpdateOneRequiredWithoutMessagesInput = Prisma.ProjectUpdateOneRequiredWithoutMessagesInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateOneRequiredWithoutMessage_Message_requesterIdToPersonsInput`
 */
export type PersonUpdateOneRequiredWithoutMessage_Message_requesterIdToPersonsInput = Prisma.PersonUpdateOneRequiredWithoutMessage_Message_requesterIdToPersonsInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateOneRequiredWithoutMessage_Message_submitterIdToPersonsInput`
 */
export type PersonUpdateOneRequiredWithoutMessage_Message_submitterIdToPersonsInput = Prisma.PersonUpdateOneRequiredWithoutMessage_Message_submitterIdToPersonsInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateManyWithoutMessageInput`
 */
export type ChunkUpdateManyWithoutMessageInput = Prisma.ChunkUpdateManyWithoutMessageInput

/**
 * @deprecated Renamed to `Prisma.SubMessageUpdateManyWithoutMessageInput`
 */
export type SubMessageUpdateManyWithoutMessageInput = Prisma.SubMessageUpdateManyWithoutMessageInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateOneWithoutOrganizationsInput`
 */
export type ProjectCreateOneWithoutOrganizationsInput = Prisma.ProjectCreateOneWithoutOrganizationsInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueCreateManyWithoutOrganizationInput`
 */
export type ContributorAttributeValueCreateManyWithoutOrganizationInput = Prisma.ContributorAttributeValueCreateManyWithoutOrganizationInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateManyWithoutOrganizationInput`
 */
export type PersonCreateManyWithoutOrganizationInput = Prisma.PersonCreateManyWithoutOrganizationInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateOneRequiredWithoutOrganizationsInput`
 */
export type ProjectUpdateOneRequiredWithoutOrganizationsInput = Prisma.ProjectUpdateOneRequiredWithoutOrganizationsInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateManyWithoutOrganizationInput`
 */
export type ContributorAttributeValueUpdateManyWithoutOrganizationInput = Prisma.ContributorAttributeValueUpdateManyWithoutOrganizationInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateManyWithoutOrganizationInput`
 */
export type PersonUpdateManyWithoutOrganizationInput = Prisma.PersonUpdateManyWithoutOrganizationInput

/**
 * @deprecated Renamed to `Prisma.OrganizationCreateOneWithoutPersonsInput`
 */
export type OrganizationCreateOneWithoutPersonsInput = Prisma.OrganizationCreateOneWithoutPersonsInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateOneWithoutPersonsInput`
 */
export type ProjectCreateOneWithoutPersonsInput = Prisma.ProjectCreateOneWithoutPersonsInput

/**
 * @deprecated Renamed to `Prisma.AccountCreateManyWithoutPersonInput`
 */
export type AccountCreateManyWithoutPersonInput = Prisma.AccountCreateManyWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueCreateManyWithoutPersonInput`
 */
export type ContributorAttributeValueCreateManyWithoutPersonInput = Prisma.ContributorAttributeValueCreateManyWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateManyWithoutPerson_Message_requesterIdToPersonInput`
 */
export type MessageCreateManyWithoutPerson_Message_requesterIdToPersonInput = Prisma.MessageCreateManyWithoutPerson_Message_requesterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateManyWithoutPerson_Message_submitterIdToPersonInput`
 */
export type MessageCreateManyWithoutPerson_Message_submitterIdToPersonInput = Prisma.MessageCreateManyWithoutPerson_Message_submitterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.SubMessageCreateManyWithoutPersonInput`
 */
export type SubMessageCreateManyWithoutPersonInput = Prisma.SubMessageCreateManyWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.OrganizationUpdateOneRequiredWithoutPersonsInput`
 */
export type OrganizationUpdateOneRequiredWithoutPersonsInput = Prisma.OrganizationUpdateOneRequiredWithoutPersonsInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateOneRequiredWithoutPersonsInput`
 */
export type ProjectUpdateOneRequiredWithoutPersonsInput = Prisma.ProjectUpdateOneRequiredWithoutPersonsInput

/**
 * @deprecated Renamed to `Prisma.AccountUpdateManyWithoutPersonInput`
 */
export type AccountUpdateManyWithoutPersonInput = Prisma.AccountUpdateManyWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateManyWithoutPersonInput`
 */
export type ContributorAttributeValueUpdateManyWithoutPersonInput = Prisma.ContributorAttributeValueUpdateManyWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateManyWithoutPerson_Message_requesterIdToPersonInput`
 */
export type MessageUpdateManyWithoutPerson_Message_requesterIdToPersonInput = Prisma.MessageUpdateManyWithoutPerson_Message_requesterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateManyWithoutPerson_Message_submitterIdToPersonInput`
 */
export type MessageUpdateManyWithoutPerson_Message_submitterIdToPersonInput = Prisma.MessageUpdateManyWithoutPerson_Message_submitterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.SubMessageUpdateManyWithoutPersonInput`
 */
export type SubMessageUpdateManyWithoutPersonInput = Prisma.SubMessageUpdateManyWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.AccountCreateManyWithoutProjectInput`
 */
export type AccountCreateManyWithoutProjectInput = Prisma.AccountCreateManyWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.ChunkCreateManyWithoutProjectInput`
 */
export type ChunkCreateManyWithoutProjectInput = Prisma.ChunkCreateManyWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeCreateManyWithoutProjectInput`
 */
export type ContributorAttributeCreateManyWithoutProjectInput = Prisma.ContributorAttributeCreateManyWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryCreateManyWithoutProjectInput`
 */
export type DiscoveryCreateManyWithoutProjectInput = Prisma.DiscoveryCreateManyWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateManyWithoutProjectInput`
 */
export type MessageCreateManyWithoutProjectInput = Prisma.MessageCreateManyWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.OrganizationCreateManyWithoutProjectInput`
 */
export type OrganizationCreateManyWithoutProjectInput = Prisma.OrganizationCreateManyWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateManyWithoutProjectInput`
 */
export type PersonCreateManyWithoutProjectInput = Prisma.PersonCreateManyWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.AccountUpdateManyWithoutProjectInput`
 */
export type AccountUpdateManyWithoutProjectInput = Prisma.AccountUpdateManyWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateManyWithoutProjectInput`
 */
export type ChunkUpdateManyWithoutProjectInput = Prisma.ChunkUpdateManyWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeUpdateManyWithoutProjectInput`
 */
export type ContributorAttributeUpdateManyWithoutProjectInput = Prisma.ContributorAttributeUpdateManyWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryUpdateManyWithoutProjectInput`
 */
export type DiscoveryUpdateManyWithoutProjectInput = Prisma.DiscoveryUpdateManyWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateManyWithoutProjectInput`
 */
export type MessageUpdateManyWithoutProjectInput = Prisma.MessageUpdateManyWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.OrganizationUpdateManyWithoutProjectInput`
 */
export type OrganizationUpdateManyWithoutProjectInput = Prisma.OrganizationUpdateManyWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateManyWithoutProjectInput`
 */
export type PersonUpdateManyWithoutProjectInput = Prisma.PersonUpdateManyWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateOneWithoutSubMessagesInput`
 */
export type MessageCreateOneWithoutSubMessagesInput = Prisma.MessageCreateOneWithoutSubMessagesInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateOneWithoutSubMessagesInput`
 */
export type PersonCreateOneWithoutSubMessagesInput = Prisma.PersonCreateOneWithoutSubMessagesInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateOneRequiredWithoutSubMessagesInput`
 */
export type MessageUpdateOneRequiredWithoutSubMessagesInput = Prisma.MessageUpdateOneRequiredWithoutSubMessagesInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateOneRequiredWithoutSubMessagesInput`
 */
export type PersonUpdateOneRequiredWithoutSubMessagesInput = Prisma.PersonUpdateOneRequiredWithoutSubMessagesInput

/**
 * @deprecated Renamed to `Prisma.ChunkCreateOneWithoutTextSelectionsInput`
 */
export type ChunkCreateOneWithoutTextSelectionsInput = Prisma.ChunkCreateOneWithoutTextSelectionsInput

/**
 * @deprecated Renamed to `Prisma.FloatFieldUpdateOperationsInput`
 */
export type FloatFieldUpdateOperationsInput = Prisma.FloatFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateOneRequiredWithoutTextSelectionsInput`
 */
export type ChunkUpdateOneRequiredWithoutTextSelectionsInput = Prisma.ChunkUpdateOneRequiredWithoutTextSelectionsInput

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.NestedEnumACCOUNT_TYPENullableFilter`
 */
export type NestedEnumACCOUNT_TYPENullableFilter = Prisma.NestedEnumACCOUNT_TYPENullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedEnumENTITY_TYPENullableFilter`
 */
export type NestedEnumENTITY_TYPENullableFilter = Prisma.NestedEnumENTITY_TYPENullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedEnumCONTRIBUTOR_ATTRIBUTE_TYPEFilter`
 */
export type NestedEnumCONTRIBUTOR_ATTRIBUTE_TYPEFilter = Prisma.NestedEnumCONTRIBUTOR_ATTRIBUTE_TYPEFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringNullableFilter`
 */
export type NestedStringNullableFilter = Prisma.NestedStringNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedFloatFilter`
 */
export type NestedFloatFilter = Prisma.NestedFloatFilter

/**
 * @deprecated Renamed to `Prisma.PersonCreateWithoutAccountsInput`
 */
export type PersonCreateWithoutAccountsInput = Prisma.PersonCreateWithoutAccountsInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateOrConnectWithoutaccountsInput`
 */
export type PersonCreateOrConnectWithoutaccountsInput = Prisma.PersonCreateOrConnectWithoutaccountsInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateWithoutAccountsInput`
 */
export type ProjectCreateWithoutAccountsInput = Prisma.ProjectCreateWithoutAccountsInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateOrConnectWithoutaccountsInput`
 */
export type ProjectCreateOrConnectWithoutaccountsInput = Prisma.ProjectCreateOrConnectWithoutaccountsInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateWithoutAccountsInput`
 */
export type PersonUpdateWithoutAccountsInput = Prisma.PersonUpdateWithoutAccountsInput

/**
 * @deprecated Renamed to `Prisma.PersonUpsertWithoutAccountsInput`
 */
export type PersonUpsertWithoutAccountsInput = Prisma.PersonUpsertWithoutAccountsInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateWithoutAccountsInput`
 */
export type ProjectUpdateWithoutAccountsInput = Prisma.ProjectUpdateWithoutAccountsInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpsertWithoutAccountsInput`
 */
export type ProjectUpsertWithoutAccountsInput = Prisma.ProjectUpsertWithoutAccountsInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryCreateWithoutChunksInput`
 */
export type DiscoveryCreateWithoutChunksInput = Prisma.DiscoveryCreateWithoutChunksInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryCreateOrConnectWithoutchunksInput`
 */
export type DiscoveryCreateOrConnectWithoutchunksInput = Prisma.DiscoveryCreateOrConnectWithoutchunksInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateWithoutChunksInput`
 */
export type MessageCreateWithoutChunksInput = Prisma.MessageCreateWithoutChunksInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateOrConnectWithoutchunksInput`
 */
export type MessageCreateOrConnectWithoutchunksInput = Prisma.MessageCreateOrConnectWithoutchunksInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateWithoutChunksInput`
 */
export type ProjectCreateWithoutChunksInput = Prisma.ProjectCreateWithoutChunksInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateOrConnectWithoutchunksInput`
 */
export type ProjectCreateOrConnectWithoutchunksInput = Prisma.ProjectCreateOrConnectWithoutchunksInput

/**
 * @deprecated Renamed to `Prisma.TextSelectionCreateWithoutChunkInput`
 */
export type TextSelectionCreateWithoutChunkInput = Prisma.TextSelectionCreateWithoutChunkInput

/**
 * @deprecated Renamed to `Prisma.TextSelectionCreateOrConnectWithoutchunkInput`
 */
export type TextSelectionCreateOrConnectWithoutchunkInput = Prisma.TextSelectionCreateOrConnectWithoutchunkInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryUpdateWithoutChunksInput`
 */
export type DiscoveryUpdateWithoutChunksInput = Prisma.DiscoveryUpdateWithoutChunksInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryUpsertWithoutChunksInput`
 */
export type DiscoveryUpsertWithoutChunksInput = Prisma.DiscoveryUpsertWithoutChunksInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateWithoutChunksInput`
 */
export type MessageUpdateWithoutChunksInput = Prisma.MessageUpdateWithoutChunksInput

/**
 * @deprecated Renamed to `Prisma.MessageUpsertWithoutChunksInput`
 */
export type MessageUpsertWithoutChunksInput = Prisma.MessageUpsertWithoutChunksInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateWithoutChunksInput`
 */
export type ProjectUpdateWithoutChunksInput = Prisma.ProjectUpdateWithoutChunksInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpsertWithoutChunksInput`
 */
export type ProjectUpsertWithoutChunksInput = Prisma.ProjectUpsertWithoutChunksInput

/**
 * @deprecated Renamed to `Prisma.TextSelectionUpdateWithWhereUniqueWithoutChunkInput`
 */
export type TextSelectionUpdateWithWhereUniqueWithoutChunkInput = Prisma.TextSelectionUpdateWithWhereUniqueWithoutChunkInput

/**
 * @deprecated Renamed to `Prisma.TextSelectionUpdateManyWithWhereWithoutChunkInput`
 */
export type TextSelectionUpdateManyWithWhereWithoutChunkInput = Prisma.TextSelectionUpdateManyWithWhereWithoutChunkInput

/**
 * @deprecated Renamed to `Prisma.TextSelectionScalarWhereInput`
 */
export type TextSelectionScalarWhereInput = Prisma.TextSelectionScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.TextSelectionUpsertWithWhereUniqueWithoutChunkInput`
 */
export type TextSelectionUpsertWithWhereUniqueWithoutChunkInput = Prisma.TextSelectionUpsertWithWhereUniqueWithoutChunkInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateWithoutContributorAttributesInput`
 */
export type ProjectCreateWithoutContributorAttributesInput = Prisma.ProjectCreateWithoutContributorAttributesInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateOrConnectWithoutcontributorAttributesInput`
 */
export type ProjectCreateOrConnectWithoutcontributorAttributesInput = Prisma.ProjectCreateOrConnectWithoutcontributorAttributesInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueCreateWithoutContributorAttributeInput`
 */
export type ContributorAttributeValueCreateWithoutContributorAttributeInput = Prisma.ContributorAttributeValueCreateWithoutContributorAttributeInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueCreateOrConnectWithoutcontributorAttributeInput`
 */
export type ContributorAttributeValueCreateOrConnectWithoutcontributorAttributeInput = Prisma.ContributorAttributeValueCreateOrConnectWithoutcontributorAttributeInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateWithoutContributorAttributesInput`
 */
export type ProjectUpdateWithoutContributorAttributesInput = Prisma.ProjectUpdateWithoutContributorAttributesInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpsertWithoutContributorAttributesInput`
 */
export type ProjectUpsertWithoutContributorAttributesInput = Prisma.ProjectUpsertWithoutContributorAttributesInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateWithWhereUniqueWithoutContributorAttributeInput`
 */
export type ContributorAttributeValueUpdateWithWhereUniqueWithoutContributorAttributeInput = Prisma.ContributorAttributeValueUpdateWithWhereUniqueWithoutContributorAttributeInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateManyWithWhereWithoutContributorAttributeInput`
 */
export type ContributorAttributeValueUpdateManyWithWhereWithoutContributorAttributeInput = Prisma.ContributorAttributeValueUpdateManyWithWhereWithoutContributorAttributeInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueScalarWhereInput`
 */
export type ContributorAttributeValueScalarWhereInput = Prisma.ContributorAttributeValueScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpsertWithWhereUniqueWithoutContributorAttributeInput`
 */
export type ContributorAttributeValueUpsertWithWhereUniqueWithoutContributorAttributeInput = Prisma.ContributorAttributeValueUpsertWithWhereUniqueWithoutContributorAttributeInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeCreateWithoutContributorAttributeValuesInput`
 */
export type ContributorAttributeCreateWithoutContributorAttributeValuesInput = Prisma.ContributorAttributeCreateWithoutContributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeCreateOrConnectWithoutcontributorAttributeValuesInput`
 */
export type ContributorAttributeCreateOrConnectWithoutcontributorAttributeValuesInput = Prisma.ContributorAttributeCreateOrConnectWithoutcontributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.OrganizationCreateWithoutContributorAttributeValuesInput`
 */
export type OrganizationCreateWithoutContributorAttributeValuesInput = Prisma.OrganizationCreateWithoutContributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.OrganizationCreateOrConnectWithoutcontributorAttributeValuesInput`
 */
export type OrganizationCreateOrConnectWithoutcontributorAttributeValuesInput = Prisma.OrganizationCreateOrConnectWithoutcontributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateWithoutContributorAttributeValuesInput`
 */
export type PersonCreateWithoutContributorAttributeValuesInput = Prisma.PersonCreateWithoutContributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateOrConnectWithoutcontributorAttributeValuesInput`
 */
export type PersonCreateOrConnectWithoutcontributorAttributeValuesInput = Prisma.PersonCreateOrConnectWithoutcontributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeUpdateWithoutContributorAttributeValuesInput`
 */
export type ContributorAttributeUpdateWithoutContributorAttributeValuesInput = Prisma.ContributorAttributeUpdateWithoutContributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeUpsertWithoutContributorAttributeValuesInput`
 */
export type ContributorAttributeUpsertWithoutContributorAttributeValuesInput = Prisma.ContributorAttributeUpsertWithoutContributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.OrganizationUpdateWithoutContributorAttributeValuesInput`
 */
export type OrganizationUpdateWithoutContributorAttributeValuesInput = Prisma.OrganizationUpdateWithoutContributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.OrganizationUpsertWithoutContributorAttributeValuesInput`
 */
export type OrganizationUpsertWithoutContributorAttributeValuesInput = Prisma.OrganizationUpsertWithoutContributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateWithoutContributorAttributeValuesInput`
 */
export type PersonUpdateWithoutContributorAttributeValuesInput = Prisma.PersonUpdateWithoutContributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.PersonUpsertWithoutContributorAttributeValuesInput`
 */
export type PersonUpsertWithoutContributorAttributeValuesInput = Prisma.PersonUpsertWithoutContributorAttributeValuesInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateWithoutDiscoverysInput`
 */
export type ProjectCreateWithoutDiscoverysInput = Prisma.ProjectCreateWithoutDiscoverysInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateOrConnectWithoutdiscoverysInput`
 */
export type ProjectCreateOrConnectWithoutdiscoverysInput = Prisma.ProjectCreateOrConnectWithoutdiscoverysInput

/**
 * @deprecated Renamed to `Prisma.ChunkCreateWithoutDiscoveryInput`
 */
export type ChunkCreateWithoutDiscoveryInput = Prisma.ChunkCreateWithoutDiscoveryInput

/**
 * @deprecated Renamed to `Prisma.ChunkCreateOrConnectWithoutdiscoveryInput`
 */
export type ChunkCreateOrConnectWithoutdiscoveryInput = Prisma.ChunkCreateOrConnectWithoutdiscoveryInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateWithoutDiscoverysInput`
 */
export type ProjectUpdateWithoutDiscoverysInput = Prisma.ProjectUpdateWithoutDiscoverysInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpsertWithoutDiscoverysInput`
 */
export type ProjectUpsertWithoutDiscoverysInput = Prisma.ProjectUpsertWithoutDiscoverysInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateWithWhereUniqueWithoutDiscoveryInput`
 */
export type ChunkUpdateWithWhereUniqueWithoutDiscoveryInput = Prisma.ChunkUpdateWithWhereUniqueWithoutDiscoveryInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateManyWithWhereWithoutDiscoveryInput`
 */
export type ChunkUpdateManyWithWhereWithoutDiscoveryInput = Prisma.ChunkUpdateManyWithWhereWithoutDiscoveryInput

/**
 * @deprecated Renamed to `Prisma.ChunkScalarWhereInput`
 */
export type ChunkScalarWhereInput = Prisma.ChunkScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpsertWithWhereUniqueWithoutDiscoveryInput`
 */
export type ChunkUpsertWithWhereUniqueWithoutDiscoveryInput = Prisma.ChunkUpsertWithWhereUniqueWithoutDiscoveryInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateWithoutMessagesInput`
 */
export type ProjectCreateWithoutMessagesInput = Prisma.ProjectCreateWithoutMessagesInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateOrConnectWithoutmessagesInput`
 */
export type ProjectCreateOrConnectWithoutmessagesInput = Prisma.ProjectCreateOrConnectWithoutmessagesInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateWithoutMessage_Message_requesterIdToPersonsInput`
 */
export type PersonCreateWithoutMessage_Message_requesterIdToPersonsInput = Prisma.PersonCreateWithoutMessage_Message_requesterIdToPersonsInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateOrConnectWithoutmessage_Message_requesterIdToPersonsInput`
 */
export type PersonCreateOrConnectWithoutmessage_Message_requesterIdToPersonsInput = Prisma.PersonCreateOrConnectWithoutmessage_Message_requesterIdToPersonsInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateWithoutMessage_Message_submitterIdToPersonsInput`
 */
export type PersonCreateWithoutMessage_Message_submitterIdToPersonsInput = Prisma.PersonCreateWithoutMessage_Message_submitterIdToPersonsInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateOrConnectWithoutmessage_Message_submitterIdToPersonsInput`
 */
export type PersonCreateOrConnectWithoutmessage_Message_submitterIdToPersonsInput = Prisma.PersonCreateOrConnectWithoutmessage_Message_submitterIdToPersonsInput

/**
 * @deprecated Renamed to `Prisma.ChunkCreateWithoutMessageInput`
 */
export type ChunkCreateWithoutMessageInput = Prisma.ChunkCreateWithoutMessageInput

/**
 * @deprecated Renamed to `Prisma.ChunkCreateOrConnectWithoutmessageInput`
 */
export type ChunkCreateOrConnectWithoutmessageInput = Prisma.ChunkCreateOrConnectWithoutmessageInput

/**
 * @deprecated Renamed to `Prisma.SubMessageCreateWithoutMessageInput`
 */
export type SubMessageCreateWithoutMessageInput = Prisma.SubMessageCreateWithoutMessageInput

/**
 * @deprecated Renamed to `Prisma.SubMessageCreateOrConnectWithoutmessageInput`
 */
export type SubMessageCreateOrConnectWithoutmessageInput = Prisma.SubMessageCreateOrConnectWithoutmessageInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateWithoutMessagesInput`
 */
export type ProjectUpdateWithoutMessagesInput = Prisma.ProjectUpdateWithoutMessagesInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpsertWithoutMessagesInput`
 */
export type ProjectUpsertWithoutMessagesInput = Prisma.ProjectUpsertWithoutMessagesInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateWithoutMessage_Message_requesterIdToPersonsInput`
 */
export type PersonUpdateWithoutMessage_Message_requesterIdToPersonsInput = Prisma.PersonUpdateWithoutMessage_Message_requesterIdToPersonsInput

/**
 * @deprecated Renamed to `Prisma.PersonUpsertWithoutMessage_Message_requesterIdToPersonsInput`
 */
export type PersonUpsertWithoutMessage_Message_requesterIdToPersonsInput = Prisma.PersonUpsertWithoutMessage_Message_requesterIdToPersonsInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateWithoutMessage_Message_submitterIdToPersonsInput`
 */
export type PersonUpdateWithoutMessage_Message_submitterIdToPersonsInput = Prisma.PersonUpdateWithoutMessage_Message_submitterIdToPersonsInput

/**
 * @deprecated Renamed to `Prisma.PersonUpsertWithoutMessage_Message_submitterIdToPersonsInput`
 */
export type PersonUpsertWithoutMessage_Message_submitterIdToPersonsInput = Prisma.PersonUpsertWithoutMessage_Message_submitterIdToPersonsInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateWithWhereUniqueWithoutMessageInput`
 */
export type ChunkUpdateWithWhereUniqueWithoutMessageInput = Prisma.ChunkUpdateWithWhereUniqueWithoutMessageInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateManyWithWhereWithoutMessageInput`
 */
export type ChunkUpdateManyWithWhereWithoutMessageInput = Prisma.ChunkUpdateManyWithWhereWithoutMessageInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpsertWithWhereUniqueWithoutMessageInput`
 */
export type ChunkUpsertWithWhereUniqueWithoutMessageInput = Prisma.ChunkUpsertWithWhereUniqueWithoutMessageInput

/**
 * @deprecated Renamed to `Prisma.SubMessageUpdateWithWhereUniqueWithoutMessageInput`
 */
export type SubMessageUpdateWithWhereUniqueWithoutMessageInput = Prisma.SubMessageUpdateWithWhereUniqueWithoutMessageInput

/**
 * @deprecated Renamed to `Prisma.SubMessageUpdateManyWithWhereWithoutMessageInput`
 */
export type SubMessageUpdateManyWithWhereWithoutMessageInput = Prisma.SubMessageUpdateManyWithWhereWithoutMessageInput

/**
 * @deprecated Renamed to `Prisma.SubMessageScalarWhereInput`
 */
export type SubMessageScalarWhereInput = Prisma.SubMessageScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.SubMessageUpsertWithWhereUniqueWithoutMessageInput`
 */
export type SubMessageUpsertWithWhereUniqueWithoutMessageInput = Prisma.SubMessageUpsertWithWhereUniqueWithoutMessageInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateWithoutOrganizationsInput`
 */
export type ProjectCreateWithoutOrganizationsInput = Prisma.ProjectCreateWithoutOrganizationsInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateOrConnectWithoutorganizationsInput`
 */
export type ProjectCreateOrConnectWithoutorganizationsInput = Prisma.ProjectCreateOrConnectWithoutorganizationsInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueCreateWithoutOrganizationInput`
 */
export type ContributorAttributeValueCreateWithoutOrganizationInput = Prisma.ContributorAttributeValueCreateWithoutOrganizationInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueCreateOrConnectWithoutorganizationInput`
 */
export type ContributorAttributeValueCreateOrConnectWithoutorganizationInput = Prisma.ContributorAttributeValueCreateOrConnectWithoutorganizationInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateWithoutOrganizationInput`
 */
export type PersonCreateWithoutOrganizationInput = Prisma.PersonCreateWithoutOrganizationInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateOrConnectWithoutorganizationInput`
 */
export type PersonCreateOrConnectWithoutorganizationInput = Prisma.PersonCreateOrConnectWithoutorganizationInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateWithoutOrganizationsInput`
 */
export type ProjectUpdateWithoutOrganizationsInput = Prisma.ProjectUpdateWithoutOrganizationsInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpsertWithoutOrganizationsInput`
 */
export type ProjectUpsertWithoutOrganizationsInput = Prisma.ProjectUpsertWithoutOrganizationsInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateWithWhereUniqueWithoutOrganizationInput`
 */
export type ContributorAttributeValueUpdateWithWhereUniqueWithoutOrganizationInput = Prisma.ContributorAttributeValueUpdateWithWhereUniqueWithoutOrganizationInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateManyWithWhereWithoutOrganizationInput`
 */
export type ContributorAttributeValueUpdateManyWithWhereWithoutOrganizationInput = Prisma.ContributorAttributeValueUpdateManyWithWhereWithoutOrganizationInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpsertWithWhereUniqueWithoutOrganizationInput`
 */
export type ContributorAttributeValueUpsertWithWhereUniqueWithoutOrganizationInput = Prisma.ContributorAttributeValueUpsertWithWhereUniqueWithoutOrganizationInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateWithWhereUniqueWithoutOrganizationInput`
 */
export type PersonUpdateWithWhereUniqueWithoutOrganizationInput = Prisma.PersonUpdateWithWhereUniqueWithoutOrganizationInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateManyWithWhereWithoutOrganizationInput`
 */
export type PersonUpdateManyWithWhereWithoutOrganizationInput = Prisma.PersonUpdateManyWithWhereWithoutOrganizationInput

/**
 * @deprecated Renamed to `Prisma.PersonScalarWhereInput`
 */
export type PersonScalarWhereInput = Prisma.PersonScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.PersonUpsertWithWhereUniqueWithoutOrganizationInput`
 */
export type PersonUpsertWithWhereUniqueWithoutOrganizationInput = Prisma.PersonUpsertWithWhereUniqueWithoutOrganizationInput

/**
 * @deprecated Renamed to `Prisma.OrganizationCreateWithoutPersonsInput`
 */
export type OrganizationCreateWithoutPersonsInput = Prisma.OrganizationCreateWithoutPersonsInput

/**
 * @deprecated Renamed to `Prisma.OrganizationCreateOrConnectWithoutpersonsInput`
 */
export type OrganizationCreateOrConnectWithoutpersonsInput = Prisma.OrganizationCreateOrConnectWithoutpersonsInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateWithoutPersonsInput`
 */
export type ProjectCreateWithoutPersonsInput = Prisma.ProjectCreateWithoutPersonsInput

/**
 * @deprecated Renamed to `Prisma.ProjectCreateOrConnectWithoutpersonsInput`
 */
export type ProjectCreateOrConnectWithoutpersonsInput = Prisma.ProjectCreateOrConnectWithoutpersonsInput

/**
 * @deprecated Renamed to `Prisma.AccountCreateWithoutPersonInput`
 */
export type AccountCreateWithoutPersonInput = Prisma.AccountCreateWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.AccountCreateOrConnectWithoutpersonInput`
 */
export type AccountCreateOrConnectWithoutpersonInput = Prisma.AccountCreateOrConnectWithoutpersonInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueCreateWithoutPersonInput`
 */
export type ContributorAttributeValueCreateWithoutPersonInput = Prisma.ContributorAttributeValueCreateWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueCreateOrConnectWithoutpersonInput`
 */
export type ContributorAttributeValueCreateOrConnectWithoutpersonInput = Prisma.ContributorAttributeValueCreateOrConnectWithoutpersonInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateWithoutPerson_Message_requesterIdToPersonInput`
 */
export type MessageCreateWithoutPerson_Message_requesterIdToPersonInput = Prisma.MessageCreateWithoutPerson_Message_requesterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateOrConnectWithoutperson_Message_requesterIdToPersonInput`
 */
export type MessageCreateOrConnectWithoutperson_Message_requesterIdToPersonInput = Prisma.MessageCreateOrConnectWithoutperson_Message_requesterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateWithoutPerson_Message_submitterIdToPersonInput`
 */
export type MessageCreateWithoutPerson_Message_submitterIdToPersonInput = Prisma.MessageCreateWithoutPerson_Message_submitterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateOrConnectWithoutperson_Message_submitterIdToPersonInput`
 */
export type MessageCreateOrConnectWithoutperson_Message_submitterIdToPersonInput = Prisma.MessageCreateOrConnectWithoutperson_Message_submitterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.SubMessageCreateWithoutPersonInput`
 */
export type SubMessageCreateWithoutPersonInput = Prisma.SubMessageCreateWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.SubMessageCreateOrConnectWithoutpersonInput`
 */
export type SubMessageCreateOrConnectWithoutpersonInput = Prisma.SubMessageCreateOrConnectWithoutpersonInput

/**
 * @deprecated Renamed to `Prisma.OrganizationUpdateWithoutPersonsInput`
 */
export type OrganizationUpdateWithoutPersonsInput = Prisma.OrganizationUpdateWithoutPersonsInput

/**
 * @deprecated Renamed to `Prisma.OrganizationUpsertWithoutPersonsInput`
 */
export type OrganizationUpsertWithoutPersonsInput = Prisma.OrganizationUpsertWithoutPersonsInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpdateWithoutPersonsInput`
 */
export type ProjectUpdateWithoutPersonsInput = Prisma.ProjectUpdateWithoutPersonsInput

/**
 * @deprecated Renamed to `Prisma.ProjectUpsertWithoutPersonsInput`
 */
export type ProjectUpsertWithoutPersonsInput = Prisma.ProjectUpsertWithoutPersonsInput

/**
 * @deprecated Renamed to `Prisma.AccountUpdateWithWhereUniqueWithoutPersonInput`
 */
export type AccountUpdateWithWhereUniqueWithoutPersonInput = Prisma.AccountUpdateWithWhereUniqueWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.AccountUpdateManyWithWhereWithoutPersonInput`
 */
export type AccountUpdateManyWithWhereWithoutPersonInput = Prisma.AccountUpdateManyWithWhereWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.AccountScalarWhereInput`
 */
export type AccountScalarWhereInput = Prisma.AccountScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.AccountUpsertWithWhereUniqueWithoutPersonInput`
 */
export type AccountUpsertWithWhereUniqueWithoutPersonInput = Prisma.AccountUpsertWithWhereUniqueWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateWithWhereUniqueWithoutPersonInput`
 */
export type ContributorAttributeValueUpdateWithWhereUniqueWithoutPersonInput = Prisma.ContributorAttributeValueUpdateWithWhereUniqueWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateManyWithWhereWithoutPersonInput`
 */
export type ContributorAttributeValueUpdateManyWithWhereWithoutPersonInput = Prisma.ContributorAttributeValueUpdateManyWithWhereWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpsertWithWhereUniqueWithoutPersonInput`
 */
export type ContributorAttributeValueUpsertWithWhereUniqueWithoutPersonInput = Prisma.ContributorAttributeValueUpsertWithWhereUniqueWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateWithWhereUniqueWithoutPerson_Message_requesterIdToPersonInput`
 */
export type MessageUpdateWithWhereUniqueWithoutPerson_Message_requesterIdToPersonInput = Prisma.MessageUpdateWithWhereUniqueWithoutPerson_Message_requesterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateManyWithWhereWithoutPerson_Message_requesterIdToPersonInput`
 */
export type MessageUpdateManyWithWhereWithoutPerson_Message_requesterIdToPersonInput = Prisma.MessageUpdateManyWithWhereWithoutPerson_Message_requesterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.MessageScalarWhereInput`
 */
export type MessageScalarWhereInput = Prisma.MessageScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.MessageUpsertWithWhereUniqueWithoutPerson_Message_requesterIdToPersonInput`
 */
export type MessageUpsertWithWhereUniqueWithoutPerson_Message_requesterIdToPersonInput = Prisma.MessageUpsertWithWhereUniqueWithoutPerson_Message_requesterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateWithWhereUniqueWithoutPerson_Message_submitterIdToPersonInput`
 */
export type MessageUpdateWithWhereUniqueWithoutPerson_Message_submitterIdToPersonInput = Prisma.MessageUpdateWithWhereUniqueWithoutPerson_Message_submitterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateManyWithWhereWithoutPerson_Message_submitterIdToPersonInput`
 */
export type MessageUpdateManyWithWhereWithoutPerson_Message_submitterIdToPersonInput = Prisma.MessageUpdateManyWithWhereWithoutPerson_Message_submitterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.MessageUpsertWithWhereUniqueWithoutPerson_Message_submitterIdToPersonInput`
 */
export type MessageUpsertWithWhereUniqueWithoutPerson_Message_submitterIdToPersonInput = Prisma.MessageUpsertWithWhereUniqueWithoutPerson_Message_submitterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.SubMessageUpdateWithWhereUniqueWithoutPersonInput`
 */
export type SubMessageUpdateWithWhereUniqueWithoutPersonInput = Prisma.SubMessageUpdateWithWhereUniqueWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.SubMessageUpdateManyWithWhereWithoutPersonInput`
 */
export type SubMessageUpdateManyWithWhereWithoutPersonInput = Prisma.SubMessageUpdateManyWithWhereWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.SubMessageUpsertWithWhereUniqueWithoutPersonInput`
 */
export type SubMessageUpsertWithWhereUniqueWithoutPersonInput = Prisma.SubMessageUpsertWithWhereUniqueWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.AccountCreateWithoutProjectInput`
 */
export type AccountCreateWithoutProjectInput = Prisma.AccountCreateWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.AccountCreateOrConnectWithoutprojectInput`
 */
export type AccountCreateOrConnectWithoutprojectInput = Prisma.AccountCreateOrConnectWithoutprojectInput

/**
 * @deprecated Renamed to `Prisma.ChunkCreateWithoutProjectInput`
 */
export type ChunkCreateWithoutProjectInput = Prisma.ChunkCreateWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.ChunkCreateOrConnectWithoutprojectInput`
 */
export type ChunkCreateOrConnectWithoutprojectInput = Prisma.ChunkCreateOrConnectWithoutprojectInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeCreateWithoutProjectInput`
 */
export type ContributorAttributeCreateWithoutProjectInput = Prisma.ContributorAttributeCreateWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeCreateOrConnectWithoutprojectInput`
 */
export type ContributorAttributeCreateOrConnectWithoutprojectInput = Prisma.ContributorAttributeCreateOrConnectWithoutprojectInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryCreateWithoutProjectInput`
 */
export type DiscoveryCreateWithoutProjectInput = Prisma.DiscoveryCreateWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryCreateOrConnectWithoutprojectInput`
 */
export type DiscoveryCreateOrConnectWithoutprojectInput = Prisma.DiscoveryCreateOrConnectWithoutprojectInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateWithoutProjectInput`
 */
export type MessageCreateWithoutProjectInput = Prisma.MessageCreateWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateOrConnectWithoutprojectInput`
 */
export type MessageCreateOrConnectWithoutprojectInput = Prisma.MessageCreateOrConnectWithoutprojectInput

/**
 * @deprecated Renamed to `Prisma.OrganizationCreateWithoutProjectInput`
 */
export type OrganizationCreateWithoutProjectInput = Prisma.OrganizationCreateWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.OrganizationCreateOrConnectWithoutprojectInput`
 */
export type OrganizationCreateOrConnectWithoutprojectInput = Prisma.OrganizationCreateOrConnectWithoutprojectInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateWithoutProjectInput`
 */
export type PersonCreateWithoutProjectInput = Prisma.PersonCreateWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateOrConnectWithoutprojectInput`
 */
export type PersonCreateOrConnectWithoutprojectInput = Prisma.PersonCreateOrConnectWithoutprojectInput

/**
 * @deprecated Renamed to `Prisma.AccountUpdateWithWhereUniqueWithoutProjectInput`
 */
export type AccountUpdateWithWhereUniqueWithoutProjectInput = Prisma.AccountUpdateWithWhereUniqueWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.AccountUpdateManyWithWhereWithoutProjectInput`
 */
export type AccountUpdateManyWithWhereWithoutProjectInput = Prisma.AccountUpdateManyWithWhereWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.AccountUpsertWithWhereUniqueWithoutProjectInput`
 */
export type AccountUpsertWithWhereUniqueWithoutProjectInput = Prisma.AccountUpsertWithWhereUniqueWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateWithWhereUniqueWithoutProjectInput`
 */
export type ChunkUpdateWithWhereUniqueWithoutProjectInput = Prisma.ChunkUpdateWithWhereUniqueWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateManyWithWhereWithoutProjectInput`
 */
export type ChunkUpdateManyWithWhereWithoutProjectInput = Prisma.ChunkUpdateManyWithWhereWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpsertWithWhereUniqueWithoutProjectInput`
 */
export type ChunkUpsertWithWhereUniqueWithoutProjectInput = Prisma.ChunkUpsertWithWhereUniqueWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeUpdateWithWhereUniqueWithoutProjectInput`
 */
export type ContributorAttributeUpdateWithWhereUniqueWithoutProjectInput = Prisma.ContributorAttributeUpdateWithWhereUniqueWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeUpdateManyWithWhereWithoutProjectInput`
 */
export type ContributorAttributeUpdateManyWithWhereWithoutProjectInput = Prisma.ContributorAttributeUpdateManyWithWhereWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeScalarWhereInput`
 */
export type ContributorAttributeScalarWhereInput = Prisma.ContributorAttributeScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeUpsertWithWhereUniqueWithoutProjectInput`
 */
export type ContributorAttributeUpsertWithWhereUniqueWithoutProjectInput = Prisma.ContributorAttributeUpsertWithWhereUniqueWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryUpdateWithWhereUniqueWithoutProjectInput`
 */
export type DiscoveryUpdateWithWhereUniqueWithoutProjectInput = Prisma.DiscoveryUpdateWithWhereUniqueWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryUpdateManyWithWhereWithoutProjectInput`
 */
export type DiscoveryUpdateManyWithWhereWithoutProjectInput = Prisma.DiscoveryUpdateManyWithWhereWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryScalarWhereInput`
 */
export type DiscoveryScalarWhereInput = Prisma.DiscoveryScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryUpsertWithWhereUniqueWithoutProjectInput`
 */
export type DiscoveryUpsertWithWhereUniqueWithoutProjectInput = Prisma.DiscoveryUpsertWithWhereUniqueWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateWithWhereUniqueWithoutProjectInput`
 */
export type MessageUpdateWithWhereUniqueWithoutProjectInput = Prisma.MessageUpdateWithWhereUniqueWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateManyWithWhereWithoutProjectInput`
 */
export type MessageUpdateManyWithWhereWithoutProjectInput = Prisma.MessageUpdateManyWithWhereWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.MessageUpsertWithWhereUniqueWithoutProjectInput`
 */
export type MessageUpsertWithWhereUniqueWithoutProjectInput = Prisma.MessageUpsertWithWhereUniqueWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.OrganizationUpdateWithWhereUniqueWithoutProjectInput`
 */
export type OrganizationUpdateWithWhereUniqueWithoutProjectInput = Prisma.OrganizationUpdateWithWhereUniqueWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.OrganizationUpdateManyWithWhereWithoutProjectInput`
 */
export type OrganizationUpdateManyWithWhereWithoutProjectInput = Prisma.OrganizationUpdateManyWithWhereWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.OrganizationScalarWhereInput`
 */
export type OrganizationScalarWhereInput = Prisma.OrganizationScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.OrganizationUpsertWithWhereUniqueWithoutProjectInput`
 */
export type OrganizationUpsertWithWhereUniqueWithoutProjectInput = Prisma.OrganizationUpsertWithWhereUniqueWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateWithWhereUniqueWithoutProjectInput`
 */
export type PersonUpdateWithWhereUniqueWithoutProjectInput = Prisma.PersonUpdateWithWhereUniqueWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateManyWithWhereWithoutProjectInput`
 */
export type PersonUpdateManyWithWhereWithoutProjectInput = Prisma.PersonUpdateManyWithWhereWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.PersonUpsertWithWhereUniqueWithoutProjectInput`
 */
export type PersonUpsertWithWhereUniqueWithoutProjectInput = Prisma.PersonUpsertWithWhereUniqueWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateWithoutSubMessagesInput`
 */
export type MessageCreateWithoutSubMessagesInput = Prisma.MessageCreateWithoutSubMessagesInput

/**
 * @deprecated Renamed to `Prisma.MessageCreateOrConnectWithoutsubMessagesInput`
 */
export type MessageCreateOrConnectWithoutsubMessagesInput = Prisma.MessageCreateOrConnectWithoutsubMessagesInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateWithoutSubMessagesInput`
 */
export type PersonCreateWithoutSubMessagesInput = Prisma.PersonCreateWithoutSubMessagesInput

/**
 * @deprecated Renamed to `Prisma.PersonCreateOrConnectWithoutsubMessagesInput`
 */
export type PersonCreateOrConnectWithoutsubMessagesInput = Prisma.PersonCreateOrConnectWithoutsubMessagesInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateWithoutSubMessagesInput`
 */
export type MessageUpdateWithoutSubMessagesInput = Prisma.MessageUpdateWithoutSubMessagesInput

/**
 * @deprecated Renamed to `Prisma.MessageUpsertWithoutSubMessagesInput`
 */
export type MessageUpsertWithoutSubMessagesInput = Prisma.MessageUpsertWithoutSubMessagesInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateWithoutSubMessagesInput`
 */
export type PersonUpdateWithoutSubMessagesInput = Prisma.PersonUpdateWithoutSubMessagesInput

/**
 * @deprecated Renamed to `Prisma.PersonUpsertWithoutSubMessagesInput`
 */
export type PersonUpsertWithoutSubMessagesInput = Prisma.PersonUpsertWithoutSubMessagesInput

/**
 * @deprecated Renamed to `Prisma.ChunkCreateWithoutTextSelectionsInput`
 */
export type ChunkCreateWithoutTextSelectionsInput = Prisma.ChunkCreateWithoutTextSelectionsInput

/**
 * @deprecated Renamed to `Prisma.ChunkCreateOrConnectWithouttextSelectionsInput`
 */
export type ChunkCreateOrConnectWithouttextSelectionsInput = Prisma.ChunkCreateOrConnectWithouttextSelectionsInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateWithoutTextSelectionsInput`
 */
export type ChunkUpdateWithoutTextSelectionsInput = Prisma.ChunkUpdateWithoutTextSelectionsInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpsertWithoutTextSelectionsInput`
 */
export type ChunkUpsertWithoutTextSelectionsInput = Prisma.ChunkUpsertWithoutTextSelectionsInput

/**
 * @deprecated Renamed to `Prisma.TextSelectionUpdateWithoutChunkInput`
 */
export type TextSelectionUpdateWithoutChunkInput = Prisma.TextSelectionUpdateWithoutChunkInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateWithoutContributorAttributeInput`
 */
export type ContributorAttributeValueUpdateWithoutContributorAttributeInput = Prisma.ContributorAttributeValueUpdateWithoutContributorAttributeInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateWithoutDiscoveryInput`
 */
export type ChunkUpdateWithoutDiscoveryInput = Prisma.ChunkUpdateWithoutDiscoveryInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateWithoutMessageInput`
 */
export type ChunkUpdateWithoutMessageInput = Prisma.ChunkUpdateWithoutMessageInput

/**
 * @deprecated Renamed to `Prisma.SubMessageUpdateWithoutMessageInput`
 */
export type SubMessageUpdateWithoutMessageInput = Prisma.SubMessageUpdateWithoutMessageInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateWithoutOrganizationInput`
 */
export type ContributorAttributeValueUpdateWithoutOrganizationInput = Prisma.ContributorAttributeValueUpdateWithoutOrganizationInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateWithoutOrganizationInput`
 */
export type PersonUpdateWithoutOrganizationInput = Prisma.PersonUpdateWithoutOrganizationInput

/**
 * @deprecated Renamed to `Prisma.AccountUpdateWithoutPersonInput`
 */
export type AccountUpdateWithoutPersonInput = Prisma.AccountUpdateWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeValueUpdateWithoutPersonInput`
 */
export type ContributorAttributeValueUpdateWithoutPersonInput = Prisma.ContributorAttributeValueUpdateWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateWithoutPerson_Message_requesterIdToPersonInput`
 */
export type MessageUpdateWithoutPerson_Message_requesterIdToPersonInput = Prisma.MessageUpdateWithoutPerson_Message_requesterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateWithoutPerson_Message_submitterIdToPersonInput`
 */
export type MessageUpdateWithoutPerson_Message_submitterIdToPersonInput = Prisma.MessageUpdateWithoutPerson_Message_submitterIdToPersonInput

/**
 * @deprecated Renamed to `Prisma.SubMessageUpdateWithoutPersonInput`
 */
export type SubMessageUpdateWithoutPersonInput = Prisma.SubMessageUpdateWithoutPersonInput

/**
 * @deprecated Renamed to `Prisma.AccountUpdateWithoutProjectInput`
 */
export type AccountUpdateWithoutProjectInput = Prisma.AccountUpdateWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.ChunkUpdateWithoutProjectInput`
 */
export type ChunkUpdateWithoutProjectInput = Prisma.ChunkUpdateWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.ContributorAttributeUpdateWithoutProjectInput`
 */
export type ContributorAttributeUpdateWithoutProjectInput = Prisma.ContributorAttributeUpdateWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.DiscoveryUpdateWithoutProjectInput`
 */
export type DiscoveryUpdateWithoutProjectInput = Prisma.DiscoveryUpdateWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.MessageUpdateWithoutProjectInput`
 */
export type MessageUpdateWithoutProjectInput = Prisma.MessageUpdateWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.OrganizationUpdateWithoutProjectInput`
 */
export type OrganizationUpdateWithoutProjectInput = Prisma.OrganizationUpdateWithoutProjectInput

/**
 * @deprecated Renamed to `Prisma.PersonUpdateWithoutProjectInput`
 */
export type PersonUpdateWithoutProjectInput = Prisma.PersonUpdateWithoutProjectInput