import * as Typegen from 'nexus-plugin-prisma/typegen'
import * as Prisma from '@prisma/client';

// Pagination type
type Pagination = {
  first?: boolean
  last?: boolean
  before?: boolean
  after?: boolean
}

// Prisma custom scalar names
type CustomScalars = 'No custom scalars are used in your Prisma Schema.'

// Prisma model type definitions
interface PrismaModels {
  Account: Prisma.Account
  Chunk: Prisma.Chunk
  ContributorAttribute: Prisma.ContributorAttribute
  ContributorAttributeValue: Prisma.ContributorAttributeValue
  Discovery: Prisma.Discovery
  Message: Prisma.Message
  Organization: Prisma.Organization
  Person: Prisma.Person
  Project: Prisma.Project
  SubMessage: Prisma.SubMessage
  TextSelection: Prisma.TextSelection
}

// Prisma input types metadata
interface NexusPrismaInputs {
  Query: {
    accounts: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'username' | 'hashedPassword' | 'personId' | 'projectId' | 'type' | 'person' | 'project'
      ordering: 'id' | 'username' | 'hashedPassword' | 'personId' | 'projectId' | 'type'
    }
    chunks: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'messageId' | 'discoveryId' | 'discovery' | 'message' | 'project' | 'textSelections'
      ordering: 'projectId' | 'id' | 'messageId' | 'discoveryId'
    }
    contributorAttributes: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'appliesTo' | 'name' | 'type' | 'project' | 'contributorAttributeValues'
      ordering: 'projectId' | 'id' | 'appliesTo' | 'name' | 'type'
    }
    contributorAttributeValues: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'contributorAttributeId' | 'contributorAttributeType' | 'personId' | 'organizationId' | 'valuetext' | 'contributorAttribute' | 'organization' | 'person'
      ordering: 'id' | 'contributorAttributeId' | 'contributorAttributeType' | 'personId' | 'organizationId' | 'valuetext'
    }
    discoveries: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'title' | 'description' | 'project' | 'chunks'
      ordering: 'projectId' | 'id' | 'title' | 'description'
    }
    messages: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'requesterId' | 'submitterId' | 'clientId' | 'title' | 'content' | 'project' | 'person_Message_requesterIdToPerson' | 'person_Message_submitterIdToPerson' | 'chunks' | 'subMessages'
      ordering: 'projectId' | 'id' | 'requesterId' | 'submitterId' | 'clientId' | 'title' | 'content'
    }
    organizations: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'name' | 'project' | 'contributorAttributeValues' | 'persons'
      ordering: 'projectId' | 'id' | 'name'
    }
    people: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'name' | 'email' | 'organizationId' | 'organization' | 'project' | 'accounts' | 'contributorAttributeValues' | 'message_Message_requesterIdToPersons' | 'message_Message_submitterIdToPersons' | 'subMessages'
      ordering: 'projectId' | 'id' | 'name' | 'email' | 'organizationId'
    }
    projects: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'name' | 'accounts' | 'chunks' | 'contributorAttributes' | 'discoverys' | 'messages' | 'organizations' | 'persons'
      ordering: 'id' | 'name'
    }
    subMessages: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'submitterId' | 'content' | 'messageId' | 'message' | 'person'
      ordering: 'id' | 'submitterId' | 'content' | 'messageId'
    }
    textSelections: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'offsetstart' | 'length' | 'submessagenumber' | 'content' | 'chunkId' | 'chunk'
      ordering: 'id' | 'offsetstart' | 'length' | 'submessagenumber' | 'content' | 'chunkId'
    }
  },
  Account: {

  }
  Chunk: {
    textSelections: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'offsetstart' | 'length' | 'submessagenumber' | 'content' | 'chunkId' | 'chunk'
      ordering: 'id' | 'offsetstart' | 'length' | 'submessagenumber' | 'content' | 'chunkId'
    }
  }
  ContributorAttribute: {
    contributorAttributeValues: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'contributorAttributeId' | 'contributorAttributeType' | 'personId' | 'organizationId' | 'valuetext' | 'contributorAttribute' | 'organization' | 'person'
      ordering: 'id' | 'contributorAttributeId' | 'contributorAttributeType' | 'personId' | 'organizationId' | 'valuetext'
    }
  }
  ContributorAttributeValue: {

  }
  Discovery: {
    chunks: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'messageId' | 'discoveryId' | 'discovery' | 'message' | 'project' | 'textSelections'
      ordering: 'projectId' | 'id' | 'messageId' | 'discoveryId'
    }
  }
  Message: {
    chunks: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'messageId' | 'discoveryId' | 'discovery' | 'message' | 'project' | 'textSelections'
      ordering: 'projectId' | 'id' | 'messageId' | 'discoveryId'
    }
    subMessages: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'submitterId' | 'content' | 'messageId' | 'message' | 'person'
      ordering: 'id' | 'submitterId' | 'content' | 'messageId'
    }
  }
  Organization: {
    contributorAttributeValues: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'contributorAttributeId' | 'contributorAttributeType' | 'personId' | 'organizationId' | 'valuetext' | 'contributorAttribute' | 'organization' | 'person'
      ordering: 'id' | 'contributorAttributeId' | 'contributorAttributeType' | 'personId' | 'organizationId' | 'valuetext'
    }
    persons: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'name' | 'email' | 'organizationId' | 'organization' | 'project' | 'accounts' | 'contributorAttributeValues' | 'message_Message_requesterIdToPersons' | 'message_Message_submitterIdToPersons' | 'subMessages'
      ordering: 'projectId' | 'id' | 'name' | 'email' | 'organizationId'
    }
  }
  Person: {
    accounts: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'username' | 'hashedPassword' | 'personId' | 'projectId' | 'type' | 'person' | 'project'
      ordering: 'id' | 'username' | 'hashedPassword' | 'personId' | 'projectId' | 'type'
    }
    contributorAttributeValues: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'contributorAttributeId' | 'contributorAttributeType' | 'personId' | 'organizationId' | 'valuetext' | 'contributorAttribute' | 'organization' | 'person'
      ordering: 'id' | 'contributorAttributeId' | 'contributorAttributeType' | 'personId' | 'organizationId' | 'valuetext'
    }
    message_Message_requesterIdToPersons: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'requesterId' | 'submitterId' | 'clientId' | 'title' | 'content' | 'project' | 'person_Message_requesterIdToPerson' | 'person_Message_submitterIdToPerson' | 'chunks' | 'subMessages'
      ordering: 'projectId' | 'id' | 'requesterId' | 'submitterId' | 'clientId' | 'title' | 'content'
    }
    message_Message_submitterIdToPersons: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'requesterId' | 'submitterId' | 'clientId' | 'title' | 'content' | 'project' | 'person_Message_requesterIdToPerson' | 'person_Message_submitterIdToPerson' | 'chunks' | 'subMessages'
      ordering: 'projectId' | 'id' | 'requesterId' | 'submitterId' | 'clientId' | 'title' | 'content'
    }
    subMessages: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'submitterId' | 'content' | 'messageId' | 'message' | 'person'
      ordering: 'id' | 'submitterId' | 'content' | 'messageId'
    }
  }
  Project: {
    accounts: {
      filtering: 'AND' | 'OR' | 'NOT' | 'id' | 'username' | 'hashedPassword' | 'personId' | 'projectId' | 'type' | 'person' | 'project'
      ordering: 'id' | 'username' | 'hashedPassword' | 'personId' | 'projectId' | 'type'
    }
    chunks: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'messageId' | 'discoveryId' | 'discovery' | 'message' | 'project' | 'textSelections'
      ordering: 'projectId' | 'id' | 'messageId' | 'discoveryId'
    }
    contributorAttributes: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'appliesTo' | 'name' | 'type' | 'project' | 'contributorAttributeValues'
      ordering: 'projectId' | 'id' | 'appliesTo' | 'name' | 'type'
    }
    discoverys: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'title' | 'description' | 'project' | 'chunks'
      ordering: 'projectId' | 'id' | 'title' | 'description'
    }
    messages: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'requesterId' | 'submitterId' | 'clientId' | 'title' | 'content' | 'project' | 'person_Message_requesterIdToPerson' | 'person_Message_submitterIdToPerson' | 'chunks' | 'subMessages'
      ordering: 'projectId' | 'id' | 'requesterId' | 'submitterId' | 'clientId' | 'title' | 'content'
    }
    organizations: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'name' | 'project' | 'contributorAttributeValues' | 'persons'
      ordering: 'projectId' | 'id' | 'name'
    }
    persons: {
      filtering: 'AND' | 'OR' | 'NOT' | 'projectId' | 'id' | 'name' | 'email' | 'organizationId' | 'organization' | 'project' | 'accounts' | 'contributorAttributeValues' | 'message_Message_requesterIdToPersons' | 'message_Message_submitterIdToPersons' | 'subMessages'
      ordering: 'projectId' | 'id' | 'name' | 'email' | 'organizationId'
    }
  }
  SubMessage: {

  }
  TextSelection: {

  }
}

// Prisma output types metadata
interface NexusPrismaOutputs {
  Query: {
    account: 'Account'
    accounts: 'Account'
    chunk: 'Chunk'
    chunks: 'Chunk'
    contributorAttribute: 'ContributorAttribute'
    contributorAttributes: 'ContributorAttribute'
    contributorAttributeValue: 'ContributorAttributeValue'
    contributorAttributeValues: 'ContributorAttributeValue'
    discovery: 'Discovery'
    discoveries: 'Discovery'
    message: 'Message'
    messages: 'Message'
    organization: 'Organization'
    organizations: 'Organization'
    person: 'Person'
    people: 'Person'
    project: 'Project'
    projects: 'Project'
    subMessage: 'SubMessage'
    subMessages: 'SubMessage'
    textSelection: 'TextSelection'
    textSelections: 'TextSelection'
  },
  Mutation: {
    createOneAccount: 'Account'
    updateOneAccount: 'Account'
    updateManyAccount: 'BatchPayload'
    deleteOneAccount: 'Account'
    deleteManyAccount: 'BatchPayload'
    upsertOneAccount: 'Account'
    createOneChunk: 'Chunk'
    updateOneChunk: 'Chunk'
    updateManyChunk: 'BatchPayload'
    deleteOneChunk: 'Chunk'
    deleteManyChunk: 'BatchPayload'
    upsertOneChunk: 'Chunk'
    createOneContributorAttribute: 'ContributorAttribute'
    updateOneContributorAttribute: 'ContributorAttribute'
    updateManyContributorAttribute: 'BatchPayload'
    deleteOneContributorAttribute: 'ContributorAttribute'
    deleteManyContributorAttribute: 'BatchPayload'
    upsertOneContributorAttribute: 'ContributorAttribute'
    createOneContributorAttributeValue: 'ContributorAttributeValue'
    updateOneContributorAttributeValue: 'ContributorAttributeValue'
    updateManyContributorAttributeValue: 'BatchPayload'
    deleteOneContributorAttributeValue: 'ContributorAttributeValue'
    deleteManyContributorAttributeValue: 'BatchPayload'
    upsertOneContributorAttributeValue: 'ContributorAttributeValue'
    createOneDiscovery: 'Discovery'
    updateOneDiscovery: 'Discovery'
    updateManyDiscovery: 'BatchPayload'
    deleteOneDiscovery: 'Discovery'
    deleteManyDiscovery: 'BatchPayload'
    upsertOneDiscovery: 'Discovery'
    createOneMessage: 'Message'
    updateOneMessage: 'Message'
    updateManyMessage: 'BatchPayload'
    deleteOneMessage: 'Message'
    deleteManyMessage: 'BatchPayload'
    upsertOneMessage: 'Message'
    createOneOrganization: 'Organization'
    updateOneOrganization: 'Organization'
    updateManyOrganization: 'BatchPayload'
    deleteOneOrganization: 'Organization'
    deleteManyOrganization: 'BatchPayload'
    upsertOneOrganization: 'Organization'
    createOnePerson: 'Person'
    updateOnePerson: 'Person'
    updateManyPerson: 'BatchPayload'
    deleteOnePerson: 'Person'
    deleteManyPerson: 'BatchPayload'
    upsertOnePerson: 'Person'
    createOneProject: 'Project'
    updateOneProject: 'Project'
    updateManyProject: 'BatchPayload'
    deleteOneProject: 'Project'
    deleteManyProject: 'BatchPayload'
    upsertOneProject: 'Project'
    createOneSubMessage: 'SubMessage'
    updateOneSubMessage: 'SubMessage'
    updateManySubMessage: 'BatchPayload'
    deleteOneSubMessage: 'SubMessage'
    deleteManySubMessage: 'BatchPayload'
    upsertOneSubMessage: 'SubMessage'
    createOneTextSelection: 'TextSelection'
    updateOneTextSelection: 'TextSelection'
    updateManyTextSelection: 'BatchPayload'
    deleteOneTextSelection: 'TextSelection'
    deleteManyTextSelection: 'BatchPayload'
    upsertOneTextSelection: 'TextSelection'
  },
  Account: {
    id: 'Int'
    username: 'String'
    hashedPassword: 'String'
    personId: 'Int'
    projectId: 'Int'
    type: 'ACCOUNT_TYPE'
    person: 'Person'
    project: 'Project'
  }
  Chunk: {
    projectId: 'Int'
    id: 'Int'
    messageId: 'Int'
    discoveryId: 'Int'
    discovery: 'Discovery'
    message: 'Message'
    project: 'Project'
    textSelections: 'TextSelection'
  }
  ContributorAttribute: {
    projectId: 'Int'
    id: 'Int'
    appliesTo: 'ENTITY_TYPE'
    name: 'String'
    type: 'CONTRIBUTOR_ATTRIBUTE_TYPE'
    project: 'Project'
    contributorAttributeValues: 'ContributorAttributeValue'
  }
  ContributorAttributeValue: {
    id: 'Int'
    contributorAttributeId: 'Int'
    contributorAttributeType: 'CONTRIBUTOR_ATTRIBUTE_TYPE'
    personId: 'Int'
    organizationId: 'Int'
    valuetext: 'String'
    contributorAttribute: 'ContributorAttribute'
    organization: 'Organization'
    person: 'Person'
  }
  Discovery: {
    projectId: 'Int'
    id: 'Int'
    title: 'String'
    description: 'String'
    project: 'Project'
    chunks: 'Chunk'
  }
  Message: {
    projectId: 'Int'
    id: 'Int'
    requesterId: 'Int'
    submitterId: 'Int'
    clientId: 'String'
    title: 'String'
    content: 'String'
    project: 'Project'
    person_Message_requesterIdToPerson: 'Person'
    person_Message_submitterIdToPerson: 'Person'
    chunks: 'Chunk'
    subMessages: 'SubMessage'
  }
  Organization: {
    projectId: 'Int'
    id: 'Int'
    name: 'String'
    project: 'Project'
    contributorAttributeValues: 'ContributorAttributeValue'
    persons: 'Person'
  }
  Person: {
    projectId: 'Int'
    id: 'Int'
    name: 'String'
    email: 'String'
    organizationId: 'Int'
    organization: 'Organization'
    project: 'Project'
    accounts: 'Account'
    contributorAttributeValues: 'ContributorAttributeValue'
    message_Message_requesterIdToPersons: 'Message'
    message_Message_submitterIdToPersons: 'Message'
    subMessages: 'SubMessage'
  }
  Project: {
    id: 'Int'
    name: 'String'
    accounts: 'Account'
    chunks: 'Chunk'
    contributorAttributes: 'ContributorAttribute'
    discoverys: 'Discovery'
    messages: 'Message'
    organizations: 'Organization'
    persons: 'Person'
  }
  SubMessage: {
    id: 'Int'
    submitterId: 'Int'
    content: 'String'
    messageId: 'Int'
    message: 'Message'
    person: 'Person'
  }
  TextSelection: {
    id: 'Int'
    offsetstart: 'Float'
    length: 'Float'
    submessagenumber: 'Int'
    content: 'String'
    chunkId: 'Int'
    chunk: 'Chunk'
  }
}

// Helper to gather all methods relative to a model
interface NexusPrismaMethods {
  Account: Typegen.NexusPrismaFields<'Account'>
  Chunk: Typegen.NexusPrismaFields<'Chunk'>
  ContributorAttribute: Typegen.NexusPrismaFields<'ContributorAttribute'>
  ContributorAttributeValue: Typegen.NexusPrismaFields<'ContributorAttributeValue'>
  Discovery: Typegen.NexusPrismaFields<'Discovery'>
  Message: Typegen.NexusPrismaFields<'Message'>
  Organization: Typegen.NexusPrismaFields<'Organization'>
  Person: Typegen.NexusPrismaFields<'Person'>
  Project: Typegen.NexusPrismaFields<'Project'>
  SubMessage: Typegen.NexusPrismaFields<'SubMessage'>
  TextSelection: Typegen.NexusPrismaFields<'TextSelection'>
  Query: Typegen.NexusPrismaFields<'Query'>
  Mutation: Typegen.NexusPrismaFields<'Mutation'>
}

interface NexusPrismaGenTypes {
  inputs: NexusPrismaInputs
  outputs: NexusPrismaOutputs
  methods: NexusPrismaMethods
  models: PrismaModels
  pagination: Pagination
  scalars: CustomScalars
}

declare global {
  interface NexusPrismaGen extends NexusPrismaGenTypes {}

  type NexusPrisma<
    TypeName extends string,
    ModelOrCrud extends 'model' | 'crud'
  > = Typegen.GetNexusPrisma<TypeName, ModelOrCrud>;
}
  