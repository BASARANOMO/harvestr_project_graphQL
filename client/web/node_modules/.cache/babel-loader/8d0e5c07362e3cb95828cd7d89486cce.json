{"remainingRequest":"/Users/almikk/harvestr_project_graphQL/client/web/node_modules/babel-loader/lib/index.js!/Users/almikk/harvestr_project_graphQL/client/web/src/main.js","dependencies":[{"path":"/Users/almikk/harvestr_project_graphQL/client/web/src/main.js","mtime":1607954828483},{"path":"/Users/almikk/harvestr_project_graphQL/client/web/node_modules/cache-loader/dist/cjs.js","mtime":1607955313922},{"path":"/Users/almikk/harvestr_project_graphQL/client/web/node_modules/babel-loader/lib/index.js","mtime":1607955313916}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICIvVXNlcnMvYWxtaWtrL2hhcnZlc3RyX3Byb2plY3RfZ3JhcGhRTC9jbGllbnQvd2ViL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3IuanMiOwppbXBvcnQgIi9Vc2Vycy9hbG1pa2svaGFydmVzdHJfcHJvamVjdF9ncmFwaFFML2NsaWVudC93ZWIvbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmpzIjsKaW1wb3J0ICIvVXNlcnMvYWxtaWtrL2hhcnZlc3RyX3Byb2plY3RfZ3JhcGhRTC9jbGllbnQvd2ViL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbi5qcyI7CmltcG9ydCAiL1VzZXJzL2FsbWlray9oYXJ2ZXN0cl9wcm9qZWN0X2dyYXBoUUwvY2xpZW50L3dlYi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuZmluYWxseS5qcyI7CmltcG9ydCB7IGNyZWF0ZUFwcCwgaCwgcHJvdmlkZSB9IGZyb20gInZ1ZSI7CmltcG9ydCBBcHAgZnJvbSAiLi9BcHAudnVlIjsKaW1wb3J0IHsgQXBvbGxvQ2xpZW50LCBJbk1lbW9yeUNhY2hlLCBncWwgfSBmcm9tICJAYXBvbGxvL2NsaWVudCI7CmltcG9ydCB7IERlZmF1bHRBcG9sbG9DbGllbnQgfSBmcm9tICJAdnVlL2Fwb2xsby1jb21wb3NhYmxlIjsKaW1wb3J0IHJvdXRlciBmcm9tICcuL3JvdXRlcic7CnZhciBkZWZhdWx0Y2xpZW50ID0gbmV3IEFwb2xsb0NsaWVudCh7CiAgdXJpOiAiaHR0cDovL2xvY2FsaG9zdDo0MDAwL2dyYXBocWwiLAogIGNhY2hlOiBuZXcgSW5NZW1vcnlDYWNoZSgpCn0pOwovKiBjb25zdCBxdWVyeSA9IGdxbGAKCXF1ZXJ5IHsKCQlwcm9qZWN0cyB7CgkJCWlkCgkJCW5hbWUKCQl9Cgl9CmA7CgoKZGVmYXVsdGNsaWVudAoJLnF1ZXJ5KHsKCQlxdWVyeSwKCX0pCgkudGhlbigocmVzKSA9PiBjb25zb2xlLmxvZyhyZXMpKTsKICovCgpjcmVhdGVBcHAoewogIHNldHVwOiBmdW5jdGlvbiBzZXR1cCgpIHsKICAgIHByb3ZpZGUoRGVmYXVsdEFwb2xsb0NsaWVudCwgZGVmYXVsdGNsaWVudCk7IC8vZGVmYXVsdGNsaWVudCBpcyB0aGUgb25lIHdlIGludHJvZHVjZWQgYWJvdmUKICB9LAogIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgcmV0dXJuIGgoQXBwKTsKICB9Cn0pLnVzZShyb3V0ZXIpLm1vdW50KCIjYXBwIik7"},{"version":3,"sources":["/Users/almikk/harvestr_project_graphQL/client/web/src/main.js"],"names":["createApp","h","provide","App","ApolloClient","InMemoryCache","gql","DefaultApolloClient","router","defaultclient","uri","cache","setup","render","use","mount"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,CAApB,EAAuBC,OAAvB,QAAsC,KAAtC;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,GAAtC,QAAiD,gBAAjD;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAMC,aAAa,GAAG,IAAIL,YAAJ,CAAiB;AACtCM,EAAAA,GAAG,EAAE,+BADiC;AAEtCC,EAAAA,KAAK,EAAE,IAAIN,aAAJ;AAF+B,CAAjB,CAAtB;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGAL,SAAS,CAAC;AACTY,EAAAA,KADS,mBACD;AACPV,IAAAA,OAAO,CAACK,mBAAD,EAAsBE,aAAtB,CAAP,CADO,CACsC;AAC7C,GAHQ;AAITI,EAAAA,MAJS,oBAIA;AACR,WAAOZ,CAAC,CAACE,GAAD,CAAR;AACA;AANQ,CAAD,CAAT,CAOGW,GAPH,CAOON,MAPP,EAOeO,KAPf,CAOqB,MAPrB","sourcesContent":["import { createApp, h, provide } from \"vue\";\nimport App from \"./App.vue\";\nimport { ApolloClient, InMemoryCache, gql } from \"@apollo/client\";\nimport { DefaultApolloClient } from \"@vue/apollo-composable\";\nimport router from './router'\n\nconst defaultclient = new ApolloClient({\n\turi: \"http://localhost:4000/graphql\",\n\tcache: new InMemoryCache(),\n});\n\n/* const query = gql`\n\tquery {\n\t\tprojects {\n\t\t\tid\n\t\t\tname\n\t\t}\n\t}\n`;\n\n\ndefaultclient\n\t.query({\n\t\tquery,\n\t})\n\t.then((res) => console.log(res));\n */\n\n\ncreateApp({\n\tsetup() {\n\t\tprovide(DefaultApolloClient, defaultclient); //defaultclient is the one we introduced above\n\t},\n\trender() {\n\t\treturn h(App);\n\t},\n}).use(router).mount(\"#app\");\n"]}]}