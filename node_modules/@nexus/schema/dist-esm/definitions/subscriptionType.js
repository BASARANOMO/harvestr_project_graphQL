import { objectType } from './objectType';
export class SubscriptionBuilder {
    constructor(typeBuilder, isList = false) {
        this.typeBuilder = typeBuilder;
        this.isList = isList;
    }
    get list() {
        if (this.isList) {
            throw new Error('Cannot chain list.list, in the definition block. Use `list: []` config value');
        }
        return new SubscriptionBuilder(this.typeBuilder, true);
    }
    string(fieldName, config) {
        this.fieldShorthand(fieldName, 'String', config);
    }
    int(fieldName, config) {
        this.fieldShorthand(fieldName, 'Int', config);
    }
    // prettier-ignore
    boolean(fieldName, opts) {
        this.fieldShorthand(fieldName, 'Boolean', opts);
    }
    id(fieldName, config) {
        this.fieldShorthand(fieldName, 'ID', config);
    }
    float(fieldName, config) {
        this.fieldShorthand(fieldName, 'Float', config);
    }
    // prettier-ignore
    field(name, fieldConfig) {
        this.typeBuilder.addField(this.decorateField(Object.assign({ name }, fieldConfig)));
    }
    fieldShorthand(fieldName, typeName, config) {
        this.typeBuilder.addField(this.decorateField(Object.assign({ name: fieldName, type: typeName }, config)));
    }
    decorateField(config) {
        if (this.isList) {
            if (config.list) {
                this.typeBuilder.warn(`It looks like you chained .list and set list for ${config.name}. ` +
                    'You should only do one or the other');
            }
            else {
                config.list = true;
            }
        }
        return config;
    }
}
export function subscriptionType(config) {
    return objectType(Object.assign({ name: 'Subscription' }, config));
}
//# sourceMappingURL=subscriptionType.js.map