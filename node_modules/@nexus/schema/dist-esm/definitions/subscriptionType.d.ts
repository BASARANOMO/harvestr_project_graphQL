import { GraphQLResolveInfo } from 'graphql';
import { ArgsValue, GetGen, MaybePromise, MaybePromiseDeep, ResultValue } from '../typegenTypeHelpers';
import { IsEqual } from '../utils';
import { CommonOutputFieldConfig, NexusOutputFieldDef } from './definitionBlocks';
import { ObjectDefinitionBuilder } from './objectType';
import { AllNexusOutputTypeDefs } from './wrapping';
import { BaseScalars } from './_types';
export interface SubscribeFieldConfigBase<FieldName extends string, Event = any> {
    resolve(root: Event, args: ArgsValue<'Subscription', FieldName>, context: GetGen<'context'>, info: GraphQLResolveInfo): MaybePromise<ResultValue<'Subscription', FieldName>> | MaybePromiseDeep<ResultValue<'Subscription', FieldName>>;
    subscribe(root: object, args: ArgsValue<'Subscription', FieldName>, ctx: GetGen<'context'>, info: GraphQLResolveInfo): MaybePromise<AsyncIterator<Event>> | MaybePromiseDeep<AsyncIterator<Event>>;
}
export declare type FieldShorthandConfig<FieldName extends string> = CommonOutputFieldConfig<'Subscription', FieldName> & SubscribeFieldConfigBase<FieldName>;
export interface SubscribeFieldConfig<TypeName extends string, FieldName extends string> extends SubscribeFieldConfigBase<FieldName>, CommonOutputFieldConfig<'Subscription', FieldName> {
    type: GetGen<'allOutputTypes'> | AllNexusOutputTypeDefs;
}
export interface SubscriptionBuilderInternal extends ObjectDefinitionBuilder<'Subscription'> {
}
export declare class SubscriptionBuilder {
    protected typeBuilder: SubscriptionBuilderInternal;
    protected isList: boolean;
    constructor(typeBuilder: SubscriptionBuilderInternal, isList?: boolean);
    get list(): SubscriptionBuilder;
    string<FieldName extends string>(fieldName: FieldName, config: FieldShorthandConfig<FieldName>): void;
    int<FieldName extends string>(fieldName: FieldName, config: FieldShorthandConfig<FieldName>): void;
    boolean<FieldName extends string>(fieldName: FieldName, opts: FieldShorthandConfig<FieldName>): void;
    id<FieldName extends string>(fieldName: FieldName, config: FieldShorthandConfig<FieldName>): void;
    float<FieldName extends string>(fieldName: FieldName, config: FieldShorthandConfig<FieldName>): void;
    field<FieldName extends string>(name: FieldName, fieldConfig: SubscribeFieldConfig<'Subscription', FieldName>): void;
    protected fieldShorthand(fieldName: string, typeName: BaseScalars, config: FieldShorthandConfig<any>): void;
    protected decorateField(config: NexusOutputFieldDef): NexusOutputFieldDef;
}
export declare type SubscriptionTypeParams = {
    definition(t: SubscriptionBuilder): void;
};
export declare function subscriptionType(config: SubscriptionTypeParams): import("./objectType").NexusObjectTypeDef<string>;
export declare type IsSubscriptionType<T> = IsEqual<T, 'Subscription'>;
