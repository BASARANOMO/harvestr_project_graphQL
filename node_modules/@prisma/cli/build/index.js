#!/usr/bin/env node
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __commonJS = (callback, module3) => () => {
  if (!module3) {
    module3 = {exports: {}};
    callback(module3.exports, module3);
  }
  return module3.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module3) => {
  __markAsModule(target);
  if (typeof module3 === "object" || typeof module3 === "function") {
    for (let key of __getOwnPropNames(module3))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module3[key], enumerable: __getOwnPropDesc(module3, key).enumerable});
  }
  return target;
};
var __toModule = (module3) => {
  if (module3 && module3.__esModule)
    return module3;
  return __exportStar(__defProp(__create(__getProtoOf(module3)), "default", {value: module3, enumerable: true}), module3);
};

// ../sdk/dist/pick.js
var require_pick = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.pick = void 0;
  function pick2(obj, keys) {
    return Object.entries(obj).reduce((acc, [key, value]) => {
      if (keys.includes(key)) {
        acc[key] = value;
      }
      return acc;
    }, {});
  }
  exports2.pick = pick2;
});

// ../sdk/dist/keyBy.js
var require_keyBy = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.keyBy = void 0;
  exports2.keyBy = (collection, iteratee) => {
    return collection.reduce((acc, curr) => {
      acc[iteratee(curr)] = curr;
      return acc;
    }, {});
  };
});

// ../../node_modules/.pnpm/temp-dir@2.0.0/node_modules/temp-dir/index.js
var require_temp_dir = __commonJS((exports2, module3) => {
  "use strict";
  const fs17 = require("fs");
  const os3 = require("os");
  const tempDirectorySymbol = Symbol.for("__RESOLVED_TEMP_DIRECTORY__");
  if (!global[tempDirectorySymbol]) {
    Object.defineProperty(global, tempDirectorySymbol, {
      value: fs17.realpathSync(os3.tmpdir())
    });
  }
  module3.exports = global[tempDirectorySymbol];
});

// ../../node_modules/.pnpm/semver@6.3.0/node_modules/semver/semver.js
var require_semver = __commonJS((exports2, module3) => {
  exports2 = module3.exports = SemVer;
  var debug3;
  if (typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
    debug3 = function() {
      var args2 = Array.prototype.slice.call(arguments, 0);
      args2.unshift("SEMVER");
      console.log.apply(console, args2);
    };
  } else {
    debug3 = function() {
    };
  }
  exports2.SEMVER_SPEC_VERSION = "2.0.0";
  var MAX_LENGTH = 256;
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
  var MAX_SAFE_COMPONENT_LENGTH = 16;
  var re = exports2.re = [];
  var src = exports2.src = [];
  var t = exports2.tokens = {};
  var R = 0;
  function tok(n) {
    t[n] = R++;
  }
  tok("NUMERICIDENTIFIER");
  src[t.NUMERICIDENTIFIER] = "0|[1-9]\\d*";
  tok("NUMERICIDENTIFIERLOOSE");
  src[t.NUMERICIDENTIFIERLOOSE] = "[0-9]+";
  tok("NONNUMERICIDENTIFIER");
  src[t.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
  tok("MAINVERSION");
  src[t.MAINVERSION] = "(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")";
  tok("MAINVERSIONLOOSE");
  src[t.MAINVERSIONLOOSE] = "(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")";
  tok("PRERELEASEIDENTIFIER");
  src[t.PRERELEASEIDENTIFIER] = "(?:" + src[t.NUMERICIDENTIFIER] + "|" + src[t.NONNUMERICIDENTIFIER] + ")";
  tok("PRERELEASEIDENTIFIERLOOSE");
  src[t.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t.NUMERICIDENTIFIERLOOSE] + "|" + src[t.NONNUMERICIDENTIFIER] + ")";
  tok("PRERELEASE");
  src[t.PRERELEASE] = "(?:-(" + src[t.PRERELEASEIDENTIFIER] + "(?:\\." + src[t.PRERELEASEIDENTIFIER] + ")*))";
  tok("PRERELEASELOOSE");
  src[t.PRERELEASELOOSE] = "(?:-?(" + src[t.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t.PRERELEASEIDENTIFIERLOOSE] + ")*))";
  tok("BUILDIDENTIFIER");
  src[t.BUILDIDENTIFIER] = "[0-9A-Za-z-]+";
  tok("BUILD");
  src[t.BUILD] = "(?:\\+(" + src[t.BUILDIDENTIFIER] + "(?:\\." + src[t.BUILDIDENTIFIER] + ")*))";
  tok("FULL");
  tok("FULLPLAIN");
  src[t.FULLPLAIN] = "v?" + src[t.MAINVERSION] + src[t.PRERELEASE] + "?" + src[t.BUILD] + "?";
  src[t.FULL] = "^" + src[t.FULLPLAIN] + "$";
  tok("LOOSEPLAIN");
  src[t.LOOSEPLAIN] = "[v=\\s]*" + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + "?" + src[t.BUILD] + "?";
  tok("LOOSE");
  src[t.LOOSE] = "^" + src[t.LOOSEPLAIN] + "$";
  tok("GTLT");
  src[t.GTLT] = "((?:<|>)?=?)";
  tok("XRANGEIDENTIFIERLOOSE");
  src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
  tok("XRANGEIDENTIFIER");
  src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + "|x|X|\\*";
  tok("XRANGEPLAIN");
  src[t.XRANGEPLAIN] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:" + src[t.PRERELEASE] + ")?" + src[t.BUILD] + "?)?)?";
  tok("XRANGEPLAINLOOSE");
  src[t.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t.PRERELEASELOOSE] + ")?" + src[t.BUILD] + "?)?)?";
  tok("XRANGE");
  src[t.XRANGE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAIN] + "$";
  tok("XRANGELOOSE");
  src[t.XRANGELOOSE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAINLOOSE] + "$";
  tok("COERCE");
  src[t.COERCE] = "(^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
  tok("COERCERTL");
  re[t.COERCERTL] = new RegExp(src[t.COERCE], "g");
  tok("LONETILDE");
  src[t.LONETILDE] = "(?:~>?)";
  tok("TILDETRIM");
  src[t.TILDETRIM] = "(\\s*)" + src[t.LONETILDE] + "\\s+";
  re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], "g");
  var tildeTrimReplace = "$1~";
  tok("TILDE");
  src[t.TILDE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAIN] + "$";
  tok("TILDELOOSE");
  src[t.TILDELOOSE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + "$";
  tok("LONECARET");
  src[t.LONECARET] = "(?:\\^)";
  tok("CARETTRIM");
  src[t.CARETTRIM] = "(\\s*)" + src[t.LONECARET] + "\\s+";
  re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], "g");
  var caretTrimReplace = "$1^";
  tok("CARET");
  src[t.CARET] = "^" + src[t.LONECARET] + src[t.XRANGEPLAIN] + "$";
  tok("CARETLOOSE");
  src[t.CARETLOOSE] = "^" + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + "$";
  tok("COMPARATORLOOSE");
  src[t.COMPARATORLOOSE] = "^" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + ")$|^$";
  tok("COMPARATOR");
  src[t.COMPARATOR] = "^" + src[t.GTLT] + "\\s*(" + src[t.FULLPLAIN] + ")$|^$";
  tok("COMPARATORTRIM");
  src[t.COMPARATORTRIM] = "(\\s*)" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + "|" + src[t.XRANGEPLAIN] + ")";
  re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], "g");
  var comparatorTrimReplace = "$1$2$3";
  tok("HYPHENRANGE");
  src[t.HYPHENRANGE] = "^\\s*(" + src[t.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t.XRANGEPLAIN] + ")\\s*$";
  tok("HYPHENRANGELOOSE");
  src[t.HYPHENRANGELOOSE] = "^\\s*(" + src[t.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t.XRANGEPLAINLOOSE] + ")\\s*$";
  tok("STAR");
  src[t.STAR] = "(<|>)?=?\\s*\\*";
  for (var i = 0; i < R; i++) {
    debug3(i, src[i]);
    if (!re[i]) {
      re[i] = new RegExp(src[i]);
    }
  }
  exports2.parse = parse;
  function parse(version, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (version instanceof SemVer) {
      return version;
    }
    if (typeof version !== "string") {
      return null;
    }
    if (version.length > MAX_LENGTH) {
      return null;
    }
    var r = options.loose ? re[t.LOOSE] : re[t.FULL];
    if (!r.test(version)) {
      return null;
    }
    try {
      return new SemVer(version, options);
    } catch (er) {
      return null;
    }
  }
  exports2.valid = valid;
  function valid(version, options) {
    var v = parse(version, options);
    return v ? v.version : null;
  }
  exports2.clean = clean;
  function clean(version, options) {
    var s = parse(version.trim().replace(/^[=v]+/, ""), options);
    return s ? s.version : null;
  }
  exports2.SemVer = SemVer;
  function SemVer(version, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (version instanceof SemVer) {
      if (version.loose === options.loose) {
        return version;
      } else {
        version = version.version;
      }
    } else if (typeof version !== "string") {
      throw new TypeError("Invalid Version: " + version);
    }
    if (version.length > MAX_LENGTH) {
      throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
    }
    if (!(this instanceof SemVer)) {
      return new SemVer(version, options);
    }
    debug3("SemVer", version, options);
    this.options = options;
    this.loose = !!options.loose;
    var m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
    if (!m) {
      throw new TypeError("Invalid Version: " + version);
    }
    this.raw = version;
    this.major = +m[1];
    this.minor = +m[2];
    this.patch = +m[3];
    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError("Invalid major version");
    }
    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError("Invalid minor version");
    }
    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError("Invalid patch version");
    }
    if (!m[4]) {
      this.prerelease = [];
    } else {
      this.prerelease = m[4].split(".").map(function(id) {
        if (/^[0-9]+$/.test(id)) {
          var num = +id;
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num;
          }
        }
        return id;
      });
    }
    this.build = m[5] ? m[5].split(".") : [];
    this.format();
  }
  SemVer.prototype.format = function() {
    this.version = this.major + "." + this.minor + "." + this.patch;
    if (this.prerelease.length) {
      this.version += "-" + this.prerelease.join(".");
    }
    return this.version;
  };
  SemVer.prototype.toString = function() {
    return this.version;
  };
  SemVer.prototype.compare = function(other) {
    debug3("SemVer.compare", this.version, this.options, other);
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }
    return this.compareMain(other) || this.comparePre(other);
  };
  SemVer.prototype.compareMain = function(other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }
    return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
  };
  SemVer.prototype.comparePre = function(other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }
    if (this.prerelease.length && !other.prerelease.length) {
      return -1;
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1;
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0;
    }
    var i2 = 0;
    do {
      var a = this.prerelease[i2];
      var b = other.prerelease[i2];
      debug3("prerelease compare", i2, a, b);
      if (a === void 0 && b === void 0) {
        return 0;
      } else if (b === void 0) {
        return 1;
      } else if (a === void 0) {
        return -1;
      } else if (a === b) {
        continue;
      } else {
        return compareIdentifiers(a, b);
      }
    } while (++i2);
  };
  SemVer.prototype.compareBuild = function(other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }
    var i2 = 0;
    do {
      var a = this.build[i2];
      var b = other.build[i2];
      debug3("prerelease compare", i2, a, b);
      if (a === void 0 && b === void 0) {
        return 0;
      } else if (b === void 0) {
        return 1;
      } else if (a === void 0) {
        return -1;
      } else if (a === b) {
        continue;
      } else {
        return compareIdentifiers(a, b);
      }
    } while (++i2);
  };
  SemVer.prototype.inc = function(release, identifier) {
    switch (release) {
      case "premajor":
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor = 0;
        this.major++;
        this.inc("pre", identifier);
        break;
      case "preminor":
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor++;
        this.inc("pre", identifier);
        break;
      case "prepatch":
        this.prerelease.length = 0;
        this.inc("patch", identifier);
        this.inc("pre", identifier);
        break;
      case "prerelease":
        if (this.prerelease.length === 0) {
          this.inc("patch", identifier);
        }
        this.inc("pre", identifier);
        break;
      case "major":
        if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
          this.major++;
        }
        this.minor = 0;
        this.patch = 0;
        this.prerelease = [];
        break;
      case "minor":
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++;
        }
        this.patch = 0;
        this.prerelease = [];
        break;
      case "patch":
        if (this.prerelease.length === 0) {
          this.patch++;
        }
        this.prerelease = [];
        break;
      case "pre":
        if (this.prerelease.length === 0) {
          this.prerelease = [0];
        } else {
          var i2 = this.prerelease.length;
          while (--i2 >= 0) {
            if (typeof this.prerelease[i2] === "number") {
              this.prerelease[i2]++;
              i2 = -2;
            }
          }
          if (i2 === -1) {
            this.prerelease.push(0);
          }
        }
        if (identifier) {
          if (this.prerelease[0] === identifier) {
            if (isNaN(this.prerelease[1])) {
              this.prerelease = [identifier, 0];
            }
          } else {
            this.prerelease = [identifier, 0];
          }
        }
        break;
      default:
        throw new Error("invalid increment argument: " + release);
    }
    this.format();
    this.raw = this.version;
    return this;
  };
  exports2.inc = inc;
  function inc(version, release, loose, identifier) {
    if (typeof loose === "string") {
      identifier = loose;
      loose = void 0;
    }
    try {
      return new SemVer(version, loose).inc(release, identifier).version;
    } catch (er) {
      return null;
    }
  }
  exports2.diff = diff;
  function diff(version1, version2) {
    if (eq(version1, version2)) {
      return null;
    } else {
      var v1 = parse(version1);
      var v2 = parse(version2);
      var prefix = "";
      if (v1.prerelease.length || v2.prerelease.length) {
        prefix = "pre";
        var defaultResult = "prerelease";
      }
      for (var key in v1) {
        if (key === "major" || key === "minor" || key === "patch") {
          if (v1[key] !== v2[key]) {
            return prefix + key;
          }
        }
      }
      return defaultResult;
    }
  }
  exports2.compareIdentifiers = compareIdentifiers;
  var numeric = /^[0-9]+$/;
  function compareIdentifiers(a, b) {
    var anum = numeric.test(a);
    var bnum = numeric.test(b);
    if (anum && bnum) {
      a = +a;
      b = +b;
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
  }
  exports2.rcompareIdentifiers = rcompareIdentifiers;
  function rcompareIdentifiers(a, b) {
    return compareIdentifiers(b, a);
  }
  exports2.major = major;
  function major(a, loose) {
    return new SemVer(a, loose).major;
  }
  exports2.minor = minor;
  function minor(a, loose) {
    return new SemVer(a, loose).minor;
  }
  exports2.patch = patch;
  function patch(a, loose) {
    return new SemVer(a, loose).patch;
  }
  exports2.compare = compare;
  function compare(a, b, loose) {
    return new SemVer(a, loose).compare(new SemVer(b, loose));
  }
  exports2.compareLoose = compareLoose;
  function compareLoose(a, b) {
    return compare(a, b, true);
  }
  exports2.compareBuild = compareBuild;
  function compareBuild(a, b, loose) {
    var versionA = new SemVer(a, loose);
    var versionB = new SemVer(b, loose);
    return versionA.compare(versionB) || versionA.compareBuild(versionB);
  }
  exports2.rcompare = rcompare;
  function rcompare(a, b, loose) {
    return compare(b, a, loose);
  }
  exports2.sort = sort;
  function sort(list, loose) {
    return list.sort(function(a, b) {
      return exports2.compareBuild(a, b, loose);
    });
  }
  exports2.rsort = rsort;
  function rsort(list, loose) {
    return list.sort(function(a, b) {
      return exports2.compareBuild(b, a, loose);
    });
  }
  exports2.gt = gt;
  function gt(a, b, loose) {
    return compare(a, b, loose) > 0;
  }
  exports2.lt = lt;
  function lt(a, b, loose) {
    return compare(a, b, loose) < 0;
  }
  exports2.eq = eq;
  function eq(a, b, loose) {
    return compare(a, b, loose) === 0;
  }
  exports2.neq = neq;
  function neq(a, b, loose) {
    return compare(a, b, loose) !== 0;
  }
  exports2.gte = gte;
  function gte(a, b, loose) {
    return compare(a, b, loose) >= 0;
  }
  exports2.lte = lte;
  function lte(a, b, loose) {
    return compare(a, b, loose) <= 0;
  }
  exports2.cmp = cmp;
  function cmp(a, op, b, loose) {
    switch (op) {
      case "===":
        if (typeof a === "object")
          a = a.version;
        if (typeof b === "object")
          b = b.version;
        return a === b;
      case "!==":
        if (typeof a === "object")
          a = a.version;
        if (typeof b === "object")
          b = b.version;
        return a !== b;
      case "":
      case "=":
      case "==":
        return eq(a, b, loose);
      case "!=":
        return neq(a, b, loose);
      case ">":
        return gt(a, b, loose);
      case ">=":
        return gte(a, b, loose);
      case "<":
        return lt(a, b, loose);
      case "<=":
        return lte(a, b, loose);
      default:
        throw new TypeError("Invalid operator: " + op);
    }
  }
  exports2.Comparator = Comparator;
  function Comparator(comp, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (comp instanceof Comparator) {
      if (comp.loose === !!options.loose) {
        return comp;
      } else {
        comp = comp.value;
      }
    }
    if (!(this instanceof Comparator)) {
      return new Comparator(comp, options);
    }
    debug3("comparator", comp, options);
    this.options = options;
    this.loose = !!options.loose;
    this.parse(comp);
    if (this.semver === ANY) {
      this.value = "";
    } else {
      this.value = this.operator + this.semver.version;
    }
    debug3("comp", this);
  }
  var ANY = {};
  Comparator.prototype.parse = function(comp) {
    var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
    var m = comp.match(r);
    if (!m) {
      throw new TypeError("Invalid comparator: " + comp);
    }
    this.operator = m[1] !== void 0 ? m[1] : "";
    if (this.operator === "=") {
      this.operator = "";
    }
    if (!m[2]) {
      this.semver = ANY;
    } else {
      this.semver = new SemVer(m[2], this.options.loose);
    }
  };
  Comparator.prototype.toString = function() {
    return this.value;
  };
  Comparator.prototype.test = function(version) {
    debug3("Comparator.test", version, this.options.loose);
    if (this.semver === ANY || version === ANY) {
      return true;
    }
    if (typeof version === "string") {
      try {
        version = new SemVer(version, this.options);
      } catch (er) {
        return false;
      }
    }
    return cmp(version, this.operator, this.semver, this.options);
  };
  Comparator.prototype.intersects = function(comp, options) {
    if (!(comp instanceof Comparator)) {
      throw new TypeError("a Comparator is required");
    }
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    var rangeTmp;
    if (this.operator === "") {
      if (this.value === "") {
        return true;
      }
      rangeTmp = new Range(comp.value, options);
      return satisfies(this.value, rangeTmp, options);
    } else if (comp.operator === "") {
      if (comp.value === "") {
        return true;
      }
      rangeTmp = new Range(this.value, options);
      return satisfies(comp.semver, rangeTmp, options);
    }
    var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
    var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
    var sameSemVer = this.semver.version === comp.semver.version;
    var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
    var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && ((this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"));
    var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ((this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">"));
    return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
  };
  exports2.Range = Range;
  function Range(range, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (range instanceof Range) {
      if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
        return range;
      } else {
        return new Range(range.raw, options);
      }
    }
    if (range instanceof Comparator) {
      return new Range(range.value, options);
    }
    if (!(this instanceof Range)) {
      return new Range(range, options);
    }
    this.options = options;
    this.loose = !!options.loose;
    this.includePrerelease = !!options.includePrerelease;
    this.raw = range;
    this.set = range.split(/\s*\|\|\s*/).map(function(range2) {
      return this.parseRange(range2.trim());
    }, this).filter(function(c) {
      return c.length;
    });
    if (!this.set.length) {
      throw new TypeError("Invalid SemVer Range: " + range);
    }
    this.format();
  }
  Range.prototype.format = function() {
    this.range = this.set.map(function(comps) {
      return comps.join(" ").trim();
    }).join("||").trim();
    return this.range;
  };
  Range.prototype.toString = function() {
    return this.range;
  };
  Range.prototype.parseRange = function(range) {
    var loose = this.options.loose;
    range = range.trim();
    var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
    range = range.replace(hr, hyphenReplace);
    debug3("hyphen replace", range);
    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
    debug3("comparator trim", range, re[t.COMPARATORTRIM]);
    range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
    range = range.replace(re[t.CARETTRIM], caretTrimReplace);
    range = range.split(/\s+/).join(" ");
    var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
    var set = range.split(" ").map(function(comp) {
      return parseComparator(comp, this.options);
    }, this).join(" ").split(/\s+/);
    if (this.options.loose) {
      set = set.filter(function(comp) {
        return !!comp.match(compRe);
      });
    }
    set = set.map(function(comp) {
      return new Comparator(comp, this.options);
    }, this);
    return set;
  };
  Range.prototype.intersects = function(range, options) {
    if (!(range instanceof Range)) {
      throw new TypeError("a Range is required");
    }
    return this.set.some(function(thisComparators) {
      return isSatisfiable(thisComparators, options) && range.set.some(function(rangeComparators) {
        return isSatisfiable(rangeComparators, options) && thisComparators.every(function(thisComparator) {
          return rangeComparators.every(function(rangeComparator) {
            return thisComparator.intersects(rangeComparator, options);
          });
        });
      });
    });
  };
  function isSatisfiable(comparators, options) {
    var result = true;
    var remainingComparators = comparators.slice();
    var testComparator = remainingComparators.pop();
    while (result && remainingComparators.length) {
      result = remainingComparators.every(function(otherComparator) {
        return testComparator.intersects(otherComparator, options);
      });
      testComparator = remainingComparators.pop();
    }
    return result;
  }
  exports2.toComparators = toComparators;
  function toComparators(range, options) {
    return new Range(range, options).set.map(function(comp) {
      return comp.map(function(c) {
        return c.value;
      }).join(" ").trim().split(" ");
    });
  }
  function parseComparator(comp, options) {
    debug3("comp", comp, options);
    comp = replaceCarets(comp, options);
    debug3("caret", comp);
    comp = replaceTildes(comp, options);
    debug3("tildes", comp);
    comp = replaceXRanges(comp, options);
    debug3("xrange", comp);
    comp = replaceStars(comp, options);
    debug3("stars", comp);
    return comp;
  }
  function isX(id) {
    return !id || id.toLowerCase() === "x" || id === "*";
  }
  function replaceTildes(comp, options) {
    return comp.trim().split(/\s+/).map(function(comp2) {
      return replaceTilde(comp2, options);
    }).join(" ");
  }
  function replaceTilde(comp, options) {
    var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
    return comp.replace(r, function(_2, M, m, p, pr) {
      debug3("tilde", comp, _2, M, m, p, pr);
      var ret;
      if (isX(M)) {
        ret = "";
      } else if (isX(m)) {
        ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
      } else if (isX(p)) {
        ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
      } else if (pr) {
        debug3("replaceTilde pr", pr);
        ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
      } else {
        ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
      }
      debug3("tilde return", ret);
      return ret;
    });
  }
  function replaceCarets(comp, options) {
    return comp.trim().split(/\s+/).map(function(comp2) {
      return replaceCaret(comp2, options);
    }).join(" ");
  }
  function replaceCaret(comp, options) {
    debug3("caret", comp, options);
    var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
    return comp.replace(r, function(_2, M, m, p, pr) {
      debug3("caret", comp, _2, M, m, p, pr);
      var ret;
      if (isX(M)) {
        ret = "";
      } else if (isX(m)) {
        ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
      } else if (isX(p)) {
        if (M === "0") {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        } else {
          ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
        }
      } else if (pr) {
        debug3("replaceCaret pr", pr);
        if (M === "0") {
          if (m === "0") {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1);
          } else {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
          }
        } else {
          ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
        }
      } else {
        debug3("no pr");
        if (M === "0") {
          if (m === "0") {
            ret = ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1);
          } else {
            ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
          }
        } else {
          ret = ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
        }
      }
      debug3("caret return", ret);
      return ret;
    });
  }
  function replaceXRanges(comp, options) {
    debug3("replaceXRanges", comp, options);
    return comp.split(/\s+/).map(function(comp2) {
      return replaceXRange(comp2, options);
    }).join(" ");
  }
  function replaceXRange(comp, options) {
    comp = comp.trim();
    var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
    return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
      debug3("xRange", comp, ret, gtlt, M, m, p, pr);
      var xM = isX(M);
      var xm = xM || isX(m);
      var xp = xm || isX(p);
      var anyX = xp;
      if (gtlt === "=" && anyX) {
        gtlt = "";
      }
      pr = options.includePrerelease ? "-0" : "";
      if (xM) {
        if (gtlt === ">" || gtlt === "<") {
          ret = "<0.0.0-0";
        } else {
          ret = "*";
        }
      } else if (gtlt && anyX) {
        if (xm) {
          m = 0;
        }
        p = 0;
        if (gtlt === ">") {
          gtlt = ">=";
          if (xm) {
            M = +M + 1;
            m = 0;
            p = 0;
          } else {
            m = +m + 1;
            p = 0;
          }
        } else if (gtlt === "<=") {
          gtlt = "<";
          if (xm) {
            M = +M + 1;
          } else {
            m = +m + 1;
          }
        }
        ret = gtlt + M + "." + m + "." + p + pr;
      } else if (xm) {
        ret = ">=" + M + ".0.0" + pr + " <" + (+M + 1) + ".0.0" + pr;
      } else if (xp) {
        ret = ">=" + M + "." + m + ".0" + pr + " <" + M + "." + (+m + 1) + ".0" + pr;
      }
      debug3("xRange return", ret);
      return ret;
    });
  }
  function replaceStars(comp, options) {
    debug3("replaceStars", comp, options);
    return comp.trim().replace(re[t.STAR], "");
  }
  function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
    if (isX(fM)) {
      from = "";
    } else if (isX(fm)) {
      from = ">=" + fM + ".0.0";
    } else if (isX(fp)) {
      from = ">=" + fM + "." + fm + ".0";
    } else {
      from = ">=" + from;
    }
    if (isX(tM)) {
      to = "";
    } else if (isX(tm)) {
      to = "<" + (+tM + 1) + ".0.0";
    } else if (isX(tp)) {
      to = "<" + tM + "." + (+tm + 1) + ".0";
    } else if (tpr) {
      to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
    } else {
      to = "<=" + to;
    }
    return (from + " " + to).trim();
  }
  Range.prototype.test = function(version) {
    if (!version) {
      return false;
    }
    if (typeof version === "string") {
      try {
        version = new SemVer(version, this.options);
      } catch (er) {
        return false;
      }
    }
    for (var i2 = 0; i2 < this.set.length; i2++) {
      if (testSet(this.set[i2], version, this.options)) {
        return true;
      }
    }
    return false;
  };
  function testSet(set, version, options) {
    for (var i2 = 0; i2 < set.length; i2++) {
      if (!set[i2].test(version)) {
        return false;
      }
    }
    if (version.prerelease.length && !options.includePrerelease) {
      for (i2 = 0; i2 < set.length; i2++) {
        debug3(set[i2].semver);
        if (set[i2].semver === ANY) {
          continue;
        }
        if (set[i2].semver.prerelease.length > 0) {
          var allowed = set[i2].semver;
          if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
            return true;
          }
        }
      }
      return false;
    }
    return true;
  }
  exports2.satisfies = satisfies;
  function satisfies(version, range, options) {
    try {
      range = new Range(range, options);
    } catch (er) {
      return false;
    }
    return range.test(version);
  }
  exports2.maxSatisfying = maxSatisfying;
  function maxSatisfying(versions, range, options) {
    var max = null;
    var maxSV = null;
    try {
      var rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    versions.forEach(function(v) {
      if (rangeObj.test(v)) {
        if (!max || maxSV.compare(v) === -1) {
          max = v;
          maxSV = new SemVer(max, options);
        }
      }
    });
    return max;
  }
  exports2.minSatisfying = minSatisfying;
  function minSatisfying(versions, range, options) {
    var min = null;
    var minSV = null;
    try {
      var rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    versions.forEach(function(v) {
      if (rangeObj.test(v)) {
        if (!min || minSV.compare(v) === 1) {
          min = v;
          minSV = new SemVer(min, options);
        }
      }
    });
    return min;
  }
  exports2.minVersion = minVersion;
  function minVersion(range, loose) {
    range = new Range(range, loose);
    var minver = new SemVer("0.0.0");
    if (range.test(minver)) {
      return minver;
    }
    minver = new SemVer("0.0.0-0");
    if (range.test(minver)) {
      return minver;
    }
    minver = null;
    for (var i2 = 0; i2 < range.set.length; ++i2) {
      var comparators = range.set[i2];
      comparators.forEach(function(comparator) {
        var compver = new SemVer(comparator.semver.version);
        switch (comparator.operator) {
          case ">":
            if (compver.prerelease.length === 0) {
              compver.patch++;
            } else {
              compver.prerelease.push(0);
            }
            compver.raw = compver.format();
          case "":
          case ">=":
            if (!minver || gt(minver, compver)) {
              minver = compver;
            }
            break;
          case "<":
          case "<=":
            break;
          default:
            throw new Error("Unexpected operation: " + comparator.operator);
        }
      });
    }
    if (minver && range.test(minver)) {
      return minver;
    }
    return null;
  }
  exports2.validRange = validRange;
  function validRange(range, options) {
    try {
      return new Range(range, options).range || "*";
    } catch (er) {
      return null;
    }
  }
  exports2.ltr = ltr;
  function ltr(version, range, options) {
    return outside(version, range, "<", options);
  }
  exports2.gtr = gtr;
  function gtr(version, range, options) {
    return outside(version, range, ">", options);
  }
  exports2.outside = outside;
  function outside(version, range, hilo, options) {
    version = new SemVer(version, options);
    range = new Range(range, options);
    var gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case ">":
        gtfn = gt;
        ltefn = lte;
        ltfn = lt;
        comp = ">";
        ecomp = ">=";
        break;
      case "<":
        gtfn = lt;
        ltefn = gte;
        ltfn = gt;
        comp = "<";
        ecomp = "<=";
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies(version, range, options)) {
      return false;
    }
    for (var i2 = 0; i2 < range.set.length; ++i2) {
      var comparators = range.set[i2];
      var high = null;
      var low = null;
      comparators.forEach(function(comparator) {
        if (comparator.semver === ANY) {
          comparator = new Comparator(">=0.0.0");
        }
        high = high || comparator;
        low = low || comparator;
        if (gtfn(comparator.semver, high.semver, options)) {
          high = comparator;
        } else if (ltfn(comparator.semver, low.semver, options)) {
          low = comparator;
        }
      });
      if (high.operator === comp || high.operator === ecomp) {
        return false;
      }
      if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
        return false;
      } else if (low.operator === ecomp && ltfn(version, low.semver)) {
        return false;
      }
    }
    return true;
  }
  exports2.prerelease = prerelease;
  function prerelease(version, options) {
    var parsed = parse(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  }
  exports2.intersects = intersects;
  function intersects(r1, r2, options) {
    r1 = new Range(r1, options);
    r2 = new Range(r2, options);
    return r1.intersects(r2);
  }
  exports2.coerce = coerce;
  function coerce(version, options) {
    if (version instanceof SemVer) {
      return version;
    }
    if (typeof version === "number") {
      version = String(version);
    }
    if (typeof version !== "string") {
      return null;
    }
    options = options || {};
    var match = null;
    if (!options.rtl) {
      match = version.match(re[t.COERCE]);
    } else {
      var next;
      while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
        if (!match || next.index + next[0].length !== match.index + match[0].length) {
          match = next;
        }
        re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
      }
      re[t.COERCERTL].lastIndex = -1;
    }
    if (match === null) {
      return null;
    }
    return parse(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
  }
});

// ../../node_modules/.pnpm/make-dir@3.1.0/node_modules/make-dir/index.js
var require_make_dir = __commonJS((exports2, module3) => {
  "use strict";
  const fs17 = require("fs");
  const path19 = require("path");
  const {promisify: promisify3} = require("util");
  const semver = require_semver();
  const useNativeRecursiveOption = semver.satisfies(process.version, ">=10.12.0");
  const checkPath = (pth) => {
    if (process.platform === "win32") {
      const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path19.parse(pth).root, ""));
      if (pathHasInvalidWinCharacters) {
        const error = new Error(`Path contains invalid characters: ${pth}`);
        error.code = "EINVAL";
        throw error;
      }
    }
  };
  const processOptions = (options) => {
    const defaults = {
      mode: 511,
      fs: fs17
    };
    return {
      ...defaults,
      ...options
    };
  };
  const permissionError = (pth) => {
    const error = new Error(`operation not permitted, mkdir '${pth}'`);
    error.code = "EPERM";
    error.errno = -4048;
    error.path = pth;
    error.syscall = "mkdir";
    return error;
  };
  const makeDir = async (input, options) => {
    checkPath(input);
    options = processOptions(options);
    const mkdir = promisify3(options.fs.mkdir);
    const stat = promisify3(options.fs.stat);
    if (useNativeRecursiveOption && options.fs.mkdir === fs17.mkdir) {
      const pth = path19.resolve(input);
      await mkdir(pth, {
        mode: options.mode,
        recursive: true
      });
      return pth;
    }
    const make = async (pth) => {
      try {
        await mkdir(pth, options.mode);
        return pth;
      } catch (error) {
        if (error.code === "EPERM") {
          throw error;
        }
        if (error.code === "ENOENT") {
          if (path19.dirname(pth) === pth) {
            throw permissionError(pth);
          }
          if (error.message.includes("null bytes")) {
            throw error;
          }
          await make(path19.dirname(pth));
          return make(pth);
        }
        try {
          const stats = await stat(pth);
          if (!stats.isDirectory()) {
            throw new Error("The path is not a directory");
          }
        } catch (_2) {
          throw error;
        }
        return pth;
      }
    };
    return make(path19.resolve(input));
  };
  module3.exports = makeDir;
  module3.exports.sync = (input, options) => {
    checkPath(input);
    options = processOptions(options);
    if (useNativeRecursiveOption && options.fs.mkdirSync === fs17.mkdirSync) {
      const pth = path19.resolve(input);
      fs17.mkdirSync(pth, {
        mode: options.mode,
        recursive: true
      });
      return pth;
    }
    const make = (pth) => {
      try {
        options.fs.mkdirSync(pth, options.mode);
      } catch (error) {
        if (error.code === "EPERM") {
          throw error;
        }
        if (error.code === "ENOENT") {
          if (path19.dirname(pth) === pth) {
            throw permissionError(pth);
          }
          if (error.message.includes("null bytes")) {
            throw error;
          }
          make(path19.dirname(pth));
          return make(pth);
        }
        try {
          if (!options.fs.statSync(pth).isDirectory()) {
            throw new Error("The path is not a directory");
          }
        } catch (_2) {
          throw error;
        }
      }
      return pth;
    };
    return make(path19.resolve(input));
  };
});

// ../get-platform/dist/getPlatform.js
var require_getPlatform = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getPlatform = exports2.getOpenSSLVersion = exports2.parseOpenSSLVersion = exports2.resolveDistro = exports2.parseDistro = exports2.getos = void 0;
  const os_1 = __importDefault(require("os"));
  const fs_1 = __importDefault(require("fs"));
  const util_1 = require("util");
  const child_process_1 = require("child_process");
  const readFile2 = util_1.promisify(fs_1.default.readFile);
  const exists = util_1.promisify(fs_1.default.exists);
  async function getos() {
    const platform = os_1.default.platform();
    if (platform === "freebsd") {
      const version = await gracefulExec(`freebsd-version`);
      if (version && version.trim().length > 0) {
        const regex = /^(\d+)\.?/;
        const match = regex.exec(version);
        if (match) {
          return {
            platform: "freebsd",
            distro: `freebsd${match[1]}`
          };
        }
      }
    }
    if (platform !== "linux") {
      return {
        platform
      };
    }
    return {
      platform: "linux",
      libssl: await getOpenSSLVersion(),
      distro: await resolveDistro()
    };
  }
  exports2.getos = getos;
  function parseDistro(input) {
    const idRegex = /^ID="?([^"\n]*)"?$/im;
    const idLikeRegex = /^ID_LIKE="?([^"\n]*)"?$/im;
    const idMatch = idRegex.exec(input);
    const id = idMatch && idMatch[1] && idMatch[1].toLowerCase() || "";
    const idLikeMatch = idLikeRegex.exec(input);
    const idLike = idLikeMatch && idLikeMatch[1] && idLikeMatch[1].toLowerCase() || "";
    if (id === "raspbian") {
      return "arm";
    }
    if (id === "nixos") {
      return "nixos";
    }
    if (idLike.includes("centos") || idLike.includes("fedora") || idLike.includes("rhel") || id === "fedora") {
      return "rhel";
    }
    if (idLike.includes("debian") || idLike.includes("ubuntu") || id === "debian") {
      return "debian";
    }
    return;
  }
  exports2.parseDistro = parseDistro;
  async function resolveDistro() {
    const osReleaseFile = "/etc/os-release";
    const alpineReleaseFile = "/etc/alpine-release";
    if (await exists(alpineReleaseFile)) {
      return "musl";
    } else if (await exists(osReleaseFile)) {
      return parseDistro(await readFile2(osReleaseFile, "utf-8"));
    } else {
      return;
    }
  }
  exports2.resolveDistro = resolveDistro;
  function parseOpenSSLVersion(input) {
    const match = /^OpenSSL\s(\d+\.\d+)\.\d+/.exec(input);
    if (match) {
      return match[1] + ".x";
    }
    return;
  }
  exports2.parseOpenSSLVersion = parseOpenSSLVersion;
  async function getOpenSSLVersion() {
    const [version, ls] = await Promise.all([
      gracefulExec(`openssl version -v`),
      gracefulExec(`
      ls -l /lib64 | grep ssl;
      ls -l /usr/lib64 | grep ssl;
    `)
    ]);
    if (version) {
      const v = parseOpenSSLVersion(version);
      if (v) {
        return v;
      }
    }
    if (ls) {
      const match = /libssl\.so\.(\d+\.\d+)\.\d+/.exec(ls);
      if (match) {
        return match[1] + ".x";
      }
    }
    return void 0;
  }
  exports2.getOpenSSLVersion = getOpenSSLVersion;
  async function gracefulExec(cmd) {
    return new Promise((resolve) => {
      try {
        child_process_1.exec(cmd, (err, stdout) => {
          resolve(String(stdout));
        });
      } catch (e) {
        resolve(void 0);
        return void 0;
      }
    });
  }
  async function getPlatform3() {
    const {platform, libssl, distro} = await getos();
    if (platform === "darwin") {
      return "darwin";
    }
    if (platform === "win32") {
      return "windows";
    }
    if (platform === "freebsd") {
      return distro;
    }
    if (platform === "openbsd") {
      return "openbsd";
    }
    if (platform === "netbsd") {
      return "netbsd";
    }
    if (platform === "linux" && distro === "nixos") {
      return "linux-nixos";
    }
    if (platform === "linux" && distro === "musl") {
      return "linux-musl";
    }
    if (platform === "linux" && distro && libssl) {
      return distro + "-openssl-" + libssl;
    }
    if (libssl) {
      return "debian-openssl-" + libssl;
    }
    if (distro) {
      return distro + "-openssl-1.1.x";
    }
    return "debian-openssl-1.1.x";
  }
  exports2.getPlatform = getPlatform3;
});

// ../get-platform/dist/platforms.js
var require_platforms = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.mayBeCompatible = exports2.platforms = void 0;
  exports2.platforms = [
    "darwin",
    "debian-openssl-1.0.x",
    "debian-openssl-1.1.x",
    "rhel-openssl-1.0.x",
    "rhel-openssl-1.1.x",
    "linux-musl",
    "linux-nixos",
    "windows",
    "freebsd11",
    "freebsd12",
    "openbsd",
    "netbsd",
    "arm"
  ];
  function mayBeCompatible(platformA, platformB) {
    if (platformA.startsWith("freebsd") || platformB.startsWith("freebsd")) {
      return false;
    }
    if (platformA === "native" || platformB === "native") {
      return true;
    }
    if (platformA === "darwin" || platformB === "darwin") {
      return false;
    }
    if (platformA === "windows" || platformB === "windows") {
      return false;
    }
    return true;
  }
  exports2.mayBeCompatible = mayBeCompatible;
});

// ../get-platform/dist/index.js
var require_dist = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.platforms = exports2.mayBeCompatible = exports2.getos = exports2.getPlatform = void 0;
  var getPlatform_1 = require_getPlatform();
  Object.defineProperty(exports2, "getPlatform", {enumerable: true, get: function() {
    return getPlatform_1.getPlatform;
  }});
  Object.defineProperty(exports2, "getos", {enumerable: true, get: function() {
    return getPlatform_1.getos;
  }});
  var platforms_1 = require_platforms();
  Object.defineProperty(exports2, "mayBeCompatible", {enumerable: true, get: function() {
    return platforms_1.mayBeCompatible;
  }});
  var platforms_2 = require_platforms();
  Object.defineProperty(exports2, "platforms", {enumerable: true, get: function() {
    return platforms_2.platforms;
  }});
});

// ../../node_modules/.pnpm/ansi-escapes@4.3.1/node_modules/ansi-escapes/index.js
var require_ansi_escapes = __commonJS((exports2, module3) => {
  "use strict";
  const ansiEscapes = module3.exports;
  module3.exports.default = ansiEscapes;
  const ESC = "[";
  const OSC = "]";
  const BEL = "\x07";
  const SEP = ";";
  const isTerminalApp = process.env.TERM_PROGRAM === "Apple_Terminal";
  ansiEscapes.cursorTo = (x, y) => {
    if (typeof x !== "number") {
      throw new TypeError("The `x` argument is required");
    }
    if (typeof y !== "number") {
      return ESC + (x + 1) + "G";
    }
    return ESC + (y + 1) + ";" + (x + 1) + "H";
  };
  ansiEscapes.cursorMove = (x, y) => {
    if (typeof x !== "number") {
      throw new TypeError("The `x` argument is required");
    }
    let ret = "";
    if (x < 0) {
      ret += ESC + -x + "D";
    } else if (x > 0) {
      ret += ESC + x + "C";
    }
    if (y < 0) {
      ret += ESC + -y + "A";
    } else if (y > 0) {
      ret += ESC + y + "B";
    }
    return ret;
  };
  ansiEscapes.cursorUp = (count = 1) => ESC + count + "A";
  ansiEscapes.cursorDown = (count = 1) => ESC + count + "B";
  ansiEscapes.cursorForward = (count = 1) => ESC + count + "C";
  ansiEscapes.cursorBackward = (count = 1) => ESC + count + "D";
  ansiEscapes.cursorLeft = ESC + "G";
  ansiEscapes.cursorSavePosition = isTerminalApp ? "7" : ESC + "s";
  ansiEscapes.cursorRestorePosition = isTerminalApp ? "8" : ESC + "u";
  ansiEscapes.cursorGetPosition = ESC + "6n";
  ansiEscapes.cursorNextLine = ESC + "E";
  ansiEscapes.cursorPrevLine = ESC + "F";
  ansiEscapes.cursorHide = ESC + "?25l";
  ansiEscapes.cursorShow = ESC + "?25h";
  ansiEscapes.eraseLines = (count) => {
    let clear = "";
    for (let i = 0; i < count; i++) {
      clear += ansiEscapes.eraseLine + (i < count - 1 ? ansiEscapes.cursorUp() : "");
    }
    if (count) {
      clear += ansiEscapes.cursorLeft;
    }
    return clear;
  };
  ansiEscapes.eraseEndLine = ESC + "K";
  ansiEscapes.eraseStartLine = ESC + "1K";
  ansiEscapes.eraseLine = ESC + "2K";
  ansiEscapes.eraseDown = ESC + "J";
  ansiEscapes.eraseUp = ESC + "1J";
  ansiEscapes.eraseScreen = ESC + "2J";
  ansiEscapes.scrollUp = ESC + "S";
  ansiEscapes.scrollDown = ESC + "T";
  ansiEscapes.clearScreen = "c";
  ansiEscapes.clearTerminal = process.platform === "win32" ? `${ansiEscapes.eraseScreen}${ESC}0f` : `${ansiEscapes.eraseScreen}${ESC}3J${ESC}H`;
  ansiEscapes.beep = BEL;
  ansiEscapes.link = (text, url) => {
    return [
      OSC,
      "8",
      SEP,
      SEP,
      url,
      BEL,
      text,
      OSC,
      "8",
      SEP,
      SEP,
      BEL
    ].join("");
  };
  ansiEscapes.image = (buffer, options = {}) => {
    let ret = `${OSC}1337;File=inline=1`;
    if (options.width) {
      ret += `;width=${options.width}`;
    }
    if (options.height) {
      ret += `;height=${options.height}`;
    }
    if (options.preserveAspectRatio === false) {
      ret += ";preserveAspectRatio=0";
    }
    return ret + ":" + buffer.toString("base64") + BEL;
  };
  ansiEscapes.iTerm = {
    setCwd: (cwd = process.cwd()) => `${OSC}50;CurrentDir=${cwd}${BEL}`,
    annotation: (message, options = {}) => {
      let ret = `${OSC}1337;`;
      const hasX = typeof options.x !== "undefined";
      const hasY = typeof options.y !== "undefined";
      if ((hasX || hasY) && !(hasX && hasY && typeof options.length !== "undefined")) {
        throw new Error("`x`, `y` and `length` must be defined when `x` or `y` is defined");
      }
      message = message.replace(/\|/g, "");
      ret += options.isHidden ? "AddHiddenAnnotation=" : "AddAnnotation=";
      if (options.length > 0) {
        ret += (hasX ? [message, options.length, options.x, options.y] : [options.length, message]).join("|");
      } else {
        ret += message;
      }
      return ret + BEL;
    }
  };
});

// ../../node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js
var require_has_flag = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (flag, argv = process.argv) => {
    const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
    const position = argv.indexOf(prefix + flag);
    const terminatorPosition = argv.indexOf("--");
    return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
  };
});

// ../../node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js
var require_supports_color = __commonJS((exports2, module3) => {
  "use strict";
  const os3 = require("os");
  const tty = require("tty");
  const hasFlag = require_has_flag();
  const {env} = process;
  let forceColor;
  if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
    forceColor = 0;
  } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
    forceColor = 1;
  }
  if ("FORCE_COLOR" in env) {
    if (env.FORCE_COLOR === "true") {
      forceColor = 1;
    } else if (env.FORCE_COLOR === "false") {
      forceColor = 0;
    } else {
      forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
    }
  }
  function translateLevel(level) {
    if (level === 0) {
      return false;
    }
    return {
      level,
      hasBasic: true,
      has256: level >= 2,
      has16m: level >= 3
    };
  }
  function supportsColor(haveStream, streamIsTTY) {
    if (forceColor === 0) {
      return 0;
    }
    if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
      return 3;
    }
    if (hasFlag("color=256")) {
      return 2;
    }
    if (haveStream && !streamIsTTY && forceColor === void 0) {
      return 0;
    }
    const min = forceColor || 0;
    if (env.TERM === "dumb") {
      return min;
    }
    if (process.platform === "win32") {
      const osRelease = os3.release().split(".");
      if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
        return Number(osRelease[2]) >= 14931 ? 3 : 2;
      }
      return 1;
    }
    if ("CI" in env) {
      if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
        return 1;
      }
      return min;
    }
    if ("TEAMCITY_VERSION" in env) {
      return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    }
    if (env.COLORTERM === "truecolor") {
      return 3;
    }
    if ("TERM_PROGRAM" in env) {
      const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
      switch (env.TERM_PROGRAM) {
        case "iTerm.app":
          return version >= 3 ? 3 : 2;
        case "Apple_Terminal":
          return 2;
      }
    }
    if (/-256(color)?$/i.test(env.TERM)) {
      return 2;
    }
    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
      return 1;
    }
    if ("COLORTERM" in env) {
      return 1;
    }
    return min;
  }
  function getSupportLevel(stream) {
    const level = supportsColor(stream, stream && stream.isTTY);
    return translateLevel(level);
  }
  module3.exports = {
    supportsColor: getSupportLevel,
    stdout: translateLevel(supportsColor(true, tty.isatty(1))),
    stderr: translateLevel(supportsColor(true, tty.isatty(2)))
  };
});

// ../../node_modules/.pnpm/supports-hyperlinks@2.1.0/node_modules/supports-hyperlinks/index.js
var require_supports_hyperlinks = __commonJS((exports2, module3) => {
  "use strict";
  const supportsColor = require_supports_color();
  const hasFlag = require_has_flag();
  function parseVersion(versionString) {
    if (/^\d{3,4}$/.test(versionString)) {
      const m = /(\d{1,2})(\d{2})/.exec(versionString);
      return {
        major: 0,
        minor: parseInt(m[1], 10),
        patch: parseInt(m[2], 10)
      };
    }
    const versions = (versionString || "").split(".").map((n) => parseInt(n, 10));
    return {
      major: versions[0],
      minor: versions[1],
      patch: versions[2]
    };
  }
  function supportsHyperlink(stream) {
    const {env} = process;
    if ("FORCE_HYPERLINK" in env) {
      return !(env.FORCE_HYPERLINK.length > 0 && parseInt(env.FORCE_HYPERLINK, 10) === 0);
    }
    if (hasFlag("no-hyperlink") || hasFlag("no-hyperlinks") || hasFlag("hyperlink=false") || hasFlag("hyperlink=never")) {
      return false;
    }
    if (hasFlag("hyperlink=true") || hasFlag("hyperlink=always")) {
      return true;
    }
    if (!supportsColor.supportsColor(stream)) {
      return false;
    }
    if (stream && !stream.isTTY) {
      return false;
    }
    if (process.platform === "win32") {
      return false;
    }
    if ("CI" in env) {
      return false;
    }
    if ("TEAMCITY_VERSION" in env) {
      return false;
    }
    if ("TERM_PROGRAM" in env) {
      const version = parseVersion(env.TERM_PROGRAM_VERSION);
      switch (env.TERM_PROGRAM) {
        case "iTerm.app":
          if (version.major === 3) {
            return version.minor >= 1;
          }
          return version.major > 3;
      }
    }
    if ("VTE_VERSION" in env) {
      if (env.VTE_VERSION === "0.50.0") {
        return false;
      }
      const version = parseVersion(env.VTE_VERSION);
      return version.major > 0 || version.minor >= 50;
    }
    return false;
  }
  module3.exports = {
    supportsHyperlink,
    stdout: supportsHyperlink(process.stdout),
    stderr: supportsHyperlink(process.stderr)
  };
});

// ../../node_modules/.pnpm/terminal-link@2.1.1/node_modules/terminal-link/index.js
var require_terminal_link = __commonJS((exports2, module3) => {
  "use strict";
  const ansiEscapes = require_ansi_escapes();
  const supportsHyperlinks = require_supports_hyperlinks();
  const terminalLink = (text, url, {target = "stdout", ...options} = {}) => {
    if (!supportsHyperlinks[target]) {
      if (options.fallback === false) {
        return text;
      }
      return typeof options.fallback === "function" ? options.fallback(text, url) : `${text} (​${url}​)`;
    }
    return ansiEscapes.link(text, url);
  };
  module3.exports = (text, url, options = {}) => terminalLink(text, url, options);
  module3.exports.stderr = (text, url, options = {}) => terminalLink(text, url, {target: "stderr", ...options});
  module3.exports.isSupported = supportsHyperlinks.stdout;
  module3.exports.stderr.isSupported = supportsHyperlinks.stderr;
});

// ../../node_modules/.pnpm/new-github-issue-url@0.2.1/node_modules/new-github-issue-url/index.js
var require_new_github_issue_url = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (options = {}) => {
    let repoUrl;
    if (options.repoUrl) {
      repoUrl = options.repoUrl;
    } else if (options.user && options.repo) {
      repoUrl = `https://github.com/${options.user}/${options.repo}`;
    } else {
      throw new Error("You need to specify either the `repoUrl` option or both the `user` and `repo` options");
    }
    const url = new URL(`${repoUrl}/issues/new`);
    const types = [
      "body",
      "title",
      "labels",
      "template",
      "milestone",
      "assignee",
      "projects"
    ];
    for (const type of types) {
      let value = options[type];
      if (value === void 0) {
        continue;
      }
      if (type === "labels" || type === "projects") {
        if (!Array.isArray(value)) {
          throw new TypeError(`The \`${type}\` option should be an array`);
        }
        value = value.join(",");
      }
      url.searchParams.set(type, value);
    }
    return url.toString();
  };
  module3.exports.default = module3.exports;
});

// ../../node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js
var require_color_name = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = {
    aliceblue: [240, 248, 255],
    antiquewhite: [250, 235, 215],
    aqua: [0, 255, 255],
    aquamarine: [127, 255, 212],
    azure: [240, 255, 255],
    beige: [245, 245, 220],
    bisque: [255, 228, 196],
    black: [0, 0, 0],
    blanchedalmond: [255, 235, 205],
    blue: [0, 0, 255],
    blueviolet: [138, 43, 226],
    brown: [165, 42, 42],
    burlywood: [222, 184, 135],
    cadetblue: [95, 158, 160],
    chartreuse: [127, 255, 0],
    chocolate: [210, 105, 30],
    coral: [255, 127, 80],
    cornflowerblue: [100, 149, 237],
    cornsilk: [255, 248, 220],
    crimson: [220, 20, 60],
    cyan: [0, 255, 255],
    darkblue: [0, 0, 139],
    darkcyan: [0, 139, 139],
    darkgoldenrod: [184, 134, 11],
    darkgray: [169, 169, 169],
    darkgreen: [0, 100, 0],
    darkgrey: [169, 169, 169],
    darkkhaki: [189, 183, 107],
    darkmagenta: [139, 0, 139],
    darkolivegreen: [85, 107, 47],
    darkorange: [255, 140, 0],
    darkorchid: [153, 50, 204],
    darkred: [139, 0, 0],
    darksalmon: [233, 150, 122],
    darkseagreen: [143, 188, 143],
    darkslateblue: [72, 61, 139],
    darkslategray: [47, 79, 79],
    darkslategrey: [47, 79, 79],
    darkturquoise: [0, 206, 209],
    darkviolet: [148, 0, 211],
    deeppink: [255, 20, 147],
    deepskyblue: [0, 191, 255],
    dimgray: [105, 105, 105],
    dimgrey: [105, 105, 105],
    dodgerblue: [30, 144, 255],
    firebrick: [178, 34, 34],
    floralwhite: [255, 250, 240],
    forestgreen: [34, 139, 34],
    fuchsia: [255, 0, 255],
    gainsboro: [220, 220, 220],
    ghostwhite: [248, 248, 255],
    gold: [255, 215, 0],
    goldenrod: [218, 165, 32],
    gray: [128, 128, 128],
    green: [0, 128, 0],
    greenyellow: [173, 255, 47],
    grey: [128, 128, 128],
    honeydew: [240, 255, 240],
    hotpink: [255, 105, 180],
    indianred: [205, 92, 92],
    indigo: [75, 0, 130],
    ivory: [255, 255, 240],
    khaki: [240, 230, 140],
    lavender: [230, 230, 250],
    lavenderblush: [255, 240, 245],
    lawngreen: [124, 252, 0],
    lemonchiffon: [255, 250, 205],
    lightblue: [173, 216, 230],
    lightcoral: [240, 128, 128],
    lightcyan: [224, 255, 255],
    lightgoldenrodyellow: [250, 250, 210],
    lightgray: [211, 211, 211],
    lightgreen: [144, 238, 144],
    lightgrey: [211, 211, 211],
    lightpink: [255, 182, 193],
    lightsalmon: [255, 160, 122],
    lightseagreen: [32, 178, 170],
    lightskyblue: [135, 206, 250],
    lightslategray: [119, 136, 153],
    lightslategrey: [119, 136, 153],
    lightsteelblue: [176, 196, 222],
    lightyellow: [255, 255, 224],
    lime: [0, 255, 0],
    limegreen: [50, 205, 50],
    linen: [250, 240, 230],
    magenta: [255, 0, 255],
    maroon: [128, 0, 0],
    mediumaquamarine: [102, 205, 170],
    mediumblue: [0, 0, 205],
    mediumorchid: [186, 85, 211],
    mediumpurple: [147, 112, 219],
    mediumseagreen: [60, 179, 113],
    mediumslateblue: [123, 104, 238],
    mediumspringgreen: [0, 250, 154],
    mediumturquoise: [72, 209, 204],
    mediumvioletred: [199, 21, 133],
    midnightblue: [25, 25, 112],
    mintcream: [245, 255, 250],
    mistyrose: [255, 228, 225],
    moccasin: [255, 228, 181],
    navajowhite: [255, 222, 173],
    navy: [0, 0, 128],
    oldlace: [253, 245, 230],
    olive: [128, 128, 0],
    olivedrab: [107, 142, 35],
    orange: [255, 165, 0],
    orangered: [255, 69, 0],
    orchid: [218, 112, 214],
    palegoldenrod: [238, 232, 170],
    palegreen: [152, 251, 152],
    paleturquoise: [175, 238, 238],
    palevioletred: [219, 112, 147],
    papayawhip: [255, 239, 213],
    peachpuff: [255, 218, 185],
    peru: [205, 133, 63],
    pink: [255, 192, 203],
    plum: [221, 160, 221],
    powderblue: [176, 224, 230],
    purple: [128, 0, 128],
    rebeccapurple: [102, 51, 153],
    red: [255, 0, 0],
    rosybrown: [188, 143, 143],
    royalblue: [65, 105, 225],
    saddlebrown: [139, 69, 19],
    salmon: [250, 128, 114],
    sandybrown: [244, 164, 96],
    seagreen: [46, 139, 87],
    seashell: [255, 245, 238],
    sienna: [160, 82, 45],
    silver: [192, 192, 192],
    skyblue: [135, 206, 235],
    slateblue: [106, 90, 205],
    slategray: [112, 128, 144],
    slategrey: [112, 128, 144],
    snow: [255, 250, 250],
    springgreen: [0, 255, 127],
    steelblue: [70, 130, 180],
    tan: [210, 180, 140],
    teal: [0, 128, 128],
    thistle: [216, 191, 216],
    tomato: [255, 99, 71],
    turquoise: [64, 224, 208],
    violet: [238, 130, 238],
    wheat: [245, 222, 179],
    white: [255, 255, 255],
    whitesmoke: [245, 245, 245],
    yellow: [255, 255, 0],
    yellowgreen: [154, 205, 50]
  };
});

// ../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/conversions.js
var require_conversions = __commonJS((exports2, module3) => {
  const cssKeywords = require_color_name();
  const reverseKeywords = {};
  for (const key of Object.keys(cssKeywords)) {
    reverseKeywords[cssKeywords[key]] = key;
  }
  const convert = {
    rgb: {channels: 3, labels: "rgb"},
    hsl: {channels: 3, labels: "hsl"},
    hsv: {channels: 3, labels: "hsv"},
    hwb: {channels: 3, labels: "hwb"},
    cmyk: {channels: 4, labels: "cmyk"},
    xyz: {channels: 3, labels: "xyz"},
    lab: {channels: 3, labels: "lab"},
    lch: {channels: 3, labels: "lch"},
    hex: {channels: 1, labels: ["hex"]},
    keyword: {channels: 1, labels: ["keyword"]},
    ansi16: {channels: 1, labels: ["ansi16"]},
    ansi256: {channels: 1, labels: ["ansi256"]},
    hcg: {channels: 3, labels: ["h", "c", "g"]},
    apple: {channels: 3, labels: ["r16", "g16", "b16"]},
    gray: {channels: 1, labels: ["gray"]}
  };
  module3.exports = convert;
  for (const model of Object.keys(convert)) {
    if (!("channels" in convert[model])) {
      throw new Error("missing channels property: " + model);
    }
    if (!("labels" in convert[model])) {
      throw new Error("missing channel labels property: " + model);
    }
    if (convert[model].labels.length !== convert[model].channels) {
      throw new Error("channel and label counts mismatch: " + model);
    }
    const {channels, labels} = convert[model];
    delete convert[model].channels;
    delete convert[model].labels;
    Object.defineProperty(convert[model], "channels", {value: channels});
    Object.defineProperty(convert[model], "labels", {value: labels});
  }
  convert.rgb.hsl = function(rgb) {
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const min = Math.min(r, g, b);
    const max = Math.max(r, g, b);
    const delta = max - min;
    let h;
    let s;
    if (max === min) {
      h = 0;
    } else if (r === max) {
      h = (g - b) / delta;
    } else if (g === max) {
      h = 2 + (b - r) / delta;
    } else if (b === max) {
      h = 4 + (r - g) / delta;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
      h += 360;
    }
    const l = (min + max) / 2;
    if (max === min) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta / (max + min);
    } else {
      s = delta / (2 - max - min);
    }
    return [h, s * 100, l * 100];
  };
  convert.rgb.hsv = function(rgb) {
    let rdif;
    let gdif;
    let bdif;
    let h;
    let s;
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const v = Math.max(r, g, b);
    const diff = v - Math.min(r, g, b);
    const diffc = function(c) {
      return (v - c) / 6 / diff + 1 / 2;
    };
    if (diff === 0) {
      h = 0;
      s = 0;
    } else {
      s = diff / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);
      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 1 / 3 + rdif - bdif;
      } else if (b === v) {
        h = 2 / 3 + gdif - rdif;
      }
      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }
    return [
      h * 360,
      s * 100,
      v * 100
    ];
  };
  convert.rgb.hwb = function(rgb) {
    const r = rgb[0];
    const g = rgb[1];
    let b = rgb[2];
    const h = convert.rgb.hsl(rgb)[0];
    const w = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [h, w * 100, b * 100];
  };
  convert.rgb.cmyk = function(rgb) {
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const k = Math.min(1 - r, 1 - g, 1 - b);
    const c = (1 - r - k) / (1 - k) || 0;
    const m = (1 - g - k) / (1 - k) || 0;
    const y = (1 - b - k) / (1 - k) || 0;
    return [c * 100, m * 100, y * 100, k * 100];
  };
  function comparativeDistance(x, y) {
    return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
  }
  convert.rgb.keyword = function(rgb) {
    const reversed = reverseKeywords[rgb];
    if (reversed) {
      return reversed;
    }
    let currentClosestDistance = Infinity;
    let currentClosestKeyword;
    for (const keyword of Object.keys(cssKeywords)) {
      const value = cssKeywords[keyword];
      const distance = comparativeDistance(rgb, value);
      if (distance < currentClosestDistance) {
        currentClosestDistance = distance;
        currentClosestKeyword = keyword;
      }
    }
    return currentClosestKeyword;
  };
  convert.keyword.rgb = function(keyword) {
    return cssKeywords[keyword];
  };
  convert.rgb.xyz = function(rgb) {
    let r = rgb[0] / 255;
    let g = rgb[1] / 255;
    let b = rgb[2] / 255;
    r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
    g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
    b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
    const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x * 100, y * 100, z * 100];
  };
  convert.rgb.lab = function(rgb) {
    const xyz = convert.rgb.xyz(rgb);
    let x = xyz[0];
    let y = xyz[1];
    let z = xyz[2];
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
    y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
    const l = 116 * y - 16;
    const a = 500 * (x - y);
    const b = 200 * (y - z);
    return [l, a, b];
  };
  convert.hsl.rgb = function(hsl) {
    const h = hsl[0] / 360;
    const s = hsl[1] / 100;
    const l = hsl[2] / 100;
    let t2;
    let t3;
    let val;
    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }
    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }
    const t1 = 2 * l - t2;
    const rgb = [0, 0, 0];
    for (let i = 0; i < 3; i++) {
      t3 = h + 1 / 3 * -(i - 1);
      if (t3 < 0) {
        t3++;
      }
      if (t3 > 1) {
        t3--;
      }
      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
      } else {
        val = t1;
      }
      rgb[i] = val * 255;
    }
    return rgb;
  };
  convert.hsl.hsv = function(hsl) {
    const h = hsl[0];
    let s = hsl[1] / 100;
    let l = hsl[2] / 100;
    let smin = s;
    const lmin = Math.max(l, 0.01);
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    const v = (l + s) / 2;
    const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };
  convert.hsv.rgb = function(hsv) {
    const h = hsv[0] / 60;
    const s = hsv[1] / 100;
    let v = hsv[2] / 100;
    const hi = Math.floor(h) % 6;
    const f = h - Math.floor(h);
    const p = 255 * v * (1 - s);
    const q = 255 * v * (1 - s * f);
    const t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (hi) {
      case 0:
        return [v, t, p];
      case 1:
        return [q, v, p];
      case 2:
        return [p, v, t];
      case 3:
        return [p, q, v];
      case 4:
        return [t, p, v];
      case 5:
        return [v, p, q];
    }
  };
  convert.hsv.hsl = function(hsv) {
    const h = hsv[0];
    const s = hsv[1] / 100;
    const v = hsv[2] / 100;
    const vmin = Math.max(v, 0.01);
    let sl;
    let l;
    l = (2 - s) * v;
    const lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };
  convert.hwb.rgb = function(hwb) {
    const h = hwb[0] / 360;
    let wh = hwb[1] / 100;
    let bl = hwb[2] / 100;
    const ratio = wh + bl;
    let f;
    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }
    const i = Math.floor(6 * h);
    const v = 1 - bl;
    f = 6 * h - i;
    if ((i & 1) !== 0) {
      f = 1 - f;
    }
    const n = wh + f * (v - wh);
    let r;
    let g;
    let b;
    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;
      case 1:
        r = n;
        g = v;
        b = wh;
        break;
      case 2:
        r = wh;
        g = v;
        b = n;
        break;
      case 3:
        r = wh;
        g = n;
        b = v;
        break;
      case 4:
        r = n;
        g = wh;
        b = v;
        break;
      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }
    return [r * 255, g * 255, b * 255];
  };
  convert.cmyk.rgb = function(cmyk) {
    const c = cmyk[0] / 100;
    const m = cmyk[1] / 100;
    const y = cmyk[2] / 100;
    const k = cmyk[3] / 100;
    const r = 1 - Math.min(1, c * (1 - k) + k);
    const g = 1 - Math.min(1, m * (1 - k) + k);
    const b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.rgb = function(xyz) {
    const x = xyz[0] / 100;
    const y = xyz[1] / 100;
    const z = xyz[2] / 100;
    let r;
    let g;
    let b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.204 + z * 1.057;
    r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
    g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
    b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.lab = function(xyz) {
    let x = xyz[0];
    let y = xyz[1];
    let z = xyz[2];
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
    y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
    const l = 116 * y - 16;
    const a = 500 * (x - y);
    const b = 200 * (y - z);
    return [l, a, b];
  };
  convert.lab.xyz = function(lab) {
    const l = lab[0];
    const a = lab[1];
    const b = lab[2];
    let x;
    let y;
    let z;
    y = (l + 16) / 116;
    x = a / 500 + y;
    z = y - b / 200;
    const y2 = y ** 3;
    const x2 = x ** 3;
    const z2 = z ** 3;
    y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
    x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
    z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
    x *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x, y, z];
  };
  convert.lab.lch = function(lab) {
    const l = lab[0];
    const a = lab[1];
    const b = lab[2];
    let h;
    const hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
      h += 360;
    }
    const c = Math.sqrt(a * a + b * b);
    return [l, c, h];
  };
  convert.lch.lab = function(lch) {
    const l = lch[0];
    const c = lch[1];
    const h = lch[2];
    const hr = h / 360 * 2 * Math.PI;
    const a = c * Math.cos(hr);
    const b = c * Math.sin(hr);
    return [l, a, b];
  };
  convert.rgb.ansi16 = function(args2, saturation = null) {
    const [r, g, b] = args2;
    let value = saturation === null ? convert.rgb.hsv(args2)[2] : saturation;
    value = Math.round(value / 50);
    if (value === 0) {
      return 30;
    }
    let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value === 2) {
      ansi += 60;
    }
    return ansi;
  };
  convert.hsv.ansi16 = function(args2) {
    return convert.rgb.ansi16(convert.hsv.rgb(args2), args2[2]);
  };
  convert.rgb.ansi256 = function(args2) {
    const r = args2[0];
    const g = args2[1];
    const b = args2[2];
    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }
      if (r > 248) {
        return 231;
      }
      return Math.round((r - 8) / 247 * 24) + 232;
    }
    const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
  };
  convert.ansi16.rgb = function(args2) {
    let color = args2 % 10;
    if (color === 0 || color === 7) {
      if (args2 > 50) {
        color += 3.5;
      }
      color = color / 10.5 * 255;
      return [color, color, color];
    }
    const mult = (~~(args2 > 50) + 1) * 0.5;
    const r = (color & 1) * mult * 255;
    const g = (color >> 1 & 1) * mult * 255;
    const b = (color >> 2 & 1) * mult * 255;
    return [r, g, b];
  };
  convert.ansi256.rgb = function(args2) {
    if (args2 >= 232) {
      const c = (args2 - 232) * 10 + 8;
      return [c, c, c];
    }
    args2 -= 16;
    let rem;
    const r = Math.floor(args2 / 36) / 5 * 255;
    const g = Math.floor((rem = args2 % 36) / 6) / 5 * 255;
    const b = rem % 6 / 5 * 255;
    return [r, g, b];
  };
  convert.rgb.hex = function(args2) {
    const integer = ((Math.round(args2[0]) & 255) << 16) + ((Math.round(args2[1]) & 255) << 8) + (Math.round(args2[2]) & 255);
    const string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert.hex.rgb = function(args2) {
    const match = args2.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
      return [0, 0, 0];
    }
    let colorString = match[0];
    if (match[0].length === 3) {
      colorString = colorString.split("").map((char) => {
        return char + char;
      }).join("");
    }
    const integer = parseInt(colorString, 16);
    const r = integer >> 16 & 255;
    const g = integer >> 8 & 255;
    const b = integer & 255;
    return [r, g, b];
  };
  convert.rgb.hcg = function(rgb) {
    const r = rgb[0] / 255;
    const g = rgb[1] / 255;
    const b = rgb[2] / 255;
    const max = Math.max(Math.max(r, g), b);
    const min = Math.min(Math.min(r, g), b);
    const chroma = max - min;
    let grayscale;
    let hue;
    if (chroma < 1) {
      grayscale = min / (1 - chroma);
    } else {
      grayscale = 0;
    }
    if (chroma <= 0) {
      hue = 0;
    } else if (max === r) {
      hue = (g - b) / chroma % 6;
    } else if (max === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma;
    }
    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };
  convert.hsl.hcg = function(hsl) {
    const s = hsl[1] / 100;
    const l = hsl[2] / 100;
    const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
    let f = 0;
    if (c < 1) {
      f = (l - 0.5 * c) / (1 - c);
    }
    return [hsl[0], c * 100, f * 100];
  };
  convert.hsv.hcg = function(hsv) {
    const s = hsv[1] / 100;
    const v = hsv[2] / 100;
    const c = s * v;
    let f = 0;
    if (c < 1) {
      f = (v - c) / (1 - c);
    }
    return [hsv[0], c * 100, f * 100];
  };
  convert.hcg.rgb = function(hcg) {
    const h = hcg[0] / 360;
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    if (c === 0) {
      return [g * 255, g * 255, g * 255];
    }
    const pure = [0, 0, 0];
    const hi = h % 1 * 6;
    const v = hi % 1;
    const w = 1 - v;
    let mg = 0;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;
      case 1:
        pure[0] = w;
        pure[1] = 1;
        pure[2] = 0;
        break;
      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;
      case 3:
        pure[0] = 0;
        pure[1] = w;
        pure[2] = 1;
        break;
      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;
      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w;
    }
    mg = (1 - c) * g;
    return [
      (c * pure[0] + mg) * 255,
      (c * pure[1] + mg) * 255,
      (c * pure[2] + mg) * 255
    ];
  };
  convert.hcg.hsv = function(hcg) {
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    const v = c + g * (1 - c);
    let f = 0;
    if (v > 0) {
      f = c / v;
    }
    return [hcg[0], f * 100, v * 100];
  };
  convert.hcg.hsl = function(hcg) {
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    const l = g * (1 - c) + 0.5 * c;
    let s = 0;
    if (l > 0 && l < 0.5) {
      s = c / (2 * l);
    } else if (l >= 0.5 && l < 1) {
      s = c / (2 * (1 - l));
    }
    return [hcg[0], s * 100, l * 100];
  };
  convert.hcg.hwb = function(hcg) {
    const c = hcg[1] / 100;
    const g = hcg[2] / 100;
    const v = c + g * (1 - c);
    return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };
  convert.hwb.hcg = function(hwb) {
    const w = hwb[1] / 100;
    const b = hwb[2] / 100;
    const v = 1 - b;
    const c = v - w;
    let g = 0;
    if (c < 1) {
      g = (v - c) / (1 - c);
    }
    return [hwb[0], c * 100, g * 100];
  };
  convert.apple.rgb = function(apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };
  convert.rgb.apple = function(rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };
  convert.gray.rgb = function(args2) {
    return [args2[0] / 100 * 255, args2[0] / 100 * 255, args2[0] / 100 * 255];
  };
  convert.gray.hsl = function(args2) {
    return [0, 0, args2[0]];
  };
  convert.gray.hsv = convert.gray.hsl;
  convert.gray.hwb = function(gray) {
    return [0, 100, gray[0]];
  };
  convert.gray.cmyk = function(gray) {
    return [0, 0, 0, gray[0]];
  };
  convert.gray.lab = function(gray) {
    return [gray[0], 0, 0];
  };
  convert.gray.hex = function(gray) {
    const val = Math.round(gray[0] / 100 * 255) & 255;
    const integer = (val << 16) + (val << 8) + val;
    const string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert.rgb.gray = function(rgb) {
    const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
});

// ../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/route.js
var require_route = __commonJS((exports2, module3) => {
  const conversions = require_conversions();
  function buildGraph() {
    const graph = {};
    const models = Object.keys(conversions);
    for (let len = models.length, i = 0; i < len; i++) {
      graph[models[i]] = {
        distance: -1,
        parent: null
      };
    }
    return graph;
  }
  function deriveBFS(fromModel) {
    const graph = buildGraph();
    const queue = [fromModel];
    graph[fromModel].distance = 0;
    while (queue.length) {
      const current = queue.pop();
      const adjacents = Object.keys(conversions[current]);
      for (let len = adjacents.length, i = 0; i < len; i++) {
        const adjacent = adjacents[i];
        const node = graph[adjacent];
        if (node.distance === -1) {
          node.distance = graph[current].distance + 1;
          node.parent = current;
          queue.unshift(adjacent);
        }
      }
    }
    return graph;
  }
  function link5(from, to) {
    return function(args2) {
      return to(from(args2));
    };
  }
  function wrapConversion(toModel, graph) {
    const path19 = [graph[toModel].parent, toModel];
    let fn = conversions[graph[toModel].parent][toModel];
    let cur = graph[toModel].parent;
    while (graph[cur].parent) {
      path19.unshift(graph[cur].parent);
      fn = link5(conversions[graph[cur].parent][cur], fn);
      cur = graph[cur].parent;
    }
    fn.conversion = path19;
    return fn;
  }
  module3.exports = function(fromModel) {
    const graph = deriveBFS(fromModel);
    const conversion = {};
    const models = Object.keys(graph);
    for (let len = models.length, i = 0; i < len; i++) {
      const toModel = models[i];
      const node = graph[toModel];
      if (node.parent === null) {
        continue;
      }
      conversion[toModel] = wrapConversion(toModel, graph);
    }
    return conversion;
  };
});

// ../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/index.js
var require_color_convert = __commonJS((exports2, module3) => {
  const conversions = require_conversions();
  const route = require_route();
  const convert = {};
  const models = Object.keys(conversions);
  function wrapRaw(fn) {
    const wrappedFn = function(...args2) {
      const arg0 = args2[0];
      if (arg0 === void 0 || arg0 === null) {
        return arg0;
      }
      if (arg0.length > 1) {
        args2 = arg0;
      }
      return fn(args2);
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  function wrapRounded(fn) {
    const wrappedFn = function(...args2) {
      const arg0 = args2[0];
      if (arg0 === void 0 || arg0 === null) {
        return arg0;
      }
      if (arg0.length > 1) {
        args2 = arg0;
      }
      const result = fn(args2);
      if (typeof result === "object") {
        for (let len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }
      return result;
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  models.forEach((fromModel) => {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], "channels", {value: conversions[fromModel].channels});
    Object.defineProperty(convert[fromModel], "labels", {value: conversions[fromModel].labels});
    const routes = route(fromModel);
    const routeModels = Object.keys(routes);
    routeModels.forEach((toModel) => {
      const fn = routes[toModel];
      convert[fromModel][toModel] = wrapRounded(fn);
      convert[fromModel][toModel].raw = wrapRaw(fn);
    });
  });
  module3.exports = convert;
});

// ../../node_modules/.pnpm/ansi-styles@4.3.0/node_modules/ansi-styles/index.js
var require_ansi_styles = __commonJS((exports2, module3) => {
  "use strict";
  const wrapAnsi16 = (fn, offset) => (...args2) => {
    const code = fn(...args2);
    return `[${code + offset}m`;
  };
  const wrapAnsi256 = (fn, offset) => (...args2) => {
    const code = fn(...args2);
    return `[${38 + offset};5;${code}m`;
  };
  const wrapAnsi16m = (fn, offset) => (...args2) => {
    const rgb = fn(...args2);
    return `[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
  };
  const ansi2ansi = (n) => n;
  const rgb2rgb = (r, g, b) => [r, g, b];
  const setLazyProperty = (object, property, get) => {
    Object.defineProperty(object, property, {
      get: () => {
        const value = get();
        Object.defineProperty(object, property, {
          value,
          enumerable: true,
          configurable: true
        });
        return value;
      },
      enumerable: true,
      configurable: true
    });
  };
  let colorConvert;
  const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
    if (colorConvert === void 0) {
      colorConvert = require_color_convert();
    }
    const offset = isBackground ? 10 : 0;
    const styles = {};
    for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
      const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
      if (sourceSpace === targetSpace) {
        styles[name] = wrap(identity, offset);
      } else if (typeof suite === "object") {
        styles[name] = wrap(suite[targetSpace], offset);
      }
    }
    return styles;
  };
  function assembleStyles() {
    const codes = new Map();
    const styles = {
      modifier: {
        reset: [0, 0],
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        blackBright: [90, 39],
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    styles.color.gray = styles.color.blackBright;
    styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
    styles.color.grey = styles.color.blackBright;
    styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
    for (const [groupName, group] of Object.entries(styles)) {
      for (const [styleName, style] of Object.entries(group)) {
        styles[styleName] = {
          open: `[${style[0]}m`,
          close: `[${style[1]}m`
        };
        group[styleName] = styles[styleName];
        codes.set(style[0], style[1]);
      }
      Object.defineProperty(styles, groupName, {
        value: group,
        enumerable: false
      });
    }
    Object.defineProperty(styles, "codes", {
      value: codes,
      enumerable: false
    });
    styles.color.close = "[39m";
    styles.bgColor.close = "[49m";
    setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
    setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
    setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
    setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
    setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
    setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
    return styles;
  }
  Object.defineProperty(module3, "exports", {
    enumerable: true,
    get: assembleStyles
  });
});

// ../../node_modules/.pnpm/chalk@4.1.0/node_modules/chalk/source/util.js
var require_util = __commonJS((exports2, module3) => {
  "use strict";
  const stringReplaceAll = (string, substring, replacer) => {
    let index = string.indexOf(substring);
    if (index === -1) {
      return string;
    }
    const substringLength = substring.length;
    let endIndex = 0;
    let returnValue = "";
    do {
      returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
      endIndex = index + substringLength;
      index = string.indexOf(substring, endIndex);
    } while (index !== -1);
    returnValue += string.substr(endIndex);
    return returnValue;
  };
  const stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {
    let endIndex = 0;
    let returnValue = "";
    do {
      const gotCR = string[index - 1] === "\r";
      returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
      endIndex = index + 1;
      index = string.indexOf("\n", endIndex);
    } while (index !== -1);
    returnValue += string.substr(endIndex);
    return returnValue;
  };
  module3.exports = {
    stringReplaceAll,
    stringEncaseCRLFWithFirstIndex
  };
});

// ../../node_modules/.pnpm/chalk@4.1.0/node_modules/chalk/source/templates.js
var require_templates = __commonJS((exports2, module3) => {
  "use strict";
  const TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
  const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
  const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
  const ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
  const ESCAPES = new Map([
    ["n", "\n"],
    ["r", "\r"],
    ["t", "	"],
    ["b", "\b"],
    ["f", "\f"],
    ["v", "\v"],
    ["0", "\0"],
    ["\\", "\\"],
    ["e", ""],
    ["a", "\x07"]
  ]);
  function unescape2(c) {
    const u = c[0] === "u";
    const bracket = c[1] === "{";
    if (u && !bracket && c.length === 5 || c[0] === "x" && c.length === 3) {
      return String.fromCharCode(parseInt(c.slice(1), 16));
    }
    if (u && bracket) {
      return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
    }
    return ESCAPES.get(c) || c;
  }
  function parseArguments(name, arguments_) {
    const results = [];
    const chunks = arguments_.trim().split(/\s*,\s*/g);
    let matches;
    for (const chunk of chunks) {
      const number = Number(chunk);
      if (!Number.isNaN(number)) {
        results.push(number);
      } else if (matches = chunk.match(STRING_REGEX)) {
        results.push(matches[2].replace(ESCAPE_REGEX, (m, escape2, character) => escape2 ? unescape2(escape2) : character));
      } else {
        throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
      }
    }
    return results;
  }
  function parseStyle(style) {
    STYLE_REGEX.lastIndex = 0;
    const results = [];
    let matches;
    while ((matches = STYLE_REGEX.exec(style)) !== null) {
      const name = matches[1];
      if (matches[2]) {
        const args2 = parseArguments(name, matches[2]);
        results.push([name].concat(args2));
      } else {
        results.push([name]);
      }
    }
    return results;
  }
  function buildStyle(chalk27, styles) {
    const enabled = {};
    for (const layer of styles) {
      for (const style of layer.styles) {
        enabled[style[0]] = layer.inverse ? null : style.slice(1);
      }
    }
    let current = chalk27;
    for (const [styleName, styles2] of Object.entries(enabled)) {
      if (!Array.isArray(styles2)) {
        continue;
      }
      if (!(styleName in current)) {
        throw new Error(`Unknown Chalk style: ${styleName}`);
      }
      current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
    }
    return current;
  }
  module3.exports = (chalk27, temporary) => {
    const styles = [];
    const chunks = [];
    let chunk = [];
    temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
      if (escapeCharacter) {
        chunk.push(unescape2(escapeCharacter));
      } else if (style) {
        const string = chunk.join("");
        chunk = [];
        chunks.push(styles.length === 0 ? string : buildStyle(chalk27, styles)(string));
        styles.push({inverse, styles: parseStyle(style)});
      } else if (close) {
        if (styles.length === 0) {
          throw new Error("Found extraneous } in Chalk template literal");
        }
        chunks.push(buildStyle(chalk27, styles)(chunk.join("")));
        chunk = [];
        styles.pop();
      } else {
        chunk.push(character);
      }
    });
    chunks.push(chunk.join(""));
    if (styles.length > 0) {
      const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
      throw new Error(errMessage);
    }
    return chunks.join("");
  };
});

// ../../node_modules/.pnpm/chalk@4.1.0/node_modules/chalk/source/index.js
var require_source = __commonJS((exports2, module3) => {
  "use strict";
  const ansiStyles = require_ansi_styles();
  const {stdout: stdoutColor, stderr: stderrColor} = require_supports_color();
  const {
    stringReplaceAll,
    stringEncaseCRLFWithFirstIndex
  } = require_util();
  const {isArray} = Array;
  const levelMapping = [
    "ansi",
    "ansi",
    "ansi256",
    "ansi16m"
  ];
  const styles = Object.create(null);
  const applyOptions = (object, options = {}) => {
    if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
      throw new Error("The `level` option should be an integer from 0 to 3");
    }
    const colorLevel = stdoutColor ? stdoutColor.level : 0;
    object.level = options.level === void 0 ? colorLevel : options.level;
  };
  class ChalkClass {
    constructor(options) {
      return chalkFactory(options);
    }
  }
  const chalkFactory = (options) => {
    const chalk28 = {};
    applyOptions(chalk28, options);
    chalk28.template = (...arguments_) => chalkTag(chalk28.template, ...arguments_);
    Object.setPrototypeOf(chalk28, Chalk.prototype);
    Object.setPrototypeOf(chalk28.template, chalk28);
    chalk28.template.constructor = () => {
      throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
    };
    chalk28.template.Instance = ChalkClass;
    return chalk28.template;
  };
  function Chalk(options) {
    return chalkFactory(options);
  }
  for (const [styleName, style] of Object.entries(ansiStyles)) {
    styles[styleName] = {
      get() {
        const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
        Object.defineProperty(this, styleName, {value: builder});
        return builder;
      }
    };
  }
  styles.visible = {
    get() {
      const builder = createBuilder(this, this._styler, true);
      Object.defineProperty(this, "visible", {value: builder});
      return builder;
    }
  };
  const usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
  for (const model of usedModels) {
    styles[model] = {
      get() {
        const {level} = this;
        return function(...arguments_) {
          const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
          return createBuilder(this, styler, this._isEmpty);
        };
      }
    };
  }
  for (const model of usedModels) {
    const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
    styles[bgModel] = {
      get() {
        const {level} = this;
        return function(...arguments_) {
          const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
          return createBuilder(this, styler, this._isEmpty);
        };
      }
    };
  }
  const proto = Object.defineProperties(() => {
  }, {
    ...styles,
    level: {
      enumerable: true,
      get() {
        return this._generator.level;
      },
      set(level) {
        this._generator.level = level;
      }
    }
  });
  const createStyler = (open3, close, parent) => {
    let openAll;
    let closeAll;
    if (parent === void 0) {
      openAll = open3;
      closeAll = close;
    } else {
      openAll = parent.openAll + open3;
      closeAll = close + parent.closeAll;
    }
    return {
      open: open3,
      close,
      openAll,
      closeAll,
      parent
    };
  };
  const createBuilder = (self2, _styler, _isEmpty) => {
    const builder = (...arguments_) => {
      if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
        return applyStyle(builder, chalkTag(builder, ...arguments_));
      }
      return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
    };
    Object.setPrototypeOf(builder, proto);
    builder._generator = self2;
    builder._styler = _styler;
    builder._isEmpty = _isEmpty;
    return builder;
  };
  const applyStyle = (self2, string) => {
    if (self2.level <= 0 || !string) {
      return self2._isEmpty ? "" : string;
    }
    let styler = self2._styler;
    if (styler === void 0) {
      return string;
    }
    const {openAll, closeAll} = styler;
    if (string.indexOf("") !== -1) {
      while (styler !== void 0) {
        string = stringReplaceAll(string, styler.close, styler.open);
        styler = styler.parent;
      }
    }
    const lfIndex = string.indexOf("\n");
    if (lfIndex !== -1) {
      string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
    }
    return openAll + string + closeAll;
  };
  let template;
  const chalkTag = (chalk28, ...strings) => {
    const [firstString] = strings;
    if (!isArray(firstString) || !isArray(firstString.raw)) {
      return strings.join(" ");
    }
    const arguments_ = strings.slice(1);
    const parts = [firstString.raw[0]];
    for (let i = 1; i < firstString.length; i++) {
      parts.push(String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"), String(firstString.raw[i]));
    }
    if (template === void 0) {
      template = require_templates();
    }
    return template(chalk28, parts.join(""));
  };
  Object.defineProperties(Chalk.prototype, styles);
  const chalk27 = Chalk();
  chalk27.supportsColor = stdoutColor;
  chalk27.stderr = Chalk({level: stderrColor ? stderrColor.level : 0});
  chalk27.stderr.supportsColor = stderrColor;
  module3.exports = chalk27;
});

// ../../node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js
var require_ms = __commonJS((exports2, module3) => {
  var s = 1e3;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;
  module3.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "weeks":
      case "week":
      case "w":
        return n * w;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return void 0;
    }
  }
  function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return Math.round(ms / d) + "d";
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + "h";
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + "m";
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  }
  function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return plural(ms, msAbs, d, "day");
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, "hour");
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, "minute");
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, "second");
    }
    return ms + " ms";
  }
  function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
  }
});

// ../../node_modules/.pnpm/debug@4.1.1/node_modules/debug/src/common.js
var require_common = __commonJS((exports2, module3) => {
  function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = require_ms();
    Object.keys(env).forEach((key) => {
      createDebug[key] = env[key];
    });
    createDebug.instances = [];
    createDebug.names = [];
    createDebug.skips = [];
    createDebug.formatters = {};
    function selectColor(namespace) {
      let hash = 0;
      for (let i = 0; i < namespace.length; i++) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0;
      }
      return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    function createDebug(namespace) {
      let prevTime;
      function debug3(...args2) {
        if (!debug3.enabled) {
          return;
        }
        const self2 = debug3;
        const curr = Number(new Date());
        const ms = curr - (prevTime || curr);
        self2.diff = ms;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        args2[0] = createDebug.coerce(args2[0]);
        if (typeof args2[0] !== "string") {
          args2.unshift("%O");
        }
        let index = 0;
        args2[0] = args2[0].replace(/%([a-zA-Z%])/g, (match, format11) => {
          if (match === "%%") {
            return match;
          }
          index++;
          const formatter = createDebug.formatters[format11];
          if (typeof formatter === "function") {
            const val = args2[index];
            match = formatter.call(self2, val);
            args2.splice(index, 1);
            index--;
          }
          return match;
        });
        createDebug.formatArgs.call(self2, args2);
        const logFn = self2.log || createDebug.log;
        logFn.apply(self2, args2);
      }
      debug3.namespace = namespace;
      debug3.enabled = createDebug.enabled(namespace);
      debug3.useColors = createDebug.useColors();
      debug3.color = selectColor(namespace);
      debug3.destroy = destroy;
      debug3.extend = extend;
      if (typeof createDebug.init === "function") {
        createDebug.init(debug3);
      }
      createDebug.instances.push(debug3);
      return debug3;
    }
    function destroy() {
      const index = createDebug.instances.indexOf(this);
      if (index !== -1) {
        createDebug.instances.splice(index, 1);
        return true;
      }
      return false;
    }
    function extend(namespace, delimiter) {
      const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.names = [];
      createDebug.skips = [];
      let i;
      const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
      const len = split.length;
      for (i = 0; i < len; i++) {
        if (!split[i]) {
          continue;
        }
        namespaces = split[i].replace(/\*/g, ".*?");
        if (namespaces[0] === "-") {
          createDebug.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
        } else {
          createDebug.names.push(new RegExp("^" + namespaces + "$"));
        }
      }
      for (i = 0; i < createDebug.instances.length; i++) {
        const instance = createDebug.instances[i];
        instance.enabled = createDebug.enabled(instance.namespace);
      }
    }
    function disable() {
      const namespaces = [
        ...createDebug.names.map(toNamespace),
        ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
      ].join(",");
      createDebug.enable("");
      return namespaces;
    }
    function enabled(name) {
      if (name[name.length - 1] === "*") {
        return true;
      }
      let i;
      let len;
      for (i = 0, len = createDebug.skips.length; i < len; i++) {
        if (createDebug.skips[i].test(name)) {
          return false;
        }
      }
      for (i = 0, len = createDebug.names.length; i < len; i++) {
        if (createDebug.names[i].test(name)) {
          return true;
        }
      }
      return false;
    }
    function toNamespace(regexp) {
      return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
    }
    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  module3.exports = setup;
});

// ../../node_modules/.pnpm/debug@4.1.1/node_modules/debug/src/browser.js
var require_browser = __commonJS((exports2, module3) => {
  exports2.log = log;
  exports2.formatArgs = formatArgs;
  exports2.save = save;
  exports2.load = load;
  exports2.useColors = useColors;
  exports2.storage = localstorage();
  exports2.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
  ];
  function useColors() {
    if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
      return true;
    }
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  function formatArgs(args2) {
    args2[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args2[0] + (this.useColors ? "%c " : " ") + "+" + module3.exports.humanize(this.diff);
    if (!this.useColors) {
      return;
    }
    const c = "color: " + this.color;
    args2.splice(1, 0, c, "color: inherit");
    let index = 0;
    let lastC = 0;
    args2[0].replace(/%[a-zA-Z%]/g, (match) => {
      if (match === "%%") {
        return;
      }
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args2.splice(lastC, 0, c);
  }
  function log(...args2) {
    return typeof console === "object" && console.log && console.log(...args2);
  }
  function save(namespaces) {
    try {
      if (namespaces) {
        exports2.storage.setItem("debug", namespaces);
      } else {
        exports2.storage.removeItem("debug");
      }
    } catch (error) {
    }
  }
  function load() {
    let r;
    try {
      r = exports2.storage.getItem("debug");
    } catch (error) {
    }
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  }
  function localstorage() {
    try {
      return localStorage;
    } catch (error) {
    }
  }
  module3.exports = require_common()(exports2);
  const {formatters} = module3.exports;
  formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (error) {
      return "[UnexpectedJSONParseError]: " + error.message;
    }
  };
});

// ../../node_modules/.pnpm/debug@4.1.1/node_modules/debug/src/node.js
var require_node = __commonJS((exports2, module3) => {
  const tty = require("tty");
  const util4 = require("util");
  exports2.init = init;
  exports2.log = log;
  exports2.formatArgs = formatArgs;
  exports2.save = save;
  exports2.load = load;
  exports2.useColors = useColors;
  exports2.colors = [6, 2, 3, 4, 5, 1];
  try {
    const supportsColor = require_supports_color();
    if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
      exports2.colors = [
        20,
        21,
        26,
        27,
        32,
        33,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        56,
        57,
        62,
        63,
        68,
        69,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        92,
        93,
        98,
        99,
        112,
        113,
        128,
        129,
        134,
        135,
        148,
        149,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        178,
        179,
        184,
        185,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        214,
        215,
        220,
        221
      ];
    }
  } catch (error) {
  }
  exports2.inspectOpts = Object.keys(process.env).filter((key) => {
    return /^debug_/i.test(key);
  }).reduce((obj, key) => {
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_2, k) => {
      return k.toUpperCase();
    });
    let val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) {
      val = true;
    } else if (/^(no|off|false|disabled)$/i.test(val)) {
      val = false;
    } else if (val === "null") {
      val = null;
    } else {
      val = Number(val);
    }
    obj[prop] = val;
    return obj;
  }, {});
  function useColors() {
    return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
  }
  function formatArgs(args2) {
    const {namespace: name, useColors: useColors2} = this;
    if (useColors2) {
      const c = this.color;
      const colorCode = "[3" + (c < 8 ? c : "8;5;" + c);
      const prefix = `  ${colorCode};1m${name} [0m`;
      args2[0] = prefix + args2[0].split("\n").join("\n" + prefix);
      args2.push(colorCode + "m+" + module3.exports.humanize(this.diff) + "[0m");
    } else {
      args2[0] = getDate() + name + " " + args2[0];
    }
  }
  function getDate() {
    if (exports2.inspectOpts.hideDate) {
      return "";
    }
    return new Date().toISOString() + " ";
  }
  function log(...args2) {
    return process.stderr.write(util4.format(...args2) + "\n");
  }
  function save(namespaces) {
    if (namespaces) {
      process.env.DEBUG = namespaces;
    } else {
      delete process.env.DEBUG;
    }
  }
  function load() {
    return process.env.DEBUG;
  }
  function init(debug3) {
    debug3.inspectOpts = {};
    const keys = Object.keys(exports2.inspectOpts);
    for (let i = 0; i < keys.length; i++) {
      debug3.inspectOpts[keys[i]] = exports2.inspectOpts[keys[i]];
    }
  }
  module3.exports = require_common()(exports2);
  const {formatters} = module3.exports;
  formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util4.inspect(v, this.inspectOpts).replace(/\s*\n\s*/g, " ");
  };
  formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util4.inspect(v, this.inspectOpts);
  };
});

// ../../node_modules/.pnpm/debug@4.1.1/node_modules/debug/src/index.js
var require_src = __commonJS((exports2, module3) => {
  if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
    module3.exports = require_browser();
  } else {
    module3.exports = require_node();
  }
});

// ../debug/dist/index.js
var require_dist2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getLogs = void 0;
  const debug_1 = __importDefault(require_src());
  const cache = [];
  const MAX_LOGS = 100;
  const namespaces = [];
  const enabledNamespaces = new Map();
  const envDebug = process.env.DEBUG ? process.env.DEBUG + "," : "";
  const skips = debug_1.default.skips.slice();
  const names = debug_1.default.names.slice();
  function isEnabledByEnvVar(name) {
    if (name[name.length - 1] === "*") {
      return true;
    }
    for (const skip of skips) {
      if (skip.test(name)) {
        return false;
      }
    }
    for (const nameRegex of names) {
      if (nameRegex.test(name)) {
        return true;
      }
    }
    return false;
  }
  function Debug(namespace) {
    const debug3 = debug_1.default(namespace);
    namespaces.push(namespace);
    debug_1.default.enable(envDebug + namespaces.join(","));
    process.env.DEBUG = envDebug;
    if (isEnabledByEnvVar(namespace)) {
      enabledNamespaces.set(namespace, true);
    }
    const newDebug = (formatter, ...args2) => {
      return debug3(formatter, ...args2);
    };
    newDebug.log = console.error.bind(console);
    newDebug.color = debug3.color;
    newDebug.namespace = debug3.namespace;
    newDebug.enabled = debug3.enabled;
    newDebug.destroy = debug3.destroy;
    newDebug.extend = debug3.extend;
    debug3.log = (...args2) => {
      cache.push(args2);
      if (cache.length > MAX_LOGS) {
        cache.shift();
      }
      if (enabledNamespaces.has(namespace)) {
        newDebug.log(...args2);
      }
    };
    return newDebug;
  }
  exports2.default = Debug;
  Debug.enable = (namespace) => {
    enabledNamespaces.set(namespace, true);
  };
  Debug.enabled = (namespace) => enabledNamespaces.has(namespace);
  function getLogs(numChars = 7500) {
    let output = cache.map((c) => c.join("  ")).join("\n");
    if (output.length < numChars) {
      return output;
    }
    return output.slice(-numChars);
  }
  exports2.getLogs = getLogs;
});

// ../engine-core/dist/util.js
var require_util2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getRandomString = exports2.getGithubIssueUrl = exports2.link = exports2.fixBinaryTargets = exports2.plusX = void 0;
  const fs_1 = __importDefault(require("fs"));
  const terminal_link_1 = __importDefault(require_terminal_link());
  const new_github_issue_url_1 = __importDefault(require_new_github_issue_url());
  const chalk_1 = __importDefault(require_source());
  const debug_1 = __importDefault(require_dist2());
  const crypto_1 = __importDefault(require("crypto"));
  const debug3 = debug_1.default("plusX");
  function plusX(file) {
    const s = fs_1.default.statSync(file);
    const newMode = s.mode | 64 | 8 | 1;
    if (s.mode === newMode) {
      debug3(`Execution permissions of ${file} are fine`);
      return;
    }
    const base8 = newMode.toString(8).slice(-3);
    debug3(`Have to call plusX on ${file}`);
    fs_1.default.chmodSync(file, base8);
  }
  exports2.plusX = plusX;
  function fixBinaryTargets(platforms, platform) {
    platforms = platforms || [];
    if (!platforms.includes("native")) {
      return ["native", ...platforms];
    }
    return [...platforms, platform];
  }
  exports2.fixBinaryTargets = fixBinaryTargets;
  function link5(url) {
    return terminal_link_1.default(url, url, {
      fallback: (url2) => chalk_1.default.underline(url2)
    });
  }
  exports2.link = link5;
  function getGithubIssueUrl({title, user = "prisma", repo = "prisma-client-js", template = "bug_report.md", body}) {
    return new_github_issue_url_1.default({
      user,
      repo,
      template,
      title,
      body
    });
  }
  exports2.getGithubIssueUrl = getGithubIssueUrl;
  function getRandomString() {
    return crypto_1.default.randomBytes(12).toString("hex");
  }
  exports2.getRandomString = getRandomString;
});

// ../sdk/dist/resolveBinary.js
var require_resolveBinary = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.maybeCopyToTmp = exports2.resolveBinary = void 0;
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const temp_dir_1 = __importDefault(require_temp_dir());
  const make_dir_1 = __importDefault(require_make_dir());
  const util_1 = require("util");
  const get_platform_1 = require_dist();
  const util_2 = require_util2();
  const engines_1 = require("@prisma/engines");
  const readFile2 = util_1.promisify(fs_1.default.readFile);
  const writeFile = util_1.promisify(fs_1.default.writeFile);
  const engineEnvVarMap = {
    "query-engine": "PRISMA_QUERY_ENGINE_BINARY",
    "migration-engine": "PRISMA_MIGRATION_ENGINE_BINARY",
    "introspection-engine": "PRISMA_INTROSPECTION_ENGINE_BINARY",
    "prisma-fmt": "PRISMA_FMT_BINARY"
  };
  async function resolveBinary2(name, proposedPath) {
    if (proposedPath && !proposedPath.startsWith("/snapshot/") && fs_1.default.existsSync(proposedPath)) {
      return proposedPath;
    }
    const envVar = engineEnvVarMap[name];
    if (process.env[envVar]) {
      if (!fs_1.default.existsSync(process.env[envVar])) {
        throw new Error(`Env var ${envVar} is provided, but provided path ${process.env[envVar]} can't be resolved.`);
      }
      return process.env[envVar];
    }
    const dir = eval("__dirname");
    const platform = await get_platform_1.getPlatform();
    const extension = platform === "windows" ? ".exe" : "";
    const binaryName = `${name}-${platform}${extension}`;
    let prismaPath = path_1.default.join(engines_1.getEnginesPath(), binaryName);
    if (fs_1.default.existsSync(prismaPath)) {
      return maybeCopyToTmp(prismaPath);
    }
    prismaPath = path_1.default.join(__dirname, "..", binaryName);
    if (fs_1.default.existsSync(prismaPath)) {
      return maybeCopyToTmp(prismaPath);
    }
    prismaPath = path_1.default.join(__dirname, "../..", binaryName);
    if (fs_1.default.existsSync(prismaPath)) {
      return maybeCopyToTmp(prismaPath);
    }
    prismaPath = path_1.default.join(__dirname, "../runtime", binaryName);
    if (fs_1.default.existsSync(prismaPath)) {
      return maybeCopyToTmp(prismaPath);
    }
    throw new Error(`Could not find ${name} binary. Searched in ${path_1.default.join(dir, "..", binaryName)} and ${path_1.default.join(dir, "../..", binaryName)}`);
  }
  exports2.resolveBinary = resolveBinary2;
  async function maybeCopyToTmp(file) {
    const dir = eval("__dirname");
    if (dir.startsWith("/snapshot/")) {
      const targetDir = path_1.default.join(temp_dir_1.default, "prisma-binaries");
      await make_dir_1.default(targetDir);
      const target = path_1.default.join(targetDir, path_1.default.basename(file));
      const data = await readFile2(file);
      await writeFile(target, data);
      util_2.plusX(target);
      return target;
    }
    return file;
  }
  exports2.maybeCopyToTmp = maybeCopyToTmp;
});

// ../sdk/dist/highlight/theme.js
var require_theme = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.theme = exports2.identity = exports2.brightBlue = exports2.blue = exports2.darkBrightBlue = exports2.gamboge = void 0;
  const chalk_1 = __importDefault(require_source());
  exports2.gamboge = chalk_1.default.rgb(228, 155, 15);
  exports2.darkBrightBlue = chalk_1.default.rgb(107, 139, 140);
  exports2.blue = chalk_1.default.cyan;
  exports2.brightBlue = chalk_1.default.rgb(127, 155, 175);
  exports2.identity = (str) => str || "";
  exports2.theme = {
    keyword: exports2.blue,
    entity: exports2.blue,
    value: exports2.brightBlue,
    punctuation: exports2.darkBrightBlue,
    directive: exports2.blue,
    function: exports2.blue,
    variable: exports2.brightBlue,
    string: exports2.brightBlue,
    boolean: exports2.gamboge,
    comment: chalk_1.default.dim
  };
});

// ../sdk/dist/highlight/prism.js
var require_prism = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.Token = exports2.Prism = void 0;
  const theme_1 = require_theme();
  const _self = {};
  let uniqueId = 0;
  exports2.Prism = {
    manual: _self.Prism && _self.Prism.manual,
    disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,
    util: {
      encode: function(tokens) {
        if (tokens instanceof Token) {
          const anyTokens = tokens;
          return new Token(anyTokens.type, exports2.Prism.util.encode(anyTokens.content), anyTokens.alias);
        } else if (Array.isArray(tokens)) {
          return tokens.map(exports2.Prism.util.encode);
        } else {
          return tokens.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
        }
      },
      type: function(o) {
        return Object.prototype.toString.call(o).slice(8, -1);
      },
      objId: function(obj) {
        if (!obj["__id"]) {
          Object.defineProperty(obj, "__id", {value: ++uniqueId});
        }
        return obj["__id"];
      },
      clone: function deepClone(o, visited) {
        visited = visited || {};
        let clone, id;
        const type = exports2.Prism.util.type(o);
        switch (type) {
          case "Object":
            id = exports2.Prism.util.objId(o);
            if (visited[id]) {
              return visited[id];
            }
            clone = {};
            visited[id] = clone;
            for (const key in o) {
              if (o.hasOwnProperty(key)) {
                clone[key] = deepClone(o[key], visited);
              }
            }
            return clone;
          case "Array":
            id = exports2.Prism.util.objId(o);
            if (visited[id]) {
              return visited[id];
            }
            clone = [];
            visited[id] = clone;
            o.forEach(function(v, i) {
              clone[i] = deepClone(v, visited);
            });
            return clone;
          default:
            return o;
        }
      }
    },
    languages: {
      extend: function(id, redef) {
        const lang = exports2.Prism.util.clone(exports2.Prism.languages[id]);
        for (const key in redef) {
          lang[key] = redef[key];
        }
        return lang;
      },
      insertBefore: function(inside, before, insert, root) {
        root = root || exports2.Prism.languages;
        const grammar = root[inside];
        const ret = {};
        for (const token in grammar) {
          if (grammar.hasOwnProperty(token)) {
            if (token == before) {
              for (const newToken in insert) {
                if (insert.hasOwnProperty(newToken)) {
                  ret[newToken] = insert[newToken];
                }
              }
            }
            if (!insert.hasOwnProperty(token)) {
              ret[token] = grammar[token];
            }
          }
        }
        const old = root[inside];
        root[inside] = ret;
        exports2.Prism.languages.DFS(exports2.Prism.languages, function(key, value) {
          if (value === old && key != inside) {
            this[key] = ret;
          }
        });
        return ret;
      },
      DFS: function DFS(o, callback, type, visited) {
        visited = visited || {};
        const objId = exports2.Prism.util.objId;
        for (const i in o) {
          if (o.hasOwnProperty(i)) {
            callback.call(o, i, o[i], type || i);
            const property = o[i], propertyType = exports2.Prism.util.type(property);
            if (propertyType === "Object" && !visited[objId(property)]) {
              visited[objId(property)] = true;
              DFS(property, callback, null, visited);
            } else if (propertyType === "Array" && !visited[objId(property)]) {
              visited[objId(property)] = true;
              DFS(property, callback, i, visited);
            }
          }
        }
      }
    },
    plugins: {},
    highlight: function(text, grammar, language) {
      const env = {
        code: text,
        grammar,
        language
      };
      exports2.Prism.hooks.run("before-tokenize", env);
      env.tokens = exports2.Prism.tokenize(env.code, env.grammar);
      exports2.Prism.hooks.run("after-tokenize", env);
      return Token.stringify(exports2.Prism.util.encode(env.tokens), env.language);
    },
    matchGrammar: function(text, strarr, grammar, index, startPos, oneshot, target) {
      for (const token in grammar) {
        if (!grammar.hasOwnProperty(token) || !grammar[token]) {
          continue;
        }
        if (token == target) {
          return;
        }
        let patterns = grammar[token];
        patterns = exports2.Prism.util.type(patterns) === "Array" ? patterns : [patterns];
        for (let j = 0; j < patterns.length; ++j) {
          let pattern = patterns[j], inside = pattern.inside, lookbehind = !!pattern.lookbehind, greedy = !!pattern.greedy, lookbehindLength = 0, alias = pattern.alias;
          if (greedy && !pattern.pattern.global) {
            const flags = pattern.pattern.toString().match(/[imuy]*$/)[0];
            pattern.pattern = RegExp(pattern.pattern.source, flags + "g");
          }
          pattern = pattern.pattern || pattern;
          for (let i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {
            let str = strarr[i];
            if (strarr.length > text.length) {
              return;
            }
            if (str instanceof Token) {
              continue;
            }
            if (greedy && i != strarr.length - 1) {
              pattern.lastIndex = pos;
              const match2 = pattern.exec(text);
              if (!match2) {
                break;
              }
              var from = match2.index + (lookbehind ? match2[1].length : 0), to = match2.index + match2[0].length, k = i, p = pos;
              for (let len = strarr.length; k < len && (p < to || !strarr[k].type && !strarr[k - 1].greedy); ++k) {
                p += strarr[k].length;
                if (from >= p) {
                  ++i;
                  pos = p;
                }
              }
              if (strarr[i] instanceof Token) {
                continue;
              }
              delNum = k - i;
              str = text.slice(pos, p);
              match2.index -= pos;
            } else {
              pattern.lastIndex = 0;
              var match = pattern.exec(str), delNum = 1;
            }
            if (!match) {
              if (oneshot) {
                break;
              }
              continue;
            }
            if (lookbehind) {
              lookbehindLength = match[1] ? match[1].length : 0;
            }
            var from = match.index + lookbehindLength, match = match[0].slice(lookbehindLength), to = from + match.length, before = str.slice(0, from), after = str.slice(to);
            const args2 = [i, delNum];
            if (before) {
              ++i;
              pos += before.length;
              args2.push(before);
            }
            const wrapped = new Token(token, inside ? exports2.Prism.tokenize(match, inside) : match, alias, match, greedy);
            args2.push(wrapped);
            if (after) {
              args2.push(after);
            }
            Array.prototype.splice.apply(strarr, args2);
            if (delNum != 1)
              exports2.Prism.matchGrammar(text, strarr, grammar, i, pos, true, token);
            if (oneshot)
              break;
          }
        }
      }
    },
    tokenize: function(text, grammar) {
      const strarr = [text];
      const rest = grammar.rest;
      if (rest) {
        for (const token in rest) {
          grammar[token] = rest[token];
        }
        delete grammar.rest;
      }
      exports2.Prism.matchGrammar(text, strarr, grammar, 0, 0, false);
      return strarr;
    },
    hooks: {
      all: {},
      add: function(name, callback) {
        const hooks = exports2.Prism.hooks.all;
        hooks[name] = hooks[name] || [];
        hooks[name].push(callback);
      },
      run: function(name, env) {
        const callbacks = exports2.Prism.hooks.all[name];
        if (!callbacks || !callbacks.length) {
          return;
        }
        for (var i = 0, callback; callback = callbacks[i++]; ) {
          callback(env);
        }
      }
    },
    Token
  };
  exports2.Prism.languages.clike = {
    comment: [
      {
        pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
        lookbehind: true
      },
      {
        pattern: /(^|[^\\:])\/\/.*/,
        lookbehind: true,
        greedy: true
      }
    ],
    string: {
      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    "class-name": {
      pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,
      lookbehind: true,
      inside: {
        punctuation: /[.\\]/
      }
    },
    keyword: /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
    boolean: /\b(?:true|false)\b/,
    function: /\w+(?=\()/,
    number: /\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,
    operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,
    punctuation: /[{}[\];(),.:]/
  };
  exports2.Prism.languages.javascript = exports2.Prism.languages.extend("clike", {
    "class-name": [
      exports2.Prism.languages.clike["class-name"],
      {
        pattern: /(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/,
        lookbehind: true
      }
    ],
    keyword: [
      {
        pattern: /((?:^|})\s*)(?:catch|finally)\b/,
        lookbehind: true
      },
      {
        pattern: /(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
        lookbehind: true
      }
    ],
    number: /\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,
    function: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
    operator: /-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/
  });
  exports2.Prism.languages.javascript["class-name"][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/;
  exports2.Prism.languages.insertBefore("javascript", "keyword", {
    regex: {
      pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=\s*($|[\r\n,.;})\]]))/,
      lookbehind: true,
      greedy: true
    },
    "function-variable": {
      pattern: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/,
      alias: "function"
    },
    parameter: [
      {
        pattern: /(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/,
        lookbehind: true,
        inside: exports2.Prism.languages.javascript
      },
      {
        pattern: /[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i,
        inside: exports2.Prism.languages.javascript
      },
      {
        pattern: /(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/,
        lookbehind: true,
        inside: exports2.Prism.languages.javascript
      },
      {
        pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/,
        lookbehind: true,
        inside: exports2.Prism.languages.javascript
      }
    ],
    constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/
  });
  exports2.Prism.languages.insertBefore("javascript", "string", {
    "template-string": {
      pattern: /`(?:\\[\s\S]|\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|[^\\`])*`/,
      greedy: true,
      inside: {
        interpolation: {
          pattern: /\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,
          inside: {
            "interpolation-punctuation": {
              pattern: /^\${|}$/,
              alias: "punctuation"
            },
            rest: exports2.Prism.languages.javascript
          }
        },
        string: /[\s\S]+/
      }
    }
  });
  if (exports2.Prism.languages.markup) {
    exports2.Prism.languages.markup.tag.addInlined("script", "javascript");
  }
  exports2.Prism.languages.js = exports2.Prism.languages.javascript;
  exports2.Prism.languages.typescript = exports2.Prism.languages.extend("javascript", {
    keyword: /\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\b/,
    builtin: /\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\b/
  });
  exports2.Prism.languages.ts = exports2.Prism.languages.typescript;
  function Token(type, content, alias, matchedStr, greedy) {
    this.type = type;
    this.content = content;
    this.alias = alias;
    this.length = (matchedStr || "").length | 0;
    this.greedy = !!greedy;
  }
  exports2.Token = Token;
  Token.stringify = function(o, language) {
    if (typeof o == "string") {
      return o;
    }
    if (Array.isArray(o)) {
      return o.map(function(element) {
        return Token.stringify(element, language);
      }).join("");
    }
    return getColorForSyntaxKind(o.type)(o.content);
  };
  function getColorForSyntaxKind(syntaxKind) {
    return theme_1.theme[syntaxKind] || theme_1.identity;
  }
});

// ../sdk/dist/highlight/languages/dml.js
var require_dml = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.dml = void 0;
  exports2.dml = {
    string: [/\"(.*)\"/g, /\'(.*)\'/g],
    directive: {pattern: /(@.*)/g},
    entity: [
      /model\s+\w+/g,
      /enum\s+\w+/g,
      /datasource\s+\w+/g,
      /source\s+\w+/g,
      /generator\s+\w+/g
    ],
    comment: /#.*/g,
    value: [/\b\s+(\w+)/g],
    punctuation: /(\:|}|{|"|=)/g,
    boolean: /(true|false)/g
  };
});

// ../sdk/dist/highlight/languages/sql.js
var require_sql = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.sql = void 0;
  exports2.sql = {
    comment: {
      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,
      lookbehind: true
    },
    variable: [
      {
        pattern: /@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,
        greedy: true
      },
      /@[\w.$]+/
    ],
    string: {
      pattern: /(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,
      greedy: true,
      lookbehind: true
    },
    function: /\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,
    keyword: /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,
    boolean: /\b(?:TRUE|FALSE|NULL)\b/i,
    number: /\b0x[\da-f]+\b|\b\d+\.?\d*|\B\.\d+\b/i,
    operator: /[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,
    punctuation: /[;[\]()`,.]/
  };
});

// ../sdk/dist/highlight/highlight.js
var require_highlight = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.highlightTS = exports2.highlightSql = exports2.highlightDatamodel = void 0;
  const prism_1 = require_prism();
  const dml_1 = require_dml();
  const sql_1 = require_sql();
  function highlightDatamodel(str) {
    return highlight(str, dml_1.dml);
  }
  exports2.highlightDatamodel = highlightDatamodel;
  function highlightSql(str) {
    return highlight(str, sql_1.sql);
  }
  exports2.highlightSql = highlightSql;
  function highlightTS2(str) {
    return highlight(str, prism_1.Prism.languages.javascript);
  }
  exports2.highlightTS = highlightTS2;
  function highlight(str, grammar) {
    const tokens = prism_1.Prism.tokenize(str, grammar);
    return tokens.map((t) => prism_1.Token.stringify(t)).join("");
  }
});

// ../sdk/dist/link.js
var require_link = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.link = void 0;
  const terminal_link_1 = __importDefault(require_terminal_link());
  const chalk_1 = __importDefault(require_source());
  function link5(url) {
    return terminal_link_1.default(url, url, {
      fallback: (url2) => chalk_1.default.underline(url2)
    });
  }
  exports2.link = link5;
});

// ../sdk/dist/utils/missingGeneratorMessage.js
var require_missingGeneratorMessage = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.missingModelMessage = exports2.missingGeneratorMessage = void 0;
  const chalk_1 = __importDefault(require_source());
  const highlight_1 = require_highlight();
  const link_1 = require_link();
  exports2.missingGeneratorMessage = `
${chalk_1.default.blue("info")} You don't have any generators defined in your ${chalk_1.default.bold("schema.prisma")}, so nothing will be generated.
You can define them like this:

${chalk_1.default.bold(highlight_1.highlightDatamodel(`generator client {
  provider = "prisma-client-js"
}`))}`;
  exports2.missingModelMessage = `
You don't have any ${chalk_1.default.bold("models")} defined in your ${chalk_1.default.bold("schema.prisma")}, so nothing will be generated.
You can define a model like this:

${chalk_1.default.bold(highlight_1.highlightDatamodel(`model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}`))}

More information in our documentation:
${link_1.link("https://pris.ly/d/prisma-schema")}
`;
});

// ../sdk/dist/utils/byline.js
var require_byline = __commonJS((exports2, module3) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.createLineStream = void 0;
  const stream = require("stream");
  const util4 = require("util");
  function byline(readStream, options) {
    return module3.exports.createStream(readStream, options);
  }
  exports2.default = byline;
  module3.exports.createStream = function(readStream, options) {
    if (readStream) {
      return createLineStream(readStream, options);
    } else {
      return new LineStream(options);
    }
  };
  function createLineStream(readStream, options) {
    if (!readStream) {
      throw new Error("expected readStream");
    }
    if (!readStream.readable) {
      throw new Error("readStream must be readable");
    }
    const ls = new LineStream(options);
    readStream.pipe(ls);
    return ls;
  }
  exports2.createLineStream = createLineStream;
  module3.exports.LineStream = LineStream;
  function LineStream(options) {
    stream.Transform.call(this, options);
    options = options || {};
    this._readableState.objectMode = true;
    this._lineBuffer = [];
    this._keepEmptyLines = options.keepEmptyLines || false;
    this._lastChunkEndedWithCR = false;
    this.on("pipe", function(src) {
      if (!this.encoding) {
        if (src instanceof stream.Readable) {
          this.encoding = src._readableState.encoding;
        }
      }
    });
  }
  util4.inherits(LineStream, stream.Transform);
  LineStream.prototype._transform = function(chunk, encoding, done) {
    encoding = encoding || "utf8";
    if (Buffer.isBuffer(chunk)) {
      if (encoding == "buffer") {
        chunk = chunk.toString();
        encoding = "utf8";
      } else {
        chunk = chunk.toString(encoding);
      }
    }
    this._chunkEncoding = encoding;
    const lines = chunk.split(/\r\n|\r|\n/g);
    if (this._lastChunkEndedWithCR && chunk[0] == "\n") {
      lines.shift();
    }
    if (this._lineBuffer.length > 0) {
      this._lineBuffer[this._lineBuffer.length - 1] += lines[0];
      lines.shift();
    }
    this._lastChunkEndedWithCR = chunk[chunk.length - 1] == "\r";
    this._lineBuffer = this._lineBuffer.concat(lines);
    this._pushBuffer(encoding, 1, done);
  };
  LineStream.prototype._pushBuffer = function(encoding, keep, done) {
    while (this._lineBuffer.length > keep) {
      const line = this._lineBuffer.shift();
      if (this._keepEmptyLines || line.length > 0) {
        if (!this.push(this._reencode(line, encoding))) {
          const self2 = this;
          setImmediate(function() {
            self2._pushBuffer(encoding, keep, done);
          });
          return;
        }
      }
    }
    done();
  };
  LineStream.prototype._flush = function(done) {
    this._pushBuffer(this._chunkEncoding, 0, done);
  };
  LineStream.prototype._reencode = function(line, chunkEncoding) {
    if (this.encoding && this.encoding != chunkEncoding) {
      return Buffer.from(line, chunkEncoding).toString(this.encoding);
    } else if (this.encoding) {
      return line;
    } else {
      return Buffer.from(line, chunkEncoding);
    }
  };
});

// ../sdk/dist/utils/now.js
var require_now = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.renderDate = exports2.timestampToDate = exports2.now = void 0;
  const prefixZero = (value) => ("0" + value).slice(-2);
  function now() {
    const now2 = new Date();
    return `${now2.getFullYear()}${prefixZero(now2.getMonth() + 1)}${prefixZero(now2.getDate())}${prefixZero(now2.getHours())}${prefixZero(now2.getMinutes())}${prefixZero(now2.getSeconds())}`;
  }
  exports2.now = now;
  function timestampToDate(timestamp) {
    if (!timestamp || timestamp.length !== 14) {
      return void 0;
    }
    const year = Number(timestamp.slice(0, 4));
    const month = Number(timestamp.slice(4, 6));
    const date = Number(timestamp.slice(6, 8));
    const hours = Number(timestamp.slice(8, 10));
    const minutes = Number(timestamp.slice(10, 12));
    const seconds = Number(timestamp.slice(12, 14));
    return new Date(year, month - 1, date, hours, minutes, seconds);
  }
  exports2.timestampToDate = timestampToDate;
  function renderDate(date) {
    if (date.getDate() !== new Date().getDate()) {
      return date.toLocaleDateString() + " " + date.toLocaleTimeString();
    }
    return date.toLocaleTimeString();
  }
  exports2.renderDate = renderDate;
});

// ../sdk/dist/panic.js
var require_panic = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ErrorArea = exports2.RustPanic = void 0;
  class RustPanic extends Error {
    constructor(message, rustStack, request, area, schemaPath, schema, introspectionUrl) {
      super(message);
      this.rustStack = rustStack;
      this.request = request;
      this.area = area;
      this.schemaPath = schemaPath;
      this.schema = schema;
      this.introspectionUrl = introspectionUrl;
    }
  }
  exports2.RustPanic = RustPanic;
  var ErrorArea;
  (function(ErrorArea2) {
    ErrorArea2["LIFT_CLI"] = "LIFT_CLI";
    ErrorArea2["PHOTON_STUDIO"] = "PHOTON_STUDIO";
    ErrorArea2["INTROSPECTION_CLI"] = "INTROSPECTION_CLI";
  })(ErrorArea = exports2.ErrorArea || (exports2.ErrorArea = {}));
});

// ../sdk/dist/IntrospectionEngine.js
var require_IntrospectionEngine = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.IntrospectionEngine = exports2.IntrospectionError = exports2.IntrospectionPanic = void 0;
  const chalk_1 = __importDefault(require_source());
  const child_process_1 = require("child_process");
  const debug_1 = __importDefault(require_dist2());
  const byline_1 = __importDefault(require_byline());
  const debugCli = debug_1.default("IntrospectionEngine:cli");
  const debugRpc = debug_1.default("IntrospectionEngine:rpc");
  const debugStderr = debug_1.default("IntrospectionEngine:stderr");
  const debugStdin = debug_1.default("IntrospectionEngine:stdin");
  const fs_1 = __importDefault(require("fs"));
  const now_1 = require_now();
  const panic_1 = require_panic();
  const resolveBinary_1 = require_resolveBinary();
  class IntrospectionPanic extends Error {
    constructor(message, rustStack, request) {
      super(message);
      this.rustStack = rustStack;
      this.request = request;
    }
  }
  exports2.IntrospectionPanic = IntrospectionPanic;
  class IntrospectionError extends Error {
    constructor(message, code) {
      super(message);
      this.code = code;
    }
  }
  exports2.IntrospectionError = IntrospectionError;
  let messageId = 1;
  class IntrospectionEngine3 {
    constructor({debug: debug3, cwd} = {
      debug: false,
      cwd: process.cwd()
    }) {
      this.listeners = {};
      this.messages = [];
      this.isRunning = false;
      if (debug3) {
        debug_1.default.enable("IntrospectionEngine*");
      }
      this.debug = Boolean(debug3);
      this.cwd = cwd || process.cwd();
    }
    stop() {
      if (this.child) {
        this.child.kill();
        this.isRunning = false;
      }
    }
    rejectAll(err) {
      Object.entries(this.listeners).map(([id, listener]) => {
        listener(null, err);
        delete this.listeners[id];
      });
    }
    registerCallback(id, callback) {
      this.listeners[id] = callback;
    }
    getDatabaseDescription(schema) {
      return this.runCommand(this.getRPCPayload("getDatabaseDescription", {schema}));
    }
    getDatabaseVersion(schema) {
      return this.runCommand(this.getRPCPayload("getDatabaseVersion", {schema}));
    }
    introspect(schema, force) {
      this.lastUrl = schema;
      return this.runCommand(this.getRPCPayload("introspect", {schema, force}));
    }
    debugPanic() {
      return this.runCommand(this.getRPCPayload("debugPanic", void 0));
    }
    listDatabases(schema) {
      this.lastUrl = schema;
      return this.runCommand(this.getRPCPayload("listDatabases", {schema}));
    }
    getDatabaseMetadata(schema) {
      this.lastUrl = schema;
      return this.runCommand(this.getRPCPayload("getDatabaseMetadata", {schema}));
    }
    handleResponse(response) {
      let result;
      try {
        result = JSON.parse(response);
      } catch (e) {
        console.error(`Could not parse introspection engine response: ${response.slice(0, 200)}`);
      }
      if (result) {
        if (result.backtrace) {
          console.log(result);
        }
        if (!result.id) {
          console.error(`Response ${JSON.stringify(result)} doesn't have an id and I can't handle that (yet)`);
        }
        if (!this.listeners[result.id]) {
          console.error(`Got result for unknown id ${result.id}`);
        }
        if (this.listeners[result.id]) {
          this.listeners[result.id](result);
          delete this.listeners[result.id];
        }
      }
    }
    init() {
      if (!this.initPromise) {
        this.initPromise = this.internalInit();
      }
      return this.initPromise;
    }
    internalInit() {
      return new Promise(async (resolve, reject) => {
        var _a, _b;
        try {
          const binaryPath = await resolveBinary_1.resolveBinary("introspection-engine");
          debugRpc("starting introspection engine with binary: " + binaryPath);
          this.child = child_process_1.spawn(binaryPath, {
            env: process.env,
            cwd: this.cwd,
            stdio: ["pipe", "pipe", "pipe"]
          });
          this.isRunning = true;
          this.child.on("error", (err) => {
            var _a2;
            console.error("[introspection-engine] error: %s", err);
            (_a2 = this.child) === null || _a2 === void 0 ? void 0 : _a2.kill();
            this.rejectAll(err);
            reject(err);
          });
          (_a = this.child.stdin) === null || _a === void 0 ? void 0 : _a.on("error", (err) => {
            var _a2;
            console.error(err);
            (_a2 = this.child) === null || _a2 === void 0 ? void 0 : _a2.kill();
          });
          this.child.on("exit", async (code) => {
            this.isRunning = false;
            if (code === 255 && this.lastError && this.lastError.is_panic) {
              const err2 = new panic_1.RustPanic(this.lastError.message, this.lastError.backtrace, this.lastRequest, panic_1.ErrorArea.INTROSPECTION_CLI, void 0, this.lastUrl);
              this.rejectAll(err2);
              reject(err2);
              return;
            }
            const messages = this.messages.join("\n");
            let err;
            if (code !== 0 || messages.includes("panicked at")) {
              let errorMessage = chalk_1.default.red.bold("Error in introspection engine: ") + messages;
              if (this.lastError && this.lastError.msg === "PANIC") {
                errorMessage = serializePanic(this.lastError);
                err = new IntrospectionPanic(errorMessage, messages, this.lastRequest);
              } else if (messages.includes("panicked at")) {
                err = new IntrospectionPanic(errorMessage, messages, this.lastRequest);
              }
              err = err || new Error(errorMessage);
              this.rejectAll(err);
              reject(err);
            }
          });
          this.child.stdin.on("error", (err) => {
            debugStdin(err);
          });
          byline_1.default(this.child.stderr).on("data", (data) => {
            const msg = String(data);
            this.messages.push(msg);
            debugStderr(msg);
            try {
              const json = JSON.parse(msg);
              if (json.backtrace) {
                this.lastError = json;
              }
              if (json.level === "ERRO") {
                this.lastError = json;
              }
            } catch (e) {
              debugCli(e);
            }
          });
          byline_1.default(this.child.stdout).on("data", (line) => {
            this.handleResponse(String(line));
          });
          setImmediate(() => {
            resolve();
          });
        } catch (e) {
          (_b = this.child) === null || _b === void 0 ? void 0 : _b.kill();
          reject(e);
        }
      });
    }
    async runCommand(request) {
      var _a;
      await this.init();
      if (process.env.FORCE_PANIC_INTROSPECTION_ENGINE) {
        request = this.getRPCPayload("debugPanic", void 0);
      }
      if ((_a = this.child) === null || _a === void 0 ? void 0 : _a.killed) {
        throw new Error(`Can't execute ${JSON.stringify(request)} because introspection engine already exited.`);
      }
      return new Promise((resolve, reject) => {
        this.registerCallback(request.id, async (response, err) => {
          var _a2, _b, _c, _d, _e, _f, _g;
          if (err) {
            return reject(err);
          }
          if (typeof response.result !== "undefined") {
            resolve(response.result);
          } else {
            if (response.error) {
              (_a2 = this.child) === null || _a2 === void 0 ? void 0 : _a2.kill();
              debugRpc(response);
              if ((_b = response.error.data) === null || _b === void 0 ? void 0 : _b.is_panic) {
                const message = (_e = (_d = (_c = response.error.data) === null || _c === void 0 ? void 0 : _c.error) === null || _d === void 0 ? void 0 : _d.message) !== null && _e !== void 0 ? _e : response.error.message;
                reject(new panic_1.RustPanic(message, message, request, panic_1.ErrorArea.INTROSPECTION_CLI, void 0, this.lastUrl));
              } else if ((_f = response.error.data) === null || _f === void 0 ? void 0 : _f.message) {
                let message = `${chalk_1.default.redBright(response.error.data.message)}
`;
                if ((_g = response.error.data) === null || _g === void 0 ? void 0 : _g.error_code) {
                  message = chalk_1.default.redBright(`${response.error.data.error_code}

`) + message;
                  reject(new IntrospectionError(message, response.error.data.error_code));
                } else {
                  reject(new Error(message));
                }
              } else {
                const text = this.persistError(request, this.messages.join("\n"));
                reject(new Error(`${chalk_1.default.redBright("Error in RPC")}
 Request: ${JSON.stringify(request, null, 2)}
Response: ${JSON.stringify(response, null, 2)}
${response.error.message}

${text}
`));
              }
            } else {
              reject(new Error(`Got invalid RPC response without .result property: ${JSON.stringify(response)}`));
            }
          }
        });
        if (this.child.stdin.destroyed) {
          throw new Error(`Can't execute ${JSON.stringify(request)} because introspection engine is destroyed.`);
        }
        debugRpc("SENDING RPC CALL", JSON.stringify(request));
        this.child.stdin.write(JSON.stringify(request) + "\n");
        this.lastRequest = request;
      });
    }
    persistError(request, message) {
      const filename = `failed-${request.method}-${now_1.now()}.md`;
      const file = `# Failed ${request.method} at ${new Date().toISOString()}
## RPC One-Liner
\`\`\`json
${JSON.stringify(request)}
\`\`\`

## RPC Input Readable
\`\`\`json
${JSON.stringify(request, null, 2)}
\`\`\`

## Stack Trace
\`\`\`bash
${message}
\`\`\`
`;
      fs_1.default.writeFileSync(filename, file);
      return `Wrote ${chalk_1.default.bold(filename)} with debugging information.
Please put that file into a gist and post it in Slack.
1. ${chalk_1.default.greenBright(`cat ${filename} | pbcopy`)}
2. Create a gist ${chalk_1.default.greenBright.underline(`https://gist.github.com/new`)}`;
    }
    getRPCPayload(method, params) {
      return {
        id: messageId++,
        jsonrpc: "2.0",
        method,
        params: params ? [{...params}] : void 0
      };
    }
  }
  exports2.IntrospectionEngine = IntrospectionEngine3;
  function serializePanic(log) {
    return `${chalk_1.default.red.bold("Error in introspection engine.\nReason: ")}${chalk_1.default.red(`${log.reason} in ${chalk_1.default.underline(`${log.file}:${log.line}:${log.column}`)}`)}

Please create an issue in the ${chalk_1.default.bold("prisma")} repo with the error 🙏:
${chalk_1.default.underline("https://github.com/prisma/prisma/issues/new")}
`;
  }
});

// ../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/windows.js
var require_windows = __commonJS((exports2, module3) => {
  module3.exports = isexe;
  isexe.sync = sync;
  var fs17 = require("fs");
  function checkPathExt(path19, options) {
    var pathext = options.pathExt !== void 0 ? options.pathExt : process.env.PATHEXT;
    if (!pathext) {
      return true;
    }
    pathext = pathext.split(";");
    if (pathext.indexOf("") !== -1) {
      return true;
    }
    for (var i = 0; i < pathext.length; i++) {
      var p = pathext[i].toLowerCase();
      if (p && path19.substr(-p.length).toLowerCase() === p) {
        return true;
      }
    }
    return false;
  }
  function checkStat(stat, path19, options) {
    if (!stat.isSymbolicLink() && !stat.isFile()) {
      return false;
    }
    return checkPathExt(path19, options);
  }
  function isexe(path19, options, cb) {
    fs17.stat(path19, function(er, stat) {
      cb(er, er ? false : checkStat(stat, path19, options));
    });
  }
  function sync(path19, options) {
    return checkStat(fs17.statSync(path19), path19, options);
  }
});

// ../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/mode.js
var require_mode = __commonJS((exports2, module3) => {
  module3.exports = isexe;
  isexe.sync = sync;
  var fs17 = require("fs");
  function isexe(path19, options, cb) {
    fs17.stat(path19, function(er, stat) {
      cb(er, er ? false : checkStat(stat, options));
    });
  }
  function sync(path19, options) {
    return checkStat(fs17.statSync(path19), options);
  }
  function checkStat(stat, options) {
    return stat.isFile() && checkMode(stat, options);
  }
  function checkMode(stat, options) {
    var mod = stat.mode;
    var uid = stat.uid;
    var gid = stat.gid;
    var myUid = options.uid !== void 0 ? options.uid : process.getuid && process.getuid();
    var myGid = options.gid !== void 0 ? options.gid : process.getgid && process.getgid();
    var u = parseInt("100", 8);
    var g = parseInt("010", 8);
    var o = parseInt("001", 8);
    var ug = u | g;
    var ret = mod & o || mod & g && gid === myGid || mod & u && uid === myUid || mod & ug && myUid === 0;
    return ret;
  }
});

// ../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/index.js
var require_isexe = __commonJS((exports2, module3) => {
  var fs17 = require("fs");
  var core;
  if (process.platform === "win32" || global.TESTING_WINDOWS) {
    core = require_windows();
  } else {
    core = require_mode();
  }
  module3.exports = isexe;
  isexe.sync = sync;
  function isexe(path19, options, cb) {
    if (typeof options === "function") {
      cb = options;
      options = {};
    }
    if (!cb) {
      if (typeof Promise !== "function") {
        throw new TypeError("callback not provided");
      }
      return new Promise(function(resolve, reject) {
        isexe(path19, options || {}, function(er, is) {
          if (er) {
            reject(er);
          } else {
            resolve(is);
          }
        });
      });
    }
    core(path19, options || {}, function(er, is) {
      if (er) {
        if (er.code === "EACCES" || options && options.ignoreErrors) {
          er = null;
          is = false;
        }
      }
      cb(er, is);
    });
  }
  function sync(path19, options) {
    try {
      return core.sync(path19, options || {});
    } catch (er) {
      if (options && options.ignoreErrors || er.code === "EACCES") {
        return false;
      } else {
        throw er;
      }
    }
  }
});

// ../../node_modules/.pnpm/which@2.0.2/node_modules/which/which.js
var require_which = __commonJS((exports2, module3) => {
  const isWindows = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
  const path19 = require("path");
  const COLON = isWindows ? ";" : ":";
  const isexe = require_isexe();
  const getNotFoundError = (cmd) => Object.assign(new Error(`not found: ${cmd}`), {code: "ENOENT"});
  const getPathInfo = (cmd, opt) => {
    const colon = opt.colon || COLON;
    const pathEnv = cmd.match(/\//) || isWindows && cmd.match(/\\/) ? [""] : [
      ...isWindows ? [process.cwd()] : [],
      ...(opt.path || process.env.PATH || "").split(colon)
    ];
    const pathExtExe = isWindows ? opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "";
    const pathExt = isWindows ? pathExtExe.split(colon) : [""];
    if (isWindows) {
      if (cmd.indexOf(".") !== -1 && pathExt[0] !== "")
        pathExt.unshift("");
    }
    return {
      pathEnv,
      pathExt,
      pathExtExe
    };
  };
  const which = (cmd, opt, cb) => {
    if (typeof opt === "function") {
      cb = opt;
      opt = {};
    }
    if (!opt)
      opt = {};
    const {pathEnv, pathExt, pathExtExe} = getPathInfo(cmd, opt);
    const found = [];
    const step = (i) => new Promise((resolve, reject) => {
      if (i === pathEnv.length)
        return opt.all && found.length ? resolve(found) : reject(getNotFoundError(cmd));
      const ppRaw = pathEnv[i];
      const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
      const pCmd = path19.join(pathPart, cmd);
      const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
      resolve(subStep(p, i, 0));
    });
    const subStep = (p, i, ii) => new Promise((resolve, reject) => {
      if (ii === pathExt.length)
        return resolve(step(i + 1));
      const ext = pathExt[ii];
      isexe(p + ext, {pathExt: pathExtExe}, (er, is) => {
        if (!er && is) {
          if (opt.all)
            found.push(p + ext);
          else
            return resolve(p + ext);
        }
        return resolve(subStep(p, i, ii + 1));
      });
    });
    return cb ? step(0).then((res) => cb(null, res), cb) : step(0);
  };
  const whichSync = (cmd, opt) => {
    opt = opt || {};
    const {pathEnv, pathExt, pathExtExe} = getPathInfo(cmd, opt);
    const found = [];
    for (let i = 0; i < pathEnv.length; i++) {
      const ppRaw = pathEnv[i];
      const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
      const pCmd = path19.join(pathPart, cmd);
      const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
      for (let j = 0; j < pathExt.length; j++) {
        const cur = p + pathExt[j];
        try {
          const is = isexe.sync(cur, {pathExt: pathExtExe});
          if (is) {
            if (opt.all)
              found.push(cur);
            else
              return cur;
          }
        } catch (ex) {
        }
      }
    }
    if (opt.all && found.length)
      return found;
    if (opt.nothrow)
      return null;
    throw getNotFoundError(cmd);
  };
  module3.exports = which;
  which.sync = whichSync;
});

// ../../node_modules/.pnpm/path-key@3.1.1/node_modules/path-key/index.js
var require_path_key = __commonJS((exports2, module3) => {
  "use strict";
  const pathKey = (options = {}) => {
    const environment = options.env || process.env;
    const platform = options.platform || process.platform;
    if (platform !== "win32") {
      return "PATH";
    }
    return Object.keys(environment).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
  };
  module3.exports = pathKey;
  module3.exports.default = pathKey;
});

// ../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/util/resolveCommand.js
var require_resolveCommand = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const which = require_which();
  const getPathKey = require_path_key();
  function resolveCommandAttempt(parsed, withoutPathExt) {
    const env = parsed.options.env || process.env;
    const cwd = process.cwd();
    const hasCustomCwd = parsed.options.cwd != null;
    const shouldSwitchCwd = hasCustomCwd && process.chdir !== void 0 && !process.chdir.disabled;
    if (shouldSwitchCwd) {
      try {
        process.chdir(parsed.options.cwd);
      } catch (err) {
      }
    }
    let resolved;
    try {
      resolved = which.sync(parsed.command, {
        path: env[getPathKey({env})],
        pathExt: withoutPathExt ? path19.delimiter : void 0
      });
    } catch (e) {
    } finally {
      if (shouldSwitchCwd) {
        process.chdir(cwd);
      }
    }
    if (resolved) {
      resolved = path19.resolve(hasCustomCwd ? parsed.options.cwd : "", resolved);
    }
    return resolved;
  }
  function resolveCommand(parsed) {
    return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
  }
  module3.exports = resolveCommand;
});

// ../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/util/escape.js
var require_escape = __commonJS((exports2, module3) => {
  "use strict";
  const metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
  function escapeCommand(arg11) {
    arg11 = arg11.replace(metaCharsRegExp, "^$1");
    return arg11;
  }
  function escapeArgument(arg11, doubleEscapeMetaChars) {
    arg11 = `${arg11}`;
    arg11 = arg11.replace(/(\\*)"/g, '$1$1\\"');
    arg11 = arg11.replace(/(\\*)$/, "$1$1");
    arg11 = `"${arg11}"`;
    arg11 = arg11.replace(metaCharsRegExp, "^$1");
    if (doubleEscapeMetaChars) {
      arg11 = arg11.replace(metaCharsRegExp, "^$1");
    }
    return arg11;
  }
  module3.exports.command = escapeCommand;
  module3.exports.argument = escapeArgument;
});

// ../../node_modules/.pnpm/shebang-regex@3.0.0/node_modules/shebang-regex/index.js
var require_shebang_regex = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = /^#!(.*)/;
});

// ../../node_modules/.pnpm/shebang-command@2.0.0/node_modules/shebang-command/index.js
var require_shebang_command = __commonJS((exports2, module3) => {
  "use strict";
  const shebangRegex = require_shebang_regex();
  module3.exports = (string = "") => {
    const match = string.match(shebangRegex);
    if (!match) {
      return null;
    }
    const [path19, argument] = match[0].replace(/#! ?/, "").split(" ");
    const binary = path19.split("/").pop();
    if (binary === "env") {
      return argument;
    }
    return argument ? `${binary} ${argument}` : binary;
  };
});

// ../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/util/readShebang.js
var require_readShebang = __commonJS((exports2, module3) => {
  "use strict";
  const fs17 = require("fs");
  const shebangCommand = require_shebang_command();
  function readShebang(command) {
    const size = 150;
    const buffer = Buffer.alloc(size);
    let fd;
    try {
      fd = fs17.openSync(command, "r");
      fs17.readSync(fd, buffer, 0, size, 0);
      fs17.closeSync(fd);
    } catch (e) {
    }
    return shebangCommand(buffer.toString());
  }
  module3.exports = readShebang;
});

// ../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/parse.js
var require_parse = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const resolveCommand = require_resolveCommand();
  const escape2 = require_escape();
  const readShebang = require_readShebang();
  const isWin = process.platform === "win32";
  const isExecutableRegExp = /\.(?:com|exe)$/i;
  const isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
  function detectShebang(parsed) {
    parsed.file = resolveCommand(parsed);
    const shebang = parsed.file && readShebang(parsed.file);
    if (shebang) {
      parsed.args.unshift(parsed.file);
      parsed.command = shebang;
      return resolveCommand(parsed);
    }
    return parsed.file;
  }
  function parseNonShell(parsed) {
    if (!isWin) {
      return parsed;
    }
    const commandFile = detectShebang(parsed);
    const needsShell = !isExecutableRegExp.test(commandFile);
    if (parsed.options.forceShell || needsShell) {
      const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
      parsed.command = path19.normalize(parsed.command);
      parsed.command = escape2.command(parsed.command);
      parsed.args = parsed.args.map((arg11) => escape2.argument(arg11, needsDoubleEscapeMetaChars));
      const shellCommand = [parsed.command].concat(parsed.args).join(" ");
      parsed.args = ["/d", "/s", "/c", `"${shellCommand}"`];
      parsed.command = process.env.comspec || "cmd.exe";
      parsed.options.windowsVerbatimArguments = true;
    }
    return parsed;
  }
  function parse(command, args2, options) {
    if (args2 && !Array.isArray(args2)) {
      options = args2;
      args2 = null;
    }
    args2 = args2 ? args2.slice(0) : [];
    options = Object.assign({}, options);
    const parsed = {
      command,
      args: args2,
      options,
      file: void 0,
      original: {
        command,
        args: args2
      }
    };
    return options.shell ? parsed : parseNonShell(parsed);
  }
  module3.exports = parse;
});

// ../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/enoent.js
var require_enoent = __commonJS((exports2, module3) => {
  "use strict";
  const isWin = process.platform === "win32";
  function notFoundError(original, syscall) {
    return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
      code: "ENOENT",
      errno: "ENOENT",
      syscall: `${syscall} ${original.command}`,
      path: original.command,
      spawnargs: original.args
    });
  }
  function hookChildProcess(cp, parsed) {
    if (!isWin) {
      return;
    }
    const originalEmit = cp.emit;
    cp.emit = function(name, arg1) {
      if (name === "exit") {
        const err = verifyENOENT(arg1, parsed, "spawn");
        if (err) {
          return originalEmit.call(cp, "error", err);
        }
      }
      return originalEmit.apply(cp, arguments);
    };
  }
  function verifyENOENT(status, parsed) {
    if (isWin && status === 1 && !parsed.file) {
      return notFoundError(parsed.original, "spawn");
    }
    return null;
  }
  function verifyENOENTSync(status, parsed) {
    if (isWin && status === 1 && !parsed.file) {
      return notFoundError(parsed.original, "spawnSync");
    }
    return null;
  }
  module3.exports = {
    hookChildProcess,
    verifyENOENT,
    verifyENOENTSync,
    notFoundError
  };
});

// ../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/index.js
var require_cross_spawn = __commonJS((exports2, module3) => {
  "use strict";
  const cp = require("child_process");
  const parse = require_parse();
  const enoent = require_enoent();
  function spawn(command, args2, options) {
    const parsed = parse(command, args2, options);
    const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
    enoent.hookChildProcess(spawned, parsed);
    return spawned;
  }
  function spawnSync(command, args2, options) {
    const parsed = parse(command, args2, options);
    const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);
    result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
    return result;
  }
  module3.exports = spawn;
  module3.exports.spawn = spawn;
  module3.exports.sync = spawnSync;
  module3.exports._parse = parse;
  module3.exports._enoent = enoent;
});

// ../generator-helper/dist/byline.js
var require_byline2 = __commonJS((exports2, module3) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.createLineStream = void 0;
  const stream = require("stream");
  const util4 = require("util");
  function byline(readStream, options) {
    return module3.exports.createStream(readStream, options);
  }
  exports2.default = byline;
  module3.exports.createStream = function(readStream, options) {
    if (readStream) {
      return createLineStream(readStream, options);
    } else {
      return new LineStream(options);
    }
  };
  function createLineStream(readStream, options) {
    if (!readStream) {
      throw new Error("expected readStream");
    }
    if (!readStream.readable) {
      throw new Error("readStream must be readable");
    }
    const ls = new LineStream(options);
    readStream.pipe(ls);
    return ls;
  }
  exports2.createLineStream = createLineStream;
  module3.exports.LineStream = LineStream;
  function LineStream(options) {
    stream.Transform.call(this, options);
    options = options || {};
    this._readableState.objectMode = true;
    this._lineBuffer = [];
    this._keepEmptyLines = options.keepEmptyLines || false;
    this._lastChunkEndedWithCR = false;
    this.on("pipe", function(src) {
      if (!this.encoding) {
        if (src instanceof stream.Readable) {
          this.encoding = src._readableState.encoding;
        }
      }
    });
  }
  util4.inherits(LineStream, stream.Transform);
  LineStream.prototype._transform = function(chunk, encoding, done) {
    encoding = encoding || "utf8";
    if (Buffer.isBuffer(chunk)) {
      if (encoding == "buffer") {
        chunk = chunk.toString();
        encoding = "utf8";
      } else {
        chunk = chunk.toString(encoding);
      }
    }
    this._chunkEncoding = encoding;
    const lines = chunk.split(/\r\n|\r|\n/g);
    if (this._lastChunkEndedWithCR && chunk[0] == "\n") {
      lines.shift();
    }
    if (this._lineBuffer.length > 0) {
      this._lineBuffer[this._lineBuffer.length - 1] += lines[0];
      lines.shift();
    }
    this._lastChunkEndedWithCR = chunk[chunk.length - 1] == "\r";
    this._lineBuffer = this._lineBuffer.concat(lines);
    this._pushBuffer(encoding, 1, done);
  };
  LineStream.prototype._pushBuffer = function(encoding, keep, done) {
    while (this._lineBuffer.length > keep) {
      const line = this._lineBuffer.shift();
      if (this._keepEmptyLines || line.length > 0) {
        if (!this.push(this._reencode(line, encoding))) {
          const self2 = this;
          setImmediate(function() {
            self2._pushBuffer(encoding, keep, done);
          });
          return;
        }
      }
    }
    done();
  };
  LineStream.prototype._flush = function(done) {
    this._pushBuffer(this._chunkEncoding, 0, done);
  };
  LineStream.prototype._reencode = function(line, chunkEncoding) {
    if (this.encoding && this.encoding != chunkEncoding) {
      return Buffer.from(line, chunkEncoding).toString(this.encoding);
    } else if (this.encoding) {
      return line;
    } else {
      return Buffer.from(line, chunkEncoding);
    }
  };
});

// ../../node_modules/.pnpm/debug@4.2.0/node_modules/debug/src/common.js
var require_common2 = __commonJS((exports2, module3) => {
  function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = require_ms();
    Object.keys(env).forEach((key) => {
      createDebug[key] = env[key];
    });
    createDebug.instances = [];
    createDebug.names = [];
    createDebug.skips = [];
    createDebug.formatters = {};
    function selectColor(namespace) {
      let hash = 0;
      for (let i = 0; i < namespace.length; i++) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0;
      }
      return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    function createDebug(namespace) {
      let prevTime;
      function debug3(...args2) {
        if (!debug3.enabled) {
          return;
        }
        const self2 = debug3;
        const curr = Number(new Date());
        const ms = curr - (prevTime || curr);
        self2.diff = ms;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        args2[0] = createDebug.coerce(args2[0]);
        if (typeof args2[0] !== "string") {
          args2.unshift("%O");
        }
        let index = 0;
        args2[0] = args2[0].replace(/%([a-zA-Z%])/g, (match, format11) => {
          if (match === "%%") {
            return match;
          }
          index++;
          const formatter = createDebug.formatters[format11];
          if (typeof formatter === "function") {
            const val = args2[index];
            match = formatter.call(self2, val);
            args2.splice(index, 1);
            index--;
          }
          return match;
        });
        createDebug.formatArgs.call(self2, args2);
        const logFn = self2.log || createDebug.log;
        logFn.apply(self2, args2);
      }
      debug3.namespace = namespace;
      debug3.enabled = createDebug.enabled(namespace);
      debug3.useColors = createDebug.useColors();
      debug3.color = createDebug.selectColor(namespace);
      debug3.destroy = destroy;
      debug3.extend = extend;
      if (typeof createDebug.init === "function") {
        createDebug.init(debug3);
      }
      createDebug.instances.push(debug3);
      return debug3;
    }
    function destroy() {
      const index = createDebug.instances.indexOf(this);
      if (index !== -1) {
        createDebug.instances.splice(index, 1);
        return true;
      }
      return false;
    }
    function extend(namespace, delimiter) {
      const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.names = [];
      createDebug.skips = [];
      let i;
      const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
      const len = split.length;
      for (i = 0; i < len; i++) {
        if (!split[i]) {
          continue;
        }
        namespaces = split[i].replace(/\*/g, ".*?");
        if (namespaces[0] === "-") {
          createDebug.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
        } else {
          createDebug.names.push(new RegExp("^" + namespaces + "$"));
        }
      }
      for (i = 0; i < createDebug.instances.length; i++) {
        const instance = createDebug.instances[i];
        instance.enabled = createDebug.enabled(instance.namespace);
      }
    }
    function disable() {
      const namespaces = [
        ...createDebug.names.map(toNamespace),
        ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
      ].join(",");
      createDebug.enable("");
      return namespaces;
    }
    function enabled(name) {
      if (name[name.length - 1] === "*") {
        return true;
      }
      let i;
      let len;
      for (i = 0, len = createDebug.skips.length; i < len; i++) {
        if (createDebug.skips[i].test(name)) {
          return false;
        }
      }
      for (i = 0, len = createDebug.names.length; i < len; i++) {
        if (createDebug.names[i].test(name)) {
          return true;
        }
      }
      return false;
    }
    function toNamespace(regexp) {
      return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
    }
    function coerce(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  module3.exports = setup;
});

// ../../node_modules/.pnpm/debug@4.2.0/node_modules/debug/src/browser.js
var require_browser2 = __commonJS((exports2, module3) => {
  exports2.formatArgs = formatArgs;
  exports2.save = save;
  exports2.load = load;
  exports2.useColors = useColors;
  exports2.storage = localstorage();
  exports2.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
  ];
  function useColors() {
    if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
      return true;
    }
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  function formatArgs(args2) {
    args2[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args2[0] + (this.useColors ? "%c " : " ") + "+" + module3.exports.humanize(this.diff);
    if (!this.useColors) {
      return;
    }
    const c = "color: " + this.color;
    args2.splice(1, 0, c, "color: inherit");
    let index = 0;
    let lastC = 0;
    args2[0].replace(/%[a-zA-Z%]/g, (match) => {
      if (match === "%%") {
        return;
      }
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args2.splice(lastC, 0, c);
  }
  exports2.log = console.debug || console.log || (() => {
  });
  function save(namespaces) {
    try {
      if (namespaces) {
        exports2.storage.setItem("debug", namespaces);
      } else {
        exports2.storage.removeItem("debug");
      }
    } catch (error) {
    }
  }
  function load() {
    let r;
    try {
      r = exports2.storage.getItem("debug");
    } catch (error) {
    }
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  }
  function localstorage() {
    try {
      return localStorage;
    } catch (error) {
    }
  }
  module3.exports = require_common2()(exports2);
  const {formatters} = module3.exports;
  formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (error) {
      return "[UnexpectedJSONParseError]: " + error.message;
    }
  };
});

// ../../node_modules/.pnpm/debug@4.2.0/node_modules/debug/src/node.js
var require_node2 = __commonJS((exports2, module3) => {
  const tty = require("tty");
  const util4 = require("util");
  exports2.init = init;
  exports2.log = log;
  exports2.formatArgs = formatArgs;
  exports2.save = save;
  exports2.load = load;
  exports2.useColors = useColors;
  exports2.colors = [6, 2, 3, 4, 5, 1];
  try {
    const supportsColor = require_supports_color();
    if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
      exports2.colors = [
        20,
        21,
        26,
        27,
        32,
        33,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        56,
        57,
        62,
        63,
        68,
        69,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        92,
        93,
        98,
        99,
        112,
        113,
        128,
        129,
        134,
        135,
        148,
        149,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        178,
        179,
        184,
        185,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        214,
        215,
        220,
        221
      ];
    }
  } catch (error) {
  }
  exports2.inspectOpts = Object.keys(process.env).filter((key) => {
    return /^debug_/i.test(key);
  }).reduce((obj, key) => {
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_2, k) => {
      return k.toUpperCase();
    });
    let val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) {
      val = true;
    } else if (/^(no|off|false|disabled)$/i.test(val)) {
      val = false;
    } else if (val === "null") {
      val = null;
    } else {
      val = Number(val);
    }
    obj[prop] = val;
    return obj;
  }, {});
  function useColors() {
    return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
  }
  function formatArgs(args2) {
    const {namespace: name, useColors: useColors2} = this;
    if (useColors2) {
      const c = this.color;
      const colorCode = "[3" + (c < 8 ? c : "8;5;" + c);
      const prefix = `  ${colorCode};1m${name} [0m`;
      args2[0] = prefix + args2[0].split("\n").join("\n" + prefix);
      args2.push(colorCode + "m+" + module3.exports.humanize(this.diff) + "[0m");
    } else {
      args2[0] = getDate() + name + " " + args2[0];
    }
  }
  function getDate() {
    if (exports2.inspectOpts.hideDate) {
      return "";
    }
    return new Date().toISOString() + " ";
  }
  function log(...args2) {
    return process.stderr.write(util4.format(...args2) + "\n");
  }
  function save(namespaces) {
    if (namespaces) {
      process.env.DEBUG = namespaces;
    } else {
      delete process.env.DEBUG;
    }
  }
  function load() {
    return process.env.DEBUG;
  }
  function init(debug3) {
    debug3.inspectOpts = {};
    const keys = Object.keys(exports2.inspectOpts);
    for (let i = 0; i < keys.length; i++) {
      debug3.inspectOpts[keys[i]] = exports2.inspectOpts[keys[i]];
    }
  }
  module3.exports = require_common2()(exports2);
  const {formatters} = module3.exports;
  formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util4.inspect(v, this.inspectOpts).replace(/\s*\n\s*/g, " ");
  };
  formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util4.inspect(v, this.inspectOpts);
  };
});

// ../../node_modules/.pnpm/debug@4.2.0/node_modules/debug/src/index.js
var require_src2 = __commonJS((exports2, module3) => {
  if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
    module3.exports = require_browser2();
  } else {
    module3.exports = require_node2();
  }
});

// ../generator-helper/dist/GeneratorProcess.js
var require_GeneratorProcess = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GeneratorProcess = exports2.GeneratorError = void 0;
  const cross_spawn_1 = require_cross_spawn();
  const byline_1 = __importDefault(require_byline2());
  const chalk_1 = __importDefault(require_source());
  const debug_1 = __importDefault(require_src2());
  const debug3 = debug_1.default("GeneratorProcess");
  let globalMessageId = 1;
  class GeneratorError extends Error {
    constructor(message, code, data) {
      super(message);
      this.code = code;
      this.data = data;
    }
  }
  exports2.GeneratorError = GeneratorError;
  class GeneratorProcess {
    constructor(executablePath) {
      this.executablePath = executablePath;
      this.listeners = {};
      this.exitCode = null;
      this.stderrLogs = "";
    }
    async init() {
      if (!this.initPromise) {
        this.initPromise = this.initSingleton();
      }
      return this.initPromise;
    }
    initSingleton() {
      return new Promise((resolve, reject) => {
        try {
          this.child = cross_spawn_1.spawn(this.executablePath, {
            stdio: ["pipe", "inherit", "pipe"],
            env: {
              ...process.env,
              PRISMA_GENERATOR_INVOCATION: "true"
            },
            shell: true
          });
          this.child.on("exit", (code) => {
            this.exitCode = code;
            if (code && code > 0 && this.currentGenerateDeferred) {
              this.currentGenerateDeferred.reject(new Error(this.stderrLogs.split("\n").slice(-5).join("\n")));
            }
          });
          this.child.on("error", (err) => {
            this.lastError = err;
            if (err.message.includes("EACCES")) {
              reject(new Error(`The executable at ${this.executablePath} lacks the right chmod. Please use ${chalk_1.default.bold(`chmod +x ${this.executablePath}`)}`));
            } else {
              reject(err);
            }
          });
          byline_1.default(this.child.stderr).on("data", (line) => {
            const response = String(line);
            this.stderrLogs += response + "\n";
            let data;
            try {
              data = JSON.parse(response);
            } catch (e) {
              debug3(response);
            }
            if (data) {
              this.handleResponse(data);
            }
          });
          setTimeout(() => {
            if (this.exitCode && this.exitCode > 0) {
              reject(new Error(`Generator at ${this.executablePath} could not start:

${this.stderrLogs}`));
            } else {
              resolve();
            }
          }, 200);
        } catch (e) {
          reject(e);
        }
      });
    }
    handleResponse(data) {
      if (data.jsonrpc && data.id) {
        if (typeof data.id !== "number") {
          throw new Error(`message.id has to be a number. Found value ${data.id}`);
        }
        if (this.listeners[data.id]) {
          if (data.error) {
            const error = new GeneratorError(data.error.message, data.error.code, data.error.data);
            this.listeners[data.id](null, error);
          } else {
            this.listeners[data.id](data.result);
          }
          delete this.listeners[data.id];
        }
      }
    }
    registerListener(messageId, cb) {
      this.listeners[messageId] = cb;
    }
    sendMessage(message) {
      this.child.stdin.write(JSON.stringify(message) + "\n");
    }
    getMessageId() {
      return globalMessageId++;
    }
    stop() {
      if (!this.child.killed) {
        this.child.kill();
      }
    }
    getManifest() {
      return new Promise((resolve, reject) => {
        const messageId = this.getMessageId();
        this.registerListener(messageId, (result, error) => {
          if (error) {
            return reject(error);
          }
          if (result.manifest) {
            resolve(result.manifest);
          } else {
            resolve(null);
          }
        });
        this.sendMessage({
          jsonrpc: "2.0",
          method: "getManifest",
          params: {},
          id: messageId
        });
      });
    }
    generate(options) {
      return new Promise((resolve, reject) => {
        const messageId = this.getMessageId();
        this.currentGenerateDeferred = {resolve, reject};
        this.registerListener(messageId, (result, error) => {
          if (error) {
            reject(error);
            this.currentGenerateDeferred = void 0;
            return;
          }
          resolve(result);
          this.currentGenerateDeferred = void 0;
        });
        this.sendMessage({
          jsonrpc: "2.0",
          method: "generate",
          params: options,
          id: messageId
        });
      });
    }
  }
  exports2.GeneratorProcess = GeneratorProcess;
});

// ../generator-helper/dist/generatorHandler.js
var require_generatorHandler = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.generatorHandler = void 0;
  const byline_1 = __importDefault(require_byline2());
  function generatorHandler(handler) {
    byline_1.default(process.stdin).on("data", async (line) => {
      const json = JSON.parse(String(line));
      if (json.method === "generate" && json.params) {
        try {
          const result = await handler.onGenerate(json.params);
          respond({
            jsonrpc: "2.0",
            result,
            id: json.id
          });
        } catch (e) {
          respond({
            jsonrpc: "2.0",
            error: {
              code: -32e3,
              message: e.stack || e.message,
              data: null
            },
            id: json.id
          });
        }
      }
      if (json.method === "getManifest") {
        if (handler.onManifest) {
          try {
            const manifest = handler.onManifest();
            respond({
              jsonrpc: "2.0",
              result: {
                manifest
              },
              id: json.id
            });
          } catch (e) {
            respond({
              jsonrpc: "2.0",
              error: {
                code: -32e3,
                message: e.stack || e.message,
                data: null
              },
              id: json.id
            });
          }
        } else {
          respond({
            jsonrpc: "2.0",
            result: {
              manifest: null
            },
            id: json.id
          });
        }
      }
    });
    process.stdin.resume();
  }
  exports2.generatorHandler = generatorHandler;
  function respond(response) {
    console.error(JSON.stringify(response));
  }
});

// ../generator-helper/dist/types.js
var require_types = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
});

// ../generator-helper/dist/dmmf.js
var require_dmmf = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DMMF = void 0;
  var DMMF;
  (function(DMMF2) {
    let ModelAction;
    (function(ModelAction2) {
      ModelAction2["findOne"] = "findOne";
      ModelAction2["findFirst"] = "findFirst";
      ModelAction2["findMany"] = "findMany";
      ModelAction2["create"] = "create";
      ModelAction2["update"] = "update";
      ModelAction2["updateMany"] = "updateMany";
      ModelAction2["upsert"] = "upsert";
      ModelAction2["delete"] = "delete";
      ModelAction2["deleteMany"] = "deleteMany";
    })(ModelAction = DMMF2.ModelAction || (DMMF2.ModelAction = {}));
  })(DMMF = exports2.DMMF || (exports2.DMMF = {}));
});

// ../generator-helper/dist/index.js
var require_dist3 = __commonJS((exports2) => {
  "use strict";
  var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, {enumerable: true, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __exportStar2 = exports2 && exports2.__exportStar || function(m, exports3) {
    for (var p in m)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
        __createBinding(exports3, m, p);
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.generatorHandler = exports2.GeneratorError = exports2.GeneratorProcess = void 0;
  var GeneratorProcess_1 = require_GeneratorProcess();
  Object.defineProperty(exports2, "GeneratorProcess", {enumerable: true, get: function() {
    return GeneratorProcess_1.GeneratorProcess;
  }});
  Object.defineProperty(exports2, "GeneratorError", {enumerable: true, get: function() {
    return GeneratorProcess_1.GeneratorError;
  }});
  var generatorHandler_1 = require_generatorHandler();
  Object.defineProperty(exports2, "generatorHandler", {enumerable: true, get: function() {
    return generatorHandler_1.generatorHandler;
  }});
  __exportStar2(require_types(), exports2);
  __exportStar2(require_dmmf(), exports2);
});

// ../sdk/dist/Generator.js
var require_Generator = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.Generator = void 0;
  const generator_helper_1 = require_dist3();
  class Generator2 {
    constructor(executablePath) {
      this.executablePath = executablePath;
      this.manifest = null;
      this.generatorProcess = new generator_helper_1.GeneratorProcess(this.executablePath);
    }
    async init() {
      await this.generatorProcess.init();
      this.manifest = await this.generatorProcess.getManifest();
    }
    stop() {
      this.generatorProcess.stop();
    }
    generate() {
      if (!this.options) {
        throw new Error(`Please first run .setOptions() on the Generator to initialize the options`);
      }
      return this.generatorProcess.generate(this.options);
    }
    setOptions(options) {
      this.options = options;
    }
    setBinaryPaths(binaryPaths) {
      if (!this.options) {
        throw new Error(`Please first run .setOptions() on the Generator to initialize the options`);
      }
      this.options.binaryPaths = binaryPaths;
    }
  }
  exports2.Generator = Generator2;
});

// ../../node_modules/.pnpm/indent-string@4.0.0/node_modules/indent-string/index.js
var require_indent_string = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (string, count = 1, options) => {
    options = {
      indent: " ",
      includeEmptyLines: false,
      ...options
    };
    if (typeof string !== "string") {
      throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof string}\``);
    }
    if (typeof count !== "number") {
      throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof count}\``);
    }
    if (typeof options.indent !== "string") {
      throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof options.indent}\``);
    }
    if (count === 0) {
      return string;
    }
    const regex = options.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
    return string.replace(regex, options.indent.repeat(count));
  };
});

// ../../node_modules/.pnpm/clean-stack@2.2.0/node_modules/clean-stack/index.js
var require_clean_stack = __commonJS((exports2, module3) => {
  "use strict";
  const os3 = require("os");
  const extractPathRegex = /\s+at.*(?:\(|\s)(.*)\)?/;
  const pathRegex = /^(?:(?:(?:node|(?:internal\/[\w/]*|.*node_modules\/(?:babel-polyfill|pirates)\/.*)?\w+)\.js:\d+:\d+)|native)/;
  const homeDir = typeof os3.homedir === "undefined" ? "" : os3.homedir();
  module3.exports = (stack, options) => {
    options = Object.assign({pretty: false}, options);
    return stack.replace(/\\/g, "/").split("\n").filter((line) => {
      const pathMatches = line.match(extractPathRegex);
      if (pathMatches === null || !pathMatches[1]) {
        return true;
      }
      const match = pathMatches[1];
      if (match.includes(".app/Contents/Resources/electron.asar") || match.includes(".app/Contents/Resources/default_app.asar")) {
        return false;
      }
      return !pathRegex.test(match);
    }).filter((line) => line.trim() !== "").map((line) => {
      if (options.pretty) {
        return line.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, "~")));
      }
      return line;
    }).join("\n");
  };
});

// ../../node_modules/.pnpm/aggregate-error@3.1.0/node_modules/aggregate-error/index.js
var require_aggregate_error = __commonJS((exports2, module3) => {
  "use strict";
  const indentString = require_indent_string();
  const cleanStack = require_clean_stack();
  const cleanInternalStack = (stack) => stack.replace(/\s+at .*aggregate-error\/index.js:\d+:\d+\)?/g, "");
  class AggregateError extends Error {
    constructor(errors) {
      if (!Array.isArray(errors)) {
        throw new TypeError(`Expected input to be an Array, got ${typeof errors}`);
      }
      errors = [...errors].map((error) => {
        if (error instanceof Error) {
          return error;
        }
        if (error !== null && typeof error === "object") {
          return Object.assign(new Error(error.message), error);
        }
        return new Error(error);
      });
      let message = errors.map((error) => {
        return typeof error.stack === "string" ? cleanInternalStack(cleanStack(error.stack)) : String(error);
      }).join("\n");
      message = "\n" + indentString(message, 4);
      super(message);
      this.name = "AggregateError";
      Object.defineProperty(this, "_errors", {value: errors});
    }
    *[Symbol.iterator]() {
      for (const error of this._errors) {
        yield error;
      }
    }
  }
  module3.exports = AggregateError;
});

// ../../node_modules/.pnpm/p-map@4.0.0/node_modules/p-map/index.js
var require_p_map = __commonJS((exports2, module3) => {
  "use strict";
  const AggregateError = require_aggregate_error();
  module3.exports = async (iterable, mapper, {
    concurrency = Infinity,
    stopOnError = true
  } = {}) => {
    return new Promise((resolve, reject) => {
      if (typeof mapper !== "function") {
        throw new TypeError("Mapper function is required");
      }
      if (!((Number.isSafeInteger(concurrency) || concurrency === Infinity) && concurrency >= 1)) {
        throw new TypeError(`Expected \`concurrency\` to be an integer from 1 and up or \`Infinity\`, got \`${concurrency}\` (${typeof concurrency})`);
      }
      const result = [];
      const errors = [];
      const iterator = iterable[Symbol.iterator]();
      let isRejected = false;
      let isIterableDone = false;
      let resolvingCount = 0;
      let currentIndex = 0;
      const next = () => {
        if (isRejected) {
          return;
        }
        const nextItem = iterator.next();
        const index = currentIndex;
        currentIndex++;
        if (nextItem.done) {
          isIterableDone = true;
          if (resolvingCount === 0) {
            if (!stopOnError && errors.length !== 0) {
              reject(new AggregateError(errors));
            } else {
              resolve(result);
            }
          }
          return;
        }
        resolvingCount++;
        (async () => {
          try {
            const element = await nextItem.value;
            result[index] = await mapper(element, index);
            resolvingCount--;
            next();
          } catch (error) {
            if (stopOnError) {
              isRejected = true;
              reject(error);
            } else {
              errors.push(error);
              resolvingCount--;
              next();
            }
          }
        })();
      };
      for (let i = 0; i < concurrency; i++) {
        next();
        if (isIterableDone) {
          break;
        }
      }
    });
  };
});

// ../../node_modules/.pnpm/strip-final-newline@2.0.0/node_modules/strip-final-newline/index.js
var require_strip_final_newline = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (input) => {
    const LF = typeof input === "string" ? "\n" : "\n".charCodeAt();
    const CR = typeof input === "string" ? "\r" : "\r".charCodeAt();
    if (input[input.length - 1] === LF) {
      input = input.slice(0, input.length - 1);
    }
    if (input[input.length - 1] === CR) {
      input = input.slice(0, input.length - 1);
    }
    return input;
  };
});

// ../../node_modules/.pnpm/npm-run-path@4.0.1/node_modules/npm-run-path/index.js
var require_npm_run_path = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const pathKey = require_path_key();
  const npmRunPath = (options) => {
    options = {
      cwd: process.cwd(),
      path: process.env[pathKey()],
      execPath: process.execPath,
      ...options
    };
    let previous;
    let cwdPath = path19.resolve(options.cwd);
    const result = [];
    while (previous !== cwdPath) {
      result.push(path19.join(cwdPath, "node_modules/.bin"));
      previous = cwdPath;
      cwdPath = path19.resolve(cwdPath, "..");
    }
    const execPathDir = path19.resolve(options.cwd, options.execPath, "..");
    result.push(execPathDir);
    return result.concat(options.path).join(path19.delimiter);
  };
  module3.exports = npmRunPath;
  module3.exports.default = npmRunPath;
  module3.exports.env = (options) => {
    options = {
      env: process.env,
      ...options
    };
    const env = {...options.env};
    const path20 = pathKey({env});
    options.path = env[path20];
    env[path20] = module3.exports(options);
    return env;
  };
});

// ../../node_modules/.pnpm/mimic-fn@2.1.0/node_modules/mimic-fn/index.js
var require_mimic_fn = __commonJS((exports2, module3) => {
  "use strict";
  const mimicFn = (to, from) => {
    for (const prop of Reflect.ownKeys(from)) {
      Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
    }
    return to;
  };
  module3.exports = mimicFn;
  module3.exports.default = mimicFn;
});

// ../../node_modules/.pnpm/onetime@5.1.0/node_modules/onetime/index.js
var require_onetime = __commonJS((exports2, module3) => {
  "use strict";
  const mimicFn = require_mimic_fn();
  const calledFunctions = new WeakMap();
  const oneTime = (fn, options = {}) => {
    if (typeof fn !== "function") {
      throw new TypeError("Expected a function");
    }
    let ret;
    let isCalled = false;
    let callCount = 0;
    const functionName = fn.displayName || fn.name || "<anonymous>";
    const onetime = function(...args2) {
      calledFunctions.set(onetime, ++callCount);
      if (isCalled) {
        if (options.throw === true) {
          throw new Error(`Function \`${functionName}\` can only be called once`);
        }
        return ret;
      }
      isCalled = true;
      ret = fn.apply(this, args2);
      fn = null;
      return ret;
    };
    mimicFn(onetime, fn);
    calledFunctions.set(onetime, callCount);
    return onetime;
  };
  module3.exports = oneTime;
  module3.exports.default = oneTime;
  module3.exports.callCount = (fn) => {
    if (!calledFunctions.has(fn)) {
      throw new Error(`The given function \`${fn.name}\` is not wrapped by the \`onetime\` package`);
    }
    return calledFunctions.get(fn);
  };
});

// ../../node_modules/.pnpm/human-signals@1.1.1/node_modules/human-signals/build/src/core.js
var require_core = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.SIGNALS = void 0;
  const SIGNALS = [
    {
      name: "SIGHUP",
      number: 1,
      action: "terminate",
      description: "Terminal closed",
      standard: "posix"
    },
    {
      name: "SIGINT",
      number: 2,
      action: "terminate",
      description: "User interruption with CTRL-C",
      standard: "ansi"
    },
    {
      name: "SIGQUIT",
      number: 3,
      action: "core",
      description: "User interruption with CTRL-\\",
      standard: "posix"
    },
    {
      name: "SIGILL",
      number: 4,
      action: "core",
      description: "Invalid machine instruction",
      standard: "ansi"
    },
    {
      name: "SIGTRAP",
      number: 5,
      action: "core",
      description: "Debugger breakpoint",
      standard: "posix"
    },
    {
      name: "SIGABRT",
      number: 6,
      action: "core",
      description: "Aborted",
      standard: "ansi"
    },
    {
      name: "SIGIOT",
      number: 6,
      action: "core",
      description: "Aborted",
      standard: "bsd"
    },
    {
      name: "SIGBUS",
      number: 7,
      action: "core",
      description: "Bus error due to misaligned, non-existing address or paging error",
      standard: "bsd"
    },
    {
      name: "SIGEMT",
      number: 7,
      action: "terminate",
      description: "Command should be emulated but is not implemented",
      standard: "other"
    },
    {
      name: "SIGFPE",
      number: 8,
      action: "core",
      description: "Floating point arithmetic error",
      standard: "ansi"
    },
    {
      name: "SIGKILL",
      number: 9,
      action: "terminate",
      description: "Forced termination",
      standard: "posix",
      forced: true
    },
    {
      name: "SIGUSR1",
      number: 10,
      action: "terminate",
      description: "Application-specific signal",
      standard: "posix"
    },
    {
      name: "SIGSEGV",
      number: 11,
      action: "core",
      description: "Segmentation fault",
      standard: "ansi"
    },
    {
      name: "SIGUSR2",
      number: 12,
      action: "terminate",
      description: "Application-specific signal",
      standard: "posix"
    },
    {
      name: "SIGPIPE",
      number: 13,
      action: "terminate",
      description: "Broken pipe or socket",
      standard: "posix"
    },
    {
      name: "SIGALRM",
      number: 14,
      action: "terminate",
      description: "Timeout or timer",
      standard: "posix"
    },
    {
      name: "SIGTERM",
      number: 15,
      action: "terminate",
      description: "Termination",
      standard: "ansi"
    },
    {
      name: "SIGSTKFLT",
      number: 16,
      action: "terminate",
      description: "Stack is empty or overflowed",
      standard: "other"
    },
    {
      name: "SIGCHLD",
      number: 17,
      action: "ignore",
      description: "Child process terminated, paused or unpaused",
      standard: "posix"
    },
    {
      name: "SIGCLD",
      number: 17,
      action: "ignore",
      description: "Child process terminated, paused or unpaused",
      standard: "other"
    },
    {
      name: "SIGCONT",
      number: 18,
      action: "unpause",
      description: "Unpaused",
      standard: "posix",
      forced: true
    },
    {
      name: "SIGSTOP",
      number: 19,
      action: "pause",
      description: "Paused",
      standard: "posix",
      forced: true
    },
    {
      name: "SIGTSTP",
      number: 20,
      action: "pause",
      description: 'Paused using CTRL-Z or "suspend"',
      standard: "posix"
    },
    {
      name: "SIGTTIN",
      number: 21,
      action: "pause",
      description: "Background process cannot read terminal input",
      standard: "posix"
    },
    {
      name: "SIGBREAK",
      number: 21,
      action: "terminate",
      description: "User interruption with CTRL-BREAK",
      standard: "other"
    },
    {
      name: "SIGTTOU",
      number: 22,
      action: "pause",
      description: "Background process cannot write to terminal output",
      standard: "posix"
    },
    {
      name: "SIGURG",
      number: 23,
      action: "ignore",
      description: "Socket received out-of-band data",
      standard: "bsd"
    },
    {
      name: "SIGXCPU",
      number: 24,
      action: "core",
      description: "Process timed out",
      standard: "bsd"
    },
    {
      name: "SIGXFSZ",
      number: 25,
      action: "core",
      description: "File too big",
      standard: "bsd"
    },
    {
      name: "SIGVTALRM",
      number: 26,
      action: "terminate",
      description: "Timeout or timer",
      standard: "bsd"
    },
    {
      name: "SIGPROF",
      number: 27,
      action: "terminate",
      description: "Timeout or timer",
      standard: "bsd"
    },
    {
      name: "SIGWINCH",
      number: 28,
      action: "ignore",
      description: "Terminal window size changed",
      standard: "bsd"
    },
    {
      name: "SIGIO",
      number: 29,
      action: "terminate",
      description: "I/O is available",
      standard: "other"
    },
    {
      name: "SIGPOLL",
      number: 29,
      action: "terminate",
      description: "Watched event",
      standard: "other"
    },
    {
      name: "SIGINFO",
      number: 29,
      action: "ignore",
      description: "Request for process information",
      standard: "other"
    },
    {
      name: "SIGPWR",
      number: 30,
      action: "terminate",
      description: "Device running out of power",
      standard: "systemv"
    },
    {
      name: "SIGSYS",
      number: 31,
      action: "core",
      description: "Invalid system call",
      standard: "other"
    },
    {
      name: "SIGUNUSED",
      number: 31,
      action: "terminate",
      description: "Invalid system call",
      standard: "other"
    }
  ];
  exports2.SIGNALS = SIGNALS;
});

// ../../node_modules/.pnpm/human-signals@1.1.1/node_modules/human-signals/build/src/realtime.js
var require_realtime = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.SIGRTMAX = exports2.getRealtimeSignals = void 0;
  const getRealtimeSignals = function() {
    const length = SIGRTMAX - SIGRTMIN + 1;
    return Array.from({length}, getRealtimeSignal);
  };
  exports2.getRealtimeSignals = getRealtimeSignals;
  const getRealtimeSignal = function(value, index) {
    return {
      name: `SIGRT${index + 1}`,
      number: SIGRTMIN + index,
      action: "terminate",
      description: "Application-specific signal (realtime)",
      standard: "posix"
    };
  };
  const SIGRTMIN = 34;
  const SIGRTMAX = 64;
  exports2.SIGRTMAX = SIGRTMAX;
});

// ../../node_modules/.pnpm/human-signals@1.1.1/node_modules/human-signals/build/src/signals.js
var require_signals = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getSignals = void 0;
  var _os = require("os");
  var _core = require_core();
  var _realtime = require_realtime();
  const getSignals = function() {
    const realtimeSignals = (0, _realtime.getRealtimeSignals)();
    const signals = [..._core.SIGNALS, ...realtimeSignals].map(normalizeSignal);
    return signals;
  };
  exports2.getSignals = getSignals;
  const normalizeSignal = function({
    name,
    number: defaultNumber,
    description,
    action,
    forced = false,
    standard
  }) {
    const {
      signals: {[name]: constantSignal}
    } = _os.constants;
    const supported = constantSignal !== void 0;
    const number = supported ? constantSignal : defaultNumber;
    return {name, number, description, supported, action, forced, standard};
  };
});

// ../../node_modules/.pnpm/human-signals@1.1.1/node_modules/human-signals/build/src/main.js
var require_main = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.signalsByNumber = exports2.signalsByName = void 0;
  var _os = require("os");
  var _signals = require_signals();
  var _realtime = require_realtime();
  const getSignalsByName = function() {
    const signals = (0, _signals.getSignals)();
    return signals.reduce(getSignalByName, {});
  };
  const getSignalByName = function(signalByNameMemo, {name, number, description, supported, action, forced, standard}) {
    return {
      ...signalByNameMemo,
      [name]: {name, number, description, supported, action, forced, standard}
    };
  };
  const signalsByName = getSignalsByName();
  exports2.signalsByName = signalsByName;
  const getSignalsByNumber = function() {
    const signals = (0, _signals.getSignals)();
    const length = _realtime.SIGRTMAX + 1;
    const signalsA = Array.from({length}, (value, number) => getSignalByNumber(number, signals));
    return Object.assign({}, ...signalsA);
  };
  const getSignalByNumber = function(number, signals) {
    const signal = findSignalByNumber(number, signals);
    if (signal === void 0) {
      return {};
    }
    const {name, description, supported, action, forced, standard} = signal;
    return {
      [number]: {
        name,
        number,
        description,
        supported,
        action,
        forced,
        standard
      }
    };
  };
  const findSignalByNumber = function(number, signals) {
    const signal = signals.find(({name}) => _os.constants.signals[name] === number);
    if (signal !== void 0) {
      return signal;
    }
    return signals.find((signalA) => signalA.number === number);
  };
  const signalsByNumber = getSignalsByNumber();
  exports2.signalsByNumber = signalsByNumber;
});

// ../../node_modules/.pnpm/execa@4.0.2/node_modules/execa/lib/error.js
var require_error = __commonJS((exports2, module3) => {
  "use strict";
  const {signalsByName} = require_main();
  const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
    if (timedOut) {
      return `timed out after ${timeout} milliseconds`;
    }
    if (isCanceled) {
      return "was canceled";
    }
    if (errorCode !== void 0) {
      return `failed with ${errorCode}`;
    }
    if (signal !== void 0) {
      return `was killed with ${signal} (${signalDescription})`;
    }
    if (exitCode !== void 0) {
      return `failed with exit code ${exitCode}`;
    }
    return "failed";
  };
  const makeError = ({
    stdout,
    stderr,
    all,
    error,
    signal,
    exitCode,
    command,
    timedOut,
    isCanceled,
    killed,
    parsed: {options: {timeout}}
  }) => {
    exitCode = exitCode === null ? void 0 : exitCode;
    signal = signal === null ? void 0 : signal;
    const signalDescription = signal === void 0 ? void 0 : signalsByName[signal].description;
    const errorCode = error && error.code;
    const prefix = getErrorPrefix({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled});
    const execaMessage = `Command ${prefix}: ${command}`;
    const isError7 = Object.prototype.toString.call(error) === "[object Error]";
    const shortMessage = isError7 ? `${execaMessage}
${error.message}` : execaMessage;
    const message = [shortMessage, stderr, stdout].filter(Boolean).join("\n");
    if (isError7) {
      error.originalMessage = error.message;
      error.message = message;
    } else {
      error = new Error(message);
    }
    error.shortMessage = shortMessage;
    error.command = command;
    error.exitCode = exitCode;
    error.signal = signal;
    error.signalDescription = signalDescription;
    error.stdout = stdout;
    error.stderr = stderr;
    if (all !== void 0) {
      error.all = all;
    }
    if ("bufferedData" in error) {
      delete error.bufferedData;
    }
    error.failed = true;
    error.timedOut = Boolean(timedOut);
    error.isCanceled = isCanceled;
    error.killed = killed && !timedOut;
    return error;
  };
  module3.exports = makeError;
});

// ../../node_modules/.pnpm/execa@4.0.2/node_modules/execa/lib/stdio.js
var require_stdio = __commonJS((exports2, module3) => {
  "use strict";
  const aliases2 = ["stdin", "stdout", "stderr"];
  const hasAlias = (opts) => aliases2.some((alias) => opts[alias] !== void 0);
  const normalizeStdio = (opts) => {
    if (!opts) {
      return;
    }
    const {stdio} = opts;
    if (stdio === void 0) {
      return aliases2.map((alias) => opts[alias]);
    }
    if (hasAlias(opts)) {
      throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${aliases2.map((alias) => `\`${alias}\``).join(", ")}`);
    }
    if (typeof stdio === "string") {
      return stdio;
    }
    if (!Array.isArray(stdio)) {
      throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof stdio}\``);
    }
    const length = Math.max(stdio.length, aliases2.length);
    return Array.from({length}, (value, index) => stdio[index]);
  };
  module3.exports = normalizeStdio;
  module3.exports.node = (opts) => {
    const stdio = normalizeStdio(opts);
    if (stdio === "ipc") {
      return "ipc";
    }
    if (stdio === void 0 || typeof stdio === "string") {
      return [stdio, stdio, stdio, "ipc"];
    }
    if (stdio.includes("ipc")) {
      return stdio;
    }
    return [...stdio, "ipc"];
  };
});

// ../../node_modules/.pnpm/signal-exit@3.0.3/node_modules/signal-exit/signals.js
var require_signals2 = __commonJS((exports2, module3) => {
  module3.exports = [
    "SIGABRT",
    "SIGALRM",
    "SIGHUP",
    "SIGINT",
    "SIGTERM"
  ];
  if (process.platform !== "win32") {
    module3.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
  }
  if (process.platform === "linux") {
    module3.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");
  }
});

// ../../node_modules/.pnpm/signal-exit@3.0.3/node_modules/signal-exit/index.js
var require_signal_exit = __commonJS((exports2, module3) => {
  var assert = require("assert");
  var signals = require_signals2();
  var isWin = /^win/i.test(process.platform);
  var EE = require("events");
  if (typeof EE !== "function") {
    EE = EE.EventEmitter;
  }
  var emitter;
  if (process.__signal_exit_emitter__) {
    emitter = process.__signal_exit_emitter__;
  } else {
    emitter = process.__signal_exit_emitter__ = new EE();
    emitter.count = 0;
    emitter.emitted = {};
  }
  if (!emitter.infinite) {
    emitter.setMaxListeners(Infinity);
    emitter.infinite = true;
  }
  module3.exports = function(cb, opts) {
    assert.equal(typeof cb, "function", "a callback must be provided for exit handler");
    if (loaded === false) {
      load();
    }
    var ev = "exit";
    if (opts && opts.alwaysLast) {
      ev = "afterexit";
    }
    var remove = function() {
      emitter.removeListener(ev, cb);
      if (emitter.listeners("exit").length === 0 && emitter.listeners("afterexit").length === 0) {
        unload();
      }
    };
    emitter.on(ev, cb);
    return remove;
  };
  module3.exports.unload = unload;
  function unload() {
    if (!loaded) {
      return;
    }
    loaded = false;
    signals.forEach(function(sig) {
      try {
        process.removeListener(sig, sigListeners[sig]);
      } catch (er) {
      }
    });
    process.emit = originalProcessEmit;
    process.reallyExit = originalProcessReallyExit;
    emitter.count -= 1;
  }
  function emit(event, code, signal) {
    if (emitter.emitted[event]) {
      return;
    }
    emitter.emitted[event] = true;
    emitter.emit(event, code, signal);
  }
  var sigListeners = {};
  signals.forEach(function(sig) {
    sigListeners[sig] = function listener() {
      var listeners = process.listeners(sig);
      if (listeners.length === emitter.count) {
        unload();
        emit("exit", null, sig);
        emit("afterexit", null, sig);
        if (isWin && sig === "SIGHUP") {
          sig = "SIGINT";
        }
        process.kill(process.pid, sig);
      }
    };
  });
  module3.exports.signals = function() {
    return signals;
  };
  module3.exports.load = load;
  var loaded = false;
  function load() {
    if (loaded) {
      return;
    }
    loaded = true;
    emitter.count += 1;
    signals = signals.filter(function(sig) {
      try {
        process.on(sig, sigListeners[sig]);
        return true;
      } catch (er) {
        return false;
      }
    });
    process.emit = processEmit;
    process.reallyExit = processReallyExit;
  }
  var originalProcessReallyExit = process.reallyExit;
  function processReallyExit(code) {
    process.exitCode = code || 0;
    emit("exit", process.exitCode, null);
    emit("afterexit", process.exitCode, null);
    originalProcessReallyExit.call(process, process.exitCode);
  }
  var originalProcessEmit = process.emit;
  function processEmit(ev, arg11) {
    if (ev === "exit") {
      if (arg11 !== void 0) {
        process.exitCode = arg11;
      }
      var ret = originalProcessEmit.apply(this, arguments);
      emit("exit", process.exitCode, null);
      emit("afterexit", process.exitCode, null);
      return ret;
    } else {
      return originalProcessEmit.apply(this, arguments);
    }
  }
});

// ../../node_modules/.pnpm/execa@4.0.2/node_modules/execa/lib/kill.js
var require_kill = __commonJS((exports2, module3) => {
  "use strict";
  const os3 = require("os");
  const onExit = require_signal_exit();
  const DEFAULT_FORCE_KILL_TIMEOUT = 1e3 * 5;
  const spawnedKill = (kill, signal = "SIGTERM", options = {}) => {
    const killResult = kill(signal);
    setKillTimeout(kill, signal, options, killResult);
    return killResult;
  };
  const setKillTimeout = (kill, signal, options, killResult) => {
    if (!shouldForceKill(signal, options, killResult)) {
      return;
    }
    const timeout = getForceKillAfterTimeout(options);
    const t = setTimeout(() => {
      kill("SIGKILL");
    }, timeout);
    if (t.unref) {
      t.unref();
    }
  };
  const shouldForceKill = (signal, {forceKillAfterTimeout}, killResult) => {
    return isSigterm(signal) && forceKillAfterTimeout !== false && killResult;
  };
  const isSigterm = (signal) => {
    return signal === os3.constants.signals.SIGTERM || typeof signal === "string" && signal.toUpperCase() === "SIGTERM";
  };
  const getForceKillAfterTimeout = ({forceKillAfterTimeout = true}) => {
    if (forceKillAfterTimeout === true) {
      return DEFAULT_FORCE_KILL_TIMEOUT;
    }
    if (!Number.isInteger(forceKillAfterTimeout) || forceKillAfterTimeout < 0) {
      throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${forceKillAfterTimeout}\` (${typeof forceKillAfterTimeout})`);
    }
    return forceKillAfterTimeout;
  };
  const spawnedCancel = (spawned, context) => {
    const killResult = spawned.kill();
    if (killResult) {
      context.isCanceled = true;
    }
  };
  const timeoutKill = (spawned, signal, reject) => {
    spawned.kill(signal);
    reject(Object.assign(new Error("Timed out"), {timedOut: true, signal}));
  };
  const setupTimeout = (spawned, {timeout, killSignal = "SIGTERM"}, spawnedPromise) => {
    if (timeout === 0 || timeout === void 0) {
      return spawnedPromise;
    }
    if (!Number.isInteger(timeout) || timeout < 0) {
      throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${timeout}\` (${typeof timeout})`);
    }
    let timeoutId;
    const timeoutPromise = new Promise((resolve, reject) => {
      timeoutId = setTimeout(() => {
        timeoutKill(spawned, killSignal, reject);
      }, timeout);
    });
    const safeSpawnedPromise = spawnedPromise.finally(() => {
      clearTimeout(timeoutId);
    });
    return Promise.race([timeoutPromise, safeSpawnedPromise]);
  };
  const setExitHandler = async (spawned, {cleanup, detached}, timedPromise) => {
    if (!cleanup || detached) {
      return timedPromise;
    }
    const removeExitHandler = onExit(() => {
      spawned.kill();
    });
    return timedPromise.finally(() => {
      removeExitHandler();
    });
  };
  module3.exports = {
    spawnedKill,
    spawnedCancel,
    setupTimeout,
    setExitHandler
  };
});

// ../../node_modules/.pnpm/is-stream@2.0.0/node_modules/is-stream/index.js
var require_is_stream = __commonJS((exports2, module3) => {
  "use strict";
  const isStream = (stream) => stream !== null && typeof stream === "object" && typeof stream.pipe === "function";
  isStream.writable = (stream) => isStream(stream) && stream.writable !== false && typeof stream._write === "function" && typeof stream._writableState === "object";
  isStream.readable = (stream) => isStream(stream) && stream.readable !== false && typeof stream._read === "function" && typeof stream._readableState === "object";
  isStream.duplex = (stream) => isStream.writable(stream) && isStream.readable(stream);
  isStream.transform = (stream) => isStream.duplex(stream) && typeof stream._transform === "function" && typeof stream._transformState === "object";
  module3.exports = isStream;
});

// ../../node_modules/.pnpm/wrappy@1.0.2/node_modules/wrappy/wrappy.js
var require_wrappy = __commonJS((exports2, module3) => {
  module3.exports = wrappy;
  function wrappy(fn, cb) {
    if (fn && cb)
      return wrappy(fn)(cb);
    if (typeof fn !== "function")
      throw new TypeError("need wrapper function");
    Object.keys(fn).forEach(function(k) {
      wrapper[k] = fn[k];
    });
    return wrapper;
    function wrapper() {
      var args2 = new Array(arguments.length);
      for (var i = 0; i < args2.length; i++) {
        args2[i] = arguments[i];
      }
      var ret = fn.apply(this, args2);
      var cb2 = args2[args2.length - 1];
      if (typeof ret === "function" && ret !== cb2) {
        Object.keys(cb2).forEach(function(k) {
          ret[k] = cb2[k];
        });
      }
      return ret;
    }
  }
});

// ../../node_modules/.pnpm/once@1.4.0/node_modules/once/once.js
var require_once = __commonJS((exports2, module3) => {
  var wrappy = require_wrappy();
  module3.exports = wrappy(once);
  module3.exports.strict = wrappy(onceStrict);
  once.proto = once(function() {
    Object.defineProperty(Function.prototype, "once", {
      value: function() {
        return once(this);
      },
      configurable: true
    });
    Object.defineProperty(Function.prototype, "onceStrict", {
      value: function() {
        return onceStrict(this);
      },
      configurable: true
    });
  });
  function once(fn) {
    var f = function() {
      if (f.called)
        return f.value;
      f.called = true;
      return f.value = fn.apply(this, arguments);
    };
    f.called = false;
    return f;
  }
  function onceStrict(fn) {
    var f = function() {
      if (f.called)
        throw new Error(f.onceError);
      f.called = true;
      return f.value = fn.apply(this, arguments);
    };
    var name = fn.name || "Function wrapped with `once`";
    f.onceError = name + " shouldn't be called more than once";
    f.called = false;
    return f;
  }
});

// ../../node_modules/.pnpm/end-of-stream@1.4.4/node_modules/end-of-stream/index.js
var require_end_of_stream = __commonJS((exports2, module3) => {
  var once = require_once();
  var noop = function() {
  };
  var isRequest = function(stream) {
    return stream.setHeader && typeof stream.abort === "function";
  };
  var isChildProcess = function(stream) {
    return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3;
  };
  var eos = function(stream, opts, callback) {
    if (typeof opts === "function")
      return eos(stream, null, opts);
    if (!opts)
      opts = {};
    callback = once(callback || noop);
    var ws = stream._writableState;
    var rs = stream._readableState;
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var cancelled = false;
    var onlegacyfinish = function() {
      if (!stream.writable)
        onfinish();
    };
    var onfinish = function() {
      writable = false;
      if (!readable)
        callback.call(stream);
    };
    var onend = function() {
      readable = false;
      if (!writable)
        callback.call(stream);
    };
    var onexit = function(exitCode) {
      callback.call(stream, exitCode ? new Error("exited with error code: " + exitCode) : null);
    };
    var onerror = function(err) {
      callback.call(stream, err);
    };
    var onclose = function() {
      process.nextTick(onclosenexttick);
    };
    var onclosenexttick = function() {
      if (cancelled)
        return;
      if (readable && !(rs && (rs.ended && !rs.destroyed)))
        return callback.call(stream, new Error("premature close"));
      if (writable && !(ws && (ws.ended && !ws.destroyed)))
        return callback.call(stream, new Error("premature close"));
    };
    var onrequest = function() {
      stream.req.on("finish", onfinish);
    };
    if (isRequest(stream)) {
      stream.on("complete", onfinish);
      stream.on("abort", onclose);
      if (stream.req)
        onrequest();
      else
        stream.on("request", onrequest);
    } else if (writable && !ws) {
      stream.on("end", onlegacyfinish);
      stream.on("close", onlegacyfinish);
    }
    if (isChildProcess(stream))
      stream.on("exit", onexit);
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false)
      stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
      cancelled = true;
      stream.removeListener("complete", onfinish);
      stream.removeListener("abort", onclose);
      stream.removeListener("request", onrequest);
      if (stream.req)
        stream.req.removeListener("finish", onfinish);
      stream.removeListener("end", onlegacyfinish);
      stream.removeListener("close", onlegacyfinish);
      stream.removeListener("finish", onfinish);
      stream.removeListener("exit", onexit);
      stream.removeListener("end", onend);
      stream.removeListener("error", onerror);
      stream.removeListener("close", onclose);
    };
  };
  module3.exports = eos;
});

// ../../node_modules/.pnpm/pump@3.0.0/node_modules/pump/index.js
var require_pump = __commonJS((exports2, module3) => {
  var once = require_once();
  var eos = require_end_of_stream();
  var fs17 = require("fs");
  var noop = function() {
  };
  var ancient = /^v?\.0/.test(process.version);
  var isFn = function(fn) {
    return typeof fn === "function";
  };
  var isFS = function(stream) {
    if (!ancient)
      return false;
    if (!fs17)
      return false;
    return (stream instanceof (fs17.ReadStream || noop) || stream instanceof (fs17.WriteStream || noop)) && isFn(stream.close);
  };
  var isRequest = function(stream) {
    return stream.setHeader && isFn(stream.abort);
  };
  var destroyer = function(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on("close", function() {
      closed = true;
    });
    eos(stream, {readable: reading, writable: writing}, function(err) {
      if (err)
        return callback(err);
      closed = true;
      callback();
    });
    var destroyed = false;
    return function(err) {
      if (closed)
        return;
      if (destroyed)
        return;
      destroyed = true;
      if (isFS(stream))
        return stream.close(noop);
      if (isRequest(stream))
        return stream.abort();
      if (isFn(stream.destroy))
        return stream.destroy();
      callback(err || new Error("stream was destroyed"));
    };
  };
  var call = function(fn) {
    fn();
  };
  var pipe = function(from, to) {
    return from.pipe(to);
  };
  var pump = function() {
    var streams = Array.prototype.slice.call(arguments);
    var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop;
    if (Array.isArray(streams[0]))
      streams = streams[0];
    if (streams.length < 2)
      throw new Error("pump requires two streams per minimum");
    var error;
    var destroys = streams.map(function(stream, i) {
      var reading = i < streams.length - 1;
      var writing = i > 0;
      return destroyer(stream, reading, writing, function(err) {
        if (!error)
          error = err;
        if (err)
          destroys.forEach(call);
        if (reading)
          return;
        destroys.forEach(call);
        callback(error);
      });
    });
    return streams.reduce(pipe);
  };
  module3.exports = pump;
});

// ../../node_modules/.pnpm/get-stream@5.1.0/node_modules/get-stream/buffer-stream.js
var require_buffer_stream = __commonJS((exports2, module3) => {
  "use strict";
  const {PassThrough: PassThroughStream} = require("stream");
  module3.exports = (options) => {
    options = {...options};
    const {array} = options;
    let {encoding} = options;
    const isBuffer = encoding === "buffer";
    let objectMode = false;
    if (array) {
      objectMode = !(encoding || isBuffer);
    } else {
      encoding = encoding || "utf8";
    }
    if (isBuffer) {
      encoding = null;
    }
    const stream = new PassThroughStream({objectMode});
    if (encoding) {
      stream.setEncoding(encoding);
    }
    let length = 0;
    const chunks = [];
    stream.on("data", (chunk) => {
      chunks.push(chunk);
      if (objectMode) {
        length = chunks.length;
      } else {
        length += chunk.length;
      }
    });
    stream.getBufferedValue = () => {
      if (array) {
        return chunks;
      }
      return isBuffer ? Buffer.concat(chunks, length) : chunks.join("");
    };
    stream.getBufferedLength = () => length;
    return stream;
  };
});

// ../../node_modules/.pnpm/get-stream@5.1.0/node_modules/get-stream/index.js
var require_get_stream = __commonJS((exports2, module3) => {
  "use strict";
  const pump = require_pump();
  const bufferStream = require_buffer_stream();
  class MaxBufferError extends Error {
    constructor() {
      super("maxBuffer exceeded");
      this.name = "MaxBufferError";
    }
  }
  async function getStream(inputStream, options) {
    if (!inputStream) {
      return Promise.reject(new Error("Expected a stream"));
    }
    options = {
      maxBuffer: Infinity,
      ...options
    };
    const {maxBuffer} = options;
    let stream;
    await new Promise((resolve, reject) => {
      const rejectPromise = (error) => {
        if (error) {
          error.bufferedData = stream.getBufferedValue();
        }
        reject(error);
      };
      stream = pump(inputStream, bufferStream(options), (error) => {
        if (error) {
          rejectPromise(error);
          return;
        }
        resolve();
      });
      stream.on("data", () => {
        if (stream.getBufferedLength() > maxBuffer) {
          rejectPromise(new MaxBufferError());
        }
      });
    });
    return stream.getBufferedValue();
  }
  module3.exports = getStream;
  module3.exports.default = getStream;
  module3.exports.buffer = (stream, options) => getStream(stream, {...options, encoding: "buffer"});
  module3.exports.array = (stream, options) => getStream(stream, {...options, array: true});
  module3.exports.MaxBufferError = MaxBufferError;
});

// ../../node_modules/.pnpm/merge-stream@2.0.0/node_modules/merge-stream/index.js
var require_merge_stream = __commonJS((exports2, module3) => {
  "use strict";
  const {PassThrough} = require("stream");
  module3.exports = function() {
    var sources = [];
    var output = new PassThrough({objectMode: true});
    output.setMaxListeners(0);
    output.add = add;
    output.isEmpty = isEmpty;
    output.on("unpipe", remove);
    Array.prototype.slice.call(arguments).forEach(add);
    return output;
    function add(source) {
      if (Array.isArray(source)) {
        source.forEach(add);
        return this;
      }
      sources.push(source);
      source.once("end", remove.bind(null, source));
      source.once("error", output.emit.bind(output, "error"));
      source.pipe(output, {end: false});
      return this;
    }
    function isEmpty() {
      return sources.length == 0;
    }
    function remove(source) {
      sources = sources.filter(function(it) {
        return it !== source;
      });
      if (!sources.length && output.readable) {
        output.end();
      }
    }
  };
});

// ../../node_modules/.pnpm/execa@4.0.2/node_modules/execa/lib/stream.js
var require_stream = __commonJS((exports2, module3) => {
  "use strict";
  const isStream = require_is_stream();
  const getStream = require_get_stream();
  const mergeStream = require_merge_stream();
  const handleInput = (spawned, input) => {
    if (input === void 0 || spawned.stdin === void 0) {
      return;
    }
    if (isStream(input)) {
      input.pipe(spawned.stdin);
    } else {
      spawned.stdin.end(input);
    }
  };
  const makeAllStream = (spawned, {all}) => {
    if (!all || !spawned.stdout && !spawned.stderr) {
      return;
    }
    const mixed = mergeStream();
    if (spawned.stdout) {
      mixed.add(spawned.stdout);
    }
    if (spawned.stderr) {
      mixed.add(spawned.stderr);
    }
    return mixed;
  };
  const getBufferedData = async (stream, streamPromise) => {
    if (!stream) {
      return;
    }
    stream.destroy();
    try {
      return await streamPromise;
    } catch (error) {
      return error.bufferedData;
    }
  };
  const getStreamPromise = (stream, {encoding, buffer, maxBuffer}) => {
    if (!stream || !buffer) {
      return;
    }
    if (encoding) {
      return getStream(stream, {encoding, maxBuffer});
    }
    return getStream.buffer(stream, {maxBuffer});
  };
  const getSpawnedResult = async ({stdout, stderr, all}, {encoding, buffer, maxBuffer}, processDone) => {
    const stdoutPromise = getStreamPromise(stdout, {encoding, buffer, maxBuffer});
    const stderrPromise = getStreamPromise(stderr, {encoding, buffer, maxBuffer});
    const allPromise = getStreamPromise(all, {encoding, buffer, maxBuffer: maxBuffer * 2});
    try {
      return await Promise.all([processDone, stdoutPromise, stderrPromise, allPromise]);
    } catch (error) {
      return Promise.all([
        {error, signal: error.signal, timedOut: error.timedOut},
        getBufferedData(stdout, stdoutPromise),
        getBufferedData(stderr, stderrPromise),
        getBufferedData(all, allPromise)
      ]);
    }
  };
  const validateInputSync = ({input}) => {
    if (isStream(input)) {
      throw new TypeError("The `input` option cannot be a stream in sync mode");
    }
  };
  module3.exports = {
    handleInput,
    makeAllStream,
    getSpawnedResult,
    validateInputSync
  };
});

// ../../node_modules/.pnpm/execa@4.0.2/node_modules/execa/lib/promise.js
var require_promise = __commonJS((exports2, module3) => {
  "use strict";
  const nativePromisePrototype = (async () => {
  })().constructor.prototype;
  const descriptors = ["then", "catch", "finally"].map((property) => [
    property,
    Reflect.getOwnPropertyDescriptor(nativePromisePrototype, property)
  ]);
  const mergePromise = (spawned, promise) => {
    for (const [property, descriptor] of descriptors) {
      const value = typeof promise === "function" ? (...args2) => Reflect.apply(descriptor.value, promise(), args2) : descriptor.value.bind(promise);
      Reflect.defineProperty(spawned, property, {...descriptor, value});
    }
    return spawned;
  };
  const getSpawnedPromise = (spawned) => {
    return new Promise((resolve, reject) => {
      spawned.on("exit", (exitCode, signal) => {
        resolve({exitCode, signal});
      });
      spawned.on("error", (error) => {
        reject(error);
      });
      if (spawned.stdin) {
        spawned.stdin.on("error", (error) => {
          reject(error);
        });
      }
    });
  };
  module3.exports = {
    mergePromise,
    getSpawnedPromise
  };
});

// ../../node_modules/.pnpm/execa@4.0.2/node_modules/execa/lib/command.js
var require_command = __commonJS((exports2, module3) => {
  "use strict";
  const SPACES_REGEXP = / +/g;
  const joinCommand = (file, args2 = []) => {
    if (!Array.isArray(args2)) {
      return file;
    }
    return [file, ...args2].join(" ");
  };
  const handleEscaping = (tokens, token, index) => {
    if (index === 0) {
      return [token];
    }
    const previousToken = tokens[tokens.length - 1];
    if (previousToken.endsWith("\\")) {
      return [...tokens.slice(0, -1), `${previousToken.slice(0, -1)} ${token}`];
    }
    return [...tokens, token];
  };
  const parseCommand = (command) => {
    return command.trim().split(SPACES_REGEXP).reduce(handleEscaping, []);
  };
  module3.exports = {
    joinCommand,
    parseCommand
  };
});

// ../../node_modules/.pnpm/execa@4.0.2/node_modules/execa/index.js
var require_execa = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const childProcess = require("child_process");
  const crossSpawn = require_cross_spawn();
  const stripFinalNewline = require_strip_final_newline();
  const npmRunPath = require_npm_run_path();
  const onetime = require_onetime();
  const makeError = require_error();
  const normalizeStdio = require_stdio();
  const {spawnedKill, spawnedCancel, setupTimeout, setExitHandler} = require_kill();
  const {handleInput, getSpawnedResult, makeAllStream, validateInputSync} = require_stream();
  const {mergePromise, getSpawnedPromise} = require_promise();
  const {joinCommand, parseCommand} = require_command();
  const DEFAULT_MAX_BUFFER = 1e3 * 1e3 * 100;
  const getEnv = ({env: envOption, extendEnv, preferLocal, localDir, execPath}) => {
    const env = extendEnv ? {...process.env, ...envOption} : envOption;
    if (preferLocal) {
      return npmRunPath.env({env, cwd: localDir, execPath});
    }
    return env;
  };
  const handleArgs = (file, args2, options = {}) => {
    const parsed = crossSpawn._parse(file, args2, options);
    file = parsed.command;
    args2 = parsed.args;
    options = parsed.options;
    options = {
      maxBuffer: DEFAULT_MAX_BUFFER,
      buffer: true,
      stripFinalNewline: true,
      extendEnv: true,
      preferLocal: false,
      localDir: options.cwd || process.cwd(),
      execPath: process.execPath,
      encoding: "utf8",
      reject: true,
      cleanup: true,
      all: false,
      windowsHide: true,
      ...options
    };
    options.env = getEnv(options);
    options.stdio = normalizeStdio(options);
    if (process.platform === "win32" && path19.basename(file, ".exe") === "cmd") {
      args2.unshift("/q");
    }
    return {file, args: args2, options, parsed};
  };
  const handleOutput = (options, value, error) => {
    if (typeof value !== "string" && !Buffer.isBuffer(value)) {
      return error === void 0 ? void 0 : "";
    }
    if (options.stripFinalNewline) {
      return stripFinalNewline(value);
    }
    return value;
  };
  const execa = (file, args2, options) => {
    const parsed = handleArgs(file, args2, options);
    const command = joinCommand(file, args2);
    let spawned;
    try {
      spawned = childProcess.spawn(parsed.file, parsed.args, parsed.options);
    } catch (error) {
      const dummySpawned = new childProcess.ChildProcess();
      const errorPromise = Promise.reject(makeError({
        error,
        stdout: "",
        stderr: "",
        all: "",
        command,
        parsed,
        timedOut: false,
        isCanceled: false,
        killed: false
      }));
      return mergePromise(dummySpawned, errorPromise);
    }
    const spawnedPromise = getSpawnedPromise(spawned);
    const timedPromise = setupTimeout(spawned, parsed.options, spawnedPromise);
    const processDone = setExitHandler(spawned, parsed.options, timedPromise);
    const context = {isCanceled: false};
    spawned.kill = spawnedKill.bind(null, spawned.kill.bind(spawned));
    spawned.cancel = spawnedCancel.bind(null, spawned, context);
    const handlePromise = async () => {
      const [{error, exitCode, signal, timedOut}, stdoutResult, stderrResult, allResult] = await getSpawnedResult(spawned, parsed.options, processDone);
      const stdout = handleOutput(parsed.options, stdoutResult);
      const stderr = handleOutput(parsed.options, stderrResult);
      const all = handleOutput(parsed.options, allResult);
      if (error || exitCode !== 0 || signal !== null) {
        const returnedError = makeError({
          error,
          exitCode,
          signal,
          stdout,
          stderr,
          all,
          command,
          parsed,
          timedOut,
          isCanceled: context.isCanceled,
          killed: spawned.killed
        });
        if (!parsed.options.reject) {
          return returnedError;
        }
        throw returnedError;
      }
      return {
        command,
        exitCode: 0,
        stdout,
        stderr,
        all,
        failed: false,
        timedOut: false,
        isCanceled: false,
        killed: false
      };
    };
    const handlePromiseOnce = onetime(handlePromise);
    crossSpawn._enoent.hookChildProcess(spawned, parsed.parsed);
    handleInput(spawned, parsed.options.input);
    spawned.all = makeAllStream(spawned, parsed.options);
    return mergePromise(spawned, handlePromiseOnce);
  };
  module3.exports = execa;
  module3.exports.sync = (file, args2, options) => {
    const parsed = handleArgs(file, args2, options);
    const command = joinCommand(file, args2);
    validateInputSync(parsed.options);
    let result;
    try {
      result = childProcess.spawnSync(parsed.file, parsed.args, parsed.options);
    } catch (error) {
      throw makeError({
        error,
        stdout: "",
        stderr: "",
        all: "",
        command,
        parsed,
        timedOut: false,
        isCanceled: false,
        killed: false
      });
    }
    const stdout = handleOutput(parsed.options, result.stdout, result.error);
    const stderr = handleOutput(parsed.options, result.stderr, result.error);
    if (result.error || result.status !== 0 || result.signal !== null) {
      const error = makeError({
        stdout,
        stderr,
        error: result.error,
        signal: result.signal,
        exitCode: result.status,
        command,
        parsed,
        timedOut: result.error && result.error.code === "ETIMEDOUT",
        isCanceled: false,
        killed: result.signal !== null
      });
      if (!parsed.options.reject) {
        return error;
      }
      throw error;
    }
    return {
      command,
      exitCode: 0,
      stdout,
      stderr,
      failed: false,
      timedOut: false,
      isCanceled: false,
      killed: false
    };
  };
  module3.exports.command = (command, options) => {
    const [file, ...args2] = parseCommand(command);
    return execa(file, args2, options);
  };
  module3.exports.commandSync = (command, options) => {
    const [file, ...args2] = parseCommand(command);
    return execa.sync(file, args2, options);
  };
  module3.exports.node = (scriptPath, args2, options = {}) => {
    if (args2 && !Array.isArray(args2) && typeof args2 === "object") {
      options = args2;
      args2 = [];
    }
    const stdio = normalizeStdio.node(options);
    const {nodePath = process.execPath, nodeOptions = process.execArgv} = options;
    return execa(nodePath, [
      ...nodeOptions,
      scriptPath,
      ...Array.isArray(args2) ? args2 : []
    ], {
      ...options,
      stdin: void 0,
      stdout: void 0,
      stderr: void 0,
      stdio,
      shell: false
    });
  };
});

// ../../node_modules/.pnpm/p-map@2.1.0/node_modules/p-map/index.js
var require_p_map2 = __commonJS((exports2, module3) => {
  "use strict";
  const pMap = (iterable, mapper, options) => new Promise((resolve, reject) => {
    options = Object.assign({
      concurrency: Infinity
    }, options);
    if (typeof mapper !== "function") {
      throw new TypeError("Mapper function is required");
    }
    const {concurrency} = options;
    if (!(typeof concurrency === "number" && concurrency >= 1)) {
      throw new TypeError(`Expected \`concurrency\` to be a number from 1 and up, got \`${concurrency}\` (${typeof concurrency})`);
    }
    const ret = [];
    const iterator = iterable[Symbol.iterator]();
    let isRejected = false;
    let isIterableDone = false;
    let resolvingCount = 0;
    let currentIndex = 0;
    const next = () => {
      if (isRejected) {
        return;
      }
      const nextItem = iterator.next();
      const i = currentIndex;
      currentIndex++;
      if (nextItem.done) {
        isIterableDone = true;
        if (resolvingCount === 0) {
          resolve(ret);
        }
        return;
      }
      resolvingCount++;
      Promise.resolve(nextItem.value).then((element) => mapper(element, i)).then((value) => {
        ret[i] = value;
        resolvingCount--;
        next();
      }, (error) => {
        isRejected = true;
        reject(error);
      });
    };
    for (let i = 0; i < concurrency; i++) {
      next();
      if (isIterableDone) {
        break;
      }
    }
  });
  module3.exports = pMap;
  module3.exports.default = pMap;
});

// ../../node_modules/.pnpm/p-filter@2.1.0/node_modules/p-filter/index.js
var require_p_filter = __commonJS((exports2, module3) => {
  "use strict";
  const pMap = require_p_map2();
  const pFilter = async (iterable, filterer, options) => {
    const values = await pMap(iterable, (element, index) => Promise.all([filterer(element, index), element]), options);
    return values.filter((value) => Boolean(value[0])).map((value) => value[1]);
  };
  module3.exports = pFilter;
  module3.exports.default = pFilter;
});

// ../../node_modules/.pnpm/progress@2.0.3/node_modules/progress/lib/node-progress.js
var require_node_progress = __commonJS((exports2, module3) => {
  /*!
   * node-progress
   * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>
   * MIT Licensed
   */
  exports2 = module3.exports = ProgressBar;
  function ProgressBar(fmt, options) {
    this.stream = options.stream || process.stderr;
    if (typeof options == "number") {
      var total = options;
      options = {};
      options.total = total;
    } else {
      options = options || {};
      if (typeof fmt != "string")
        throw new Error("format required");
      if (typeof options.total != "number")
        throw new Error("total required");
    }
    this.fmt = fmt;
    this.curr = options.curr || 0;
    this.total = options.total;
    this.width = options.width || this.total;
    this.clear = options.clear;
    this.chars = {
      complete: options.complete || "=",
      incomplete: options.incomplete || "-",
      head: options.head || (options.complete || "=")
    };
    this.renderThrottle = options.renderThrottle !== 0 ? options.renderThrottle || 16 : 0;
    this.lastRender = -Infinity;
    this.callback = options.callback || function() {
    };
    this.tokens = {};
    this.lastDraw = "";
  }
  ProgressBar.prototype.tick = function(len, tokens) {
    if (len !== 0)
      len = len || 1;
    if (typeof len == "object")
      tokens = len, len = 1;
    if (tokens)
      this.tokens = tokens;
    if (this.curr == 0)
      this.start = new Date();
    this.curr += len;
    this.render();
    if (this.curr >= this.total) {
      this.render(void 0, true);
      this.complete = true;
      this.terminate();
      this.callback(this);
      return;
    }
  };
  ProgressBar.prototype.render = function(tokens, force) {
    force = force !== void 0 ? force : false;
    if (tokens)
      this.tokens = tokens;
    if (!this.stream.isTTY)
      return;
    var now = Date.now();
    var delta = now - this.lastRender;
    if (!force && delta < this.renderThrottle) {
      return;
    } else {
      this.lastRender = now;
    }
    var ratio = this.curr / this.total;
    ratio = Math.min(Math.max(ratio, 0), 1);
    var percent = Math.floor(ratio * 100);
    var incomplete, complete, completeLength;
    var elapsed = new Date() - this.start;
    var eta = percent == 100 ? 0 : elapsed * (this.total / this.curr - 1);
    var rate = this.curr / (elapsed / 1e3);
    var str = this.fmt.replace(":current", this.curr).replace(":total", this.total).replace(":elapsed", isNaN(elapsed) ? "0.0" : (elapsed / 1e3).toFixed(1)).replace(":eta", isNaN(eta) || !isFinite(eta) ? "0.0" : (eta / 1e3).toFixed(1)).replace(":percent", percent.toFixed(0) + "%").replace(":rate", Math.round(rate));
    var availableSpace = Math.max(0, this.stream.columns - str.replace(":bar", "").length);
    if (availableSpace && process.platform === "win32") {
      availableSpace = availableSpace - 1;
    }
    var width = Math.min(this.width, availableSpace);
    completeLength = Math.round(width * ratio);
    complete = Array(Math.max(0, completeLength + 1)).join(this.chars.complete);
    incomplete = Array(Math.max(0, width - completeLength + 1)).join(this.chars.incomplete);
    if (completeLength > 0)
      complete = complete.slice(0, -1) + this.chars.head;
    str = str.replace(":bar", complete + incomplete);
    if (this.tokens)
      for (var key in this.tokens)
        str = str.replace(":" + key, this.tokens[key]);
    if (this.lastDraw !== str) {
      this.stream.cursorTo(0);
      this.stream.write(str);
      this.stream.clearLine(1);
      this.lastDraw = str;
    }
  };
  ProgressBar.prototype.update = function(ratio, tokens) {
    var goal = Math.floor(ratio * this.total);
    var delta = goal - this.curr;
    this.tick(delta, tokens);
  };
  ProgressBar.prototype.interrupt = function(message) {
    this.stream.clearLine();
    this.stream.cursorTo(0);
    this.stream.write(message);
    this.stream.write("\n");
    this.stream.write(this.lastDraw);
  };
  ProgressBar.prototype.terminate = function() {
    if (this.clear) {
      if (this.stream.clearLine) {
        this.stream.clearLine();
        this.stream.cursorTo(0);
      }
    } else {
      this.stream.write("\n");
    }
  };
});

// ../../node_modules/.pnpm/progress@2.0.3/node_modules/progress/index.js
var require_progress = __commonJS((exports2, module3) => {
  module3.exports = require_node_progress();
});

// ../fetch-engine/dist/log.js
var require_log = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getBar = void 0;
  const progress_1 = __importDefault(require_progress());
  function getBar(text) {
    return new progress_1.default(`> ${text} [:bar] :percent`, {
      stream: process.stdout,
      width: 20,
      complete: "=",
      incomplete: " ",
      total: 100,
      head: "",
      clear: true
    });
  }
  exports2.getBar = getBar;
});

// ../fetch-engine/dist/chmod.js
var require_chmod = __commonJS((exports2) => {
  "use strict";
  var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, {enumerable: true, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: true, value: v});
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports2 && exports2.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  const fs17 = __importStar(require("fs"));
  function default_1(file) {
    const s = fs17.statSync(file);
    const newMode = s.mode | 64 | 8 | 1;
    if (s.mode === newMode)
      return;
    const base8 = newMode.toString(8).slice(-3);
    fs17.chmodSync(file, base8);
  }
  exports2.default = default_1;
});

// ../fetch-engine/dist/copy.js
var require_copy = __commonJS((exports2) => {
  "use strict";
  var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, {enumerable: true, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: true, value: v});
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports2 && exports2.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.copy = void 0;
  const fs17 = __importStar(require("fs"));
  function copy(src, target) {
    return new Promise((resolve, reject) => {
      fs17.copyFile(src, target, (err) => {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  }
  exports2.copy = copy;
});

// ../../node_modules/.pnpm/retry@0.12.0/node_modules/retry/lib/retry_operation.js
var require_retry_operation = __commonJS((exports2, module3) => {
  function RetryOperation(timeouts, options) {
    if (typeof options === "boolean") {
      options = {forever: options};
    }
    this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
    this._timeouts = timeouts;
    this._options = options || {};
    this._maxRetryTime = options && options.maxRetryTime || Infinity;
    this._fn = null;
    this._errors = [];
    this._attempts = 1;
    this._operationTimeout = null;
    this._operationTimeoutCb = null;
    this._timeout = null;
    this._operationStart = null;
    if (this._options.forever) {
      this._cachedTimeouts = this._timeouts.slice(0);
    }
  }
  module3.exports = RetryOperation;
  RetryOperation.prototype.reset = function() {
    this._attempts = 1;
    this._timeouts = this._originalTimeouts;
  };
  RetryOperation.prototype.stop = function() {
    if (this._timeout) {
      clearTimeout(this._timeout);
    }
    this._timeouts = [];
    this._cachedTimeouts = null;
  };
  RetryOperation.prototype.retry = function(err) {
    if (this._timeout) {
      clearTimeout(this._timeout);
    }
    if (!err) {
      return false;
    }
    var currentTime = new Date().getTime();
    if (err && currentTime - this._operationStart >= this._maxRetryTime) {
      this._errors.unshift(new Error("RetryOperation timeout occurred"));
      return false;
    }
    this._errors.push(err);
    var timeout = this._timeouts.shift();
    if (timeout === void 0) {
      if (this._cachedTimeouts) {
        this._errors.splice(this._errors.length - 1, this._errors.length);
        this._timeouts = this._cachedTimeouts.slice(0);
        timeout = this._timeouts.shift();
      } else {
        return false;
      }
    }
    var self2 = this;
    var timer = setTimeout(function() {
      self2._attempts++;
      if (self2._operationTimeoutCb) {
        self2._timeout = setTimeout(function() {
          self2._operationTimeoutCb(self2._attempts);
        }, self2._operationTimeout);
        if (self2._options.unref) {
          self2._timeout.unref();
        }
      }
      self2._fn(self2._attempts);
    }, timeout);
    if (this._options.unref) {
      timer.unref();
    }
    return true;
  };
  RetryOperation.prototype.attempt = function(fn, timeoutOps) {
    this._fn = fn;
    if (timeoutOps) {
      if (timeoutOps.timeout) {
        this._operationTimeout = timeoutOps.timeout;
      }
      if (timeoutOps.cb) {
        this._operationTimeoutCb = timeoutOps.cb;
      }
    }
    var self2 = this;
    if (this._operationTimeoutCb) {
      this._timeout = setTimeout(function() {
        self2._operationTimeoutCb();
      }, self2._operationTimeout);
    }
    this._operationStart = new Date().getTime();
    this._fn(this._attempts);
  };
  RetryOperation.prototype.try = function(fn) {
    console.log("Using RetryOperation.try() is deprecated");
    this.attempt(fn);
  };
  RetryOperation.prototype.start = function(fn) {
    console.log("Using RetryOperation.start() is deprecated");
    this.attempt(fn);
  };
  RetryOperation.prototype.start = RetryOperation.prototype.try;
  RetryOperation.prototype.errors = function() {
    return this._errors;
  };
  RetryOperation.prototype.attempts = function() {
    return this._attempts;
  };
  RetryOperation.prototype.mainError = function() {
    if (this._errors.length === 0) {
      return null;
    }
    var counts = {};
    var mainError = null;
    var mainErrorCount = 0;
    for (var i = 0; i < this._errors.length; i++) {
      var error = this._errors[i];
      var message = error.message;
      var count = (counts[message] || 0) + 1;
      counts[message] = count;
      if (count >= mainErrorCount) {
        mainError = error;
        mainErrorCount = count;
      }
    }
    return mainError;
  };
});

// ../../node_modules/.pnpm/retry@0.12.0/node_modules/retry/lib/retry.js
var require_retry = __commonJS((exports2) => {
  var RetryOperation = require_retry_operation();
  exports2.operation = function(options) {
    var timeouts = exports2.timeouts(options);
    return new RetryOperation(timeouts, {
      forever: options && options.forever,
      unref: options && options.unref,
      maxRetryTime: options && options.maxRetryTime
    });
  };
  exports2.timeouts = function(options) {
    if (options instanceof Array) {
      return [].concat(options);
    }
    var opts = {
      retries: 10,
      factor: 2,
      minTimeout: 1 * 1e3,
      maxTimeout: Infinity,
      randomize: false
    };
    for (var key in options) {
      opts[key] = options[key];
    }
    if (opts.minTimeout > opts.maxTimeout) {
      throw new Error("minTimeout is greater than maxTimeout");
    }
    var timeouts = [];
    for (var i = 0; i < opts.retries; i++) {
      timeouts.push(this.createTimeout(i, opts));
    }
    if (options && options.forever && !timeouts.length) {
      timeouts.push(this.createTimeout(i, opts));
    }
    timeouts.sort(function(a, b) {
      return a - b;
    });
    return timeouts;
  };
  exports2.createTimeout = function(attempt, opts) {
    var random = opts.randomize ? Math.random() + 1 : 1;
    var timeout = Math.round(random * opts.minTimeout * Math.pow(opts.factor, attempt));
    timeout = Math.min(timeout, opts.maxTimeout);
    return timeout;
  };
  exports2.wrap = function(obj, options, methods) {
    if (options instanceof Array) {
      methods = options;
      options = null;
    }
    if (!methods) {
      methods = [];
      for (var key in obj) {
        if (typeof obj[key] === "function") {
          methods.push(key);
        }
      }
    }
    for (var i = 0; i < methods.length; i++) {
      var method = methods[i];
      var original = obj[method];
      obj[method] = function retryWrapper(original2) {
        var op = exports2.operation(options);
        var args2 = Array.prototype.slice.call(arguments, 1);
        var callback = args2.pop();
        args2.push(function(err) {
          if (op.retry(err)) {
            return;
          }
          if (err) {
            arguments[0] = op.mainError();
          }
          callback.apply(this, arguments);
        });
        op.attempt(function() {
          original2.apply(obj, args2);
        });
      }.bind(obj, original);
      obj[method].options = options;
    }
  };
});

// ../../node_modules/.pnpm/retry@0.12.0/node_modules/retry/index.js
var require_retry2 = __commonJS((exports2, module3) => {
  module3.exports = require_retry();
});

// ../../node_modules/.pnpm/p-retry@4.2.0/node_modules/p-retry/index.js
var require_p_retry = __commonJS((exports2, module3) => {
  "use strict";
  const retry = require_retry2();
  class AbortError extends Error {
    constructor(message) {
      super();
      if (message instanceof Error) {
        this.originalError = message;
        ({message} = message);
      } else {
        this.originalError = new Error(message);
        this.originalError.stack = this.stack;
      }
      this.name = "AbortError";
      this.message = message;
    }
  }
  const decorateErrorWithCounts = (error, attemptNumber, options) => {
    const retriesLeft = options.retries - (attemptNumber - 1);
    error.attemptNumber = attemptNumber;
    error.retriesLeft = retriesLeft;
    return error;
  };
  const pRetry = (input, options) => new Promise((resolve, reject) => {
    options = {
      onFailedAttempt: () => {
      },
      retries: 10,
      ...options
    };
    const operation = retry.operation(options);
    operation.attempt(async (attemptNumber) => {
      try {
        resolve(await input(attemptNumber));
      } catch (error) {
        if (!(error instanceof Error)) {
          reject(new TypeError(`Non-error was thrown: "${error}". You should only throw errors.`));
          return;
        }
        if (error instanceof AbortError) {
          operation.stop();
          reject(error.originalError);
        } else if (error instanceof TypeError) {
          operation.stop();
          reject(error);
        } else {
          decorateErrorWithCounts(error, attemptNumber, options);
          try {
            await options.onFailedAttempt(error);
          } catch (error2) {
            reject(error2);
            return;
          }
          if (!operation.retry(error)) {
            reject(operation.mainError());
          }
        }
      }
    });
  });
  module3.exports = pRetry;
  module3.exports.default = pRetry;
  module3.exports.AbortError = AbortError;
});

// ../../node_modules/.pnpm/node-fetch@2.6.0/node_modules/node-fetch/lib/index.mjs
var require_lib = __commonJS((exports2) => {
  __export(exports2, {
    FetchError: () => FetchError,
    Headers: () => Headers2,
    Request: () => Request2,
    Response: () => Response2,
    default: () => lib_default
  });
  const stream = __toModule(require("stream"));
  const http2 = __toModule(require("http"));
  const url = __toModule(require("url"));
  const https2 = __toModule(require("https"));
  const zlib2 = __toModule(require("zlib"));
  const Readable = stream.default.Readable;
  const BUFFER = Symbol("buffer");
  const TYPE = Symbol("type");
  class Blob {
    constructor() {
      this[TYPE] = "";
      const blobParts = arguments[0];
      const options = arguments[1];
      const buffers = [];
      let size = 0;
      if (blobParts) {
        const a = blobParts;
        const length = Number(a.length);
        for (let i = 0; i < length; i++) {
          const element = a[i];
          let buffer;
          if (element instanceof Buffer) {
            buffer = element;
          } else if (ArrayBuffer.isView(element)) {
            buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
          } else if (element instanceof ArrayBuffer) {
            buffer = Buffer.from(element);
          } else if (element instanceof Blob) {
            buffer = element[BUFFER];
          } else {
            buffer = Buffer.from(typeof element === "string" ? element : String(element));
          }
          size += buffer.length;
          buffers.push(buffer);
        }
      }
      this[BUFFER] = Buffer.concat(buffers);
      let type = options && options.type !== void 0 && String(options.type).toLowerCase();
      if (type && !/[^\u0020-\u007E]/.test(type)) {
        this[TYPE] = type;
      }
    }
    get size() {
      return this[BUFFER].length;
    }
    get type() {
      return this[TYPE];
    }
    text() {
      return Promise.resolve(this[BUFFER].toString());
    }
    arrayBuffer() {
      const buf = this[BUFFER];
      const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      return Promise.resolve(ab);
    }
    stream() {
      const readable = new Readable();
      readable._read = function() {
      };
      readable.push(this[BUFFER]);
      readable.push(null);
      return readable;
    }
    toString() {
      return "[object Blob]";
    }
    slice() {
      const size = this.size;
      const start = arguments[0];
      const end = arguments[1];
      let relativeStart, relativeEnd;
      if (start === void 0) {
        relativeStart = 0;
      } else if (start < 0) {
        relativeStart = Math.max(size + start, 0);
      } else {
        relativeStart = Math.min(start, size);
      }
      if (end === void 0) {
        relativeEnd = size;
      } else if (end < 0) {
        relativeEnd = Math.max(size + end, 0);
      } else {
        relativeEnd = Math.min(end, size);
      }
      const span = Math.max(relativeEnd - relativeStart, 0);
      const buffer = this[BUFFER];
      const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
      const blob = new Blob([], {type: arguments[2]});
      blob[BUFFER] = slicedBuffer;
      return blob;
    }
  }
  Object.defineProperties(Blob.prototype, {
    size: {enumerable: true},
    type: {enumerable: true},
    slice: {enumerable: true}
  });
  Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
    value: "Blob",
    writable: false,
    enumerable: false,
    configurable: true
  });
  function FetchError(message, type, systemError) {
    Error.call(this, message);
    this.message = message;
    this.type = type;
    if (systemError) {
      this.code = this.errno = systemError.code;
    }
    Error.captureStackTrace(this, this.constructor);
  }
  FetchError.prototype = Object.create(Error.prototype);
  FetchError.prototype.constructor = FetchError;
  FetchError.prototype.name = "FetchError";
  let convert;
  try {
    convert = require("encoding").convert;
  } catch (e) {
  }
  const INTERNALS = Symbol("Body internals");
  const PassThrough = stream.default.PassThrough;
  function Body(body) {
    var _this = this;
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
    let size = _ref$size === void 0 ? 0 : _ref$size;
    var _ref$timeout = _ref.timeout;
    let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
    if (body == null) {
      body = null;
    } else if (isURLSearchParams(body)) {
      body = Buffer.from(body.toString());
    } else if (isBlob(body))
      ;
    else if (Buffer.isBuffer(body))
      ;
    else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
      body = Buffer.from(body);
    } else if (ArrayBuffer.isView(body)) {
      body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
    } else if (body instanceof stream.default)
      ;
    else {
      body = Buffer.from(String(body));
    }
    this[INTERNALS] = {
      body,
      disturbed: false,
      error: null
    };
    this.size = size;
    this.timeout = timeout;
    if (body instanceof stream.default) {
      body.on("error", function(err) {
        const error = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
        _this[INTERNALS].error = error;
      });
    }
  }
  Body.prototype = {
    get body() {
      return this[INTERNALS].body;
    },
    get bodyUsed() {
      return this[INTERNALS].disturbed;
    },
    arrayBuffer() {
      return consumeBody.call(this).then(function(buf) {
        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      });
    },
    blob() {
      let ct = this.headers && this.headers.get("content-type") || "";
      return consumeBody.call(this).then(function(buf) {
        return Object.assign(new Blob([], {
          type: ct.toLowerCase()
        }), {
          [BUFFER]: buf
        });
      });
    },
    json() {
      var _this2 = this;
      return consumeBody.call(this).then(function(buffer) {
        try {
          return JSON.parse(buffer.toString());
        } catch (err) {
          return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
        }
      });
    },
    text() {
      return consumeBody.call(this).then(function(buffer) {
        return buffer.toString();
      });
    },
    buffer() {
      return consumeBody.call(this);
    },
    textConverted() {
      var _this3 = this;
      return consumeBody.call(this).then(function(buffer) {
        return convertBody(buffer, _this3.headers);
      });
    }
  };
  Object.defineProperties(Body.prototype, {
    body: {enumerable: true},
    bodyUsed: {enumerable: true},
    arrayBuffer: {enumerable: true},
    blob: {enumerable: true},
    json: {enumerable: true},
    text: {enumerable: true}
  });
  Body.mixIn = function(proto) {
    for (const name of Object.getOwnPropertyNames(Body.prototype)) {
      if (!(name in proto)) {
        const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
        Object.defineProperty(proto, name, desc);
      }
    }
  };
  function consumeBody() {
    var _this4 = this;
    if (this[INTERNALS].disturbed) {
      return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
    }
    this[INTERNALS].disturbed = true;
    if (this[INTERNALS].error) {
      return Body.Promise.reject(this[INTERNALS].error);
    }
    let body = this.body;
    if (body === null) {
      return Body.Promise.resolve(Buffer.alloc(0));
    }
    if (isBlob(body)) {
      body = body.stream();
    }
    if (Buffer.isBuffer(body)) {
      return Body.Promise.resolve(body);
    }
    if (!(body instanceof stream.default)) {
      return Body.Promise.resolve(Buffer.alloc(0));
    }
    let accum = [];
    let accumBytes = 0;
    let abort = false;
    return new Body.Promise(function(resolve, reject) {
      let resTimeout;
      if (_this4.timeout) {
        resTimeout = setTimeout(function() {
          abort = true;
          reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
        }, _this4.timeout);
      }
      body.on("error", function(err) {
        if (err.name === "AbortError") {
          abort = true;
          reject(err);
        } else {
          reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
        }
      });
      body.on("data", function(chunk) {
        if (abort || chunk === null) {
          return;
        }
        if (_this4.size && accumBytes + chunk.length > _this4.size) {
          abort = true;
          reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
          return;
        }
        accumBytes += chunk.length;
        accum.push(chunk);
      });
      body.on("end", function() {
        if (abort) {
          return;
        }
        clearTimeout(resTimeout);
        try {
          resolve(Buffer.concat(accum, accumBytes));
        } catch (err) {
          reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
        }
      });
    });
  }
  function convertBody(buffer, headers) {
    if (typeof convert !== "function") {
      throw new Error("The package `encoding` must be installed to use the textConverted() function");
    }
    const ct = headers.get("content-type");
    let charset = "utf-8";
    let res, str;
    if (ct) {
      res = /charset=([^;]*)/i.exec(ct);
    }
    str = buffer.slice(0, 1024).toString();
    if (!res && str) {
      res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
    }
    if (!res && str) {
      res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
      if (res) {
        res = /charset=(.*)/i.exec(res.pop());
      }
    }
    if (!res && str) {
      res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
    }
    if (res) {
      charset = res.pop();
      if (charset === "gb2312" || charset === "gbk") {
        charset = "gb18030";
      }
    }
    return convert(buffer, "UTF-8", charset).toString();
  }
  function isURLSearchParams(obj) {
    if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
      return false;
    }
    return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
  }
  function isBlob(obj) {
    return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
  }
  function clone(instance) {
    let p1, p2;
    let body = instance.body;
    if (instance.bodyUsed) {
      throw new Error("cannot clone body after it is used");
    }
    if (body instanceof stream.default && typeof body.getBoundary !== "function") {
      p1 = new PassThrough();
      p2 = new PassThrough();
      body.pipe(p1);
      body.pipe(p2);
      instance[INTERNALS].body = p1;
      body = p2;
    }
    return body;
  }
  function extractContentType(body) {
    if (body === null) {
      return null;
    } else if (typeof body === "string") {
      return "text/plain;charset=UTF-8";
    } else if (isURLSearchParams(body)) {
      return "application/x-www-form-urlencoded;charset=UTF-8";
    } else if (isBlob(body)) {
      return body.type || null;
    } else if (Buffer.isBuffer(body)) {
      return null;
    } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
      return null;
    } else if (ArrayBuffer.isView(body)) {
      return null;
    } else if (typeof body.getBoundary === "function") {
      return `multipart/form-data;boundary=${body.getBoundary()}`;
    } else if (body instanceof stream.default) {
      return null;
    } else {
      return "text/plain;charset=UTF-8";
    }
  }
  function getTotalBytes(instance) {
    const body = instance.body;
    if (body === null) {
      return 0;
    } else if (isBlob(body)) {
      return body.size;
    } else if (Buffer.isBuffer(body)) {
      return body.length;
    } else if (body && typeof body.getLengthSync === "function") {
      if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || body.hasKnownLength && body.hasKnownLength()) {
        return body.getLengthSync();
      }
      return null;
    } else {
      return null;
    }
  }
  function writeToStream(dest, instance) {
    const body = instance.body;
    if (body === null) {
      dest.end();
    } else if (isBlob(body)) {
      body.stream().pipe(dest);
    } else if (Buffer.isBuffer(body)) {
      dest.write(body);
      dest.end();
    } else {
      body.pipe(dest);
    }
  }
  Body.Promise = global.Promise;
  const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
  const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
  function validateName(name) {
    name = `${name}`;
    if (invalidTokenRegex.test(name) || name === "") {
      throw new TypeError(`${name} is not a legal HTTP header name`);
    }
  }
  function validateValue(value) {
    value = `${value}`;
    if (invalidHeaderCharRegex.test(value)) {
      throw new TypeError(`${value} is not a legal HTTP header value`);
    }
  }
  function find(map, name) {
    name = name.toLowerCase();
    for (const key in map) {
      if (key.toLowerCase() === name) {
        return key;
      }
    }
    return void 0;
  }
  const MAP = Symbol("map");
  class Headers2 {
    constructor() {
      let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
      this[MAP] = Object.create(null);
      if (init instanceof Headers2) {
        const rawHeaders = init.raw();
        const headerNames = Object.keys(rawHeaders);
        for (const headerName of headerNames) {
          for (const value of rawHeaders[headerName]) {
            this.append(headerName, value);
          }
        }
        return;
      }
      if (init == null)
        ;
      else if (typeof init === "object") {
        const method = init[Symbol.iterator];
        if (method != null) {
          if (typeof method !== "function") {
            throw new TypeError("Header pairs must be iterable");
          }
          const pairs = [];
          for (const pair of init) {
            if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
              throw new TypeError("Each header pair must be iterable");
            }
            pairs.push(Array.from(pair));
          }
          for (const pair of pairs) {
            if (pair.length !== 2) {
              throw new TypeError("Each header pair must be a name/value tuple");
            }
            this.append(pair[0], pair[1]);
          }
        } else {
          for (const key of Object.keys(init)) {
            const value = init[key];
            this.append(key, value);
          }
        }
      } else {
        throw new TypeError("Provided initializer must be an object");
      }
    }
    get(name) {
      name = `${name}`;
      validateName(name);
      const key = find(this[MAP], name);
      if (key === void 0) {
        return null;
      }
      return this[MAP][key].join(", ");
    }
    forEach(callback) {
      let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
      let pairs = getHeaders(this);
      let i = 0;
      while (i < pairs.length) {
        var _pairs$i = pairs[i];
        const name = _pairs$i[0], value = _pairs$i[1];
        callback.call(thisArg, value, name, this);
        pairs = getHeaders(this);
        i++;
      }
    }
    set(name, value) {
      name = `${name}`;
      value = `${value}`;
      validateName(name);
      validateValue(value);
      const key = find(this[MAP], name);
      this[MAP][key !== void 0 ? key : name] = [value];
    }
    append(name, value) {
      name = `${name}`;
      value = `${value}`;
      validateName(name);
      validateValue(value);
      const key = find(this[MAP], name);
      if (key !== void 0) {
        this[MAP][key].push(value);
      } else {
        this[MAP][name] = [value];
      }
    }
    has(name) {
      name = `${name}`;
      validateName(name);
      return find(this[MAP], name) !== void 0;
    }
    delete(name) {
      name = `${name}`;
      validateName(name);
      const key = find(this[MAP], name);
      if (key !== void 0) {
        delete this[MAP][key];
      }
    }
    raw() {
      return this[MAP];
    }
    keys() {
      return createHeadersIterator(this, "key");
    }
    values() {
      return createHeadersIterator(this, "value");
    }
    [Symbol.iterator]() {
      return createHeadersIterator(this, "key+value");
    }
  }
  Headers2.prototype.entries = Headers2.prototype[Symbol.iterator];
  Object.defineProperty(Headers2.prototype, Symbol.toStringTag, {
    value: "Headers",
    writable: false,
    enumerable: false,
    configurable: true
  });
  Object.defineProperties(Headers2.prototype, {
    get: {enumerable: true},
    forEach: {enumerable: true},
    set: {enumerable: true},
    append: {enumerable: true},
    has: {enumerable: true},
    delete: {enumerable: true},
    keys: {enumerable: true},
    values: {enumerable: true},
    entries: {enumerable: true}
  });
  function getHeaders(headers) {
    let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
    const keys = Object.keys(headers[MAP]).sort();
    return keys.map(kind === "key" ? function(k) {
      return k.toLowerCase();
    } : kind === "value" ? function(k) {
      return headers[MAP][k].join(", ");
    } : function(k) {
      return [k.toLowerCase(), headers[MAP][k].join(", ")];
    });
  }
  const INTERNAL = Symbol("internal");
  function createHeadersIterator(target, kind) {
    const iterator = Object.create(HeadersIteratorPrototype);
    iterator[INTERNAL] = {
      target,
      kind,
      index: 0
    };
    return iterator;
  }
  const HeadersIteratorPrototype = Object.setPrototypeOf({
    next() {
      if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
        throw new TypeError("Value of `this` is not a HeadersIterator");
      }
      var _INTERNAL = this[INTERNAL];
      const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
      const values = getHeaders(target, kind);
      const len = values.length;
      if (index >= len) {
        return {
          value: void 0,
          done: true
        };
      }
      this[INTERNAL].index = index + 1;
      return {
        value: values[index],
        done: false
      };
    }
  }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
  Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
    value: "HeadersIterator",
    writable: false,
    enumerable: false,
    configurable: true
  });
  function exportNodeCompatibleHeaders(headers) {
    const obj = Object.assign({__proto__: null}, headers[MAP]);
    const hostHeaderKey = find(headers[MAP], "Host");
    if (hostHeaderKey !== void 0) {
      obj[hostHeaderKey] = obj[hostHeaderKey][0];
    }
    return obj;
  }
  function createHeadersLenient(obj) {
    const headers = new Headers2();
    for (const name of Object.keys(obj)) {
      if (invalidTokenRegex.test(name)) {
        continue;
      }
      if (Array.isArray(obj[name])) {
        for (const val of obj[name]) {
          if (invalidHeaderCharRegex.test(val)) {
            continue;
          }
          if (headers[MAP][name] === void 0) {
            headers[MAP][name] = [val];
          } else {
            headers[MAP][name].push(val);
          }
        }
      } else if (!invalidHeaderCharRegex.test(obj[name])) {
        headers[MAP][name] = [obj[name]];
      }
    }
    return headers;
  }
  const INTERNALS$1 = Symbol("Response internals");
  const STATUS_CODES = http2.default.STATUS_CODES;
  class Response2 {
    constructor() {
      let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      Body.call(this, body, opts);
      const status = opts.status || 200;
      const headers = new Headers2(opts.headers);
      if (body != null && !headers.has("Content-Type")) {
        const contentType = extractContentType(body);
        if (contentType) {
          headers.append("Content-Type", contentType);
        }
      }
      this[INTERNALS$1] = {
        url: opts.url,
        status,
        statusText: opts.statusText || STATUS_CODES[status],
        headers,
        counter: opts.counter
      };
    }
    get url() {
      return this[INTERNALS$1].url || "";
    }
    get status() {
      return this[INTERNALS$1].status;
    }
    get ok() {
      return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
    }
    get redirected() {
      return this[INTERNALS$1].counter > 0;
    }
    get statusText() {
      return this[INTERNALS$1].statusText;
    }
    get headers() {
      return this[INTERNALS$1].headers;
    }
    clone() {
      return new Response2(clone(this), {
        url: this.url,
        status: this.status,
        statusText: this.statusText,
        headers: this.headers,
        ok: this.ok,
        redirected: this.redirected
      });
    }
  }
  Body.mixIn(Response2.prototype);
  Object.defineProperties(Response2.prototype, {
    url: {enumerable: true},
    status: {enumerable: true},
    ok: {enumerable: true},
    redirected: {enumerable: true},
    statusText: {enumerable: true},
    headers: {enumerable: true},
    clone: {enumerable: true}
  });
  Object.defineProperty(Response2.prototype, Symbol.toStringTag, {
    value: "Response",
    writable: false,
    enumerable: false,
    configurable: true
  });
  const INTERNALS$2 = Symbol("Request internals");
  const parse_url = url.default.parse;
  const format_url = url.default.format;
  const streamDestructionSupported = "destroy" in stream.default.Readable.prototype;
  function isRequest(input) {
    return typeof input === "object" && typeof input[INTERNALS$2] === "object";
  }
  function isAbortSignal(signal) {
    const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
    return !!(proto && proto.constructor.name === "AbortSignal");
  }
  class Request2 {
    constructor(input) {
      let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      let parsedURL;
      if (!isRequest(input)) {
        if (input && input.href) {
          parsedURL = parse_url(input.href);
        } else {
          parsedURL = parse_url(`${input}`);
        }
        input = {};
      } else {
        parsedURL = parse_url(input.url);
      }
      let method = init.method || input.method || "GET";
      method = method.toUpperCase();
      if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
        throw new TypeError("Request with GET/HEAD method cannot have body");
      }
      let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
      Body.call(this, inputBody, {
        timeout: init.timeout || input.timeout || 0,
        size: init.size || input.size || 0
      });
      const headers = new Headers2(init.headers || input.headers || {});
      if (inputBody != null && !headers.has("Content-Type")) {
        const contentType = extractContentType(inputBody);
        if (contentType) {
          headers.append("Content-Type", contentType);
        }
      }
      let signal = isRequest(input) ? input.signal : null;
      if ("signal" in init)
        signal = init.signal;
      if (signal != null && !isAbortSignal(signal)) {
        throw new TypeError("Expected signal to be an instanceof AbortSignal");
      }
      this[INTERNALS$2] = {
        method,
        redirect: init.redirect || input.redirect || "follow",
        headers,
        parsedURL,
        signal
      };
      this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
      this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
      this.counter = init.counter || input.counter || 0;
      this.agent = init.agent || input.agent;
    }
    get method() {
      return this[INTERNALS$2].method;
    }
    get url() {
      return format_url(this[INTERNALS$2].parsedURL);
    }
    get headers() {
      return this[INTERNALS$2].headers;
    }
    get redirect() {
      return this[INTERNALS$2].redirect;
    }
    get signal() {
      return this[INTERNALS$2].signal;
    }
    clone() {
      return new Request2(this);
    }
  }
  Body.mixIn(Request2.prototype);
  Object.defineProperty(Request2.prototype, Symbol.toStringTag, {
    value: "Request",
    writable: false,
    enumerable: false,
    configurable: true
  });
  Object.defineProperties(Request2.prototype, {
    method: {enumerable: true},
    url: {enumerable: true},
    headers: {enumerable: true},
    redirect: {enumerable: true},
    clone: {enumerable: true},
    signal: {enumerable: true}
  });
  function getNodeRequestOptions(request) {
    const parsedURL = request[INTERNALS$2].parsedURL;
    const headers = new Headers2(request[INTERNALS$2].headers);
    if (!headers.has("Accept")) {
      headers.set("Accept", "*/*");
    }
    if (!parsedURL.protocol || !parsedURL.hostname) {
      throw new TypeError("Only absolute URLs are supported");
    }
    if (!/^https?:$/.test(parsedURL.protocol)) {
      throw new TypeError("Only HTTP(S) protocols are supported");
    }
    if (request.signal && request.body instanceof stream.default.Readable && !streamDestructionSupported) {
      throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
    }
    let contentLengthValue = null;
    if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
      contentLengthValue = "0";
    }
    if (request.body != null) {
      const totalBytes = getTotalBytes(request);
      if (typeof totalBytes === "number") {
        contentLengthValue = String(totalBytes);
      }
    }
    if (contentLengthValue) {
      headers.set("Content-Length", contentLengthValue);
    }
    if (!headers.has("User-Agent")) {
      headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
    }
    if (request.compress && !headers.has("Accept-Encoding")) {
      headers.set("Accept-Encoding", "gzip,deflate");
    }
    let agent = request.agent;
    if (typeof agent === "function") {
      agent = agent(parsedURL);
    }
    if (!headers.has("Connection") && !agent) {
      headers.set("Connection", "close");
    }
    return Object.assign({}, parsedURL, {
      method: request.method,
      headers: exportNodeCompatibleHeaders(headers),
      agent
    });
  }
  function AbortError(message) {
    Error.call(this, message);
    this.type = "aborted";
    this.message = message;
    Error.captureStackTrace(this, this.constructor);
  }
  AbortError.prototype = Object.create(Error.prototype);
  AbortError.prototype.constructor = AbortError;
  AbortError.prototype.name = "AbortError";
  const PassThrough$1 = stream.default.PassThrough;
  const resolve_url = url.default.resolve;
  function fetch(url2, opts) {
    if (!fetch.Promise) {
      throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
    }
    Body.Promise = fetch.Promise;
    return new fetch.Promise(function(resolve, reject) {
      const request = new Request2(url2, opts);
      const options = getNodeRequestOptions(request);
      const send = (options.protocol === "https:" ? https2.default : http2.default).request;
      const signal = request.signal;
      let response = null;
      const abort = function abort2() {
        let error = new AbortError("The user aborted a request.");
        reject(error);
        if (request.body && request.body instanceof stream.default.Readable) {
          request.body.destroy(error);
        }
        if (!response || !response.body)
          return;
        response.body.emit("error", error);
      };
      if (signal && signal.aborted) {
        abort();
        return;
      }
      const abortAndFinalize = function abortAndFinalize2() {
        abort();
        finalize();
      };
      const req = send(options);
      let reqTimeout;
      if (signal) {
        signal.addEventListener("abort", abortAndFinalize);
      }
      function finalize() {
        req.abort();
        if (signal)
          signal.removeEventListener("abort", abortAndFinalize);
        clearTimeout(reqTimeout);
      }
      if (request.timeout) {
        req.once("socket", function(socket) {
          reqTimeout = setTimeout(function() {
            reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
            finalize();
          }, request.timeout);
        });
      }
      req.on("error", function(err) {
        reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
        finalize();
      });
      req.on("response", function(res) {
        clearTimeout(reqTimeout);
        const headers = createHeadersLenient(res.headers);
        if (fetch.isRedirect(res.statusCode)) {
          const location = headers.get("Location");
          const locationURL = location === null ? null : resolve_url(request.url, location);
          switch (request.redirect) {
            case "error":
              reject(new FetchError(`redirect mode is set to error: ${request.url}`, "no-redirect"));
              finalize();
              return;
            case "manual":
              if (locationURL !== null) {
                try {
                  headers.set("Location", locationURL);
                } catch (err) {
                  reject(err);
                }
              }
              break;
            case "follow":
              if (locationURL === null) {
                break;
              }
              if (request.counter >= request.follow) {
                reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
                finalize();
                return;
              }
              const requestOpts = {
                headers: new Headers2(request.headers),
                follow: request.follow,
                counter: request.counter + 1,
                agent: request.agent,
                compress: request.compress,
                method: request.method,
                body: request.body,
                signal: request.signal,
                timeout: request.timeout
              };
              if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                finalize();
                return;
              }
              if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
                requestOpts.method = "GET";
                requestOpts.body = void 0;
                requestOpts.headers.delete("content-length");
              }
              resolve(fetch(new Request2(locationURL, requestOpts)));
              finalize();
              return;
          }
        }
        res.once("end", function() {
          if (signal)
            signal.removeEventListener("abort", abortAndFinalize);
        });
        let body = res.pipe(new PassThrough$1());
        const response_options = {
          url: request.url,
          status: res.statusCode,
          statusText: res.statusMessage,
          headers,
          size: request.size,
          timeout: request.timeout,
          counter: request.counter
        };
        const codings = headers.get("Content-Encoding");
        if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
          response = new Response2(body, response_options);
          resolve(response);
          return;
        }
        const zlibOptions = {
          flush: zlib2.default.Z_SYNC_FLUSH,
          finishFlush: zlib2.default.Z_SYNC_FLUSH
        };
        if (codings == "gzip" || codings == "x-gzip") {
          body = body.pipe(zlib2.default.createGunzip(zlibOptions));
          response = new Response2(body, response_options);
          resolve(response);
          return;
        }
        if (codings == "deflate" || codings == "x-deflate") {
          const raw = res.pipe(new PassThrough$1());
          raw.once("data", function(chunk) {
            if ((chunk[0] & 15) === 8) {
              body = body.pipe(zlib2.default.createInflate());
            } else {
              body = body.pipe(zlib2.default.createInflateRaw());
            }
            response = new Response2(body, response_options);
            resolve(response);
          });
          return;
        }
        if (codings == "br" && typeof zlib2.default.createBrotliDecompress === "function") {
          body = body.pipe(zlib2.default.createBrotliDecompress());
          response = new Response2(body, response_options);
          resolve(response);
          return;
        }
        response = new Response2(body, response_options);
        resolve(response);
      });
      writeToStream(req, request);
    });
  }
  fetch.isRedirect = function(code) {
    return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
  };
  fetch.Promise = global.Promise;
  var lib_default = fetch;
});

// ../../node_modules/.pnpm/agent-base@6.0.1/node_modules/agent-base/dist/src/promisify.js
var require_promisify = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  function promisify3(fn) {
    return function(req, opts) {
      return new Promise((resolve, reject) => {
        fn.call(this, req, opts, (err, rtn) => {
          if (err) {
            reject(err);
          } else {
            resolve(rtn);
          }
        });
      });
    };
  }
  exports2.default = promisify3;
});

// ../../node_modules/.pnpm/agent-base@6.0.1/node_modules/agent-base/dist/src/index.js
var require_src3 = __commonJS((exports2, module3) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  const events_1 = require("events");
  const debug_1 = __importDefault(require_src2());
  const promisify_1 = __importDefault(require_promisify());
  const debug3 = debug_1.default("agent-base");
  function isAgent(v) {
    return Boolean(v) && typeof v.addRequest === "function";
  }
  function isSecureEndpoint() {
    const {stack} = new Error();
    if (typeof stack !== "string")
      return false;
    return stack.split("\n").some((l) => l.indexOf("(https.js:") !== -1);
  }
  function createAgent(callback, opts) {
    return new createAgent.Agent(callback, opts);
  }
  (function(createAgent2) {
    class Agent extends events_1.EventEmitter {
      constructor(callback, _opts) {
        super();
        let opts = _opts;
        if (typeof callback === "function") {
          this.callback = callback;
        } else if (callback) {
          opts = callback;
        }
        this.timeout = null;
        if (opts && typeof opts.timeout === "number") {
          this.timeout = opts.timeout;
        }
        this.maxFreeSockets = 1;
        this.maxSockets = 1;
        this.sockets = {};
        this.requests = {};
        this.options = {};
      }
      get defaultPort() {
        if (typeof this.explicitDefaultPort === "number") {
          return this.explicitDefaultPort;
        }
        return isSecureEndpoint() ? 443 : 80;
      }
      set defaultPort(v) {
        this.explicitDefaultPort = v;
      }
      get protocol() {
        if (typeof this.explicitProtocol === "string") {
          return this.explicitProtocol;
        }
        return isSecureEndpoint() ? "https:" : "http:";
      }
      set protocol(v) {
        this.explicitProtocol = v;
      }
      callback(req, opts, fn) {
        throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`');
      }
      addRequest(req, _opts) {
        const opts = Object.assign({}, _opts);
        if (typeof opts.secureEndpoint !== "boolean") {
          opts.secureEndpoint = isSecureEndpoint();
        }
        if (opts.host == null) {
          opts.host = "localhost";
        }
        if (opts.port == null) {
          opts.port = opts.secureEndpoint ? 443 : 80;
        }
        if (opts.protocol == null) {
          opts.protocol = opts.secureEndpoint ? "https:" : "http:";
        }
        if (opts.host && opts.path) {
          delete opts.path;
        }
        delete opts.agent;
        delete opts.hostname;
        delete opts._defaultAgent;
        delete opts.defaultPort;
        delete opts.createConnection;
        req._last = true;
        req.shouldKeepAlive = false;
        let timedOut = false;
        let timeoutId = null;
        const timeoutMs = opts.timeout || this.timeout;
        const onerror = (err) => {
          if (req._hadError)
            return;
          req.emit("error", err);
          req._hadError = true;
        };
        const ontimeout = () => {
          timeoutId = null;
          timedOut = true;
          const err = new Error(`A "socket" was not created for HTTP request before ${timeoutMs}ms`);
          err.code = "ETIMEOUT";
          onerror(err);
        };
        const callbackError = (err) => {
          if (timedOut)
            return;
          if (timeoutId !== null) {
            clearTimeout(timeoutId);
            timeoutId = null;
          }
          onerror(err);
        };
        const onsocket = (socket) => {
          if (timedOut)
            return;
          if (timeoutId != null) {
            clearTimeout(timeoutId);
            timeoutId = null;
          }
          if (isAgent(socket)) {
            debug3("Callback returned another Agent instance %o", socket.constructor.name);
            socket.addRequest(req, opts);
            return;
          }
          if (socket) {
            socket.once("free", () => {
              this.freeSocket(socket, opts);
            });
            req.onSocket(socket);
            return;
          }
          const err = new Error(`no Duplex stream was returned to agent-base for \`${req.method} ${req.path}\``);
          onerror(err);
        };
        if (typeof this.callback !== "function") {
          onerror(new Error("`callback` is not defined"));
          return;
        }
        if (!this.promisifiedCallback) {
          if (this.callback.length >= 3) {
            debug3("Converting legacy callback function to promise");
            this.promisifiedCallback = promisify_1.default(this.callback);
          } else {
            this.promisifiedCallback = this.callback;
          }
        }
        if (typeof timeoutMs === "number" && timeoutMs > 0) {
          timeoutId = setTimeout(ontimeout, timeoutMs);
        }
        if ("port" in opts && typeof opts.port !== "number") {
          opts.port = Number(opts.port);
        }
        try {
          debug3("Resolving socket for %o request: %o", opts.protocol, `${req.method} ${req.path}`);
          Promise.resolve(this.promisifiedCallback(req, opts)).then(onsocket, callbackError);
        } catch (err) {
          Promise.reject(err).catch(callbackError);
        }
      }
      freeSocket(socket, opts) {
        debug3("Freeing socket %o %o", socket.constructor.name, opts);
        socket.destroy();
      }
      destroy() {
        debug3("Destroying agent %o", this.constructor.name);
      }
    }
    createAgent2.Agent = Agent;
    createAgent2.prototype = createAgent2.Agent.prototype;
  })(createAgent || (createAgent = {}));
  module3.exports = createAgent;
});

// ../../node_modules/.pnpm/https-proxy-agent@5.0.0/node_modules/https-proxy-agent/dist/parse-proxy-response.js
var require_parse_proxy_response = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  const debug_1 = __importDefault(require_src2());
  const debug3 = debug_1.default("https-proxy-agent:parse-proxy-response");
  function parseProxyResponse(socket) {
    return new Promise((resolve, reject) => {
      let buffersLength = 0;
      const buffers = [];
      function read() {
        const b = socket.read();
        if (b)
          ondata(b);
        else
          socket.once("readable", read);
      }
      function cleanup() {
        socket.removeListener("end", onend);
        socket.removeListener("error", onerror);
        socket.removeListener("close", onclose);
        socket.removeListener("readable", read);
      }
      function onclose(err) {
        debug3("onclose had error %o", err);
      }
      function onend() {
        debug3("onend");
      }
      function onerror(err) {
        cleanup();
        debug3("onerror %o", err);
        reject(err);
      }
      function ondata(b) {
        buffers.push(b);
        buffersLength += b.length;
        const buffered = Buffer.concat(buffers, buffersLength);
        const endOfHeaders = buffered.indexOf("\r\n\r\n");
        if (endOfHeaders === -1) {
          debug3("have not received end of HTTP headers yet...");
          read();
          return;
        }
        const firstLine = buffered.toString("ascii", 0, buffered.indexOf("\r\n"));
        const statusCode = +firstLine.split(" ")[1];
        debug3("got proxy server response: %o", firstLine);
        resolve({
          statusCode,
          buffered
        });
      }
      socket.on("error", onerror);
      socket.on("close", onclose);
      socket.on("end", onend);
      read();
    });
  }
  exports2.default = parseProxyResponse;
});

// ../../node_modules/.pnpm/https-proxy-agent@5.0.0/node_modules/https-proxy-agent/dist/agent.js
var require_agent = __commonJS((exports2) => {
  "use strict";
  var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  const net_1 = __importDefault(require("net"));
  const tls_1 = __importDefault(require("tls"));
  const url_1 = __importDefault(require("url"));
  const assert_1 = __importDefault(require("assert"));
  const debug_1 = __importDefault(require_src2());
  const agent_base_1 = require_src3();
  const parse_proxy_response_1 = __importDefault(require_parse_proxy_response());
  const debug3 = debug_1.default("https-proxy-agent:agent");
  class HttpsProxyAgent extends agent_base_1.Agent {
    constructor(_opts) {
      let opts;
      if (typeof _opts === "string") {
        opts = url_1.default.parse(_opts);
      } else {
        opts = _opts;
      }
      if (!opts) {
        throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");
      }
      debug3("creating new HttpsProxyAgent instance: %o", opts);
      super(opts);
      const proxy = Object.assign({}, opts);
      this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol);
      proxy.host = proxy.hostname || proxy.host;
      if (typeof proxy.port === "string") {
        proxy.port = parseInt(proxy.port, 10);
      }
      if (!proxy.port && proxy.host) {
        proxy.port = this.secureProxy ? 443 : 80;
      }
      if (this.secureProxy && !("ALPNProtocols" in proxy)) {
        proxy.ALPNProtocols = ["http 1.1"];
      }
      if (proxy.host && proxy.path) {
        delete proxy.path;
        delete proxy.pathname;
      }
      this.proxy = proxy;
    }
    callback(req, opts) {
      return __awaiter(this, void 0, void 0, function* () {
        const {proxy, secureProxy} = this;
        let socket;
        if (secureProxy) {
          debug3("Creating `tls.Socket`: %o", proxy);
          socket = tls_1.default.connect(proxy);
        } else {
          debug3("Creating `net.Socket`: %o", proxy);
          socket = net_1.default.connect(proxy);
        }
        const headers = Object.assign({}, proxy.headers);
        const hostname = `${opts.host}:${opts.port}`;
        let payload = `CONNECT ${hostname} HTTP/1.1\r
`;
        if (proxy.auth) {
          headers["Proxy-Authorization"] = `Basic ${Buffer.from(proxy.auth).toString("base64")}`;
        }
        let {host, port, secureEndpoint} = opts;
        if (!isDefaultPort(port, secureEndpoint)) {
          host += `:${port}`;
        }
        headers.Host = host;
        headers.Connection = "close";
        for (const name of Object.keys(headers)) {
          payload += `${name}: ${headers[name]}\r
`;
        }
        const proxyResponsePromise = parse_proxy_response_1.default(socket);
        socket.write(`${payload}\r
`);
        const {statusCode, buffered} = yield proxyResponsePromise;
        if (statusCode === 200) {
          req.once("socket", resume);
          if (opts.secureEndpoint) {
            const servername = opts.servername || opts.host;
            if (!servername) {
              throw new Error('Could not determine "servername"');
            }
            debug3("Upgrading socket connection to TLS");
            return tls_1.default.connect(Object.assign(Object.assign({}, omit(opts, "host", "hostname", "path", "port")), {
              socket,
              servername
            }));
          }
          return socket;
        }
        socket.destroy();
        const fakeSocket = new net_1.default.Socket();
        fakeSocket.readable = true;
        req.once("socket", (s) => {
          debug3("replaying proxy buffer for failed request");
          assert_1.default(s.listenerCount("data") > 0);
          s.push(buffered);
          s.push(null);
        });
        return fakeSocket;
      });
    }
  }
  exports2.default = HttpsProxyAgent;
  function resume(socket) {
    socket.resume();
  }
  function isDefaultPort(port, secure) {
    return Boolean(!secure && port === 80 || secure && port === 443);
  }
  function isHTTPS(protocol) {
    return typeof protocol === "string" ? /^https:?$/i.test(protocol) : false;
  }
  function omit(obj, ...keys) {
    const ret = {};
    let key;
    for (key in obj) {
      if (!keys.includes(key)) {
        ret[key] = obj[key];
      }
    }
    return ret;
  }
});

// ../../node_modules/.pnpm/https-proxy-agent@5.0.0/node_modules/https-proxy-agent/dist/index.js
var require_dist4 = __commonJS((exports2, module3) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  const agent_1 = __importDefault(require_agent());
  function createHttpsProxyAgent(opts) {
    return new agent_1.default(opts);
  }
  (function(createHttpsProxyAgent2) {
    createHttpsProxyAgent2.HttpsProxyAgent = agent_1.default;
    createHttpsProxyAgent2.prototype = agent_1.default.prototype;
  })(createHttpsProxyAgent || (createHttpsProxyAgent = {}));
  module3.exports = createHttpsProxyAgent;
});

// ../../node_modules/.pnpm/@tootallnate/once@1.1.2/node_modules/@tootallnate/once/dist/index.js
var require_dist5 = __commonJS((exports2, module3) => {
  "use strict";
  function noop() {
  }
  function once(emitter, name) {
    const o = once.spread(emitter, name);
    const r = o.then((args2) => args2[0]);
    r.cancel = o.cancel;
    return r;
  }
  (function(once2) {
    function spread(emitter, name) {
      let c = null;
      const p = new Promise((resolve, reject) => {
        function cancel() {
          emitter.removeListener(name, onEvent);
          emitter.removeListener("error", onError);
          p.cancel = noop;
        }
        function onEvent(...args2) {
          cancel();
          resolve(args2);
        }
        function onError(err) {
          cancel();
          reject(err);
        }
        c = cancel;
        emitter.on(name, onEvent);
        emitter.on("error", onError);
      });
      if (!c) {
        throw new TypeError("Could not get `cancel()` function");
      }
      p.cancel = c;
      return p;
    }
    once2.spread = spread;
  })(once || (once = {}));
  module3.exports = once;
});

// ../../node_modules/.pnpm/http-proxy-agent@4.0.1/node_modules/http-proxy-agent/dist/agent.js
var require_agent2 = __commonJS((exports2) => {
  "use strict";
  var __awaiter = exports2 && exports2.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  const net_1 = __importDefault(require("net"));
  const tls_1 = __importDefault(require("tls"));
  const url_1 = __importDefault(require("url"));
  const debug_1 = __importDefault(require_src2());
  const once_1 = __importDefault(require_dist5());
  const agent_base_1 = require_src3();
  const debug3 = debug_1.default("http-proxy-agent");
  function isHTTPS(protocol) {
    return typeof protocol === "string" ? /^https:?$/i.test(protocol) : false;
  }
  class HttpProxyAgent extends agent_base_1.Agent {
    constructor(_opts) {
      let opts;
      if (typeof _opts === "string") {
        opts = url_1.default.parse(_opts);
      } else {
        opts = _opts;
      }
      if (!opts) {
        throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");
      }
      debug3("Creating new HttpProxyAgent instance: %o", opts);
      super(opts);
      const proxy = Object.assign({}, opts);
      this.secureProxy = opts.secureProxy || isHTTPS(proxy.protocol);
      proxy.host = proxy.hostname || proxy.host;
      if (typeof proxy.port === "string") {
        proxy.port = parseInt(proxy.port, 10);
      }
      if (!proxy.port && proxy.host) {
        proxy.port = this.secureProxy ? 443 : 80;
      }
      if (proxy.host && proxy.path) {
        delete proxy.path;
        delete proxy.pathname;
      }
      this.proxy = proxy;
    }
    callback(req, opts) {
      return __awaiter(this, void 0, void 0, function* () {
        const {proxy, secureProxy} = this;
        const parsed = url_1.default.parse(req.path);
        if (!parsed.protocol) {
          parsed.protocol = "http:";
        }
        if (!parsed.hostname) {
          parsed.hostname = opts.hostname || opts.host || null;
        }
        if (parsed.port == null && typeof opts.port) {
          parsed.port = String(opts.port);
        }
        if (parsed.port === "80") {
          delete parsed.port;
        }
        req.path = url_1.default.format(parsed);
        if (proxy.auth) {
          req.setHeader("Proxy-Authorization", `Basic ${Buffer.from(proxy.auth).toString("base64")}`);
        }
        let socket;
        if (secureProxy) {
          debug3("Creating `tls.Socket`: %o", proxy);
          socket = tls_1.default.connect(proxy);
        } else {
          debug3("Creating `net.Socket`: %o", proxy);
          socket = net_1.default.connect(proxy);
        }
        if (req._header) {
          let first;
          let endOfHeaders;
          debug3("Regenerating stored HTTP header string for request");
          req._header = null;
          req._implicitHeader();
          if (req.output && req.output.length > 0) {
            debug3("Patching connection write() output buffer with updated header");
            first = req.output[0];
            endOfHeaders = first.indexOf("\r\n\r\n") + 4;
            req.output[0] = req._header + first.substring(endOfHeaders);
            debug3("Output buffer: %o", req.output);
          } else if (req.outputData && req.outputData.length > 0) {
            debug3("Patching connection write() output buffer with updated header");
            first = req.outputData[0].data;
            endOfHeaders = first.indexOf("\r\n\r\n") + 4;
            req.outputData[0].data = req._header + first.substring(endOfHeaders);
            debug3("Output buffer: %o", req.outputData[0].data);
          }
        }
        yield once_1.default(socket, "connect");
        return socket;
      });
    }
  }
  exports2.default = HttpProxyAgent;
});

// ../../node_modules/.pnpm/http-proxy-agent@4.0.1/node_modules/http-proxy-agent/dist/index.js
var require_dist6 = __commonJS((exports2, module3) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  const agent_1 = __importDefault(require_agent2());
  function createHttpProxyAgent(opts) {
    return new agent_1.default(opts);
  }
  (function(createHttpProxyAgent2) {
    createHttpProxyAgent2.HttpProxyAgent = agent_1.default;
    createHttpProxyAgent2.prototype = agent_1.default.prototype;
  })(createHttpProxyAgent || (createHttpProxyAgent = {}));
  module3.exports = createHttpProxyAgent;
});

// ../fetch-engine/dist/getProxyAgent.js
var require_getProxyAgent = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getProxyAgent = void 0;
  const https_proxy_agent_1 = __importDefault(require_dist4());
  const http_proxy_agent_1 = __importDefault(require_dist6());
  const url_1 = __importDefault(require("url"));
  "use strict";
  function formatHostname(hostname) {
    return hostname.replace(/^\.*/, ".").toLowerCase();
  }
  function parseNoProxyZone(zone) {
    zone = zone.trim().toLowerCase();
    const zoneParts = zone.split(":", 2);
    const zoneHost = formatHostname(zoneParts[0]);
    const zonePort = zoneParts[1];
    const hasPort = zone.includes(":");
    return {hostname: zoneHost, port: zonePort, hasPort};
  }
  function uriInNoProxy(uri, noProxy) {
    const port = uri.port || (uri.protocol === "https:" ? "443" : "80");
    const hostname = formatHostname(uri.hostname);
    const noProxyList = noProxy.split(",");
    return noProxyList.map(parseNoProxyZone).some(function(noProxyZone) {
      const isMatchedAt = hostname.indexOf(noProxyZone.hostname);
      const hostnameMatched = isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length;
      if (noProxyZone.hasPort) {
        return port === noProxyZone.port && hostnameMatched;
      }
      return hostnameMatched;
    });
  }
  function getProxyFromURI(uri) {
    const noProxy = process.env.NO_PROXY || process.env.no_proxy || "";
    if (noProxy === "*") {
      return null;
    }
    if (noProxy !== "" && uriInNoProxy(uri, noProxy)) {
      return null;
    }
    if (uri.protocol === "http:") {
      return process.env.HTTP_PROXY || process.env.http_proxy || null;
    }
    if (uri.protocol === "https:") {
      return process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy || null;
    }
    return null;
  }
  function getProxyAgent(url) {
    const uri = url_1.default.parse(url);
    const proxy = getProxyFromURI(uri);
    if (!proxy) {
      return void 0;
    }
    if (uri.protocol === "http:") {
      return http_proxy_agent_1.default(proxy);
    }
    if (uri.protocol === "https:") {
      return https_proxy_agent_1.default(proxy);
    }
    return void 0;
  }
  exports2.getProxyAgent = getProxyAgent;
});

// ../../node_modules/.pnpm/crypto-random-string@2.0.0/node_modules/crypto-random-string/index.js
var require_crypto_random_string = __commonJS((exports2, module3) => {
  "use strict";
  const crypto = require("crypto");
  module3.exports = (length) => {
    if (!Number.isFinite(length)) {
      throw new TypeError("Expected a finite number");
    }
    return crypto.randomBytes(Math.ceil(length / 2)).toString("hex").slice(0, length);
  };
});

// ../../node_modules/.pnpm/unique-string@2.0.0/node_modules/unique-string/index.js
var require_unique_string = __commonJS((exports2, module3) => {
  "use strict";
  const cryptoRandomString = require_crypto_random_string();
  module3.exports = () => cryptoRandomString(32);
});

// ../../node_modules/.pnpm/array-union@2.1.0/node_modules/array-union/index.js
var require_array_union = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (...arguments_) => {
    return [...new Set([].concat(...arguments_))];
  };
});

// ../../node_modules/.pnpm/merge2@1.4.1/node_modules/merge2/index.js
var require_merge2 = __commonJS((exports2, module3) => {
  "use strict";
  const Stream = require("stream");
  const PassThrough = Stream.PassThrough;
  const slice = Array.prototype.slice;
  module3.exports = merge2;
  function merge2() {
    const streamsQueue = [];
    const args2 = slice.call(arguments);
    let merging = false;
    let options = args2[args2.length - 1];
    if (options && !Array.isArray(options) && options.pipe == null) {
      args2.pop();
    } else {
      options = {};
    }
    const doEnd = options.end !== false;
    const doPipeError = options.pipeError === true;
    if (options.objectMode == null) {
      options.objectMode = true;
    }
    if (options.highWaterMark == null) {
      options.highWaterMark = 64 * 1024;
    }
    const mergedStream = PassThrough(options);
    function addStream() {
      for (let i = 0, len = arguments.length; i < len; i++) {
        streamsQueue.push(pauseStreams(arguments[i], options));
      }
      mergeStream();
      return this;
    }
    function mergeStream() {
      if (merging) {
        return;
      }
      merging = true;
      let streams = streamsQueue.shift();
      if (!streams) {
        process.nextTick(endStream);
        return;
      }
      if (!Array.isArray(streams)) {
        streams = [streams];
      }
      let pipesCount = streams.length + 1;
      function next() {
        if (--pipesCount > 0) {
          return;
        }
        merging = false;
        mergeStream();
      }
      function pipe(stream) {
        function onend() {
          stream.removeListener("merge2UnpipeEnd", onend);
          stream.removeListener("end", onend);
          if (doPipeError) {
            stream.removeListener("error", onerror);
          }
          next();
        }
        function onerror(err) {
          mergedStream.emit("error", err);
        }
        if (stream._readableState.endEmitted) {
          return next();
        }
        stream.on("merge2UnpipeEnd", onend);
        stream.on("end", onend);
        if (doPipeError) {
          stream.on("error", onerror);
        }
        stream.pipe(mergedStream, {end: false});
        stream.resume();
      }
      for (let i = 0; i < streams.length; i++) {
        pipe(streams[i]);
      }
      next();
    }
    function endStream() {
      merging = false;
      mergedStream.emit("queueDrain");
      if (doEnd) {
        mergedStream.end();
      }
    }
    mergedStream.setMaxListeners(0);
    mergedStream.add = addStream;
    mergedStream.on("unpipe", function(stream) {
      stream.emit("merge2UnpipeEnd");
    });
    if (args2.length) {
      addStream.apply(null, args2);
    }
    return mergedStream;
  }
  function pauseStreams(streams, options) {
    if (!Array.isArray(streams)) {
      if (!streams._readableState && streams.pipe) {
        streams = streams.pipe(PassThrough(options));
      }
      if (!streams._readableState || !streams.pause || !streams.pipe) {
        throw new Error("Only readable stream can be merged.");
      }
      streams.pause();
    } else {
      for (let i = 0, len = streams.length; i < len; i++) {
        streams[i] = pauseStreams(streams[i], options);
      }
    }
    return streams;
  }
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/utils/array.js
var require_array = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.splitWhen = exports2.flatten = void 0;
  function flatten(items) {
    return items.reduce((collection, item) => [].concat(collection, item), []);
  }
  exports2.flatten = flatten;
  function splitWhen(items, predicate) {
    const result = [[]];
    let groupIndex = 0;
    for (const item of items) {
      if (predicate(item)) {
        groupIndex++;
        result[groupIndex] = [];
      } else {
        result[groupIndex].push(item);
      }
    }
    return result;
  }
  exports2.splitWhen = splitWhen;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/utils/errno.js
var require_errno = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.isEnoentCodeError = void 0;
  function isEnoentCodeError(error) {
    return error.code === "ENOENT";
  }
  exports2.isEnoentCodeError = isEnoentCodeError;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/utils/fs.js
var require_fs = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.createDirentFromStats = void 0;
  class DirentFromStats {
    constructor(name, stats) {
      this.name = name;
      this.isBlockDevice = stats.isBlockDevice.bind(stats);
      this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
      this.isDirectory = stats.isDirectory.bind(stats);
      this.isFIFO = stats.isFIFO.bind(stats);
      this.isFile = stats.isFile.bind(stats);
      this.isSocket = stats.isSocket.bind(stats);
      this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
    }
  }
  function createDirentFromStats(name, stats) {
    return new DirentFromStats(name, stats);
  }
  exports2.createDirentFromStats = createDirentFromStats;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/utils/path.js
var require_path = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.removeLeadingDotSegment = exports2.escape = exports2.makeAbsolute = exports2.unixify = void 0;
  const path19 = require("path");
  const LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2;
  const UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;
  function unixify(filepath) {
    return filepath.replace(/\\/g, "/");
  }
  exports2.unixify = unixify;
  function makeAbsolute(cwd, filepath) {
    return path19.resolve(cwd, filepath);
  }
  exports2.makeAbsolute = makeAbsolute;
  function escape2(pattern) {
    return pattern.replace(UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
  }
  exports2.escape = escape2;
  function removeLeadingDotSegment(entry) {
    if (entry.charAt(0) === ".") {
      const secondCharactery = entry.charAt(1);
      if (secondCharactery === "/" || secondCharactery === "\\") {
        return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
      }
    }
    return entry;
  }
  exports2.removeLeadingDotSegment = removeLeadingDotSegment;
});

// ../../node_modules/.pnpm/is-extglob@2.1.1/node_modules/is-extglob/index.js
var require_is_extglob = __commonJS((exports2, module3) => {
  /*!
   * is-extglob <https://github.com/jonschlinkert/is-extglob>
   *
   * Copyright (c) 2014-2016, Jon Schlinkert.
   * Licensed under the MIT License.
   */
  module3.exports = function isExtglob(str) {
    if (typeof str !== "string" || str === "") {
      return false;
    }
    var match;
    while (match = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
      if (match[2])
        return true;
      str = str.slice(match.index + match[0].length);
    }
    return false;
  };
});

// ../../node_modules/.pnpm/is-glob@4.0.1/node_modules/is-glob/index.js
var require_is_glob = __commonJS((exports2, module3) => {
  /*!
   * is-glob <https://github.com/jonschlinkert/is-glob>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   */
  var isExtglob = require_is_extglob();
  var chars = {"{": "}", "(": ")", "[": "]"};
  var strictRegex = /\\(.)|(^!|\*|[\].+)]\?|\[[^\\\]]+\]|\{[^\\}]+\}|\(\?[:!=][^\\)]+\)|\([^|]+\|[^\\)]+\))/;
  var relaxedRegex = /\\(.)|(^!|[*?{}()[\]]|\(\?)/;
  module3.exports = function isGlob(str, options) {
    if (typeof str !== "string" || str === "") {
      return false;
    }
    if (isExtglob(str)) {
      return true;
    }
    var regex = strictRegex;
    var match;
    if (options && options.strict === false) {
      regex = relaxedRegex;
    }
    while (match = regex.exec(str)) {
      if (match[2])
        return true;
      var idx = match.index + match[0].length;
      var open3 = match[1];
      var close = open3 ? chars[open3] : null;
      if (open3 && close) {
        var n = str.indexOf(close, idx);
        if (n !== -1) {
          idx = n + 1;
        }
      }
      str = str.slice(idx);
    }
    return false;
  };
});

// ../../node_modules/.pnpm/glob-parent@5.1.1/node_modules/glob-parent/index.js
var require_glob_parent = __commonJS((exports2, module3) => {
  "use strict";
  var isGlob = require_is_glob();
  var pathPosixDirname = require("path").posix.dirname;
  var isWin32 = require("os").platform() === "win32";
  var slash = "/";
  var backslash = /\\/g;
  var enclosure = /[\{\[].*[\/]*.*[\}\]]$/;
  var globby = /(^|[^\\])([\{\[]|\([^\)]+$)/;
  var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
  module3.exports = function globParent(str, opts) {
    var options = Object.assign({flipBackslashes: true}, opts);
    if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {
      str = str.replace(backslash, slash);
    }
    if (enclosure.test(str)) {
      str += slash;
    }
    str += "a";
    do {
      str = pathPosixDirname(str);
    } while (isGlob(str) || globby.test(str));
    return str.replace(escaped, "$1");
  };
});

// ../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/utils.js
var require_utils = __commonJS((exports2) => {
  "use strict";
  exports2.isInteger = (num) => {
    if (typeof num === "number") {
      return Number.isInteger(num);
    }
    if (typeof num === "string" && num.trim() !== "") {
      return Number.isInteger(Number(num));
    }
    return false;
  };
  exports2.find = (node, type) => node.nodes.find((node2) => node2.type === type);
  exports2.exceedsLimit = (min, max, step = 1, limit) => {
    if (limit === false)
      return false;
    if (!exports2.isInteger(min) || !exports2.isInteger(max))
      return false;
    return (Number(max) - Number(min)) / Number(step) >= limit;
  };
  exports2.escapeNode = (block, n = 0, type) => {
    let node = block.nodes[n];
    if (!node)
      return;
    if (type && node.type === type || node.type === "open" || node.type === "close") {
      if (node.escaped !== true) {
        node.value = "\\" + node.value;
        node.escaped = true;
      }
    }
  };
  exports2.encloseBrace = (node) => {
    if (node.type !== "brace")
      return false;
    if (node.commas >> 0 + node.ranges >> 0 === 0) {
      node.invalid = true;
      return true;
    }
    return false;
  };
  exports2.isInvalidBrace = (block) => {
    if (block.type !== "brace")
      return false;
    if (block.invalid === true || block.dollar)
      return true;
    if (block.commas >> 0 + block.ranges >> 0 === 0) {
      block.invalid = true;
      return true;
    }
    if (block.open !== true || block.close !== true) {
      block.invalid = true;
      return true;
    }
    return false;
  };
  exports2.isOpenOrClose = (node) => {
    if (node.type === "open" || node.type === "close") {
      return true;
    }
    return node.open === true || node.close === true;
  };
  exports2.reduce = (nodes) => nodes.reduce((acc, node) => {
    if (node.type === "text")
      acc.push(node.value);
    if (node.type === "range")
      node.type = "text";
    return acc;
  }, []);
  exports2.flatten = (...args2) => {
    const result = [];
    const flat = (arr) => {
      for (let i = 0; i < arr.length; i++) {
        let ele = arr[i];
        Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);
      }
      return result;
    };
    flat(args2);
    return result;
  };
});

// ../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/stringify.js
var require_stringify = __commonJS((exports2, module3) => {
  "use strict";
  const utils = require_utils();
  module3.exports = (ast, options = {}) => {
    let stringify = (node, parent = {}) => {
      let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
      let invalidNode = node.invalid === true && options.escapeInvalid === true;
      let output = "";
      if (node.value) {
        if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
          return "\\" + node.value;
        }
        return node.value;
      }
      if (node.value) {
        return node.value;
      }
      if (node.nodes) {
        for (let child of node.nodes) {
          output += stringify(child);
        }
      }
      return output;
    };
    return stringify(ast);
  };
});

// ../../node_modules/.pnpm/is-number@7.0.0/node_modules/is-number/index.js
var require_is_number = __commonJS((exports2, module3) => {
  /*!
   * is-number <https://github.com/jonschlinkert/is-number>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Released under the MIT License.
   */
  "use strict";
  module3.exports = function(num) {
    if (typeof num === "number") {
      return num - num === 0;
    }
    if (typeof num === "string" && num.trim() !== "") {
      return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
    }
    return false;
  };
});

// ../../node_modules/.pnpm/to-regex-range@5.0.1/node_modules/to-regex-range/index.js
var require_to_regex_range = __commonJS((exports2, module3) => {
  /*!
   * to-regex-range <https://github.com/micromatch/to-regex-range>
   *
   * Copyright (c) 2015-present, Jon Schlinkert.
   * Released under the MIT License.
   */
  "use strict";
  const isNumber = require_is_number();
  const toRegexRange = (min, max, options) => {
    if (isNumber(min) === false) {
      throw new TypeError("toRegexRange: expected the first argument to be a number");
    }
    if (max === void 0 || min === max) {
      return String(min);
    }
    if (isNumber(max) === false) {
      throw new TypeError("toRegexRange: expected the second argument to be a number.");
    }
    let opts = {relaxZeros: true, ...options};
    if (typeof opts.strictZeros === "boolean") {
      opts.relaxZeros = opts.strictZeros === false;
    }
    let relax = String(opts.relaxZeros);
    let shorthand = String(opts.shorthand);
    let capture = String(opts.capture);
    let wrap = String(opts.wrap);
    let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap;
    if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
      return toRegexRange.cache[cacheKey].result;
    }
    let a = Math.min(min, max);
    let b = Math.max(min, max);
    if (Math.abs(a - b) === 1) {
      let result = min + "|" + max;
      if (opts.capture) {
        return `(${result})`;
      }
      if (opts.wrap === false) {
        return result;
      }
      return `(?:${result})`;
    }
    let isPadded = hasPadding(min) || hasPadding(max);
    let state = {min, max, a, b};
    let positives = [];
    let negatives = [];
    if (isPadded) {
      state.isPadded = isPadded;
      state.maxLen = String(state.max).length;
    }
    if (a < 0) {
      let newMin = b < 0 ? Math.abs(b) : 1;
      negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
      a = state.a = 0;
    }
    if (b >= 0) {
      positives = splitToPatterns(a, b, state, opts);
    }
    state.negatives = negatives;
    state.positives = positives;
    state.result = collatePatterns(negatives, positives, opts);
    if (opts.capture === true) {
      state.result = `(${state.result})`;
    } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
      state.result = `(?:${state.result})`;
    }
    toRegexRange.cache[cacheKey] = state;
    return state.result;
  };
  function collatePatterns(neg, pos, options) {
    let onlyNegative = filterPatterns(neg, pos, "-", false, options) || [];
    let onlyPositive = filterPatterns(pos, neg, "", false, options) || [];
    let intersected = filterPatterns(neg, pos, "-?", true, options) || [];
    let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
    return subpatterns.join("|");
  }
  function splitToRanges(min, max) {
    let nines = 1;
    let zeros = 1;
    let stop = countNines(min, nines);
    let stops = new Set([max]);
    while (min <= stop && stop <= max) {
      stops.add(stop);
      nines += 1;
      stop = countNines(min, nines);
    }
    stop = countZeros(max + 1, zeros) - 1;
    while (min < stop && stop <= max) {
      stops.add(stop);
      zeros += 1;
      stop = countZeros(max + 1, zeros) - 1;
    }
    stops = [...stops];
    stops.sort(compare);
    return stops;
  }
  function rangeToPattern(start, stop, options) {
    if (start === stop) {
      return {pattern: start, count: [], digits: 0};
    }
    let zipped = zip(start, stop);
    let digits = zipped.length;
    let pattern = "";
    let count = 0;
    for (let i = 0; i < digits; i++) {
      let [startDigit, stopDigit] = zipped[i];
      if (startDigit === stopDigit) {
        pattern += startDigit;
      } else if (startDigit !== "0" || stopDigit !== "9") {
        pattern += toCharacterClass(startDigit, stopDigit, options);
      } else {
        count++;
      }
    }
    if (count) {
      pattern += options.shorthand === true ? "\\d" : "[0-9]";
    }
    return {pattern, count: [count], digits};
  }
  function splitToPatterns(min, max, tok, options) {
    let ranges = splitToRanges(min, max);
    let tokens = [];
    let start = min;
    let prev;
    for (let i = 0; i < ranges.length; i++) {
      let max2 = ranges[i];
      let obj = rangeToPattern(String(start), String(max2), options);
      let zeros = "";
      if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
        if (prev.count.length > 1) {
          prev.count.pop();
        }
        prev.count.push(obj.count[0]);
        prev.string = prev.pattern + toQuantifier(prev.count);
        start = max2 + 1;
        continue;
      }
      if (tok.isPadded) {
        zeros = padZeros(max2, tok, options);
      }
      obj.string = zeros + obj.pattern + toQuantifier(obj.count);
      tokens.push(obj);
      start = max2 + 1;
      prev = obj;
    }
    return tokens;
  }
  function filterPatterns(arr, comparison, prefix, intersection, options) {
    let result = [];
    for (let ele of arr) {
      let {string} = ele;
      if (!intersection && !contains(comparison, "string", string)) {
        result.push(prefix + string);
      }
      if (intersection && contains(comparison, "string", string)) {
        result.push(prefix + string);
      }
    }
    return result;
  }
  function zip(a, b) {
    let arr = [];
    for (let i = 0; i < a.length; i++)
      arr.push([a[i], b[i]]);
    return arr;
  }
  function compare(a, b) {
    return a > b ? 1 : b > a ? -1 : 0;
  }
  function contains(arr, key, val) {
    return arr.some((ele) => ele[key] === val);
  }
  function countNines(min, len) {
    return Number(String(min).slice(0, -len) + "9".repeat(len));
  }
  function countZeros(integer, zeros) {
    return integer - integer % Math.pow(10, zeros);
  }
  function toQuantifier(digits) {
    let [start = 0, stop = ""] = digits;
    if (stop || start > 1) {
      return `{${start + (stop ? "," + stop : "")}}`;
    }
    return "";
  }
  function toCharacterClass(a, b, options) {
    return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
  }
  function hasPadding(str) {
    return /^-?(0+)\d/.test(str);
  }
  function padZeros(value, tok, options) {
    if (!tok.isPadded) {
      return value;
    }
    let diff = Math.abs(tok.maxLen - String(value).length);
    let relax = options.relaxZeros !== false;
    switch (diff) {
      case 0:
        return "";
      case 1:
        return relax ? "0?" : "0";
      case 2:
        return relax ? "0{0,2}" : "00";
      default: {
        return relax ? `0{0,${diff}}` : `0{${diff}}`;
      }
    }
  }
  toRegexRange.cache = {};
  toRegexRange.clearCache = () => toRegexRange.cache = {};
  module3.exports = toRegexRange;
});

// ../../node_modules/.pnpm/fill-range@7.0.1/node_modules/fill-range/index.js
var require_fill_range = __commonJS((exports2, module3) => {
  /*!
   * fill-range <https://github.com/jonschlinkert/fill-range>
   *
   * Copyright (c) 2014-present, Jon Schlinkert.
   * Licensed under the MIT License.
   */
  "use strict";
  const util4 = require("util");
  const toRegexRange = require_to_regex_range();
  const isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
  const transform = (toNumber) => {
    return (value) => toNumber === true ? Number(value) : String(value);
  };
  const isValidValue = (value) => {
    return typeof value === "number" || typeof value === "string" && value !== "";
  };
  const isNumber = (num) => Number.isInteger(+num);
  const zeros = (input) => {
    let value = `${input}`;
    let index = -1;
    if (value[0] === "-")
      value = value.slice(1);
    if (value === "0")
      return false;
    while (value[++index] === "0")
      ;
    return index > 0;
  };
  const stringify = (start, end, options) => {
    if (typeof start === "string" || typeof end === "string") {
      return true;
    }
    return options.stringify === true;
  };
  const pad = (input, maxLength, toNumber) => {
    if (maxLength > 0) {
      let dash = input[0] === "-" ? "-" : "";
      if (dash)
        input = input.slice(1);
      input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
    }
    if (toNumber === false) {
      return String(input);
    }
    return input;
  };
  const toMaxLen = (input, maxLength) => {
    let negative = input[0] === "-" ? "-" : "";
    if (negative) {
      input = input.slice(1);
      maxLength--;
    }
    while (input.length < maxLength)
      input = "0" + input;
    return negative ? "-" + input : input;
  };
  const toSequence = (parts, options) => {
    parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
    parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
    let prefix = options.capture ? "" : "?:";
    let positives = "";
    let negatives = "";
    let result;
    if (parts.positives.length) {
      positives = parts.positives.join("|");
    }
    if (parts.negatives.length) {
      negatives = `-(${prefix}${parts.negatives.join("|")})`;
    }
    if (positives && negatives) {
      result = `${positives}|${negatives}`;
    } else {
      result = positives || negatives;
    }
    if (options.wrap) {
      return `(${prefix}${result})`;
    }
    return result;
  };
  const toRange = (a, b, isNumbers, options) => {
    if (isNumbers) {
      return toRegexRange(a, b, {wrap: false, ...options});
    }
    let start = String.fromCharCode(a);
    if (a === b)
      return start;
    let stop = String.fromCharCode(b);
    return `[${start}-${stop}]`;
  };
  const toRegex = (start, end, options) => {
    if (Array.isArray(start)) {
      let wrap = options.wrap === true;
      let prefix = options.capture ? "" : "?:";
      return wrap ? `(${prefix}${start.join("|")})` : start.join("|");
    }
    return toRegexRange(start, end, options);
  };
  const rangeError = (...args2) => {
    return new RangeError("Invalid range arguments: " + util4.inspect(...args2));
  };
  const invalidRange = (start, end, options) => {
    if (options.strictRanges === true)
      throw rangeError([start, end]);
    return [];
  };
  const invalidStep = (step, options) => {
    if (options.strictRanges === true) {
      throw new TypeError(`Expected step "${step}" to be a number`);
    }
    return [];
  };
  const fillNumbers = (start, end, step = 1, options = {}) => {
    let a = Number(start);
    let b = Number(end);
    if (!Number.isInteger(a) || !Number.isInteger(b)) {
      if (options.strictRanges === true)
        throw rangeError([start, end]);
      return [];
    }
    if (a === 0)
      a = 0;
    if (b === 0)
      b = 0;
    let descending = a > b;
    let startString = String(start);
    let endString = String(end);
    let stepString = String(step);
    step = Math.max(Math.abs(step), 1);
    let padded = zeros(startString) || zeros(endString) || zeros(stepString);
    let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
    let toNumber = padded === false && stringify(start, end, options) === false;
    let format11 = options.transform || transform(toNumber);
    if (options.toRegex && step === 1) {
      return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
    }
    let parts = {negatives: [], positives: []};
    let push = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
    let range = [];
    let index = 0;
    while (descending ? a >= b : a <= b) {
      if (options.toRegex === true && step > 1) {
        push(a);
      } else {
        range.push(pad(format11(a, index), maxLen, toNumber));
      }
      a = descending ? a - step : a + step;
      index++;
    }
    if (options.toRegex === true) {
      return step > 1 ? toSequence(parts, options) : toRegex(range, null, {wrap: false, ...options});
    }
    return range;
  };
  const fillLetters = (start, end, step = 1, options = {}) => {
    if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
      return invalidRange(start, end, options);
    }
    let format11 = options.transform || ((val) => String.fromCharCode(val));
    let a = `${start}`.charCodeAt(0);
    let b = `${end}`.charCodeAt(0);
    let descending = a > b;
    let min = Math.min(a, b);
    let max = Math.max(a, b);
    if (options.toRegex && step === 1) {
      return toRange(min, max, false, options);
    }
    let range = [];
    let index = 0;
    while (descending ? a >= b : a <= b) {
      range.push(format11(a, index));
      a = descending ? a - step : a + step;
      index++;
    }
    if (options.toRegex === true) {
      return toRegex(range, null, {wrap: false, options});
    }
    return range;
  };
  const fill = (start, end, step, options = {}) => {
    if (end == null && isValidValue(start)) {
      return [start];
    }
    if (!isValidValue(start) || !isValidValue(end)) {
      return invalidRange(start, end, options);
    }
    if (typeof step === "function") {
      return fill(start, end, 1, {transform: step});
    }
    if (isObject(step)) {
      return fill(start, end, 0, step);
    }
    let opts = {...options};
    if (opts.capture === true)
      opts.wrap = true;
    step = step || opts.step || 1;
    if (!isNumber(step)) {
      if (step != null && !isObject(step))
        return invalidStep(step, opts);
      return fill(start, end, 1, step);
    }
    if (isNumber(start) && isNumber(end)) {
      return fillNumbers(start, end, step, opts);
    }
    return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
  };
  module3.exports = fill;
});

// ../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/compile.js
var require_compile = __commonJS((exports2, module3) => {
  "use strict";
  const fill = require_fill_range();
  const utils = require_utils();
  const compile = (ast, options = {}) => {
    let walk = (node, parent = {}) => {
      let invalidBlock = utils.isInvalidBrace(parent);
      let invalidNode = node.invalid === true && options.escapeInvalid === true;
      let invalid = invalidBlock === true || invalidNode === true;
      let prefix = options.escapeInvalid === true ? "\\" : "";
      let output = "";
      if (node.isOpen === true) {
        return prefix + node.value;
      }
      if (node.isClose === true) {
        return prefix + node.value;
      }
      if (node.type === "open") {
        return invalid ? prefix + node.value : "(";
      }
      if (node.type === "close") {
        return invalid ? prefix + node.value : ")";
      }
      if (node.type === "comma") {
        return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
      }
      if (node.value) {
        return node.value;
      }
      if (node.nodes && node.ranges > 0) {
        let args2 = utils.reduce(node.nodes);
        let range = fill(...args2, {...options, wrap: false, toRegex: true});
        if (range.length !== 0) {
          return args2.length > 1 && range.length > 1 ? `(${range})` : range;
        }
      }
      if (node.nodes) {
        for (let child of node.nodes) {
          output += walk(child, node);
        }
      }
      return output;
    };
    return walk(ast);
  };
  module3.exports = compile;
});

// ../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/expand.js
var require_expand = __commonJS((exports2, module3) => {
  "use strict";
  const fill = require_fill_range();
  const stringify = require_stringify();
  const utils = require_utils();
  const append = (queue = "", stash = "", enclose = false) => {
    let result = [];
    queue = [].concat(queue);
    stash = [].concat(stash);
    if (!stash.length)
      return queue;
    if (!queue.length) {
      return enclose ? utils.flatten(stash).map((ele) => `{${ele}}`) : stash;
    }
    for (let item of queue) {
      if (Array.isArray(item)) {
        for (let value of item) {
          result.push(append(value, stash, enclose));
        }
      } else {
        for (let ele of stash) {
          if (enclose === true && typeof ele === "string")
            ele = `{${ele}}`;
          result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
        }
      }
    }
    return utils.flatten(result);
  };
  const expand = (ast, options = {}) => {
    let rangeLimit = options.rangeLimit === void 0 ? 1e3 : options.rangeLimit;
    let walk = (node, parent = {}) => {
      node.queue = [];
      let p = parent;
      let q = parent.queue;
      while (p.type !== "brace" && p.type !== "root" && p.parent) {
        p = p.parent;
        q = p.queue;
      }
      if (node.invalid || node.dollar) {
        q.push(append(q.pop(), stringify(node, options)));
        return;
      }
      if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
        q.push(append(q.pop(), ["{}"]));
        return;
      }
      if (node.nodes && node.ranges > 0) {
        let args2 = utils.reduce(node.nodes);
        if (utils.exceedsLimit(...args2, options.step, rangeLimit)) {
          throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
        }
        let range = fill(...args2, options);
        if (range.length === 0) {
          range = stringify(node, options);
        }
        q.push(append(q.pop(), range));
        node.nodes = [];
        return;
      }
      let enclose = utils.encloseBrace(node);
      let queue = node.queue;
      let block = node;
      while (block.type !== "brace" && block.type !== "root" && block.parent) {
        block = block.parent;
        queue = block.queue;
      }
      for (let i = 0; i < node.nodes.length; i++) {
        let child = node.nodes[i];
        if (child.type === "comma" && node.type === "brace") {
          if (i === 1)
            queue.push("");
          queue.push("");
          continue;
        }
        if (child.type === "close") {
          q.push(append(q.pop(), queue, enclose));
          continue;
        }
        if (child.value && child.type !== "open") {
          queue.push(append(queue.pop(), child.value));
          continue;
        }
        if (child.nodes) {
          walk(child, node);
        }
      }
      return queue;
    };
    return utils.flatten(walk(ast));
  };
  module3.exports = expand;
});

// ../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/constants.js
var require_constants = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = {
    MAX_LENGTH: 1024 * 64,
    CHAR_0: "0",
    CHAR_9: "9",
    CHAR_UPPERCASE_A: "A",
    CHAR_LOWERCASE_A: "a",
    CHAR_UPPERCASE_Z: "Z",
    CHAR_LOWERCASE_Z: "z",
    CHAR_LEFT_PARENTHESES: "(",
    CHAR_RIGHT_PARENTHESES: ")",
    CHAR_ASTERISK: "*",
    CHAR_AMPERSAND: "&",
    CHAR_AT: "@",
    CHAR_BACKSLASH: "\\",
    CHAR_BACKTICK: "`",
    CHAR_CARRIAGE_RETURN: "\r",
    CHAR_CIRCUMFLEX_ACCENT: "^",
    CHAR_COLON: ":",
    CHAR_COMMA: ",",
    CHAR_DOLLAR: "$",
    CHAR_DOT: ".",
    CHAR_DOUBLE_QUOTE: '"',
    CHAR_EQUAL: "=",
    CHAR_EXCLAMATION_MARK: "!",
    CHAR_FORM_FEED: "\f",
    CHAR_FORWARD_SLASH: "/",
    CHAR_HASH: "#",
    CHAR_HYPHEN_MINUS: "-",
    CHAR_LEFT_ANGLE_BRACKET: "<",
    CHAR_LEFT_CURLY_BRACE: "{",
    CHAR_LEFT_SQUARE_BRACKET: "[",
    CHAR_LINE_FEED: "\n",
    CHAR_NO_BREAK_SPACE: " ",
    CHAR_PERCENT: "%",
    CHAR_PLUS: "+",
    CHAR_QUESTION_MARK: "?",
    CHAR_RIGHT_ANGLE_BRACKET: ">",
    CHAR_RIGHT_CURLY_BRACE: "}",
    CHAR_RIGHT_SQUARE_BRACKET: "]",
    CHAR_SEMICOLON: ";",
    CHAR_SINGLE_QUOTE: "'",
    CHAR_SPACE: " ",
    CHAR_TAB: "	",
    CHAR_UNDERSCORE: "_",
    CHAR_VERTICAL_LINE: "|",
    CHAR_ZERO_WIDTH_NOBREAK_SPACE: "﻿"
  };
});

// ../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/parse.js
var require_parse2 = __commonJS((exports2, module3) => {
  "use strict";
  const stringify = require_stringify();
  const {
    MAX_LENGTH,
    CHAR_BACKSLASH,
    CHAR_BACKTICK,
    CHAR_COMMA,
    CHAR_DOT,
    CHAR_LEFT_PARENTHESES,
    CHAR_RIGHT_PARENTHESES,
    CHAR_LEFT_CURLY_BRACE,
    CHAR_RIGHT_CURLY_BRACE,
    CHAR_LEFT_SQUARE_BRACKET,
    CHAR_RIGHT_SQUARE_BRACKET,
    CHAR_DOUBLE_QUOTE,
    CHAR_SINGLE_QUOTE,
    CHAR_NO_BREAK_SPACE,
    CHAR_ZERO_WIDTH_NOBREAK_SPACE
  } = require_constants();
  const parse = (input, options = {}) => {
    if (typeof input !== "string") {
      throw new TypeError("Expected a string");
    }
    let opts = options || {};
    let max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
    if (input.length > max) {
      throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
    }
    let ast = {type: "root", input, nodes: []};
    let stack = [ast];
    let block = ast;
    let prev = ast;
    let brackets = 0;
    let length = input.length;
    let index = 0;
    let depth = 0;
    let value;
    let memo = {};
    const advance = () => input[index++];
    const push = (node) => {
      if (node.type === "text" && prev.type === "dot") {
        prev.type = "text";
      }
      if (prev && prev.type === "text" && node.type === "text") {
        prev.value += node.value;
        return;
      }
      block.nodes.push(node);
      node.parent = block;
      node.prev = prev;
      prev = node;
      return node;
    };
    push({type: "bos"});
    while (index < length) {
      block = stack[stack.length - 1];
      value = advance();
      if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
        continue;
      }
      if (value === CHAR_BACKSLASH) {
        push({type: "text", value: (options.keepEscaping ? value : "") + advance()});
        continue;
      }
      if (value === CHAR_RIGHT_SQUARE_BRACKET) {
        push({type: "text", value: "\\" + value});
        continue;
      }
      if (value === CHAR_LEFT_SQUARE_BRACKET) {
        brackets++;
        let closed = true;
        let next;
        while (index < length && (next = advance())) {
          value += next;
          if (next === CHAR_LEFT_SQUARE_BRACKET) {
            brackets++;
            continue;
          }
          if (next === CHAR_BACKSLASH) {
            value += advance();
            continue;
          }
          if (next === CHAR_RIGHT_SQUARE_BRACKET) {
            brackets--;
            if (brackets === 0) {
              break;
            }
          }
        }
        push({type: "text", value});
        continue;
      }
      if (value === CHAR_LEFT_PARENTHESES) {
        block = push({type: "paren", nodes: []});
        stack.push(block);
        push({type: "text", value});
        continue;
      }
      if (value === CHAR_RIGHT_PARENTHESES) {
        if (block.type !== "paren") {
          push({type: "text", value});
          continue;
        }
        block = stack.pop();
        push({type: "text", value});
        block = stack[stack.length - 1];
        continue;
      }
      if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
        let open3 = value;
        let next;
        if (options.keepQuotes !== true) {
          value = "";
        }
        while (index < length && (next = advance())) {
          if (next === CHAR_BACKSLASH) {
            value += next + advance();
            continue;
          }
          if (next === open3) {
            if (options.keepQuotes === true)
              value += next;
            break;
          }
          value += next;
        }
        push({type: "text", value});
        continue;
      }
      if (value === CHAR_LEFT_CURLY_BRACE) {
        depth++;
        let dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
        let brace = {
          type: "brace",
          open: true,
          close: false,
          dollar,
          depth,
          commas: 0,
          ranges: 0,
          nodes: []
        };
        block = push(brace);
        stack.push(block);
        push({type: "open", value});
        continue;
      }
      if (value === CHAR_RIGHT_CURLY_BRACE) {
        if (block.type !== "brace") {
          push({type: "text", value});
          continue;
        }
        let type = "close";
        block = stack.pop();
        block.close = true;
        push({type, value});
        depth--;
        block = stack[stack.length - 1];
        continue;
      }
      if (value === CHAR_COMMA && depth > 0) {
        if (block.ranges > 0) {
          block.ranges = 0;
          let open3 = block.nodes.shift();
          block.nodes = [open3, {type: "text", value: stringify(block)}];
        }
        push({type: "comma", value});
        block.commas++;
        continue;
      }
      if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
        let siblings = block.nodes;
        if (depth === 0 || siblings.length === 0) {
          push({type: "text", value});
          continue;
        }
        if (prev.type === "dot") {
          block.range = [];
          prev.value += value;
          prev.type = "range";
          if (block.nodes.length !== 3 && block.nodes.length !== 5) {
            block.invalid = true;
            block.ranges = 0;
            prev.type = "text";
            continue;
          }
          block.ranges++;
          block.args = [];
          continue;
        }
        if (prev.type === "range") {
          siblings.pop();
          let before = siblings[siblings.length - 1];
          before.value += prev.value + value;
          prev = before;
          block.ranges--;
          continue;
        }
        push({type: "dot", value});
        continue;
      }
      push({type: "text", value});
    }
    do {
      block = stack.pop();
      if (block.type !== "root") {
        block.nodes.forEach((node) => {
          if (!node.nodes) {
            if (node.type === "open")
              node.isOpen = true;
            if (node.type === "close")
              node.isClose = true;
            if (!node.nodes)
              node.type = "text";
            node.invalid = true;
          }
        });
        let parent = stack[stack.length - 1];
        let index2 = parent.nodes.indexOf(block);
        parent.nodes.splice(index2, 1, ...block.nodes);
      }
    } while (stack.length > 0);
    push({type: "eos"});
    return ast;
  };
  module3.exports = parse;
});

// ../../node_modules/.pnpm/braces@3.0.2/node_modules/braces/index.js
var require_braces = __commonJS((exports2, module3) => {
  "use strict";
  const stringify = require_stringify();
  const compile = require_compile();
  const expand = require_expand();
  const parse = require_parse2();
  const braces = (input, options = {}) => {
    let output = [];
    if (Array.isArray(input)) {
      for (let pattern of input) {
        let result = braces.create(pattern, options);
        if (Array.isArray(result)) {
          output.push(...result);
        } else {
          output.push(result);
        }
      }
    } else {
      output = [].concat(braces.create(input, options));
    }
    if (options && options.expand === true && options.nodupes === true) {
      output = [...new Set(output)];
    }
    return output;
  };
  braces.parse = (input, options = {}) => parse(input, options);
  braces.stringify = (input, options = {}) => {
    if (typeof input === "string") {
      return stringify(braces.parse(input, options), options);
    }
    return stringify(input, options);
  };
  braces.compile = (input, options = {}) => {
    if (typeof input === "string") {
      input = braces.parse(input, options);
    }
    return compile(input, options);
  };
  braces.expand = (input, options = {}) => {
    if (typeof input === "string") {
      input = braces.parse(input, options);
    }
    let result = expand(input, options);
    if (options.noempty === true) {
      result = result.filter(Boolean);
    }
    if (options.nodupes === true) {
      result = [...new Set(result)];
    }
    return result;
  };
  braces.create = (input, options = {}) => {
    if (input === "" || input.length < 3) {
      return [input];
    }
    return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);
  };
  module3.exports = braces;
});

// ../../node_modules/.pnpm/picomatch@2.2.2/node_modules/picomatch/lib/constants.js
var require_constants2 = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const WIN_SLASH = "\\\\/";
  const WIN_NO_SLASH = `[^${WIN_SLASH}]`;
  const DOT_LITERAL = "\\.";
  const PLUS_LITERAL = "\\+";
  const QMARK_LITERAL = "\\?";
  const SLASH_LITERAL = "\\/";
  const ONE_CHAR = "(?=.)";
  const QMARK = "[^/]";
  const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
  const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
  const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
  const NO_DOT = `(?!${DOT_LITERAL})`;
  const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
  const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
  const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
  const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
  const STAR = `${QMARK}*?`;
  const POSIX_CHARS = {
    DOT_LITERAL,
    PLUS_LITERAL,
    QMARK_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    QMARK,
    END_ANCHOR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOTS,
    NO_DOT_SLASH,
    NO_DOTS_SLASH,
    QMARK_NO_DOT,
    STAR,
    START_ANCHOR
  };
  const WINDOWS_CHARS = {
    ...POSIX_CHARS,
    SLASH_LITERAL: `[${WIN_SLASH}]`,
    QMARK: WIN_NO_SLASH,
    STAR: `${WIN_NO_SLASH}*?`,
    DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
    NO_DOT: `(?!${DOT_LITERAL})`,
    NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
    NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
    NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
    QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
    START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
    END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
  };
  const POSIX_REGEX_SOURCE = {
    alnum: "a-zA-Z0-9",
    alpha: "a-zA-Z",
    ascii: "\\x00-\\x7F",
    blank: " \\t",
    cntrl: "\\x00-\\x1F\\x7F",
    digit: "0-9",
    graph: "\\x21-\\x7E",
    lower: "a-z",
    print: "\\x20-\\x7E ",
    punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
    space: " \\t\\r\\n\\v\\f",
    upper: "A-Z",
    word: "A-Za-z0-9_",
    xdigit: "A-Fa-f0-9"
  };
  module3.exports = {
    MAX_LENGTH: 1024 * 64,
    POSIX_REGEX_SOURCE,
    REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
    REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
    REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
    REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
    REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
    REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
    REPLACEMENTS: {
      "***": "*",
      "**/**": "**",
      "**/**/**": "**"
    },
    CHAR_0: 48,
    CHAR_9: 57,
    CHAR_UPPERCASE_A: 65,
    CHAR_LOWERCASE_A: 97,
    CHAR_UPPERCASE_Z: 90,
    CHAR_LOWERCASE_Z: 122,
    CHAR_LEFT_PARENTHESES: 40,
    CHAR_RIGHT_PARENTHESES: 41,
    CHAR_ASTERISK: 42,
    CHAR_AMPERSAND: 38,
    CHAR_AT: 64,
    CHAR_BACKWARD_SLASH: 92,
    CHAR_CARRIAGE_RETURN: 13,
    CHAR_CIRCUMFLEX_ACCENT: 94,
    CHAR_COLON: 58,
    CHAR_COMMA: 44,
    CHAR_DOT: 46,
    CHAR_DOUBLE_QUOTE: 34,
    CHAR_EQUAL: 61,
    CHAR_EXCLAMATION_MARK: 33,
    CHAR_FORM_FEED: 12,
    CHAR_FORWARD_SLASH: 47,
    CHAR_GRAVE_ACCENT: 96,
    CHAR_HASH: 35,
    CHAR_HYPHEN_MINUS: 45,
    CHAR_LEFT_ANGLE_BRACKET: 60,
    CHAR_LEFT_CURLY_BRACE: 123,
    CHAR_LEFT_SQUARE_BRACKET: 91,
    CHAR_LINE_FEED: 10,
    CHAR_NO_BREAK_SPACE: 160,
    CHAR_PERCENT: 37,
    CHAR_PLUS: 43,
    CHAR_QUESTION_MARK: 63,
    CHAR_RIGHT_ANGLE_BRACKET: 62,
    CHAR_RIGHT_CURLY_BRACE: 125,
    CHAR_RIGHT_SQUARE_BRACKET: 93,
    CHAR_SEMICOLON: 59,
    CHAR_SINGLE_QUOTE: 39,
    CHAR_SPACE: 32,
    CHAR_TAB: 9,
    CHAR_UNDERSCORE: 95,
    CHAR_VERTICAL_LINE: 124,
    CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
    SEP: path19.sep,
    extglobChars(chars) {
      return {
        "!": {type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})`},
        "?": {type: "qmark", open: "(?:", close: ")?"},
        "+": {type: "plus", open: "(?:", close: ")+"},
        "*": {type: "star", open: "(?:", close: ")*"},
        "@": {type: "at", open: "(?:", close: ")"}
      };
    },
    globChars(win32) {
      return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
    }
  };
});

// ../../node_modules/.pnpm/picomatch@2.2.2/node_modules/picomatch/lib/utils.js
var require_utils2 = __commonJS((exports2) => {
  "use strict";
  const path19 = require("path");
  const win32 = process.platform === "win32";
  const {
    REGEX_BACKSLASH,
    REGEX_REMOVE_BACKSLASH,
    REGEX_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_GLOBAL
  } = require_constants2();
  exports2.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
  exports2.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
  exports2.isRegexChar = (str) => str.length === 1 && exports2.hasRegexChars(str);
  exports2.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
  exports2.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
  exports2.removeBackslashes = (str) => {
    return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
      return match === "\\" ? "" : match;
    });
  };
  exports2.supportsLookbehinds = () => {
    const segs = process.version.slice(1).split(".").map(Number);
    if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
      return true;
    }
    return false;
  };
  exports2.isWindows = (options) => {
    if (options && typeof options.windows === "boolean") {
      return options.windows;
    }
    return win32 === true || path19.sep === "\\";
  };
  exports2.escapeLast = (input, char, lastIdx) => {
    const idx = input.lastIndexOf(char, lastIdx);
    if (idx === -1)
      return input;
    if (input[idx - 1] === "\\")
      return exports2.escapeLast(input, char, idx - 1);
    return `${input.slice(0, idx)}\\${input.slice(idx)}`;
  };
  exports2.removePrefix = (input, state = {}) => {
    let output = input;
    if (output.startsWith("./")) {
      output = output.slice(2);
      state.prefix = "./";
    }
    return output;
  };
  exports2.wrapOutput = (input, state = {}, options = {}) => {
    const prepend = options.contains ? "" : "^";
    const append = options.contains ? "" : "$";
    let output = `${prepend}(?:${input})${append}`;
    if (state.negated === true) {
      output = `(?:^(?!${output}).*$)`;
    }
    return output;
  };
});

// ../../node_modules/.pnpm/picomatch@2.2.2/node_modules/picomatch/lib/scan.js
var require_scan = __commonJS((exports2, module3) => {
  "use strict";
  const utils = require_utils2();
  const {
    CHAR_ASTERISK,
    CHAR_AT,
    CHAR_BACKWARD_SLASH,
    CHAR_COMMA,
    CHAR_DOT,
    CHAR_EXCLAMATION_MARK,
    CHAR_FORWARD_SLASH,
    CHAR_LEFT_CURLY_BRACE,
    CHAR_LEFT_PARENTHESES,
    CHAR_LEFT_SQUARE_BRACKET,
    CHAR_PLUS,
    CHAR_QUESTION_MARK,
    CHAR_RIGHT_CURLY_BRACE,
    CHAR_RIGHT_PARENTHESES,
    CHAR_RIGHT_SQUARE_BRACKET
  } = require_constants2();
  const isPathSeparator = (code) => {
    return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
  };
  const depth = (token) => {
    if (token.isPrefix !== true) {
      token.depth = token.isGlobstar ? Infinity : 1;
    }
  };
  const scan = (input, options) => {
    const opts = options || {};
    const length = input.length - 1;
    const scanToEnd = opts.parts === true || opts.scanToEnd === true;
    const slashes = [];
    const tokens = [];
    const parts = [];
    let str = input;
    let index = -1;
    let start = 0;
    let lastIndex = 0;
    let isBrace = false;
    let isBracket = false;
    let isGlob = false;
    let isExtglob = false;
    let isGlobstar = false;
    let braceEscaped = false;
    let backslashes = false;
    let negated = false;
    let finished = false;
    let braces = 0;
    let prev;
    let code;
    let token = {value: "", depth: 0, isGlob: false};
    const eos = () => index >= length;
    const peek = () => str.charCodeAt(index + 1);
    const advance = () => {
      prev = code;
      return str.charCodeAt(++index);
    };
    while (index < length) {
      code = advance();
      let next;
      if (code === CHAR_BACKWARD_SLASH) {
        backslashes = token.backslashes = true;
        code = advance();
        if (code === CHAR_LEFT_CURLY_BRACE) {
          braceEscaped = true;
        }
        continue;
      }
      if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
        braces++;
        while (eos() !== true && (code = advance())) {
          if (code === CHAR_BACKWARD_SLASH) {
            backslashes = token.backslashes = true;
            advance();
            continue;
          }
          if (code === CHAR_LEFT_CURLY_BRACE) {
            braces++;
            continue;
          }
          if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
            isBrace = token.isBrace = true;
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (braceEscaped !== true && code === CHAR_COMMA) {
            isBrace = token.isBrace = true;
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
          if (code === CHAR_RIGHT_CURLY_BRACE) {
            braces--;
            if (braces === 0) {
              braceEscaped = false;
              isBrace = token.isBrace = true;
              finished = true;
              break;
            }
          }
        }
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_FORWARD_SLASH) {
        slashes.push(index);
        tokens.push(token);
        token = {value: "", depth: 0, isGlob: false};
        if (finished === true)
          continue;
        if (prev === CHAR_DOT && index === start + 1) {
          start += 2;
          continue;
        }
        lastIndex = index + 1;
        continue;
      }
      if (opts.noext !== true) {
        const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
        if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
          isGlob = token.isGlob = true;
          isExtglob = token.isExtglob = true;
          finished = true;
          if (scanToEnd === true) {
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_BACKWARD_SLASH) {
                backslashes = token.backslashes = true;
                code = advance();
                continue;
              }
              if (code === CHAR_RIGHT_PARENTHESES) {
                isGlob = token.isGlob = true;
                finished = true;
                break;
              }
            }
            continue;
          }
          break;
        }
      }
      if (code === CHAR_ASTERISK) {
        if (prev === CHAR_ASTERISK)
          isGlobstar = token.isGlobstar = true;
        isGlob = token.isGlob = true;
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_QUESTION_MARK) {
        isGlob = token.isGlob = true;
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
      if (code === CHAR_LEFT_SQUARE_BRACKET) {
        while (eos() !== true && (next = advance())) {
          if (next === CHAR_BACKWARD_SLASH) {
            backslashes = token.backslashes = true;
            advance();
            continue;
          }
          if (next === CHAR_RIGHT_SQUARE_BRACKET) {
            isBracket = token.isBracket = true;
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) {
              continue;
            }
            break;
          }
        }
      }
      if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
        negated = token.negated = true;
        start++;
        continue;
      }
      if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
        isGlob = token.isGlob = true;
        if (scanToEnd === true) {
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_LEFT_PARENTHESES) {
              backslashes = token.backslashes = true;
              code = advance();
              continue;
            }
            if (code === CHAR_RIGHT_PARENTHESES) {
              finished = true;
              break;
            }
          }
          continue;
        }
        break;
      }
      if (isGlob === true) {
        finished = true;
        if (scanToEnd === true) {
          continue;
        }
        break;
      }
    }
    if (opts.noext === true) {
      isExtglob = false;
      isGlob = false;
    }
    let base = str;
    let prefix = "";
    let glob = "";
    if (start > 0) {
      prefix = str.slice(0, start);
      str = str.slice(start);
      lastIndex -= start;
    }
    if (base && isGlob === true && lastIndex > 0) {
      base = str.slice(0, lastIndex);
      glob = str.slice(lastIndex);
    } else if (isGlob === true) {
      base = "";
      glob = str;
    } else {
      base = str;
    }
    if (base && base !== "" && base !== "/" && base !== str) {
      if (isPathSeparator(base.charCodeAt(base.length - 1))) {
        base = base.slice(0, -1);
      }
    }
    if (opts.unescape === true) {
      if (glob)
        glob = utils.removeBackslashes(glob);
      if (base && backslashes === true) {
        base = utils.removeBackslashes(base);
      }
    }
    const state = {
      prefix,
      input,
      start,
      base,
      glob,
      isBrace,
      isBracket,
      isGlob,
      isExtglob,
      isGlobstar,
      negated
    };
    if (opts.tokens === true) {
      state.maxDepth = 0;
      if (!isPathSeparator(code)) {
        tokens.push(token);
      }
      state.tokens = tokens;
    }
    if (opts.parts === true || opts.tokens === true) {
      let prevIndex;
      for (let idx = 0; idx < slashes.length; idx++) {
        const n = prevIndex ? prevIndex + 1 : start;
        const i = slashes[idx];
        const value = input.slice(n, i);
        if (opts.tokens) {
          if (idx === 0 && start !== 0) {
            tokens[idx].isPrefix = true;
            tokens[idx].value = prefix;
          } else {
            tokens[idx].value = value;
          }
          depth(tokens[idx]);
          state.maxDepth += tokens[idx].depth;
        }
        if (idx !== 0 || value !== "") {
          parts.push(value);
        }
        prevIndex = i;
      }
      if (prevIndex && prevIndex + 1 < input.length) {
        const value = input.slice(prevIndex + 1);
        parts.push(value);
        if (opts.tokens) {
          tokens[tokens.length - 1].value = value;
          depth(tokens[tokens.length - 1]);
          state.maxDepth += tokens[tokens.length - 1].depth;
        }
      }
      state.slashes = slashes;
      state.parts = parts;
    }
    return state;
  };
  module3.exports = scan;
});

// ../../node_modules/.pnpm/picomatch@2.2.2/node_modules/picomatch/lib/parse.js
var require_parse3 = __commonJS((exports2, module3) => {
  "use strict";
  const constants = require_constants2();
  const utils = require_utils2();
  const {
    MAX_LENGTH,
    POSIX_REGEX_SOURCE,
    REGEX_NON_SPECIAL_CHARS,
    REGEX_SPECIAL_CHARS_BACKREF,
    REPLACEMENTS
  } = constants;
  const expandRange = (args2, options) => {
    if (typeof options.expandRange === "function") {
      return options.expandRange(...args2, options);
    }
    args2.sort();
    const value = `[${args2.join("-")}]`;
    try {
      new RegExp(value);
    } catch (ex) {
      return args2.map((v) => utils.escapeRegex(v)).join("..");
    }
    return value;
  };
  const syntaxError = (type, char) => {
    return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
  };
  const parse = (input, options) => {
    if (typeof input !== "string") {
      throw new TypeError("Expected a string");
    }
    input = REPLACEMENTS[input] || input;
    const opts = {...options};
    const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
    let len = input.length;
    if (len > max) {
      throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
    }
    const bos = {type: "bos", value: "", output: opts.prepend || ""};
    const tokens = [bos];
    const capture = opts.capture ? "" : "?:";
    const win32 = utils.isWindows(options);
    const PLATFORM_CHARS = constants.globChars(win32);
    const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);
    const {
      DOT_LITERAL,
      PLUS_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOT_SLASH,
      NO_DOTS_SLASH,
      QMARK,
      QMARK_NO_DOT,
      STAR,
      START_ANCHOR
    } = PLATFORM_CHARS;
    const globstar = (opts2) => {
      return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
    };
    const nodot = opts.dot ? "" : NO_DOT;
    const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
    let star = opts.bash === true ? globstar(opts) : STAR;
    if (opts.capture) {
      star = `(${star})`;
    }
    if (typeof opts.noext === "boolean") {
      opts.noextglob = opts.noext;
    }
    const state = {
      input,
      index: -1,
      start: 0,
      dot: opts.dot === true,
      consumed: "",
      output: "",
      prefix: "",
      backtrack: false,
      negated: false,
      brackets: 0,
      braces: 0,
      parens: 0,
      quotes: 0,
      globstar: false,
      tokens
    };
    input = utils.removePrefix(input, state);
    len = input.length;
    const extglobs = [];
    const braces = [];
    const stack = [];
    let prev = bos;
    let value;
    const eos = () => state.index === len - 1;
    const peek = state.peek = (n = 1) => input[state.index + n];
    const advance = state.advance = () => input[++state.index];
    const remaining = () => input.slice(state.index + 1);
    const consume = (value2 = "", num = 0) => {
      state.consumed += value2;
      state.index += num;
    };
    const append = (token) => {
      state.output += token.output != null ? token.output : token.value;
      consume(token.value);
    };
    const negate = () => {
      let count = 1;
      while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
        advance();
        state.start++;
        count++;
      }
      if (count % 2 === 0) {
        return false;
      }
      state.negated = true;
      state.start++;
      return true;
    };
    const increment = (type) => {
      state[type]++;
      stack.push(type);
    };
    const decrement = (type) => {
      state[type]--;
      stack.pop();
    };
    const push = (tok) => {
      if (prev.type === "globstar") {
        const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
        const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
        if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
          state.output = state.output.slice(0, -prev.output.length);
          prev.type = "star";
          prev.value = "*";
          prev.output = star;
          state.output += prev.output;
        }
      }
      if (extglobs.length && tok.type !== "paren" && !EXTGLOB_CHARS[tok.value]) {
        extglobs[extglobs.length - 1].inner += tok.value;
      }
      if (tok.value || tok.output)
        append(tok);
      if (prev && prev.type === "text" && tok.type === "text") {
        prev.value += tok.value;
        prev.output = (prev.output || "") + tok.value;
        return;
      }
      tok.prev = prev;
      tokens.push(tok);
      prev = tok;
    };
    const extglobOpen = (type, value2) => {
      const token = {...EXTGLOB_CHARS[value2], conditions: 1, inner: ""};
      token.prev = prev;
      token.parens = state.parens;
      token.output = state.output;
      const output = (opts.capture ? "(" : "") + token.open;
      increment("parens");
      push({type, value: value2, output: state.output ? "" : ONE_CHAR});
      push({type: "paren", extglob: true, value: advance(), output});
      extglobs.push(token);
    };
    const extglobClose = (token) => {
      let output = token.close + (opts.capture ? ")" : "");
      if (token.type === "negate") {
        let extglobStar = star;
        if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
          extglobStar = globstar(opts);
        }
        if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
          output = token.close = `)$))${extglobStar}`;
        }
        if (token.prev.type === "bos" && eos()) {
          state.negatedExtglob = true;
        }
      }
      push({type: "paren", extglob: true, value, output});
      decrement("parens");
    };
    if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
      let backslashes = false;
      let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
        if (first === "\\") {
          backslashes = true;
          return m;
        }
        if (first === "?") {
          if (esc) {
            return esc + first + (rest ? QMARK.repeat(rest.length) : "");
          }
          if (index === 0) {
            return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
          }
          return QMARK.repeat(chars.length);
        }
        if (first === ".") {
          return DOT_LITERAL.repeat(chars.length);
        }
        if (first === "*") {
          if (esc) {
            return esc + first + (rest ? star : "");
          }
          return star;
        }
        return esc ? m : `\\${m}`;
      });
      if (backslashes === true) {
        if (opts.unescape === true) {
          output = output.replace(/\\/g, "");
        } else {
          output = output.replace(/\\+/g, (m) => {
            return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
          });
        }
      }
      if (output === input && opts.contains === true) {
        state.output = input;
        return state;
      }
      state.output = utils.wrapOutput(output, state, options);
      return state;
    }
    while (!eos()) {
      value = advance();
      if (value === "\0") {
        continue;
      }
      if (value === "\\") {
        const next = peek();
        if (next === "/" && opts.bash !== true) {
          continue;
        }
        if (next === "." || next === ";") {
          continue;
        }
        if (!next) {
          value += "\\";
          push({type: "text", value});
          continue;
        }
        const match = /^\\+/.exec(remaining());
        let slashes = 0;
        if (match && match[0].length > 2) {
          slashes = match[0].length;
          state.index += slashes;
          if (slashes % 2 !== 0) {
            value += "\\";
          }
        }
        if (opts.unescape === true) {
          value = advance() || "";
        } else {
          value += advance() || "";
        }
        if (state.brackets === 0) {
          push({type: "text", value});
          continue;
        }
      }
      if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
        if (opts.posix !== false && value === ":") {
          const inner = prev.value.slice(1);
          if (inner.includes("[")) {
            prev.posix = true;
            if (inner.includes(":")) {
              const idx = prev.value.lastIndexOf("[");
              const pre = prev.value.slice(0, idx);
              const rest2 = prev.value.slice(idx + 2);
              const posix = POSIX_REGEX_SOURCE[rest2];
              if (posix) {
                prev.value = pre + posix;
                state.backtrack = true;
                advance();
                if (!bos.output && tokens.indexOf(prev) === 1) {
                  bos.output = ONE_CHAR;
                }
                continue;
              }
            }
          }
        }
        if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
          value = `\\${value}`;
        }
        if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
          value = `\\${value}`;
        }
        if (opts.posix === true && value === "!" && prev.value === "[") {
          value = "^";
        }
        prev.value += value;
        append({value});
        continue;
      }
      if (state.quotes === 1 && value !== '"') {
        value = utils.escapeRegex(value);
        prev.value += value;
        append({value});
        continue;
      }
      if (value === '"') {
        state.quotes = state.quotes === 1 ? 0 : 1;
        if (opts.keepQuotes === true) {
          push({type: "text", value});
        }
        continue;
      }
      if (value === "(") {
        increment("parens");
        push({type: "paren", value});
        continue;
      }
      if (value === ")") {
        if (state.parens === 0 && opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError("opening", "("));
        }
        const extglob = extglobs[extglobs.length - 1];
        if (extglob && state.parens === extglob.parens + 1) {
          extglobClose(extglobs.pop());
          continue;
        }
        push({type: "paren", value, output: state.parens ? ")" : "\\)"});
        decrement("parens");
        continue;
      }
      if (value === "[") {
        if (opts.nobracket === true || !remaining().includes("]")) {
          if (opts.nobracket !== true && opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("closing", "]"));
          }
          value = `\\${value}`;
        } else {
          increment("brackets");
        }
        push({type: "bracket", value});
        continue;
      }
      if (value === "]") {
        if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
          push({type: "text", value, output: `\\${value}`});
          continue;
        }
        if (state.brackets === 0) {
          if (opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("opening", "["));
          }
          push({type: "text", value, output: `\\${value}`});
          continue;
        }
        decrement("brackets");
        const prevValue = prev.value.slice(1);
        if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
          value = `/${value}`;
        }
        prev.value += value;
        append({value});
        if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
          continue;
        }
        const escaped = utils.escapeRegex(prev.value);
        state.output = state.output.slice(0, -prev.value.length);
        if (opts.literalBrackets === true) {
          state.output += escaped;
          prev.value = escaped;
          continue;
        }
        prev.value = `(${capture}${escaped}|${prev.value})`;
        state.output += prev.value;
        continue;
      }
      if (value === "{" && opts.nobrace !== true) {
        increment("braces");
        const open3 = {
          type: "brace",
          value,
          output: "(",
          outputIndex: state.output.length,
          tokensIndex: state.tokens.length
        };
        braces.push(open3);
        push(open3);
        continue;
      }
      if (value === "}") {
        const brace = braces[braces.length - 1];
        if (opts.nobrace === true || !brace) {
          push({type: "text", value, output: value});
          continue;
        }
        let output = ")";
        if (brace.dots === true) {
          const arr = tokens.slice();
          const range = [];
          for (let i = arr.length - 1; i >= 0; i--) {
            tokens.pop();
            if (arr[i].type === "brace") {
              break;
            }
            if (arr[i].type !== "dots") {
              range.unshift(arr[i].value);
            }
          }
          output = expandRange(range, opts);
          state.backtrack = true;
        }
        if (brace.comma !== true && brace.dots !== true) {
          const out = state.output.slice(0, brace.outputIndex);
          const toks = state.tokens.slice(brace.tokensIndex);
          brace.value = brace.output = "\\{";
          value = output = "\\}";
          state.output = out;
          for (const t of toks) {
            state.output += t.output || t.value;
          }
        }
        push({type: "brace", value, output});
        decrement("braces");
        braces.pop();
        continue;
      }
      if (value === "|") {
        if (extglobs.length > 0) {
          extglobs[extglobs.length - 1].conditions++;
        }
        push({type: "text", value});
        continue;
      }
      if (value === ",") {
        let output = value;
        const brace = braces[braces.length - 1];
        if (brace && stack[stack.length - 1] === "braces") {
          brace.comma = true;
          output = "|";
        }
        push({type: "comma", value, output});
        continue;
      }
      if (value === "/") {
        if (prev.type === "dot" && state.index === state.start + 1) {
          state.start = state.index + 1;
          state.consumed = "";
          state.output = "";
          tokens.pop();
          prev = bos;
          continue;
        }
        push({type: "slash", value, output: SLASH_LITERAL});
        continue;
      }
      if (value === ".") {
        if (state.braces > 0 && prev.type === "dot") {
          if (prev.value === ".")
            prev.output = DOT_LITERAL;
          const brace = braces[braces.length - 1];
          prev.type = "dots";
          prev.output += value;
          prev.value += value;
          brace.dots = true;
          continue;
        }
        if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
          push({type: "text", value, output: DOT_LITERAL});
          continue;
        }
        push({type: "dot", value, output: DOT_LITERAL});
        continue;
      }
      if (value === "?") {
        const isGroup = prev && prev.value === "(";
        if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
          extglobOpen("qmark", value);
          continue;
        }
        if (prev && prev.type === "paren") {
          const next = peek();
          let output = value;
          if (next === "<" && !utils.supportsLookbehinds()) {
            throw new Error("Node.js v10 or higher is required for regex lookbehinds");
          }
          if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
            output = `\\${value}`;
          }
          push({type: "text", value, output});
          continue;
        }
        if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
          push({type: "qmark", value, output: QMARK_NO_DOT});
          continue;
        }
        push({type: "qmark", value, output: QMARK});
        continue;
      }
      if (value === "!") {
        if (opts.noextglob !== true && peek() === "(") {
          if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
            extglobOpen("negate", value);
            continue;
          }
        }
        if (opts.nonegate !== true && state.index === 0) {
          negate();
          continue;
        }
      }
      if (value === "+") {
        if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
          extglobOpen("plus", value);
          continue;
        }
        if (prev && prev.value === "(" || opts.regex === false) {
          push({type: "plus", value, output: PLUS_LITERAL});
          continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
          push({type: "plus", value});
          continue;
        }
        push({type: "plus", value: PLUS_LITERAL});
        continue;
      }
      if (value === "@") {
        if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
          push({type: "at", extglob: true, value, output: ""});
          continue;
        }
        push({type: "text", value});
        continue;
      }
      if (value !== "*") {
        if (value === "$" || value === "^") {
          value = `\\${value}`;
        }
        const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
        if (match) {
          value += match[0];
          state.index += match[0].length;
        }
        push({type: "text", value});
        continue;
      }
      if (prev && (prev.type === "globstar" || prev.star === true)) {
        prev.type = "star";
        prev.star = true;
        prev.value += value;
        prev.output = star;
        state.backtrack = true;
        state.globstar = true;
        consume(value);
        continue;
      }
      let rest = remaining();
      if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
        extglobOpen("star", value);
        continue;
      }
      if (prev.type === "star") {
        if (opts.noglobstar === true) {
          consume(value);
          continue;
        }
        const prior = prev.prev;
        const before = prior.prev;
        const isStart = prior.type === "slash" || prior.type === "bos";
        const afterStar = before && (before.type === "star" || before.type === "globstar");
        if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
          push({type: "star", value, output: ""});
          continue;
        }
        const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
        const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
        if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
          push({type: "star", value, output: ""});
          continue;
        }
        while (rest.slice(0, 3) === "/**") {
          const after = input[state.index + 4];
          if (after && after !== "/") {
            break;
          }
          rest = rest.slice(3);
          consume("/**", 3);
        }
        if (prior.type === "bos" && eos()) {
          prev.type = "globstar";
          prev.value += value;
          prev.output = globstar(opts);
          state.output = prev.output;
          state.globstar = true;
          consume(value);
          continue;
        }
        if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
          state.output = state.output.slice(0, -(prior.output + prev.output).length);
          prior.output = `(?:${prior.output}`;
          prev.type = "globstar";
          prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
          prev.value += value;
          state.globstar = true;
          state.output += prior.output + prev.output;
          consume(value);
          continue;
        }
        if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
          const end = rest[1] !== void 0 ? "|$" : "";
          state.output = state.output.slice(0, -(prior.output + prev.output).length);
          prior.output = `(?:${prior.output}`;
          prev.type = "globstar";
          prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
          prev.value += value;
          state.output += prior.output + prev.output;
          state.globstar = true;
          consume(value + advance());
          push({type: "slash", value: "/", output: ""});
          continue;
        }
        if (prior.type === "bos" && rest[0] === "/") {
          prev.type = "globstar";
          prev.value += value;
          prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
          state.output = prev.output;
          state.globstar = true;
          consume(value + advance());
          push({type: "slash", value: "/", output: ""});
          continue;
        }
        state.output = state.output.slice(0, -prev.output.length);
        prev.type = "globstar";
        prev.output = globstar(opts);
        prev.value += value;
        state.output += prev.output;
        state.globstar = true;
        consume(value);
        continue;
      }
      const token = {type: "star", value, output: star};
      if (opts.bash === true) {
        token.output = ".*?";
        if (prev.type === "bos" || prev.type === "slash") {
          token.output = nodot + token.output;
        }
        push(token);
        continue;
      }
      if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
        token.output = value;
        push(token);
        continue;
      }
      if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
        if (prev.type === "dot") {
          state.output += NO_DOT_SLASH;
          prev.output += NO_DOT_SLASH;
        } else if (opts.dot === true) {
          state.output += NO_DOTS_SLASH;
          prev.output += NO_DOTS_SLASH;
        } else {
          state.output += nodot;
          prev.output += nodot;
        }
        if (peek() !== "*") {
          state.output += ONE_CHAR;
          prev.output += ONE_CHAR;
        }
      }
      push(token);
    }
    while (state.brackets > 0) {
      if (opts.strictBrackets === true)
        throw new SyntaxError(syntaxError("closing", "]"));
      state.output = utils.escapeLast(state.output, "[");
      decrement("brackets");
    }
    while (state.parens > 0) {
      if (opts.strictBrackets === true)
        throw new SyntaxError(syntaxError("closing", ")"));
      state.output = utils.escapeLast(state.output, "(");
      decrement("parens");
    }
    while (state.braces > 0) {
      if (opts.strictBrackets === true)
        throw new SyntaxError(syntaxError("closing", "}"));
      state.output = utils.escapeLast(state.output, "{");
      decrement("braces");
    }
    if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
      push({type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?`});
    }
    if (state.backtrack === true) {
      state.output = "";
      for (const token of state.tokens) {
        state.output += token.output != null ? token.output : token.value;
        if (token.suffix) {
          state.output += token.suffix;
        }
      }
    }
    return state;
  };
  parse.fastpaths = (input, options) => {
    const opts = {...options};
    const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
    const len = input.length;
    if (len > max) {
      throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
    }
    input = REPLACEMENTS[input] || input;
    const win32 = utils.isWindows(options);
    const {
      DOT_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOTS,
      NO_DOTS_SLASH,
      STAR,
      START_ANCHOR
    } = constants.globChars(win32);
    const nodot = opts.dot ? NO_DOTS : NO_DOT;
    const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
    const capture = opts.capture ? "" : "?:";
    const state = {negated: false, prefix: ""};
    let star = opts.bash === true ? ".*?" : STAR;
    if (opts.capture) {
      star = `(${star})`;
    }
    const globstar = (opts2) => {
      if (opts2.noglobstar === true)
        return star;
      return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
    };
    const create = (str) => {
      switch (str) {
        case "*":
          return `${nodot}${ONE_CHAR}${star}`;
        case ".*":
          return `${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "*.*":
          return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "*/*":
          return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
        case "**":
          return nodot + globstar(opts);
        case "**/*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
        case "**/*.*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
        case "**/.*":
          return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
        default: {
          const match = /^(.*?)\.(\w+)$/.exec(str);
          if (!match)
            return;
          const source2 = create(match[1]);
          if (!source2)
            return;
          return source2 + DOT_LITERAL + match[2];
        }
      }
    };
    const output = utils.removePrefix(input, state);
    let source = create(output);
    if (source && opts.strictSlashes !== true) {
      source += `${SLASH_LITERAL}?`;
    }
    return source;
  };
  module3.exports = parse;
});

// ../../node_modules/.pnpm/picomatch@2.2.2/node_modules/picomatch/lib/picomatch.js
var require_picomatch = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const scan = require_scan();
  const parse = require_parse3();
  const utils = require_utils2();
  const constants = require_constants2();
  const isObject = (val) => val && typeof val === "object" && !Array.isArray(val);
  const picomatch = (glob, options, returnState = false) => {
    if (Array.isArray(glob)) {
      const fns = glob.map((input) => picomatch(input, options, returnState));
      const arrayMatcher = (str) => {
        for (const isMatch of fns) {
          const state2 = isMatch(str);
          if (state2)
            return state2;
        }
        return false;
      };
      return arrayMatcher;
    }
    const isState = isObject(glob) && glob.tokens && glob.input;
    if (glob === "" || typeof glob !== "string" && !isState) {
      throw new TypeError("Expected pattern to be a non-empty string");
    }
    const opts = options || {};
    const posix = utils.isWindows(options);
    const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);
    const state = regex.state;
    delete regex.state;
    let isIgnored = () => false;
    if (opts.ignore) {
      const ignoreOpts = {...options, ignore: null, onMatch: null, onResult: null};
      isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
    }
    const matcher = (input, returnObject = false) => {
      const {isMatch, match, output} = picomatch.test(input, regex, options, {glob, posix});
      const result = {glob, state, regex, posix, input, output, match, isMatch};
      if (typeof opts.onResult === "function") {
        opts.onResult(result);
      }
      if (isMatch === false) {
        result.isMatch = false;
        return returnObject ? result : false;
      }
      if (isIgnored(input)) {
        if (typeof opts.onIgnore === "function") {
          opts.onIgnore(result);
        }
        result.isMatch = false;
        return returnObject ? result : false;
      }
      if (typeof opts.onMatch === "function") {
        opts.onMatch(result);
      }
      return returnObject ? result : true;
    };
    if (returnState) {
      matcher.state = state;
    }
    return matcher;
  };
  picomatch.test = (input, regex, options, {glob, posix} = {}) => {
    if (typeof input !== "string") {
      throw new TypeError("Expected input to be a string");
    }
    if (input === "") {
      return {isMatch: false, output: ""};
    }
    const opts = options || {};
    const format11 = opts.format || (posix ? utils.toPosixSlashes : null);
    let match = input === glob;
    let output = match && format11 ? format11(input) : input;
    if (match === false) {
      output = format11 ? format11(input) : input;
      match = output === glob;
    }
    if (match === false || opts.capture === true) {
      if (opts.matchBase === true || opts.basename === true) {
        match = picomatch.matchBase(input, regex, options, posix);
      } else {
        match = regex.exec(output);
      }
    }
    return {isMatch: Boolean(match), match, output};
  };
  picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
    const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
    return regex.test(path19.basename(input));
  };
  picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
  picomatch.parse = (pattern, options) => {
    if (Array.isArray(pattern))
      return pattern.map((p) => picomatch.parse(p, options));
    return parse(pattern, {...options, fastpaths: false});
  };
  picomatch.scan = (input, options) => scan(input, options);
  picomatch.compileRe = (parsed, options, returnOutput = false, returnState = false) => {
    if (returnOutput === true) {
      return parsed.output;
    }
    const opts = options || {};
    const prepend = opts.contains ? "" : "^";
    const append = opts.contains ? "" : "$";
    let source = `${prepend}(?:${parsed.output})${append}`;
    if (parsed && parsed.negated === true) {
      source = `^(?!${source}).*$`;
    }
    const regex = picomatch.toRegex(source, options);
    if (returnState === true) {
      regex.state = parsed;
    }
    return regex;
  };
  picomatch.makeRe = (input, options, returnOutput = false, returnState = false) => {
    if (!input || typeof input !== "string") {
      throw new TypeError("Expected a non-empty string");
    }
    const opts = options || {};
    let parsed = {negated: false, fastpaths: true};
    let prefix = "";
    let output;
    if (input.startsWith("./")) {
      input = input.slice(2);
      prefix = parsed.prefix = "./";
    }
    if (opts.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
      output = parse.fastpaths(input, options);
    }
    if (output === void 0) {
      parsed = parse(input, options);
      parsed.prefix = prefix + (parsed.prefix || "");
    } else {
      parsed.output = output;
    }
    return picomatch.compileRe(parsed, options, returnOutput, returnState);
  };
  picomatch.toRegex = (source, options) => {
    try {
      const opts = options || {};
      return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
    } catch (err) {
      if (options && options.debug === true)
        throw err;
      return /$^/;
    }
  };
  picomatch.constants = constants;
  module3.exports = picomatch;
});

// ../../node_modules/.pnpm/picomatch@2.2.2/node_modules/picomatch/index.js
var require_picomatch2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = require_picomatch();
});

// ../../node_modules/.pnpm/micromatch@4.0.2/node_modules/micromatch/index.js
var require_micromatch = __commonJS((exports2, module3) => {
  "use strict";
  const util4 = require("util");
  const braces = require_braces();
  const picomatch = require_picomatch2();
  const utils = require_utils2();
  const isEmptyString = (val) => typeof val === "string" && (val === "" || val === "./");
  const micromatch = (list, patterns, options) => {
    patterns = [].concat(patterns);
    list = [].concat(list);
    let omit = new Set();
    let keep = new Set();
    let items = new Set();
    let negatives = 0;
    let onResult = (state) => {
      items.add(state.output);
      if (options && options.onResult) {
        options.onResult(state);
      }
    };
    for (let i = 0; i < patterns.length; i++) {
      let isMatch = picomatch(String(patterns[i]), {...options, onResult}, true);
      let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
      if (negated)
        negatives++;
      for (let item of list) {
        let matched = isMatch(item, true);
        let match = negated ? !matched.isMatch : matched.isMatch;
        if (!match)
          continue;
        if (negated) {
          omit.add(matched.output);
        } else {
          omit.delete(matched.output);
          keep.add(matched.output);
        }
      }
    }
    let result = negatives === patterns.length ? [...items] : [...keep];
    let matches = result.filter((item) => !omit.has(item));
    if (options && matches.length === 0) {
      if (options.failglob === true) {
        throw new Error(`No matches found for "${patterns.join(", ")}"`);
      }
      if (options.nonull === true || options.nullglob === true) {
        return options.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
      }
    }
    return matches;
  };
  micromatch.match = micromatch;
  micromatch.matcher = (pattern, options) => picomatch(pattern, options);
  micromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
  micromatch.any = micromatch.isMatch;
  micromatch.not = (list, patterns, options = {}) => {
    patterns = [].concat(patterns).map(String);
    let result = new Set();
    let items = [];
    let onResult = (state) => {
      if (options.onResult)
        options.onResult(state);
      items.push(state.output);
    };
    let matches = micromatch(list, patterns, {...options, onResult});
    for (let item of items) {
      if (!matches.includes(item)) {
        result.add(item);
      }
    }
    return [...result];
  };
  micromatch.contains = (str, pattern, options) => {
    if (typeof str !== "string") {
      throw new TypeError(`Expected a string: "${util4.inspect(str)}"`);
    }
    if (Array.isArray(pattern)) {
      return pattern.some((p) => micromatch.contains(str, p, options));
    }
    if (typeof pattern === "string") {
      if (isEmptyString(str) || isEmptyString(pattern)) {
        return false;
      }
      if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
        return true;
      }
    }
    return micromatch.isMatch(str, pattern, {...options, contains: true});
  };
  micromatch.matchKeys = (obj, patterns, options) => {
    if (!utils.isObject(obj)) {
      throw new TypeError("Expected the first argument to be an object");
    }
    let keys = micromatch(Object.keys(obj), patterns, options);
    let res = {};
    for (let key of keys)
      res[key] = obj[key];
    return res;
  };
  micromatch.some = (list, patterns, options) => {
    let items = [].concat(list);
    for (let pattern of [].concat(patterns)) {
      let isMatch = picomatch(String(pattern), options);
      if (items.some((item) => isMatch(item))) {
        return true;
      }
    }
    return false;
  };
  micromatch.every = (list, patterns, options) => {
    let items = [].concat(list);
    for (let pattern of [].concat(patterns)) {
      let isMatch = picomatch(String(pattern), options);
      if (!items.every((item) => isMatch(item))) {
        return false;
      }
    }
    return true;
  };
  micromatch.all = (str, patterns, options) => {
    if (typeof str !== "string") {
      throw new TypeError(`Expected a string: "${util4.inspect(str)}"`);
    }
    return [].concat(patterns).every((p) => picomatch(p, options)(str));
  };
  micromatch.capture = (glob, input, options) => {
    let posix = utils.isWindows(options);
    let regex = picomatch.makeRe(String(glob), {...options, capture: true});
    let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);
    if (match) {
      return match.slice(1).map((v) => v === void 0 ? "" : v);
    }
  };
  micromatch.makeRe = (...args2) => picomatch.makeRe(...args2);
  micromatch.scan = (...args2) => picomatch.scan(...args2);
  micromatch.parse = (patterns, options) => {
    let res = [];
    for (let pattern of [].concat(patterns || [])) {
      for (let str of braces(String(pattern), options)) {
        res.push(picomatch.parse(str, options));
      }
    }
    return res;
  };
  micromatch.braces = (pattern, options) => {
    if (typeof pattern !== "string")
      throw new TypeError("Expected a string");
    if (options && options.nobrace === true || !/\{.*\}/.test(pattern)) {
      return [pattern];
    }
    return braces(pattern, options);
  };
  micromatch.braceExpand = (pattern, options) => {
    if (typeof pattern !== "string")
      throw new TypeError("Expected a string");
    return micromatch.braces(pattern, {...options, expand: true});
  };
  module3.exports = micromatch;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/utils/pattern.js
var require_pattern = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.matchAny = exports2.convertPatternsToRe = exports2.makeRe = exports2.getPatternParts = exports2.expandBraceExpansion = exports2.expandPatternsWithBraceExpansion = exports2.isAffectDepthOfReadingPattern = exports2.endsWithSlashGlobStar = exports2.hasGlobStar = exports2.getBaseDirectory = exports2.getPositivePatterns = exports2.getNegativePatterns = exports2.isPositivePattern = exports2.isNegativePattern = exports2.convertToNegativePattern = exports2.convertToPositivePattern = exports2.isDynamicPattern = exports2.isStaticPattern = void 0;
  const path19 = require("path");
  const globParent = require_glob_parent();
  const micromatch = require_micromatch();
  const picomatch = require_picomatch2();
  const GLOBSTAR = "**";
  const ESCAPE_SYMBOL = "\\";
  const COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
  const REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[.*]/;
  const REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\(.*\|.*\)/;
  const GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\(.*\)/;
  const BRACE_EXPANSIONS_SYMBOLS_RE = /{.*(?:,|\.\.).*}/;
  function isStaticPattern(pattern, options = {}) {
    return !isDynamicPattern(pattern, options);
  }
  exports2.isStaticPattern = isStaticPattern;
  function isDynamicPattern(pattern, options = {}) {
    if (pattern === "") {
      return false;
    }
    if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {
      return true;
    }
    if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {
      return true;
    }
    if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {
      return true;
    }
    if (options.braceExpansion !== false && BRACE_EXPANSIONS_SYMBOLS_RE.test(pattern)) {
      return true;
    }
    return false;
  }
  exports2.isDynamicPattern = isDynamicPattern;
  function convertToPositivePattern(pattern) {
    return isNegativePattern(pattern) ? pattern.slice(1) : pattern;
  }
  exports2.convertToPositivePattern = convertToPositivePattern;
  function convertToNegativePattern(pattern) {
    return "!" + pattern;
  }
  exports2.convertToNegativePattern = convertToNegativePattern;
  function isNegativePattern(pattern) {
    return pattern.startsWith("!") && pattern[1] !== "(";
  }
  exports2.isNegativePattern = isNegativePattern;
  function isPositivePattern(pattern) {
    return !isNegativePattern(pattern);
  }
  exports2.isPositivePattern = isPositivePattern;
  function getNegativePatterns(patterns) {
    return patterns.filter(isNegativePattern);
  }
  exports2.getNegativePatterns = getNegativePatterns;
  function getPositivePatterns(patterns) {
    return patterns.filter(isPositivePattern);
  }
  exports2.getPositivePatterns = getPositivePatterns;
  function getBaseDirectory(pattern) {
    return globParent(pattern, {flipBackslashes: false});
  }
  exports2.getBaseDirectory = getBaseDirectory;
  function hasGlobStar(pattern) {
    return pattern.includes(GLOBSTAR);
  }
  exports2.hasGlobStar = hasGlobStar;
  function endsWithSlashGlobStar(pattern) {
    return pattern.endsWith("/" + GLOBSTAR);
  }
  exports2.endsWithSlashGlobStar = endsWithSlashGlobStar;
  function isAffectDepthOfReadingPattern(pattern) {
    const basename = path19.basename(pattern);
    return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);
  }
  exports2.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
  function expandPatternsWithBraceExpansion(patterns) {
    return patterns.reduce((collection, pattern) => {
      return collection.concat(expandBraceExpansion(pattern));
    }, []);
  }
  exports2.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
  function expandBraceExpansion(pattern) {
    return micromatch.braces(pattern, {
      expand: true,
      nodupes: true
    });
  }
  exports2.expandBraceExpansion = expandBraceExpansion;
  function getPatternParts(pattern, options) {
    let {parts} = picomatch.scan(pattern, Object.assign(Object.assign({}, options), {parts: true}));
    if (parts.length === 0) {
      parts = [pattern];
    }
    if (parts[0].startsWith("/")) {
      parts[0] = parts[0].slice(1);
      parts.unshift("");
    }
    return parts;
  }
  exports2.getPatternParts = getPatternParts;
  function makeRe(pattern, options) {
    return micromatch.makeRe(pattern, options);
  }
  exports2.makeRe = makeRe;
  function convertPatternsToRe(patterns, options) {
    return patterns.map((pattern) => makeRe(pattern, options));
  }
  exports2.convertPatternsToRe = convertPatternsToRe;
  function matchAny(entry, patternsRe) {
    return patternsRe.some((patternRe) => patternRe.test(entry));
  }
  exports2.matchAny = matchAny;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/utils/stream.js
var require_stream2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.merge = void 0;
  const merge2 = require_merge2();
  function merge(streams) {
    const mergedStream = merge2(streams);
    streams.forEach((stream) => {
      stream.once("error", (error) => mergedStream.emit("error", error));
    });
    mergedStream.once("close", () => propagateCloseEventToSources(streams));
    mergedStream.once("end", () => propagateCloseEventToSources(streams));
    return mergedStream;
  }
  exports2.merge = merge;
  function propagateCloseEventToSources(streams) {
    streams.forEach((stream) => stream.emit("close"));
  }
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/utils/string.js
var require_string = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.isEmpty = exports2.isString = void 0;
  function isString(input) {
    return typeof input === "string";
  }
  exports2.isString = isString;
  function isEmpty(input) {
    return input === "";
  }
  exports2.isEmpty = isEmpty;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/utils/index.js
var require_utils3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.string = exports2.stream = exports2.pattern = exports2.path = exports2.fs = exports2.errno = exports2.array = void 0;
  const array = require_array();
  exports2.array = array;
  const errno = require_errno();
  exports2.errno = errno;
  const fs17 = require_fs();
  exports2.fs = fs17;
  const path19 = require_path();
  exports2.path = path19;
  const pattern = require_pattern();
  exports2.pattern = pattern;
  const stream = require_stream2();
  exports2.stream = stream;
  const string = require_string();
  exports2.string = string;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/managers/tasks.js
var require_tasks = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.convertPatternGroupToTask = exports2.convertPatternGroupsToTasks = exports2.groupPatternsByBaseDirectory = exports2.getNegativePatternsAsPositive = exports2.getPositivePatterns = exports2.convertPatternsToTasks = exports2.generate = void 0;
  const utils = require_utils3();
  function generate(patterns, settings) {
    const positivePatterns = getPositivePatterns(patterns);
    const negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);
    const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));
    const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));
    const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, false);
    const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, true);
    return staticTasks.concat(dynamicTasks);
  }
  exports2.generate = generate;
  function convertPatternsToTasks(positive, negative, dynamic) {
    const positivePatternsGroup = groupPatternsByBaseDirectory(positive);
    if ("." in positivePatternsGroup) {
      const task = convertPatternGroupToTask(".", positive, negative, dynamic);
      return [task];
    }
    return convertPatternGroupsToTasks(positivePatternsGroup, negative, dynamic);
  }
  exports2.convertPatternsToTasks = convertPatternsToTasks;
  function getPositivePatterns(patterns) {
    return utils.pattern.getPositivePatterns(patterns);
  }
  exports2.getPositivePatterns = getPositivePatterns;
  function getNegativePatternsAsPositive(patterns, ignore) {
    const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);
    const positive = negative.map(utils.pattern.convertToPositivePattern);
    return positive;
  }
  exports2.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
  function groupPatternsByBaseDirectory(patterns) {
    const group = {};
    return patterns.reduce((collection, pattern) => {
      const base = utils.pattern.getBaseDirectory(pattern);
      if (base in collection) {
        collection[base].push(pattern);
      } else {
        collection[base] = [pattern];
      }
      return collection;
    }, group);
  }
  exports2.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
  function convertPatternGroupsToTasks(positive, negative, dynamic) {
    return Object.keys(positive).map((base) => {
      return convertPatternGroupToTask(base, positive[base], negative, dynamic);
    });
  }
  exports2.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
  function convertPatternGroupToTask(base, positive, negative, dynamic) {
    return {
      dynamic,
      positive,
      negative,
      base,
      patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))
    };
  }
  exports2.convertPatternGroupToTask = convertPatternGroupToTask;
});

// ../../node_modules/.pnpm/@nodelib/fs.stat@2.0.3/node_modules/@nodelib/fs.stat/out/providers/async.js
var require_async = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  function read(path19, settings, callback) {
    settings.fs.lstat(path19, (lstatError, lstat) => {
      if (lstatError !== null) {
        return callFailureCallback(callback, lstatError);
      }
      if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
        return callSuccessCallback(callback, lstat);
      }
      settings.fs.stat(path19, (statError, stat) => {
        if (statError !== null) {
          if (settings.throwErrorOnBrokenSymbolicLink) {
            return callFailureCallback(callback, statError);
          }
          return callSuccessCallback(callback, lstat);
        }
        if (settings.markSymbolicLink) {
          stat.isSymbolicLink = () => true;
        }
        callSuccessCallback(callback, stat);
      });
    });
  }
  exports2.read = read;
  function callFailureCallback(callback, error) {
    callback(error);
  }
  function callSuccessCallback(callback, result) {
    callback(null, result);
  }
});

// ../../node_modules/.pnpm/@nodelib/fs.stat@2.0.3/node_modules/@nodelib/fs.stat/out/providers/sync.js
var require_sync = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  function read(path19, settings) {
    const lstat = settings.fs.lstatSync(path19);
    if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
      return lstat;
    }
    try {
      const stat = settings.fs.statSync(path19);
      if (settings.markSymbolicLink) {
        stat.isSymbolicLink = () => true;
      }
      return stat;
    } catch (error) {
      if (!settings.throwErrorOnBrokenSymbolicLink) {
        return lstat;
      }
      throw error;
    }
  }
  exports2.read = read;
});

// ../../node_modules/.pnpm/@nodelib/fs.stat@2.0.3/node_modules/@nodelib/fs.stat/out/adapters/fs.js
var require_fs2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const fs17 = require("fs");
  exports2.FILE_SYSTEM_ADAPTER = {
    lstat: fs17.lstat,
    stat: fs17.stat,
    lstatSync: fs17.lstatSync,
    statSync: fs17.statSync
  };
  function createFileSystemAdapter(fsMethods) {
    if (fsMethods === void 0) {
      return exports2.FILE_SYSTEM_ADAPTER;
    }
    return Object.assign(Object.assign({}, exports2.FILE_SYSTEM_ADAPTER), fsMethods);
  }
  exports2.createFileSystemAdapter = createFileSystemAdapter;
});

// ../../node_modules/.pnpm/@nodelib/fs.stat@2.0.3/node_modules/@nodelib/fs.stat/out/settings.js
var require_settings = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const fs17 = require_fs2();
  class Settings {
    constructor(_options = {}) {
      this._options = _options;
      this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
      this.fs = fs17.createFileSystemAdapter(this._options.fs);
      this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
      this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
    }
    _getValue(option, value) {
      return option === void 0 ? value : option;
    }
  }
  exports2.default = Settings;
});

// ../../node_modules/.pnpm/@nodelib/fs.stat@2.0.3/node_modules/@nodelib/fs.stat/out/index.js
var require_out = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const async = require_async();
  const sync = require_sync();
  const settings_1 = require_settings();
  exports2.Settings = settings_1.default;
  function stat(path19, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === "function") {
      return async.read(path19, getSettings(), optionsOrSettingsOrCallback);
    }
    async.read(path19, getSettings(optionsOrSettingsOrCallback), callback);
  }
  exports2.stat = stat;
  function statSync(path19, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    return sync.read(path19, settings);
  }
  exports2.statSync = statSync;
  function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
      return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
  }
});

// ../../node_modules/.pnpm/run-parallel@1.1.9/node_modules/run-parallel/index.js
var require_run_parallel = __commonJS((exports2, module3) => {
  module3.exports = runParallel;
  function runParallel(tasks, cb) {
    var results, pending, keys;
    var isSync = true;
    if (Array.isArray(tasks)) {
      results = [];
      pending = tasks.length;
    } else {
      keys = Object.keys(tasks);
      results = {};
      pending = keys.length;
    }
    function done(err) {
      function end() {
        if (cb)
          cb(err, results);
        cb = null;
      }
      if (isSync)
        process.nextTick(end);
      else
        end();
    }
    function each(i, err, result) {
      results[i] = result;
      if (--pending === 0 || err) {
        done(err);
      }
    }
    if (!pending) {
      done(null);
    } else if (keys) {
      keys.forEach(function(key) {
        tasks[key](function(err, result) {
          each(key, err, result);
        });
      });
    } else {
      tasks.forEach(function(task, i) {
        task(function(err, result) {
          each(i, err, result);
        });
      });
    }
    isSync = false;
  }
});

// ../../node_modules/.pnpm/@nodelib/fs.scandir@2.1.3/node_modules/@nodelib/fs.scandir/out/constants.js
var require_constants3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const NODE_PROCESS_VERSION_PARTS = process.versions.node.split(".");
  const MAJOR_VERSION = parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
  const MINOR_VERSION = parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
  const SUPPORTED_MAJOR_VERSION = 10;
  const SUPPORTED_MINOR_VERSION = 10;
  const IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
  const IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
  exports2.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
});

// ../../node_modules/.pnpm/@nodelib/fs.scandir@2.1.3/node_modules/@nodelib/fs.scandir/out/utils/fs.js
var require_fs3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  class DirentFromStats {
    constructor(name, stats) {
      this.name = name;
      this.isBlockDevice = stats.isBlockDevice.bind(stats);
      this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
      this.isDirectory = stats.isDirectory.bind(stats);
      this.isFIFO = stats.isFIFO.bind(stats);
      this.isFile = stats.isFile.bind(stats);
      this.isSocket = stats.isSocket.bind(stats);
      this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
    }
  }
  function createDirentFromStats(name, stats) {
    return new DirentFromStats(name, stats);
  }
  exports2.createDirentFromStats = createDirentFromStats;
});

// ../../node_modules/.pnpm/@nodelib/fs.scandir@2.1.3/node_modules/@nodelib/fs.scandir/out/utils/index.js
var require_utils4 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const fs17 = require_fs3();
  exports2.fs = fs17;
});

// ../../node_modules/.pnpm/@nodelib/fs.scandir@2.1.3/node_modules/@nodelib/fs.scandir/out/providers/async.js
var require_async2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const fsStat = require_out();
  const rpl = require_run_parallel();
  const constants_1 = require_constants3();
  const utils = require_utils4();
  function read(directory, settings, callback) {
    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
      return readdirWithFileTypes(directory, settings, callback);
    }
    return readdir(directory, settings, callback);
  }
  exports2.read = read;
  function readdirWithFileTypes(directory, settings, callback) {
    settings.fs.readdir(directory, {withFileTypes: true}, (readdirError, dirents) => {
      if (readdirError !== null) {
        return callFailureCallback(callback, readdirError);
      }
      const entries = dirents.map((dirent) => ({
        dirent,
        name: dirent.name,
        path: `${directory}${settings.pathSegmentSeparator}${dirent.name}`
      }));
      if (!settings.followSymbolicLinks) {
        return callSuccessCallback(callback, entries);
      }
      const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
      rpl(tasks, (rplError, rplEntries) => {
        if (rplError !== null) {
          return callFailureCallback(callback, rplError);
        }
        callSuccessCallback(callback, rplEntries);
      });
    });
  }
  exports2.readdirWithFileTypes = readdirWithFileTypes;
  function makeRplTaskEntry(entry, settings) {
    return (done) => {
      if (!entry.dirent.isSymbolicLink()) {
        return done(null, entry);
      }
      settings.fs.stat(entry.path, (statError, stats) => {
        if (statError !== null) {
          if (settings.throwErrorOnBrokenSymbolicLink) {
            return done(statError);
          }
          return done(null, entry);
        }
        entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
        return done(null, entry);
      });
    };
  }
  function readdir(directory, settings, callback) {
    settings.fs.readdir(directory, (readdirError, names) => {
      if (readdirError !== null) {
        return callFailureCallback(callback, readdirError);
      }
      const filepaths = names.map((name) => `${directory}${settings.pathSegmentSeparator}${name}`);
      const tasks = filepaths.map((filepath) => {
        return (done) => fsStat.stat(filepath, settings.fsStatSettings, done);
      });
      rpl(tasks, (rplError, results) => {
        if (rplError !== null) {
          return callFailureCallback(callback, rplError);
        }
        const entries = [];
        names.forEach((name, index) => {
          const stats = results[index];
          const entry = {
            name,
            path: filepaths[index],
            dirent: utils.fs.createDirentFromStats(name, stats)
          };
          if (settings.stats) {
            entry.stats = stats;
          }
          entries.push(entry);
        });
        callSuccessCallback(callback, entries);
      });
    });
  }
  exports2.readdir = readdir;
  function callFailureCallback(callback, error) {
    callback(error);
  }
  function callSuccessCallback(callback, result) {
    callback(null, result);
  }
});

// ../../node_modules/.pnpm/@nodelib/fs.scandir@2.1.3/node_modules/@nodelib/fs.scandir/out/providers/sync.js
var require_sync2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const fsStat = require_out();
  const constants_1 = require_constants3();
  const utils = require_utils4();
  function read(directory, settings) {
    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
      return readdirWithFileTypes(directory, settings);
    }
    return readdir(directory, settings);
  }
  exports2.read = read;
  function readdirWithFileTypes(directory, settings) {
    const dirents = settings.fs.readdirSync(directory, {withFileTypes: true});
    return dirents.map((dirent) => {
      const entry = {
        dirent,
        name: dirent.name,
        path: `${directory}${settings.pathSegmentSeparator}${dirent.name}`
      };
      if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
        try {
          const stats = settings.fs.statSync(entry.path);
          entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
        } catch (error) {
          if (settings.throwErrorOnBrokenSymbolicLink) {
            throw error;
          }
        }
      }
      return entry;
    });
  }
  exports2.readdirWithFileTypes = readdirWithFileTypes;
  function readdir(directory, settings) {
    const names = settings.fs.readdirSync(directory);
    return names.map((name) => {
      const entryPath = `${directory}${settings.pathSegmentSeparator}${name}`;
      const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
      const entry = {
        name,
        path: entryPath,
        dirent: utils.fs.createDirentFromStats(name, stats)
      };
      if (settings.stats) {
        entry.stats = stats;
      }
      return entry;
    });
  }
  exports2.readdir = readdir;
});

// ../../node_modules/.pnpm/@nodelib/fs.scandir@2.1.3/node_modules/@nodelib/fs.scandir/out/adapters/fs.js
var require_fs4 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const fs17 = require("fs");
  exports2.FILE_SYSTEM_ADAPTER = {
    lstat: fs17.lstat,
    stat: fs17.stat,
    lstatSync: fs17.lstatSync,
    statSync: fs17.statSync,
    readdir: fs17.readdir,
    readdirSync: fs17.readdirSync
  };
  function createFileSystemAdapter(fsMethods) {
    if (fsMethods === void 0) {
      return exports2.FILE_SYSTEM_ADAPTER;
    }
    return Object.assign(Object.assign({}, exports2.FILE_SYSTEM_ADAPTER), fsMethods);
  }
  exports2.createFileSystemAdapter = createFileSystemAdapter;
});

// ../../node_modules/.pnpm/@nodelib/fs.scandir@2.1.3/node_modules/@nodelib/fs.scandir/out/settings.js
var require_settings2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const path19 = require("path");
  const fsStat = require_out();
  const fs17 = require_fs4();
  class Settings {
    constructor(_options = {}) {
      this._options = _options;
      this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
      this.fs = fs17.createFileSystemAdapter(this._options.fs);
      this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path19.sep);
      this.stats = this._getValue(this._options.stats, false);
      this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
      this.fsStatSettings = new fsStat.Settings({
        followSymbolicLink: this.followSymbolicLinks,
        fs: this.fs,
        throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
      });
    }
    _getValue(option, value) {
      return option === void 0 ? value : option;
    }
  }
  exports2.default = Settings;
});

// ../../node_modules/.pnpm/@nodelib/fs.scandir@2.1.3/node_modules/@nodelib/fs.scandir/out/index.js
var require_out2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const async = require_async2();
  const sync = require_sync2();
  const settings_1 = require_settings2();
  exports2.Settings = settings_1.default;
  function scandir(path19, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === "function") {
      return async.read(path19, getSettings(), optionsOrSettingsOrCallback);
    }
    async.read(path19, getSettings(optionsOrSettingsOrCallback), callback);
  }
  exports2.scandir = scandir;
  function scandirSync(path19, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    return sync.read(path19, settings);
  }
  exports2.scandirSync = scandirSync;
  function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
      return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
  }
});

// ../../node_modules/.pnpm/reusify@1.0.4/node_modules/reusify/reusify.js
var require_reusify = __commonJS((exports2, module3) => {
  "use strict";
  function reusify(Constructor) {
    var head = new Constructor();
    var tail = head;
    function get() {
      var current = head;
      if (current.next) {
        head = current.next;
      } else {
        head = new Constructor();
        tail = head;
      }
      current.next = null;
      return current;
    }
    function release(obj) {
      tail.next = obj;
      tail = obj;
    }
    return {
      get,
      release
    };
  }
  module3.exports = reusify;
});

// ../../node_modules/.pnpm/fastq@1.8.0/node_modules/fastq/queue.js
var require_queue = __commonJS((exports2, module3) => {
  "use strict";
  var reusify = require_reusify();
  function fastqueue(context, worker, concurrency) {
    if (typeof context === "function") {
      concurrency = worker;
      worker = context;
      context = null;
    }
    var cache = reusify(Task);
    var queueHead = null;
    var queueTail = null;
    var _running = 0;
    var self2 = {
      push,
      drain: noop,
      saturated: noop,
      pause,
      paused: false,
      concurrency,
      running,
      resume,
      idle,
      length,
      getQueue,
      unshift,
      empty: noop,
      kill,
      killAndDrain
    };
    return self2;
    function running() {
      return _running;
    }
    function pause() {
      self2.paused = true;
    }
    function length() {
      var current = queueHead;
      var counter = 0;
      while (current) {
        current = current.next;
        counter++;
      }
      return counter;
    }
    function getQueue() {
      var current = queueHead;
      var tasks = [];
      while (current) {
        tasks.push(current.value);
        current = current.next;
      }
      return tasks;
    }
    function resume() {
      if (!self2.paused)
        return;
      self2.paused = false;
      for (var i = 0; i < self2.concurrency; i++) {
        _running++;
        release();
      }
    }
    function idle() {
      return _running === 0 && self2.length() === 0;
    }
    function push(value, done) {
      var current = cache.get();
      current.context = context;
      current.release = release;
      current.value = value;
      current.callback = done || noop;
      if (_running === self2.concurrency || self2.paused) {
        if (queueTail) {
          queueTail.next = current;
          queueTail = current;
        } else {
          queueHead = current;
          queueTail = current;
          self2.saturated();
        }
      } else {
        _running++;
        worker.call(context, current.value, current.worked);
      }
    }
    function unshift(value, done) {
      var current = cache.get();
      current.context = context;
      current.release = release;
      current.value = value;
      current.callback = done || noop;
      if (_running === self2.concurrency || self2.paused) {
        if (queueHead) {
          current.next = queueHead;
          queueHead = current;
        } else {
          queueHead = current;
          queueTail = current;
          self2.saturated();
        }
      } else {
        _running++;
        worker.call(context, current.value, current.worked);
      }
    }
    function release(holder) {
      if (holder) {
        cache.release(holder);
      }
      var next = queueHead;
      if (next) {
        if (!self2.paused) {
          if (queueTail === queueHead) {
            queueTail = null;
          }
          queueHead = next.next;
          next.next = null;
          worker.call(context, next.value, next.worked);
          if (queueTail === null) {
            self2.empty();
          }
        } else {
          _running--;
        }
      } else if (--_running === 0) {
        self2.drain();
      }
    }
    function kill() {
      queueHead = null;
      queueTail = null;
      self2.drain = noop;
    }
    function killAndDrain() {
      queueHead = null;
      queueTail = null;
      self2.drain();
      self2.drain = noop;
    }
  }
  function noop() {
  }
  function Task() {
    this.value = null;
    this.callback = noop;
    this.next = null;
    this.release = noop;
    this.context = null;
    var self2 = this;
    this.worked = function worked(err, result) {
      var callback = self2.callback;
      self2.value = null;
      self2.callback = noop;
      callback.call(self2.context, err, result);
      self2.release(self2);
    };
  }
  module3.exports = fastqueue;
});

// ../../node_modules/.pnpm/@nodelib/fs.walk@1.2.4/node_modules/@nodelib/fs.walk/out/readers/common.js
var require_common3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  function isFatalError(settings, error) {
    if (settings.errorFilter === null) {
      return true;
    }
    return !settings.errorFilter(error);
  }
  exports2.isFatalError = isFatalError;
  function isAppliedFilter(filter, value) {
    return filter === null || filter(value);
  }
  exports2.isAppliedFilter = isAppliedFilter;
  function replacePathSegmentSeparator(filepath, separator) {
    return filepath.split(/[\\/]/).join(separator);
  }
  exports2.replacePathSegmentSeparator = replacePathSegmentSeparator;
  function joinPathSegments(a, b, separator) {
    if (a === "") {
      return b;
    }
    return a + separator + b;
  }
  exports2.joinPathSegments = joinPathSegments;
});

// ../../node_modules/.pnpm/@nodelib/fs.walk@1.2.4/node_modules/@nodelib/fs.walk/out/readers/reader.js
var require_reader = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const common = require_common3();
  class Reader {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
    }
  }
  exports2.default = Reader;
});

// ../../node_modules/.pnpm/@nodelib/fs.walk@1.2.4/node_modules/@nodelib/fs.walk/out/readers/async.js
var require_async3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const events_1 = require("events");
  const fsScandir = require_out2();
  const fastq = require_queue();
  const common = require_common3();
  const reader_1 = require_reader();
  class AsyncReader extends reader_1.default {
    constructor(_root, _settings) {
      super(_root, _settings);
      this._settings = _settings;
      this._scandir = fsScandir.scandir;
      this._emitter = new events_1.EventEmitter();
      this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
      this._isFatalError = false;
      this._isDestroyed = false;
      this._queue.drain = () => {
        if (!this._isFatalError) {
          this._emitter.emit("end");
        }
      };
    }
    read() {
      this._isFatalError = false;
      this._isDestroyed = false;
      setImmediate(() => {
        this._pushToQueue(this._root, this._settings.basePath);
      });
      return this._emitter;
    }
    destroy() {
      if (this._isDestroyed) {
        throw new Error("The reader is already destroyed");
      }
      this._isDestroyed = true;
      this._queue.killAndDrain();
    }
    onEntry(callback) {
      this._emitter.on("entry", callback);
    }
    onError(callback) {
      this._emitter.once("error", callback);
    }
    onEnd(callback) {
      this._emitter.once("end", callback);
    }
    _pushToQueue(directory, base) {
      const queueItem = {directory, base};
      this._queue.push(queueItem, (error) => {
        if (error !== null) {
          this._handleError(error);
        }
      });
    }
    _worker(item, done) {
      this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {
        if (error !== null) {
          return done(error, void 0);
        }
        for (const entry of entries) {
          this._handleEntry(entry, item.base);
        }
        done(null, void 0);
      });
    }
    _handleError(error) {
      if (!common.isFatalError(this._settings, error)) {
        return;
      }
      this._isFatalError = true;
      this._isDestroyed = true;
      this._emitter.emit("error", error);
    }
    _handleEntry(entry, base) {
      if (this._isDestroyed || this._isFatalError) {
        return;
      }
      const fullpath = entry.path;
      if (base !== void 0) {
        entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
      }
      if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
        this._emitEntry(entry);
      }
      if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
        this._pushToQueue(fullpath, entry.path);
      }
    }
    _emitEntry(entry) {
      this._emitter.emit("entry", entry);
    }
  }
  exports2.default = AsyncReader;
});

// ../../node_modules/.pnpm/@nodelib/fs.walk@1.2.4/node_modules/@nodelib/fs.walk/out/providers/async.js
var require_async4 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const async_1 = require_async3();
  class AsyncProvider {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._reader = new async_1.default(this._root, this._settings);
      this._storage = new Set();
    }
    read(callback) {
      this._reader.onError((error) => {
        callFailureCallback(callback, error);
      });
      this._reader.onEntry((entry) => {
        this._storage.add(entry);
      });
      this._reader.onEnd(() => {
        callSuccessCallback(callback, [...this._storage]);
      });
      this._reader.read();
    }
  }
  exports2.default = AsyncProvider;
  function callFailureCallback(callback, error) {
    callback(error);
  }
  function callSuccessCallback(callback, entries) {
    callback(null, entries);
  }
});

// ../../node_modules/.pnpm/@nodelib/fs.walk@1.2.4/node_modules/@nodelib/fs.walk/out/providers/stream.js
var require_stream3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const stream_1 = require("stream");
  const async_1 = require_async3();
  class StreamProvider {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._reader = new async_1.default(this._root, this._settings);
      this._stream = new stream_1.Readable({
        objectMode: true,
        read: () => {
        },
        destroy: this._reader.destroy.bind(this._reader)
      });
    }
    read() {
      this._reader.onError((error) => {
        this._stream.emit("error", error);
      });
      this._reader.onEntry((entry) => {
        this._stream.push(entry);
      });
      this._reader.onEnd(() => {
        this._stream.push(null);
      });
      this._reader.read();
      return this._stream;
    }
  }
  exports2.default = StreamProvider;
});

// ../../node_modules/.pnpm/@nodelib/fs.walk@1.2.4/node_modules/@nodelib/fs.walk/out/readers/sync.js
var require_sync3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const fsScandir = require_out2();
  const common = require_common3();
  const reader_1 = require_reader();
  class SyncReader extends reader_1.default {
    constructor() {
      super(...arguments);
      this._scandir = fsScandir.scandirSync;
      this._storage = new Set();
      this._queue = new Set();
    }
    read() {
      this._pushToQueue(this._root, this._settings.basePath);
      this._handleQueue();
      return [...this._storage];
    }
    _pushToQueue(directory, base) {
      this._queue.add({directory, base});
    }
    _handleQueue() {
      for (const item of this._queue.values()) {
        this._handleDirectory(item.directory, item.base);
      }
    }
    _handleDirectory(directory, base) {
      try {
        const entries = this._scandir(directory, this._settings.fsScandirSettings);
        for (const entry of entries) {
          this._handleEntry(entry, base);
        }
      } catch (error) {
        this._handleError(error);
      }
    }
    _handleError(error) {
      if (!common.isFatalError(this._settings, error)) {
        return;
      }
      throw error;
    }
    _handleEntry(entry, base) {
      const fullpath = entry.path;
      if (base !== void 0) {
        entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
      }
      if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
        this._pushToStorage(entry);
      }
      if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
        this._pushToQueue(fullpath, entry.path);
      }
    }
    _pushToStorage(entry) {
      this._storage.add(entry);
    }
  }
  exports2.default = SyncReader;
});

// ../../node_modules/.pnpm/@nodelib/fs.walk@1.2.4/node_modules/@nodelib/fs.walk/out/providers/sync.js
var require_sync4 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const sync_1 = require_sync3();
  class SyncProvider {
    constructor(_root, _settings) {
      this._root = _root;
      this._settings = _settings;
      this._reader = new sync_1.default(this._root, this._settings);
    }
    read() {
      return this._reader.read();
    }
  }
  exports2.default = SyncProvider;
});

// ../../node_modules/.pnpm/@nodelib/fs.walk@1.2.4/node_modules/@nodelib/fs.walk/out/settings.js
var require_settings3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const path19 = require("path");
  const fsScandir = require_out2();
  class Settings {
    constructor(_options = {}) {
      this._options = _options;
      this.basePath = this._getValue(this._options.basePath, void 0);
      this.concurrency = this._getValue(this._options.concurrency, Infinity);
      this.deepFilter = this._getValue(this._options.deepFilter, null);
      this.entryFilter = this._getValue(this._options.entryFilter, null);
      this.errorFilter = this._getValue(this._options.errorFilter, null);
      this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path19.sep);
      this.fsScandirSettings = new fsScandir.Settings({
        followSymbolicLinks: this._options.followSymbolicLinks,
        fs: this._options.fs,
        pathSegmentSeparator: this._options.pathSegmentSeparator,
        stats: this._options.stats,
        throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
      });
    }
    _getValue(option, value) {
      return option === void 0 ? value : option;
    }
  }
  exports2.default = Settings;
});

// ../../node_modules/.pnpm/@nodelib/fs.walk@1.2.4/node_modules/@nodelib/fs.walk/out/index.js
var require_out3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const async_1 = require_async4();
  const stream_1 = require_stream3();
  const sync_1 = require_sync4();
  const settings_1 = require_settings3();
  exports2.Settings = settings_1.default;
  function walk(directory, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === "function") {
      return new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
    }
    new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
  }
  exports2.walk = walk;
  function walkSync(directory, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    const provider = new sync_1.default(directory, settings);
    return provider.read();
  }
  exports2.walkSync = walkSync;
  function walkStream(directory, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    const provider = new stream_1.default(directory, settings);
    return provider.read();
  }
  exports2.walkStream = walkStream;
  function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
      return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
  }
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/readers/reader.js
var require_reader2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const path19 = require("path");
  const fsStat = require_out();
  const utils = require_utils3();
  class Reader {
    constructor(_settings) {
      this._settings = _settings;
      this._fsStatSettings = new fsStat.Settings({
        followSymbolicLink: this._settings.followSymbolicLinks,
        fs: this._settings.fs,
        throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
      });
    }
    _getFullEntryPath(filepath) {
      return path19.resolve(this._settings.cwd, filepath);
    }
    _makeEntry(stats, pattern) {
      const entry = {
        name: pattern,
        path: pattern,
        dirent: utils.fs.createDirentFromStats(pattern, stats)
      };
      if (this._settings.stats) {
        entry.stats = stats;
      }
      return entry;
    }
    _isFatalError(error) {
      return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;
    }
  }
  exports2.default = Reader;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/readers/stream.js
var require_stream4 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const stream_1 = require("stream");
  const fsStat = require_out();
  const fsWalk = require_out3();
  const reader_1 = require_reader2();
  class ReaderStream extends reader_1.default {
    constructor() {
      super(...arguments);
      this._walkStream = fsWalk.walkStream;
      this._stat = fsStat.stat;
    }
    dynamic(root, options) {
      return this._walkStream(root, options);
    }
    static(patterns, options) {
      const filepaths = patterns.map(this._getFullEntryPath, this);
      const stream = new stream_1.PassThrough({objectMode: true});
      stream._write = (index, _enc, done) => {
        return this._getEntry(filepaths[index], patterns[index], options).then((entry) => {
          if (entry !== null && options.entryFilter(entry)) {
            stream.push(entry);
          }
          if (index === filepaths.length - 1) {
            stream.end();
          }
          done();
        }).catch(done);
      };
      for (let i = 0; i < filepaths.length; i++) {
        stream.write(i);
      }
      return stream;
    }
    _getEntry(filepath, pattern, options) {
      return this._getStat(filepath).then((stats) => this._makeEntry(stats, pattern)).catch((error) => {
        if (options.errorFilter(error)) {
          return null;
        }
        throw error;
      });
    }
    _getStat(filepath) {
      return new Promise((resolve, reject) => {
        this._stat(filepath, this._fsStatSettings, (error, stats) => {
          return error === null ? resolve(stats) : reject(error);
        });
      });
    }
  }
  exports2.default = ReaderStream;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/providers/matchers/matcher.js
var require_matcher = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const utils = require_utils3();
  class Matcher {
    constructor(_patterns, _settings, _micromatchOptions) {
      this._patterns = _patterns;
      this._settings = _settings;
      this._micromatchOptions = _micromatchOptions;
      this._storage = [];
      this._fillStorage();
    }
    _fillStorage() {
      const patterns = utils.pattern.expandPatternsWithBraceExpansion(this._patterns);
      for (const pattern of patterns) {
        const segments = this._getPatternSegments(pattern);
        const sections = this._splitSegmentsIntoSections(segments);
        this._storage.push({
          complete: sections.length <= 1,
          pattern,
          segments,
          sections
        });
      }
    }
    _getPatternSegments(pattern) {
      const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);
      return parts.map((part) => {
        const dynamic = utils.pattern.isDynamicPattern(part, this._settings);
        if (!dynamic) {
          return {
            dynamic: false,
            pattern: part
          };
        }
        return {
          dynamic: true,
          pattern: part,
          patternRe: utils.pattern.makeRe(part, this._micromatchOptions)
        };
      });
    }
    _splitSegmentsIntoSections(segments) {
      return utils.array.splitWhen(segments, (segment) => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));
    }
  }
  exports2.default = Matcher;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/providers/matchers/partial.js
var require_partial = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const matcher_1 = require_matcher();
  class PartialMatcher extends matcher_1.default {
    match(filepath) {
      const parts = filepath.split("/");
      const levels = parts.length;
      const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);
      for (const pattern of patterns) {
        const section = pattern.sections[0];
        if (!pattern.complete && levels > section.length) {
          return true;
        }
        const match = parts.every((part, index) => {
          const segment = pattern.segments[index];
          if (segment.dynamic && segment.patternRe.test(part)) {
            return true;
          }
          if (!segment.dynamic && segment.pattern === part) {
            return true;
          }
          return false;
        });
        if (match) {
          return true;
        }
      }
      return false;
    }
  }
  exports2.default = PartialMatcher;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/providers/filters/deep.js
var require_deep = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const utils = require_utils3();
  const partial_1 = require_partial();
  class DeepFilter {
    constructor(_settings, _micromatchOptions) {
      this._settings = _settings;
      this._micromatchOptions = _micromatchOptions;
    }
    getFilter(basePath, positive, negative) {
      const matcher = this._getMatcher(positive);
      const negativeRe = this._getNegativePatternsRe(negative);
      return (entry) => this._filter(basePath, entry, matcher, negativeRe);
    }
    _getMatcher(patterns) {
      return new partial_1.default(patterns, this._settings, this._micromatchOptions);
    }
    _getNegativePatternsRe(patterns) {
      const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);
      return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
    }
    _filter(basePath, entry, matcher, negativeRe) {
      if (this._isSkippedByDeep(basePath, entry.path)) {
        return false;
      }
      if (this._isSkippedSymbolicLink(entry)) {
        return false;
      }
      const filepath = utils.path.removeLeadingDotSegment(entry.path);
      if (this._isSkippedByPositivePatterns(filepath, matcher)) {
        return false;
      }
      return this._isSkippedByNegativePatterns(filepath, negativeRe);
    }
    _isSkippedByDeep(basePath, entryPath) {
      if (this._settings.deep === Infinity) {
        return false;
      }
      return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
    }
    _getEntryLevel(basePath, entryPath) {
      const entryPathDepth = entryPath.split("/").length;
      if (basePath === "") {
        return entryPathDepth;
      }
      const basePathDepth = basePath.split("/").length;
      return entryPathDepth - basePathDepth;
    }
    _isSkippedSymbolicLink(entry) {
      return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
    }
    _isSkippedByPositivePatterns(entryPath, matcher) {
      return !this._settings.baseNameMatch && !matcher.match(entryPath);
    }
    _isSkippedByNegativePatterns(entryPath, patternsRe) {
      return !utils.pattern.matchAny(entryPath, patternsRe);
    }
  }
  exports2.default = DeepFilter;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/providers/filters/entry.js
var require_entry = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const utils = require_utils3();
  class EntryFilter {
    constructor(_settings, _micromatchOptions) {
      this._settings = _settings;
      this._micromatchOptions = _micromatchOptions;
      this.index = new Map();
    }
    getFilter(positive, negative) {
      const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);
      const negativeRe = utils.pattern.convertPatternsToRe(negative, this._micromatchOptions);
      return (entry) => this._filter(entry, positiveRe, negativeRe);
    }
    _filter(entry, positiveRe, negativeRe) {
      if (this._settings.unique && this._isDuplicateEntry(entry)) {
        return false;
      }
      if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {
        return false;
      }
      if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) {
        return false;
      }
      const filepath = this._settings.baseNameMatch ? entry.name : entry.path;
      const isMatched = this._isMatchToPatterns(filepath, positiveRe) && !this._isMatchToPatterns(entry.path, negativeRe);
      if (this._settings.unique && isMatched) {
        this._createIndexRecord(entry);
      }
      return isMatched;
    }
    _isDuplicateEntry(entry) {
      return this.index.has(entry.path);
    }
    _createIndexRecord(entry) {
      this.index.set(entry.path, void 0);
    }
    _onlyFileFilter(entry) {
      return this._settings.onlyFiles && !entry.dirent.isFile();
    }
    _onlyDirectoryFilter(entry) {
      return this._settings.onlyDirectories && !entry.dirent.isDirectory();
    }
    _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {
      if (!this._settings.absolute) {
        return false;
      }
      const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);
      return utils.pattern.matchAny(fullpath, patternsRe);
    }
    _isMatchToPatterns(entryPath, patternsRe) {
      const filepath = utils.path.removeLeadingDotSegment(entryPath);
      return utils.pattern.matchAny(filepath, patternsRe);
    }
  }
  exports2.default = EntryFilter;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/providers/filters/error.js
var require_error2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const utils = require_utils3();
  class ErrorFilter {
    constructor(_settings) {
      this._settings = _settings;
    }
    getFilter() {
      return (error) => this._isNonFatalError(error);
    }
    _isNonFatalError(error) {
      return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;
    }
  }
  exports2.default = ErrorFilter;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/providers/transformers/entry.js
var require_entry2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const utils = require_utils3();
  class EntryTransformer {
    constructor(_settings) {
      this._settings = _settings;
    }
    getTransformer() {
      return (entry) => this._transform(entry);
    }
    _transform(entry) {
      let filepath = entry.path;
      if (this._settings.absolute) {
        filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);
        filepath = utils.path.unixify(filepath);
      }
      if (this._settings.markDirectories && entry.dirent.isDirectory()) {
        filepath += "/";
      }
      if (!this._settings.objectMode) {
        return filepath;
      }
      return Object.assign(Object.assign({}, entry), {path: filepath});
    }
  }
  exports2.default = EntryTransformer;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/providers/provider.js
var require_provider = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const path19 = require("path");
  const deep_1 = require_deep();
  const entry_1 = require_entry();
  const error_1 = require_error2();
  const entry_2 = require_entry2();
  class Provider {
    constructor(_settings) {
      this._settings = _settings;
      this.errorFilter = new error_1.default(this._settings);
      this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
      this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
      this.entryTransformer = new entry_2.default(this._settings);
    }
    _getRootDirectory(task) {
      return path19.resolve(this._settings.cwd, task.base);
    }
    _getReaderOptions(task) {
      const basePath = task.base === "." ? "" : task.base;
      return {
        basePath,
        pathSegmentSeparator: "/",
        concurrency: this._settings.concurrency,
        deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
        entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
        errorFilter: this.errorFilter.getFilter(),
        followSymbolicLinks: this._settings.followSymbolicLinks,
        fs: this._settings.fs,
        stats: this._settings.stats,
        throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
        transform: this.entryTransformer.getTransformer()
      };
    }
    _getMicromatchOptions() {
      return {
        dot: this._settings.dot,
        matchBase: this._settings.baseNameMatch,
        nobrace: !this._settings.braceExpansion,
        nocase: !this._settings.caseSensitiveMatch,
        noext: !this._settings.extglob,
        noglobstar: !this._settings.globstar,
        posix: true,
        strictSlashes: false
      };
    }
  }
  exports2.default = Provider;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/providers/async.js
var require_async5 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const stream_1 = require_stream4();
  const provider_1 = require_provider();
  class ProviderAsync extends provider_1.default {
    constructor() {
      super(...arguments);
      this._reader = new stream_1.default(this._settings);
    }
    read(task) {
      const root = this._getRootDirectory(task);
      const options = this._getReaderOptions(task);
      const entries = [];
      return new Promise((resolve, reject) => {
        const stream = this.api(root, task, options);
        stream.once("error", reject);
        stream.on("data", (entry) => entries.push(options.transform(entry)));
        stream.once("end", () => resolve(entries));
      });
    }
    api(root, task, options) {
      if (task.dynamic) {
        return this._reader.dynamic(root, options);
      }
      return this._reader.static(task.patterns, options);
    }
  }
  exports2.default = ProviderAsync;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/providers/stream.js
var require_stream5 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const stream_1 = require("stream");
  const stream_2 = require_stream4();
  const provider_1 = require_provider();
  class ProviderStream extends provider_1.default {
    constructor() {
      super(...arguments);
      this._reader = new stream_2.default(this._settings);
    }
    read(task) {
      const root = this._getRootDirectory(task);
      const options = this._getReaderOptions(task);
      const source = this.api(root, task, options);
      const destination = new stream_1.Readable({objectMode: true, read: () => {
      }});
      source.once("error", (error) => destination.emit("error", error)).on("data", (entry) => destination.emit("data", options.transform(entry))).once("end", () => destination.emit("end"));
      destination.once("close", () => source.destroy());
      return destination;
    }
    api(root, task, options) {
      if (task.dynamic) {
        return this._reader.dynamic(root, options);
      }
      return this._reader.static(task.patterns, options);
    }
  }
  exports2.default = ProviderStream;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/readers/sync.js
var require_sync5 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const fsStat = require_out();
  const fsWalk = require_out3();
  const reader_1 = require_reader2();
  class ReaderSync extends reader_1.default {
    constructor() {
      super(...arguments);
      this._walkSync = fsWalk.walkSync;
      this._statSync = fsStat.statSync;
    }
    dynamic(root, options) {
      return this._walkSync(root, options);
    }
    static(patterns, options) {
      const entries = [];
      for (const pattern of patterns) {
        const filepath = this._getFullEntryPath(pattern);
        const entry = this._getEntry(filepath, pattern, options);
        if (entry === null || !options.entryFilter(entry)) {
          continue;
        }
        entries.push(entry);
      }
      return entries;
    }
    _getEntry(filepath, pattern, options) {
      try {
        const stats = this._getStat(filepath);
        return this._makeEntry(stats, pattern);
      } catch (error) {
        if (options.errorFilter(error)) {
          return null;
        }
        throw error;
      }
    }
    _getStat(filepath) {
      return this._statSync(filepath, this._fsStatSettings);
    }
  }
  exports2.default = ReaderSync;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/providers/sync.js
var require_sync6 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const sync_1 = require_sync5();
  const provider_1 = require_provider();
  class ProviderSync extends provider_1.default {
    constructor() {
      super(...arguments);
      this._reader = new sync_1.default(this._settings);
    }
    read(task) {
      const root = this._getRootDirectory(task);
      const options = this._getReaderOptions(task);
      const entries = this.api(root, task, options);
      return entries.map(options.transform);
    }
    api(root, task, options) {
      if (task.dynamic) {
        return this._reader.dynamic(root, options);
      }
      return this._reader.static(task.patterns, options);
    }
  }
  exports2.default = ProviderSync;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/settings.js
var require_settings4 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
  const fs17 = require("fs");
  const os3 = require("os");
  const CPU_COUNT = os3.cpus().length;
  exports2.DEFAULT_FILE_SYSTEM_ADAPTER = {
    lstat: fs17.lstat,
    lstatSync: fs17.lstatSync,
    stat: fs17.stat,
    statSync: fs17.statSync,
    readdir: fs17.readdir,
    readdirSync: fs17.readdirSync
  };
  class Settings {
    constructor(_options = {}) {
      this._options = _options;
      this.absolute = this._getValue(this._options.absolute, false);
      this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
      this.braceExpansion = this._getValue(this._options.braceExpansion, true);
      this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
      this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
      this.cwd = this._getValue(this._options.cwd, process.cwd());
      this.deep = this._getValue(this._options.deep, Infinity);
      this.dot = this._getValue(this._options.dot, false);
      this.extglob = this._getValue(this._options.extglob, true);
      this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
      this.fs = this._getFileSystemMethods(this._options.fs);
      this.globstar = this._getValue(this._options.globstar, true);
      this.ignore = this._getValue(this._options.ignore, []);
      this.markDirectories = this._getValue(this._options.markDirectories, false);
      this.objectMode = this._getValue(this._options.objectMode, false);
      this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
      this.onlyFiles = this._getValue(this._options.onlyFiles, true);
      this.stats = this._getValue(this._options.stats, false);
      this.suppressErrors = this._getValue(this._options.suppressErrors, false);
      this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
      this.unique = this._getValue(this._options.unique, true);
      if (this.onlyDirectories) {
        this.onlyFiles = false;
      }
      if (this.stats) {
        this.objectMode = true;
      }
    }
    _getValue(option, value) {
      return option === void 0 ? value : option;
    }
    _getFileSystemMethods(methods = {}) {
      return Object.assign(Object.assign({}, exports2.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
    }
  }
  exports2.default = Settings;
});

// ../../node_modules/.pnpm/fast-glob@3.2.4/node_modules/fast-glob/out/index.js
var require_out4 = __commonJS((exports2, module3) => {
  "use strict";
  const taskManager = require_tasks();
  const async_1 = require_async5();
  const stream_1 = require_stream5();
  const sync_1 = require_sync6();
  const settings_1 = require_settings4();
  const utils = require_utils3();
  async function FastGlob(source, options) {
    assertPatternsInput(source);
    const works = getWorks(source, async_1.default, options);
    const result = await Promise.all(works);
    return utils.array.flatten(result);
  }
  (function(FastGlob2) {
    function sync(source, options) {
      assertPatternsInput(source);
      const works = getWorks(source, sync_1.default, options);
      return utils.array.flatten(works);
    }
    FastGlob2.sync = sync;
    function stream(source, options) {
      assertPatternsInput(source);
      const works = getWorks(source, stream_1.default, options);
      return utils.stream.merge(works);
    }
    FastGlob2.stream = stream;
    function generateTasks(source, options) {
      assertPatternsInput(source);
      const patterns = [].concat(source);
      const settings = new settings_1.default(options);
      return taskManager.generate(patterns, settings);
    }
    FastGlob2.generateTasks = generateTasks;
    function isDynamicPattern(source, options) {
      assertPatternsInput(source);
      const settings = new settings_1.default(options);
      return utils.pattern.isDynamicPattern(source, settings);
    }
    FastGlob2.isDynamicPattern = isDynamicPattern;
    function escapePath(source) {
      assertPatternsInput(source);
      return utils.path.escape(source);
    }
    FastGlob2.escapePath = escapePath;
  })(FastGlob || (FastGlob = {}));
  function getWorks(source, _Provider, options) {
    const patterns = [].concat(source);
    const settings = new settings_1.default(options);
    const tasks = taskManager.generate(patterns, settings);
    const provider = new _Provider(settings);
    return tasks.map(provider.read, provider);
  }
  function assertPatternsInput(input) {
    const source = [].concat(input);
    const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));
    if (!isValidSource) {
      throw new TypeError("Patterns must be a string (non empty) or an array of strings");
    }
  }
  module3.exports = FastGlob;
});

// ../../node_modules/.pnpm/path-type@4.0.0/node_modules/path-type/index.js
var require_path_type = __commonJS((exports2) => {
  "use strict";
  const {promisify: promisify3} = require("util");
  const fs17 = require("fs");
  async function isType(fsStatType, statsMethodName, filePath) {
    if (typeof filePath !== "string") {
      throw new TypeError(`Expected a string, got ${typeof filePath}`);
    }
    try {
      const stats = await promisify3(fs17[fsStatType])(filePath);
      return stats[statsMethodName]();
    } catch (error) {
      if (error.code === "ENOENT") {
        return false;
      }
      throw error;
    }
  }
  function isTypeSync(fsStatType, statsMethodName, filePath) {
    if (typeof filePath !== "string") {
      throw new TypeError(`Expected a string, got ${typeof filePath}`);
    }
    try {
      return fs17[fsStatType](filePath)[statsMethodName]();
    } catch (error) {
      if (error.code === "ENOENT") {
        return false;
      }
      throw error;
    }
  }
  exports2.isFile = isType.bind(null, "stat", "isFile");
  exports2.isDirectory = isType.bind(null, "stat", "isDirectory");
  exports2.isSymlink = isType.bind(null, "lstat", "isSymbolicLink");
  exports2.isFileSync = isTypeSync.bind(null, "statSync", "isFile");
  exports2.isDirectorySync = isTypeSync.bind(null, "statSync", "isDirectory");
  exports2.isSymlinkSync = isTypeSync.bind(null, "lstatSync", "isSymbolicLink");
});

// ../../node_modules/.pnpm/dir-glob@3.0.1/node_modules/dir-glob/index.js
var require_dir_glob = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const pathType = require_path_type();
  const getExtensions = (extensions) => extensions.length > 1 ? `{${extensions.join(",")}}` : extensions[0];
  const getPath = (filepath, cwd) => {
    const pth = filepath[0] === "!" ? filepath.slice(1) : filepath;
    return path19.isAbsolute(pth) ? pth : path19.join(cwd, pth);
  };
  const addExtensions = (file, extensions) => {
    if (path19.extname(file)) {
      return `**/${file}`;
    }
    return `**/${file}.${getExtensions(extensions)}`;
  };
  const getGlob = (directory, options) => {
    if (options.files && !Array.isArray(options.files)) {
      throw new TypeError(`Expected \`files\` to be of type \`Array\` but received type \`${typeof options.files}\``);
    }
    if (options.extensions && !Array.isArray(options.extensions)) {
      throw new TypeError(`Expected \`extensions\` to be of type \`Array\` but received type \`${typeof options.extensions}\``);
    }
    if (options.files && options.extensions) {
      return options.files.map((x) => path19.posix.join(directory, addExtensions(x, options.extensions)));
    }
    if (options.files) {
      return options.files.map((x) => path19.posix.join(directory, `**/${x}`));
    }
    if (options.extensions) {
      return [path19.posix.join(directory, `**/*.${getExtensions(options.extensions)}`)];
    }
    return [path19.posix.join(directory, "**")];
  };
  module3.exports = async (input, options) => {
    options = {
      cwd: process.cwd(),
      ...options
    };
    if (typeof options.cwd !== "string") {
      throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``);
    }
    const globs = await Promise.all([].concat(input).map(async (x) => {
      const isDirectory = await pathType.isDirectory(getPath(x, options.cwd));
      return isDirectory ? getGlob(x, options) : x;
    }));
    return [].concat.apply([], globs);
  };
  module3.exports.sync = (input, options) => {
    options = {
      cwd: process.cwd(),
      ...options
    };
    if (typeof options.cwd !== "string") {
      throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``);
    }
    const globs = [].concat(input).map((x) => pathType.isDirectorySync(getPath(x, options.cwd)) ? getGlob(x, options) : x);
    return [].concat.apply([], globs);
  };
});

// ../../node_modules/.pnpm/ignore@5.1.8/node_modules/ignore/index.js
var require_ignore = __commonJS((exports2, module3) => {
  function makeArray(subject) {
    return Array.isArray(subject) ? subject : [subject];
  }
  const EMPTY = "";
  const SPACE = " ";
  const ESCAPE = "\\";
  const REGEX_TEST_BLANK_LINE = /^\s+$/;
  const REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\!/;
  const REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\#/;
  const REGEX_SPLITALL_CRLF = /\r?\n/g;
  const REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/;
  const SLASH = "/";
  const KEY_IGNORE = typeof Symbol !== "undefined" ? Symbol.for("node-ignore") : "node-ignore";
  const define2 = (object, key, value) => Object.defineProperty(object, key, {value});
  const REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;
  const sanitizeRange = (range) => range.replace(REGEX_REGEXP_RANGE, (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0) ? match : EMPTY);
  const cleanRangeBackSlash = (slashes) => {
    const {length} = slashes;
    return slashes.slice(0, length - length % 2);
  };
  const REPLACERS = [
    [
      /\\?\s+$/,
      (match) => match.indexOf("\\") === 0 ? SPACE : EMPTY
    ],
    [
      /\\\s/g,
      () => SPACE
    ],
    [
      /[\\$.|*+(){^]/g,
      (match) => `\\${match}`
    ],
    [
      /(?!\\)\?/g,
      () => "[^/]"
    ],
    [
      /^\//,
      () => "^"
    ],
    [
      /\//g,
      () => "\\/"
    ],
    [
      /^\^*\\\*\\\*\\\//,
      () => "^(?:.*\\/)?"
    ],
    [
      /^(?=[^^])/,
      function startingReplacer() {
        return !/\/(?!$)/.test(this) ? "(?:^|\\/)" : "^";
      }
    ],
    [
      /\\\/\\\*\\\*(?=\\\/|$)/g,
      (_2, index, str) => index + 6 < str.length ? "(?:\\/[^\\/]+)*" : "\\/.+"
    ],
    [
      /(^|[^\\]+)\\\*(?=.+)/g,
      (_2, p1) => `${p1}[^\\/]*`
    ],
    [
      /\\\\\\(?=[$.|*+(){^])/g,
      () => ESCAPE
    ],
    [
      /\\\\/g,
      () => ESCAPE
    ],
    [
      /(\\)?\[([^\]/]*?)(\\*)($|\])/g,
      (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE ? `\\[${range}${cleanRangeBackSlash(endEscape)}${close}` : close === "]" ? endEscape.length % 2 === 0 ? `[${sanitizeRange(range)}${endEscape}]` : "[]" : "[]"
    ],
    [
      /(?:[^*])$/,
      (match) => /\/$/.test(match) ? `${match}$` : `${match}(?=$|\\/$)`
    ],
    [
      /(\^|\\\/)?\\\*$/,
      (_2, p1) => {
        const prefix = p1 ? `${p1}[^/]+` : "[^/]*";
        return `${prefix}(?=$|\\/$)`;
      }
    ]
  ];
  const regexCache = Object.create(null);
  const makeRegex = (pattern, negative, ignorecase) => {
    const r = regexCache[pattern];
    if (r) {
      return r;
    }
    const source = REPLACERS.reduce((prev, current) => prev.replace(current[0], current[1].bind(pattern)), pattern);
    return regexCache[pattern] = ignorecase ? new RegExp(source, "i") : new RegExp(source);
  };
  const isString = (subject) => typeof subject === "string";
  const checkPattern = (pattern) => pattern && isString(pattern) && !REGEX_TEST_BLANK_LINE.test(pattern) && pattern.indexOf("#") !== 0;
  const splitPattern = (pattern) => pattern.split(REGEX_SPLITALL_CRLF);
  class IgnoreRule {
    constructor(origin, pattern, negative, regex) {
      this.origin = origin;
      this.pattern = pattern;
      this.negative = negative;
      this.regex = regex;
    }
  }
  const createRule = (pattern, ignorecase) => {
    const origin = pattern;
    let negative = false;
    if (pattern.indexOf("!") === 0) {
      negative = true;
      pattern = pattern.substr(1);
    }
    pattern = pattern.replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, "!").replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, "#");
    const regex = makeRegex(pattern, negative, ignorecase);
    return new IgnoreRule(origin, pattern, negative, regex);
  };
  const throwError = (message, Ctor) => {
    throw new Ctor(message);
  };
  const checkPath = (path19, originalPath, doThrow) => {
    if (!isString(path19)) {
      return doThrow(`path must be a string, but got \`${originalPath}\``, TypeError);
    }
    if (!path19) {
      return doThrow(`path must not be empty`, TypeError);
    }
    if (checkPath.isNotRelative(path19)) {
      const r = "`path.relative()`d";
      return doThrow(`path should be a ${r} string, but got "${originalPath}"`, RangeError);
    }
    return true;
  };
  const isNotRelative = (path19) => REGEX_TEST_INVALID_PATH.test(path19);
  checkPath.isNotRelative = isNotRelative;
  checkPath.convert = (p) => p;
  class Ignore {
    constructor({
      ignorecase = true
    } = {}) {
      this._rules = [];
      this._ignorecase = ignorecase;
      define2(this, KEY_IGNORE, true);
      this._initCache();
    }
    _initCache() {
      this._ignoreCache = Object.create(null);
      this._testCache = Object.create(null);
    }
    _addPattern(pattern) {
      if (pattern && pattern[KEY_IGNORE]) {
        this._rules = this._rules.concat(pattern._rules);
        this._added = true;
        return;
      }
      if (checkPattern(pattern)) {
        const rule = createRule(pattern, this._ignorecase);
        this._added = true;
        this._rules.push(rule);
      }
    }
    add(pattern) {
      this._added = false;
      makeArray(isString(pattern) ? splitPattern(pattern) : pattern).forEach(this._addPattern, this);
      if (this._added) {
        this._initCache();
      }
      return this;
    }
    addPattern(pattern) {
      return this.add(pattern);
    }
    _testOne(path19, checkUnignored) {
      let ignored = false;
      let unignored = false;
      this._rules.forEach((rule) => {
        const {negative} = rule;
        if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) {
          return;
        }
        const matched = rule.regex.test(path19);
        if (matched) {
          ignored = !negative;
          unignored = negative;
        }
      });
      return {
        ignored,
        unignored
      };
    }
    _test(originalPath, cache, checkUnignored, slices) {
      const path19 = originalPath && checkPath.convert(originalPath);
      checkPath(path19, originalPath, throwError);
      return this._t(path19, cache, checkUnignored, slices);
    }
    _t(path19, cache, checkUnignored, slices) {
      if (path19 in cache) {
        return cache[path19];
      }
      if (!slices) {
        slices = path19.split(SLASH);
      }
      slices.pop();
      if (!slices.length) {
        return cache[path19] = this._testOne(path19, checkUnignored);
      }
      const parent = this._t(slices.join(SLASH) + SLASH, cache, checkUnignored, slices);
      return cache[path19] = parent.ignored ? parent : this._testOne(path19, checkUnignored);
    }
    ignores(path19) {
      return this._test(path19, this._ignoreCache, false).ignored;
    }
    createFilter() {
      return (path19) => !this.ignores(path19);
    }
    filter(paths) {
      return makeArray(paths).filter(this.createFilter());
    }
    test(path19) {
      return this._test(path19, this._testCache, true);
    }
  }
  const factory = (options) => new Ignore(options);
  const returnFalse = () => false;
  const isPathValid = (path19) => checkPath(path19 && checkPath.convert(path19), path19, returnFalse);
  factory.isPathValid = isPathValid;
  factory.default = factory;
  module3.exports = factory;
  if (typeof process !== "undefined" && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === "win32")) {
    const makePosix = (str) => /^\\\\\?\\/.test(str) || /["<>|\u0000-\u001F]+/u.test(str) ? str : str.replace(/\\/g, "/");
    checkPath.convert = makePosix;
    const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
    checkPath.isNotRelative = (path19) => REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path19) || isNotRelative(path19);
  }
});

// ../../node_modules/.pnpm/slash@3.0.0/node_modules/slash/index.js
var require_slash = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (path19) => {
    const isExtendedLengthPath = /^\\\\\?\\/.test(path19);
    const hasNonAscii = /[^\u0000-\u0080]+/.test(path19);
    if (isExtendedLengthPath || hasNonAscii) {
      return path19;
    }
    return path19.replace(/\\/g, "/");
  };
});

// ../../node_modules/.pnpm/globby@11.0.1/node_modules/globby/gitignore.js
var require_gitignore = __commonJS((exports2, module3) => {
  "use strict";
  const {promisify: promisify3} = require("util");
  const fs17 = require("fs");
  const path19 = require("path");
  const fastGlob = require_out4();
  const gitIgnore = require_ignore();
  const slash = require_slash();
  const DEFAULT_IGNORE = [
    "**/node_modules/**",
    "**/flow-typed/**",
    "**/coverage/**",
    "**/.git"
  ];
  const readFileP = promisify3(fs17.readFile);
  const mapGitIgnorePatternTo = (base) => (ignore) => {
    if (ignore.startsWith("!")) {
      return "!" + path19.posix.join(base, ignore.slice(1));
    }
    return path19.posix.join(base, ignore);
  };
  const parseGitIgnore = (content, options) => {
    const base = slash(path19.relative(options.cwd, path19.dirname(options.fileName)));
    return content.split(/\r?\n/).filter(Boolean).filter((line) => !line.startsWith("#")).map(mapGitIgnorePatternTo(base));
  };
  const reduceIgnore = (files) => {
    return files.reduce((ignores, file) => {
      ignores.add(parseGitIgnore(file.content, {
        cwd: file.cwd,
        fileName: file.filePath
      }));
      return ignores;
    }, gitIgnore());
  };
  const ensureAbsolutePathForCwd = (cwd, p) => {
    cwd = slash(cwd);
    if (path19.isAbsolute(p)) {
      if (p.startsWith(cwd)) {
        return p;
      }
      throw new Error(`Path ${p} is not in cwd ${cwd}`);
    }
    return path19.join(cwd, p);
  };
  const getIsIgnoredPredecate = (ignores, cwd) => {
    return (p) => ignores.ignores(slash(path19.relative(cwd, ensureAbsolutePathForCwd(cwd, p))));
  };
  const getFile = async (file, cwd) => {
    const filePath = path19.join(cwd, file);
    const content = await readFileP(filePath, "utf8");
    return {
      cwd,
      filePath,
      content
    };
  };
  const getFileSync = (file, cwd) => {
    const filePath = path19.join(cwd, file);
    const content = fs17.readFileSync(filePath, "utf8");
    return {
      cwd,
      filePath,
      content
    };
  };
  const normalizeOptions = ({
    ignore = [],
    cwd = slash(process.cwd())
  } = {}) => {
    return {ignore, cwd};
  };
  module3.exports = async (options) => {
    options = normalizeOptions(options);
    const paths = await fastGlob("**/.gitignore", {
      ignore: DEFAULT_IGNORE.concat(options.ignore),
      cwd: options.cwd
    });
    const files = await Promise.all(paths.map((file) => getFile(file, options.cwd)));
    const ignores = reduceIgnore(files);
    return getIsIgnoredPredecate(ignores, options.cwd);
  };
  module3.exports.sync = (options) => {
    options = normalizeOptions(options);
    const paths = fastGlob.sync("**/.gitignore", {
      ignore: DEFAULT_IGNORE.concat(options.ignore),
      cwd: options.cwd
    });
    const files = paths.map((file) => getFileSync(file, options.cwd));
    const ignores = reduceIgnore(files);
    return getIsIgnoredPredecate(ignores, options.cwd);
  };
});

// ../../node_modules/.pnpm/globby@11.0.1/node_modules/globby/stream-utils.js
var require_stream_utils = __commonJS((exports2, module3) => {
  "use strict";
  const {Transform} = require("stream");
  class ObjectTransform extends Transform {
    constructor() {
      super({
        objectMode: true
      });
    }
  }
  class FilterStream extends ObjectTransform {
    constructor(filter) {
      super();
      this._filter = filter;
    }
    _transform(data, encoding, callback) {
      if (this._filter(data)) {
        this.push(data);
      }
      callback();
    }
  }
  class UniqueStream extends ObjectTransform {
    constructor() {
      super();
      this._pushed = new Set();
    }
    _transform(data, encoding, callback) {
      if (!this._pushed.has(data)) {
        this.push(data);
        this._pushed.add(data);
      }
      callback();
    }
  }
  module3.exports = {
    FilterStream,
    UniqueStream
  };
});

// ../../node_modules/.pnpm/globby@11.0.1/node_modules/globby/index.js
var require_globby = __commonJS((exports2, module3) => {
  "use strict";
  const fs17 = require("fs");
  const arrayUnion = require_array_union();
  const merge2 = require_merge2();
  const fastGlob = require_out4();
  const dirGlob = require_dir_glob();
  const gitignore = require_gitignore();
  const {FilterStream, UniqueStream} = require_stream_utils();
  const DEFAULT_FILTER = () => false;
  const isNegative = (pattern) => pattern[0] === "!";
  const assertPatternsInput = (patterns) => {
    if (!patterns.every((pattern) => typeof pattern === "string")) {
      throw new TypeError("Patterns must be a string or an array of strings");
    }
  };
  const checkCwdOption = (options = {}) => {
    if (!options.cwd) {
      return;
    }
    let stat;
    try {
      stat = fs17.statSync(options.cwd);
    } catch (_2) {
      return;
    }
    if (!stat.isDirectory()) {
      throw new Error("The `cwd` option must be a path to a directory");
    }
  };
  const getPathString = (p) => p.stats instanceof fs17.Stats ? p.path : p;
  const generateGlobTasks = (patterns, taskOptions) => {
    patterns = arrayUnion([].concat(patterns));
    assertPatternsInput(patterns);
    checkCwdOption(taskOptions);
    const globTasks = [];
    taskOptions = {
      ignore: [],
      expandDirectories: true,
      ...taskOptions
    };
    for (const [index, pattern] of patterns.entries()) {
      if (isNegative(pattern)) {
        continue;
      }
      const ignore = patterns.slice(index).filter(isNegative).map((pattern2) => pattern2.slice(1));
      const options = {
        ...taskOptions,
        ignore: taskOptions.ignore.concat(ignore)
      };
      globTasks.push({pattern, options});
    }
    return globTasks;
  };
  const globDirs = (task, fn) => {
    let options = {};
    if (task.options.cwd) {
      options.cwd = task.options.cwd;
    }
    if (Array.isArray(task.options.expandDirectories)) {
      options = {
        ...options,
        files: task.options.expandDirectories
      };
    } else if (typeof task.options.expandDirectories === "object") {
      options = {
        ...options,
        ...task.options.expandDirectories
      };
    }
    return fn(task.pattern, options);
  };
  const getPattern = (task, fn) => task.options.expandDirectories ? globDirs(task, fn) : [task.pattern];
  const getFilterSync = (options) => {
    return options && options.gitignore ? gitignore.sync({cwd: options.cwd, ignore: options.ignore}) : DEFAULT_FILTER;
  };
  const globToTask = (task) => (glob) => {
    const {options} = task;
    if (options.ignore && Array.isArray(options.ignore) && options.expandDirectories) {
      options.ignore = dirGlob.sync(options.ignore);
    }
    return {
      pattern: glob,
      options
    };
  };
  module3.exports = async (patterns, options) => {
    const globTasks = generateGlobTasks(patterns, options);
    const getFilter = async () => {
      return options && options.gitignore ? gitignore({cwd: options.cwd, ignore: options.ignore}) : DEFAULT_FILTER;
    };
    const getTasks = async () => {
      const tasks2 = await Promise.all(globTasks.map(async (task) => {
        const globs = await getPattern(task, dirGlob);
        return Promise.all(globs.map(globToTask(task)));
      }));
      return arrayUnion(...tasks2);
    };
    const [filter, tasks] = await Promise.all([getFilter(), getTasks()]);
    const paths = await Promise.all(tasks.map((task) => fastGlob(task.pattern, task.options)));
    return arrayUnion(...paths).filter((path_) => !filter(getPathString(path_)));
  };
  module3.exports.sync = (patterns, options) => {
    const globTasks = generateGlobTasks(patterns, options);
    const tasks = globTasks.reduce((tasks2, task) => {
      const newTask = getPattern(task, dirGlob.sync).map(globToTask(task));
      return tasks2.concat(newTask);
    }, []);
    const filter = getFilterSync(options);
    return tasks.reduce((matches, task) => arrayUnion(matches, fastGlob.sync(task.pattern, task.options)), []).filter((path_) => !filter(path_));
  };
  module3.exports.stream = (patterns, options) => {
    const globTasks = generateGlobTasks(patterns, options);
    const tasks = globTasks.reduce((tasks2, task) => {
      const newTask = getPattern(task, dirGlob.sync).map(globToTask(task));
      return tasks2.concat(newTask);
    }, []);
    const filter = getFilterSync(options);
    const filterStream = new FilterStream((p) => !filter(p));
    const uniqueStream = new UniqueStream();
    return merge2(tasks.map((task) => fastGlob.stream(task.pattern, task.options))).pipe(filterStream).pipe(uniqueStream);
  };
  module3.exports.generateGlobTasks = generateGlobTasks;
  module3.exports.hasMagic = (patterns, options) => [].concat(patterns).some((pattern) => fastGlob.isDynamicPattern(pattern, options));
  module3.exports.gitignore = gitignore;
});

// ../../node_modules/.pnpm/graceful-fs@4.2.4/node_modules/graceful-fs/polyfills.js
var require_polyfills = __commonJS((exports2, module3) => {
  var constants = require("constants");
  var origCwd = process.cwd;
  var cwd = null;
  var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
  process.cwd = function() {
    if (!cwd)
      cwd = origCwd.call(process);
    return cwd;
  };
  try {
    process.cwd();
  } catch (er) {
  }
  var chdir = process.chdir;
  process.chdir = function(d) {
    cwd = null;
    chdir.call(process, d);
  };
  module3.exports = patch;
  function patch(fs17) {
    if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
      patchLchmod(fs17);
    }
    if (!fs17.lutimes) {
      patchLutimes(fs17);
    }
    fs17.chown = chownFix(fs17.chown);
    fs17.fchown = chownFix(fs17.fchown);
    fs17.lchown = chownFix(fs17.lchown);
    fs17.chmod = chmodFix(fs17.chmod);
    fs17.fchmod = chmodFix(fs17.fchmod);
    fs17.lchmod = chmodFix(fs17.lchmod);
    fs17.chownSync = chownFixSync(fs17.chownSync);
    fs17.fchownSync = chownFixSync(fs17.fchownSync);
    fs17.lchownSync = chownFixSync(fs17.lchownSync);
    fs17.chmodSync = chmodFixSync(fs17.chmodSync);
    fs17.fchmodSync = chmodFixSync(fs17.fchmodSync);
    fs17.lchmodSync = chmodFixSync(fs17.lchmodSync);
    fs17.stat = statFix(fs17.stat);
    fs17.fstat = statFix(fs17.fstat);
    fs17.lstat = statFix(fs17.lstat);
    fs17.statSync = statFixSync(fs17.statSync);
    fs17.fstatSync = statFixSync(fs17.fstatSync);
    fs17.lstatSync = statFixSync(fs17.lstatSync);
    if (!fs17.lchmod) {
      fs17.lchmod = function(path19, mode, cb) {
        if (cb)
          process.nextTick(cb);
      };
      fs17.lchmodSync = function() {
      };
    }
    if (!fs17.lchown) {
      fs17.lchown = function(path19, uid, gid, cb) {
        if (cb)
          process.nextTick(cb);
      };
      fs17.lchownSync = function() {
      };
    }
    if (platform === "win32") {
      fs17.rename = function(fs$rename) {
        return function(from, to, cb) {
          var start = Date.now();
          var backoff = 0;
          fs$rename(from, to, function CB(er) {
            if (er && (er.code === "EACCES" || er.code === "EPERM") && Date.now() - start < 6e4) {
              setTimeout(function() {
                fs17.stat(to, function(stater, st) {
                  if (stater && stater.code === "ENOENT")
                    fs$rename(from, to, CB);
                  else
                    cb(er);
                });
              }, backoff);
              if (backoff < 100)
                backoff += 10;
              return;
            }
            if (cb)
              cb(er);
          });
        };
      }(fs17.rename);
    }
    fs17.read = function(fs$read) {
      function read(fd, buffer, offset, length, position, callback_) {
        var callback;
        if (callback_ && typeof callback_ === "function") {
          var eagCounter = 0;
          callback = function(er, _2, __) {
            if (er && er.code === "EAGAIN" && eagCounter < 10) {
              eagCounter++;
              return fs$read.call(fs17, fd, buffer, offset, length, position, callback);
            }
            callback_.apply(this, arguments);
          };
        }
        return fs$read.call(fs17, fd, buffer, offset, length, position, callback);
      }
      read.__proto__ = fs$read;
      return read;
    }(fs17.read);
    fs17.readSync = function(fs$readSync) {
      return function(fd, buffer, offset, length, position) {
        var eagCounter = 0;
        while (true) {
          try {
            return fs$readSync.call(fs17, fd, buffer, offset, length, position);
          } catch (er) {
            if (er.code === "EAGAIN" && eagCounter < 10) {
              eagCounter++;
              continue;
            }
            throw er;
          }
        }
      };
    }(fs17.readSync);
    function patchLchmod(fs18) {
      fs18.lchmod = function(path19, mode, callback) {
        fs18.open(path19, constants.O_WRONLY | constants.O_SYMLINK, mode, function(err, fd) {
          if (err) {
            if (callback)
              callback(err);
            return;
          }
          fs18.fchmod(fd, mode, function(err2) {
            fs18.close(fd, function(err22) {
              if (callback)
                callback(err2 || err22);
            });
          });
        });
      };
      fs18.lchmodSync = function(path19, mode) {
        var fd = fs18.openSync(path19, constants.O_WRONLY | constants.O_SYMLINK, mode);
        var threw = true;
        var ret;
        try {
          ret = fs18.fchmodSync(fd, mode);
          threw = false;
        } finally {
          if (threw) {
            try {
              fs18.closeSync(fd);
            } catch (er) {
            }
          } else {
            fs18.closeSync(fd);
          }
        }
        return ret;
      };
    }
    function patchLutimes(fs18) {
      if (constants.hasOwnProperty("O_SYMLINK")) {
        fs18.lutimes = function(path19, at, mt, cb) {
          fs18.open(path19, constants.O_SYMLINK, function(er, fd) {
            if (er) {
              if (cb)
                cb(er);
              return;
            }
            fs18.futimes(fd, at, mt, function(er2) {
              fs18.close(fd, function(er22) {
                if (cb)
                  cb(er2 || er22);
              });
            });
          });
        };
        fs18.lutimesSync = function(path19, at, mt) {
          var fd = fs18.openSync(path19, constants.O_SYMLINK);
          var ret;
          var threw = true;
          try {
            ret = fs18.futimesSync(fd, at, mt);
            threw = false;
          } finally {
            if (threw) {
              try {
                fs18.closeSync(fd);
              } catch (er) {
              }
            } else {
              fs18.closeSync(fd);
            }
          }
          return ret;
        };
      } else {
        fs18.lutimes = function(_a, _b, _c, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs18.lutimesSync = function() {
        };
      }
    }
    function chmodFix(orig) {
      if (!orig)
        return orig;
      return function(target, mode, cb) {
        return orig.call(fs17, target, mode, function(er) {
          if (chownErOk(er))
            er = null;
          if (cb)
            cb.apply(this, arguments);
        });
      };
    }
    function chmodFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, mode) {
        try {
          return orig.call(fs17, target, mode);
        } catch (er) {
          if (!chownErOk(er))
            throw er;
        }
      };
    }
    function chownFix(orig) {
      if (!orig)
        return orig;
      return function(target, uid, gid, cb) {
        return orig.call(fs17, target, uid, gid, function(er) {
          if (chownErOk(er))
            er = null;
          if (cb)
            cb.apply(this, arguments);
        });
      };
    }
    function chownFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, uid, gid) {
        try {
          return orig.call(fs17, target, uid, gid);
        } catch (er) {
          if (!chownErOk(er))
            throw er;
        }
      };
    }
    function statFix(orig) {
      if (!orig)
        return orig;
      return function(target, options, cb) {
        if (typeof options === "function") {
          cb = options;
          options = null;
        }
        function callback(er, stats) {
          if (stats) {
            if (stats.uid < 0)
              stats.uid += 4294967296;
            if (stats.gid < 0)
              stats.gid += 4294967296;
          }
          if (cb)
            cb.apply(this, arguments);
        }
        return options ? orig.call(fs17, target, options, callback) : orig.call(fs17, target, callback);
      };
    }
    function statFixSync(orig) {
      if (!orig)
        return orig;
      return function(target, options) {
        var stats = options ? orig.call(fs17, target, options) : orig.call(fs17, target);
        if (stats.uid < 0)
          stats.uid += 4294967296;
        if (stats.gid < 0)
          stats.gid += 4294967296;
        return stats;
      };
    }
    function chownErOk(er) {
      if (!er)
        return true;
      if (er.code === "ENOSYS")
        return true;
      var nonroot = !process.getuid || process.getuid() !== 0;
      if (nonroot) {
        if (er.code === "EINVAL" || er.code === "EPERM")
          return true;
      }
      return false;
    }
  }
});

// ../../node_modules/.pnpm/graceful-fs@4.2.4/node_modules/graceful-fs/legacy-streams.js
var require_legacy_streams = __commonJS((exports2, module3) => {
  var Stream = require("stream").Stream;
  module3.exports = legacy;
  function legacy(fs17) {
    return {
      ReadStream,
      WriteStream
    };
    function ReadStream(path19, options) {
      if (!(this instanceof ReadStream))
        return new ReadStream(path19, options);
      Stream.call(this);
      var self2 = this;
      this.path = path19;
      this.fd = null;
      this.readable = true;
      this.paused = false;
      this.flags = "r";
      this.mode = 438;
      this.bufferSize = 64 * 1024;
      options = options || {};
      var keys = Object.keys(options);
      for (var index = 0, length = keys.length; index < length; index++) {
        var key = keys[index];
        this[key] = options[key];
      }
      if (this.encoding)
        this.setEncoding(this.encoding);
      if (this.start !== void 0) {
        if (typeof this.start !== "number") {
          throw TypeError("start must be a Number");
        }
        if (this.end === void 0) {
          this.end = Infinity;
        } else if (typeof this.end !== "number") {
          throw TypeError("end must be a Number");
        }
        if (this.start > this.end) {
          throw new Error("start must be <= end");
        }
        this.pos = this.start;
      }
      if (this.fd !== null) {
        process.nextTick(function() {
          self2._read();
        });
        return;
      }
      fs17.open(this.path, this.flags, this.mode, function(err, fd) {
        if (err) {
          self2.emit("error", err);
          self2.readable = false;
          return;
        }
        self2.fd = fd;
        self2.emit("open", fd);
        self2._read();
      });
    }
    function WriteStream(path19, options) {
      if (!(this instanceof WriteStream))
        return new WriteStream(path19, options);
      Stream.call(this);
      this.path = path19;
      this.fd = null;
      this.writable = true;
      this.flags = "w";
      this.encoding = "binary";
      this.mode = 438;
      this.bytesWritten = 0;
      options = options || {};
      var keys = Object.keys(options);
      for (var index = 0, length = keys.length; index < length; index++) {
        var key = keys[index];
        this[key] = options[key];
      }
      if (this.start !== void 0) {
        if (typeof this.start !== "number") {
          throw TypeError("start must be a Number");
        }
        if (this.start < 0) {
          throw new Error("start must be >= zero");
        }
        this.pos = this.start;
      }
      this.busy = false;
      this._queue = [];
      if (this.fd === null) {
        this._open = fs17.open;
        this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
        this.flush();
      }
    }
  }
});

// ../../node_modules/.pnpm/graceful-fs@4.2.4/node_modules/graceful-fs/clone.js
var require_clone = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = clone;
  function clone(obj) {
    if (obj === null || typeof obj !== "object")
      return obj;
    if (obj instanceof Object)
      var copy = {__proto__: obj.__proto__};
    else
      var copy = Object.create(null);
    Object.getOwnPropertyNames(obj).forEach(function(key) {
      Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
    });
    return copy;
  }
});

// ../../node_modules/.pnpm/graceful-fs@4.2.4/node_modules/graceful-fs/graceful-fs.js
var require_graceful_fs = __commonJS((exports2, module3) => {
  var fs17 = require("fs");
  var polyfills = require_polyfills();
  var legacy = require_legacy_streams();
  var clone = require_clone();
  var util4 = require("util");
  var gracefulQueue;
  var previousSymbol;
  if (typeof Symbol === "function" && typeof Symbol.for === "function") {
    gracefulQueue = Symbol.for("graceful-fs.queue");
    previousSymbol = Symbol.for("graceful-fs.previous");
  } else {
    gracefulQueue = "___graceful-fs.queue";
    previousSymbol = "___graceful-fs.previous";
  }
  function noop() {
  }
  function publishQueue(context, queue2) {
    Object.defineProperty(context, gracefulQueue, {
      get: function() {
        return queue2;
      }
    });
  }
  var debug3 = noop;
  if (util4.debuglog)
    debug3 = util4.debuglog("gfs4");
  else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
    debug3 = function() {
      var m = util4.format.apply(util4, arguments);
      m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
      console.error(m);
    };
  if (!fs17[gracefulQueue]) {
    var queue = global[gracefulQueue] || [];
    publishQueue(fs17, queue);
    fs17.close = function(fs$close) {
      function close(fd, cb) {
        return fs$close.call(fs17, fd, function(err) {
          if (!err) {
            retry();
          }
          if (typeof cb === "function")
            cb.apply(this, arguments);
        });
      }
      Object.defineProperty(close, previousSymbol, {
        value: fs$close
      });
      return close;
    }(fs17.close);
    fs17.closeSync = function(fs$closeSync) {
      function closeSync(fd) {
        fs$closeSync.apply(fs17, arguments);
        retry();
      }
      Object.defineProperty(closeSync, previousSymbol, {
        value: fs$closeSync
      });
      return closeSync;
    }(fs17.closeSync);
    if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
      process.on("exit", function() {
        debug3(fs17[gracefulQueue]);
        require("assert").equal(fs17[gracefulQueue].length, 0);
      });
    }
  }
  if (!global[gracefulQueue]) {
    publishQueue(global, fs17[gracefulQueue]);
  }
  module3.exports = patch(clone(fs17));
  if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs17.__patched) {
    module3.exports = patch(fs17);
    fs17.__patched = true;
  }
  function patch(fs18) {
    polyfills(fs18);
    fs18.gracefulify = patch;
    fs18.createReadStream = createReadStream;
    fs18.createWriteStream = createWriteStream;
    var fs$readFile = fs18.readFile;
    fs18.readFile = readFile2;
    function readFile2(path19, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      return go$readFile(path19, options, cb);
      function go$readFile(path20, options2, cb2) {
        return fs$readFile(path20, options2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$readFile, [path20, options2, cb2]]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
            retry();
          }
        });
      }
    }
    var fs$writeFile = fs18.writeFile;
    fs18.writeFile = writeFile;
    function writeFile(path19, data, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      return go$writeFile(path19, data, options, cb);
      function go$writeFile(path20, data2, options2, cb2) {
        return fs$writeFile(path20, data2, options2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$writeFile, [path20, data2, options2, cb2]]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
            retry();
          }
        });
      }
    }
    var fs$appendFile = fs18.appendFile;
    if (fs$appendFile)
      fs18.appendFile = appendFile;
    function appendFile(path19, data, options, cb) {
      if (typeof options === "function")
        cb = options, options = null;
      return go$appendFile(path19, data, options, cb);
      function go$appendFile(path20, data2, options2, cb2) {
        return fs$appendFile(path20, data2, options2, function(err) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$appendFile, [path20, data2, options2, cb2]]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
            retry();
          }
        });
      }
    }
    var fs$readdir = fs18.readdir;
    fs18.readdir = readdir;
    function readdir(path19, options, cb) {
      var args2 = [path19];
      if (typeof options !== "function") {
        args2.push(options);
      } else {
        cb = options;
      }
      args2.push(go$readdir$cb);
      return go$readdir(args2);
      function go$readdir$cb(err, files) {
        if (files && files.sort)
          files.sort();
        if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
          enqueue([go$readdir, [args2]]);
        else {
          if (typeof cb === "function")
            cb.apply(this, arguments);
          retry();
        }
      }
    }
    function go$readdir(args2) {
      return fs$readdir.apply(fs18, args2);
    }
    if (process.version.substr(0, 4) === "v0.8") {
      var legStreams = legacy(fs18);
      ReadStream = legStreams.ReadStream;
      WriteStream = legStreams.WriteStream;
    }
    var fs$ReadStream = fs18.ReadStream;
    if (fs$ReadStream) {
      ReadStream.prototype = Object.create(fs$ReadStream.prototype);
      ReadStream.prototype.open = ReadStream$open;
    }
    var fs$WriteStream = fs18.WriteStream;
    if (fs$WriteStream) {
      WriteStream.prototype = Object.create(fs$WriteStream.prototype);
      WriteStream.prototype.open = WriteStream$open;
    }
    Object.defineProperty(fs18, "ReadStream", {
      get: function() {
        return ReadStream;
      },
      set: function(val) {
        ReadStream = val;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(fs18, "WriteStream", {
      get: function() {
        return WriteStream;
      },
      set: function(val) {
        WriteStream = val;
      },
      enumerable: true,
      configurable: true
    });
    var FileReadStream = ReadStream;
    Object.defineProperty(fs18, "FileReadStream", {
      get: function() {
        return FileReadStream;
      },
      set: function(val) {
        FileReadStream = val;
      },
      enumerable: true,
      configurable: true
    });
    var FileWriteStream = WriteStream;
    Object.defineProperty(fs18, "FileWriteStream", {
      get: function() {
        return FileWriteStream;
      },
      set: function(val) {
        FileWriteStream = val;
      },
      enumerable: true,
      configurable: true
    });
    function ReadStream(path19, options) {
      if (this instanceof ReadStream)
        return fs$ReadStream.apply(this, arguments), this;
      else
        return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
    }
    function ReadStream$open() {
      var that = this;
      open3(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          if (that.autoClose)
            that.destroy();
          that.emit("error", err);
        } else {
          that.fd = fd;
          that.emit("open", fd);
          that.read();
        }
      });
    }
    function WriteStream(path19, options) {
      if (this instanceof WriteStream)
        return fs$WriteStream.apply(this, arguments), this;
      else
        return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
    }
    function WriteStream$open() {
      var that = this;
      open3(that.path, that.flags, that.mode, function(err, fd) {
        if (err) {
          that.destroy();
          that.emit("error", err);
        } else {
          that.fd = fd;
          that.emit("open", fd);
        }
      });
    }
    function createReadStream(path19, options) {
      return new fs18.ReadStream(path19, options);
    }
    function createWriteStream(path19, options) {
      return new fs18.WriteStream(path19, options);
    }
    var fs$open = fs18.open;
    fs18.open = open3;
    function open3(path19, flags, mode, cb) {
      if (typeof mode === "function")
        cb = mode, mode = null;
      return go$open(path19, flags, mode, cb);
      function go$open(path20, flags2, mode2, cb2) {
        return fs$open(path20, flags2, mode2, function(err, fd) {
          if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
            enqueue([go$open, [path20, flags2, mode2, cb2]]);
          else {
            if (typeof cb2 === "function")
              cb2.apply(this, arguments);
            retry();
          }
        });
      }
    }
    return fs18;
  }
  function enqueue(elem) {
    debug3("ENQUEUE", elem[0].name, elem[1]);
    fs17[gracefulQueue].push(elem);
  }
  function retry() {
    var elem = fs17[gracefulQueue].shift();
    if (elem) {
      debug3("RETRY", elem[0].name, elem[1]);
      elem[0].apply(null, elem[1]);
    }
  }
});

// ../../node_modules/.pnpm/is-path-cwd@2.2.0/node_modules/is-path-cwd/index.js
var require_is_path_cwd = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  module3.exports = (path_) => {
    let cwd = process.cwd();
    path_ = path19.resolve(path_);
    if (process.platform === "win32") {
      cwd = cwd.toLowerCase();
      path_ = path_.toLowerCase();
    }
    return path_ === cwd;
  };
});

// ../../node_modules/.pnpm/is-path-inside@3.0.2/node_modules/is-path-inside/index.js
var require_is_path_inside = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  module3.exports = (childPath, parentPath) => {
    childPath = path19.resolve(childPath);
    parentPath = path19.resolve(parentPath);
    if (process.platform === "win32") {
      childPath = childPath.toLowerCase();
      parentPath = parentPath.toLowerCase();
    }
    if (childPath === parentPath) {
      return false;
    }
    childPath += path19.sep;
    parentPath += path19.sep;
    return childPath.startsWith(parentPath);
  };
});

// ../../node_modules/.pnpm/fs.realpath@1.0.0/node_modules/fs.realpath/old.js
var require_old = __commonJS((exports2) => {
  var pathModule = require("path");
  var isWindows = process.platform === "win32";
  var fs17 = require("fs");
  var DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);
  function rethrow() {
    var callback;
    if (DEBUG) {
      var backtrace = new Error();
      callback = debugCallback;
    } else
      callback = missingCallback;
    return callback;
    function debugCallback(err) {
      if (err) {
        backtrace.message = err.message;
        err = backtrace;
        missingCallback(err);
      }
    }
    function missingCallback(err) {
      if (err) {
        if (process.throwDeprecation)
          throw err;
        else if (!process.noDeprecation) {
          var msg = "fs: missing callback " + (err.stack || err.message);
          if (process.traceDeprecation)
            console.trace(msg);
          else
            console.error(msg);
        }
      }
    }
  }
  function maybeCallback(cb) {
    return typeof cb === "function" ? cb : rethrow();
  }
  var normalize = pathModule.normalize;
  if (isWindows) {
    var nextPartRe = /(.*?)(?:[\/\\]+|$)/g;
  } else {
    var nextPartRe = /(.*?)(?:[\/]+|$)/g;
  }
  if (isWindows) {
    var splitRootRe = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
  } else {
    var splitRootRe = /^[\/]*/;
  }
  exports2.realpathSync = function realpathSync(p, cache) {
    p = pathModule.resolve(p);
    if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
      return cache[p];
    }
    var original = p, seenLinks = {}, knownHard = {};
    var pos;
    var current;
    var base;
    var previous;
    start();
    function start() {
      var m = splitRootRe.exec(p);
      pos = m[0].length;
      current = m[0];
      base = m[0];
      previous = "";
      if (isWindows && !knownHard[base]) {
        fs17.lstatSync(base);
        knownHard[base] = true;
      }
    }
    while (pos < p.length) {
      nextPartRe.lastIndex = pos;
      var result = nextPartRe.exec(p);
      previous = current;
      current += result[0];
      base = previous + result[1];
      pos = nextPartRe.lastIndex;
      if (knownHard[base] || cache && cache[base] === base) {
        continue;
      }
      var resolvedLink;
      if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
        resolvedLink = cache[base];
      } else {
        var stat = fs17.lstatSync(base);
        if (!stat.isSymbolicLink()) {
          knownHard[base] = true;
          if (cache)
            cache[base] = base;
          continue;
        }
        var linkTarget = null;
        if (!isWindows) {
          var id = stat.dev.toString(32) + ":" + stat.ino.toString(32);
          if (seenLinks.hasOwnProperty(id)) {
            linkTarget = seenLinks[id];
          }
        }
        if (linkTarget === null) {
          fs17.statSync(base);
          linkTarget = fs17.readlinkSync(base);
        }
        resolvedLink = pathModule.resolve(previous, linkTarget);
        if (cache)
          cache[base] = resolvedLink;
        if (!isWindows)
          seenLinks[id] = linkTarget;
      }
      p = pathModule.resolve(resolvedLink, p.slice(pos));
      start();
    }
    if (cache)
      cache[original] = p;
    return p;
  };
  exports2.realpath = function realpath(p, cache, cb) {
    if (typeof cb !== "function") {
      cb = maybeCallback(cache);
      cache = null;
    }
    p = pathModule.resolve(p);
    if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
      return process.nextTick(cb.bind(null, null, cache[p]));
    }
    var original = p, seenLinks = {}, knownHard = {};
    var pos;
    var current;
    var base;
    var previous;
    start();
    function start() {
      var m = splitRootRe.exec(p);
      pos = m[0].length;
      current = m[0];
      base = m[0];
      previous = "";
      if (isWindows && !knownHard[base]) {
        fs17.lstat(base, function(err) {
          if (err)
            return cb(err);
          knownHard[base] = true;
          LOOP();
        });
      } else {
        process.nextTick(LOOP);
      }
    }
    function LOOP() {
      if (pos >= p.length) {
        if (cache)
          cache[original] = p;
        return cb(null, p);
      }
      nextPartRe.lastIndex = pos;
      var result = nextPartRe.exec(p);
      previous = current;
      current += result[0];
      base = previous + result[1];
      pos = nextPartRe.lastIndex;
      if (knownHard[base] || cache && cache[base] === base) {
        return process.nextTick(LOOP);
      }
      if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
        return gotResolvedLink(cache[base]);
      }
      return fs17.lstat(base, gotStat);
    }
    function gotStat(err, stat) {
      if (err)
        return cb(err);
      if (!stat.isSymbolicLink()) {
        knownHard[base] = true;
        if (cache)
          cache[base] = base;
        return process.nextTick(LOOP);
      }
      if (!isWindows) {
        var id = stat.dev.toString(32) + ":" + stat.ino.toString(32);
        if (seenLinks.hasOwnProperty(id)) {
          return gotTarget(null, seenLinks[id], base);
        }
      }
      fs17.stat(base, function(err2) {
        if (err2)
          return cb(err2);
        fs17.readlink(base, function(err3, target) {
          if (!isWindows)
            seenLinks[id] = target;
          gotTarget(err3, target);
        });
      });
    }
    function gotTarget(err, target, base2) {
      if (err)
        return cb(err);
      var resolvedLink = pathModule.resolve(previous, target);
      if (cache)
        cache[base2] = resolvedLink;
      gotResolvedLink(resolvedLink);
    }
    function gotResolvedLink(resolvedLink) {
      p = pathModule.resolve(resolvedLink, p.slice(pos));
      start();
    }
  };
});

// ../../node_modules/.pnpm/fs.realpath@1.0.0/node_modules/fs.realpath/index.js
var require_fs5 = __commonJS((exports2, module3) => {
  module3.exports = realpath;
  realpath.realpath = realpath;
  realpath.sync = realpathSync;
  realpath.realpathSync = realpathSync;
  realpath.monkeypatch = monkeypatch;
  realpath.unmonkeypatch = unmonkeypatch;
  var fs17 = require("fs");
  var origRealpath = fs17.realpath;
  var origRealpathSync = fs17.realpathSync;
  var version = process.version;
  var ok = /^v[0-5]\./.test(version);
  var old = require_old();
  function newError(er) {
    return er && er.syscall === "realpath" && (er.code === "ELOOP" || er.code === "ENOMEM" || er.code === "ENAMETOOLONG");
  }
  function realpath(p, cache, cb) {
    if (ok) {
      return origRealpath(p, cache, cb);
    }
    if (typeof cache === "function") {
      cb = cache;
      cache = null;
    }
    origRealpath(p, cache, function(er, result) {
      if (newError(er)) {
        old.realpath(p, cache, cb);
      } else {
        cb(er, result);
      }
    });
  }
  function realpathSync(p, cache) {
    if (ok) {
      return origRealpathSync(p, cache);
    }
    try {
      return origRealpathSync(p, cache);
    } catch (er) {
      if (newError(er)) {
        return old.realpathSync(p, cache);
      } else {
        throw er;
      }
    }
  }
  function monkeypatch() {
    fs17.realpath = realpath;
    fs17.realpathSync = realpathSync;
  }
  function unmonkeypatch() {
    fs17.realpath = origRealpath;
    fs17.realpathSync = origRealpathSync;
  }
});

// ../../node_modules/.pnpm/concat-map@0.0.1/node_modules/concat-map/index.js
var require_concat_map = __commonJS((exports2, module3) => {
  module3.exports = function(xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
      var x = fn(xs[i], i);
      if (isArray(x))
        res.push.apply(res, x);
      else
        res.push(x);
    }
    return res;
  };
  var isArray = Array.isArray || function(xs) {
    return Object.prototype.toString.call(xs) === "[object Array]";
  };
});

// ../../node_modules/.pnpm/balanced-match@1.0.0/node_modules/balanced-match/index.js
var require_balanced_match = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = balanced;
  function balanced(a, b, str) {
    if (a instanceof RegExp)
      a = maybeMatch(a, str);
    if (b instanceof RegExp)
      b = maybeMatch(b, str);
    var r = range(a, b, str);
    return r && {
      start: r[0],
      end: r[1],
      pre: str.slice(0, r[0]),
      body: str.slice(r[0] + a.length, r[1]),
      post: str.slice(r[1] + b.length)
    };
  }
  function maybeMatch(reg, str) {
    var m = str.match(reg);
    return m ? m[0] : null;
  }
  balanced.range = range;
  function range(a, b, str) {
    var begs, beg, left, right, result;
    var ai = str.indexOf(a);
    var bi = str.indexOf(b, ai + 1);
    var i = ai;
    if (ai >= 0 && bi > 0) {
      begs = [];
      left = str.length;
      while (i >= 0 && !result) {
        if (i == ai) {
          begs.push(i);
          ai = str.indexOf(a, i + 1);
        } else if (begs.length == 1) {
          result = [begs.pop(), bi];
        } else {
          beg = begs.pop();
          if (beg < left) {
            left = beg;
            right = bi;
          }
          bi = str.indexOf(b, i + 1);
        }
        i = ai < bi && ai >= 0 ? ai : bi;
      }
      if (begs.length) {
        result = [left, right];
      }
    }
    return result;
  }
});

// ../../node_modules/.pnpm/brace-expansion@1.1.11/node_modules/brace-expansion/index.js
var require_brace_expansion = __commonJS((exports2, module3) => {
  var concatMap = require_concat_map();
  var balanced = require_balanced_match();
  module3.exports = expandTop;
  var escSlash = "\0SLASH" + Math.random() + "\0";
  var escOpen = "\0OPEN" + Math.random() + "\0";
  var escClose = "\0CLOSE" + Math.random() + "\0";
  var escComma = "\0COMMA" + Math.random() + "\0";
  var escPeriod = "\0PERIOD" + Math.random() + "\0";
  function numeric(str) {
    return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
  }
  function escapeBraces(str) {
    return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
  }
  function unescapeBraces(str) {
    return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
  }
  function parseCommaParts(str) {
    if (!str)
      return [""];
    var parts = [];
    var m = balanced("{", "}", str);
    if (!m)
      return str.split(",");
    var pre = m.pre;
    var body = m.body;
    var post = m.post;
    var p = pre.split(",");
    p[p.length - 1] += "{" + body + "}";
    var postParts = parseCommaParts(post);
    if (post.length) {
      p[p.length - 1] += postParts.shift();
      p.push.apply(p, postParts);
    }
    parts.push.apply(parts, p);
    return parts;
  }
  function expandTop(str) {
    if (!str)
      return [];
    if (str.substr(0, 2) === "{}") {
      str = "\\{\\}" + str.substr(2);
    }
    return expand(escapeBraces(str), true).map(unescapeBraces);
  }
  function embrace(str) {
    return "{" + str + "}";
  }
  function isPadded(el) {
    return /^-?0\d/.test(el);
  }
  function lte(i, y) {
    return i <= y;
  }
  function gte(i, y) {
    return i >= y;
  }
  function expand(str, isTop) {
    var expansions = [];
    var m = balanced("{", "}", str);
    if (!m || /\$$/.test(m.pre))
      return [str];
    var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
    var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
    var isSequence = isNumericSequence || isAlphaSequence;
    var isOptions = m.body.indexOf(",") >= 0;
    if (!isSequence && !isOptions) {
      if (m.post.match(/,.*\}/)) {
        str = m.pre + "{" + m.body + escClose + m.post;
        return expand(str);
      }
      return [str];
    }
    var n;
    if (isSequence) {
      n = m.body.split(/\.\./);
    } else {
      n = parseCommaParts(m.body);
      if (n.length === 1) {
        n = expand(n[0], false).map(embrace);
        if (n.length === 1) {
          var post = m.post.length ? expand(m.post, false) : [""];
          return post.map(function(p) {
            return m.pre + n[0] + p;
          });
        }
      }
    }
    var pre = m.pre;
    var post = m.post.length ? expand(m.post, false) : [""];
    var N;
    if (isSequence) {
      var x = numeric(n[0]);
      var y = numeric(n[1]);
      var width = Math.max(n[0].length, n[1].length);
      var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
      var test = lte;
      var reverse = y < x;
      if (reverse) {
        incr *= -1;
        test = gte;
      }
      var pad = n.some(isPadded);
      N = [];
      for (var i = x; test(i, y); i += incr) {
        var c;
        if (isAlphaSequence) {
          c = String.fromCharCode(i);
          if (c === "\\")
            c = "";
        } else {
          c = String(i);
          if (pad) {
            var need = width - c.length;
            if (need > 0) {
              var z = new Array(need + 1).join("0");
              if (i < 0)
                c = "-" + z + c.slice(1);
              else
                c = z + c;
            }
          }
        }
        N.push(c);
      }
    } else {
      N = concatMap(n, function(el) {
        return expand(el, false);
      });
    }
    for (var j = 0; j < N.length; j++) {
      for (var k = 0; k < post.length; k++) {
        var expansion = pre + N[j] + post[k];
        if (!isTop || isSequence || expansion)
          expansions.push(expansion);
      }
    }
    return expansions;
  }
});

// ../../node_modules/.pnpm/minimatch@3.0.4/node_modules/minimatch/minimatch.js
var require_minimatch = __commonJS((exports2, module3) => {
  module3.exports = minimatch;
  minimatch.Minimatch = Minimatch;
  var path19 = {sep: "/"};
  try {
    path19 = require("path");
  } catch (er) {
  }
  var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
  var expand = require_brace_expansion();
  var plTypes = {
    "!": {open: "(?:(?!(?:", close: "))[^/]*?)"},
    "?": {open: "(?:", close: ")?"},
    "+": {open: "(?:", close: ")+"},
    "*": {open: "(?:", close: ")*"},
    "@": {open: "(?:", close: ")"}
  };
  var qmark = "[^/]";
  var star = qmark + "*?";
  var twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
  var twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
  var reSpecials = charSet("().*{}+?[]^$\\!");
  function charSet(s) {
    return s.split("").reduce(function(set, c) {
      set[c] = true;
      return set;
    }, {});
  }
  var slashSplit = /\/+/;
  minimatch.filter = filter;
  function filter(pattern, options) {
    options = options || {};
    return function(p, i, list) {
      return minimatch(p, pattern, options);
    };
  }
  function ext(a, b) {
    a = a || {};
    b = b || {};
    var t = {};
    Object.keys(b).forEach(function(k) {
      t[k] = b[k];
    });
    Object.keys(a).forEach(function(k) {
      t[k] = a[k];
    });
    return t;
  }
  minimatch.defaults = function(def) {
    if (!def || !Object.keys(def).length)
      return minimatch;
    var orig = minimatch;
    var m = function minimatch2(p, pattern, options) {
      return orig.minimatch(p, pattern, ext(def, options));
    };
    m.Minimatch = function Minimatch2(pattern, options) {
      return new orig.Minimatch(pattern, ext(def, options));
    };
    return m;
  };
  Minimatch.defaults = function(def) {
    if (!def || !Object.keys(def).length)
      return Minimatch;
    return minimatch.defaults(def).Minimatch;
  };
  function minimatch(p, pattern, options) {
    if (typeof pattern !== "string") {
      throw new TypeError("glob pattern string required");
    }
    if (!options)
      options = {};
    if (!options.nocomment && pattern.charAt(0) === "#") {
      return false;
    }
    if (pattern.trim() === "")
      return p === "";
    return new Minimatch(pattern, options).match(p);
  }
  function Minimatch(pattern, options) {
    if (!(this instanceof Minimatch)) {
      return new Minimatch(pattern, options);
    }
    if (typeof pattern !== "string") {
      throw new TypeError("glob pattern string required");
    }
    if (!options)
      options = {};
    pattern = pattern.trim();
    if (path19.sep !== "/") {
      pattern = pattern.split(path19.sep).join("/");
    }
    this.options = options;
    this.set = [];
    this.pattern = pattern;
    this.regexp = null;
    this.negate = false;
    this.comment = false;
    this.empty = false;
    this.make();
  }
  Minimatch.prototype.debug = function() {
  };
  Minimatch.prototype.make = make;
  function make() {
    if (this._made)
      return;
    var pattern = this.pattern;
    var options = this.options;
    if (!options.nocomment && pattern.charAt(0) === "#") {
      this.comment = true;
      return;
    }
    if (!pattern) {
      this.empty = true;
      return;
    }
    this.parseNegate();
    var set = this.globSet = this.braceExpand();
    if (options.debug)
      this.debug = console.error;
    this.debug(this.pattern, set);
    set = this.globParts = set.map(function(s) {
      return s.split(slashSplit);
    });
    this.debug(this.pattern, set);
    set = set.map(function(s, si, set2) {
      return s.map(this.parse, this);
    }, this);
    this.debug(this.pattern, set);
    set = set.filter(function(s) {
      return s.indexOf(false) === -1;
    });
    this.debug(this.pattern, set);
    this.set = set;
  }
  Minimatch.prototype.parseNegate = parseNegate;
  function parseNegate() {
    var pattern = this.pattern;
    var negate = false;
    var options = this.options;
    var negateOffset = 0;
    if (options.nonegate)
      return;
    for (var i = 0, l = pattern.length; i < l && pattern.charAt(i) === "!"; i++) {
      negate = !negate;
      negateOffset++;
    }
    if (negateOffset)
      this.pattern = pattern.substr(negateOffset);
    this.negate = negate;
  }
  minimatch.braceExpand = function(pattern, options) {
    return braceExpand(pattern, options);
  };
  Minimatch.prototype.braceExpand = braceExpand;
  function braceExpand(pattern, options) {
    if (!options) {
      if (this instanceof Minimatch) {
        options = this.options;
      } else {
        options = {};
      }
    }
    pattern = typeof pattern === "undefined" ? this.pattern : pattern;
    if (typeof pattern === "undefined") {
      throw new TypeError("undefined pattern");
    }
    if (options.nobrace || !pattern.match(/\{.*\}/)) {
      return [pattern];
    }
    return expand(pattern);
  }
  Minimatch.prototype.parse = parse;
  var SUBPARSE = {};
  function parse(pattern, isSub) {
    if (pattern.length > 1024 * 64) {
      throw new TypeError("pattern is too long");
    }
    var options = this.options;
    if (!options.noglobstar && pattern === "**")
      return GLOBSTAR;
    if (pattern === "")
      return "";
    var re = "";
    var hasMagic = !!options.nocase;
    var escaping = false;
    var patternListStack = [];
    var negativeLists = [];
    var stateChar;
    var inClass = false;
    var reClassStart = -1;
    var classStart = -1;
    var patternStart = pattern.charAt(0) === "." ? "" : options.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)";
    var self2 = this;
    function clearStateChar() {
      if (stateChar) {
        switch (stateChar) {
          case "*":
            re += star;
            hasMagic = true;
            break;
          case "?":
            re += qmark;
            hasMagic = true;
            break;
          default:
            re += "\\" + stateChar;
            break;
        }
        self2.debug("clearStateChar %j %j", stateChar, re);
        stateChar = false;
      }
    }
    for (var i = 0, len = pattern.length, c; i < len && (c = pattern.charAt(i)); i++) {
      this.debug("%s	%s %s %j", pattern, i, re, c);
      if (escaping && reSpecials[c]) {
        re += "\\" + c;
        escaping = false;
        continue;
      }
      switch (c) {
        case "/":
          return false;
        case "\\":
          clearStateChar();
          escaping = true;
          continue;
        case "?":
        case "*":
        case "+":
        case "@":
        case "!":
          this.debug("%s	%s %s %j <-- stateChar", pattern, i, re, c);
          if (inClass) {
            this.debug("  in class");
            if (c === "!" && i === classStart + 1)
              c = "^";
            re += c;
            continue;
          }
          self2.debug("call clearStateChar %j", stateChar);
          clearStateChar();
          stateChar = c;
          if (options.noext)
            clearStateChar();
          continue;
        case "(":
          if (inClass) {
            re += "(";
            continue;
          }
          if (!stateChar) {
            re += "\\(";
            continue;
          }
          patternListStack.push({
            type: stateChar,
            start: i - 1,
            reStart: re.length,
            open: plTypes[stateChar].open,
            close: plTypes[stateChar].close
          });
          re += stateChar === "!" ? "(?:(?!(?:" : "(?:";
          this.debug("plType %j %j", stateChar, re);
          stateChar = false;
          continue;
        case ")":
          if (inClass || !patternListStack.length) {
            re += "\\)";
            continue;
          }
          clearStateChar();
          hasMagic = true;
          var pl = patternListStack.pop();
          re += pl.close;
          if (pl.type === "!") {
            negativeLists.push(pl);
          }
          pl.reEnd = re.length;
          continue;
        case "|":
          if (inClass || !patternListStack.length || escaping) {
            re += "\\|";
            escaping = false;
            continue;
          }
          clearStateChar();
          re += "|";
          continue;
        case "[":
          clearStateChar();
          if (inClass) {
            re += "\\" + c;
            continue;
          }
          inClass = true;
          classStart = i;
          reClassStart = re.length;
          re += c;
          continue;
        case "]":
          if (i === classStart + 1 || !inClass) {
            re += "\\" + c;
            escaping = false;
            continue;
          }
          if (inClass) {
            var cs = pattern.substring(classStart + 1, i);
            try {
              RegExp("[" + cs + "]");
            } catch (er) {
              var sp = this.parse(cs, SUBPARSE);
              re = re.substr(0, reClassStart) + "\\[" + sp[0] + "\\]";
              hasMagic = hasMagic || sp[1];
              inClass = false;
              continue;
            }
          }
          hasMagic = true;
          inClass = false;
          re += c;
          continue;
        default:
          clearStateChar();
          if (escaping) {
            escaping = false;
          } else if (reSpecials[c] && !(c === "^" && inClass)) {
            re += "\\";
          }
          re += c;
      }
    }
    if (inClass) {
      cs = pattern.substr(classStart + 1);
      sp = this.parse(cs, SUBPARSE);
      re = re.substr(0, reClassStart) + "\\[" + sp[0];
      hasMagic = hasMagic || sp[1];
    }
    for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
      var tail = re.slice(pl.reStart + pl.open.length);
      this.debug("setting tail", re, pl);
      tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(_2, $1, $2) {
        if (!$2) {
          $2 = "\\";
        }
        return $1 + $1 + $2 + "|";
      });
      this.debug("tail=%j\n   %s", tail, tail, pl, re);
      var t = pl.type === "*" ? star : pl.type === "?" ? qmark : "\\" + pl.type;
      hasMagic = true;
      re = re.slice(0, pl.reStart) + t + "\\(" + tail;
    }
    clearStateChar();
    if (escaping) {
      re += "\\\\";
    }
    var addPatternStart = false;
    switch (re.charAt(0)) {
      case ".":
      case "[":
      case "(":
        addPatternStart = true;
    }
    for (var n = negativeLists.length - 1; n > -1; n--) {
      var nl = negativeLists[n];
      var nlBefore = re.slice(0, nl.reStart);
      var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
      var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
      var nlAfter = re.slice(nl.reEnd);
      nlLast += nlAfter;
      var openParensBefore = nlBefore.split("(").length - 1;
      var cleanAfter = nlAfter;
      for (i = 0; i < openParensBefore; i++) {
        cleanAfter = cleanAfter.replace(/\)[+*?]?/, "");
      }
      nlAfter = cleanAfter;
      var dollar = "";
      if (nlAfter === "" && isSub !== SUBPARSE) {
        dollar = "$";
      }
      var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
      re = newRe;
    }
    if (re !== "" && hasMagic) {
      re = "(?=.)" + re;
    }
    if (addPatternStart) {
      re = patternStart + re;
    }
    if (isSub === SUBPARSE) {
      return [re, hasMagic];
    }
    if (!hasMagic) {
      return globUnescape(pattern);
    }
    var flags = options.nocase ? "i" : "";
    try {
      var regExp = new RegExp("^" + re + "$", flags);
    } catch (er) {
      return new RegExp("$.");
    }
    regExp._glob = pattern;
    regExp._src = re;
    return regExp;
  }
  minimatch.makeRe = function(pattern, options) {
    return new Minimatch(pattern, options || {}).makeRe();
  };
  Minimatch.prototype.makeRe = makeRe;
  function makeRe() {
    if (this.regexp || this.regexp === false)
      return this.regexp;
    var set = this.set;
    if (!set.length) {
      this.regexp = false;
      return this.regexp;
    }
    var options = this.options;
    var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
    var flags = options.nocase ? "i" : "";
    var re = set.map(function(pattern) {
      return pattern.map(function(p) {
        return p === GLOBSTAR ? twoStar : typeof p === "string" ? regExpEscape(p) : p._src;
      }).join("\\/");
    }).join("|");
    re = "^(?:" + re + ")$";
    if (this.negate)
      re = "^(?!" + re + ").*$";
    try {
      this.regexp = new RegExp(re, flags);
    } catch (ex) {
      this.regexp = false;
    }
    return this.regexp;
  }
  minimatch.match = function(list, pattern, options) {
    options = options || {};
    var mm = new Minimatch(pattern, options);
    list = list.filter(function(f) {
      return mm.match(f);
    });
    if (mm.options.nonull && !list.length) {
      list.push(pattern);
    }
    return list;
  };
  Minimatch.prototype.match = match;
  function match(f, partial) {
    this.debug("match", f, this.pattern);
    if (this.comment)
      return false;
    if (this.empty)
      return f === "";
    if (f === "/" && partial)
      return true;
    var options = this.options;
    if (path19.sep !== "/") {
      f = f.split(path19.sep).join("/");
    }
    f = f.split(slashSplit);
    this.debug(this.pattern, "split", f);
    var set = this.set;
    this.debug(this.pattern, "set", set);
    var filename;
    var i;
    for (i = f.length - 1; i >= 0; i--) {
      filename = f[i];
      if (filename)
        break;
    }
    for (i = 0; i < set.length; i++) {
      var pattern = set[i];
      var file = f;
      if (options.matchBase && pattern.length === 1) {
        file = [filename];
      }
      var hit = this.matchOne(file, pattern, partial);
      if (hit) {
        if (options.flipNegate)
          return true;
        return !this.negate;
      }
    }
    if (options.flipNegate)
      return false;
    return this.negate;
  }
  Minimatch.prototype.matchOne = function(file, pattern, partial) {
    var options = this.options;
    this.debug("matchOne", {this: this, file, pattern});
    this.debug("matchOne", file.length, pattern.length);
    for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
      this.debug("matchOne loop");
      var p = pattern[pi];
      var f = file[fi];
      this.debug(pattern, p, f);
      if (p === false)
        return false;
      if (p === GLOBSTAR) {
        this.debug("GLOBSTAR", [pattern, p, f]);
        var fr = fi;
        var pr = pi + 1;
        if (pr === pl) {
          this.debug("** at the end");
          for (; fi < fl; fi++) {
            if (file[fi] === "." || file[fi] === ".." || !options.dot && file[fi].charAt(0) === ".")
              return false;
          }
          return true;
        }
        while (fr < fl) {
          var swallowee = file[fr];
          this.debug("\nglobstar while", file, fr, pattern, pr, swallowee);
          if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
            this.debug("globstar found match!", fr, fl, swallowee);
            return true;
          } else {
            if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
              this.debug("dot detected!", file, fr, pattern, pr);
              break;
            }
            this.debug("globstar swallow a segment, and continue");
            fr++;
          }
        }
        if (partial) {
          this.debug("\n>>> no match, partial?", file, fr, pattern, pr);
          if (fr === fl)
            return true;
        }
        return false;
      }
      var hit;
      if (typeof p === "string") {
        if (options.nocase) {
          hit = f.toLowerCase() === p.toLowerCase();
        } else {
          hit = f === p;
        }
        this.debug("string match", p, f, hit);
      } else {
        hit = f.match(p);
        this.debug("pattern match", p, f, hit);
      }
      if (!hit)
        return false;
    }
    if (fi === fl && pi === pl) {
      return true;
    } else if (fi === fl) {
      return partial;
    } else if (pi === pl) {
      var emptyFileEnd = fi === fl - 1 && file[fi] === "";
      return emptyFileEnd;
    }
    throw new Error("wtf?");
  };
  function globUnescape(s) {
    return s.replace(/\\(.)/g, "$1");
  }
  function regExpEscape(s) {
    return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
  }
});

// ../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS((exports2, module3) => {
  if (typeof Object.create === "function") {
    module3.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    module3.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
});

// ../../node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js
var require_inherits = __commonJS((exports2, module3) => {
  try {
    var util4 = require("util");
    if (typeof util4.inherits !== "function")
      throw "";
    module3.exports = util4.inherits;
  } catch (e) {
    module3.exports = require_inherits_browser();
  }
});

// ../../node_modules/.pnpm/path-is-absolute@1.0.1/node_modules/path-is-absolute/index.js
var require_path_is_absolute = __commonJS((exports2, module3) => {
  "use strict";
  function posix(path19) {
    return path19.charAt(0) === "/";
  }
  function win32(path19) {
    var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
    var result = splitDeviceRe.exec(path19);
    var device = result[1] || "";
    var isUnc = Boolean(device && device.charAt(1) !== ":");
    return Boolean(result[2] || isUnc);
  }
  module3.exports = process.platform === "win32" ? win32 : posix;
  module3.exports.posix = posix;
  module3.exports.win32 = win32;
});

// ../../node_modules/.pnpm/glob@7.1.6/node_modules/glob/common.js
var require_common4 = __commonJS((exports2) => {
  exports2.alphasort = alphasort;
  exports2.alphasorti = alphasorti;
  exports2.setopts = setopts;
  exports2.ownProp = ownProp;
  exports2.makeAbs = makeAbs;
  exports2.finish = finish;
  exports2.mark = mark;
  exports2.isIgnored = isIgnored;
  exports2.childrenIgnored = childrenIgnored;
  function ownProp(obj, field) {
    return Object.prototype.hasOwnProperty.call(obj, field);
  }
  var path19 = require("path");
  var minimatch = require_minimatch();
  var isAbsolute = require_path_is_absolute();
  var Minimatch = minimatch.Minimatch;
  function alphasorti(a, b) {
    return a.toLowerCase().localeCompare(b.toLowerCase());
  }
  function alphasort(a, b) {
    return a.localeCompare(b);
  }
  function setupIgnores(self2, options) {
    self2.ignore = options.ignore || [];
    if (!Array.isArray(self2.ignore))
      self2.ignore = [self2.ignore];
    if (self2.ignore.length) {
      self2.ignore = self2.ignore.map(ignoreMap);
    }
  }
  function ignoreMap(pattern) {
    var gmatcher = null;
    if (pattern.slice(-3) === "/**") {
      var gpattern = pattern.replace(/(\/\*\*)+$/, "");
      gmatcher = new Minimatch(gpattern, {dot: true});
    }
    return {
      matcher: new Minimatch(pattern, {dot: true}),
      gmatcher
    };
  }
  function setopts(self2, pattern, options) {
    if (!options)
      options = {};
    if (options.matchBase && pattern.indexOf("/") === -1) {
      if (options.noglobstar) {
        throw new Error("base matching requires globstar");
      }
      pattern = "**/" + pattern;
    }
    self2.silent = !!options.silent;
    self2.pattern = pattern;
    self2.strict = options.strict !== false;
    self2.realpath = !!options.realpath;
    self2.realpathCache = options.realpathCache || Object.create(null);
    self2.follow = !!options.follow;
    self2.dot = !!options.dot;
    self2.mark = !!options.mark;
    self2.nodir = !!options.nodir;
    if (self2.nodir)
      self2.mark = true;
    self2.sync = !!options.sync;
    self2.nounique = !!options.nounique;
    self2.nonull = !!options.nonull;
    self2.nosort = !!options.nosort;
    self2.nocase = !!options.nocase;
    self2.stat = !!options.stat;
    self2.noprocess = !!options.noprocess;
    self2.absolute = !!options.absolute;
    self2.maxLength = options.maxLength || Infinity;
    self2.cache = options.cache || Object.create(null);
    self2.statCache = options.statCache || Object.create(null);
    self2.symlinks = options.symlinks || Object.create(null);
    setupIgnores(self2, options);
    self2.changedCwd = false;
    var cwd = process.cwd();
    if (!ownProp(options, "cwd"))
      self2.cwd = cwd;
    else {
      self2.cwd = path19.resolve(options.cwd);
      self2.changedCwd = self2.cwd !== cwd;
    }
    self2.root = options.root || path19.resolve(self2.cwd, "/");
    self2.root = path19.resolve(self2.root);
    if (process.platform === "win32")
      self2.root = self2.root.replace(/\\/g, "/");
    self2.cwdAbs = isAbsolute(self2.cwd) ? self2.cwd : makeAbs(self2, self2.cwd);
    if (process.platform === "win32")
      self2.cwdAbs = self2.cwdAbs.replace(/\\/g, "/");
    self2.nomount = !!options.nomount;
    options.nonegate = true;
    options.nocomment = true;
    self2.minimatch = new Minimatch(pattern, options);
    self2.options = self2.minimatch.options;
  }
  function finish(self2) {
    var nou = self2.nounique;
    var all = nou ? [] : Object.create(null);
    for (var i = 0, l = self2.matches.length; i < l; i++) {
      var matches = self2.matches[i];
      if (!matches || Object.keys(matches).length === 0) {
        if (self2.nonull) {
          var literal = self2.minimatch.globSet[i];
          if (nou)
            all.push(literal);
          else
            all[literal] = true;
        }
      } else {
        var m = Object.keys(matches);
        if (nou)
          all.push.apply(all, m);
        else
          m.forEach(function(m2) {
            all[m2] = true;
          });
      }
    }
    if (!nou)
      all = Object.keys(all);
    if (!self2.nosort)
      all = all.sort(self2.nocase ? alphasorti : alphasort);
    if (self2.mark) {
      for (var i = 0; i < all.length; i++) {
        all[i] = self2._mark(all[i]);
      }
      if (self2.nodir) {
        all = all.filter(function(e) {
          var notDir = !/\/$/.test(e);
          var c = self2.cache[e] || self2.cache[makeAbs(self2, e)];
          if (notDir && c)
            notDir = c !== "DIR" && !Array.isArray(c);
          return notDir;
        });
      }
    }
    if (self2.ignore.length)
      all = all.filter(function(m2) {
        return !isIgnored(self2, m2);
      });
    self2.found = all;
  }
  function mark(self2, p) {
    var abs = makeAbs(self2, p);
    var c = self2.cache[abs];
    var m = p;
    if (c) {
      var isDir = c === "DIR" || Array.isArray(c);
      var slash = p.slice(-1) === "/";
      if (isDir && !slash)
        m += "/";
      else if (!isDir && slash)
        m = m.slice(0, -1);
      if (m !== p) {
        var mabs = makeAbs(self2, m);
        self2.statCache[mabs] = self2.statCache[abs];
        self2.cache[mabs] = self2.cache[abs];
      }
    }
    return m;
  }
  function makeAbs(self2, f) {
    var abs = f;
    if (f.charAt(0) === "/") {
      abs = path19.join(self2.root, f);
    } else if (isAbsolute(f) || f === "") {
      abs = f;
    } else if (self2.changedCwd) {
      abs = path19.resolve(self2.cwd, f);
    } else {
      abs = path19.resolve(f);
    }
    if (process.platform === "win32")
      abs = abs.replace(/\\/g, "/");
    return abs;
  }
  function isIgnored(self2, path20) {
    if (!self2.ignore.length)
      return false;
    return self2.ignore.some(function(item) {
      return item.matcher.match(path20) || !!(item.gmatcher && item.gmatcher.match(path20));
    });
  }
  function childrenIgnored(self2, path20) {
    if (!self2.ignore.length)
      return false;
    return self2.ignore.some(function(item) {
      return !!(item.gmatcher && item.gmatcher.match(path20));
    });
  }
});

// ../../node_modules/.pnpm/glob@7.1.6/node_modules/glob/sync.js
var require_sync7 = __commonJS((exports2, module3) => {
  module3.exports = globSync;
  globSync.GlobSync = GlobSync;
  var fs17 = require("fs");
  var rp = require_fs5();
  var minimatch = require_minimatch();
  var Minimatch = minimatch.Minimatch;
  var Glob = require_glob().Glob;
  var util4 = require("util");
  var path19 = require("path");
  var assert = require("assert");
  var isAbsolute = require_path_is_absolute();
  var common = require_common4();
  var alphasort = common.alphasort;
  var alphasorti = common.alphasorti;
  var setopts = common.setopts;
  var ownProp = common.ownProp;
  var childrenIgnored = common.childrenIgnored;
  var isIgnored = common.isIgnored;
  function globSync(pattern, options) {
    if (typeof options === "function" || arguments.length === 3)
      throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
    return new GlobSync(pattern, options).found;
  }
  function GlobSync(pattern, options) {
    if (!pattern)
      throw new Error("must provide pattern");
    if (typeof options === "function" || arguments.length === 3)
      throw new TypeError("callback provided to sync glob\nSee: https://github.com/isaacs/node-glob/issues/167");
    if (!(this instanceof GlobSync))
      return new GlobSync(pattern, options);
    setopts(this, pattern, options);
    if (this.noprocess)
      return this;
    var n = this.minimatch.set.length;
    this.matches = new Array(n);
    for (var i = 0; i < n; i++) {
      this._process(this.minimatch.set[i], i, false);
    }
    this._finish();
  }
  GlobSync.prototype._finish = function() {
    assert(this instanceof GlobSync);
    if (this.realpath) {
      var self2 = this;
      this.matches.forEach(function(matchset, index) {
        var set = self2.matches[index] = Object.create(null);
        for (var p in matchset) {
          try {
            p = self2._makeAbs(p);
            var real = rp.realpathSync(p, self2.realpathCache);
            set[real] = true;
          } catch (er) {
            if (er.syscall === "stat")
              set[self2._makeAbs(p)] = true;
            else
              throw er;
          }
        }
      });
    }
    common.finish(this);
  };
  GlobSync.prototype._process = function(pattern, index, inGlobStar) {
    assert(this instanceof GlobSync);
    var n = 0;
    while (typeof pattern[n] === "string") {
      n++;
    }
    var prefix;
    switch (n) {
      case pattern.length:
        this._processSimple(pattern.join("/"), index);
        return;
      case 0:
        prefix = null;
        break;
      default:
        prefix = pattern.slice(0, n).join("/");
        break;
    }
    var remain = pattern.slice(n);
    var read;
    if (prefix === null)
      read = ".";
    else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
      if (!prefix || !isAbsolute(prefix))
        prefix = "/" + prefix;
      read = prefix;
    } else
      read = prefix;
    var abs = this._makeAbs(read);
    if (childrenIgnored(this, read))
      return;
    var isGlobStar = remain[0] === minimatch.GLOBSTAR;
    if (isGlobStar)
      this._processGlobStar(prefix, read, abs, remain, index, inGlobStar);
    else
      this._processReaddir(prefix, read, abs, remain, index, inGlobStar);
  };
  GlobSync.prototype._processReaddir = function(prefix, read, abs, remain, index, inGlobStar) {
    var entries = this._readdir(abs, inGlobStar);
    if (!entries)
      return;
    var pn = remain[0];
    var negate = !!this.minimatch.negate;
    var rawGlob = pn._glob;
    var dotOk = this.dot || rawGlob.charAt(0) === ".";
    var matchedEntries = [];
    for (var i = 0; i < entries.length; i++) {
      var e = entries[i];
      if (e.charAt(0) !== "." || dotOk) {
        var m;
        if (negate && !prefix) {
          m = !e.match(pn);
        } else {
          m = e.match(pn);
        }
        if (m)
          matchedEntries.push(e);
      }
    }
    var len = matchedEntries.length;
    if (len === 0)
      return;
    if (remain.length === 1 && !this.mark && !this.stat) {
      if (!this.matches[index])
        this.matches[index] = Object.create(null);
      for (var i = 0; i < len; i++) {
        var e = matchedEntries[i];
        if (prefix) {
          if (prefix.slice(-1) !== "/")
            e = prefix + "/" + e;
          else
            e = prefix + e;
        }
        if (e.charAt(0) === "/" && !this.nomount) {
          e = path19.join(this.root, e);
        }
        this._emitMatch(index, e);
      }
      return;
    }
    remain.shift();
    for (var i = 0; i < len; i++) {
      var e = matchedEntries[i];
      var newPattern;
      if (prefix)
        newPattern = [prefix, e];
      else
        newPattern = [e];
      this._process(newPattern.concat(remain), index, inGlobStar);
    }
  };
  GlobSync.prototype._emitMatch = function(index, e) {
    if (isIgnored(this, e))
      return;
    var abs = this._makeAbs(e);
    if (this.mark)
      e = this._mark(e);
    if (this.absolute) {
      e = abs;
    }
    if (this.matches[index][e])
      return;
    if (this.nodir) {
      var c = this.cache[abs];
      if (c === "DIR" || Array.isArray(c))
        return;
    }
    this.matches[index][e] = true;
    if (this.stat)
      this._stat(e);
  };
  GlobSync.prototype._readdirInGlobStar = function(abs) {
    if (this.follow)
      return this._readdir(abs, false);
    var entries;
    var lstat;
    var stat;
    try {
      lstat = fs17.lstatSync(abs);
    } catch (er) {
      if (er.code === "ENOENT") {
        return null;
      }
    }
    var isSym = lstat && lstat.isSymbolicLink();
    this.symlinks[abs] = isSym;
    if (!isSym && lstat && !lstat.isDirectory())
      this.cache[abs] = "FILE";
    else
      entries = this._readdir(abs, false);
    return entries;
  };
  GlobSync.prototype._readdir = function(abs, inGlobStar) {
    var entries;
    if (inGlobStar && !ownProp(this.symlinks, abs))
      return this._readdirInGlobStar(abs);
    if (ownProp(this.cache, abs)) {
      var c = this.cache[abs];
      if (!c || c === "FILE")
        return null;
      if (Array.isArray(c))
        return c;
    }
    try {
      return this._readdirEntries(abs, fs17.readdirSync(abs));
    } catch (er) {
      this._readdirError(abs, er);
      return null;
    }
  };
  GlobSync.prototype._readdirEntries = function(abs, entries) {
    if (!this.mark && !this.stat) {
      for (var i = 0; i < entries.length; i++) {
        var e = entries[i];
        if (abs === "/")
          e = abs + e;
        else
          e = abs + "/" + e;
        this.cache[e] = true;
      }
    }
    this.cache[abs] = entries;
    return entries;
  };
  GlobSync.prototype._readdirError = function(f, er) {
    switch (er.code) {
      case "ENOTSUP":
      case "ENOTDIR":
        var abs = this._makeAbs(f);
        this.cache[abs] = "FILE";
        if (abs === this.cwdAbs) {
          var error = new Error(er.code + " invalid cwd " + this.cwd);
          error.path = this.cwd;
          error.code = er.code;
          throw error;
        }
        break;
      case "ENOENT":
      case "ELOOP":
      case "ENAMETOOLONG":
      case "UNKNOWN":
        this.cache[this._makeAbs(f)] = false;
        break;
      default:
        this.cache[this._makeAbs(f)] = false;
        if (this.strict)
          throw er;
        if (!this.silent)
          console.error("glob error", er);
        break;
    }
  };
  GlobSync.prototype._processGlobStar = function(prefix, read, abs, remain, index, inGlobStar) {
    var entries = this._readdir(abs, inGlobStar);
    if (!entries)
      return;
    var remainWithoutGlobStar = remain.slice(1);
    var gspref = prefix ? [prefix] : [];
    var noGlobStar = gspref.concat(remainWithoutGlobStar);
    this._process(noGlobStar, index, false);
    var len = entries.length;
    var isSym = this.symlinks[abs];
    if (isSym && inGlobStar)
      return;
    for (var i = 0; i < len; i++) {
      var e = entries[i];
      if (e.charAt(0) === "." && !this.dot)
        continue;
      var instead = gspref.concat(entries[i], remainWithoutGlobStar);
      this._process(instead, index, true);
      var below = gspref.concat(entries[i], remain);
      this._process(below, index, true);
    }
  };
  GlobSync.prototype._processSimple = function(prefix, index) {
    var exists = this._stat(prefix);
    if (!this.matches[index])
      this.matches[index] = Object.create(null);
    if (!exists)
      return;
    if (prefix && isAbsolute(prefix) && !this.nomount) {
      var trail = /[\/\\]$/.test(prefix);
      if (prefix.charAt(0) === "/") {
        prefix = path19.join(this.root, prefix);
      } else {
        prefix = path19.resolve(this.root, prefix);
        if (trail)
          prefix += "/";
      }
    }
    if (process.platform === "win32")
      prefix = prefix.replace(/\\/g, "/");
    this._emitMatch(index, prefix);
  };
  GlobSync.prototype._stat = function(f) {
    var abs = this._makeAbs(f);
    var needDir = f.slice(-1) === "/";
    if (f.length > this.maxLength)
      return false;
    if (!this.stat && ownProp(this.cache, abs)) {
      var c = this.cache[abs];
      if (Array.isArray(c))
        c = "DIR";
      if (!needDir || c === "DIR")
        return c;
      if (needDir && c === "FILE")
        return false;
    }
    var exists;
    var stat = this.statCache[abs];
    if (!stat) {
      var lstat;
      try {
        lstat = fs17.lstatSync(abs);
      } catch (er) {
        if (er && (er.code === "ENOENT" || er.code === "ENOTDIR")) {
          this.statCache[abs] = false;
          return false;
        }
      }
      if (lstat && lstat.isSymbolicLink()) {
        try {
          stat = fs17.statSync(abs);
        } catch (er) {
          stat = lstat;
        }
      } else {
        stat = lstat;
      }
    }
    this.statCache[abs] = stat;
    var c = true;
    if (stat)
      c = stat.isDirectory() ? "DIR" : "FILE";
    this.cache[abs] = this.cache[abs] || c;
    if (needDir && c === "FILE")
      return false;
    return c;
  };
  GlobSync.prototype._mark = function(p) {
    return common.mark(this, p);
  };
  GlobSync.prototype._makeAbs = function(f) {
    return common.makeAbs(this, f);
  };
});

// ../../node_modules/.pnpm/inflight@1.0.6/node_modules/inflight/inflight.js
var require_inflight = __commonJS((exports2, module3) => {
  var wrappy = require_wrappy();
  var reqs = Object.create(null);
  var once = require_once();
  module3.exports = wrappy(inflight);
  function inflight(key, cb) {
    if (reqs[key]) {
      reqs[key].push(cb);
      return null;
    } else {
      reqs[key] = [cb];
      return makeres(key);
    }
  }
  function makeres(key) {
    return once(function RES() {
      var cbs = reqs[key];
      var len = cbs.length;
      var args2 = slice(arguments);
      try {
        for (var i = 0; i < len; i++) {
          cbs[i].apply(null, args2);
        }
      } finally {
        if (cbs.length > len) {
          cbs.splice(0, len);
          process.nextTick(function() {
            RES.apply(null, args2);
          });
        } else {
          delete reqs[key];
        }
      }
    });
  }
  function slice(args2) {
    var length = args2.length;
    var array = [];
    for (var i = 0; i < length; i++)
      array[i] = args2[i];
    return array;
  }
});

// ../../node_modules/.pnpm/glob@7.1.6/node_modules/glob/glob.js
var require_glob = __commonJS((exports2, module3) => {
  module3.exports = glob;
  var fs17 = require("fs");
  var rp = require_fs5();
  var minimatch = require_minimatch();
  var Minimatch = minimatch.Minimatch;
  var inherits = require_inherits();
  var EE = require("events").EventEmitter;
  var path19 = require("path");
  var assert = require("assert");
  var isAbsolute = require_path_is_absolute();
  var globSync = require_sync7();
  var common = require_common4();
  var alphasort = common.alphasort;
  var alphasorti = common.alphasorti;
  var setopts = common.setopts;
  var ownProp = common.ownProp;
  var inflight = require_inflight();
  var util4 = require("util");
  var childrenIgnored = common.childrenIgnored;
  var isIgnored = common.isIgnored;
  var once = require_once();
  function glob(pattern, options, cb) {
    if (typeof options === "function")
      cb = options, options = {};
    if (!options)
      options = {};
    if (options.sync) {
      if (cb)
        throw new TypeError("callback provided to sync glob");
      return globSync(pattern, options);
    }
    return new Glob(pattern, options, cb);
  }
  glob.sync = globSync;
  var GlobSync = glob.GlobSync = globSync.GlobSync;
  glob.glob = glob;
  function extend(origin, add) {
    if (add === null || typeof add !== "object") {
      return origin;
    }
    var keys = Object.keys(add);
    var i = keys.length;
    while (i--) {
      origin[keys[i]] = add[keys[i]];
    }
    return origin;
  }
  glob.hasMagic = function(pattern, options_) {
    var options = extend({}, options_);
    options.noprocess = true;
    var g = new Glob(pattern, options);
    var set = g.minimatch.set;
    if (!pattern)
      return false;
    if (set.length > 1)
      return true;
    for (var j = 0; j < set[0].length; j++) {
      if (typeof set[0][j] !== "string")
        return true;
    }
    return false;
  };
  glob.Glob = Glob;
  inherits(Glob, EE);
  function Glob(pattern, options, cb) {
    if (typeof options === "function") {
      cb = options;
      options = null;
    }
    if (options && options.sync) {
      if (cb)
        throw new TypeError("callback provided to sync glob");
      return new GlobSync(pattern, options);
    }
    if (!(this instanceof Glob))
      return new Glob(pattern, options, cb);
    setopts(this, pattern, options);
    this._didRealPath = false;
    var n = this.minimatch.set.length;
    this.matches = new Array(n);
    if (typeof cb === "function") {
      cb = once(cb);
      this.on("error", cb);
      this.on("end", function(matches) {
        cb(null, matches);
      });
    }
    var self2 = this;
    this._processing = 0;
    this._emitQueue = [];
    this._processQueue = [];
    this.paused = false;
    if (this.noprocess)
      return this;
    if (n === 0)
      return done();
    var sync = true;
    for (var i = 0; i < n; i++) {
      this._process(this.minimatch.set[i], i, false, done);
    }
    sync = false;
    function done() {
      --self2._processing;
      if (self2._processing <= 0) {
        if (sync) {
          process.nextTick(function() {
            self2._finish();
          });
        } else {
          self2._finish();
        }
      }
    }
  }
  Glob.prototype._finish = function() {
    assert(this instanceof Glob);
    if (this.aborted)
      return;
    if (this.realpath && !this._didRealpath)
      return this._realpath();
    common.finish(this);
    this.emit("end", this.found);
  };
  Glob.prototype._realpath = function() {
    if (this._didRealpath)
      return;
    this._didRealpath = true;
    var n = this.matches.length;
    if (n === 0)
      return this._finish();
    var self2 = this;
    for (var i = 0; i < this.matches.length; i++)
      this._realpathSet(i, next);
    function next() {
      if (--n === 0)
        self2._finish();
    }
  };
  Glob.prototype._realpathSet = function(index, cb) {
    var matchset = this.matches[index];
    if (!matchset)
      return cb();
    var found = Object.keys(matchset);
    var self2 = this;
    var n = found.length;
    if (n === 0)
      return cb();
    var set = this.matches[index] = Object.create(null);
    found.forEach(function(p, i) {
      p = self2._makeAbs(p);
      rp.realpath(p, self2.realpathCache, function(er, real) {
        if (!er)
          set[real] = true;
        else if (er.syscall === "stat")
          set[p] = true;
        else
          self2.emit("error", er);
        if (--n === 0) {
          self2.matches[index] = set;
          cb();
        }
      });
    });
  };
  Glob.prototype._mark = function(p) {
    return common.mark(this, p);
  };
  Glob.prototype._makeAbs = function(f) {
    return common.makeAbs(this, f);
  };
  Glob.prototype.abort = function() {
    this.aborted = true;
    this.emit("abort");
  };
  Glob.prototype.pause = function() {
    if (!this.paused) {
      this.paused = true;
      this.emit("pause");
    }
  };
  Glob.prototype.resume = function() {
    if (this.paused) {
      this.emit("resume");
      this.paused = false;
      if (this._emitQueue.length) {
        var eq = this._emitQueue.slice(0);
        this._emitQueue.length = 0;
        for (var i = 0; i < eq.length; i++) {
          var e = eq[i];
          this._emitMatch(e[0], e[1]);
        }
      }
      if (this._processQueue.length) {
        var pq = this._processQueue.slice(0);
        this._processQueue.length = 0;
        for (var i = 0; i < pq.length; i++) {
          var p = pq[i];
          this._processing--;
          this._process(p[0], p[1], p[2], p[3]);
        }
      }
    }
  };
  Glob.prototype._process = function(pattern, index, inGlobStar, cb) {
    assert(this instanceof Glob);
    assert(typeof cb === "function");
    if (this.aborted)
      return;
    this._processing++;
    if (this.paused) {
      this._processQueue.push([pattern, index, inGlobStar, cb]);
      return;
    }
    var n = 0;
    while (typeof pattern[n] === "string") {
      n++;
    }
    var prefix;
    switch (n) {
      case pattern.length:
        this._processSimple(pattern.join("/"), index, cb);
        return;
      case 0:
        prefix = null;
        break;
      default:
        prefix = pattern.slice(0, n).join("/");
        break;
    }
    var remain = pattern.slice(n);
    var read;
    if (prefix === null)
      read = ".";
    else if (isAbsolute(prefix) || isAbsolute(pattern.join("/"))) {
      if (!prefix || !isAbsolute(prefix))
        prefix = "/" + prefix;
      read = prefix;
    } else
      read = prefix;
    var abs = this._makeAbs(read);
    if (childrenIgnored(this, read))
      return cb();
    var isGlobStar = remain[0] === minimatch.GLOBSTAR;
    if (isGlobStar)
      this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb);
    else
      this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb);
  };
  Glob.prototype._processReaddir = function(prefix, read, abs, remain, index, inGlobStar, cb) {
    var self2 = this;
    this._readdir(abs, inGlobStar, function(er, entries) {
      return self2._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
    });
  };
  Glob.prototype._processReaddir2 = function(prefix, read, abs, remain, index, inGlobStar, entries, cb) {
    if (!entries)
      return cb();
    var pn = remain[0];
    var negate = !!this.minimatch.negate;
    var rawGlob = pn._glob;
    var dotOk = this.dot || rawGlob.charAt(0) === ".";
    var matchedEntries = [];
    for (var i = 0; i < entries.length; i++) {
      var e = entries[i];
      if (e.charAt(0) !== "." || dotOk) {
        var m;
        if (negate && !prefix) {
          m = !e.match(pn);
        } else {
          m = e.match(pn);
        }
        if (m)
          matchedEntries.push(e);
      }
    }
    var len = matchedEntries.length;
    if (len === 0)
      return cb();
    if (remain.length === 1 && !this.mark && !this.stat) {
      if (!this.matches[index])
        this.matches[index] = Object.create(null);
      for (var i = 0; i < len; i++) {
        var e = matchedEntries[i];
        if (prefix) {
          if (prefix !== "/")
            e = prefix + "/" + e;
          else
            e = prefix + e;
        }
        if (e.charAt(0) === "/" && !this.nomount) {
          e = path19.join(this.root, e);
        }
        this._emitMatch(index, e);
      }
      return cb();
    }
    remain.shift();
    for (var i = 0; i < len; i++) {
      var e = matchedEntries[i];
      var newPattern;
      if (prefix) {
        if (prefix !== "/")
          e = prefix + "/" + e;
        else
          e = prefix + e;
      }
      this._process([e].concat(remain), index, inGlobStar, cb);
    }
    cb();
  };
  Glob.prototype._emitMatch = function(index, e) {
    if (this.aborted)
      return;
    if (isIgnored(this, e))
      return;
    if (this.paused) {
      this._emitQueue.push([index, e]);
      return;
    }
    var abs = isAbsolute(e) ? e : this._makeAbs(e);
    if (this.mark)
      e = this._mark(e);
    if (this.absolute)
      e = abs;
    if (this.matches[index][e])
      return;
    if (this.nodir) {
      var c = this.cache[abs];
      if (c === "DIR" || Array.isArray(c))
        return;
    }
    this.matches[index][e] = true;
    var st = this.statCache[abs];
    if (st)
      this.emit("stat", e, st);
    this.emit("match", e);
  };
  Glob.prototype._readdirInGlobStar = function(abs, cb) {
    if (this.aborted)
      return;
    if (this.follow)
      return this._readdir(abs, false, cb);
    var lstatkey = "lstat\0" + abs;
    var self2 = this;
    var lstatcb = inflight(lstatkey, lstatcb_);
    if (lstatcb)
      fs17.lstat(abs, lstatcb);
    function lstatcb_(er, lstat) {
      if (er && er.code === "ENOENT")
        return cb();
      var isSym = lstat && lstat.isSymbolicLink();
      self2.symlinks[abs] = isSym;
      if (!isSym && lstat && !lstat.isDirectory()) {
        self2.cache[abs] = "FILE";
        cb();
      } else
        self2._readdir(abs, false, cb);
    }
  };
  Glob.prototype._readdir = function(abs, inGlobStar, cb) {
    if (this.aborted)
      return;
    cb = inflight("readdir\0" + abs + "\0" + inGlobStar, cb);
    if (!cb)
      return;
    if (inGlobStar && !ownProp(this.symlinks, abs))
      return this._readdirInGlobStar(abs, cb);
    if (ownProp(this.cache, abs)) {
      var c = this.cache[abs];
      if (!c || c === "FILE")
        return cb();
      if (Array.isArray(c))
        return cb(null, c);
    }
    var self2 = this;
    fs17.readdir(abs, readdirCb(this, abs, cb));
  };
  function readdirCb(self2, abs, cb) {
    return function(er, entries) {
      if (er)
        self2._readdirError(abs, er, cb);
      else
        self2._readdirEntries(abs, entries, cb);
    };
  }
  Glob.prototype._readdirEntries = function(abs, entries, cb) {
    if (this.aborted)
      return;
    if (!this.mark && !this.stat) {
      for (var i = 0; i < entries.length; i++) {
        var e = entries[i];
        if (abs === "/")
          e = abs + e;
        else
          e = abs + "/" + e;
        this.cache[e] = true;
      }
    }
    this.cache[abs] = entries;
    return cb(null, entries);
  };
  Glob.prototype._readdirError = function(f, er, cb) {
    if (this.aborted)
      return;
    switch (er.code) {
      case "ENOTSUP":
      case "ENOTDIR":
        var abs = this._makeAbs(f);
        this.cache[abs] = "FILE";
        if (abs === this.cwdAbs) {
          var error = new Error(er.code + " invalid cwd " + this.cwd);
          error.path = this.cwd;
          error.code = er.code;
          this.emit("error", error);
          this.abort();
        }
        break;
      case "ENOENT":
      case "ELOOP":
      case "ENAMETOOLONG":
      case "UNKNOWN":
        this.cache[this._makeAbs(f)] = false;
        break;
      default:
        this.cache[this._makeAbs(f)] = false;
        if (this.strict) {
          this.emit("error", er);
          this.abort();
        }
        if (!this.silent)
          console.error("glob error", er);
        break;
    }
    return cb();
  };
  Glob.prototype._processGlobStar = function(prefix, read, abs, remain, index, inGlobStar, cb) {
    var self2 = this;
    this._readdir(abs, inGlobStar, function(er, entries) {
      self2._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
    });
  };
  Glob.prototype._processGlobStar2 = function(prefix, read, abs, remain, index, inGlobStar, entries, cb) {
    if (!entries)
      return cb();
    var remainWithoutGlobStar = remain.slice(1);
    var gspref = prefix ? [prefix] : [];
    var noGlobStar = gspref.concat(remainWithoutGlobStar);
    this._process(noGlobStar, index, false, cb);
    var isSym = this.symlinks[abs];
    var len = entries.length;
    if (isSym && inGlobStar)
      return cb();
    for (var i = 0; i < len; i++) {
      var e = entries[i];
      if (e.charAt(0) === "." && !this.dot)
        continue;
      var instead = gspref.concat(entries[i], remainWithoutGlobStar);
      this._process(instead, index, true, cb);
      var below = gspref.concat(entries[i], remain);
      this._process(below, index, true, cb);
    }
    cb();
  };
  Glob.prototype._processSimple = function(prefix, index, cb) {
    var self2 = this;
    this._stat(prefix, function(er, exists) {
      self2._processSimple2(prefix, index, er, exists, cb);
    });
  };
  Glob.prototype._processSimple2 = function(prefix, index, er, exists, cb) {
    if (!this.matches[index])
      this.matches[index] = Object.create(null);
    if (!exists)
      return cb();
    if (prefix && isAbsolute(prefix) && !this.nomount) {
      var trail = /[\/\\]$/.test(prefix);
      if (prefix.charAt(0) === "/") {
        prefix = path19.join(this.root, prefix);
      } else {
        prefix = path19.resolve(this.root, prefix);
        if (trail)
          prefix += "/";
      }
    }
    if (process.platform === "win32")
      prefix = prefix.replace(/\\/g, "/");
    this._emitMatch(index, prefix);
    cb();
  };
  Glob.prototype._stat = function(f, cb) {
    var abs = this._makeAbs(f);
    var needDir = f.slice(-1) === "/";
    if (f.length > this.maxLength)
      return cb();
    if (!this.stat && ownProp(this.cache, abs)) {
      var c = this.cache[abs];
      if (Array.isArray(c))
        c = "DIR";
      if (!needDir || c === "DIR")
        return cb(null, c);
      if (needDir && c === "FILE")
        return cb();
    }
    var exists;
    var stat = this.statCache[abs];
    if (stat !== void 0) {
      if (stat === false)
        return cb(null, stat);
      else {
        var type = stat.isDirectory() ? "DIR" : "FILE";
        if (needDir && type === "FILE")
          return cb();
        else
          return cb(null, type, stat);
      }
    }
    var self2 = this;
    var statcb = inflight("stat\0" + abs, lstatcb_);
    if (statcb)
      fs17.lstat(abs, statcb);
    function lstatcb_(er, lstat) {
      if (lstat && lstat.isSymbolicLink()) {
        return fs17.stat(abs, function(er2, stat2) {
          if (er2)
            self2._stat2(f, abs, null, lstat, cb);
          else
            self2._stat2(f, abs, er2, stat2, cb);
        });
      } else {
        self2._stat2(f, abs, er, lstat, cb);
      }
    }
  };
  Glob.prototype._stat2 = function(f, abs, er, stat, cb) {
    if (er && (er.code === "ENOENT" || er.code === "ENOTDIR")) {
      this.statCache[abs] = false;
      return cb();
    }
    var needDir = f.slice(-1) === "/";
    this.statCache[abs] = stat;
    if (abs.slice(-1) === "/" && stat && !stat.isDirectory())
      return cb(null, false, stat);
    var c = true;
    if (stat)
      c = stat.isDirectory() ? "DIR" : "FILE";
    this.cache[abs] = this.cache[abs] || c;
    if (needDir && c === "FILE")
      return cb();
    return cb(null, c, stat);
  };
});

// ../../node_modules/.pnpm/rimraf@3.0.2/node_modules/rimraf/rimraf.js
var require_rimraf = __commonJS((exports2, module3) => {
  const assert = require("assert");
  const path19 = require("path");
  const fs17 = require("fs");
  let glob = void 0;
  try {
    glob = require_glob();
  } catch (_err) {
  }
  const defaultGlobOpts = {
    nosort: true,
    silent: true
  };
  let timeout = 0;
  const isWindows = process.platform === "win32";
  const defaults = (options) => {
    const methods = [
      "unlink",
      "chmod",
      "stat",
      "lstat",
      "rmdir",
      "readdir"
    ];
    methods.forEach((m) => {
      options[m] = options[m] || fs17[m];
      m = m + "Sync";
      options[m] = options[m] || fs17[m];
    });
    options.maxBusyTries = options.maxBusyTries || 3;
    options.emfileWait = options.emfileWait || 1e3;
    if (options.glob === false) {
      options.disableGlob = true;
    }
    if (options.disableGlob !== true && glob === void 0) {
      throw Error("glob dependency not found, set `options.disableGlob = true` if intentional");
    }
    options.disableGlob = options.disableGlob || false;
    options.glob = options.glob || defaultGlobOpts;
  };
  const rimraf = (p, options, cb) => {
    if (typeof options === "function") {
      cb = options;
      options = {};
    }
    assert(p, "rimraf: missing path");
    assert.equal(typeof p, "string", "rimraf: path should be a string");
    assert.equal(typeof cb, "function", "rimraf: callback function required");
    assert(options, "rimraf: invalid options argument provided");
    assert.equal(typeof options, "object", "rimraf: options should be object");
    defaults(options);
    let busyTries = 0;
    let errState = null;
    let n = 0;
    const next = (er) => {
      errState = errState || er;
      if (--n === 0)
        cb(errState);
    };
    const afterGlob = (er, results) => {
      if (er)
        return cb(er);
      n = results.length;
      if (n === 0)
        return cb();
      results.forEach((p2) => {
        const CB = (er2) => {
          if (er2) {
            if ((er2.code === "EBUSY" || er2.code === "ENOTEMPTY" || er2.code === "EPERM") && busyTries < options.maxBusyTries) {
              busyTries++;
              return setTimeout(() => rimraf_(p2, options, CB), busyTries * 100);
            }
            if (er2.code === "EMFILE" && timeout < options.emfileWait) {
              return setTimeout(() => rimraf_(p2, options, CB), timeout++);
            }
            if (er2.code === "ENOENT")
              er2 = null;
          }
          timeout = 0;
          next(er2);
        };
        rimraf_(p2, options, CB);
      });
    };
    if (options.disableGlob || !glob.hasMagic(p))
      return afterGlob(null, [p]);
    options.lstat(p, (er, stat) => {
      if (!er)
        return afterGlob(null, [p]);
      glob(p, options.glob, afterGlob);
    });
  };
  const rimraf_ = (p, options, cb) => {
    assert(p);
    assert(options);
    assert(typeof cb === "function");
    options.lstat(p, (er, st) => {
      if (er && er.code === "ENOENT")
        return cb(null);
      if (er && er.code === "EPERM" && isWindows)
        fixWinEPERM(p, options, er, cb);
      if (st && st.isDirectory())
        return rmdir(p, options, er, cb);
      options.unlink(p, (er2) => {
        if (er2) {
          if (er2.code === "ENOENT")
            return cb(null);
          if (er2.code === "EPERM")
            return isWindows ? fixWinEPERM(p, options, er2, cb) : rmdir(p, options, er2, cb);
          if (er2.code === "EISDIR")
            return rmdir(p, options, er2, cb);
        }
        return cb(er2);
      });
    });
  };
  const fixWinEPERM = (p, options, er, cb) => {
    assert(p);
    assert(options);
    assert(typeof cb === "function");
    options.chmod(p, 438, (er2) => {
      if (er2)
        cb(er2.code === "ENOENT" ? null : er);
      else
        options.stat(p, (er3, stats) => {
          if (er3)
            cb(er3.code === "ENOENT" ? null : er);
          else if (stats.isDirectory())
            rmdir(p, options, er, cb);
          else
            options.unlink(p, cb);
        });
    });
  };
  const fixWinEPERMSync = (p, options, er) => {
    assert(p);
    assert(options);
    try {
      options.chmodSync(p, 438);
    } catch (er2) {
      if (er2.code === "ENOENT")
        return;
      else
        throw er;
    }
    let stats;
    try {
      stats = options.statSync(p);
    } catch (er3) {
      if (er3.code === "ENOENT")
        return;
      else
        throw er;
    }
    if (stats.isDirectory())
      rmdirSync(p, options, er);
    else
      options.unlinkSync(p);
  };
  const rmdir = (p, options, originalEr, cb) => {
    assert(p);
    assert(options);
    assert(typeof cb === "function");
    options.rmdir(p, (er) => {
      if (er && (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM"))
        rmkids(p, options, cb);
      else if (er && er.code === "ENOTDIR")
        cb(originalEr);
      else
        cb(er);
    });
  };
  const rmkids = (p, options, cb) => {
    assert(p);
    assert(options);
    assert(typeof cb === "function");
    options.readdir(p, (er, files) => {
      if (er)
        return cb(er);
      let n = files.length;
      if (n === 0)
        return options.rmdir(p, cb);
      let errState;
      files.forEach((f) => {
        rimraf(path19.join(p, f), options, (er2) => {
          if (errState)
            return;
          if (er2)
            return cb(errState = er2);
          if (--n === 0)
            options.rmdir(p, cb);
        });
      });
    });
  };
  const rimrafSync = (p, options) => {
    options = options || {};
    defaults(options);
    assert(p, "rimraf: missing path");
    assert.equal(typeof p, "string", "rimraf: path should be a string");
    assert(options, "rimraf: missing options");
    assert.equal(typeof options, "object", "rimraf: options should be object");
    let results;
    if (options.disableGlob || !glob.hasMagic(p)) {
      results = [p];
    } else {
      try {
        options.lstatSync(p);
        results = [p];
      } catch (er) {
        results = glob.sync(p, options.glob);
      }
    }
    if (!results.length)
      return;
    for (let i = 0; i < results.length; i++) {
      const p2 = results[i];
      let st;
      try {
        st = options.lstatSync(p2);
      } catch (er) {
        if (er.code === "ENOENT")
          return;
        if (er.code === "EPERM" && isWindows)
          fixWinEPERMSync(p2, options, er);
      }
      try {
        if (st && st.isDirectory())
          rmdirSync(p2, options, null);
        else
          options.unlinkSync(p2);
      } catch (er) {
        if (er.code === "ENOENT")
          return;
        if (er.code === "EPERM")
          return isWindows ? fixWinEPERMSync(p2, options, er) : rmdirSync(p2, options, er);
        if (er.code !== "EISDIR")
          throw er;
        rmdirSync(p2, options, er);
      }
    }
  };
  const rmdirSync = (p, options, originalEr) => {
    assert(p);
    assert(options);
    try {
      options.rmdirSync(p);
    } catch (er) {
      if (er.code === "ENOENT")
        return;
      if (er.code === "ENOTDIR")
        throw originalEr;
      if (er.code === "ENOTEMPTY" || er.code === "EEXIST" || er.code === "EPERM")
        rmkidsSync(p, options);
    }
  };
  const rmkidsSync = (p, options) => {
    assert(p);
    assert(options);
    options.readdirSync(p).forEach((f) => rimrafSync(path19.join(p, f), options));
    const retries = isWindows ? 100 : 1;
    let i = 0;
    do {
      let threw = true;
      try {
        const ret = options.rmdirSync(p, options);
        threw = false;
        return ret;
      } finally {
        if (++i < retries && threw)
          continue;
      }
    } while (true);
  };
  module3.exports = rimraf;
  rimraf.sync = rimrafSync;
});

// ../../node_modules/.pnpm/del@6.0.0/node_modules/del/index.js
var require_del = __commonJS((exports2, module3) => {
  "use strict";
  const {promisify: promisify3} = require("util");
  const path19 = require("path");
  const globby = require_globby();
  const isGlob = require_is_glob();
  const slash = require_slash();
  const gracefulFs = require_graceful_fs();
  const isPathCwd = require_is_path_cwd();
  const isPathInside = require_is_path_inside();
  const rimraf = require_rimraf();
  const pMap = require_p_map();
  const rimrafP = promisify3(rimraf);
  const rimrafOptions = {
    glob: false,
    unlink: gracefulFs.unlink,
    unlinkSync: gracefulFs.unlinkSync,
    chmod: gracefulFs.chmod,
    chmodSync: gracefulFs.chmodSync,
    stat: gracefulFs.stat,
    statSync: gracefulFs.statSync,
    lstat: gracefulFs.lstat,
    lstatSync: gracefulFs.lstatSync,
    rmdir: gracefulFs.rmdir,
    rmdirSync: gracefulFs.rmdirSync,
    readdir: gracefulFs.readdir,
    readdirSync: gracefulFs.readdirSync
  };
  function safeCheck(file, cwd) {
    if (isPathCwd(file)) {
      throw new Error("Cannot delete the current working directory. Can be overridden with the `force` option.");
    }
    if (!isPathInside(file, cwd)) {
      throw new Error("Cannot delete files/directories outside the current working directory. Can be overridden with the `force` option.");
    }
  }
  function normalizePatterns(patterns) {
    patterns = Array.isArray(patterns) ? patterns : [patterns];
    patterns = patterns.map((pattern) => {
      if (process.platform === "win32" && isGlob(pattern) === false) {
        return slash(pattern);
      }
      return pattern;
    });
    return patterns;
  }
  module3.exports = async (patterns, {force, dryRun, cwd = process.cwd(), ...options} = {}) => {
    options = {
      expandDirectories: false,
      onlyFiles: false,
      followSymbolicLinks: false,
      cwd,
      ...options
    };
    patterns = normalizePatterns(patterns);
    const files = (await globby(patterns, options)).sort((a, b) => b.localeCompare(a));
    const mapper = async (file) => {
      file = path19.resolve(cwd, file);
      if (!force) {
        safeCheck(file, cwd);
      }
      if (!dryRun) {
        await rimrafP(file, rimrafOptions);
      }
      return file;
    };
    const removedFiles = await pMap(files, mapper, options);
    removedFiles.sort((a, b) => a.localeCompare(b));
    return removedFiles;
  };
  module3.exports.sync = (patterns, {force, dryRun, cwd = process.cwd(), ...options} = {}) => {
    options = {
      expandDirectories: false,
      onlyFiles: false,
      followSymbolicLinks: false,
      cwd,
      ...options
    };
    patterns = normalizePatterns(patterns);
    const files = globby.sync(patterns, options).sort((a, b) => b.localeCompare(a));
    const removedFiles = files.map((file) => {
      file = path19.resolve(cwd, file);
      if (!force) {
        safeCheck(file, cwd);
      }
      if (!dryRun) {
        rimraf.sync(file, rimrafOptions);
      }
      return file;
    });
    removedFiles.sort((a, b) => a.localeCompare(b));
    return removedFiles;
  };
});

// ../../node_modules/.pnpm/tempy@1.0.0/node_modules/tempy/index.js
var require_tempy = __commonJS((exports2, module3) => {
  "use strict";
  const fs17 = require("fs");
  const path19 = require("path");
  const uniqueString = require_unique_string();
  const tempDir = require_temp_dir();
  const isStream = require_is_stream();
  const del = require_del();
  const stream = require("stream");
  const {promisify: promisify3} = require("util");
  const pipeline = promisify3(stream.pipeline);
  const {writeFile} = fs17.promises;
  const getPath = (prefix = "") => path19.join(tempDir, prefix + uniqueString());
  const writeStream = async (filePath, data) => pipeline(data, fs17.createWriteStream(filePath));
  const createTask = (tempyFunction, {extraArguments = 0} = {}) => async (...arguments_) => {
    const [callback, options] = arguments_.slice(extraArguments);
    const result = await tempyFunction(...arguments_.slice(0, extraArguments), options);
    const returnValue = await callback(result);
    await del(result, {force: true});
    return returnValue;
  };
  module3.exports.file = (options) => {
    options = {
      ...options
    };
    if (options.name) {
      if (options.extension !== void 0 && options.extension !== null) {
        throw new Error("The `name` and `extension` options are mutually exclusive");
      }
      return path19.join(module3.exports.directory(), options.name);
    }
    return getPath() + (options.extension === void 0 || options.extension === null ? "" : "." + options.extension.replace(/^\./, ""));
  };
  module3.exports.file.task = createTask(module3.exports.file);
  module3.exports.directory = ({prefix = ""} = {}) => {
    const directory = getPath(prefix);
    fs17.mkdirSync(directory);
    return directory;
  };
  module3.exports.directory.task = createTask(module3.exports.directory);
  module3.exports.write = async (data, options) => {
    const filename = module3.exports.file(options);
    const write = isStream(data) ? writeStream : writeFile;
    await write(filename, data);
    return filename;
  };
  module3.exports.write.task = createTask(module3.exports.write, {extraArguments: 1});
  module3.exports.writeSync = (data, options) => {
    const filename = module3.exports.file(options);
    fs17.writeFileSync(filename, data);
    return filename;
  };
  Object.defineProperty(module3.exports, "root", {
    get() {
      return tempDir;
    }
  });
});

// ../../node_modules/.pnpm/hasha@5.2.0/node_modules/hasha/index.js
var require_hasha = __commonJS((exports2, module3) => {
  "use strict";
  const fs17 = require("fs");
  const path19 = require("path");
  const crypto = require("crypto");
  const isStream = require_is_stream();
  const {Worker} = (() => {
    try {
      return require("worker_threads");
    } catch (_2) {
      return {};
    }
  })();
  let worker;
  let taskIdCounter = 0;
  const tasks = new Map();
  const recreateWorkerError = (sourceError) => {
    const error = new Error(sourceError.message);
    for (const [key, value] of Object.entries(sourceError)) {
      if (key !== "message") {
        error[key] = value;
      }
    }
    return error;
  };
  const createWorker = () => {
    worker = new Worker(path19.join(__dirname, "thread.js"));
    worker.on("message", (message) => {
      const task = tasks.get(message.id);
      tasks.delete(message.id);
      if (tasks.size === 0) {
        worker.unref();
      }
      if (message.error === void 0) {
        task.resolve(message.value);
      } else {
        task.reject(recreateWorkerError(message.error));
      }
    });
    worker.on("error", (error) => {
      throw error;
    });
  };
  const taskWorker = (method, args2, transferList) => new Promise((resolve, reject) => {
    const id = taskIdCounter++;
    tasks.set(id, {resolve, reject});
    if (worker === void 0) {
      createWorker();
    }
    worker.ref();
    worker.postMessage({id, method, args: args2}, transferList);
  });
  const hasha = (input, options = {}) => {
    let outputEncoding = options.encoding || "hex";
    if (outputEncoding === "buffer") {
      outputEncoding = void 0;
    }
    const hash = crypto.createHash(options.algorithm || "sha512");
    const update = (buffer) => {
      const inputEncoding = typeof buffer === "string" ? "utf8" : void 0;
      hash.update(buffer, inputEncoding);
    };
    if (Array.isArray(input)) {
      input.forEach(update);
    } else {
      update(input);
    }
    return hash.digest(outputEncoding);
  };
  hasha.stream = (options = {}) => {
    let outputEncoding = options.encoding || "hex";
    if (outputEncoding === "buffer") {
      outputEncoding = void 0;
    }
    const stream = crypto.createHash(options.algorithm || "sha512");
    stream.setEncoding(outputEncoding);
    return stream;
  };
  hasha.fromStream = async (stream, options = {}) => {
    if (!isStream(stream)) {
      throw new TypeError("Expected a stream");
    }
    return new Promise((resolve, reject) => {
      stream.on("error", reject).pipe(hasha.stream(options)).on("error", reject).on("finish", function() {
        resolve(this.read());
      });
    });
  };
  if (Worker === void 0) {
    hasha.fromFile = async (filePath, options) => hasha.fromStream(fs17.createReadStream(filePath), options);
    hasha.async = async (input, options) => hasha(input, options);
  } else {
    hasha.fromFile = async (filePath, {algorithm = "sha512", encoding = "hex"} = {}) => {
      const hash = await taskWorker("hashFile", [algorithm, filePath]);
      if (encoding === "buffer") {
        return Buffer.from(hash);
      }
      return Buffer.from(hash).toString(encoding);
    };
    hasha.async = async (input, {algorithm = "sha512", encoding = "hex"} = {}) => {
      if (encoding === "buffer") {
        encoding = void 0;
      }
      const hash = await taskWorker("hash", [algorithm, input]);
      if (encoding === void 0) {
        return Buffer.from(hash);
      }
      return Buffer.from(hash).toString(encoding);
    };
  }
  hasha.fromFileSync = (filePath, options) => hasha(fs17.readFileSync(filePath), options);
  module3.exports = hasha;
});

// ../fetch-engine/dist/downloadZip.js
var require_downloadZip = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.downloadZip = void 0;
  const zlib_1 = __importDefault(require("zlib"));
  const p_retry_1 = __importDefault(require_p_retry());
  const node_fetch_1 = __importDefault(require_lib());
  const fs_1 = __importDefault(require("fs"));
  const getProxyAgent_1 = require_getProxyAgent();
  const tempy_1 = __importDefault(require_tempy());
  const path_1 = __importDefault(require("path"));
  const debug_1 = __importDefault(require_dist2());
  const hasha_1 = __importDefault(require_hasha());
  const util_1 = require("util");
  const rimraf_1 = __importDefault(require_rimraf());
  const debug3 = debug_1.default("downloadZip");
  const del = util_1.promisify(rimraf_1.default);
  async function fetchSha256(url) {
    const [zippedSha256, sha256] = [
      (await node_fetch_1.default(`${url}.sha256`, {
        agent: getProxyAgent_1.getProxyAgent(url)
      }).then((res) => res.text())).split(/\s+/)[0],
      (await node_fetch_1.default(`${url.slice(0, url.length - 3)}.sha256`, {
        agent: getProxyAgent_1.getProxyAgent(url.slice(0, url.length - 3))
      }).then((res) => res.text())).split(/\s+/)[0]
    ];
    return {sha256, zippedSha256};
  }
  async function downloadZip(url, target, progressCb) {
    const tmpDir = tempy_1.default.directory();
    const partial = path_1.default.join(tmpDir, "partial");
    const {sha256, zippedSha256} = await fetchSha256(url);
    const result = await p_retry_1.default(async () => {
      try {
        const resp = await node_fetch_1.default(url, {
          compress: false,
          agent: getProxyAgent_1.getProxyAgent(url)
        });
        if (resp.status !== 200) {
          throw new Error(resp.statusText + " " + url);
        }
        const lastModified = resp.headers.get("last-modified");
        const size = parseFloat(resp.headers.get("content-length"));
        const ws = fs_1.default.createWriteStream(partial);
        return await new Promise(async (resolve, reject) => {
          let bytesRead = 0;
          resp.body.on("error", reject).on("data", (chunk) => {
            bytesRead += chunk.length;
            if (size && progressCb) {
              progressCb(bytesRead / size);
            }
          });
          const gunzip = zlib_1.default.createGunzip();
          gunzip.on("error", reject);
          const zipStream = resp.body.pipe(gunzip);
          const zippedHashPromise = hasha_1.default.fromStream(resp.body, {
            algorithm: "sha256"
          });
          const hashPromise = hasha_1.default.fromStream(zipStream, {
            algorithm: "sha256"
          });
          zipStream.pipe(ws);
          ws.on("error", reject).on("close", () => {
            resolve({lastModified, sha256, zippedSha256});
          });
          const hash = await hashPromise;
          const zippedHash = await zippedHashPromise;
          if (zippedHash !== zippedSha256) {
            throw new Error(`sha256 of ${url} (zipped) should be ${zippedSha256} but is ${zippedHash}`);
          }
          if (hash !== sha256) {
            throw new Error(`sha256 of ${url} (uzipped) should be ${sha256} but is ${hash}`);
          }
        });
      } finally {
      }
    }, {
      retries: 2,
      onFailedAttempt: (err) => debug3(err)
    });
    fs_1.default.copyFileSync(partial, target);
    try {
      await del(partial);
      await del(tmpDir);
    } catch (e) {
      debug3(e);
    }
    return result;
  }
  exports2.downloadZip = downloadZip;
});

// ../../node_modules/.pnpm/commondir@1.0.1/node_modules/commondir/index.js
var require_commondir = __commonJS((exports2, module3) => {
  var path19 = require("path");
  module3.exports = function(basedir, relfiles) {
    if (relfiles) {
      var files = relfiles.map(function(r) {
        return path19.resolve(basedir, r);
      });
    } else {
      var files = basedir;
    }
    var res = files.slice(1).reduce(function(ps, file) {
      if (!file.match(/^([A-Za-z]:)?\/|\\/)) {
        throw new Error("relative path without a basedir");
      }
      var xs = file.split(/\/+|\\+/);
      for (var i = 0; ps[i] === xs[i] && i < Math.min(ps.length, xs.length); i++)
        ;
      return ps.slice(0, i);
    }, files[0].split(/\/+|\\+/));
    return res.length > 1 ? res.join("/") : "/";
  };
});

// ../../node_modules/.pnpm/p-try@2.2.0/node_modules/p-try/index.js
var require_p_try = __commonJS((exports2, module3) => {
  "use strict";
  const pTry = (fn, ...arguments_) => new Promise((resolve) => {
    resolve(fn(...arguments_));
  });
  module3.exports = pTry;
  module3.exports.default = pTry;
});

// ../../node_modules/.pnpm/p-limit@2.3.0/node_modules/p-limit/index.js
var require_p_limit = __commonJS((exports2, module3) => {
  "use strict";
  const pTry = require_p_try();
  const pLimit = (concurrency) => {
    if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {
      return Promise.reject(new TypeError("Expected `concurrency` to be a number from 1 and up"));
    }
    const queue = [];
    let activeCount = 0;
    const next = () => {
      activeCount--;
      if (queue.length > 0) {
        queue.shift()();
      }
    };
    const run = (fn, resolve, ...args2) => {
      activeCount++;
      const result = pTry(fn, ...args2);
      resolve(result);
      result.then(next, next);
    };
    const enqueue = (fn, resolve, ...args2) => {
      if (activeCount < concurrency) {
        run(fn, resolve, ...args2);
      } else {
        queue.push(run.bind(null, fn, resolve, ...args2));
      }
    };
    const generator = (fn, ...args2) => new Promise((resolve) => enqueue(fn, resolve, ...args2));
    Object.defineProperties(generator, {
      activeCount: {
        get: () => activeCount
      },
      pendingCount: {
        get: () => queue.length
      },
      clearQueue: {
        value: () => {
          queue.length = 0;
        }
      }
    });
    return generator;
  };
  module3.exports = pLimit;
  module3.exports.default = pLimit;
});

// ../../node_modules/.pnpm/p-locate@4.1.0/node_modules/p-locate/index.js
var require_p_locate = __commonJS((exports2, module3) => {
  "use strict";
  const pLimit = require_p_limit();
  class EndError extends Error {
    constructor(value) {
      super();
      this.value = value;
    }
  }
  const testElement = async (element, tester) => tester(await element);
  const finder = async (element) => {
    const values = await Promise.all(element);
    if (values[1] === true) {
      throw new EndError(values[0]);
    }
    return false;
  };
  const pLocate = async (iterable, tester, options) => {
    options = {
      concurrency: Infinity,
      preserveOrder: true,
      ...options
    };
    const limit = pLimit(options.concurrency);
    const items = [...iterable].map((element) => [element, limit(testElement, element, tester)]);
    const checkLimit = pLimit(options.preserveOrder ? 1 : Infinity);
    try {
      await Promise.all(items.map((element) => checkLimit(finder, element)));
    } catch (error) {
      if (error instanceof EndError) {
        return error.value;
      }
      throw error;
    }
  };
  module3.exports = pLocate;
  module3.exports.default = pLocate;
});

// ../../node_modules/.pnpm/locate-path@5.0.0/node_modules/locate-path/index.js
var require_locate_path = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const fs17 = require("fs");
  const {promisify: promisify3} = require("util");
  const pLocate = require_p_locate();
  const fsStat = promisify3(fs17.stat);
  const fsLStat = promisify3(fs17.lstat);
  const typeMappings = {
    directory: "isDirectory",
    file: "isFile"
  };
  function checkType({type}) {
    if (type in typeMappings) {
      return;
    }
    throw new Error(`Invalid type specified: ${type}`);
  }
  const matchType = (type, stat) => type === void 0 || stat[typeMappings[type]]();
  module3.exports = async (paths, options) => {
    options = {
      cwd: process.cwd(),
      type: "file",
      allowSymlinks: true,
      ...options
    };
    checkType(options);
    const statFn = options.allowSymlinks ? fsStat : fsLStat;
    return pLocate(paths, async (path_) => {
      try {
        const stat = await statFn(path19.resolve(options.cwd, path_));
        return matchType(options.type, stat);
      } catch (_2) {
        return false;
      }
    }, options);
  };
  module3.exports.sync = (paths, options) => {
    options = {
      cwd: process.cwd(),
      allowSymlinks: true,
      type: "file",
      ...options
    };
    checkType(options);
    const statFn = options.allowSymlinks ? fs17.statSync : fs17.lstatSync;
    for (const path_ of paths) {
      try {
        const stat = statFn(path19.resolve(options.cwd, path_));
        if (matchType(options.type, stat)) {
          return path_;
        }
      } catch (_2) {
      }
    }
  };
});

// ../../node_modules/.pnpm/path-exists@4.0.0/node_modules/path-exists/index.js
var require_path_exists = __commonJS((exports2, module3) => {
  "use strict";
  const fs17 = require("fs");
  const {promisify: promisify3} = require("util");
  const pAccess = promisify3(fs17.access);
  module3.exports = async (path19) => {
    try {
      await pAccess(path19);
      return true;
    } catch (_2) {
      return false;
    }
  };
  module3.exports.sync = (path19) => {
    try {
      fs17.accessSync(path19);
      return true;
    } catch (_2) {
      return false;
    }
  };
});

// ../../node_modules/.pnpm/find-up@4.1.0/node_modules/find-up/index.js
var require_find_up = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const locatePath = require_locate_path();
  const pathExists = require_path_exists();
  const stop = Symbol("findUp.stop");
  module3.exports = async (name, options = {}) => {
    let directory = path19.resolve(options.cwd || "");
    const {root} = path19.parse(directory);
    const paths = [].concat(name);
    const runMatcher = async (locateOptions) => {
      if (typeof name !== "function") {
        return locatePath(paths, locateOptions);
      }
      const foundPath = await name(locateOptions.cwd);
      if (typeof foundPath === "string") {
        return locatePath([foundPath], locateOptions);
      }
      return foundPath;
    };
    while (true) {
      const foundPath = await runMatcher({...options, cwd: directory});
      if (foundPath === stop) {
        return;
      }
      if (foundPath) {
        return path19.resolve(directory, foundPath);
      }
      if (directory === root) {
        return;
      }
      directory = path19.dirname(directory);
    }
  };
  module3.exports.sync = (name, options = {}) => {
    let directory = path19.resolve(options.cwd || "");
    const {root} = path19.parse(directory);
    const paths = [].concat(name);
    const runMatcher = (locateOptions) => {
      if (typeof name !== "function") {
        return locatePath.sync(paths, locateOptions);
      }
      const foundPath = name(locateOptions.cwd);
      if (typeof foundPath === "string") {
        return locatePath.sync([foundPath], locateOptions);
      }
      return foundPath;
    };
    while (true) {
      const foundPath = runMatcher({...options, cwd: directory});
      if (foundPath === stop) {
        return;
      }
      if (foundPath) {
        return path19.resolve(directory, foundPath);
      }
      if (directory === root) {
        return;
      }
      directory = path19.dirname(directory);
    }
  };
  module3.exports.exists = pathExists;
  module3.exports.sync.exists = pathExists.sync;
  module3.exports.stop = stop;
});

// ../../node_modules/.pnpm/pkg-dir@4.2.0/node_modules/pkg-dir/index.js
var require_pkg_dir = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const findUp = require_find_up();
  const pkgDir = async (cwd) => {
    const filePath = await findUp("package.json", {cwd});
    return filePath && path19.dirname(filePath);
  };
  module3.exports = pkgDir;
  module3.exports.default = pkgDir;
  module3.exports.sync = (cwd) => {
    const filePath = findUp.sync("package.json", {cwd});
    return filePath && path19.dirname(filePath);
  };
});

// ../../node_modules/.pnpm/find-cache-dir@3.3.1/node_modules/find-cache-dir/index.js
var require_find_cache_dir = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const fs17 = require("fs");
  const commonDir = require_commondir();
  const pkgDir = require_pkg_dir();
  const makeDir = require_make_dir();
  const {env, cwd} = process;
  const isWritable = (path20) => {
    try {
      fs17.accessSync(path20, fs17.constants.W_OK);
      return true;
    } catch (_2) {
      return false;
    }
  };
  function useDirectory(directory, options) {
    if (options.create) {
      makeDir.sync(directory);
    }
    if (options.thunk) {
      return (...arguments_) => path19.join(directory, ...arguments_);
    }
    return directory;
  }
  function getNodeModuleDirectory(directory) {
    const nodeModules = path19.join(directory, "node_modules");
    if (!isWritable(nodeModules) && (fs17.existsSync(nodeModules) || !isWritable(path19.join(directory)))) {
      return;
    }
    return nodeModules;
  }
  module3.exports = (options = {}) => {
    if (env.CACHE_DIR && !["true", "false", "1", "0"].includes(env.CACHE_DIR)) {
      return useDirectory(path19.join(env.CACHE_DIR, "find-cache-dir"), options);
    }
    let {cwd: directory = cwd()} = options;
    if (options.files) {
      directory = commonDir(directory, options.files);
    }
    directory = pkgDir.sync(directory);
    if (!directory) {
      return;
    }
    const nodeModules = getNodeModuleDirectory(directory);
    if (!nodeModules) {
      return void 0;
    }
    return useDirectory(path19.join(directory, "node_modules", ".cache", options.name), options);
  };
});

// ../fetch-engine/dist/util.js
var require_util3 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getDownloadUrl = exports2.getCacheDir = exports2.getRootCacheDir = void 0;
  const os_1 = __importDefault(require("os"));
  const make_dir_1 = __importDefault(require_make_dir());
  const find_cache_dir_1 = __importDefault(require_find_cache_dir());
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const debug_1 = __importDefault(require_dist2());
  const debug3 = debug_1.default("cache-dir");
  async function getRootCacheDir() {
    if (os_1.default.platform() === "win32") {
      const cacheDir = await find_cache_dir_1.default({name: "prisma", create: true});
      if (cacheDir) {
        return cacheDir;
      }
      if (process.env.APPDATA) {
        return path_1.default.join(process.env.APPDATA, "Prisma");
      }
    }
    if (process.env.AWS_LAMBDA_FUNCTION_VERSION) {
      try {
        await make_dir_1.default(`/tmp/prisma-download`);
        return `/tmp/prisma-download`;
      } catch (e) {
        return null;
      }
    }
    return path_1.default.join(os_1.default.homedir(), ".cache/prisma");
  }
  exports2.getRootCacheDir = getRootCacheDir;
  async function getCacheDir(channel, version, platform) {
    const rootCacheDir = await getRootCacheDir();
    if (!rootCacheDir) {
      return null;
    }
    const cacheDir = path_1.default.join(rootCacheDir, channel, version, platform);
    try {
      if (!fs_1.default.existsSync(cacheDir)) {
        await make_dir_1.default(cacheDir);
      }
    } catch (e) {
      debug3("The following error is being caught and just there for debugging:");
      debug3(e);
      return null;
    }
    return cacheDir;
  }
  exports2.getCacheDir = getCacheDir;
  function getDownloadUrl(channel, version, platform, binaryName, extension = ".gz") {
    const finalExtension = platform === "windows" ? `.exe${extension}` : extension;
    const baseUrl = process.env.PRISMA_BINARIES_MIRROR || "https://binaries.prisma.sh";
    return `${baseUrl}/${channel}/${version}/${platform}/${binaryName}${finalExtension}`;
  }
  exports2.getDownloadUrl = getDownloadUrl;
});

// ../fetch-engine/dist/cleanupCache.js
var require_cleanupCache = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.cleanupCache = void 0;
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const util_1 = require_util3();
  const rimraf_1 = __importDefault(require_rimraf());
  const util_2 = require("util");
  const p_map_1 = __importDefault(require_p_map());
  const del = util_2.promisify(rimraf_1.default);
  const readdir = util_2.promisify(fs_1.default.readdir);
  const stat = util_2.promisify(fs_1.default.stat);
  async function cleanupCache(n = 5) {
    try {
      const rootCacheDir = await util_1.getRootCacheDir();
      const channel = "master";
      const cacheDir = path_1.default.join(rootCacheDir, channel);
      const dirs = await readdir(cacheDir);
      const dirsWithMeta = await Promise.all(dirs.map(async (dirName) => {
        const dir = path_1.default.join(cacheDir, dirName);
        const statResult = await stat(dir);
        return {
          dir,
          created: statResult.birthtime
        };
      }));
      dirsWithMeta.sort((a, b) => a.created < b.created ? 1 : -1);
      const dirsToRemove = dirsWithMeta.slice(n);
      await p_map_1.default(dirsToRemove, (dir) => del(dir.dir), {concurrency: 20});
    } catch (e) {
    }
  }
  exports2.cleanupCache = cleanupCache;
});

// ../fetch-engine/dist/flatMap.js
var require_flatMap = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.flatMap = void 0;
  function flatten(array) {
    return Array.prototype.concat.apply([], array);
  }
  function flatMap(array, callbackFn, thisArg) {
    return flatten(array.map(callbackFn, thisArg));
  }
  exports2.flatMap = flatMap;
});

// ../fetch-engine/dist/getLatestTag.js
var require_getLatestTag = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.urlExists = exports2.getAllUrls = exports2.getLatestTag = void 0;
  const node_fetch_1 = __importDefault(require_lib());
  const getProxyAgent_1 = require_getProxyAgent();
  const util_1 = require_util3();
  const get_platform_1 = require_dist();
  const execa_1 = __importDefault(require_execa());
  const p_map_1 = __importDefault(require_p_map());
  const chalk_1 = __importDefault(require_source());
  async function getLatestTag() {
    if (process.env.RELEASE_PROMOTE_DEV) {
      const versions = await getVersionHashes(process.env.RELEASE_PROMOTE_DEV);
      console.log(`getLatestTag: taking ${versions.engines} as RELEASE_PROMOTE_DEV has been provided`);
      return versions.engines;
    }
    let branch = await getBranch();
    if (branch !== "master" && (!isPatchBranch(branch) && !branch.startsWith("integration/"))) {
      branch = "master";
    }
    branch = branch.replace(/^integration\//, "");
    console.log({branch}, "after replace");
    let commits = await getCommits(branch);
    if ((!commits || !Array.isArray(commits)) && branch !== "master" && !isPatchBranch(branch)) {
      console.log(`Overwriting branch "${branch}" with "master" as it's not a branch we have binaries for`);
      branch = "master";
      commits = await getCommits(branch);
    }
    if (!Array.isArray(commits)) {
      console.error(commits);
      throw new Error(`Could not fetch commits from github: ${JSON.stringify(commits, null, 2)}`);
    }
    return getFirstFinishedCommit(branch, commits);
  }
  exports2.getLatestTag = getLatestTag;
  function getAllUrls(branch, commit) {
    const urls = [];
    const excludedPlatforms = [
      "freebsd",
      "arm",
      "linux-nixos",
      "openbsd",
      "netbsd",
      "freebsd11",
      "freebsd12"
    ];
    const relevantPlatforms = get_platform_1.platforms.filter((p) => !excludedPlatforms.includes(p));
    for (const platform of relevantPlatforms) {
      for (const engine of [
        "query-engine",
        "introspection-engine",
        "migration-engine",
        "prisma-fmt"
      ]) {
        for (const extension of [
          ".gz",
          ".gz.sha256",
          ".gz.sig",
          ".sig",
          ".sha256"
        ]) {
          const downloadUrl = util_1.getDownloadUrl(branch, commit, platform, engine, extension);
          urls.push(downloadUrl);
        }
      }
    }
    return urls;
  }
  exports2.getAllUrls = getAllUrls;
  async function getFirstFinishedCommit(branch, commits) {
    for (const commit of commits) {
      const urls = getAllUrls(branch, commit);
      const exist = await p_map_1.default(urls, urlExists, {concurrency: 10});
      const hasMissing = exist.some((e) => !e);
      if (!hasMissing) {
        return commit;
      } else {
        const missing = urls.filter((_2, i) => !exist[i]);
        if (missing.length !== urls.length) {
          console.log(`${chalk_1.default.blueBright("info")} The engine commit ${commit} is not yet done. We're skipping it as we're in dev. Missing urls: ${missing.length}`);
        }
      }
    }
  }
  async function urlExists(url) {
    try {
      const res = await node_fetch_1.default(url, {
        method: "HEAD",
        agent: getProxyAgent_1.getProxyAgent(url)
      });
      const headers = fromEntries(res.headers.entries());
      if (res.status > 200) {
      }
      if (parseInt(headers["content-length"]) > 0) {
        return res.status < 300;
      }
    } catch (e) {
    }
    return false;
  }
  exports2.urlExists = urlExists;
  function fromEntries(entries) {
    const result = {};
    for (const [key, value] of entries) {
      result[key] = value;
    }
    return result;
  }
  async function getBranch() {
    if (process.env.PATCH_BRANCH) {
      return process.env.PATCH_BRANCH;
    }
    if (process.env.BUILDKITE_BRANCH) {
      return process.env.BUILDKITE_BRANCH;
    }
    if (process.env.GITHUB_CONTEXT) {
      const context = JSON.parse(process.env.GITHUB_CONTEXT);
      return context.head_ref;
    }
    try {
      const result = await execa_1.default.command("git rev-parse --abbrev-ref HEAD", {
        shell: true,
        stdio: "pipe"
      });
      return result.stdout;
    } catch (e) {
      console.error(e);
    }
    return;
  }
  function isPatchBranch(version) {
    return /^2\.(\d+)\.x/.test(version);
  }
  async function getVersionHashes(npmVersion) {
    return node_fetch_1.default(`https://unpkg.com/@prisma/cli@${npmVersion}/package.json`, {
      headers: {
        accept: "application/json"
      }
    }).then((res) => res.json()).then((pkg2) => ({
      engines: pkg2.prisma.version,
      prisma: pkg2.prisma.prismaCommit
    }));
  }
  async function getCommits(branch) {
    const url = `https://github-cache.prisma.workers.dev/repos/prisma/prisma-engines/commits?sha=${branch}`;
    const result = await node_fetch_1.default(url, {
      agent: getProxyAgent_1.getProxyAgent(url),
      headers: {
        Authorization: process.env.GITHUB_TOKEN ? `token ${process.env.GITHUB_TOKEN}` : void 0
      }
    }).then((res) => res.json());
    if (!Array.isArray(result)) {
      return result;
    }
    const commits = result.map((r) => r.sha);
    return commits;
  }
});

// ../fetch-engine/dist/getHash.js
var require_getHash = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getHash = void 0;
  const crypto_1 = __importDefault(require("crypto"));
  const fs_1 = __importDefault(require("fs"));
  function getHash(filePath) {
    const hash = crypto_1.default.createHash("sha256");
    const input = fs_1.default.createReadStream(filePath);
    return new Promise((resolve, reject) => {
      input.on("readable", () => {
        const data = input.read();
        if (data) {
          hash.update(data);
        } else {
          resolve(hash.digest("hex"));
        }
      });
    });
  }
  exports2.getHash = getHash;
});

// ../fetch-engine/dist/download.js
var require_download = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.plusX = exports2.maybeCopyToTmp = exports2.getBinaryEnvVarPath = exports2.getBinaryName = exports2.checkVersionCommand = exports2.getVersion = exports2.download = void 0;
  const fs_1 = __importDefault(require("fs"));
  const util_1 = require("util");
  const chalk_1 = __importDefault(require_source());
  const path_1 = __importDefault(require("path"));
  const debug_1 = __importDefault(require_dist2());
  const make_dir_1 = __importDefault(require_make_dir());
  const execa_1 = __importDefault(require_execa());
  const p_filter_1 = __importDefault(require_p_filter());
  const temp_dir_1 = __importDefault(require_temp_dir());
  const log_1 = require_log();
  const chmod_1 = __importDefault(require_chmod());
  const copy_1 = require_copy();
  const get_platform_1 = require_dist();
  const downloadZip_1 = require_downloadZip();
  const util_2 = require_util3();
  const cleanupCache_1 = require_cleanupCache();
  const flatMap_1 = require_flatMap();
  const getLatestTag_1 = require_getLatestTag();
  const getHash_1 = require_getHash();
  const debug3 = debug_1.default("download");
  const writeFile = util_1.promisify(fs_1.default.writeFile);
  const exists = util_1.promisify(fs_1.default.exists);
  const readFile2 = util_1.promisify(fs_1.default.readFile);
  const channel = "master";
  const binaryToEnvVar = {
    "migration-engine": "PRISMA_MIGRATION_ENGINE_BINARY",
    "query-engine": "PRISMA_QUERY_ENGINE_BINARY",
    "introspection-engine": "PRISMA_INTROSPECTION_ENGINE_BINARY",
    "prisma-fmt": "PRISMA_FMT_BINARY"
  };
  async function download(options) {
    var _a, _b;
    const platform = await get_platform_1.getPlatform();
    const os = await get_platform_1.getos();
    if (["arm", "nixos"].includes(os.distro)) {
      console.error(`${chalk_1.default.yellow("Warning")} Precompiled binaries are not available for ${os.distro}.`);
    } else if (["freebsd11", "freebsd12", "openbsd", "netbsd"].includes(platform)) {
      console.error(`${chalk_1.default.yellow("Warning")} Precompiled binaries are not available for ${platform}. Read more about building your own binaries at https://pris.ly/d/build-binaries`);
    }
    if (!options.binaries || Object.values(options.binaries).length === 0) {
      return {};
    }
    if (options.binaryTargets && Array.isArray(options.binaryTargets)) {
      const unknownTargets = options.binaryTargets.filter((t) => !get_platform_1.platforms.includes(t));
      if (unknownTargets.length > 0) {
        throw new Error(`Unknown binaryTargets ${unknownTargets.join(", ")}`);
      }
    }
    options = {
      ...options,
      binaryTargets: (_a = options.binaryTargets) !== null && _a !== void 0 ? _a : [platform],
      version: (_b = options.version) !== null && _b !== void 0 ? _b : "latest",
      binaries: mapKeys(options.binaries, (key) => engineTypeToBinaryType(key, platform))
    };
    const binaryJobs = flatMap_1.flatMap(Object.entries(options.binaries), ([binaryName, targetFolder]) => options.binaryTargets.map((binaryTarget) => {
      const fileName = getBinaryName(binaryName, binaryTarget);
      return {
        binaryName,
        targetFolder,
        binaryTarget,
        fileName,
        targetFilePath: path_1.default.join(targetFolder, fileName),
        envVarPath: getBinaryEnvVarPath(binaryName)
      };
    }));
    if (process.env.BINARY_DOWNLOAD_VERSION) {
      options.version = process.env.BINARY_DOWNLOAD_VERSION;
    }
    if (options.version === "latest") {
      options.version = await getLatestTag_1.getLatestTag();
    }
    if (options.printVersion) {
      console.log(`version: ${options.version}`);
    }
    const binariesToDownload = await p_filter_1.default(binaryJobs, async (job) => {
      const needsToBeDownloaded = await binaryNeedsToBeDownloaded(job, platform, options.version, options.failSilent);
      return !job.envVarPath && (options.ignoreCache || needsToBeDownloaded);
    });
    if (binariesToDownload.length > 0) {
      const cleanupPromise = cleanupCache_1.cleanupCache();
      let finishBar;
      let setProgress;
      if (options.showProgress) {
        const collectiveBar = getCollectiveBar(options);
        finishBar = collectiveBar.finishBar;
        setProgress = collectiveBar.setProgress;
      }
      await Promise.all(binariesToDownload.map((job) => downloadBinary({
        ...job,
        version: options.version,
        failSilent: options.failSilent,
        progressCb: setProgress ? setProgress(job.targetFilePath) : void 0
      })));
      await cleanupPromise;
      if (finishBar) {
        finishBar();
      }
    }
    const binaryPaths = binaryJobsToBinaryPaths(binaryJobs);
    const dir = eval("__dirname");
    if (dir.startsWith("/snapshot/")) {
      for (const engineType in binaryPaths) {
        const binaryTargets = binaryPaths[engineType];
        for (const binaryTarget in binaryTargets) {
          const binaryPath = binaryTargets[binaryTarget];
          binaryTargets[binaryTarget] = await maybeCopyToTmp(binaryPath);
        }
      }
    }
    return binaryPaths;
  }
  exports2.download = download;
  function getCollectiveBar(options) {
    const bar = log_1.getBar(`Downloading Prisma engines for ${options.binaryTargets.map((p) => chalk_1.default.bold(p)).join(" and ")}`);
    const progressMap = {};
    const numDownloads = Object.values(options.binaries).length * Object.values(options.binaryTargets).length;
    const setProgress = (sourcePath) => (progress) => {
      progressMap[sourcePath] = progress;
      const progressValues = Object.values(progressMap);
      const totalProgress = progressValues.reduce((acc, curr) => {
        return acc + curr;
      }, 0) / numDownloads;
      if (options.progressCb) {
        options.progressCb(totalProgress);
      }
      if (bar) {
        bar.update(totalProgress);
      }
    };
    return {
      setProgress,
      finishBar: () => {
        bar.update(1);
        bar.terminate();
      }
    };
  }
  function binaryJobsToBinaryPaths(jobs) {
    return jobs.reduce((acc, job) => {
      if (!acc[job.binaryName]) {
        acc[job.binaryName] = {};
      }
      acc[job.binaryName][job.binaryTarget] = job.envVarPath || job.targetFilePath;
      return acc;
    }, {});
  }
  async function binaryNeedsToBeDownloaded(job, nativePlatform, version, failSilent) {
    const targetExists = await exists(job.targetFilePath);
    const cachedFile = await getCachedBinaryPath({
      ...job,
      version,
      failSilent
    });
    if (cachedFile) {
      const sha256FilePath = cachedFile + ".sha256";
      if (await exists(sha256FilePath)) {
        const sha256File = await readFile2(sha256FilePath, "utf-8");
        const sha256Cache = await getHash_1.getHash(cachedFile);
        if (sha256File === sha256Cache) {
          if (!targetExists) {
            await copy_1.copy(cachedFile, job.targetFilePath);
          }
          const targetSha256 = await getHash_1.getHash(job.targetFilePath);
          if (sha256File !== targetSha256) {
            await copy_1.copy(cachedFile, job.targetFilePath);
          }
          return false;
        } else {
          return true;
        }
      } else {
        return true;
      }
    }
    if (!targetExists) {
      return true;
    }
    if (job.binaryTarget === nativePlatform) {
      const works = await checkVersionCommand(job.targetFilePath);
      return !works;
    }
    return false;
  }
  async function getVersion2(enginePath) {
    const result = await execa_1.default(enginePath, ["--version"]);
    return result.stdout;
  }
  exports2.getVersion = getVersion2;
  async function checkVersionCommand(enginePath) {
    try {
      const version = await getVersion2(enginePath);
      return version.length > 0;
    } catch (e) {
      return false;
    }
  }
  exports2.checkVersionCommand = checkVersionCommand;
  function getBinaryName(binaryName, platform) {
    const extension = platform === "windows" ? ".exe" : "";
    return `${binaryName}-${platform}${extension}`;
  }
  exports2.getBinaryName = getBinaryName;
  async function getCachedBinaryPath({version, binaryTarget, binaryName}) {
    const cacheDir = await util_2.getCacheDir(channel, version, binaryTarget);
    if (!cacheDir) {
      return null;
    }
    const cachedTargetPath = path_1.default.join(cacheDir, binaryName);
    if (!fs_1.default.existsSync(cachedTargetPath)) {
      return null;
    }
    if (version !== "latest") {
      return cachedTargetPath;
    }
    if (await exists(cachedTargetPath)) {
      return cachedTargetPath;
    }
    return null;
  }
  function getBinaryEnvVarPath(binaryName) {
    const envVar = binaryToEnvVar[binaryName];
    if (envVar && process.env[envVar]) {
      const envVarPath = path_1.default.resolve(process.cwd(), process.env[envVar]);
      if (!fs_1.default.existsSync(envVarPath)) {
        throw new Error(`Env var ${chalk_1.default.bold(envVar)} is provided but provided path ${chalk_1.default.underline(process.env[envVar])} can't be resolved.`);
      }
      debug3(`Using env var ${chalk_1.default.bold(envVar)} for binary ${chalk_1.default.bold(binaryName)}, which points to ${chalk_1.default.underline(process.env[envVar])}`);
      return envVarPath;
    }
    return null;
  }
  exports2.getBinaryEnvVarPath = getBinaryEnvVarPath;
  async function downloadBinary(options) {
    const {version, progressCb, targetFilePath, binaryTarget, binaryName} = options;
    const downloadUrl = util_2.getDownloadUrl("all_commits", version, binaryTarget, binaryName);
    const targetDir = path_1.default.dirname(targetFilePath);
    try {
      fs_1.default.accessSync(targetDir, fs_1.default.constants.W_OK);
      await make_dir_1.default(targetDir);
    } catch (e) {
      if (options.failSilent || e.code !== "EACCES") {
        return;
      } else {
        throw new Error(`Can't write to ${targetDir} please make sure you install "@prisma/cli" with the right permissions.`);
      }
    }
    debug3(`Downloading ${downloadUrl} to ${targetFilePath}`);
    if (progressCb) {
      progressCb(0);
    }
    const {sha256, zippedSha256} = await downloadZip_1.downloadZip(downloadUrl, targetFilePath, progressCb);
    if (progressCb) {
      progressCb(1);
    }
    if (process.platform !== "win32") {
      chmod_1.default(targetFilePath);
    }
    await saveFileToCache(options, version, sha256, zippedSha256);
  }
  async function saveFileToCache(job, version, sha256, zippedSha256) {
    const cacheDir = await util_2.getCacheDir(channel, version, job.binaryTarget);
    if (!cacheDir) {
      return;
    }
    const cachedTargetPath = path_1.default.join(cacheDir, job.binaryName);
    const cachedSha256Path = path_1.default.join(cacheDir, job.binaryName + ".sha256");
    const cachedSha256ZippedPath = path_1.default.join(cacheDir, job.binaryName + ".gz.sha256");
    try {
      await copy_1.copy(job.targetFilePath, cachedTargetPath);
      await writeFile(cachedSha256Path, sha256);
      await writeFile(cachedSha256ZippedPath, zippedSha256);
    } catch (e) {
      debug3(e);
    }
  }
  function engineTypeToBinaryType(engineType, binaryTarget) {
    if (engineType === "introspectionEngine") {
      return "introspection-engine";
    }
    if (engineType === "migrationEngine") {
      return "migration-engine";
    }
    if (engineType === "queryEngine") {
      return "query-engine";
    }
    if (engineType === "prismaFmt") {
      return "prisma-fmt";
    }
    if (engineType === "native") {
      return binaryTarget;
    }
    return engineType;
  }
  function mapKeys(obj, mapper) {
    return Object.entries(obj).reduce((acc, [key, value]) => {
      acc[mapper(key)] = value;
      return acc;
    }, {});
  }
  async function maybeCopyToTmp(file) {
    const dir = eval("__dirname");
    if (dir.startsWith("/snapshot/")) {
      const targetDir = path_1.default.join(temp_dir_1.default, "prisma-binaries");
      await make_dir_1.default(targetDir);
      const target = path_1.default.join(targetDir, path_1.default.basename(file));
      const data = await readFile2(file);
      await writeFile(target, data);
      plusX(target);
      return target;
    }
    return file;
  }
  exports2.maybeCopyToTmp = maybeCopyToTmp;
  function plusX(file) {
    const s = fs_1.default.statSync(file);
    const newMode = s.mode | 64 | 8 | 1;
    if (s.mode === newMode) {
      return;
    }
    const base8 = newMode.toString(8).slice(-3);
    fs_1.default.chmodSync(file, base8);
  }
  exports2.plusX = plusX;
});

// ../fetch-engine/dist/index.js
var require_dist7 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getBinaryName = exports2.getProxyAgent = exports2.getAllUrls = exports2.urlExists = exports2.getLatestTag = exports2.download = void 0;
  var download_1 = require_download();
  Object.defineProperty(exports2, "download", {enumerable: true, get: function() {
    return download_1.download;
  }});
  var getLatestTag_1 = require_getLatestTag();
  Object.defineProperty(exports2, "getLatestTag", {enumerable: true, get: function() {
    return getLatestTag_1.getLatestTag;
  }});
  Object.defineProperty(exports2, "urlExists", {enumerable: true, get: function() {
    return getLatestTag_1.urlExists;
  }});
  Object.defineProperty(exports2, "getAllUrls", {enumerable: true, get: function() {
    return getLatestTag_1.getAllUrls;
  }});
  var getProxyAgent_1 = require_getProxyAgent();
  Object.defineProperty(exports2, "getProxyAgent", {enumerable: true, get: function() {
    return getProxyAgent_1.getProxyAgent;
  }});
  var download_2 = require_download();
  Object.defineProperty(exports2, "getBinaryName", {enumerable: true, get: function() {
    return download_2.getBinaryName;
  }});
});

// ../engine-core/dist/log.js
var require_log2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.convertLog = exports2.isRustError = void 0;
  function isRustError(e) {
    return typeof e.is_panic !== "undefined";
  }
  exports2.isRustError = isRustError;
  function convertLog(rustLog) {
    const isQuery = isQueryLog(rustLog.fields);
    const level = isQuery ? "query" : rustLog.level.toLowerCase();
    return {
      ...rustLog,
      level,
      timestamp: new Date(new Date().getFullYear() + " " + rustLog.timestamp)
    };
  }
  exports2.convertLog = convertLog;
  function isQueryLog(fields) {
    return Boolean(fields.query);
  }
});

// ../../node_modules/.pnpm/ansi-regex@5.0.0/node_modules/ansi-regex/index.js
var require_ansi_regex = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = ({onlyFirst = false} = {}) => {
    const pattern = [
      "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
      "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
    ].join("|");
    return new RegExp(pattern, onlyFirst ? void 0 : "g");
  };
});

// ../../node_modules/.pnpm/strip-ansi@6.0.0/node_modules/strip-ansi/index.js
var require_strip_ansi = __commonJS((exports2, module3) => {
  "use strict";
  const ansiRegex = require_ansi_regex();
  module3.exports = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
});

// ../engine-core/dist/Engine.js
var require_Engine = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getErrorMessageWithLink = exports2.PrismaClientInitializationError = exports2.PrismaClientRustPanicError = exports2.PrismaClientUnknownRequestError = exports2.PrismaClientKnownRequestError = exports2.getMessage = void 0;
  const log_1 = require_log2();
  const debug_1 = require_dist2();
  const util_1 = require_util2();
  const strip_ansi_1 = __importDefault(require_strip_ansi());
  function getMessage(log) {
    if (typeof log === "string") {
      return log;
    } else if (log_1.isRustError(log)) {
      return log.message;
    } else if (log.fields && log.fields.message) {
      if (log.fields.reason) {
        return `${log.fields.message}: ${log.fields.reason}`;
      }
      return log.fields.message;
    } else {
      return JSON.stringify(log);
    }
  }
  exports2.getMessage = getMessage;
  class PrismaClientKnownRequestError extends Error {
    constructor(message, code, clientVersion, meta) {
      super(message);
      this.code = code;
      this.clientVersion = clientVersion;
      this.meta = meta;
    }
  }
  exports2.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
  class PrismaClientUnknownRequestError extends Error {
    constructor(message, clientVersion) {
      super(message);
      this.clientVersion = clientVersion;
    }
  }
  exports2.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
  class PrismaClientRustPanicError extends Error {
    constructor(message, clientVersion) {
      super(message);
      this.clientVersion = clientVersion;
    }
  }
  exports2.PrismaClientRustPanicError = PrismaClientRustPanicError;
  class PrismaClientInitializationError extends Error {
    constructor(message, clientVersion) {
      super(message);
      this.clientVersion = clientVersion;
    }
  }
  exports2.PrismaClientInitializationError = PrismaClientInitializationError;
  function getErrorMessageWithLink({version, platform, title, description}) {
    const logs = normalizeLogs(strip_ansi_1.default(debug_1.getLogs()));
    const moreInfo = description ? `# Description
\`\`\`
${description}
\`\`\`` : "";
    const body = strip_ansi_1.default(`Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | ${process.version.padEnd(19)}| 
| OS              | ${platform.padEnd(19)}|
| Prisma Client   | ${version.padEnd(19)}|

${moreInfo}

## Logs
\`\`\`
${logs}
\`\`\``);
    const url = util_1.getGithubIssueUrl({title, body});
    return `${title}

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

${util_1.link(url)}

If you want the Prisma team to look into it, please open the link above 🙏
`;
  }
  exports2.getErrorMessageWithLink = getErrorMessageWithLink;
  function normalizeLogs(logs) {
    return logs.split("\n").map((l) => {
      return l.replace(/^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)\s*/, "").replace(/\+\d+\s*ms$/, "");
    }).join("\n");
  }
});

// ../engine-core/dist/printGeneratorConfig.js
var require_printGeneratorConfig = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.printDatamodelObject = exports2.GeneratorConfigClass = exports2.printGeneratorConfig = void 0;
  const indent_string_1 = __importDefault(require_indent_string());
  function printGeneratorConfig(config) {
    return String(new GeneratorConfigClass(config));
  }
  exports2.printGeneratorConfig = printGeneratorConfig;
  class GeneratorConfigClass {
    constructor(config) {
      this.config = config;
    }
    toString() {
      const {config} = this;
      const obj = JSON.parse(JSON.stringify({
        provider: config.provider,
        binaryTargets: config.binaryTargets || void 0
      }));
      return `generator ${config.name} {
${indent_string_1.default(printDatamodelObject2(obj), 2)}
}`;
    }
  }
  exports2.GeneratorConfigClass = GeneratorConfigClass;
  function printDatamodelObject2(obj) {
    const maxLength = Object.keys(obj).reduce((max, curr) => Math.max(max, curr.length), 0);
    return Object.entries(obj).map(([key, value]) => `${key.padEnd(maxLength)} = ${niceStringify(value)}`).join("\n");
  }
  exports2.printDatamodelObject = printDatamodelObject2;
  function niceStringify(value) {
    return JSON.parse(JSON.stringify(value, (_2, value2) => {
      if (Array.isArray(value2)) {
        return `[${value2.map((element) => JSON.stringify(element)).join(", ")}]`;
      }
      return JSON.stringify(value2);
    }));
  }
});

// ../engine-core/dist/byline.js
var require_byline3 = __commonJS((exports2, module3) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.createLineStream = void 0;
  var stream = require("stream");
  var util4 = require("util");
  function byline(readStream, options) {
    return module3.exports.createStream(readStream, options);
  }
  exports2.default = byline;
  module3.exports.createStream = function(readStream, options) {
    if (readStream) {
      return createLineStream(readStream, options);
    } else {
      return new LineStream(options);
    }
  };
  function createLineStream(readStream, options) {
    if (!readStream) {
      throw new Error("expected readStream");
    }
    if (!readStream.readable) {
      throw new Error("readStream must be readable");
    }
    var ls = new LineStream(options);
    readStream.pipe(ls);
    return ls;
  }
  exports2.createLineStream = createLineStream;
  module3.exports.LineStream = LineStream;
  function LineStream(options) {
    stream.Transform.call(this, options);
    options = options || {};
    this._readableState.objectMode = true;
    this._lineBuffer = [];
    this._keepEmptyLines = options.keepEmptyLines || false;
    this._lastChunkEndedWithCR = false;
    this.on("pipe", function(src) {
      if (!this.encoding) {
        if (src instanceof stream.Readable) {
          this.encoding = src._readableState.encoding;
        }
      }
    });
  }
  util4.inherits(LineStream, stream.Transform);
  LineStream.prototype._transform = function(chunk, encoding, done) {
    encoding = encoding || "utf8";
    if (Buffer.isBuffer(chunk)) {
      if (encoding == "buffer") {
        chunk = chunk.toString();
        encoding = "utf8";
      } else {
        chunk = chunk.toString(encoding);
      }
    }
    this._chunkEncoding = encoding;
    var lines = chunk.split(/\r\n|\r|\n/g);
    if (this._lastChunkEndedWithCR && chunk[0] == "\n") {
      lines.shift();
    }
    if (this._lineBuffer.length > 0) {
      this._lineBuffer[this._lineBuffer.length - 1] += lines[0];
      lines.shift();
    }
    this._lastChunkEndedWithCR = chunk[chunk.length - 1] == "\r";
    this._lineBuffer = this._lineBuffer.concat(lines);
    this._pushBuffer(encoding, 1, done);
  };
  LineStream.prototype._pushBuffer = function(encoding, keep, done) {
    while (this._lineBuffer.length > keep) {
      var line = this._lineBuffer.shift();
      if (this._keepEmptyLines || line.length > 0) {
        if (!this.push(this._reencode(line, encoding))) {
          var self2 = this;
          setImmediate(function() {
            self2._pushBuffer(encoding, keep, done);
          });
          return;
        }
      }
    }
    done();
  };
  LineStream.prototype._flush = function(done) {
    this._pushBuffer(this._chunkEncoding, 0, done);
  };
  LineStream.prototype._reencode = function(line, chunkEncoding) {
    if (this.encoding && this.encoding != chunkEncoding) {
      return Buffer.from(line, chunkEncoding).toString(this.encoding);
    } else if (this.encoding) {
      return line;
    } else {
      return Buffer.from(line, chunkEncoding);
    }
  };
});

// ../engine-core/dist/omit.js
var require_omit = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.omit = void 0;
  function omit(obj, keys) {
    return Object.keys(obj).filter((key) => !keys.includes(key)).reduce((result, key) => {
      result[key] = obj[key];
      return result;
    }, {});
  }
  exports2.omit = omit;
});

// ../../node_modules/.pnpm/get-stream@6.0.0/node_modules/get-stream/buffer-stream.js
var require_buffer_stream2 = __commonJS((exports2, module3) => {
  "use strict";
  const {PassThrough: PassThroughStream} = require("stream");
  module3.exports = (options) => {
    options = {...options};
    const {array} = options;
    let {encoding} = options;
    const isBuffer = encoding === "buffer";
    let objectMode = false;
    if (array) {
      objectMode = !(encoding || isBuffer);
    } else {
      encoding = encoding || "utf8";
    }
    if (isBuffer) {
      encoding = null;
    }
    const stream = new PassThroughStream({objectMode});
    if (encoding) {
      stream.setEncoding(encoding);
    }
    let length = 0;
    const chunks = [];
    stream.on("data", (chunk) => {
      chunks.push(chunk);
      if (objectMode) {
        length = chunks.length;
      } else {
        length += chunk.length;
      }
    });
    stream.getBufferedValue = () => {
      if (array) {
        return chunks;
      }
      return isBuffer ? Buffer.concat(chunks, length) : chunks.join("");
    };
    stream.getBufferedLength = () => length;
    return stream;
  };
});

// ../../node_modules/.pnpm/get-stream@6.0.0/node_modules/get-stream/index.js
var require_get_stream2 = __commonJS((exports2, module3) => {
  "use strict";
  const {constants: BufferConstants} = require("buffer");
  const stream = require("stream");
  const {promisify: promisify3} = require("util");
  const bufferStream = require_buffer_stream2();
  const streamPipelinePromisified = promisify3(stream.pipeline);
  class MaxBufferError extends Error {
    constructor() {
      super("maxBuffer exceeded");
      this.name = "MaxBufferError";
    }
  }
  async function getStream(inputStream, options) {
    if (!inputStream) {
      throw new Error("Expected a stream");
    }
    options = {
      maxBuffer: Infinity,
      ...options
    };
    const {maxBuffer} = options;
    const stream2 = bufferStream(options);
    await new Promise((resolve, reject) => {
      const rejectPromise = (error) => {
        if (error && stream2.getBufferedLength() <= BufferConstants.MAX_LENGTH) {
          error.bufferedData = stream2.getBufferedValue();
        }
        reject(error);
      };
      (async () => {
        try {
          await streamPipelinePromisified(inputStream, stream2);
          resolve();
        } catch (error) {
          rejectPromise(error);
        }
      })();
      stream2.on("data", () => {
        if (stream2.getBufferedLength() > maxBuffer) {
          rejectPromise(new MaxBufferError());
        }
      });
    });
    return stream2.getBufferedValue();
  }
  module3.exports = getStream;
  module3.exports.buffer = (stream2, options) => getStream(stream2, {...options, encoding: "buffer"});
  module3.exports.array = (stream2, options) => getStream(stream2, {...options, array: true});
  module3.exports.MaxBufferError = MaxBufferError;
});

// ../../node_modules/.pnpm/undici@2.1.0/node_modules/undici/lib/node/http-parser.js
var require_http_parser = __commonJS((exports2, module3) => {
  "use strict";
  const {HTTPParser} = process.binding("http_parser");
  module3.exports = HTTPParser;
});

// ../../node_modules/.pnpm/undici@2.1.0/node_modules/undici/lib/core/symbols.js
var require_symbols = __commonJS((exports2, module3) => {
  module3.exports = {
    kUrl: Symbol("url"),
    kWriting: Symbol("writing"),
    kResuming: Symbol("resuming"),
    kQueue: Symbol("queue"),
    kConnect: Symbol("connect"),
    kResume: Symbol("resume"),
    kPause: Symbol("pause"),
    kSocketTimeout: Symbol("socket timeout"),
    kIdleTimeout: Symbol("idle timeout"),
    kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
    kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
    kKeepAliveTimeout: Symbol("keep alive timeout"),
    kKeepAlive: Symbol("keep alive"),
    kTLSServerName: Symbol("server name"),
    kHost: Symbol("host"),
    kTLSOpts: Symbol("TLS Options"),
    kClosed: Symbol("closed"),
    kNeedDrain: Symbol("need drain"),
    kReset: Symbol("reset"),
    kDestroyed: Symbol("destroyed"),
    kMaxHeadersSize: Symbol("max headers size"),
    kHeadersTimeout: Symbol("headers timeout"),
    kRunningIdx: Symbol("running index"),
    kPendingIdx: Symbol("pending index"),
    kError: Symbol("error"),
    kClient: Symbol("client"),
    kParser: Symbol("parser"),
    kOnDestroyed: Symbol("destroy callbacks"),
    kPipelining: Symbol("pipelinig"),
    kRetryDelay: Symbol("retry delay"),
    kSocketPath: Symbol("socket path"),
    kSocket: Symbol("socket"),
    kRetryTimeout: Symbol("retry timeout"),
    kTLSSession: Symbol("tls session cache")
  };
});

// ../../node_modules/.pnpm/undici@2.1.0/node_modules/undici/lib/core/util.js
var require_util4 = __commonJS((exports2, module3) => {
  "use strict";
  const assert = require("assert");
  const {kDestroyed} = require_symbols();
  const {IncomingMessage} = require("http");
  const util4 = require("util");
  function nop() {
  }
  function isStream(body) {
    return !!(body && typeof body.on === "function");
  }
  function bodyLength(body) {
    if (body && typeof body.on === "function") {
      const state = body._readableState;
      return state && state.ended === true && Number.isFinite(state.length) ? state.length : null;
    }
    assert(!body || Number.isFinite(body.byteLength));
    return body ? body.length : 0;
  }
  function isDestroyed(stream) {
    return !stream || !!(stream.destroyed || stream[kDestroyed]);
  }
  function destroy(stream, err) {
    if (!isStream(stream) || isDestroyed(stream)) {
      return;
    }
    if (typeof stream.destroy === "function") {
      if (err || Object.getPrototypeOf(stream).constructor !== IncomingMessage) {
        stream.destroy(err);
      }
    } else if (err) {
      process.nextTick((stream2, err2) => {
        stream2.emit("error", err2);
      }, stream, err);
    }
    if (stream.destroyed !== true) {
      stream[kDestroyed] = true;
    }
  }
  const KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)s/;
  function parseKeepAliveTimeout(val) {
    const m = val.match(KEEPALIVE_TIMEOUT_EXPR);
    return m ? parseInt(m[1]) * 1e3 : null;
  }
  function parseHeaders(headers) {
    const obj = {};
    for (var i = 0; i < headers.length; i += 2) {
      var key = headers[i].toLowerCase();
      var val = obj[key];
      if (!val) {
        obj[key] = headers[i + 1];
      } else {
        if (!Array.isArray(val)) {
          val = [val];
          obj[key] = val;
        }
        val.push(headers[i + 1]);
      }
    }
    return obj;
  }
  function isBuffer(buffer) {
    return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);
  }
  function errnoException(code, syscall) {
    const name = util4.getSystemErrorName(code);
    const err = new Error(`${syscall} ${name}`);
    err.errno = err;
    err.code = code;
    err.syscall = syscall;
    return err;
  }
  module3.exports = {
    nop,
    errnoException,
    isStream,
    isDestroyed,
    parseHeaders,
    parseKeepAliveTimeout,
    destroy,
    bodyLength,
    isBuffer
  };
});

// ../../node_modules/.pnpm/undici@2.1.0/node_modules/undici/lib/core/errors.js
var require_errors = __commonJS((exports2, module3) => {
  "use strict";
  class UndiciError extends Error {
    constructor(message) {
      super(message);
      this.name = "UndiciError";
      this.code = "UND_ERR";
    }
  }
  class HeadersTimeoutError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, HeadersTimeoutError);
      this.name = "HeadersTimeoutError";
      this.message = message || "Headers Timeout Error";
      this.code = "UND_ERR_HEADERS_TIMEOUT";
    }
  }
  class SocketTimeoutError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, SocketTimeoutError);
      this.name = "SocketTimeoutError";
      this.message = message || "Socket Timeout Error";
      this.code = "UND_ERR_SOCKET_TIMEOUT";
    }
  }
  class RequestTimeoutError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, RequestTimeoutError);
      this.name = "RequestTimeoutError";
      this.message = message || "Request Timeout Error";
      this.code = "UND_ERR_REQUEST_TIMEOUT";
    }
  }
  class InvalidArgumentError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, InvalidArgumentError);
      this.name = "InvalidArgumentError";
      this.message = message || "Invalid Argument Error";
      this.code = "UND_ERR_INVALID_ARG";
    }
  }
  class InvalidReturnValueError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, InvalidReturnValueError);
      this.name = "InvalidReturnValueError";
      this.message = message || "Invalid Return Value Error";
      this.code = "UND_ERR_INVALID_RETURN_VALUE";
    }
  }
  class RequestAbortedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, RequestAbortedError);
      this.name = "RequestAbortedError";
      this.message = message || "Request aborted";
      this.code = "UND_ERR_ABORTED";
    }
  }
  class InformationalError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, InformationalError);
      this.name = "InformationalError";
      this.message = message || "Request information";
      this.code = "UND_ERR_INFO";
    }
  }
  class ContentLengthMismatchError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ContentLengthMismatchError);
      this.name = "ContentLengthMismatchError";
      this.message = message || "Request body length does not match content-length header";
      this.code = "UND_ERR_CONTENT_LENGTH_MISMATCH";
    }
  }
  class TrailerMismatchError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, TrailerMismatchError);
      this.name = "TrailerMismatchError";
      this.message = message || "Trailers does not match trailer header";
      this.code = "UND_ERR_TRAILER_MISMATCH";
    }
  }
  class ClientDestroyedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ClientDestroyedError);
      this.name = "ClientDestroyedError";
      this.message = message || "The client is destroyed";
      this.code = "UND_ERR_DESTROYED";
    }
  }
  class ClientClosedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ClientClosedError);
      this.name = "ClientClosedError";
      this.message = message || "The client is closed";
      this.code = "UND_ERR_CLOSED";
    }
  }
  class SocketError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, SocketError);
      this.name = "SocketError";
      this.message = message || "Socket error";
      this.code = "UND_ERR_SOCKET";
    }
  }
  class NotSupportedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, NotSupportedError);
      this.name = "NotSupportedError";
      this.message = message || "Not supported error";
      this.code = "UND_ERR_NOT_SUPPORTED";
    }
  }
  module3.exports = {
    UndiciError,
    SocketTimeoutError,
    HeadersTimeoutError,
    RequestTimeoutError,
    ContentLengthMismatchError,
    TrailerMismatchError,
    InvalidArgumentError,
    InvalidReturnValueError,
    RequestAbortedError,
    ClientDestroyedError,
    ClientClosedError,
    InformationalError,
    SocketError,
    NotSupportedError
  };
});

// ../../node_modules/.pnpm/undici@2.1.0/node_modules/undici/lib/core/request.js
var require_request = __commonJS((exports2, module3) => {
  "use strict";
  const {
    InvalidArgumentError,
    RequestAbortedError,
    RequestTimeoutError,
    NotSupportedError
  } = require_errors();
  const util4 = require_util4();
  const assert = require("assert");
  const kRequestTimeout = Symbol("request timeout");
  const kTimeout = Symbol("timeout");
  const kHandler = Symbol("handler");
  class Request2 {
    constructor({
      path: path19,
      method,
      body,
      headers,
      idempotent,
      upgrade,
      requestTimeout
    }, handler) {
      if (typeof path19 !== "string" || path19[0] !== "/") {
        throw new InvalidArgumentError("path must be a valid path");
      }
      if (typeof method !== "string") {
        throw new InvalidArgumentError("method must be a string");
      }
      if (upgrade && typeof upgrade !== "string") {
        throw new InvalidArgumentError("upgrade must be a string");
      }
      if (requestTimeout != null && (!Number.isInteger(requestTimeout) || requestTimeout < 0)) {
        throw new InvalidArgumentError("requestTimeout must be a positive integer or zero");
      }
      this.method = method;
      if (body == null) {
        this.body = null;
      } else if (util4.isStream(body)) {
        this.body = body;
      } else if (util4.isBuffer(body)) {
        this.body = body.length ? body : null;
      } else if (typeof body === "string") {
        this.body = body.length ? Buffer.from(body) : null;
      } else {
        throw new InvalidArgumentError("body must be a string, a Buffer or a Readable stream");
      }
      this.aborted = false;
      this.upgrade = upgrade;
      this.path = path19;
      this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
      this.host = null;
      this.contentLength = null;
      this.headers = "";
      if (Array.isArray(headers)) {
        if (headers.length % 2 !== 0) {
          throw new InvalidArgumentError("headers array must be even");
        }
        for (let i = 0; i < headers.length; i += 2) {
          processHeader(this, headers[i + 0], headers[i + 1]);
        }
      } else if (headers && typeof headers === "object") {
        for (const [key, val] of Object.entries(headers)) {
          processHeader(this, key, val);
        }
      } else if (headers != null) {
        throw new InvalidArgumentError("headers must be an object or an array");
      }
      this[kRequestTimeout] = requestTimeout != null ? requestTimeout : 3e4;
      this[kTimeout] = null;
      this[kHandler] = handler;
    }
    onConnect(resume) {
      assert(!this.aborted);
      const abort = (err) => {
        if (!this.aborted) {
          this.onError(err || new RequestAbortedError());
          resume();
        }
      };
      if (this[kRequestTimeout]) {
        if (this[kTimeout]) {
          clearTimeout(this[kTimeout]);
        }
        this[kTimeout] = setTimeout((abort2) => {
          abort2(new RequestTimeoutError());
        }, this[kRequestTimeout], abort);
      }
      this[kHandler].onConnect(abort);
    }
    onHeaders(statusCode, headers, resume) {
      assert(!this.aborted);
      clearRequestTimeout(this);
      return this[kHandler].onHeaders(statusCode, headers, resume);
    }
    onBody(chunk, offset, length) {
      assert(!this.aborted);
      return this[kHandler].onData(chunk.slice(offset, offset + length));
    }
    onUpgrade(statusCode, headers, socket) {
      assert(!this.aborted);
      clearRequestTimeout(this);
      this[kHandler].onUpgrade(statusCode, headers, socket);
    }
    onComplete(trailers) {
      assert(!this.aborted);
      clearRequestTimeout(this);
      this[kHandler].onComplete(trailers);
    }
    onError(err) {
      if (this.aborted) {
        return;
      }
      this.aborted = true;
      clearRequestTimeout(this);
      this[kHandler].onError(err);
    }
  }
  function processHeader(request, key, val) {
    if (val && typeof val === "object") {
      throw new InvalidArgumentError(`invalid ${key} header`);
    } else if (val === void 0) {
      return;
    }
    if (request.host === null && key.length === 4 && key.toLowerCase() === "host") {
      request.host = val;
      request.headers += `${key}: ${val}\r
`;
    } else if (request.contentLength === null && key.length === 14 && key.toLowerCase() === "content-length") {
      request.contentLength = parseInt(val);
      if (!Number.isFinite(request.contentLength)) {
        throw new InvalidArgumentError("invalid content-length header");
      }
    } else if (key.length === 17 && key.toLowerCase() === "transfer-encoding") {
      throw new InvalidArgumentError("invalid transfer-encoding header");
    } else if (key.length === 10 && key.toLowerCase() === "connection") {
      throw new InvalidArgumentError("invalid connection header");
    } else if (key.length === 10 && key.toLowerCase() === "keep-alive") {
      throw new InvalidArgumentError("invalid keep-alive header");
    } else if (key.length === 7 && key.toLowerCase() === "upgrade") {
      throw new InvalidArgumentError("invalid upgrade header");
    } else if (key.length === 6 && key.toLowerCase() === "expect") {
      throw new NotSupportedError("expect header not supported");
    } else {
      request.headers += `${key}: ${val}\r
`;
    }
  }
  function clearRequestTimeout(request) {
    const {[kTimeout]: timeout} = request;
    if (timeout) {
      request[kTimeout] = null;
      clearTimeout(timeout);
    }
  }
  module3.exports = Request2;
});

// ../../node_modules/.pnpm/undici@2.1.0/node_modules/undici/lib/core/client.js
var require_client = __commonJS((exports2, module3) => {
  "use strict";
  const {URL: URL2} = require("url");
  const net = require("net");
  const tls = require("tls");
  const HTTPParser = require_http_parser();
  const EventEmitter = require("events");
  const assert = require("assert");
  const util4 = require_util4();
  const Request2 = require_request();
  const {
    ContentLengthMismatchError,
    SocketTimeoutError,
    TrailerMismatchError,
    InvalidArgumentError,
    RequestAbortedError,
    ClientDestroyedError,
    ClientClosedError,
    HeadersTimeoutError,
    SocketError,
    InformationalError
  } = require_errors();
  const {
    kUrl,
    kReset,
    kPause,
    kHost,
    kResume,
    kClient,
    kParser,
    kConnect,
    kResuming,
    kWriting,
    kQueue,
    kNeedDrain,
    kTLSServerName,
    kIdleTimeout,
    kSocketTimeout,
    kTLSOpts,
    kClosed,
    kDestroyed,
    kPendingIdx,
    kRunningIdx,
    kError,
    kOnDestroyed,
    kPipelining,
    kRetryDelay,
    kRetryTimeout,
    kSocket,
    kSocketPath,
    kKeepAliveTimeout,
    kMaxHeadersSize,
    kHeadersTimeout,
    kKeepAliveMaxTimeout,
    kKeepAliveTimeoutThreshold,
    kKeepAlive,
    kTLSSession
  } = require_symbols();
  const kHostHeader = Symbol("host header");
  const nodeVersions = process.version.split(".");
  const nodeMajorVersion = parseInt(nodeVersions[0].slice(1));
  const nodeMinorVersion = parseInt(nodeVersions[1]);
  const insecureHTTPParser = process.execArgv.includes("--insecure-http-parser");
  class Client extends EventEmitter {
    constructor(url, {
      maxHeaderSize,
      headersTimeout,
      socketTimeout,
      idleTimeout,
      maxKeepAliveTimeout,
      keepAlive,
      keepAliveMaxTimeout = maxKeepAliveTimeout,
      keepAliveTimeoutThreshold,
      socketPath,
      pipelining,
      tls: tls2
    } = {}) {
      super();
      if (typeof url === "string") {
        url = new URL2(url);
      }
      if (!url || typeof url !== "object") {
        throw new InvalidArgumentError("invalid url");
      }
      if (url.port != null && url.port !== "" && !Number.isFinite(parseInt(url.port))) {
        throw new InvalidArgumentError("invalid port");
      }
      if (socketPath != null && typeof socketPath !== "string") {
        throw new InvalidArgumentError("invalid socketPath");
      }
      if (url.hostname != null && typeof url.hostname !== "string") {
        throw new InvalidArgumentError("invalid hostname");
      }
      if (!/https?/.test(url.protocol)) {
        throw new InvalidArgumentError("invalid protocol");
      }
      if (/\/.+/.test(url.pathname) || url.search || url.hash) {
        throw new InvalidArgumentError("invalid url");
      }
      if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
        throw new InvalidArgumentError("invalid maxHeaderSize");
      }
      if (socketTimeout != null && !Number.isFinite(socketTimeout)) {
        throw new InvalidArgumentError("invalid socketTimeout");
      }
      if (idleTimeout != null && (!Number.isFinite(idleTimeout) || idleTimeout <= 0)) {
        throw new InvalidArgumentError("invalid idleTimeout");
      }
      if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
        throw new InvalidArgumentError("invalid keepAliveMaxTimeout");
      }
      if (keepAlive != null && typeof keepAlive !== "boolean") {
        throw new InvalidArgumentError("invalid keepAlive");
      }
      if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
        throw new InvalidArgumentError("invalid keepAliveTimeoutThreshold");
      }
      if (headersTimeout != null && !Number.isFinite(headersTimeout)) {
        throw new InvalidArgumentError("invalid headersTimeout");
      }
      this[kSocket] = null;
      this[kReset] = false;
      this[kPipelining] = pipelining || 1;
      this[kMaxHeadersSize] = maxHeaderSize || 16384;
      this[kHeadersTimeout] = headersTimeout == null ? 3e4 : headersTimeout;
      this[kUrl] = url;
      this[kSocketPath] = socketPath;
      this[kSocketTimeout] = socketTimeout == null ? 3e4 : socketTimeout;
      this[kIdleTimeout] = idleTimeout == null ? 4e3 : idleTimeout;
      this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 6e5 : keepAliveMaxTimeout;
      this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
      this[kKeepAliveTimeout] = this[kIdleTimeout];
      this[kKeepAlive] = keepAlive == null ? true : keepAlive;
      this[kClosed] = false;
      this[kDestroyed] = false;
      this[kTLSServerName] = tls2 && tls2.servername || null;
      this[kHost] = null;
      this[kTLSOpts] = tls2;
      this[kRetryDelay] = 0;
      this[kRetryTimeout] = null;
      this[kOnDestroyed] = [];
      this[kWriting] = false;
      this[kResuming] = 0;
      this[kNeedDrain] = 0;
      this[kResume] = () => {
        if (this[kResuming] === 0) {
          resume(this, true);
        }
      };
      this[kTLSSession] = null;
      this[kHostHeader] = `host: ${this[kUrl].hostname}\r
`;
      this[kQueue] = [];
      this[kRunningIdx] = 0;
      this[kPendingIdx] = 0;
    }
    get pipelining() {
      return this[kPipelining];
    }
    set pipelining(value) {
      this[kPipelining] = value;
      resume(this, true);
    }
    get connected() {
      return this[kSocket] && this[kSocket].connecting !== true && (this[kSocket].authorized !== false || this[kSocket].authorizationError) && !this[kSocket].destroyed;
    }
    get pending() {
      return this[kQueue].length - this[kPendingIdx];
    }
    get running() {
      return this[kPendingIdx] - this[kRunningIdx];
    }
    get size() {
      return this[kQueue].length - this[kRunningIdx];
    }
    get busy() {
      return this[kReset] || this[kWriting] || this.pending > 0;
    }
    get destroyed() {
      return this[kDestroyed];
    }
    get closed() {
      return this[kClosed];
    }
    [kConnect](cb) {
      connect(this);
      this.once("connect", cb);
    }
    dispatch(opts, handler) {
      try {
        const request = new Request2(opts, handler);
        if (this[kDestroyed]) {
          throw new ClientDestroyedError();
        }
        if (this[kClosed]) {
          throw new ClientClosedError();
        }
        this[kQueue].push(request);
        if (this[kResuming]) {
        } else if (util4.isStream(request.body)) {
          this[kResuming] = 1;
          process.nextTick(resume, this);
        } else {
          resume(this, true);
        }
      } catch (err) {
        handler.onError(err);
      }
    }
    close(callback) {
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          this.close((err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      if (this[kDestroyed]) {
        process.nextTick(callback, new ClientDestroyedError(), null);
        return;
      }
      this[kClosed] = true;
      if (!this.size) {
        this.destroy(callback);
      } else {
        this[kOnDestroyed].push(callback);
      }
    }
    destroy(err, callback) {
      if (typeof err === "function") {
        callback = err;
        err = null;
      }
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          this.destroy(err, (err2, data) => {
            return err2 ? reject(err2) : resolve(data);
          });
        });
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      if (this[kDestroyed]) {
        if (this[kOnDestroyed]) {
          this[kOnDestroyed].push(callback);
        } else {
          process.nextTick(callback, null, null);
        }
        return;
      }
      if (!err) {
        err = new ClientDestroyedError();
      }
      for (const request of this[kQueue].splice(this[kPendingIdx])) {
        request.onError(err);
      }
      clearTimeout(this[kRetryTimeout]);
      this[kRetryTimeout] = null;
      this[kClosed] = true;
      this[kDestroyed] = true;
      this[kOnDestroyed].push(callback);
      const onDestroyed = () => {
        const callbacks = this[kOnDestroyed];
        this[kOnDestroyed] = null;
        for (const callback2 of callbacks) {
          callback2(null, null);
        }
      };
      if (!this[kSocket]) {
        process.nextTick(onDestroyed);
      } else {
        util4.destroy(this[kSocket].on("close", onDestroyed), err);
      }
      resume(this);
    }
  }
  class Parser extends HTTPParser {
    constructor(client, socket) {
      if (nodeMajorVersion === 12 && nodeMinorVersion < 19) {
        super();
        this.initialize(HTTPParser.RESPONSE, {}, client[kHeadersTimeout]);
      } else if (nodeMajorVersion === 12 && nodeMinorVersion >= 19) {
        super();
        this.initialize(HTTPParser.RESPONSE, {}, client[kMaxHeadersSize], client[kHeadersTimeout]);
      } else if (nodeMajorVersion > 12) {
        super();
        this.initialize(HTTPParser.RESPONSE, {}, client[kMaxHeadersSize], insecureHTTPParser, client[kHeadersTimeout]);
      } else {
        super(HTTPParser.RESPONSE, false);
      }
      this.client = client;
      this.socket = socket;
      this.statusCode = null;
      this.upgrade = false;
      this.headers = null;
      this.shouldKeepAlive = false;
      this.read = 0;
      this.request = null;
    }
    [HTTPParser.kOnTimeout]() {
      if (this.statusCode) {
        this.socket._unrefTimer();
      } else {
        util4.destroy(this.socket, new HeadersTimeoutError());
      }
    }
    [HTTPParser.kOnHeaders](rawHeaders) {
      if (this.headers) {
        Array.prototype.push.apply(this.headers, rawHeaders);
      } else {
        this.headers = rawHeaders;
      }
    }
    [HTTPParser.kOnExecute](ret) {
      const {upgrade, socket} = this;
      if (!Number.isFinite(ret)) {
        assert(ret instanceof Error);
        util4.destroy(socket, ret);
        return;
      }
      socket._unrefTimer();
      if (upgrade && !socket.destroyed) {
        const {client, headers, statusCode, request} = this;
        assert(!socket.destroyed);
        assert(socket === client[kSocket]);
        assert(!socket.isPaused());
        assert(request.upgrade || request.method === "CONNECT");
        this.headers = null;
        this.statusCode = null;
        this.request = null;
        socket._readableState.flowing = null;
        socket.unshift(this.getCurrentBuffer().slice(ret));
        try {
          request.onUpgrade(statusCode, headers, socket);
        } catch (err) {
          util4.destroy(socket, err);
          request.onError(err);
        }
        if (!socket.destroyed && !request.aborted) {
          detachSocket(socket);
          client[kSocket] = null;
          client[kQueue][client[kRunningIdx]++] = null;
          client.emit("disconnect", new InformationalError("upgrade"));
          setImmediate(() => this.close());
          resume(client);
        }
      }
    }
    [HTTPParser.kOnHeadersComplete](versionMajor, versionMinor, rawHeaders, method, url, statusCode, statusMessage, upgrade, shouldKeepAlive) {
      const {client, socket} = this;
      const request = client[kQueue][client[kRunningIdx]];
      if (socket.destroyed) {
        return;
      }
      assert(!this.upgrade);
      assert(this.statusCode < 200);
      if (statusCode === 100) {
        util4.destroy(socket, new SocketError("bad response"));
        return 1;
      }
      if (upgrade !== Boolean(request.upgrade)) {
        util4.destroy(socket, new SocketError("bad upgrade"));
        return 1;
      }
      if (this.headers) {
        Array.prototype.push.apply(this.headers, rawHeaders);
      } else {
        this.headers = rawHeaders;
      }
      this.statusCode = statusCode;
      this.shouldKeepAlive = shouldKeepAlive;
      this.request = request;
      if (upgrade || request.method === "CONNECT") {
        this.unconsume();
        this.upgrade = true;
        return 2;
      }
      let keepAlive;
      let trailers;
      for (let n = 0; n < this.headers.length; n += 2) {
        const key = this.headers[n + 0];
        const val = this.headers[n + 1];
        if (!keepAlive && key.length === 10 && key.toLowerCase() === "keep-alive") {
          keepAlive = val;
        } else if (!trailers && key.length === 7 && key.toLowerCase() === "trailer") {
          trailers = val;
        }
      }
      const {headers} = this;
      this.headers = null;
      this.trailers = trailers ? trailers.toLowerCase().split(/,\s*/) : null;
      if (shouldKeepAlive && client[kKeepAlive]) {
        const keepAliveTimeout = keepAlive ? util4.parseKeepAliveTimeout(keepAlive) : null;
        if (keepAliveTimeout != null) {
          const timeout = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold], client[kKeepAliveMaxTimeout]);
          if (timeout < 1e3) {
            client[kReset] = true;
          } else {
            client[kKeepAliveTimeout] = timeout;
          }
        } else {
          client[kKeepAliveTimeout] = client[kIdleTimeout];
        }
      } else {
        client[kReset] = true;
      }
      try {
        if (request.onHeaders(statusCode, headers, statusCode < 200 ? null : socket[kResume]) === false) {
          socket[kPause]();
        }
      } catch (err) {
        util4.destroy(socket, err);
        return 1;
      }
      return request.method === "HEAD" || statusCode < 200 ? 1 : 0;
    }
    [HTTPParser.kOnBody](chunk, offset, length) {
      const {socket, statusCode, request} = this;
      if (socket.destroyed) {
        return;
      }
      assert(statusCode >= 200);
      try {
        if (request.onBody(chunk, offset, length) === false) {
          socket[kPause]();
        }
      } catch (err) {
        util4.destroy(socket, err);
      }
    }
    [HTTPParser.kOnMessageComplete]() {
      const {client, socket, statusCode, headers, upgrade, request, trailers} = this;
      if (socket.destroyed) {
        return;
      }
      assert(statusCode >= 100);
      if (upgrade) {
        assert(statusCode < 300 || request.method === "CONNECT");
        return;
      }
      this.statusCode = null;
      this.headers = null;
      this.request = null;
      this.trailers = null;
      if (statusCode < 200) {
        assert(!socket.isPaused());
        return;
      }
      try {
        if (trailers) {
          if (!headers) {
            throw new TrailerMismatchError();
          }
          for (const trailer of trailers) {
            let found = false;
            for (let n = 0; n < headers.length; n += 2) {
              const key = headers[n + 0];
              if (key.length === trailer.length && key.toLowerCase() === trailer.toLowerCase()) {
                found = true;
                break;
              }
            }
            if (!found) {
              throw new TrailerMismatchError();
            }
          }
        }
        request.onComplete(headers);
      } catch (err) {
        util4.destroy(socket, err);
        return;
      }
      client[kQueue][client[kRunningIdx]++] = null;
      if (client[kWriting]) {
        util4.destroy(socket, new InformationalError("reset"));
      } else if (!this.shouldKeepAlive) {
        util4.destroy(socket, new InformationalError("reset"));
      } else if (client[kReset] && !client.running) {
        util4.destroy(socket, new InformationalError("reset"));
      } else {
        socket[kResume]();
        resume(client);
      }
    }
  }
  function onSocketConnect() {
    const {[kClient]: client} = this;
    assert(!this.destroyed);
    assert(!client[kWriting]);
    assert(!client[kRetryTimeout]);
    client[kReset] = false;
    client[kRetryDelay] = 0;
    client.emit("connect");
    resume(client);
  }
  function onSocketTimeout() {
    util4.destroy(this, new SocketTimeoutError());
  }
  function onSocketError(err) {
    const {[kClient]: client} = this;
    this[kError] = err;
    if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
      assert(!client.running);
      while (client.pending && client[kQueue][client[kPendingIdx]].host === client[kHost]) {
        client[kQueue][client[kPendingIdx]++].onError(err);
      }
    } else if (!client.running && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
      assert(client[kPendingIdx] === client[kRunningIdx]);
      for (const request of client[kQueue].splice(client[kRunningIdx])) {
        request.onError(err);
      }
    }
  }
  function onSocketEnd() {
    util4.destroy(this, new SocketError("other side closed"));
  }
  function onSocketClose() {
    const {[kClient]: client, [kParser]: parser} = this;
    const err = this[kError] || new SocketError("closed");
    client[kSocket] = null;
    parser.unconsume();
    setImmediate(() => parser.close());
    if (err.code !== "UND_ERR_INFO") {
      client[kTLSSession] = null;
    }
    if (client[kDestroyed]) {
      assert(!client.pending);
      for (const request of client[kQueue].splice(client[kRunningIdx])) {
        request.onError(err);
      }
      client[kPendingIdx] = client[kRunningIdx];
    } else {
      if (client.running && err.code !== "UND_ERR_INFO") {
        client[kQueue][client[kRunningIdx]].onError(err);
        client[kQueue][client[kRunningIdx]++] = null;
      }
      client[kPendingIdx] = client[kRunningIdx];
      client.emit("disconnect", err);
    }
    resume(client);
  }
  function onSocketSession(session) {
    const {[kClient]: client} = this;
    client[kTLSSession] = session;
  }
  function detachSocket(socket) {
    socket[kPause] = null;
    socket[kResume] = null;
    socket[kClient] = null;
    socket[kParser] = null;
    socket[kError] = null;
    socket.removeListener("timeout", onSocketTimeout).removeListener("session", onSocketSession).removeListener("error", onSocketError).removeListener("end", onSocketEnd).removeListener("close", onSocketClose);
  }
  function connect(client) {
    assert(!client[kSocket]);
    assert(!client[kRetryTimeout]);
    const {protocol, port, hostname} = client[kUrl];
    let socket;
    if (protocol === "https:") {
      const tlsOpts = {
        ...client[kTLSOpts],
        servername: client[kTLSServerName],
        session: client[kTLSSession]
      };
      socket = client[kSocketPath] ? tls.connect(client[kSocketPath], tlsOpts) : tls.connect(port || 443, hostname, tlsOpts);
      socket.on("session", onSocketSession);
    } else {
      socket = client[kSocketPath] ? net.connect(client[kSocketPath]) : net.connect(port || 80, hostname);
    }
    client[kSocket] = socket;
    const parser = new Parser(client, socket);
    if (nodeMajorVersion >= 12) {
      assert(socket._handle);
      parser.consume(socket._handle);
    } else {
      assert(socket._handle && socket._handle._externalStream);
      parser.consume(socket._handle._externalStream);
    }
    socket[kPause] = socketPause.bind(socket);
    socket[kResume] = socketResume.bind(socket);
    socket[kError] = null;
    socket[kParser] = parser;
    socket[kClient] = client;
    socket.setNoDelay(true).setTimeout(client[kIdleTimeout]).on(protocol === "https:" ? "secureConnect" : "connect", onSocketConnect).on("timeout", onSocketTimeout).on("error", onSocketError).on("end", onSocketEnd).on("close", onSocketClose);
  }
  function socketPause() {
    if (this._handle && this._handle.reading) {
      this._handle.reading = false;
      const err = this._handle.readStop();
      if (err) {
        this.destroy(util4.errnoException(err, "read"));
      }
    }
  }
  function socketResume() {
    if (this._handle && !this._handle.reading) {
      this._handle.reading = true;
      const err = this._handle.readStart();
      if (err) {
        this.destroy(util4.errnoException(err, "read"));
      }
    }
  }
  function emitDrain(client) {
    client[kNeedDrain] = 0;
    client.emit("drain");
  }
  function resume(client, sync) {
    if (client[kResuming] === 2) {
      return;
    }
    client[kResuming] = 2;
    _resume(client, sync);
    client[kResuming] = 0;
    if (client[kRunningIdx] > 256) {
      client[kQueue].splice(0, client[kRunningIdx]);
      client[kPendingIdx] -= client[kRunningIdx];
      client[kRunningIdx] = 0;
    }
  }
  function _resume(client, sync) {
    while (true) {
      if (client[kDestroyed]) {
        assert(!client.pending);
        return;
      }
      if (client[kClosed] && !client.size) {
        client.destroy(util4.nop);
        continue;
      }
      if (client[kSocket]) {
        const timeout = client.running ? client[kSocketTimeout] : client[kKeepAliveTimeout];
        if (client[kSocket].timeout !== timeout) {
          client[kSocket].setTimeout(timeout);
        }
      }
      if (client.running) {
        const {aborted} = client[kQueue][client[kRunningIdx]];
        if (aborted) {
          util4.destroy(client[kSocket]);
          return;
        }
      }
      if (!client.pending) {
        if (client[kNeedDrain] === 2 && !client.busy) {
          if (sync) {
            client[kNeedDrain] = 1;
            process.nextTick(emitDrain, client);
          } else {
            emitDrain(client);
          }
          continue;
        }
        return;
      } else {
        client[kNeedDrain] = 2;
      }
      if (client.running >= client[kPipelining]) {
        return;
      }
      const request = client[kQueue][client[kPendingIdx]];
      if (client[kUrl].protocol === "https:" && client[kHost] !== request.host) {
        if (client.running) {
          return;
        }
        client[kHost] = request.host;
        const servername = request.host && !/^\[/.test(request.host) && !net.isIP(request.host) ? request.host : client[kTLSOpts] && client[kTLSOpts].servername;
        if (client[kTLSServerName] !== servername) {
          client[kTLSServerName] = servername;
          client[kTLSSession] = null;
          if (client[kSocket]) {
            util4.destroy(client[kSocket], new InformationalError("servername changed"));
            return;
          }
        }
      }
      if (!client[kSocket] && !client[kRetryTimeout]) {
        if (client[kRetryDelay]) {
          client[kRetryTimeout] = setTimeout(() => {
            client[kRetryTimeout] = null;
            connect(client);
          }, client[kRetryDelay]);
          client[kRetryDelay] = Math.min(client[kRetryDelay] * 2, client[kSocketTimeout]);
        } else {
          connect(client);
          client[kRetryDelay] = 1e3;
        }
        return;
      }
      if (!client.connected) {
        return;
      }
      if (client[kWriting] || client[kReset]) {
        return;
      }
      if (client.running && !client[kKeepAlive]) {
        return;
      }
      if (client.running && !request.idempotent) {
        return;
      }
      if (client.running && (request.upgrade || request.method === "CONNECT")) {
        return;
      }
      if (util4.isStream(request.body) && util4.bodyLength(request.body) === 0) {
        request.body.on("data", function() {
          assert(false);
        }).on("error", function(err) {
          request.onError(err);
        }).on("end", function() {
          util4.destroy(this);
        });
        request.body = null;
      }
      if (client.running && util4.isStream(request.body)) {
        return;
      }
      if (write(client, request)) {
        client[kPendingIdx]++;
      } else {
        client[kQueue].splice(client[kPendingIdx], 1);
      }
    }
  }
  function write(client, request) {
    const {body, method, path: path19, host, upgrade, headers} = request;
    const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
    if (body && typeof body.read === "function") {
      body.read(0);
    }
    let contentLength = util4.bodyLength(body);
    if (contentLength === null) {
      contentLength = request.contentLength;
    }
    if (contentLength === 0 && !expectsPayload) {
      contentLength = null;
    }
    if (request.contentLength !== null && request.contentLength !== contentLength) {
      request.onError(new ContentLengthMismatchError());
      return false;
    }
    try {
      request.onConnect(client[kResume]);
    } catch (err) {
      request.onError(err);
      return false;
    }
    if (request.aborted) {
      return false;
    }
    if (method === "HEAD") {
      client[kReset] = true;
    }
    if (method === "CONNECT" || upgrade) {
      client[kReset] = true;
    }
    let header;
    if (upgrade) {
      header = `${method} ${path19} HTTP/1.1\r
connection: upgrade\r
upgrade: ${upgrade}\r
`;
    } else if (client[kKeepAlive]) {
      header = `${method} ${path19} HTTP/1.1\r
connection: keep-alive\r
`;
    } else {
      header = `${method} ${path19} HTTP/1.1\r
connection: close\r
`;
    }
    if (!host) {
      header += client[kHostHeader];
    }
    if (headers) {
      header += headers;
    }
    const socket = client[kSocket];
    if (!body) {
      if (contentLength === 0) {
        socket.write(`${header}content-length: ${contentLength}\r
\r
\r
`, "ascii");
      } else {
        assert(contentLength === null, "no body must not have content length");
        socket.write(`${header}\r
`, "ascii");
      }
    } else if (util4.isBuffer(body)) {
      assert(contentLength !== null, "buffer body must have content length");
      socket.cork();
      socket.write(`${header}content-length: ${contentLength}\r
\r
`, "ascii");
      socket.write(body);
      socket.write("\r\n", "ascii");
      socket.uncork();
      if (!expectsPayload) {
        client[kReset] = true;
      }
      request.body = null;
    } else {
      client[kWriting] = true;
      assert(util4.isStream(body));
      assert(contentLength !== 0 || !client.running, "stream body cannot be pipelined");
      let finished = false;
      let bytesWritten = 0;
      const onData = function(chunk) {
        try {
          assert(!finished);
          const len = Buffer.byteLength(chunk);
          if (!len) {
            return;
          }
          if (contentLength !== null && bytesWritten + len > contentLength) {
            util4.destroy(socket, new ContentLengthMismatchError());
            return;
          }
          if (bytesWritten === 0) {
            if (!expectsPayload) {
              client[kReset] = true;
            }
            if (contentLength === null) {
              socket.write(`${header}transfer-encoding: chunked\r
`, "ascii");
            } else {
              socket.write(`${header}content-length: ${contentLength}\r
\r
`, "ascii");
            }
          }
          if (contentLength === null) {
            socket.write(`\r
${len.toString(16)}\r
`, "ascii");
          }
          bytesWritten += len;
          if (!socket.write(chunk) && this.pause) {
            this.pause();
          }
        } catch (err) {
          util4.destroy(this, err);
        }
      };
      const onDrain = function() {
        assert(!finished);
        if (body.resume) {
          body.resume();
        }
      };
      const onAbort = function() {
        onFinished(new RequestAbortedError());
      };
      const onFinished = function(err) {
        if (finished) {
          return;
        }
        finished = true;
        assert(client[kWriting] && client.running <= 1);
        client[kWriting] = false;
        if (!err && contentLength !== null && bytesWritten !== contentLength) {
          err = new ContentLengthMismatchError();
        }
        socket.removeListener("drain", onDrain).removeListener("error", onFinished);
        body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
        request.body = null;
        util4.destroy(body, err);
        if (err) {
          util4.destroy(socket, err);
          return;
        }
        if (bytesWritten === 0) {
          if (expectsPayload) {
            socket.write(`${header}content-length: 0\r
\r
\r
`, "ascii");
          } else {
            socket.write(`${header}\r
`, "ascii");
          }
        } else if (contentLength === null) {
          socket.write("\r\n0\r\n\r\n", "ascii");
        }
        resume(client);
      };
      body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
      socket.on("drain", onDrain).on("error", onFinished);
    }
    return true;
  }
  module3.exports = Client;
});

// ../../node_modules/.pnpm/undici@2.1.0/node_modules/undici/lib/node/fixed-queue.js
var require_fixed_queue = __commonJS((exports2, module3) => {
  "use strict";
  const kSize = 2048;
  const kMask = kSize - 1;
  class FixedCircularBuffer {
    constructor() {
      this.bottom = 0;
      this.top = 0;
      this.list = new Array(kSize);
      this.next = null;
    }
    isEmpty() {
      return this.top === this.bottom;
    }
    isFull() {
      return (this.top + 1 & kMask) === this.bottom;
    }
    push(data) {
      this.list[this.top] = data;
      this.top = this.top + 1 & kMask;
    }
    shift() {
      const nextItem = this.list[this.bottom];
      if (nextItem === void 0)
        return null;
      this.list[this.bottom] = void 0;
      this.bottom = this.bottom + 1 & kMask;
      return nextItem;
    }
  }
  module3.exports = class FixedQueue {
    constructor() {
      this.head = this.tail = new FixedCircularBuffer();
    }
    isEmpty() {
      return this.head.isEmpty();
    }
    push(data) {
      if (this.head.isFull()) {
        this.head = this.head.next = new FixedCircularBuffer();
      }
      this.head.push(data);
    }
    shift() {
      const tail = this.tail;
      const next = tail.shift();
      if (tail.isEmpty() && tail.next !== null) {
        this.tail = tail.next;
      }
      return next;
    }
  };
});

// ../../node_modules/.pnpm/undici@2.1.0/node_modules/undici/lib/pool.js
var require_pool = __commonJS((exports2, module3) => {
  "use strict";
  const Client = require_client();
  const {
    ClientClosedError,
    InvalidArgumentError,
    ClientDestroyedError
  } = require_errors();
  const FixedQueue = require_fixed_queue();
  const kClients = Symbol("clients");
  const kQueue = Symbol("queue");
  const kDestroyed = Symbol("destroyed");
  const kClosedPromise = Symbol("closed promise");
  const kClosedResolve = Symbol("closed resolve");
  class Pool {
    constructor(url, {
      connections,
      ...options
    } = {}) {
      if (connections != null && (!Number.isFinite(connections) || connections <= 0)) {
        throw new InvalidArgumentError("invalid connections");
      }
      this[kQueue] = new FixedQueue();
      this[kClosedPromise] = null;
      this[kClosedResolve] = null;
      this[kDestroyed] = false;
      this[kClients] = Array.from({
        length: connections || 10
      }, () => new Client(url, options));
      const pool = this;
      function onDrain() {
        const queue = pool[kQueue];
        while (!this.busy) {
          const item = queue.shift();
          if (!item) {
            break;
          }
          this.dispatch(item.opts, item.handler);
        }
        if (pool[kClosedResolve] && queue.isEmpty()) {
          Promise.all(pool[kClients].map((c) => c.close())).then(pool[kClosedResolve]);
        }
      }
      for (const client of this[kClients]) {
        client.on("drain", onDrain);
      }
    }
    dispatch(opts, handler) {
      try {
        if (this[kDestroyed]) {
          throw new ClientDestroyedError();
        }
        if (this[kClosedPromise]) {
          throw new ClientClosedError();
        }
        const client = this[kClients].find((client2) => !client2.busy);
        if (!client) {
          this[kQueue].push({opts, handler});
        } else {
          client.dispatch(opts, handler);
        }
      } catch (err) {
        handler.onError(err);
      }
    }
    close(cb) {
      try {
        if (this[kDestroyed]) {
          throw new ClientDestroyedError();
        }
        if (!this[kClosedPromise]) {
          if (this[kQueue].isEmpty()) {
            this[kClosedPromise] = Promise.all(this[kClients].map((c) => c.close()));
          } else {
            this[kClosedPromise] = new Promise((resolve) => {
              this[kClosedResolve] = resolve;
            });
          }
        }
        if (cb) {
          this[kClosedPromise].then(() => cb(null, null));
        } else {
          return this[kClosedPromise];
        }
      } catch (err) {
        if (cb) {
          cb(err);
        } else {
          return Promise.reject(err);
        }
      }
    }
    destroy(err, cb) {
      this[kDestroyed] = true;
      if (typeof err === "function") {
        cb = err;
        err = null;
      }
      if (!err) {
        err = new ClientDestroyedError();
      }
      while (true) {
        const item = this[kQueue].shift();
        if (!item) {
          break;
        }
        item.handler.onError(err);
      }
      const promise = Promise.all(this[kClients].map((c) => c.destroy(err)));
      if (cb) {
        promise.then(() => cb(null, null));
      } else {
        return promise;
      }
    }
  }
  module3.exports = Pool;
});

// ../../node_modules/.pnpm/undici@2.1.0/node_modules/undici/lib/abort-signal.js
var require_abort_signal = __commonJS((exports2, module3) => {
  const {RequestAbortedError} = require_errors();
  const kListener = Symbol("kListener");
  const kSignal = Symbol("kSignal");
  function addSignal(self2, signal) {
    self2[kSignal] = signal;
    self2[kListener] = null;
    if (!signal) {
      return;
    }
    self2[kListener] = () => {
      if (self2.abort) {
        self2.abort();
      } else {
        self2.onError(new RequestAbortedError());
      }
    };
    if ("addEventListener" in self2[kSignal]) {
      self2[kSignal].addEventListener("abort", self2[kListener]);
    } else {
      self2[kSignal].addListener("abort", self2[kListener]);
    }
  }
  function removeSignal(self2) {
    if (!self2[kSignal]) {
      return;
    }
    if ("removeEventListener" in self2[kSignal]) {
      self2[kSignal].removeEventListener("abort", self2[kListener]);
    } else {
      self2[kSignal].removeListener("abort", self2[kListener]);
    }
    self2[kSignal] = null;
    self2[kListener] = null;
  }
  module3.exports = {
    addSignal,
    removeSignal
  };
});

// ../../node_modules/.pnpm/undici@2.1.0/node_modules/undici/lib/client-request.js
var require_client_request = __commonJS((exports2, module3) => {
  "use strict";
  const {Readable} = require("stream");
  const {
    InvalidArgumentError,
    RequestAbortedError
  } = require_errors();
  const util4 = require_util4();
  const {AsyncResource} = require("async_hooks");
  const {addSignal, removeSignal} = require_abort_signal();
  const kAbort = Symbol("abort");
  class RequestResponse extends Readable {
    constructor(resume, abort) {
      super({autoDestroy: true, read: resume});
      this[kAbort] = abort;
    }
    _destroy(err, callback) {
      if (!err && !this._readableState.endEmitted) {
        err = new RequestAbortedError();
      }
      if (err) {
        this[kAbort]();
      }
      callback(err);
    }
  }
  class RequestHandler extends AsyncResource {
    constructor(opts, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      const {signal, method, opaque, body} = opts;
      try {
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        if (method === "CONNECT") {
          throw new InvalidArgumentError("invalid method");
        }
        super("UNDICI_REQUEST");
      } catch (err) {
        if (util4.isStream(body)) {
          util4.destroy(body.on("error", util4.nop), err);
        }
        throw err;
      }
      this.opaque = opaque || null;
      this.callback = callback;
      this.res = null;
      this.abort = null;
      this.body = body;
      if (util4.isStream(body)) {
        body.on("error", (err) => {
          this.onError(err);
        });
      }
      addSignal(this, signal);
    }
    onConnect(abort) {
      if (!this.callback) {
        abort();
      } else {
        this.abort = abort;
      }
    }
    onHeaders(statusCode, headers, resume) {
      const {callback, opaque, abort} = this;
      if (statusCode < 200) {
        return;
      }
      const body = new RequestResponse(resume, abort);
      this.callback = null;
      this.res = body;
      this.runInAsyncScope(callback, null, null, {
        statusCode,
        headers: util4.parseHeaders(headers),
        opaque,
        body
      });
    }
    onData(chunk) {
      const {res} = this;
      return res.push(chunk);
    }
    onComplete(trailers) {
      const {res} = this;
      removeSignal(this);
      res.push(null);
    }
    onError(err) {
      const {res, callback, body, opaque} = this;
      removeSignal(this);
      if (callback) {
        this.callback = null;
        process.nextTick((self2, callback2, err2, opaque2) => {
          self2.runInAsyncScope(callback2, null, err2, {opaque: opaque2});
        }, this, callback, err, opaque);
      }
      if (res) {
        this.res = null;
        util4.destroy(res, err);
      }
      if (body) {
        this.body = null;
        util4.destroy(body, err);
      }
    }
  }
  function request(opts, callback) {
    if (callback === void 0) {
      return new Promise((resolve, reject) => {
        request.call(this, opts, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    try {
      this.dispatch(opts, new RequestHandler(opts, callback));
    } catch (err) {
      if (typeof callback === "function") {
        process.nextTick(callback, err, {opaque: opts && opts.opaque});
      } else {
        throw err;
      }
    }
  }
  module3.exports = request;
});

// ../../node_modules/.pnpm/undici@2.1.0/node_modules/undici/lib/client-stream.js
var require_client_stream = __commonJS((exports2, module3) => {
  "use strict";
  const {finished} = require("stream");
  const {
    InvalidArgumentError,
    InvalidReturnValueError
  } = require_errors();
  const util4 = require_util4();
  const {AsyncResource} = require("async_hooks");
  const {addSignal, removeSignal} = require_abort_signal();
  class StreamHandler extends AsyncResource {
    constructor(opts, factory, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      const {signal, method, opaque, body} = opts;
      try {
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("invalid factory");
        }
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        if (method === "CONNECT") {
          throw new InvalidArgumentError("invalid method");
        }
        super("UNDICI_STREAM");
      } catch (err) {
        if (util4.isStream(body)) {
          util4.destroy(body.on("error", util4.nop), err);
        }
        throw err;
      }
      this.opaque = opaque || null;
      this.factory = factory;
      this.callback = callback;
      this.res = null;
      this.abort = null;
      this.trailers = null;
      this.body = body;
      if (util4.isStream(body)) {
        body.on("error", (err) => {
          this.onError(err);
        });
      }
      addSignal(this, signal);
    }
    onConnect(abort) {
      if (!this.callback) {
        abort();
      } else {
        this.abort = abort;
      }
    }
    onHeaders(statusCode, headers, resume) {
      const {factory, opaque} = this;
      if (statusCode < 200) {
        return;
      }
      this.factory = null;
      const res = this.runInAsyncScope(factory, null, {
        statusCode,
        headers: util4.parseHeaders(headers),
        opaque
      });
      if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") {
        throw new InvalidReturnValueError("expected Writable");
      }
      res.on("drain", resume);
      finished(res, {readable: false}, (err) => {
        const {callback, res: res2, opaque: opaque2, trailers, abort} = this;
        this.res = null;
        if (err || !res2.readable) {
          util4.destroy(res2, err);
        }
        this.callback = null;
        this.runInAsyncScope(callback, null, err || null, {opaque: opaque2, trailers});
        if (err) {
          abort();
        }
      });
      this.res = res;
    }
    onData(chunk) {
      const {res} = this;
      return res.write(chunk);
    }
    onComplete(trailers) {
      const {res} = this;
      removeSignal(this);
      this.trailers = trailers ? util4.parseHeaders(trailers) : {};
      res.end();
    }
    onError(err) {
      const {res, callback, opaque, body} = this;
      removeSignal(this);
      this.factory = null;
      if (res) {
        this.res = null;
        util4.destroy(res, err);
      } else if (callback) {
        this.callback = null;
        process.nextTick((self2, callback2, err2, opaque2) => {
          self2.runInAsyncScope(callback2, null, err2, {opaque: opaque2});
        }, this, callback, err, opaque);
      }
      if (body) {
        this.body = null;
        util4.destroy(body, err);
      }
    }
  }
  function stream(opts, factory, callback) {
    if (callback === void 0) {
      return new Promise((resolve, reject) => {
        stream.call(this, opts, factory, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    try {
      this.dispatch(opts, new StreamHandler(opts, factory, callback));
    } catch (err) {
      if (typeof callback === "function") {
        process.nextTick(callback, err, {opaque: opts && opts.opaque});
      } else {
        throw err;
      }
    }
  }
  module3.exports = stream;
});

// ../../node_modules/.pnpm/undici@2.1.0/node_modules/undici/lib/client-pipeline.js
var require_client_pipeline = __commonJS((exports2, module3) => {
  "use strict";
  const {
    Readable,
    Duplex,
    PassThrough
  } = require("stream");
  const {
    InvalidArgumentError,
    InvalidReturnValueError,
    RequestAbortedError
  } = require_errors();
  const util4 = require_util4();
  const {AsyncResource} = require("async_hooks");
  const {assert} = require("console");
  const {addSignal, removeSignal} = require_abort_signal();
  const kResume = Symbol("resume");
  class PipelineRequest extends Readable {
    constructor() {
      super({autoDestroy: true});
      this[kResume] = null;
    }
    _read() {
      const {[kResume]: resume} = this;
      if (resume) {
        this[kResume] = null;
        resume();
      }
    }
    _destroy(err, callback) {
      this._read();
      assert(err || this._readableState.endEmitted);
      callback(err);
    }
  }
  class PipelineResponse extends Readable {
    constructor(resume) {
      super({autoDestroy: true});
      this[kResume] = resume;
    }
    _read() {
      this[kResume]();
    }
    _destroy(err, callback) {
      if (!err && !this._readableState.endEmitted) {
        err = new RequestAbortedError();
      }
      callback(err);
    }
  }
  class PipelineHandler extends AsyncResource {
    constructor(opts, handler) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      if (typeof handler !== "function") {
        throw new InvalidArgumentError("invalid handler");
      }
      const {signal, method, opaque} = opts;
      if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
        throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      }
      if (method === "CONNECT") {
        throw new InvalidArgumentError("invalid method");
      }
      super("UNDICI_PIPELINE");
      this.opaque = opaque || null;
      this.handler = handler;
      this.abort = null;
      addSignal(this, signal);
      this.req = new PipelineRequest().on("error", util4.nop);
      this.ret = new Duplex({
        readableObjectMode: opts.objectMode,
        autoDestroy: true,
        read: () => {
          const {body} = this;
          if (body && body.resume) {
            body.resume();
          }
        },
        write: (chunk, encoding, callback) => {
          const {req} = this;
          if (req.push(chunk, encoding) || req._readableState.destroyed) {
            callback();
          } else {
            req[kResume] = callback;
          }
        },
        destroy: (err, callback) => {
          const {body, req, res, ret, abort} = this;
          if (!err && !ret._readableState.endEmitted) {
            err = new RequestAbortedError();
          }
          if (abort && err) {
            abort();
          }
          util4.destroy(body, err);
          util4.destroy(req, err);
          util4.destroy(res, err);
          removeSignal(this);
          callback(err);
        }
      }).on("prefinish", () => {
        const {req} = this;
        req.push(null);
      });
      this.res = null;
    }
    onConnect(abort) {
      const {ret} = this;
      if (ret.destroyed) {
        abort();
      } else {
        this.abort = abort;
      }
    }
    onHeaders(statusCode, headers, resume) {
      const {opaque, handler} = this;
      if (statusCode < 200) {
        return;
      }
      this.res = new PipelineResponse(resume);
      let body;
      try {
        this.handler = null;
        body = this.runInAsyncScope(handler, null, {
          statusCode,
          headers: util4.parseHeaders(headers),
          opaque,
          body: this.res
        });
      } catch (err) {
        this.res.on("error", util4.nop);
        throw err;
      }
      if (!body || typeof body.on !== "function") {
        throw new InvalidReturnValueError("expected Readable");
      }
      body.on("data", (chunk) => {
        const {ret, body: body2} = this;
        if (!ret.push(chunk) && body2.pause) {
          body2.pause();
        }
      }).on("error", (err) => {
        const {ret} = this;
        util4.destroy(ret, err);
      }).on("end", () => {
        const {ret} = this;
        ret.push(null);
      }).on("close", () => {
        const {ret} = this;
        if (!ret._readableState.ended) {
          util4.destroy(ret, new RequestAbortedError());
        }
      });
      this.body = body;
    }
    onData(chunk) {
      const {res} = this;
      return res.push(chunk);
    }
    onComplete(trailers) {
      const {res} = this;
      res.push(null);
    }
    onError(err) {
      const {ret} = this;
      this.handler = null;
      util4.destroy(ret, err);
    }
  }
  function pipeline(opts, handler) {
    try {
      const pipelineHandler = new PipelineHandler(opts, handler);
      const {
        path: path19,
        method,
        headers,
        idempotent,
        servername,
        signal,
        requestTimeout
      } = opts;
      this.dispatch({
        path: path19,
        method,
        body: pipelineHandler.req,
        headers,
        idempotent,
        servername,
        signal,
        requestTimeout
      }, pipelineHandler);
      return pipelineHandler.ret;
    } catch (err) {
      return new PassThrough().destroy(err);
    }
  }
  module3.exports = pipeline;
});

// ../../node_modules/.pnpm/undici@2.1.0/node_modules/undici/lib/client-upgrade.js
var require_client_upgrade = __commonJS((exports2, module3) => {
  "use strict";
  const {InvalidArgumentError} = require_errors();
  const {AsyncResource} = require("async_hooks");
  const util4 = require_util4();
  const {addSignal, removeSignal} = require_abort_signal();
  class UpgradeHandler extends AsyncResource {
    constructor(opts, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      const {signal, opaque} = opts;
      if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
        throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      }
      super("UNDICI_UPGRADE");
      this.opaque = opaque || null;
      this.callback = callback;
      this.abort = null;
      addSignal(this, signal);
    }
    onConnect(abort) {
      if (!this.callback) {
        abort();
      } else {
        this.abort = abort;
      }
    }
    onUpgrade(statusCode, headers, socket) {
      const {callback, opaque} = this;
      removeSignal(this);
      this.callback = null;
      this.runInAsyncScope(callback, null, null, {
        headers: util4.parseHeaders(headers),
        socket,
        opaque
      });
    }
    onError(err) {
      const {callback, opaque} = this;
      removeSignal(this);
      if (callback) {
        this.callback = null;
        process.nextTick((self2, callback2, err2, opaque2) => {
          self2.runInAsyncScope(callback2, null, err2, {opaque: opaque2});
        }, this, callback, err, opaque);
      }
    }
  }
  function upgrade(opts, callback) {
    if (callback === void 0) {
      return new Promise((resolve, reject) => {
        upgrade.call(this, opts, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    if (typeof callback !== "function") {
      throw new InvalidArgumentError("invalid callback");
    }
    try {
      const upgradeHandler = new UpgradeHandler(opts, callback);
      const {
        path: path19,
        method,
        headers,
        servername,
        signal,
        requestTimeout,
        protocol
      } = opts;
      this.dispatch({
        path: path19,
        method: method || "GET",
        headers,
        servername,
        signal,
        requestTimeout,
        upgrade: protocol || "Websocket"
      }, upgradeHandler);
    } catch (err) {
      process.nextTick(callback, err, {opaque: opts && opts.opaque});
    }
  }
  module3.exports = upgrade;
});

// ../../node_modules/.pnpm/undici@2.1.0/node_modules/undici/lib/client-connect.js
var require_client_connect = __commonJS((exports2, module3) => {
  "use strict";
  const {InvalidArgumentError} = require_errors();
  const {AsyncResource} = require("async_hooks");
  const util4 = require_util4();
  const {addSignal, removeSignal} = require_abort_signal();
  class ConnectHandler extends AsyncResource {
    constructor(opts, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      const {signal, opaque} = opts;
      if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
        throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      }
      super("UNDICI_CONNECT");
      this.opaque = opaque || null;
      this.callback = callback;
      this.abort = null;
      addSignal(this, signal);
    }
    onConnect(abort) {
      if (!this.callback) {
        abort();
      } else {
        this.abort = abort;
      }
    }
    onUpgrade(statusCode, headers, socket) {
      const {callback, opaque} = this;
      removeSignal(this);
      this.callback = null;
      this.runInAsyncScope(callback, null, null, {
        statusCode,
        headers: util4.parseHeaders(headers),
        socket,
        opaque
      });
    }
    onError(err) {
      const {callback, opaque} = this;
      removeSignal(this);
      if (callback) {
        this.callback = null;
        process.nextTick((self2, callback2, err2, opaque2) => {
          self2.runInAsyncScope(callback2, null, err2, {opaque: opaque2});
        }, this, callback, err, opaque);
      }
    }
  }
  function connect(opts, callback) {
    if (callback === void 0) {
      return new Promise((resolve, reject) => {
        connect.call(this, opts, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    if (typeof callback !== "function") {
      throw new InvalidArgumentError("invalid callback");
    }
    try {
      const connectHandler = new ConnectHandler(opts, callback);
      const {
        path: path19,
        headers,
        servername,
        signal,
        requestTimeout
      } = opts;
      this.dispatch({
        path: path19,
        method: "CONNECT",
        headers,
        servername,
        signal,
        requestTimeout
      }, connectHandler);
    } catch (err) {
      process.nextTick(callback, err, {opaque: opts && opts.opaque});
    }
  }
  module3.exports = connect;
});

// ../../node_modules/.pnpm/undici@2.1.0/node_modules/undici/index.js
var require_undici = __commonJS((exports2, module3) => {
  "use strict";
  const Client = require_client();
  const errors = require_errors();
  const Pool = require_pool();
  Client.prototype.request = require_client_request();
  Client.prototype.stream = require_client_stream();
  Client.prototype.pipeline = require_client_pipeline();
  Client.prototype.upgrade = require_client_upgrade();
  Client.prototype.connect = require_client_connect();
  Pool.prototype.request = require_client_request();
  Pool.prototype.stream = require_client_stream();
  Pool.prototype.pipeline = require_client_pipeline();
  Pool.prototype.upgrade = require_client_upgrade();
  Pool.prototype.connect = require_client_connect();
  function undici(url, opts) {
    return new Pool(url, opts);
  }
  undici.Pool = Pool;
  undici.Client = Client;
  undici.errors = errors;
  module3.exports = undici;
});

// ../engine-core/dist/undici.js
var require_undici2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.Undici = void 0;
  const getStream = require_get_stream2();
  const undici_1 = require_undici();
  class Undici {
    constructor(url, moreArgs) {
      this.closed = false;
      this.pool = new undici_1.Pool(url, {
        connections: 100,
        pipelining: 10,
        requestTimeout: 0,
        socketTimeout: 0,
        ...moreArgs
      });
    }
    request(body, customHeaders) {
      return new Promise((resolve, reject) => {
        this.pool.request({
          path: "/",
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            ...customHeaders
          },
          body
        }, async (err, result) => {
          if (err) {
            reject(err);
          } else {
            const {statusCode, headers, body: body2} = result;
            const data = JSON.parse(await getStream(body2));
            resolve({statusCode, headers, data});
          }
        });
      });
    }
    status() {
      return new Promise((resolve, reject) => {
        this.pool.request({
          path: "/",
          method: "GET"
        }, async (err, result) => {
          if (err) {
            reject(err);
          } else {
            const {statusCode, headers, body} = result;
            const data = JSON.parse(await getStream(body));
            resolve({statusCode, headers, data});
          }
        });
      });
    }
    close() {
      if (!this.closed) {
        this.pool.close(() => {
        });
      }
      this.closed = true;
    }
  }
  exports2.Undici = Undici;
});

// ../engine-core/dist/NodeEngine.js
var require_NodeEngine = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.NodeEngine = void 0;
  const Engine_1 = require_Engine();
  const engines_1 = require("@prisma/engines");
  const debug_1 = __importDefault(require_src2());
  const get_platform_1 = require_dist();
  const path_1 = __importDefault(require("path"));
  const net_1 = __importDefault(require("net"));
  const fs_1 = __importDefault(require("fs"));
  const chalk_1 = __importDefault(require_source());
  const printGeneratorConfig_1 = require_printGeneratorConfig();
  const util_1 = require_util2();
  const util_2 = require("util");
  const events_1 = __importDefault(require("events"));
  const log_1 = require_log2();
  const child_process_1 = require("child_process");
  const byline_1 = __importDefault(require_byline3());
  const p_retry_1 = __importDefault(require_p_retry());
  const execa_1 = __importDefault(require_execa());
  const omit_1 = require_omit();
  const undici_1 = require_undici2();
  const debug3 = debug_1.default("engine");
  const exists = util_2.promisify(fs_1.default.exists);
  const readdir = util_2.promisify(fs_1.default.readdir);
  const knownPlatforms = [
    "native",
    "darwin",
    "debian-openssl-1.0.x",
    "debian-openssl-1.1.x",
    "rhel-openssl-1.0.x",
    "rhel-openssl-1.1.x",
    "linux-musl",
    "linux-nixos",
    "windows",
    "freebsd11",
    "freebsd12",
    "openbsd",
    "netbsd",
    "arm"
  ];
  const engines5 = [];
  const socketPaths = [];
  class NodeEngine {
    constructor({cwd, datamodelPath, prismaPath, generator, datasources, showColors, logLevel, logQueries, env, flags, clientVersion, enableExperimental, engineEndpoint, enableDebugLogs, enableEngineDebugMode, useUds}) {
      var _a;
      this.restartCount = 0;
      this.queryEngineStarted = false;
      this.enableExperimental = [];
      this.useUds = false;
      this.queryEngineKilled = false;
      this.managementApiEnabled = false;
      this.ready = false;
      this.stderrLogs = "";
      this.stdoutLogs = "";
      this.handleRequestError = async (error, graceful) => {
        var _a2, _b, _c, _d, _e, _f, _g;
        debug3({error});
        let err;
        if (this.currentRequestPromise.isCanceled && this.lastError) {
          if (this.lastError.is_panic) {
            err = new Engine_1.PrismaClientRustPanicError(Engine_1.getErrorMessageWithLink({
              platform: this.platform,
              title: Engine_1.getMessage(this.lastError),
              version: this.clientVersion
            }), this.clientVersion);
            this.lastPanic = err;
          } else {
            err = new Engine_1.PrismaClientUnknownRequestError(Engine_1.getErrorMessageWithLink({
              platform: this.platform,
              title: Engine_1.getMessage(this.lastError),
              version: this.clientVersion
            }), this.clientVersion);
          }
        } else if (this.currentRequestPromise.isCanceled && this.lastErrorLog) {
          if (((_b = (_a2 = this.lastErrorLog) === null || _a2 === void 0 ? void 0 : _a2.fields) === null || _b === void 0 ? void 0 : _b.message) === "PANIC") {
            err = new Engine_1.PrismaClientRustPanicError(Engine_1.getErrorMessageWithLink({
              platform: this.platform,
              title: Engine_1.getMessage(this.lastErrorLog),
              version: this.clientVersion
            }), this.clientVersion);
            this.lastPanic = err;
          } else {
            err = new Engine_1.PrismaClientUnknownRequestError(Engine_1.getErrorMessageWithLink({
              platform: this.platform,
              title: Engine_1.getMessage(this.lastErrorLog),
              version: this.clientVersion
            }), this.clientVersion);
          }
        } else if (error.code && error.code === "ECONNRESET" || error.code === "ECONNREFUSED" || error.code === "UND_ERR_SOCKET" && error.message.toLowerCase().includes("closed") || error.message.toLowerCase().includes("client is destroyed") || error.message.toLowerCase().includes("other side closed") || error.code === "UND_ERR_CLOSED") {
          if (this.globalKillSignalReceived && !this.child.connected) {
            throw new Engine_1.PrismaClientUnknownRequestError(`The Node.js process already received a ${this.globalKillSignalReceived} signal, therefore the Prisma query engine exited
and your request can't be processed.
You probably have some open handle that prevents your process from exiting.
It could be an open http server or stream that didn't close yet.
We recommend using the \`wtfnode\` package to debug open handles.`, this.clientVersion);
          }
          if (this.restartCount > 4) {
            throw new Error(`Query engine is trying to restart, but can't.
Please look into the logs or turn on the env var DEBUG=* to debug the constantly restarting query engine.`);
          }
          if (this.lastError) {
            if (this.lastError.is_panic) {
              err = new Engine_1.PrismaClientRustPanicError(Engine_1.getErrorMessageWithLink({
                platform: this.platform,
                title: Engine_1.getMessage(this.lastError),
                version: this.clientVersion
              }), this.clientVersion);
              this.lastPanic = err;
            } else {
              err = new Engine_1.PrismaClientUnknownRequestError(Engine_1.getErrorMessageWithLink({
                platform: this.platform,
                title: Engine_1.getMessage(this.lastError),
                version: this.clientVersion
              }), this.clientVersion);
            }
          } else if (this.lastErrorLog) {
            if (((_d = (_c = this.lastErrorLog) === null || _c === void 0 ? void 0 : _c.fields) === null || _d === void 0 ? void 0 : _d.message) === "PANIC") {
              err = new Engine_1.PrismaClientRustPanicError(Engine_1.getErrorMessageWithLink({
                platform: this.platform,
                title: Engine_1.getMessage(this.lastErrorLog),
                version: this.clientVersion
              }), this.clientVersion);
              this.lastPanic = err;
            } else {
              err = new Engine_1.PrismaClientUnknownRequestError(Engine_1.getErrorMessageWithLink({
                platform: this.platform,
                title: Engine_1.getMessage(this.lastErrorLog),
                version: this.clientVersion
              }), this.clientVersion);
            }
          }
          if (!err) {
            let lastLog = this.getLastLog();
            if (!lastLog) {
              await new Promise((r) => setTimeout(r, 500));
              lastLog = this.getLastLog();
            }
            const logs = lastLog || this.stderrLogs || this.stdoutLogs;
            let title = lastLog !== null && lastLog !== void 0 ? lastLog : error.message;
            let description = error.stack + "\nExit code: " + this.exitCode + "\n" + logs;
            description = `signalCode: ${(_e = this.child) === null || _e === void 0 ? void 0 : _e.signalCode} | exitCode: ${(_f = this.child) === null || _f === void 0 ? void 0 : _f.exitCode} | killed: ${(_g = this.child) === null || _g === void 0 ? void 0 : _g.killed}
` + description;
            err = new Engine_1.PrismaClientUnknownRequestError(Engine_1.getErrorMessageWithLink({
              platform: this.platform,
              title,
              version: this.clientVersion,
              description
            }), this.clientVersion);
            debug3(err.message);
            if (graceful) {
              return false;
            }
          }
        }
        if (err) {
          throw err;
        }
        throw error;
      };
      this.env = env;
      this.cwd = this.resolveCwd(cwd);
      this.enableDebugLogs = enableDebugLogs !== null && enableDebugLogs !== void 0 ? enableDebugLogs : false;
      this.enableEngineDebugMode = enableEngineDebugMode !== null && enableEngineDebugMode !== void 0 ? enableEngineDebugMode : false;
      this.datamodelPath = datamodelPath;
      this.prismaPath = (_a = process.env.PRISMA_QUERY_ENGINE_BINARY) !== null && _a !== void 0 ? _a : prismaPath;
      this.generator = generator;
      this.datasources = datasources;
      this.logEmitter = new events_1.default();
      this.showColors = showColors !== null && showColors !== void 0 ? showColors : false;
      this.logLevel = logLevel;
      this.logQueries = logQueries !== null && logQueries !== void 0 ? logQueries : false;
      this.clientVersion = clientVersion;
      this.flags = flags !== null && flags !== void 0 ? flags : [];
      this.enableExperimental = enableExperimental !== null && enableExperimental !== void 0 ? enableExperimental : [];
      const removedFlags = [
        "middlewares",
        "aggregateApi",
        "distinct",
        "aggregations",
        "insensitiveFilters",
        "atomicNumberOperations"
      ];
      const filteredFlags = ["nativeTypes"];
      const removedFlagsUsed = this.enableExperimental.filter((e) => removedFlags.includes(e));
      if (removedFlagsUsed.length > 0) {
        console.log(`${chalk_1.default.blueBright("info")} The preview flags \`${removedFlagsUsed.join("`, `")}\` were removed, you can now safely remove them from your schema.prisma.`);
      }
      this.enableExperimental = this.enableExperimental.filter((e) => !removedFlags.includes(e) && !filteredFlags.includes(e));
      this.engineEndpoint = engineEndpoint;
      if (useUds && process.platform !== "win32") {
        this.socketPath = `/tmp/prisma-${util_1.getRandomString()}.sock`;
        socketPaths.push(this.socketPath);
        this.useUds = useUds;
      }
      if (engineEndpoint) {
        const url = new URL(engineEndpoint);
        this.port = Number(url.port);
      }
      this.logEmitter.on("error", (log) => {
        if (this.enableDebugLogs) {
          debug_1.default("engine:log")(log);
        }
        if (log instanceof Error) {
          debug_1.default("engine:error")(log);
        } else {
          this.lastErrorLog = log;
          if (log.fields.message === "PANIC") {
            this.handlePanic(log);
          }
        }
      });
      if (this.platform) {
        if (!knownPlatforms.includes(this.platform) && !fs_1.default.existsSync(this.platform)) {
          throw new Engine_1.PrismaClientInitializationError(`Unknown ${chalk_1.default.red("PRISMA_QUERY_ENGINE_BINARY")} ${chalk_1.default.redBright.bold(this.platform)}. Possible binaryTargets: ${chalk_1.default.greenBright(knownPlatforms.join(", "))} or a path to the query engine binary.
You may have to run ${chalk_1.default.greenBright("prisma generate")} for your changes to take effect.`, this.clientVersion);
        }
      } else {
        this.getPlatform();
      }
      if (this.enableDebugLogs) {
        debug_1.default.enable("*");
      }
      engines5.push(this);
    }
    resolveCwd(cwd) {
      if (cwd && fs_1.default.existsSync(cwd) && fs_1.default.lstatSync(cwd).isDirectory()) {
        return cwd;
      }
      return process.cwd();
    }
    on(event, listener) {
      if (event === "beforeExit") {
        this.beforeExitListener = listener;
      } else {
        this.logEmitter.on(event, listener);
      }
    }
    async emitExit() {
      if (this.beforeExitListener) {
        try {
          await this.beforeExitListener();
        } catch (e) {
          console.error(e);
        }
      }
    }
    async getPlatform() {
      if (this.platformPromise) {
        return this.platformPromise;
      }
      this.platformPromise = get_platform_1.getPlatform();
      return this.platformPromise;
    }
    getQueryEnginePath(platform, prefix = __dirname) {
      let queryEnginePath = path_1.default.join(prefix, `query-engine-${platform}`);
      if (platform === "windows") {
        queryEnginePath = `${queryEnginePath}.exe`;
      }
      return queryEnginePath;
    }
    handlePanic(log) {
      var _a;
      (_a = this.child) === null || _a === void 0 ? void 0 : _a.kill();
      if (this.currentRequestPromise) {
        this.currentRequestPromise.cancel();
      }
    }
    async resolvePrismaPath() {
      if (this.prismaPath) {
        return this.prismaPath;
      }
      const platform = await this.getPlatform();
      if (this.platform && this.platform !== platform) {
        this.incorrectlyPinnedBinaryTarget = this.platform;
      }
      this.platform = this.platform || platform;
      if (__filename.includes("NodeEngine")) {
        return this.getQueryEnginePath(this.platform, engines_1.getEnginesPath());
      } else {
        const dotPrismaPath = await this.getQueryEnginePath(this.platform, eval(`require('path').join(__dirname, '../../../.prisma/client')`));
        debug3({dotPrismaPath});
        if (fs_1.default.existsSync(dotPrismaPath)) {
          return dotPrismaPath;
        }
        const dirnamePath = await this.getQueryEnginePath(this.platform, eval("__dirname"));
        debug3({dirnamePath});
        if (fs_1.default.existsSync(dirnamePath)) {
          return dirnamePath;
        }
        const parentDirName = await this.getQueryEnginePath(this.platform, path_1.default.join(eval("__dirname"), ".."));
        debug3({parentDirName});
        if (fs_1.default.existsSync(parentDirName)) {
          return parentDirName;
        }
        const datamodelDirName = await this.getQueryEnginePath(this.platform, path_1.default.dirname(this.datamodelPath));
        if (fs_1.default.existsSync(datamodelDirName)) {
          return datamodelDirName;
        }
        const cwdPath = await this.getQueryEnginePath(this.platform, this.cwd);
        if (fs_1.default.existsSync(cwdPath)) {
          return cwdPath;
        }
        const prismaPath = await this.getQueryEnginePath(this.platform);
        debug3({prismaPath});
        return prismaPath;
      }
    }
    async getPrismaPath() {
      const prismaPath = await this.resolvePrismaPath();
      const platform = await this.getPlatform();
      if (!await exists(prismaPath)) {
        const pinnedStr = this.incorrectlyPinnedBinaryTarget ? `
You incorrectly pinned it to ${chalk_1.default.redBright.bold(`${this.incorrectlyPinnedBinaryTarget}`)}
` : "";
        const dir = path_1.default.dirname(prismaPath);
        const dirExists = fs_1.default.existsSync(dir);
        let files = [];
        if (dirExists) {
          files = await readdir(dir);
        }
        let errorText = `Query engine binary for current platform "${chalk_1.default.bold(platform)}" could not be found.${pinnedStr}
This probably happens, because you built Prisma Client on a different platform.
(Prisma Client looked in "${chalk_1.default.underline(prismaPath)}")

Files in ${dir}:

${files.map((f) => `  ${f}`).join("\n")}
`;
        if (this.generator) {
          if (this.generator.binaryTargets.includes(this.platform) || this.generator.binaryTargets.includes("native")) {
            errorText += `
You already added the platform${this.generator.binaryTargets.length > 1 ? "s" : ""} ${this.generator.binaryTargets.map((t) => `"${chalk_1.default.bold(t)}"`).join(", ")} to the "${chalk_1.default.underline("generator")}" block
in the "schema.prisma" file as described in https://pris.ly/d/client-generator,
but something went wrong. That's suboptimal.

Please create an issue at https://github.com/prisma/prisma-client-js/issues/new`;
          } else {
            errorText += `

To solve this problem, add the platform "${this.platform}" to the "${chalk_1.default.underline("generator")}" block in the "schema.prisma" file:
${chalk_1.default.greenBright(this.getFixedGenerator())}

Then run "${chalk_1.default.greenBright("prisma generate")}" for your changes to take effect.
Read more about deploying Prisma Client: https://pris.ly/d/client-generator`;
          }
        } else {
          errorText += `

Read more about deploying Prisma Client: https://pris.ly/d/client-generator
`;
        }
        throw new Engine_1.PrismaClientInitializationError(errorText, this.clientVersion);
      }
      if (this.incorrectlyPinnedBinaryTarget) {
        console.error(`${chalk_1.default.yellow("Warning:")} You pinned the platform ${chalk_1.default.bold(this.incorrectlyPinnedBinaryTarget)}, but Prisma Client detects ${chalk_1.default.bold(await this.getPlatform())}.
This means you should very likely pin the platform ${chalk_1.default.greenBright(await this.getPlatform())} instead.
${chalk_1.default.dim("In case we're mistaken, please report this to us 🙏.")}`);
      }
      if (process.platform !== "win32") {
        util_1.plusX(prismaPath);
      }
      return prismaPath;
    }
    getFixedGenerator() {
      const fixedGenerator = {
        ...this.generator,
        binaryTargets: util_1.fixBinaryTargets(this.generator.binaryTargets, this.platform)
      };
      return printGeneratorConfig_1.printGeneratorConfig(fixedGenerator);
    }
    printDatasources() {
      if (this.datasources) {
        return JSON.stringify(this.datasources);
      }
      return "[]";
    }
    async start() {
      if (!this.startPromise) {
        this.startPromise = this.internalStart();
      }
      return this.startPromise;
    }
    async getEngineEnvVars() {
      const env = {
        PRISMA_DML_PATH: this.datamodelPath,
        RUST_BACKTRACE: "1",
        RUST_LOG: "info"
      };
      if (!this.useUds) {
        env.PORT = String(this.port);
        debug3(`port: ${this.port}`);
      }
      if (this.logQueries || this.logLevel === "info") {
        env.RUST_LOG = "info";
        if (this.logQueries) {
          env.LOG_QUERIES = "true";
        }
      }
      if (this.datasources) {
        env.OVERWRITE_DATASOURCES = this.printDatasources();
      }
      if (!process.env.NO_COLOR && this.showColors) {
        env.CLICOLOR_FORCE = "1";
      }
      return {
        ...this.env,
        ...process.env,
        ...env
      };
    }
    internalStart() {
      return new Promise(async (resolve, reject) => {
        var _a, _b, _c;
        await new Promise((r) => process.nextTick(r));
        if (this.stopPromise) {
          await this.stopPromise;
        }
        if (this.engineEndpoint) {
          try {
            await p_retry_1.default(() => this.undici.status(), {
              retries: 10
            });
          } catch (e) {
            return reject(e);
          }
          return resolve();
        }
        try {
          if (((_a = this.child) === null || _a === void 0 ? void 0 : _a.connected) || this.child && !((_b = this.child) === null || _b === void 0 ? void 0 : _b.killed)) {
            debug3(`There is a child that still runs and we want to start again`);
          }
          this.queryEngineStarted = false;
          this.lastError = void 0;
          this.lastErrorLog = void 0;
          this.lastPanic = void 0;
          this.queryEngineKilled = false;
          this.globalKillSignalReceived = void 0;
          debug3({cwd: this.cwd});
          const prismaPath = await this.getPrismaPath();
          const experimentalFlags = this.enableExperimental && Array.isArray(this.enableExperimental) && this.enableExperimental.length > 0 ? [`--enable-experimental=${this.enableExperimental.join(",")}`] : [];
          const debugFlag = this.enableEngineDebugMode ? ["--debug"] : [];
          const flags = [
            ...experimentalFlags,
            ...debugFlag,
            "--enable-raw-queries",
            ...this.flags
          ];
          if (this.useUds) {
            flags.push("--unix-path", this.socketPath);
          }
          debug3({flags});
          this.port = await this.getFreePort();
          const env = await this.getEngineEnvVars();
          this.child = child_process_1.spawn(prismaPath, flags, {
            env,
            cwd: this.cwd,
            windowsHide: true,
            stdio: ["ignore", "pipe", "pipe"]
          });
          byline_1.default(this.child.stderr).on("data", (msg) => {
            const data = String(msg);
            debug3("stderr", data);
            try {
              const json = JSON.parse(data);
              if (typeof json.is_panic !== "undefined") {
                debug3(json);
                this.lastError = json;
                if (this.engineStartDeferred) {
                  const err = new Engine_1.PrismaClientInitializationError(this.lastError.message, this.clientVersion);
                  this.engineStartDeferred.reject(err);
                }
              }
            } catch (e) {
              if (!data.includes("Printing to stderr") && !data.includes("Listening on ")) {
                this.stderrLogs += "\n" + data;
              }
            }
          });
          byline_1.default(this.child.stdout).on("data", (msg) => {
            var _a2;
            const data = String(msg);
            try {
              const json = JSON.parse(data);
              debug3("stdout", json);
              if (this.engineStartDeferred && json.level === "INFO" && json.target === "query_engine::server" && ((_a2 = json.fields) === null || _a2 === void 0 ? void 0 : _a2.message.startsWith("Started http server"))) {
                if (this.useUds) {
                  this.undici = new undici_1.Undici({
                    hostname: "localhost",
                    protocol: "http:"
                  }, {
                    socketPath: this.socketPath
                  });
                } else {
                  this.undici = new undici_1.Undici(`http://localhost:${this.port}`);
                }
                this.engineStartDeferred.resolve();
                this.engineStartDeferred = void 0;
                this.queryEngineStarted = true;
              }
              if (typeof json.is_panic === "undefined") {
                const log = log_1.convertLog(json);
                this.logEmitter.emit(log.level, log);
                this.lastLog = log;
              } else {
                this.lastError = json;
              }
            } catch (e) {
              debug3(e, data);
            }
          });
          this.child.on("exit", (code) => {
            var _a2, _b2;
            if (this.engineStopDeferred) {
              this.engineStopDeferred.resolve(code);
              return;
            }
            (_a2 = this.undici) === null || _a2 === void 0 ? void 0 : _a2.close();
            this.exitCode = code;
            if (!this.queryEngineKilled && this.queryEngineStarted && this.restartCount < 5) {
              p_retry_1.default(async (attempt) => {
                debug3(`Restart attempt ${attempt}. Waiting for backoff`);
                if (this.backoffPromise) {
                  await this.backoffPromise;
                }
                debug3(`Restart attempt ${attempt}. Backoff done`);
                this.restartCount++;
                const wait = Math.random() * 2 * Math.pow(Math.E, this.restartCount);
                this.startPromise = void 0;
                this.backoffPromise = new Promise((r) => setTimeout(r, wait));
                return this.start();
              }, {
                retries: 4,
                randomize: true,
                minTimeout: 1e3,
                maxTimeout: 60 * 1e3,
                factor: Math.E,
                onFailedAttempt: (e) => {
                  debug3(e);
                }
              });
              return;
            }
            if (code !== 0 && this.engineStartDeferred) {
              let err;
              if (code !== null) {
                err = new Engine_1.PrismaClientInitializationError(`Query engine exited with code ${code}
` + this.stderrLogs, this.clientVersion);
              } else if ((_b2 = this.child) === null || _b2 === void 0 ? void 0 : _b2.signalCode) {
                err = new Engine_1.PrismaClientInitializationError(`Query engine process killed with signal ${this.child.signalCode} for unknown reason.
Make sure that the engine binary at ${prismaPath} is not corrupt.
` + this.stderrLogs, this.clientVersion);
              } else {
                err = new Engine_1.PrismaClientInitializationError(this.stderrLogs, this.clientVersion);
              }
              this.engineStartDeferred.reject(err);
            }
            if (!this.child) {
              return;
            }
            if (this.lastError) {
              return;
            }
            if (this.lastErrorLog) {
              this.lastErrorLog.target = "exit";
              return;
            }
            if (code === 126) {
              this.lastErrorLog = {
                timestamp: new Date(),
                target: "exit",
                level: "error",
                fields: {
                  message: `Couldn't start query engine as it's not executable on this operating system.
You very likely have the wrong "binaryTarget" defined in the schema.prisma file.`
                }
              };
            } else {
              this.lastErrorLog = {
                target: "exit",
                timestamp: new Date(),
                level: "error",
                fields: {
                  message: (this.stderrLogs || "") + (this.stdoutLogs || "") + `
Exit code: ${code}`
                }
              };
            }
          });
          this.child.on("error", (err) => {
            this.lastError = {
              message: err.message,
              backtrace: "Could not start query engine",
              is_panic: false
            };
            reject(err);
          });
          this.child.on("close", (code, signal) => {
            var _a2, _b2;
            (_a2 = this.undici) === null || _a2 === void 0 ? void 0 : _a2.close();
            if (code === null && signal === "SIGABRT" && this.child) {
              const error = new Engine_1.PrismaClientRustPanicError(Engine_1.getErrorMessageWithLink({
                platform: this.platform,
                title: `Panic in Query Engine with SIGABRT signal`,
                description: this.stderrLogs,
                version: this.clientVersion
              }), this.clientVersion);
              this.logEmitter.emit("error", error);
            } else if (code === 255 && signal === null && ((_b2 = this.lastErrorLog) === null || _b2 === void 0 ? void 0 : _b2.fields.message) === "PANIC" && !this.lastPanic) {
              const error = new Engine_1.PrismaClientRustPanicError(Engine_1.getErrorMessageWithLink({
                platform: this.platform,
                title: `${this.lastErrorLog.fields.message}: ${this.lastErrorLog.fields.reason} in
${this.lastErrorLog.fields.file}:${this.lastErrorLog.fields.line}:${this.lastErrorLog.fields.column}`,
                version: this.clientVersion
              }), this.clientVersion);
              this.logEmitter.emit("error", error);
            }
          });
          if (this.lastError) {
            return reject(new Engine_1.PrismaClientInitializationError(Engine_1.getMessage(this.lastError), this.clientVersion));
          }
          if (this.lastErrorLog) {
            return reject(new Engine_1.PrismaClientInitializationError(Engine_1.getMessage(this.lastErrorLog), this.clientVersion));
          }
          try {
            await new Promise((resolve2, reject2) => {
              this.engineStartDeferred = {resolve: resolve2, reject: reject2};
            });
          } catch (err) {
            (_c = this.child) === null || _c === void 0 ? void 0 : _c.kill();
            throw err;
          }
          this.url = `http://localhost:${this.port}`;
          (async () => {
            const engineVersion = await this.version();
            debug3(`Client Version ${this.clientVersion}`);
            debug3(`Engine Version ${engineVersion}`);
          })();
          this.stopPromise = void 0;
          resolve();
        } catch (e) {
          reject(e);
        }
      });
    }
    async stop() {
      if (!this.stopPromise) {
        this.stopPromise = this._stop();
      }
      return this.stopPromise;
    }
    async _stop() {
      var _a, _b;
      if (this.startPromise) {
        await this.startPromise;
      }
      await new Promise((resolve) => process.nextTick(resolve));
      if (this.currentRequestPromise) {
        try {
          await this.currentRequestPromise;
        } catch (e) {
        }
      }
      this.getConfigPromise = void 0;
      let stopChildPromise;
      if (this.child) {
        debug3(`Stopping Prisma engine4`);
        if (this.startPromise) {
          debug3(`Waiting for start promise`);
          await this.startPromise;
        }
        debug3(`Done waiting for start promise`);
        stopChildPromise = new Promise((resolve, reject) => {
          this.engineStopDeferred = {resolve, reject};
        });
        this.queryEngineKilled = true;
        (_a = this.undici) === null || _a === void 0 ? void 0 : _a.close();
        (_b = this.child) === null || _b === void 0 ? void 0 : _b.kill();
        this.child = void 0;
      }
      if (stopChildPromise) {
        await stopChildPromise;
      }
      await new Promise((r) => process.nextTick(r));
      this.startPromise = void 0;
      this.engineStopDeferred = void 0;
      setTimeout(() => {
        if (this.socketPath) {
          try {
            fs_1.default.unlinkSync(this.socketPath);
          } catch (e) {
            debug3(e);
          }
          socketPaths.splice(socketPaths.indexOf(this.socketPath), 1);
          this.socketPath = void 0;
        }
      });
    }
    async kill(signal) {
      var _a, _b;
      this.getConfigPromise = void 0;
      this.globalKillSignalReceived = signal;
      this.queryEngineKilled = true;
      (_a = this.child) === null || _a === void 0 ? void 0 : _a.kill();
      (_b = this.undici) === null || _b === void 0 ? void 0 : _b.close();
    }
    getFreePort() {
      return new Promise((resolve, reject) => {
        const server = net_1.default.createServer((s) => s.end(""));
        server.unref();
        server.on("error", reject);
        server.listen(0, () => {
          const address = server.address();
          const port = typeof address === "string" ? parseInt(address.split(":").slice(-1)[0], 10) : address.port;
          server.close((e) => {
            if (e) {
              reject(e);
            }
            resolve(port);
          });
        });
      });
    }
    async getConfig() {
      if (!this.getConfigPromise) {
        this.getConfigPromise = this._getConfig();
      }
      return this.getConfigPromise;
    }
    async _getConfig() {
      const prismaPath = await this.getPrismaPath();
      const env = await this.getEngineEnvVars();
      const result = await execa_1.default(prismaPath, ["cli", "get-config"], {
        env: omit_1.omit(env, ["PORT"]),
        cwd: this.cwd
      });
      return JSON.parse(result.stdout);
    }
    async version() {
      const prismaPath = await this.getPrismaPath();
      const result = await execa_1.default(prismaPath, ["--version"], {
        env: {
          ...process.env
        }
      });
      return result.stdout;
    }
    async request(query, headers, numTry = 1) {
      if (this.stopPromise) {
        await this.stopPromise;
      }
      await this.start();
      if (!this.child && !this.engineEndpoint) {
        throw new Engine_1.PrismaClientUnknownRequestError(`Can't perform request, as the Engine has already been stopped`, this.clientVersion);
      }
      this.currentRequestPromise = this.undici.request(stringifyQuery(query), headers);
      return this.currentRequestPromise.then(({data, headers: headers2}) => {
        if (data.errors) {
          if (data.errors.length === 1) {
            throw this.graphQLToJSError(data.errors[0]);
          }
          throw new Error(JSON.stringify(data.errors));
        }
        const elapsed = parseInt(headers2["x-elapsed"]) / 1e3;
        if (this.restartCount > 0) {
          this.restartCount = 0;
        }
        return {data, elapsed};
      }).catch(async (e) => {
        const isError7 = await this.handleRequestError(e, numTry < 3);
        if (!isError7) {
          if (numTry < 3) {
            await new Promise((r) => setTimeout(r, Math.random() * 1e3));
            return this.request(query, headers, numTry + 1);
          }
        }
        throw isError7;
      });
    }
    async requestBatch(queries, transaction = false, numTry = 1) {
      await this.start();
      if (!this.child && !this.engineEndpoint) {
        throw new Engine_1.PrismaClientUnknownRequestError(`Can't perform request, as the Engine has already been stopped`, this.clientVersion);
      }
      const variables = {};
      const body = {
        batch: queries.map((query) => ({query, variables})),
        transaction
      };
      this.currentRequestPromise = this.undici.request(JSON.stringify(body));
      return this.currentRequestPromise.then(({data, headers}) => {
        const elapsed = parseInt(headers["x-elapsed"]) / 1e3;
        if (Array.isArray(data)) {
          return data.map((result) => {
            if (result.errors) {
              return this.graphQLToJSError(result.errors[0]);
            }
            return {
              data: result,
              elapsed
            };
          });
        } else {
          if (data.errors && data.errors.length === 1) {
            throw new Error(data.errors[0].error);
          }
          throw new Error(JSON.stringify(data));
        }
      }).catch(async (e) => {
        const isError7 = await this.handleRequestError(e, numTry < 3);
        if (!isError7) {
          if (numTry < 3) {
            await new Promise((r) => setTimeout(r, Math.random() * 1e3));
            return this.requestBatch(queries, transaction, numTry + 1);
          }
        }
        throw isError7;
      });
    }
    getLastLog() {
      var _a, _b, _c;
      const message = (_b = (_a = this.lastLog) === null || _a === void 0 ? void 0 : _a.fields) === null || _b === void 0 ? void 0 : _b.message;
      if (message) {
        const fields = Object.entries((_c = this.lastLog) === null || _c === void 0 ? void 0 : _c.fields).filter(([key]) => key !== "message").map(([key, value]) => {
          return `${key}: ${value}`;
        }).join(", ");
        if (fields) {
          return `${message}  ${fields}`;
        }
        return message;
      }
      return null;
    }
    graphQLToJSError(error) {
      if (error.user_facing_error.error_code) {
        return new Engine_1.PrismaClientKnownRequestError(error.user_facing_error.message, error.user_facing_error.error_code, this.clientVersion, error.user_facing_error.meta);
      }
      return new Engine_1.PrismaClientUnknownRequestError(error.user_facing_error.message, this.clientVersion);
    }
  }
  exports2.NodeEngine = NodeEngine;
  function stringifyQuery(q) {
    return `{"variables":{},"query":${JSON.stringify(q)}}`;
  }
  function hookProcess(handler, exit = false) {
    process.once(handler, async () => {
      for (const engine of engines5) {
        await engine.emitExit();
        engine.kill(handler);
      }
      engines5.splice(0, engines5.length);
      if (socketPaths.length > 0) {
        for (const socketPath of socketPaths) {
          try {
            fs_1.default.unlinkSync(socketPath);
          } catch (e) {
          }
        }
      }
      if (exit && process.listenerCount(handler) === 0) {
        process.exit();
      }
    });
  }
  hookProcess("beforeExit");
  hookProcess("exit");
  hookProcess("SIGINT", true);
  hookProcess("SIGUSR1", true);
  hookProcess("SIGUSR2", true);
  hookProcess("SIGTERM", true);
});

// ../engine-core/dist/getInternalDatamodelJson.js
var require_getInternalDatamodelJson = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getInternalDatamodelJson = void 0;
  const path_1 = __importDefault(require("path"));
  const child_process_1 = require("child_process");
  const byline_1 = __importDefault(require_byline3());
  function getInternalDatamodelJson(datamodel, schemaInferrerPath = path_1.default.join(__dirname, "../schema-inferrer-bin")) {
    return new Promise((resolve, reject) => {
      const proc = child_process_1.spawn(schemaInferrerPath, {
        stdio: ["pipe", "pipe", process.stderr]
      });
      proc.on("error", function(err) {
        console.error("[schema-inferrer-bin] error: %s", err);
        reject(err);
      });
      proc.on("exit", function(code, signal) {
        if (code !== 0) {
          console.error("[schema-inferrer-bin] exit: code=%s signal=%s", code, signal);
        }
        reject();
      });
      const out = byline_1.default(proc.stdout);
      out.on("data", (line) => {
        const result = JSON.parse(line);
        const resultB64 = Buffer.from(JSON.stringify(result)).toString("base64");
        resolve(resultB64);
      });
      const cut = datamodel.replace(/\n/g, " ");
      proc.stdin.write(JSON.stringify({dataModel: cut}) + "\n");
    });
  }
  exports2.getInternalDatamodelJson = getInternalDatamodelJson;
});

// ../engine-core/dist/index.js
var require_dist8 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.fixBinaryTargets = exports2.printGeneratorConfig = exports2.getInternalDatamodelJson = exports2.Engine = exports2.PrismaClientRustPanicError = exports2.PrismaClientInitializationError = exports2.PrismaClientUnknownRequestError = exports2.PrismaClientKnownRequestError = void 0;
  var Engine_1 = require_Engine();
  Object.defineProperty(exports2, "PrismaClientKnownRequestError", {enumerable: true, get: function() {
    return Engine_1.PrismaClientKnownRequestError;
  }});
  Object.defineProperty(exports2, "PrismaClientUnknownRequestError", {enumerable: true, get: function() {
    return Engine_1.PrismaClientUnknownRequestError;
  }});
  Object.defineProperty(exports2, "PrismaClientInitializationError", {enumerable: true, get: function() {
    return Engine_1.PrismaClientInitializationError;
  }});
  Object.defineProperty(exports2, "PrismaClientRustPanicError", {enumerable: true, get: function() {
    return Engine_1.PrismaClientRustPanicError;
  }});
  var NodeEngine_1 = require_NodeEngine();
  Object.defineProperty(exports2, "Engine", {enumerable: true, get: function() {
    return NodeEngine_1.NodeEngine;
  }});
  var getInternalDatamodelJson_1 = require_getInternalDatamodelJson();
  Object.defineProperty(exports2, "getInternalDatamodelJson", {enumerable: true, get: function() {
    return getInternalDatamodelJson_1.getInternalDatamodelJson;
  }});
  var printGeneratorConfig_1 = require_printGeneratorConfig();
  Object.defineProperty(exports2, "printGeneratorConfig", {enumerable: true, get: function() {
    return printGeneratorConfig_1.printGeneratorConfig;
  }});
  var util_1 = require_util2();
  Object.defineProperty(exports2, "fixBinaryTargets", {enumerable: true, get: function() {
    return util_1.fixBinaryTargets;
  }});
});

// ../../node_modules/.pnpm/uuid@3.4.0/node_modules/uuid/lib/rng.js
var require_rng = __commonJS((exports2, module3) => {
  var crypto = require("crypto");
  module3.exports = function nodeRNG() {
    return crypto.randomBytes(16);
  };
});

// ../../node_modules/.pnpm/uuid@3.4.0/node_modules/uuid/lib/bytesToUuid.js
var require_bytesToUuid = __commonJS((exports2, module3) => {
  var byteToHex = [];
  for (var i = 0; i < 256; ++i) {
    byteToHex[i] = (i + 256).toString(16).substr(1);
  }
  function bytesToUuid(buf, offset) {
    var i2 = offset || 0;
    var bth = byteToHex;
    return [
      bth[buf[i2++]],
      bth[buf[i2++]],
      bth[buf[i2++]],
      bth[buf[i2++]],
      "-",
      bth[buf[i2++]],
      bth[buf[i2++]],
      "-",
      bth[buf[i2++]],
      bth[buf[i2++]],
      "-",
      bth[buf[i2++]],
      bth[buf[i2++]],
      "-",
      bth[buf[i2++]],
      bth[buf[i2++]],
      bth[buf[i2++]],
      bth[buf[i2++]],
      bth[buf[i2++]],
      bth[buf[i2++]]
    ].join("");
  }
  module3.exports = bytesToUuid;
});

// ../../node_modules/.pnpm/uuid@3.4.0/node_modules/uuid/v1.js
var require_v1 = __commonJS((exports2, module3) => {
  var rng = require_rng();
  var bytesToUuid = require_bytesToUuid();
  var _nodeId;
  var _clockseq;
  var _lastMSecs = 0;
  var _lastNSecs = 0;
  function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];
    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
    if (node == null || clockseq == null) {
      var seedBytes = rng();
      if (node == null) {
        node = _nodeId = [
          seedBytes[0] | 1,
          seedBytes[1],
          seedBytes[2],
          seedBytes[3],
          seedBytes[4],
          seedBytes[5]
        ];
      }
      if (clockseq == null) {
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
      }
    }
    var msecs = options.msecs !== void 0 ? options.msecs : new Date().getTime();
    var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
    if (dt < 0 && options.clockseq === void 0) {
      clockseq = clockseq + 1 & 16383;
    }
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
      nsecs = 0;
    }
    if (nsecs >= 1e4) {
      throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    }
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    msecs += 122192928e5;
    var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
    b[i++] = tl >>> 24 & 255;
    b[i++] = tl >>> 16 & 255;
    b[i++] = tl >>> 8 & 255;
    b[i++] = tl & 255;
    var tmh = msecs / 4294967296 * 1e4 & 268435455;
    b[i++] = tmh >>> 8 & 255;
    b[i++] = tmh & 255;
    b[i++] = tmh >>> 24 & 15 | 16;
    b[i++] = tmh >>> 16 & 255;
    b[i++] = clockseq >>> 8 | 128;
    b[i++] = clockseq & 255;
    for (var n = 0; n < 6; ++n) {
      b[i + n] = node[n];
    }
    return buf ? buf : bytesToUuid(b);
  }
  module3.exports = v1;
});

// ../../node_modules/.pnpm/uuid@3.4.0/node_modules/uuid/v4.js
var require_v4 = __commonJS((exports2, module3) => {
  var rng = require_rng();
  var bytesToUuid = require_bytesToUuid();
  function v4(options, buf, offset) {
    var i = buf && offset || 0;
    if (typeof options == "string") {
      buf = options === "binary" ? new Array(16) : null;
      options = null;
    }
    options = options || {};
    var rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      for (var ii = 0; ii < 16; ++ii) {
        buf[i + ii] = rnds[ii];
      }
    }
    return buf || bytesToUuid(rnds);
  }
  module3.exports = v4;
});

// ../../node_modules/.pnpm/uuid@3.4.0/node_modules/uuid/index.js
var require_uuid = __commonJS((exports2, module3) => {
  var v1 = require_v1();
  var v4 = require_v4();
  var uuid = v4;
  uuid.v1 = v1;
  uuid.v4 = v4;
  module3.exports = uuid;
});

// ../../node_modules/.pnpm/temp-dir@1.0.0/node_modules/temp-dir/index.js
var require_temp_dir2 = __commonJS((exports2, module3) => {
  "use strict";
  const fs17 = require("fs");
  const os3 = require("os");
  const ID = "__RESOLVED_TMP_DIR__";
  if (!global[ID]) {
    Object.defineProperty(global, ID, {
      value: fs17.realpathSync(os3.tmpdir())
    });
  }
  module3.exports = global[ID];
});

// ../../node_modules/.pnpm/temp-write@4.0.0/node_modules/temp-write/index.js
var require_temp_write = __commonJS((exports2, module3) => {
  "use strict";
  const {promisify: promisify3} = require("util");
  const path19 = require("path");
  const fs17 = require_graceful_fs();
  const isStream = require_is_stream();
  const makeDir = require_make_dir();
  const uuid = require_uuid();
  const tempDir = require_temp_dir2();
  const writeFileP = promisify3(fs17.writeFile);
  const tempfile = (filePath) => path19.join(tempDir, uuid.v4(), filePath || "");
  const writeStream = async (filePath, fileContent) => new Promise((resolve, reject) => {
    const writable = fs17.createWriteStream(filePath);
    fileContent.on("error", (error) => {
      reject(error);
      fileContent.unpipe(writable);
      writable.end();
    }).pipe(writable).on("error", reject).on("finish", resolve);
  });
  module3.exports = async (fileContent, filePath) => {
    const tempPath = tempfile(filePath);
    const write = isStream(fileContent) ? writeStream : writeFileP;
    await makeDir(path19.dirname(tempPath));
    await write(tempPath, fileContent);
    return tempPath;
  };
  module3.exports.sync = (fileContent, filePath) => {
    const tempPath = tempfile(filePath);
    makeDir.sync(path19.dirname(tempPath));
    fs17.writeFileSync(tempPath, fileContent);
    return tempPath;
  };
});

// ../sdk/dist/engineCommands.js
var require_engineCommands = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getVersion = exports2.formatSchema = exports2.getConfig = exports2.getDMMF = void 0;
  const chalk_1 = __importDefault(require_source());
  const execa_1 = __importDefault(require_execa());
  const temp_write_1 = __importDefault(require_temp_write());
  const fs_1 = __importDefault(require("fs"));
  const util_1 = require("util");
  const debug_1 = __importDefault(require_dist2());
  const resolveBinary_1 = require_resolveBinary();
  const debug3 = debug_1.default("engineCommands");
  const unlink = util_1.promisify(fs_1.default.unlink);
  const MAX_BUFFER = 1e9;
  async function getDMMF4({datamodel, cwd = process.cwd(), prismaPath: queryEnginePath, datamodelPath, retry = 4, enableExperimental}) {
    queryEnginePath = await resolveBinary_1.resolveBinary("query-engine", queryEnginePath);
    let result;
    try {
      let tempDatamodelPath = datamodelPath;
      if (!tempDatamodelPath) {
        try {
          tempDatamodelPath = await temp_write_1.default(datamodel);
        } catch (err) {
          throw new Error(chalk_1.default.redBright.bold("Get DMMF ") + "unable to write temp data model path");
        }
      }
      const options = {
        cwd,
        env: {
          ...process.env,
          PRISMA_DML_PATH: tempDatamodelPath,
          RUST_BACKTRACE: "1",
          ...process.env.NO_COLOR ? {} : {CLICOLOR_FORCE: "1"}
        },
        maxBuffer: MAX_BUFFER
      };
      const removedFeatureFlagMap = {
        insensitiveFilters: `${chalk_1.default.blueBright("info")} The preview flag "insensitiveFilters" is not needed anymore, please remove it from your schema.prisma`,
        atomicNumberOperations: `${chalk_1.default.blueBright("info")} The preview flag "atomicNumberOperations" is not needed anymore, please remove it from your schema.prisma`
      };
      if (enableExperimental) {
        enableExperimental = enableExperimental.filter((f) => {
          const removeMessage = removedFeatureFlagMap[f];
          if (removeMessage) {
            console.log(removeMessage);
            return false;
          }
          return true;
        }).filter((e) => !["middlewares", "aggregateApi", "distinct", "aggregations", "nativeTypes", "atomicNumberOperations"].includes(e));
      }
      const experimentalFlags = enableExperimental && Array.isArray(enableExperimental) && enableExperimental.length > 0 ? [`--enable-experimental=${enableExperimental.join(",")}`] : [];
      const args2 = [...experimentalFlags, "--enable-raw-queries", "cli", "dmmf"];
      result = await execa_1.default(queryEnginePath, args2, options);
      if (!datamodelPath) {
        await unlink(tempDatamodelPath);
      }
      if (result.stdout.includes("Please wait until the") && retry > 0) {
        debug3('Retrying after "Please wait until"');
        await new Promise((r) => setTimeout(r, 5e3));
        return getDMMF4({
          datamodel,
          cwd,
          prismaPath: queryEnginePath,
          datamodelPath,
          retry: retry - 1
        });
      }
      const firstCurly = result.stdout.indexOf("{");
      const stdout = result.stdout.slice(firstCurly);
      return JSON.parse(stdout);
    } catch (e) {
      debug3("getDMMF failed", e);
      if (e.message.includes("Command failed with exit code 26 (ETXTBSY)") && retry > 0) {
        await new Promise((resolve) => setTimeout(resolve, 500));
        debug3("Retrying after ETXTBSY");
        return getDMMF4({
          datamodel,
          cwd,
          prismaPath: queryEnginePath,
          datamodelPath,
          retry: retry - 1
        });
      }
      const output = e.stderr || e.stdout;
      if (output) {
        let json;
        try {
          json = JSON.parse(output);
        } catch (e2) {
        }
        let message = json && json.message || output;
        if (message.includes("debian-openssl-1.1.x: error while loading shared libraries: libssl.so.1.1: cannot open shared object file: No such file or directory") || message.includes("debian-openssl-1.0.x: error while loading shared libraries: libssl.so.1.0.0: cannot open shared object file: No such file or directory")) {
          message += `
${chalk_1.default.green(`Your linux installation misses the openssl package. You can install it like so:
`)}${chalk_1.default.green.bold("apt-get -qy update && apt-get -qy install openssl")}`;
        }
        throw new Error(chalk_1.default.redBright.bold("Schema parsing\n") + message);
      }
      if (e.message.includes("in JSON at position")) {
        throw new Error(`Problem while parsing the query engine response at ${queryEnginePath}. ${result.stdout}
${e.stack}`);
      }
      throw new Error(e);
    }
  }
  exports2.getDMMF = getDMMF4;
  async function getConfig5({datamodel, cwd = process.cwd(), prismaPath: queryEnginePath, datamodelPath, ignoreEnvVarErrors}) {
    queryEnginePath = await resolveBinary_1.resolveBinary("query-engine", queryEnginePath);
    let tempDatamodelPath = datamodelPath;
    if (!tempDatamodelPath) {
      try {
        tempDatamodelPath = await temp_write_1.default(datamodel);
      } catch (err) {
        throw new Error(chalk_1.default.redBright.bold("Get DMMF ") + "unable to write temp data model path");
      }
    }
    const args2 = ignoreEnvVarErrors ? ["--ignoreEnvVarErrors"] : [];
    try {
      const result = await execa_1.default(queryEnginePath, ["cli", "get-config", ...args2], {
        cwd,
        env: {
          ...process.env,
          PRISMA_DML_PATH: tempDatamodelPath,
          RUST_BACKTRACE: "1"
        },
        maxBuffer: MAX_BUFFER
      });
      if (!datamodelPath) {
        await unlink(tempDatamodelPath);
      }
      return JSON.parse(result.stdout);
    } catch (e) {
      if (e.stderr || e.stdout) {
        const error = e.stderr ? e.stderr : e.stout;
        let jsonError, message;
        try {
          jsonError = JSON.parse(error);
          message = `${chalk_1.default.redBright.bold("Get config ")}
${chalk_1.default.redBright(jsonError.message)}
`;
          if (jsonError.error_code) {
            if (jsonError.error_code === "P1012") {
              message = chalk_1.default.redBright(`Schema Parsing ${jsonError.error_code}

`) + message;
            } else {
              message = chalk_1.default.redBright(`${jsonError.error_code}

`) + message;
            }
          }
        } catch (e2) {
          throw new Error(chalk_1.default.redBright.bold("Get config ") + error);
        }
        throw new Error(message);
      }
      throw new Error(chalk_1.default.redBright.bold("Get config ") + e);
    }
  }
  exports2.getConfig = getConfig5;
  async function formatSchema2({schemaPath, schema}) {
    if (!schema && !schemaPath) {
      throw new Error(`Paramater schema or schemaPath must be passed.`);
    }
    const prismaFmtPath = await resolveBinary_1.resolveBinary("prisma-fmt");
    const showColors = !process.env.NO_COLOR && process.stdout.isTTY;
    const options = {
      env: {
        ...process.env,
        RUST_BACKTRACE: "1",
        ...showColors ? {CLICOLOR_FORCE: "1"} : {}
      },
      maxBuffer: MAX_BUFFER
    };
    let result;
    if (schemaPath) {
      if (!fs_1.default.existsSync(schemaPath)) {
        throw new Error(`Schema at ${schemaPath} does not exist.`);
      }
      result = await execa_1.default(prismaFmtPath, ["format", "-i", schemaPath], options);
    } else if (schema) {
      result = await execa_1.default(prismaFmtPath, ["format"], {
        ...options,
        input: schema
      });
    }
    return result.stdout;
  }
  exports2.formatSchema = formatSchema2;
  async function getVersion2(enginePath) {
    enginePath = await resolveBinary_1.resolveBinary("query-engine", enginePath);
    const result = await execa_1.default(enginePath, ["--version"], {
      env: {
        ...process.env
      },
      maxBuffer: MAX_BUFFER
    });
    return result.stdout;
  }
  exports2.getVersion = getVersion2;
});

// ../sdk/dist/resolveOutput.js
var require_resolveOutput = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.resolveOutput = void 0;
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const util_1 = require("util");
  const exists = util_1.promisify(fs_1.default.exists);
  async function resolveNodeModulesBase(cwd) {
    if (await exists(path_1.default.resolve(process.cwd(), "prisma/schema.prisma"))) {
      return process.cwd();
    }
    if (path_1.default.relative(process.cwd(), cwd) === "prisma" && await exists(path_1.default.resolve(process.cwd(), "package.json"))) {
      return process.cwd();
    }
    if (await exists(path_1.default.resolve(cwd, "node_modules"))) {
      return cwd;
    }
    if (await exists(path_1.default.resolve(cwd, "../node_modules"))) {
      return path_1.default.join(cwd, "../");
    }
    if (await exists(path_1.default.resolve(cwd, "package.json"))) {
      return cwd;
    }
    if (await exists(path_1.default.resolve(cwd, "../package.json"))) {
      return path_1.default.join(cwd, "../");
    }
    return cwd;
  }
  async function resolveOutput(options) {
    const defaultOutput = stripRelativePath(options.defaultOutput);
    if (defaultOutput.startsWith("node_modules")) {
      const nodeModulesBase = await resolveNodeModulesBase(options.baseDir);
      return path_1.default.resolve(nodeModulesBase, defaultOutput);
    }
    return path_1.default.resolve(options.baseDir, defaultOutput);
  }
  exports2.resolveOutput = resolveOutput;
  function stripRelativePath(pathString) {
    if (pathString.startsWith("./")) {
      return pathString.slice(2);
    }
    return pathString;
  }
});

// ../../node_modules/.pnpm/resolve-from@5.0.0/node_modules/resolve-from/index.js
var require_resolve_from = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const Module2 = require("module");
  const fs17 = require("fs");
  const resolveFrom = (fromDirectory, moduleId, silent) => {
    if (typeof fromDirectory !== "string") {
      throw new TypeError(`Expected \`fromDir\` to be of type \`string\`, got \`${typeof fromDirectory}\``);
    }
    if (typeof moduleId !== "string") {
      throw new TypeError(`Expected \`moduleId\` to be of type \`string\`, got \`${typeof moduleId}\``);
    }
    try {
      fromDirectory = fs17.realpathSync(fromDirectory);
    } catch (error) {
      if (error.code === "ENOENT") {
        fromDirectory = path19.resolve(fromDirectory);
      } else if (silent) {
        return;
      } else {
        throw error;
      }
    }
    const fromFile = path19.join(fromDirectory, "noop.js");
    const resolveFileName = () => Module2._resolveFilename(moduleId, {
      id: fromFile,
      filename: fromFile,
      paths: Module2._nodeModulePaths(fromDirectory)
    });
    if (silent) {
      try {
        return resolveFileName();
      } catch (error) {
        return;
      }
    }
    return resolveFileName();
  };
  module3.exports = (fromDirectory, moduleId) => resolveFrom(fromDirectory, moduleId);
  module3.exports.silent = (fromDirectory, moduleId) => resolveFrom(fromDirectory, moduleId, true);
});

// ../../node_modules/.pnpm/resolve-pkg@2.0.0/node_modules/resolve-pkg/index.js
var require_resolve_pkg = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const resolveFrom = require_resolve_from();
  module3.exports = (moduleId, options = {}) => {
    const parts = moduleId.replace(/\\/g, "/").split("/");
    let packageName = "";
    if (parts.length > 0 && parts[0][0] === "@") {
      packageName += parts.shift() + "/";
    }
    packageName += parts.shift();
    const packageJson4 = path19.join(packageName, "package.json");
    const resolved = resolveFrom.silent(options.cwd || process.cwd(), packageJson4);
    if (!resolved) {
      return;
    }
    return path19.join(path19.dirname(resolved), parts.join("/"));
  };
});

// ../../node_modules/.pnpm/has-yarn@2.1.0/node_modules/has-yarn/index.js
var require_has_yarn = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const fs17 = require("fs");
  const hasYarn = (cwd = process.cwd()) => fs17.existsSync(path19.resolve(cwd, "yarn.lock"));
  module3.exports = hasYarn;
  module3.exports.default = hasYarn;
});

// ../../node_modules/.pnpm/ini@1.3.5/node_modules/ini/ini.js
var require_ini = __commonJS((exports2) => {
  exports2.parse = exports2.decode = decode;
  exports2.stringify = exports2.encode = encode;
  exports2.safe = safe;
  exports2.unsafe = unsafe;
  var eol = typeof process !== "undefined" && process.platform === "win32" ? "\r\n" : "\n";
  function encode(obj, opt) {
    var children = [];
    var out = "";
    if (typeof opt === "string") {
      opt = {
        section: opt,
        whitespace: false
      };
    } else {
      opt = opt || {};
      opt.whitespace = opt.whitespace === true;
    }
    var separator = opt.whitespace ? " = " : "=";
    Object.keys(obj).forEach(function(k, _2, __) {
      var val = obj[k];
      if (val && Array.isArray(val)) {
        val.forEach(function(item) {
          out += safe(k + "[]") + separator + safe(item) + "\n";
        });
      } else if (val && typeof val === "object") {
        children.push(k);
      } else {
        out += safe(k) + separator + safe(val) + eol;
      }
    });
    if (opt.section && out.length) {
      out = "[" + safe(opt.section) + "]" + eol + out;
    }
    children.forEach(function(k, _2, __) {
      var nk = dotSplit(k).join("\\.");
      var section = (opt.section ? opt.section + "." : "") + nk;
      var child = encode(obj[k], {
        section,
        whitespace: opt.whitespace
      });
      if (out.length && child.length) {
        out += eol;
      }
      out += child;
    });
    return out;
  }
  function dotSplit(str) {
    return str.replace(/\1/g, "LITERAL\\1LITERAL").replace(/\\\./g, "").split(/\./).map(function(part) {
      return part.replace(/\1/g, "\\.").replace(/\2LITERAL\\1LITERAL\2/g, "");
    });
  }
  function decode(str) {
    var out = {};
    var p = out;
    var section = null;
    var re = /^\[([^\]]*)\]$|^([^=]+)(=(.*))?$/i;
    var lines = str.split(/[\r\n]+/g);
    lines.forEach(function(line, _2, __) {
      if (!line || line.match(/^\s*[;#]/))
        return;
      var match = line.match(re);
      if (!match)
        return;
      if (match[1] !== void 0) {
        section = unsafe(match[1]);
        p = out[section] = out[section] || {};
        return;
      }
      var key = unsafe(match[2]);
      var value = match[3] ? unsafe(match[4]) : true;
      switch (value) {
        case "true":
        case "false":
        case "null":
          value = JSON.parse(value);
      }
      if (key.length > 2 && key.slice(-2) === "[]") {
        key = key.substring(0, key.length - 2);
        if (!p[key]) {
          p[key] = [];
        } else if (!Array.isArray(p[key])) {
          p[key] = [p[key]];
        }
      }
      if (Array.isArray(p[key])) {
        p[key].push(value);
      } else {
        p[key] = value;
      }
    });
    Object.keys(out).filter(function(k, _2, __) {
      if (!out[k] || typeof out[k] !== "object" || Array.isArray(out[k])) {
        return false;
      }
      var parts = dotSplit(k);
      var p2 = out;
      var l = parts.pop();
      var nl = l.replace(/\\\./g, ".");
      parts.forEach(function(part, _3, __2) {
        if (!p2[part] || typeof p2[part] !== "object")
          p2[part] = {};
        p2 = p2[part];
      });
      if (p2 === out && nl === l) {
        return false;
      }
      p2[nl] = out[k];
      return true;
    }).forEach(function(del, _2, __) {
      delete out[del];
    });
    return out;
  }
  function isQuoted(val) {
    return val.charAt(0) === '"' && val.slice(-1) === '"' || val.charAt(0) === "'" && val.slice(-1) === "'";
  }
  function safe(val) {
    return typeof val !== "string" || val.match(/[=\r\n]/) || val.match(/^\[/) || val.length > 1 && isQuoted(val) || val !== val.trim() ? JSON.stringify(val) : val.replace(/;/g, "\\;").replace(/#/g, "\\#");
  }
  function unsafe(val, doUnesc) {
    val = (val || "").trim();
    if (isQuoted(val)) {
      if (val.charAt(0) === "'") {
        val = val.substr(1, val.length - 2);
      }
      try {
        val = JSON.parse(val);
      } catch (_2) {
      }
    } else {
      var esc = false;
      var unesc = "";
      for (var i = 0, l = val.length; i < l; i++) {
        var c = val.charAt(i);
        if (esc) {
          if ("\\;#".indexOf(c) !== -1) {
            unesc += c;
          } else {
            unesc += "\\" + c;
          }
          esc = false;
        } else if (";#".indexOf(c) !== -1) {
          break;
        } else if (c === "\\") {
          esc = true;
        } else {
          unesc += c;
        }
      }
      if (esc) {
        unesc += "\\";
      }
      return unesc.trim();
    }
    return val;
  }
});

// ../../node_modules/.pnpm/global-dirs@2.0.1/node_modules/global-dirs/index.js
var require_global_dirs = __commonJS((exports2) => {
  "use strict";
  const path19 = require("path");
  const os3 = require("os");
  const fs17 = require("fs");
  const ini = require_ini();
  const isWindows = process.platform === "win32";
  const readRc = (filePath) => {
    try {
      return ini.parse(fs17.readFileSync(filePath, "utf8")).prefix;
    } catch (_2) {
    }
  };
  const getEnvNpmPrefix = () => {
    return Object.keys(process.env).reduce((prefix, name) => {
      return /^npm_config_prefix$/i.test(name) ? process.env[name] : prefix;
    }, void 0);
  };
  const getGlobalNpmrc = () => {
    if (isWindows && process.env.APPDATA) {
      return path19.join(process.env.APPDATA, "/npm/etc/npmrc");
    }
    if (process.execPath.includes("/Cellar/node")) {
      const homebrewPrefix = process.execPath.slice(0, process.execPath.indexOf("/Cellar/node"));
      return path19.join(homebrewPrefix, "/lib/node_modules/npm/npmrc");
    }
    if (process.execPath.endsWith("/bin/node")) {
      const installDir = path19.dirname(path19.dirname(process.execPath));
      return path19.join(installDir, "/etc/npmrc");
    }
  };
  const getDefaultNpmPrefix = () => {
    if (isWindows) {
      return path19.dirname(process.execPath);
    }
    return path19.dirname(path19.dirname(process.execPath));
  };
  const getNpmPrefix = () => {
    const envPrefix = getEnvNpmPrefix();
    if (envPrefix) {
      return envPrefix;
    }
    const homePrefix = readRc(path19.join(os3.homedir(), ".npmrc"));
    if (homePrefix) {
      return homePrefix;
    }
    if (process.env.PREFIX) {
      return process.env.PREFIX;
    }
    const globalPrefix = readRc(getGlobalNpmrc());
    if (globalPrefix) {
      return globalPrefix;
    }
    return getDefaultNpmPrefix();
  };
  const npmPrefix = path19.resolve(getNpmPrefix());
  const getYarnWindowsDirectory = () => {
    if (isWindows && process.env.LOCALAPPDATA) {
      const dir = path19.join(process.env.LOCALAPPDATA, "Yarn");
      if (fs17.existsSync(dir)) {
        return dir;
      }
    }
    return false;
  };
  const getYarnPrefix = () => {
    if (process.env.PREFIX) {
      return process.env.PREFIX;
    }
    const windowsPrefix = getYarnWindowsDirectory();
    if (windowsPrefix) {
      return windowsPrefix;
    }
    const configPrefix = path19.join(os3.homedir(), ".config/yarn");
    if (fs17.existsSync(configPrefix)) {
      return configPrefix;
    }
    const homePrefix = path19.join(os3.homedir(), ".yarn-config");
    if (fs17.existsSync(homePrefix)) {
      return homePrefix;
    }
    return npmPrefix;
  };
  exports2.npm = {};
  exports2.npm.prefix = npmPrefix;
  exports2.npm.packages = path19.join(npmPrefix, isWindows ? "node_modules" : "lib/node_modules");
  exports2.npm.binaries = isWindows ? npmPrefix : path19.join(npmPrefix, "bin");
  const yarnPrefix = path19.resolve(getYarnPrefix());
  exports2.yarn = {};
  exports2.yarn.prefix = yarnPrefix;
  exports2.yarn.packages = path19.join(yarnPrefix, getYarnWindowsDirectory() ? "Data/global/node_modules" : "global/node_modules");
  exports2.yarn.binaries = path19.join(exports2.yarn.packages, ".bin");
});

// ../sdk/dist/isCurrentBinInstalledGlobally.js
var require_isCurrentBinInstalledGlobally = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.isCurrentBinInstalledGlobally = void 0;
  const fs_1 = __importDefault(require("fs"));
  const global_dirs_1 = __importDefault(require_global_dirs());
  function isCurrentBinInstalledGlobally3() {
    try {
      const realPrismaPath = fs_1.default.realpathSync(process.argv[1]);
      const usingGlobalYarn = realPrismaPath.indexOf(global_dirs_1.default.yarn.packages) === 0;
      const usingGlobalNpm = realPrismaPath.indexOf(fs_1.default.realpathSync(global_dirs_1.default.npm.packages)) === 0;
      if (usingGlobalNpm) {
        return "npm";
      }
      if (usingGlobalYarn) {
        return "yarn";
      } else {
        false;
      }
    } catch (e) {
    }
    return false;
  }
  exports2.isCurrentBinInstalledGlobally = isCurrentBinInstalledGlobally3;
});

// ../sdk/dist/getCommandWithExecutor.js
var require_getCommandWithExecutor = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getCommandWithExecutor = void 0;
  const isCurrentBinInstalledGlobally_1 = require_isCurrentBinInstalledGlobally();
  function getCommandWithExecutor4(command) {
    var _a;
    if (isCurrentBinInstalledGlobally_1.isCurrentBinInstalledGlobally()) {
      return command;
    } else {
      const yarnUsed = (_a = process.env.npm_config_user_agent) === null || _a === void 0 ? void 0 : _a.includes("yarn");
      const npxUsed = __dirname.includes("_npx");
      if (npxUsed) {
        return `npx ${command}`;
      } else if (yarnUsed) {
        return `yarn ${command}`;
      } else {
        return command;
      }
    }
  }
  exports2.getCommandWithExecutor = getCommandWithExecutor4;
});

// ../sdk/dist/predefinedGeneratorResolvers.js
var require_predefinedGeneratorResolvers = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.predefinedGeneratorResolvers = void 0;
  const resolve_pkg_1 = __importDefault(require_resolve_pkg());
  const chalk_1 = __importDefault(require_source());
  const has_yarn_1 = __importDefault(require_has_yarn());
  const execa_1 = __importDefault(require_execa());
  const path_1 = __importDefault(require("path"));
  const fs_1 = __importDefault(require("fs"));
  const getCommandWithExecutor_1 = require_getCommandWithExecutor();
  const debug_1 = __importDefault(require_dist2());
  const debugEnabled = debug_1.default.enabled("generator");
  exports2.predefinedGeneratorResolvers = {
    photonjs: () => {
      throw new Error(`Oops! Photon has been renamed to Prisma Client. Please make the following adjustments:
  1. Rename ${chalk_1.default.red('provider = "photonjs"')} to ${chalk_1.default.green('provider = "prisma-client-js"')} in your ${chalk_1.default.bold("schema.prisma")} file.
  2. Replace your ${chalk_1.default.bold("package.json")}'s ${chalk_1.default.red("@prisma/photon")} dependency to ${chalk_1.default.green("@prisma/client")}
  3. Replace ${chalk_1.default.red("import { Photon } from '@prisma/photon'")} with ${chalk_1.default.green("import { PrismaClient } from '@prisma/client'")} in your code.
  4. Run ${chalk_1.default.green(getCommandWithExecutor_1.getCommandWithExecutor("prisma generate"))} again.
      `);
    },
    "prisma-client-js": async (baseDir, version) => {
      let prismaClientDir = resolve_pkg_1.default("@prisma/client", {cwd: baseDir});
      checkYarnVersion();
      if (debugEnabled) {
        console.log({prismaClientDir});
      }
      if (!prismaClientDir && !process.env.PRISMA_GENERATE_SKIP_AUTOINSTALL) {
        if (!fs_1.default.existsSync(path_1.default.join(process.cwd(), "package.json")) && !fs_1.default.existsSync(path_1.default.join(process.cwd(), "../package.json"))) {
          const defaultPackageJson = `{
  "name": "my-prisma-project",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \\"Error: no test specified\\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}
        `;
          fs_1.default.writeFileSync(path_1.default.join(process.cwd(), "package.json"), defaultPackageJson);
          console.info(`✔ Created ${chalk_1.default.bold.green("./package.json")}`);
        }
        await installPackage(baseDir, `-D @prisma/cli@${version !== null && version !== void 0 ? version : "latest"}`);
        await installPackage(baseDir, `@prisma/client@${version !== null && version !== void 0 ? version : "latest"}`);
        prismaClientDir = resolve_pkg_1.default("@prisma/client", {cwd: baseDir});
        if (!prismaClientDir) {
          throw new Error(`Could not resolve @prisma/client despite the installation that we just tried.
Please try to install it by hand with ${chalk_1.default.bold.greenBright("npm install @prisma/client")} and rerun ${chalk_1.default.bold(getCommandWithExecutor_1.getCommandWithExecutor("prisma generate"))} 🙏.`);
        }
        console.info(`
✔ Installed the ${chalk_1.default.bold.green("@prisma/client")} and ${chalk_1.default.bold.green("prisma")} packages in your project`);
      }
      if (!prismaClientDir) {
        throw new Error(`Could not resolve @prisma/client. 
Please try to install it with ${chalk_1.default.bold.greenBright("npm install @prisma/client")} and rerun ${chalk_1.default.bold(getCommandWithExecutor_1.getCommandWithExecutor("prisma generate"))} 🙏.`);
      }
      return {
        outputPath: prismaClientDir,
        generatorPath: `node --max-old-space-size=8096 "${path_1.default.resolve(prismaClientDir, "generator-build/index.js")}"`
      };
    }
  };
  async function installPackage(baseDir, pkg2) {
    const yarnUsed = has_yarn_1.default(baseDir) || has_yarn_1.default(path_1.default.join(baseDir, ".."));
    const cmdName = yarnUsed ? "yarn add" : "npm install";
    await execa_1.default.command(`${cmdName} ${pkg2}`, {
      cwd: baseDir,
      stdio: "inherit",
      env: {
        ...process.env,
        SKIP_GENERATE: "true"
      }
    });
  }
  function checkYarnVersion() {
    if (process.env.npm_config_user_agent) {
      const match = parseUserAgentString(process.env.npm_config_user_agent);
      if (match) {
        const {agent, major, minor, patch} = match;
        if (agent === "yarn" && major === 1) {
          const currentYarnVersion = `${major}.${minor}.${patch}`;
          const minYarnVersion = "1.19.2";
          if (semverLt(currentYarnVersion, minYarnVersion)) {
            console.error(`${chalk_1.default.yellow("warning")} Your ${chalk_1.default.bold("yarn")} has version ${currentYarnVersion}, which is outdated. Please update it to ${chalk_1.default.bold(minYarnVersion)} or ${chalk_1.default.bold("newer")} in order to use Prisma.`);
          }
        }
      }
    }
  }
  function semverLt(a, b) {
    const [major1, minor1, patch1] = a.split(".");
    const [major2, minor2, patch2] = b.split(".");
    if (major1 < major2) {
      return true;
    }
    if (major1 > major2) {
      return false;
    }
    if (minor1 < minor2) {
      return true;
    }
    if (minor1 > minor2) {
      return false;
    }
    if (patch1 < patch2) {
      return true;
    }
    if (patch1 > patch2) {
      return false;
    }
    return false;
  }
  function parseUserAgentString(str) {
    const userAgentRegex = /(\w+)\/(\d+)\.(\d+)\.(\d+)/;
    const match = userAgentRegex.exec(str);
    if (match) {
      const agent = match[1];
      const major = parseInt(match[2]);
      const minor = parseInt(match[3]);
      const patch = parseInt(match[4]);
      return {agent, major, minor, patch};
    }
    return null;
  }
});

// ../sdk/dist/utils/extractPreviewFeatures.js
var require_extractPreviewFeatures = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.extractPreviewFeatures = void 0;
  function extractPreviewFeatures(config) {
    var _a;
    return ((_a = config.generators.find((g) => g.provider === "prisma-client-js")) === null || _a === void 0 ? void 0 : _a.previewFeatures) || [];
  }
  exports2.extractPreviewFeatures = extractPreviewFeatures;
});

// ../sdk/dist/utils/mapPreviewFeatures.js
var require_mapPreviewFeatures = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.mapPreviewFeatures = void 0;
  const featureFlagMap = {
    transactionApi: "transaction",
    aggregateApi: "aggregations"
  };
  function mapPreviewFeatures(features) {
    if (Array.isArray(features) && features.length > 0) {
      return features.map((f) => {
        var _a;
        return (_a = featureFlagMap[f]) !== null && _a !== void 0 ? _a : f;
      });
    }
    return [];
  }
  exports2.mapPreviewFeatures = mapPreviewFeatures;
});

// ../../node_modules/.pnpm/node-fetch@2.6.1/node_modules/node-fetch/lib/index.mjs
var require_lib2 = __commonJS((exports2) => {
  __export(exports2, {
    FetchError: () => FetchError,
    Headers: () => Headers2,
    Request: () => Request2,
    Response: () => Response2,
    default: () => lib_default
  });
  const stream = __toModule(require("stream"));
  const http2 = __toModule(require("http"));
  const url = __toModule(require("url"));
  const https2 = __toModule(require("https"));
  const zlib2 = __toModule(require("zlib"));
  const Readable = stream.default.Readable;
  const BUFFER = Symbol("buffer");
  const TYPE = Symbol("type");
  class Blob {
    constructor() {
      this[TYPE] = "";
      const blobParts = arguments[0];
      const options = arguments[1];
      const buffers = [];
      let size = 0;
      if (blobParts) {
        const a = blobParts;
        const length = Number(a.length);
        for (let i = 0; i < length; i++) {
          const element = a[i];
          let buffer;
          if (element instanceof Buffer) {
            buffer = element;
          } else if (ArrayBuffer.isView(element)) {
            buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
          } else if (element instanceof ArrayBuffer) {
            buffer = Buffer.from(element);
          } else if (element instanceof Blob) {
            buffer = element[BUFFER];
          } else {
            buffer = Buffer.from(typeof element === "string" ? element : String(element));
          }
          size += buffer.length;
          buffers.push(buffer);
        }
      }
      this[BUFFER] = Buffer.concat(buffers);
      let type = options && options.type !== void 0 && String(options.type).toLowerCase();
      if (type && !/[^\u0020-\u007E]/.test(type)) {
        this[TYPE] = type;
      }
    }
    get size() {
      return this[BUFFER].length;
    }
    get type() {
      return this[TYPE];
    }
    text() {
      return Promise.resolve(this[BUFFER].toString());
    }
    arrayBuffer() {
      const buf = this[BUFFER];
      const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      return Promise.resolve(ab);
    }
    stream() {
      const readable = new Readable();
      readable._read = function() {
      };
      readable.push(this[BUFFER]);
      readable.push(null);
      return readable;
    }
    toString() {
      return "[object Blob]";
    }
    slice() {
      const size = this.size;
      const start = arguments[0];
      const end = arguments[1];
      let relativeStart, relativeEnd;
      if (start === void 0) {
        relativeStart = 0;
      } else if (start < 0) {
        relativeStart = Math.max(size + start, 0);
      } else {
        relativeStart = Math.min(start, size);
      }
      if (end === void 0) {
        relativeEnd = size;
      } else if (end < 0) {
        relativeEnd = Math.max(size + end, 0);
      } else {
        relativeEnd = Math.min(end, size);
      }
      const span = Math.max(relativeEnd - relativeStart, 0);
      const buffer = this[BUFFER];
      const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
      const blob = new Blob([], {type: arguments[2]});
      blob[BUFFER] = slicedBuffer;
      return blob;
    }
  }
  Object.defineProperties(Blob.prototype, {
    size: {enumerable: true},
    type: {enumerable: true},
    slice: {enumerable: true}
  });
  Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
    value: "Blob",
    writable: false,
    enumerable: false,
    configurable: true
  });
  function FetchError(message, type, systemError) {
    Error.call(this, message);
    this.message = message;
    this.type = type;
    if (systemError) {
      this.code = this.errno = systemError.code;
    }
    Error.captureStackTrace(this, this.constructor);
  }
  FetchError.prototype = Object.create(Error.prototype);
  FetchError.prototype.constructor = FetchError;
  FetchError.prototype.name = "FetchError";
  let convert;
  try {
    convert = require("encoding").convert;
  } catch (e) {
  }
  const INTERNALS = Symbol("Body internals");
  const PassThrough = stream.default.PassThrough;
  function Body(body) {
    var _this = this;
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
    let size = _ref$size === void 0 ? 0 : _ref$size;
    var _ref$timeout = _ref.timeout;
    let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
    if (body == null) {
      body = null;
    } else if (isURLSearchParams(body)) {
      body = Buffer.from(body.toString());
    } else if (isBlob(body))
      ;
    else if (Buffer.isBuffer(body))
      ;
    else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
      body = Buffer.from(body);
    } else if (ArrayBuffer.isView(body)) {
      body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
    } else if (body instanceof stream.default)
      ;
    else {
      body = Buffer.from(String(body));
    }
    this[INTERNALS] = {
      body,
      disturbed: false,
      error: null
    };
    this.size = size;
    this.timeout = timeout;
    if (body instanceof stream.default) {
      body.on("error", function(err) {
        const error = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
        _this[INTERNALS].error = error;
      });
    }
  }
  Body.prototype = {
    get body() {
      return this[INTERNALS].body;
    },
    get bodyUsed() {
      return this[INTERNALS].disturbed;
    },
    arrayBuffer() {
      return consumeBody.call(this).then(function(buf) {
        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      });
    },
    blob() {
      let ct = this.headers && this.headers.get("content-type") || "";
      return consumeBody.call(this).then(function(buf) {
        return Object.assign(new Blob([], {
          type: ct.toLowerCase()
        }), {
          [BUFFER]: buf
        });
      });
    },
    json() {
      var _this2 = this;
      return consumeBody.call(this).then(function(buffer) {
        try {
          return JSON.parse(buffer.toString());
        } catch (err) {
          return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
        }
      });
    },
    text() {
      return consumeBody.call(this).then(function(buffer) {
        return buffer.toString();
      });
    },
    buffer() {
      return consumeBody.call(this);
    },
    textConverted() {
      var _this3 = this;
      return consumeBody.call(this).then(function(buffer) {
        return convertBody(buffer, _this3.headers);
      });
    }
  };
  Object.defineProperties(Body.prototype, {
    body: {enumerable: true},
    bodyUsed: {enumerable: true},
    arrayBuffer: {enumerable: true},
    blob: {enumerable: true},
    json: {enumerable: true},
    text: {enumerable: true}
  });
  Body.mixIn = function(proto) {
    for (const name of Object.getOwnPropertyNames(Body.prototype)) {
      if (!(name in proto)) {
        const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
        Object.defineProperty(proto, name, desc);
      }
    }
  };
  function consumeBody() {
    var _this4 = this;
    if (this[INTERNALS].disturbed) {
      return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
    }
    this[INTERNALS].disturbed = true;
    if (this[INTERNALS].error) {
      return Body.Promise.reject(this[INTERNALS].error);
    }
    let body = this.body;
    if (body === null) {
      return Body.Promise.resolve(Buffer.alloc(0));
    }
    if (isBlob(body)) {
      body = body.stream();
    }
    if (Buffer.isBuffer(body)) {
      return Body.Promise.resolve(body);
    }
    if (!(body instanceof stream.default)) {
      return Body.Promise.resolve(Buffer.alloc(0));
    }
    let accum = [];
    let accumBytes = 0;
    let abort = false;
    return new Body.Promise(function(resolve, reject) {
      let resTimeout;
      if (_this4.timeout) {
        resTimeout = setTimeout(function() {
          abort = true;
          reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
        }, _this4.timeout);
      }
      body.on("error", function(err) {
        if (err.name === "AbortError") {
          abort = true;
          reject(err);
        } else {
          reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
        }
      });
      body.on("data", function(chunk) {
        if (abort || chunk === null) {
          return;
        }
        if (_this4.size && accumBytes + chunk.length > _this4.size) {
          abort = true;
          reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
          return;
        }
        accumBytes += chunk.length;
        accum.push(chunk);
      });
      body.on("end", function() {
        if (abort) {
          return;
        }
        clearTimeout(resTimeout);
        try {
          resolve(Buffer.concat(accum, accumBytes));
        } catch (err) {
          reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
        }
      });
    });
  }
  function convertBody(buffer, headers) {
    if (typeof convert !== "function") {
      throw new Error("The package `encoding` must be installed to use the textConverted() function");
    }
    const ct = headers.get("content-type");
    let charset = "utf-8";
    let res, str;
    if (ct) {
      res = /charset=([^;]*)/i.exec(ct);
    }
    str = buffer.slice(0, 1024).toString();
    if (!res && str) {
      res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
    }
    if (!res && str) {
      res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
      if (!res) {
        res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
        if (res) {
          res.pop();
        }
      }
      if (res) {
        res = /charset=(.*)/i.exec(res.pop());
      }
    }
    if (!res && str) {
      res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
    }
    if (res) {
      charset = res.pop();
      if (charset === "gb2312" || charset === "gbk") {
        charset = "gb18030";
      }
    }
    return convert(buffer, "UTF-8", charset).toString();
  }
  function isURLSearchParams(obj) {
    if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
      return false;
    }
    return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
  }
  function isBlob(obj) {
    return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
  }
  function clone(instance) {
    let p1, p2;
    let body = instance.body;
    if (instance.bodyUsed) {
      throw new Error("cannot clone body after it is used");
    }
    if (body instanceof stream.default && typeof body.getBoundary !== "function") {
      p1 = new PassThrough();
      p2 = new PassThrough();
      body.pipe(p1);
      body.pipe(p2);
      instance[INTERNALS].body = p1;
      body = p2;
    }
    return body;
  }
  function extractContentType(body) {
    if (body === null) {
      return null;
    } else if (typeof body === "string") {
      return "text/plain;charset=UTF-8";
    } else if (isURLSearchParams(body)) {
      return "application/x-www-form-urlencoded;charset=UTF-8";
    } else if (isBlob(body)) {
      return body.type || null;
    } else if (Buffer.isBuffer(body)) {
      return null;
    } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
      return null;
    } else if (ArrayBuffer.isView(body)) {
      return null;
    } else if (typeof body.getBoundary === "function") {
      return `multipart/form-data;boundary=${body.getBoundary()}`;
    } else if (body instanceof stream.default) {
      return null;
    } else {
      return "text/plain;charset=UTF-8";
    }
  }
  function getTotalBytes(instance) {
    const body = instance.body;
    if (body === null) {
      return 0;
    } else if (isBlob(body)) {
      return body.size;
    } else if (Buffer.isBuffer(body)) {
      return body.length;
    } else if (body && typeof body.getLengthSync === "function") {
      if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || body.hasKnownLength && body.hasKnownLength()) {
        return body.getLengthSync();
      }
      return null;
    } else {
      return null;
    }
  }
  function writeToStream(dest, instance) {
    const body = instance.body;
    if (body === null) {
      dest.end();
    } else if (isBlob(body)) {
      body.stream().pipe(dest);
    } else if (Buffer.isBuffer(body)) {
      dest.write(body);
      dest.end();
    } else {
      body.pipe(dest);
    }
  }
  Body.Promise = global.Promise;
  const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
  const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
  function validateName(name) {
    name = `${name}`;
    if (invalidTokenRegex.test(name) || name === "") {
      throw new TypeError(`${name} is not a legal HTTP header name`);
    }
  }
  function validateValue(value) {
    value = `${value}`;
    if (invalidHeaderCharRegex.test(value)) {
      throw new TypeError(`${value} is not a legal HTTP header value`);
    }
  }
  function find(map, name) {
    name = name.toLowerCase();
    for (const key in map) {
      if (key.toLowerCase() === name) {
        return key;
      }
    }
    return void 0;
  }
  const MAP = Symbol("map");
  class Headers2 {
    constructor() {
      let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
      this[MAP] = Object.create(null);
      if (init instanceof Headers2) {
        const rawHeaders = init.raw();
        const headerNames = Object.keys(rawHeaders);
        for (const headerName of headerNames) {
          for (const value of rawHeaders[headerName]) {
            this.append(headerName, value);
          }
        }
        return;
      }
      if (init == null)
        ;
      else if (typeof init === "object") {
        const method = init[Symbol.iterator];
        if (method != null) {
          if (typeof method !== "function") {
            throw new TypeError("Header pairs must be iterable");
          }
          const pairs = [];
          for (const pair of init) {
            if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
              throw new TypeError("Each header pair must be iterable");
            }
            pairs.push(Array.from(pair));
          }
          for (const pair of pairs) {
            if (pair.length !== 2) {
              throw new TypeError("Each header pair must be a name/value tuple");
            }
            this.append(pair[0], pair[1]);
          }
        } else {
          for (const key of Object.keys(init)) {
            const value = init[key];
            this.append(key, value);
          }
        }
      } else {
        throw new TypeError("Provided initializer must be an object");
      }
    }
    get(name) {
      name = `${name}`;
      validateName(name);
      const key = find(this[MAP], name);
      if (key === void 0) {
        return null;
      }
      return this[MAP][key].join(", ");
    }
    forEach(callback) {
      let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
      let pairs = getHeaders(this);
      let i = 0;
      while (i < pairs.length) {
        var _pairs$i = pairs[i];
        const name = _pairs$i[0], value = _pairs$i[1];
        callback.call(thisArg, value, name, this);
        pairs = getHeaders(this);
        i++;
      }
    }
    set(name, value) {
      name = `${name}`;
      value = `${value}`;
      validateName(name);
      validateValue(value);
      const key = find(this[MAP], name);
      this[MAP][key !== void 0 ? key : name] = [value];
    }
    append(name, value) {
      name = `${name}`;
      value = `${value}`;
      validateName(name);
      validateValue(value);
      const key = find(this[MAP], name);
      if (key !== void 0) {
        this[MAP][key].push(value);
      } else {
        this[MAP][name] = [value];
      }
    }
    has(name) {
      name = `${name}`;
      validateName(name);
      return find(this[MAP], name) !== void 0;
    }
    delete(name) {
      name = `${name}`;
      validateName(name);
      const key = find(this[MAP], name);
      if (key !== void 0) {
        delete this[MAP][key];
      }
    }
    raw() {
      return this[MAP];
    }
    keys() {
      return createHeadersIterator(this, "key");
    }
    values() {
      return createHeadersIterator(this, "value");
    }
    [Symbol.iterator]() {
      return createHeadersIterator(this, "key+value");
    }
  }
  Headers2.prototype.entries = Headers2.prototype[Symbol.iterator];
  Object.defineProperty(Headers2.prototype, Symbol.toStringTag, {
    value: "Headers",
    writable: false,
    enumerable: false,
    configurable: true
  });
  Object.defineProperties(Headers2.prototype, {
    get: {enumerable: true},
    forEach: {enumerable: true},
    set: {enumerable: true},
    append: {enumerable: true},
    has: {enumerable: true},
    delete: {enumerable: true},
    keys: {enumerable: true},
    values: {enumerable: true},
    entries: {enumerable: true}
  });
  function getHeaders(headers) {
    let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
    const keys = Object.keys(headers[MAP]).sort();
    return keys.map(kind === "key" ? function(k) {
      return k.toLowerCase();
    } : kind === "value" ? function(k) {
      return headers[MAP][k].join(", ");
    } : function(k) {
      return [k.toLowerCase(), headers[MAP][k].join(", ")];
    });
  }
  const INTERNAL = Symbol("internal");
  function createHeadersIterator(target, kind) {
    const iterator = Object.create(HeadersIteratorPrototype);
    iterator[INTERNAL] = {
      target,
      kind,
      index: 0
    };
    return iterator;
  }
  const HeadersIteratorPrototype = Object.setPrototypeOf({
    next() {
      if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
        throw new TypeError("Value of `this` is not a HeadersIterator");
      }
      var _INTERNAL = this[INTERNAL];
      const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
      const values = getHeaders(target, kind);
      const len = values.length;
      if (index >= len) {
        return {
          value: void 0,
          done: true
        };
      }
      this[INTERNAL].index = index + 1;
      return {
        value: values[index],
        done: false
      };
    }
  }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
  Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
    value: "HeadersIterator",
    writable: false,
    enumerable: false,
    configurable: true
  });
  function exportNodeCompatibleHeaders(headers) {
    const obj = Object.assign({__proto__: null}, headers[MAP]);
    const hostHeaderKey = find(headers[MAP], "Host");
    if (hostHeaderKey !== void 0) {
      obj[hostHeaderKey] = obj[hostHeaderKey][0];
    }
    return obj;
  }
  function createHeadersLenient(obj) {
    const headers = new Headers2();
    for (const name of Object.keys(obj)) {
      if (invalidTokenRegex.test(name)) {
        continue;
      }
      if (Array.isArray(obj[name])) {
        for (const val of obj[name]) {
          if (invalidHeaderCharRegex.test(val)) {
            continue;
          }
          if (headers[MAP][name] === void 0) {
            headers[MAP][name] = [val];
          } else {
            headers[MAP][name].push(val);
          }
        }
      } else if (!invalidHeaderCharRegex.test(obj[name])) {
        headers[MAP][name] = [obj[name]];
      }
    }
    return headers;
  }
  const INTERNALS$1 = Symbol("Response internals");
  const STATUS_CODES = http2.default.STATUS_CODES;
  class Response2 {
    constructor() {
      let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
      let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      Body.call(this, body, opts);
      const status = opts.status || 200;
      const headers = new Headers2(opts.headers);
      if (body != null && !headers.has("Content-Type")) {
        const contentType = extractContentType(body);
        if (contentType) {
          headers.append("Content-Type", contentType);
        }
      }
      this[INTERNALS$1] = {
        url: opts.url,
        status,
        statusText: opts.statusText || STATUS_CODES[status],
        headers,
        counter: opts.counter
      };
    }
    get url() {
      return this[INTERNALS$1].url || "";
    }
    get status() {
      return this[INTERNALS$1].status;
    }
    get ok() {
      return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
    }
    get redirected() {
      return this[INTERNALS$1].counter > 0;
    }
    get statusText() {
      return this[INTERNALS$1].statusText;
    }
    get headers() {
      return this[INTERNALS$1].headers;
    }
    clone() {
      return new Response2(clone(this), {
        url: this.url,
        status: this.status,
        statusText: this.statusText,
        headers: this.headers,
        ok: this.ok,
        redirected: this.redirected
      });
    }
  }
  Body.mixIn(Response2.prototype);
  Object.defineProperties(Response2.prototype, {
    url: {enumerable: true},
    status: {enumerable: true},
    ok: {enumerable: true},
    redirected: {enumerable: true},
    statusText: {enumerable: true},
    headers: {enumerable: true},
    clone: {enumerable: true}
  });
  Object.defineProperty(Response2.prototype, Symbol.toStringTag, {
    value: "Response",
    writable: false,
    enumerable: false,
    configurable: true
  });
  const INTERNALS$2 = Symbol("Request internals");
  const parse_url = url.default.parse;
  const format_url = url.default.format;
  const streamDestructionSupported = "destroy" in stream.default.Readable.prototype;
  function isRequest(input) {
    return typeof input === "object" && typeof input[INTERNALS$2] === "object";
  }
  function isAbortSignal(signal) {
    const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
    return !!(proto && proto.constructor.name === "AbortSignal");
  }
  class Request2 {
    constructor(input) {
      let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      let parsedURL;
      if (!isRequest(input)) {
        if (input && input.href) {
          parsedURL = parse_url(input.href);
        } else {
          parsedURL = parse_url(`${input}`);
        }
        input = {};
      } else {
        parsedURL = parse_url(input.url);
      }
      let method = init.method || input.method || "GET";
      method = method.toUpperCase();
      if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
        throw new TypeError("Request with GET/HEAD method cannot have body");
      }
      let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
      Body.call(this, inputBody, {
        timeout: init.timeout || input.timeout || 0,
        size: init.size || input.size || 0
      });
      const headers = new Headers2(init.headers || input.headers || {});
      if (inputBody != null && !headers.has("Content-Type")) {
        const contentType = extractContentType(inputBody);
        if (contentType) {
          headers.append("Content-Type", contentType);
        }
      }
      let signal = isRequest(input) ? input.signal : null;
      if ("signal" in init)
        signal = init.signal;
      if (signal != null && !isAbortSignal(signal)) {
        throw new TypeError("Expected signal to be an instanceof AbortSignal");
      }
      this[INTERNALS$2] = {
        method,
        redirect: init.redirect || input.redirect || "follow",
        headers,
        parsedURL,
        signal
      };
      this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
      this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
      this.counter = init.counter || input.counter || 0;
      this.agent = init.agent || input.agent;
    }
    get method() {
      return this[INTERNALS$2].method;
    }
    get url() {
      return format_url(this[INTERNALS$2].parsedURL);
    }
    get headers() {
      return this[INTERNALS$2].headers;
    }
    get redirect() {
      return this[INTERNALS$2].redirect;
    }
    get signal() {
      return this[INTERNALS$2].signal;
    }
    clone() {
      return new Request2(this);
    }
  }
  Body.mixIn(Request2.prototype);
  Object.defineProperty(Request2.prototype, Symbol.toStringTag, {
    value: "Request",
    writable: false,
    enumerable: false,
    configurable: true
  });
  Object.defineProperties(Request2.prototype, {
    method: {enumerable: true},
    url: {enumerable: true},
    headers: {enumerable: true},
    redirect: {enumerable: true},
    clone: {enumerable: true},
    signal: {enumerable: true}
  });
  function getNodeRequestOptions(request) {
    const parsedURL = request[INTERNALS$2].parsedURL;
    const headers = new Headers2(request[INTERNALS$2].headers);
    if (!headers.has("Accept")) {
      headers.set("Accept", "*/*");
    }
    if (!parsedURL.protocol || !parsedURL.hostname) {
      throw new TypeError("Only absolute URLs are supported");
    }
    if (!/^https?:$/.test(parsedURL.protocol)) {
      throw new TypeError("Only HTTP(S) protocols are supported");
    }
    if (request.signal && request.body instanceof stream.default.Readable && !streamDestructionSupported) {
      throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
    }
    let contentLengthValue = null;
    if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
      contentLengthValue = "0";
    }
    if (request.body != null) {
      const totalBytes = getTotalBytes(request);
      if (typeof totalBytes === "number") {
        contentLengthValue = String(totalBytes);
      }
    }
    if (contentLengthValue) {
      headers.set("Content-Length", contentLengthValue);
    }
    if (!headers.has("User-Agent")) {
      headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
    }
    if (request.compress && !headers.has("Accept-Encoding")) {
      headers.set("Accept-Encoding", "gzip,deflate");
    }
    let agent = request.agent;
    if (typeof agent === "function") {
      agent = agent(parsedURL);
    }
    if (!headers.has("Connection") && !agent) {
      headers.set("Connection", "close");
    }
    return Object.assign({}, parsedURL, {
      method: request.method,
      headers: exportNodeCompatibleHeaders(headers),
      agent
    });
  }
  function AbortError(message) {
    Error.call(this, message);
    this.type = "aborted";
    this.message = message;
    Error.captureStackTrace(this, this.constructor);
  }
  AbortError.prototype = Object.create(Error.prototype);
  AbortError.prototype.constructor = AbortError;
  AbortError.prototype.name = "AbortError";
  const PassThrough$1 = stream.default.PassThrough;
  const resolve_url = url.default.resolve;
  function fetch(url2, opts) {
    if (!fetch.Promise) {
      throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
    }
    Body.Promise = fetch.Promise;
    return new fetch.Promise(function(resolve, reject) {
      const request = new Request2(url2, opts);
      const options = getNodeRequestOptions(request);
      const send = (options.protocol === "https:" ? https2.default : http2.default).request;
      const signal = request.signal;
      let response = null;
      const abort = function abort2() {
        let error = new AbortError("The user aborted a request.");
        reject(error);
        if (request.body && request.body instanceof stream.default.Readable) {
          request.body.destroy(error);
        }
        if (!response || !response.body)
          return;
        response.body.emit("error", error);
      };
      if (signal && signal.aborted) {
        abort();
        return;
      }
      const abortAndFinalize = function abortAndFinalize2() {
        abort();
        finalize();
      };
      const req = send(options);
      let reqTimeout;
      if (signal) {
        signal.addEventListener("abort", abortAndFinalize);
      }
      function finalize() {
        req.abort();
        if (signal)
          signal.removeEventListener("abort", abortAndFinalize);
        clearTimeout(reqTimeout);
      }
      if (request.timeout) {
        req.once("socket", function(socket) {
          reqTimeout = setTimeout(function() {
            reject(new FetchError(`network timeout at: ${request.url}`, "request-timeout"));
            finalize();
          }, request.timeout);
        });
      }
      req.on("error", function(err) {
        reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
        finalize();
      });
      req.on("response", function(res) {
        clearTimeout(reqTimeout);
        const headers = createHeadersLenient(res.headers);
        if (fetch.isRedirect(res.statusCode)) {
          const location = headers.get("Location");
          const locationURL = location === null ? null : resolve_url(request.url, location);
          switch (request.redirect) {
            case "error":
              reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
              finalize();
              return;
            case "manual":
              if (locationURL !== null) {
                try {
                  headers.set("Location", locationURL);
                } catch (err) {
                  reject(err);
                }
              }
              break;
            case "follow":
              if (locationURL === null) {
                break;
              }
              if (request.counter >= request.follow) {
                reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
                finalize();
                return;
              }
              const requestOpts = {
                headers: new Headers2(request.headers),
                follow: request.follow,
                counter: request.counter + 1,
                agent: request.agent,
                compress: request.compress,
                method: request.method,
                body: request.body,
                signal: request.signal,
                timeout: request.timeout,
                size: request.size
              };
              if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
                reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                finalize();
                return;
              }
              if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === "POST") {
                requestOpts.method = "GET";
                requestOpts.body = void 0;
                requestOpts.headers.delete("content-length");
              }
              resolve(fetch(new Request2(locationURL, requestOpts)));
              finalize();
              return;
          }
        }
        res.once("end", function() {
          if (signal)
            signal.removeEventListener("abort", abortAndFinalize);
        });
        let body = res.pipe(new PassThrough$1());
        const response_options = {
          url: request.url,
          status: res.statusCode,
          statusText: res.statusMessage,
          headers,
          size: request.size,
          timeout: request.timeout,
          counter: request.counter
        };
        const codings = headers.get("Content-Encoding");
        if (!request.compress || request.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
          response = new Response2(body, response_options);
          resolve(response);
          return;
        }
        const zlibOptions = {
          flush: zlib2.default.Z_SYNC_FLUSH,
          finishFlush: zlib2.default.Z_SYNC_FLUSH
        };
        if (codings == "gzip" || codings == "x-gzip") {
          body = body.pipe(zlib2.default.createGunzip(zlibOptions));
          response = new Response2(body, response_options);
          resolve(response);
          return;
        }
        if (codings == "deflate" || codings == "x-deflate") {
          const raw = res.pipe(new PassThrough$1());
          raw.once("data", function(chunk) {
            if ((chunk[0] & 15) === 8) {
              body = body.pipe(zlib2.default.createInflate());
            } else {
              body = body.pipe(zlib2.default.createInflateRaw());
            }
            response = new Response2(body, response_options);
            resolve(response);
          });
          return;
        }
        if (codings == "br" && typeof zlib2.default.createBrotliDecompress === "function") {
          body = body.pipe(zlib2.default.createBrotliDecompress());
          response = new Response2(body, response_options);
          resolve(response);
          return;
        }
        response = new Response2(body, response_options);
        resolve(response);
      });
      writeToStream(req, request);
    });
  }
  fetch.isRedirect = function(code) {
    return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
  };
  fetch.Promise = global.Promise;
  var lib_default = fetch;
});

// ../sdk/dist/versions.js
var require_versions = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.engineVersions = void 0;
  exports2.engineVersions = {"2.0.0-preview025": "8814060fa684793b73d07dbfccd4b7777b3361ae", "2.0.0-beta.1": "2accb9c7eacdc984874eaeb63377fe705dfd3203", "2.0.0-beta.2": "76857c35ba1e1764dd5473656ecbbb2f739e1822", "2.0.0-beta.3": "2fb8f444d9cdf7c0beee7b041194b42d7a9ce1e6", "2.0.0-beta.4": "afd294205618b1c825b013ba6f5a6ebe4aa4a514", "2.0.0-beta.5": "0c2ec197653b278b2978845ef958db88824cd82e", "2.0.0-beta.6": "c48b94aa8d1d9a0e5582dcd14e25202b76303dca", "2.0.0-beta.7": "5d39801acf2e3475bd9dab029a63634358b07bf1", "2.0.0-beta.8": "ff6959d77f8880ec037ed8201fff4a92f3aabaa0", "2.0.0-beta.9": "de2bc1cbdb5561ad73d2f08463fa2eec48993f56", "2.0.0": "de2bc1cbdb5561ad73d2f08463fa2eec48993f56", "2.1.0-dev.1": "de2bc1cbdb5561ad73d2f08463fa2eec48993f56", "2.1.0-dev.3": "de2bc1cbdb5561ad73d2f08463fa2eec48993f56", "2.1.0-dev.4": "de2bc1cbdb5561ad73d2f08463fa2eec48993f56", "2.1.0-dev.5": "8276c7c5aa78dbfea6213a4f9918200ee909b9a1", "2.1.0-dev.6": "f64916f0b6ce4210f7793b551f6bf9bfab7fd45a", "2.1.0-dev.7": "f64916f0b6ce4210f7793b551f6bf9bfab7fd45a", "2.1.0-dev.8": "f64916f0b6ce4210f7793b551f6bf9bfab7fd45a", "2.1.0-dev.9": "dc0f43d1460553447c563479493914279205d48f", "2.1.0-dev.10": "dc0f43d1460553447c563479493914279205d48f", "2.1.0-dev.11": "dc0f43d1460553447c563479493914279205d48f", "2.1.0-dev.12": "e52ce7fbe503b390ca40425e62efeb5bc2cefb7e", "2.1.0-dev.13": "6c7b34889020f8b10eea253f37022b6a1a935de3", "2.1.0-dev.14": "d75f4952ce0649fcf62c068cf03c18944b0bce34", "2.1.0-dev.15": "e172ae243853e2a47c75a1abe5547d0677980346", "2.1.0-dev.16": "077166a5c1ab914cf3d9764adc44ed812c7aa5b3", "2.1.0-dev.17": "7862cc88dc37aad8eb16913b5c09af408e5239fc", "2.1.0-dev.18": "487d9dd9cd33fa68a3eb9f3a991be11927fee9aa", "2.1.0-dev.19": "4e71ba30f44f81b4a62e51502941aa71e451be66", "2.1.0-dev.20": "55f869ed93b06baf167e981f5d4f2d8161f49998", "2.1.0-dev.21": "55f869ed93b06baf167e981f5d4f2d8161f49998", "2.1.0-dev.22": "55f869ed93b06baf167e981f5d4f2d8161f49998", "2.1.0-dev.24": "55f869ed93b06baf167e981f5d4f2d8161f49998", "2.1.0-dev.25": "8375158b46e194d6f48fb78be6e4ac58e693f2d4", "2.1.0-dev.26": "8375158b46e194d6f48fb78be6e4ac58e693f2d4", "2.1.0-dev.27": "8375158b46e194d6f48fb78be6e4ac58e693f2d4", "2.0.1-dev.1": "7d77a7cd570c9dedb4cdf31a1cbec615cf2e1eda", "2.0.1-dev.2": "7d77a7cd570c9dedb4cdf31a1cbec615cf2e1eda", "2.1.0-dev.28": "6838566f3107ff9f8de79e3bb8a731e70c02fb00", "2.1.0-dev.29": "6838566f3107ff9f8de79e3bb8a731e70c02fb00", "2.0.1-dev.3": "7d77a7cd570c9dedb4cdf31a1cbec615cf2e1eda", "2.0.1": "7d77a7cd570c9dedb4cdf31a1cbec615cf2e1eda", "2.1.0-dev.30": "2e65011d592bae491ee9dd5f8a6159c85c35e767", "2.1.0-dev.31": "2e65011d592bae491ee9dd5f8a6159c85c35e767", "2.1.0-dev.32": "2e65011d592bae491ee9dd5f8a6159c85c35e767", "2.1.0-dev.33": "2e65011d592bae491ee9dd5f8a6159c85c35e767", "2.1.0-dev.34": "2e65011d592bae491ee9dd5f8a6159c85c35e767", "2.1.0-dev.35": "2e65011d592bae491ee9dd5f8a6159c85c35e767", "2.1.0-dev.36": "12d156ebbe4bd254b3d20a2fa132bcc66a802502", "2.1.0-dev.37": "12d156ebbe4bd254b3d20a2fa132bcc66a802502", "2.1.0-dev.38": "12d156ebbe4bd254b3d20a2fa132bcc66a802502", "2.1.0-dev.39": "ffc156935b82a02a6770ab5e355e33312a0d0706", "2.1.0-dev.40": "bb1356b9cbd72b74787bfa66bbe5c8e338810b05", "2.1.0-dev.41": "bb1356b9cbd72b74787bfa66bbe5c8e338810b05", "2.1.0-dev.42": "bb1356b9cbd72b74787bfa66bbe5c8e338810b05", "2.1.0-dev.43": "bb1356b9cbd72b74787bfa66bbe5c8e338810b05", "2.1.0-dev.44": "9a43c75685826419972aa2ee5847d7a7107a176f", "2.1.0-dev.45": "9a43c75685826419972aa2ee5847d7a7107a176f", "2.1.0-dev.46": "9a43c75685826419972aa2ee5847d7a7107a176f", "2.1.0-dev.47": "9a43c75685826419972aa2ee5847d7a7107a176f", "2.1.0-dev.48": "dbeb321de898f94b03cd6f9b525c0187d93c3119", "2.1.0-dev.49": "64064ad0b1018ccb2309d97cbe958b666e5c55ea", "2.1.0-dev.50": "eef69002f93443908594c3293eca977e22008b22", "2.1.0-dev.51": "38d970371091514dcd2965847e30e9bf56820057", "2.1.0-dev.52": "c60e0db03225f303cfed42afcb6814999c95c6d8", "2.1.0-dev.53": "18c02927ce69cd6d593e1bfca4647ec46ee172d7", "2.1.0-dev.54": "6b10f7bfb5c09d707016877e7ec2e0c35f26eb67", "2.1.0-dev.55": "713204c8241b1870c0ae1145a256232744708cce", "2.1.0-dev.56": "713204c8241b1870c0ae1145a256232744708cce", "2.1.0-dev.57": "713204c8241b1870c0ae1145a256232744708cce", "2.1.0-dev.58": "4440772035795a0424be62040e2295c56e5c6ad0", "2.1.0-dev.59": "4440772035795a0424be62040e2295c56e5c6ad0", "2.1.0": "4440772035795a0424be62040e2295c56e5c6ad0", "2.2.0-dev.1": "30a3b13a02ea2b9a1bfa980e7c25b41bdbf77ea5", "2.2.0-dev.2": "30a3b13a02ea2b9a1bfa980e7c25b41bdbf77ea5", "2.1.1-dev.2": "34b761660584e32d715c3e86ecec3e2c4d50d0d9", "2.1.1": "34b761660584e32d715c3e86ecec3e2c4d50d0d9", "2.2.0-dev.3": "34b761660584e32d715c3e86ecec3e2c4d50d0d9", "2.2.0-dev.4": "43a04d7fe56db1d914cdd3619ef5c819c783d243", "2.2.0-dev.5": "219a8d806a3568142dee4c8673e767750e9d0136", "2.2.0-dev.6": "36247a04e8ff91aec3ecd2af1680494201048f34", "2.2.0-dev.7": "36247a04e8ff91aec3ecd2af1680494201048f34", "2.2.0-dev.8": "e006ba7fcfd6257d81e616e4e1bbbab8e017a9fe", "2.2.0-dev.9": "632c075edd87eff798b1babf16a4965ae2b45a9b", "2.2.0-dev.10": "632c075edd87eff798b1babf16a4965ae2b45a9b", "2.2.0-dev.11": "4414d4e066670f6edb6da381e6c8fcf544d6178f", "2.2.0-dev.12": "d23f217662512ed9c9a4a6a920c377154053a0a4", "2.2.0-dev.13": "700298ef090d8d45bed3750e99f56ba0be03673d", "2.2.0-dev.14": "700298ef090d8d45bed3750e99f56ba0be03673d", "2.2.0-dev.15": "297d4dddf12cd89b7c6de31ef15c42967f5cc559", "2.1.2-dev.1": "363f5a521d6b06543e53d134652a0037a3096d41", "2.1.2-dev.2": "363f5a521d6b06543e53d134652a0037a3096d41", "2.1.2": "363f5a521d6b06543e53d134652a0037a3096d41", "2.1.3-dev.1": "363f5a521d6b06543e53d134652a0037a3096d41", "2.1.3": "363f5a521d6b06543e53d134652a0037a3096d41", "2.2.0-dev.16": "297d4dddf12cd89b7c6de31ef15c42967f5cc559", "2.2.0-dev.17": "297d4dddf12cd89b7c6de31ef15c42967f5cc559", "2.2.0-dev.18": "297d4dddf12cd89b7c6de31ef15c42967f5cc559", "2.2.0-dev.19": "cb47e060d4a557e1e7870f50fc7b3c014f278114", "2.2.0-dev.20": "9216be08662d7280cc02246b4f5cc5f4b93cf8a3", "2.2.0-dev.21": "9216be08662d7280cc02246b4f5cc5f4b93cf8a3", "2.2.0-dev.23": "9216be08662d7280cc02246b4f5cc5f4b93cf8a3", "2.2.0-dev.24": "9216be08662d7280cc02246b4f5cc5f4b93cf8a3", "2.2.0-dev.25": "9216be08662d7280cc02246b4f5cc5f4b93cf8a3", "2.2.0-dev.26": "c29fbcd0f57c67e11722e479b9d135b346767e69", "2.2.0-dev.27": "c29fbcd0f57c67e11722e479b9d135b346767e69", "2.2.0-dev.28": "d6ff7119649922b84e413b3b69660e2f49e2ddf3", "2.2.0-dev.29": "d6ff7119649922b84e413b3b69660e2f49e2ddf3", "2.2.0-dev.30": "f5632770336d9cd89b6fa90204c3decf335c065a", "2.2.0-dev.31": "f5632770336d9cd89b6fa90204c3decf335c065a", "2.2.0-dev.32": "f5632770336d9cd89b6fa90204c3decf335c065a", "2.2.0-dev.33": "f5632770336d9cd89b6fa90204c3decf335c065a", "2.2.0-dev.34": "75d49d38ea10c8099ff9e90336c721fa6b47b90a", "2.2.0-dev.35": "c65f7b5d18ee8dbd0f43f654571bd3e85b625d80", "2.2.0-dev.36": "a0b56e4a4bc0dc6216e1cb26bd91a4094b868010", "2.2.0-dev.37": "ea035543e59571161e00ccd4063f5638283bfba7", "2.2.0-dev.38": "ea035543e59571161e00ccd4063f5638283bfba7", "2.2.0-dev.39": "ea035543e59571161e00ccd4063f5638283bfba7", "2.2.0-dev.40": "ea035543e59571161e00ccd4063f5638283bfba7", "2.2.0-dev.41": "1c840bb755d3b03acf9259f689303db93159c7b5", "2.2.0-dev.42": "1c840bb755d3b03acf9259f689303db93159c7b5", "2.2.0-dev.43": "ed51c9476579e3aa52ec43079fb2a351c70f5bb7", "2.2.0-dev.44": "ed51c9476579e3aa52ec43079fb2a351c70f5bb7", "2.2.0-dev.45": "ed51c9476579e3aa52ec43079fb2a351c70f5bb7", "2.2.0-dev.46": "ed51c9476579e3aa52ec43079fb2a351c70f5bb7", "2.2.0-dev.47": "ed51c9476579e3aa52ec43079fb2a351c70f5bb7", "2.2.0-dev.48": "ed51c9476579e3aa52ec43079fb2a351c70f5bb7", "2.2.0-dev.49": "ed51c9476579e3aa52ec43079fb2a351c70f5bb7", "2.2.0-dev.50": "83ac782d5d93dcee37efeba8ccbeff596701148a", "2.2.0-dev.51": "83ac782d5d93dcee37efeba8ccbeff596701148a", "2.2.0-dev.52": "83ac782d5d93dcee37efeba8ccbeff596701148a", "2.2.0-dev.53": "83ac782d5d93dcee37efeba8ccbeff596701148a", "2.2.0-dev.54": "83ac782d5d93dcee37efeba8ccbeff596701148a", "2.2.0-dev.55": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.56": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.57": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.58": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.59": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.60": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.61": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.62": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.63": "45c4da4dd3ccd6a322796b228bdf937c7ce884e8", "2.2.0": "45c4da4dd3ccd6a322796b228bdf937c7ce884e8", "2.3.0-dev.1": "3b7bab56afd3c41d2b1e92b21607c25527376819", "2.3.0-dev.2": "341b5a03061332a0a107760fc5be098168b7af49", "2.3.0-dev.3": "f21b611f21983123efdd86b230717b552898db2c", "2.3.0-dev.4": "7c61a28fce591bca9794f84bada575727c8d3a81", "2.3.0-dev.5": "7c61a28fce591bca9794f84bada575727c8d3a81", "2.3.0-dev.6": "9a238f2a34ac96b4006d0622063cda5d7c550f39", "2.3.0-dev.7": "225c75492b90e646e0224803ae30926eb676bdd0", "2.3.0-dev.8": "6b4130069651151477456fde7c6f1adce7e5aba1", "2.3.0-dev.9": "6b4130069651151477456fde7c6f1adce7e5aba1", "2.3.0-dev.10": "9fa0e57d0617e4e18ceae3b23280702f90b18412", "2.3.0-dev.11": "9fa0e57d0617e4e18ceae3b23280702f90b18412", "2.3.0-dev.12": "68efc71c4b657c5dbd59b177ecf2daf18e5b0201", "2.2.1-dev.1": "832e37683666c748b0a1cbdc2c5068b5e443e816", "2.2.1-dev.2": "832e37683666c748b0a1cbdc2c5068b5e443e816", "2.3.0-dev.13": "ba2d82113a01f9d56c88cf52279fb0bd5f74fac0", "2.2.1-dev.3": "832e37683666c748b0a1cbdc2c5068b5e443e816", "2.2.1-dev.4": "832e37683666c748b0a1cbdc2c5068b5e443e816", "2.3.0-dev.14": "21bd701db858e37b8f3157190a86da93e21ec5df", "2.2.1-dev.5": "832e37683666c748b0a1cbdc2c5068b5e443e816", "2.3.0-dev.15": "21bd701db858e37b8f3157190a86da93e21ec5df", "2.3.0-dev.16": "21bd701db858e37b8f3157190a86da93e21ec5df", "2.3.0-dev.17": "21bd701db858e37b8f3157190a86da93e21ec5df", "2.2.1-dev.6": "832e37683666c748b0a1cbdc2c5068b5e443e816", "2.3.0-dev.18": "21bd701db858e37b8f3157190a86da93e21ec5df", "2.2.1": "832e37683666c748b0a1cbdc2c5068b5e443e816", "2.3.0-dev.19": "81e452517f2e53825001cddd130dc09e0862711b", "2.2.2-dev.1": "a9e8c3d97ef2a0cf59256e6b26097f2a80f0a6a4", "2.2.2": "a9e8c3d97ef2a0cf59256e6b26097f2a80f0a6a4", "2.3.0-dev.20": "7dd62871982e0897f81591928ef43d4669b2a176", "2.3.0-dev.21": "7dd62871982e0897f81591928ef43d4669b2a176", "2.3.0-dev.23": "b032e1220061befb095deef6f8ee2e36bacbf4d9", "2.3.0-dev.25": "b032e1220061befb095deef6f8ee2e36bacbf4d9", "2.3.0-dev.26": "b032e1220061befb095deef6f8ee2e36bacbf4d9", "2.3.0-dev.27": "b032e1220061befb095deef6f8ee2e36bacbf4d9", "2.3.0-dev.28": "b032e1220061befb095deef6f8ee2e36bacbf4d9", "2.3.0-dev.29": "99bc0e4998e8148ef5716312495fcaa7293b62ff", "2.3.0-dev.30": "a1ea05fcba2ecf3d741a559a8394a61a0958b662", "2.3.0-dev.31": "a1ea05fcba2ecf3d741a559a8394a61a0958b662", "2.3.0-dev.32": "a6590bef185927e77afebb0bf8a1bc3defe5d0ad", "2.3.0-dev.33": "ba26cce0f10f923f1de113aae0763d2412e18247", "2.3.0-dev.34": "ba26cce0f10f923f1de113aae0763d2412e18247", "2.3.0-dev.35": "ba26cce0f10f923f1de113aae0763d2412e18247", "2.3.0-dev.36": "0335c039a0bc842a20ffe7832d26e592f34ea916", "2.3.0-dev.37": "0335c039a0bc842a20ffe7832d26e592f34ea916", "2.3.0-dev.38": "cdc255245a255c24b3dd50db25a050636973ec77", "2.3.0-dev.39": "1efe9b96955f1316d84351b2e771d81246873022", "2.3.0-dev.40": "156ad9546453b9b64fd2feeede6ad8991bb9de22", "2.3.0-dev.41": "8619f7cdd8edc678160849a499cdaaf73dc9b63c", "2.3.0-dev.42": "f7829d796be36394ee9a64f1fc67c643aae046f2", "2.3.0-dev.43": "f7829d796be36394ee9a64f1fc67c643aae046f2", "2.3.0-dev.44": "ede20e7638e18c628b4f70b3d2483c87b919982a", "2.3.0-dev.45": "862d67e6b9ca50e232d4cdbc3b12b3f1f08cec8a", "2.3.0-dev.46": "862d67e6b9ca50e232d4cdbc3b12b3f1f08cec8a", "2.3.0-dev.47": "862d67e6b9ca50e232d4cdbc3b12b3f1f08cec8a", "2.3.0-dev.48": "143a8265b75aefe077e9f483f4a275ab5e0ad5f6", "2.3.0-dev.49": "143a8265b75aefe077e9f483f4a275ab5e0ad5f6", "2.3.0-dev.50": "143a8265b75aefe077e9f483f4a275ab5e0ad5f6", "2.3.0-dev.51": "143a8265b75aefe077e9f483f4a275ab5e0ad5f6", "2.3.0-dev.52": "143a8265b75aefe077e9f483f4a275ab5e0ad5f6", "2.3.0-dev.53": "b1c5396ac9832eb8481b3c7f36c393ab1747211d", "2.3.0-dev.54": "b1c5396ac9832eb8481b3c7f36c393ab1747211d", "2.3.0-dev.55": "b1c5396ac9832eb8481b3c7f36c393ab1747211d", "2.3.0-dev.56": "b1c5396ac9832eb8481b3c7f36c393ab1747211d", "2.3.0-dev.57": "e11114fa1ea826f9e7b4fa1ced34e78892fe8e0e", "2.3.0": "e11114fa1ea826f9e7b4fa1ced34e78892fe8e0e", "2.4.0-dev.1": "bbc9be76da4bf5af6bacb8655633ae4ea56b6f6f", "2.4.0-dev.2": "346c7b5b70ae5ed4e10b0342b556e7d53c27c0af", "2.4.0-dev.3": "84202350ac21bc9479513fe91cc3510629aac69f", "2.4.0-dev.4": "1fdb184ea79af011b9c0ac677562719088f490af", "2.4.0-dev.5": "d995a75689d1bd4e90b019fd083d90d6fa2d48fa", "2.4.0-dev.6": "d995a75689d1bd4e90b019fd083d90d6fa2d48fa", "2.4.0-dev.7": "0f3750ce5b6509b766811fbe350e83f232daa57f", "2.4.0-dev.8": "0f3750ce5b6509b766811fbe350e83f232daa57f", "2.4.0-dev.9": "05ff93c8e9cea55e82b3bd3e50f71a571c6b0de5", "2.4.0-dev.10": "1e19628edbd4755d416300449b4c7bbb9d85e03f", "2.4.0-dev.11": "70bbce05e86a6109ced7ad133bd5dca095b3fa58", "2.4.0-dev.12": "054d8fd21e5ab5c9955492c3aad62dbb8c15f40b", "2.4.0-dev.13": "0912eb4031e6d77c4e13637447099b7100e602a3", "2.4.0-dev.14": "3a3fd0fe2660782248c1e42fa75ae0731fed8819", "2.4.0-dev.15": "9d759290dff266f4d4c39e415d8ac846827a4053", "2.4.0-dev.16": "ab6fccbd80bff0d30b57f371c8929de7b48c77e2", "2.4.0-dev.17": "fed4a488fd2a7c81fc556262f9ece4eb3fe6bd23", "2.4.0-dev.18": "b5c495e1e22d312e3ade4f4d8dbf5123e1ff9e30", "2.4.0-dev.19": "37468de984a57c89edf7ebde8c5ebd81d1e7183b", "2.4.0-dev.20": "37468de984a57c89edf7ebde8c5ebd81d1e7183b", "2.4.0-dev.21": "37468de984a57c89edf7ebde8c5ebd81d1e7183b", "2.4.0-dev.22": "37468de984a57c89edf7ebde8c5ebd81d1e7183b", "2.4.0-dev.23": "37468de984a57c89edf7ebde8c5ebd81d1e7183b", "2.4.0-dev.24": "37468de984a57c89edf7ebde8c5ebd81d1e7183b", "2.4.0-dev.25": "37468de984a57c89edf7ebde8c5ebd81d1e7183b", "2.4.0-dev.26": "f12ffba327775df35dca10f5cbcb829e866614e8", "2.4.0-dev.27": "1e72e2311f531c77af7675b1e1acac595d26bb49", "2.4.0-dev.28": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.29": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.30": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.31": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.32": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.33": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.34": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.35": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.36": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.37": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.38": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.39": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.40": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.41": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.42": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.43": "8337329d29aec488119918879493ab6fd38c880e", "2.4.0-dev.44": "8337329d29aec488119918879493ab6fd38c880e", "2.4.0-dev.45": "8337329d29aec488119918879493ab6fd38c880e", "2.4.0-dev.46": "8337329d29aec488119918879493ab6fd38c880e", "2.4.0-dev.47": "8337329d29aec488119918879493ab6fd38c880e", "2.4.0-dev.48": "8337329d29aec488119918879493ab6fd38c880e", "2.4.0-dev.49": "4c91943360cd3d09eb0a9d55286c2670ed9e5e88", "2.4.0-dev.50": "4c91943360cd3d09eb0a9d55286c2670ed9e5e88", "2.4.0-dev.51": "4c91943360cd3d09eb0a9d55286c2670ed9e5e88", "2.4.0-dev.52": "d65a057850f62704205d0e392faf01613293d6f4", "2.4.0-dev.53": "bb57b5bea80ee2dd82fcae105e0204a2349a54c2", "2.4.0-dev.54": "bb57b5bea80ee2dd82fcae105e0204a2349a54c2", "2.4.0-dev.55": "6c777331554df4c3e0a90dd841339c7b0619d0e1", "2.4.0-dev.56": "6c777331554df4c3e0a90dd841339c7b0619d0e1", "2.4.0-dev.57": "6c777331554df4c3e0a90dd841339c7b0619d0e1", "2.4.0-dev.58": "6c777331554df4c3e0a90dd841339c7b0619d0e1", "2.4.0-dev.59": "6c777331554df4c3e0a90dd841339c7b0619d0e1", "2.4.0-dev.60": "6c777331554df4c3e0a90dd841339c7b0619d0e1", "2.4.0": "6c777331554df4c3e0a90dd841339c7b0619d0e1", "2.5.0-dev.1": "8badef702a0bb0e6121197ccec5976d9af178cc4", "2.5.0-dev.2": "8badef702a0bb0e6121197ccec5976d9af178cc4", "2.5.0-dev.3": "e745b5f2a9bea5d04faeb768b619aa761d176b7d", "2.5.0-dev.4": "e745b5f2a9bea5d04faeb768b619aa761d176b7d", "2.5.0-dev.5": "6e674469fff1a603c0139a09a5c7665af0c0b915", "2.4.1-dev.1": "195d4bdc2d16132977f4ba7a8ca312f7906cb086", "2.4.1": "195d4bdc2d16132977f4ba7a8ca312f7906cb086", "2.5.0-dev.6": "a4c0b19a07ff370234d8e6205a60aa885daed3c9", "2.5.0-dev.7": "2d5db567f479b50d4a793d4141fb3dad6b6d14af", "2.5.0-dev.8": "2dbcdc81e4161f23e736d2d7a5356926f4abfda7", "2.5.0-dev.9": "8e4f3a5c140fa60e254d5ca37536c5991960dc7f", "2.5.0-dev.10": "734ab53bd8e2cadf18b8b71cb53bf2d2bed46517", "2.5.0-dev.11": "734ab53bd8e2cadf18b8b71cb53bf2d2bed46517", "2.5.0-dev.12": "96dcc3c34f040c9808059de63409f04687c9beff", "2.5.0-dev.13": "2deb6252cdc82d12effe3a000748397cd6a1ba6e", "2.5.0-dev.14": "2deb6252cdc82d12effe3a000748397cd6a1ba6e", "2.5.0-dev.15": "2deb6252cdc82d12effe3a000748397cd6a1ba6e", "2.5.0-dev.16": "9f61a69f7e2e04c849ba039136a8ee3625e03859", "2.5.0-dev.17": "9f61a69f7e2e04c849ba039136a8ee3625e03859", "2.5.0-dev.18": "9f61a69f7e2e04c849ba039136a8ee3625e03859", "2.5.0-dev.19": "9f61a69f7e2e04c849ba039136a8ee3625e03859", "2.5.0-dev.20": "6fa13fa129a579cce403a8cdf65aa3bd7a19028b", "2.5.0-dev.21": "e8c86b2eed97ef06abd25651f450e957b21f5c31", "2.5.0-dev.22": "e8c86b2eed97ef06abd25651f450e957b21f5c31", "2.5.0-dev.23": "e8c86b2eed97ef06abd25651f450e957b21f5c31", "2.5.0-dev.24": "e8c86b2eed97ef06abd25651f450e957b21f5c31", "2.5.0-dev.25": "e8c86b2eed97ef06abd25651f450e957b21f5c31", "2.5.0-dev.26": "b6c3e2ef9589d6e08cb9ad74d68e733f4007650c", "2.5.0-dev.27": "ac051172582b2c03c3d6e2f1470a0eccb274e4c5", "2.5.0-dev.28": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.29": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.30": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.31": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.32": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.33": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.34": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.35": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.36": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.37": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.38": "31a949effe4ea834d8ccd4f8087e0375bcffccfa", "2.5.0-dev.39": "ee46c0006296d91f8a23684a8ced0ce259386cea", "2.5.0-dev.40": "ee46c0006296d91f8a23684a8ced0ce259386cea", "2.5.0-dev.41": "5ae6907bd5ffc701ed7d93ba74080da8d2f7c158", "2.5.0-dev.42": "5ae6907bd5ffc701ed7d93ba74080da8d2f7c158", "2.5.0-dev.43": "5ae6907bd5ffc701ed7d93ba74080da8d2f7c158", "2.5.0-dev.44": "5ae6907bd5ffc701ed7d93ba74080da8d2f7c158", "2.5.0-dev.45": "5ae6907bd5ffc701ed7d93ba74080da8d2f7c158", "2.5.0-dev.46": "5ae6907bd5ffc701ed7d93ba74080da8d2f7c158", "2.5.0-dev.47": "f3df39ce7a842e659445cf7436ee8b268b8bff17", "2.5.0-dev.48": "f3df39ce7a842e659445cf7436ee8b268b8bff17", "2.5.0-dev.49": "f3df39ce7a842e659445cf7436ee8b268b8bff17", "2.5.0-dev.50": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.51": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.52": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.53": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.54": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.55": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.56": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.57": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.58": "cc6843945c4485b397f541fcbe18d1bd94346ef7", "2.5.0-dev.59": "cc6843945c4485b397f541fcbe18d1bd94346ef7", "2.5.0-dev.60": "cc6843945c4485b397f541fcbe18d1bd94346ef7", "2.5.0-dev.61": "cc6843945c4485b397f541fcbe18d1bd94346ef7", "2.5.0-dev.62": "fa212b81aa9797f9cc8290b31cf74f49a242cb4a", "2.5.0-dev.63": "fa212b81aa9797f9cc8290b31cf74f49a242cb4a", "2.5.0-dev.64": "fa212b81aa9797f9cc8290b31cf74f49a242cb4a", "2.5.0-dev.65": "e280b792354efc65b91253bfb9a0f4b73dca85e7", "2.5.0-dev.66": "e280b792354efc65b91253bfb9a0f4b73dca85e7", "2.5.0-dev.67": "e280b792354efc65b91253bfb9a0f4b73dca85e7", "2.5.0-dev.68": "f2e54efb31f58a6c1c6d697e0c40aaddbb306993", "2.5.0-dev.69": "f2e54efb31f58a6c1c6d697e0c40aaddbb306993", "2.5.0-dev.70": "f2e54efb31f58a6c1c6d697e0c40aaddbb306993", "2.5.0-dev.71": "9a670138b1db276001d785a2adcba1584c869d24", "2.5.0-dev.72": "9a670138b1db276001d785a2adcba1584c869d24", "2.5.0-dev.73": "9a670138b1db276001d785a2adcba1584c869d24", "2.5.0": "9a670138b1db276001d785a2adcba1584c869d24", "2.6.0-dev.1": "03bb4d5bc838046aeb5f477d8fd5940864f0ecd8", "2.6.0-dev.2": "03bb4d5bc838046aeb5f477d8fd5940864f0ecd8", "2.6.0-dev.3": "499fa463c4bce9f1e4773876b7659d1a0a1c59fe", "2.6.0-dev.4": "499fa463c4bce9f1e4773876b7659d1a0a1c59fe", "2.6.0-dev.5": "499fa463c4bce9f1e4773876b7659d1a0a1c59fe", "2.6.0-dev.6": "499fa463c4bce9f1e4773876b7659d1a0a1c59fe", "2.6.0-dev.7": "62c83f00cd815bc777fd0f326c7284d5b1556f8f", "2.6.0-dev.8": "62c83f00cd815bc777fd0f326c7284d5b1556f8f", "2.5.1-dev.1": "9a670138b1db276001d785a2adcba1584c869d24", "2.5.1-dev.2": "9a670138b1db276001d785a2adcba1584c869d24", "2.5.1-dev.3": "9a670138b1db276001d785a2adcba1584c869d24", "2.5.1-dev.4": "c88925ce44a9b89b4351aec85ba6a28979d2658e", "2.6.0-dev.9": "24a240e041612473ba2085961b4571205450fc13", "2.5.1-dev.5": "c88925ce44a9b89b4351aec85ba6a28979d2658e", "2.5.1": "c88925ce44a9b89b4351aec85ba6a28979d2658e", "2.6.0-dev.10": "08d3349c7d493866c34e5e403fe1a4220509b1b6", "2.6.0-dev.11": "08d3349c7d493866c34e5e403fe1a4220509b1b6", "2.6.0-dev.12": "08d3349c7d493866c34e5e403fe1a4220509b1b6", "2.6.0-dev.13": "fff0920741f15deea278830b4afd16f5fa81708b", "2.6.0-dev.14": "22ce6892be334bb50f8d7dcb5829d0ee124cd444", "2.6.0-dev.15": "62af2a2328bf6013fb6633f83eaf8c31617e641a", "2.6.0-dev.16": "62af2a2328bf6013fb6633f83eaf8c31617e641a", "2.6.0-dev.17": "acfba31b83f7edec8e740dc4d94e0aec0855b2d6", "2.6.0-dev.18": "acfba31b83f7edec8e740dc4d94e0aec0855b2d6", "2.6.0-dev.19": "a5fde664c5c57de5ac374be1138dd0f7ec5dc5ab", "2.6.0-dev.20": "a5fde664c5c57de5ac374be1138dd0f7ec5dc5ab", "2.6.0-dev.21": "a5fde664c5c57de5ac374be1138dd0f7ec5dc5ab", "2.6.0-dev.22": "a5fde664c5c57de5ac374be1138dd0f7ec5dc5ab", "2.6.0-dev.23": "a5fde664c5c57de5ac374be1138dd0f7ec5dc5ab", "2.6.0-dev.24": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.25": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.26": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.27": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.28": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.29": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.30": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.31": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.32": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.33": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.34": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.35": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.36": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.37": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.38": "0250d982a01f9505bba89c380f5d8b0a7649633e", "2.6.0-dev.39": "96965f6c3db61abe3a54aee1a2f2af4e9bddace1", "2.6.0-dev.40": "96965f6c3db61abe3a54aee1a2f2af4e9bddace1", "2.6.0-dev.41": "ef1b5f6a28c2cf3933b0be3b48677edd6e0852a0", "2.6.0-dev.42": "ef1b5f6a28c2cf3933b0be3b48677edd6e0852a0", "2.6.0-dev.43": "b9dcf38b7fb0a74d3a8c9a0e8234bf7cee8417c2", "2.6.0-dev.44": "686b1f56ade7661ab2f1e60a6b3346abe2746175", "2.6.0-dev.45": "919f9059847d54a5f74e5c6e1f0ca9e036b91925", "2.6.0-dev.46": "a0b427d77d040aa7a76ddeedfb63e269351d63d7", "2.6.0-dev.47": "9da5ffb8b4a4d6b30bb6a124b6427493733e25c0", "2.6.0-dev.48": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.49": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.50": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.51": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.52": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.53": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.54": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.55": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.56": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.57": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.58": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.59": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.60": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.61": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.1-dev.1": "6a8054bb549e4cc23f157b0010cb2e95cb2637fb", "2.7.0-dev.1": "0dfa041d0d802be2e3ae0dd1ce2e4c307e39038b", "2.7.0-dev.2": "d1dd8a0508dfc82ae8bd83d91159e0ac807593ec", "2.6.1-dev.2": "6a8054bb549e4cc23f157b0010cb2e95cb2637fb", "2.6.1": "6a8054bb549e4cc23f157b0010cb2e95cb2637fb", "2.7.0-dev.3": "d1dd8a0508dfc82ae8bd83d91159e0ac807593ec", "2.7.0-dev.4": "d1dd8a0508dfc82ae8bd83d91159e0ac807593ec", "2.7.0-dev.5": "d1dd8a0508dfc82ae8bd83d91159e0ac807593ec", "2.7.0-dev.6": "d1dd8a0508dfc82ae8bd83d91159e0ac807593ec", "2.7.0-dev.7": "d1dd8a0508dfc82ae8bd83d91159e0ac807593ec", "2.7.0-dev.8": "e7e85356e6a71c0fda2447148512ca5ee761dbea", "2.6.2-dev.1": "6a8054bb549e4cc23f157b0010cb2e95cb2637fb", "2.7.0-dev.9": "7fe7c5b50aa571ac388a8183b3abae2114f948e8", "2.7.0-dev.10": "7fe7c5b50aa571ac388a8183b3abae2114f948e8", "2.7.0-dev.11": "7c19ae69057b1b46b2e7f90d531d99909cc85502", "2.6.2-dev.2": "6a8054bb549e4cc23f157b0010cb2e95cb2637fb", "2.6.2": "6a8054bb549e4cc23f157b0010cb2e95cb2637fb", "2.7.0-dev.12": "7c19ae69057b1b46b2e7f90d531d99909cc85502", "2.7.0-dev.13": "7c19ae69057b1b46b2e7f90d531d99909cc85502", "2.7.0-dev.14": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.15": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.16": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.17": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.18": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.19": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.20": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.21": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.22": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.23": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.24": "66ab5fb1ad3262553bee50cedb3144f3c26f67a7", "2.7.0-dev.25": "66ab5fb1ad3262553bee50cedb3144f3c26f67a7", "2.7.0-dev.26": "66ab5fb1ad3262553bee50cedb3144f3c26f67a7", "2.7.0-dev.27": "66ab5fb1ad3262553bee50cedb3144f3c26f67a7", "2.7.0-dev.28": "66ab5fb1ad3262553bee50cedb3144f3c26f67a7", "2.7.0-dev.29": "0d6f8376a03ae544c2be7c0279bc58a42d4bd302", "2.7.0-dev.30": "69cfbd5356b6cc807550b1660a501d6343cd805e", "2.7.0-dev.31": "69cfbd5356b6cc807550b1660a501d6343cd805e", "2.7.0-dev.32": "69cfbd5356b6cc807550b1660a501d6343cd805e", "2.7.0-dev.33": "69cfbd5356b6cc807550b1660a501d6343cd805e", "2.7.0-dev.34": "e6ec802febb5404ce4444eb440b0771ac896e3a4", "2.7.0-dev.35": "8b73a3e33a902f2b1f66f0ee82aecd716d3df824", "2.7.0-dev.36": "9552a36ff01a7ca7c7b811dc629ca3678da321f4", "2.7.0-dev.37": "a25d3c320c457986fe1b343b25c7f9182d8072f7", "2.7.0-dev.38": "a70da9750b0dd1eabc6b11c8548c40b856e298db", "2.7.0-dev.39": "a70da9750b0dd1eabc6b11c8548c40b856e298db", "2.7.0-dev.40": "a70da9750b0dd1eabc6b11c8548c40b856e298db", "2.7.0-dev.41": "a70da9750b0dd1eabc6b11c8548c40b856e298db", "2.7.0-dev.42": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.43": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.44": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.45": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.46": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.47": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.48": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.49": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.50": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.51": "3425da02811ca5d0994ba994c81192f304545fbc", "2.7.0-dev.52": "3425da02811ca5d0994ba994c81192f304545fbc", "2.7.0-dev.53": "3425da02811ca5d0994ba994c81192f304545fbc", "2.7.0-dev.54": "3425da02811ca5d0994ba994c81192f304545fbc", "2.7.0-dev.55": "1326cc350d369f69e2b4c0ea3bddc97ff384629e", "2.7.0-dev.56": "c508cbd521381ba4f3926e3f5ab1878a2881537d", "2.7.0-dev.57": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.58": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.59": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.60": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.61": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.62": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.63": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.64": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.65": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.66": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.67": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.68": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.69": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.70": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.71": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.72": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.73": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.74": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.75": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0-dev.76": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0-dev.77": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0-dev.78": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0-dev.79": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0-dev.80": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0-dev.81": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0-dev.82": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.8.0-dev.1": "290eb7c11a5561ad869041aa86323b85b337b12d", "2.8.0-dev.2": "2b4c3254badf30765f7839e350e4aa11a0842a8d", "2.8.0-dev.3": "2b4c3254badf30765f7839e350e4aa11a0842a8d", "2.7.1-dev.1": "5c2ad460cf4fe8c9330e6640b266c046542c8b6a", "2.8.0-dev.4": "2b4c3254badf30765f7839e350e4aa11a0842a8d", "2.8.0-dev.5": "d516bd2a52ad91031ba1c2ff3bd6d4429e727322", "2.8.0-dev.6": "d516bd2a52ad91031ba1c2ff3bd6d4429e727322", "2.7.1": "5c2ad460cf4fe8c9330e6640b266c046542c8b6a", "2.8.0-dev.7": "d516bd2a52ad91031ba1c2ff3bd6d4429e727322", "2.8.0-dev.8": "d516bd2a52ad91031ba1c2ff3bd6d4429e727322", "2.8.0-dev.9": "d516bd2a52ad91031ba1c2ff3bd6d4429e727322", "2.8.0-dev.10": "296e3b5c93fde73fdf2df594765395c51ddbdae0", "2.8.0-dev.11": "296e3b5c93fde73fdf2df594765395c51ddbdae0", "2.8.0-dev.12": "a1097622fd3779393f345f246e050da017d3aa2d", "2.8.0-dev.13": "97b83cec7c1e2276d16624341947ddf44379cff6", "2.8.0-dev.14": "97b83cec7c1e2276d16624341947ddf44379cff6", "2.8.0-dev.15": "014c300b2749e2f856db131ea8fdc8ad4a3c00e8", "2.8.0-dev.16": "16b2e7be003d50a60b7f0ebff88ae7e2c8caf863", "2.8.0-dev.17": "16b2e7be003d50a60b7f0ebff88ae7e2c8caf863", "2.8.0-dev.18": "16b2e7be003d50a60b7f0ebff88ae7e2c8caf863", "2.8.0-dev.19": "16b2e7be003d50a60b7f0ebff88ae7e2c8caf863", "2.8.0-dev.20": "16b2e7be003d50a60b7f0ebff88ae7e2c8caf863", "2.8.0-dev.21": "16b2e7be003d50a60b7f0ebff88ae7e2c8caf863", "2.8.0-dev.22": "2c8f6b14f5d65afe712de0b8b7a18eae29446d45", "2.8.0-dev.23": "1c3ee33299fa6f9ae067f6b37867467d1749f74d", "2.8.0-dev.24": "4ad878f36e79cf50b5b4f9781fd8be266a2e8eea", "2.8.0-dev.25": "b2ba0251835a0fb068871fe65272136853245dd3", "2.8.0-dev.26": "ee3559ca54391582e5fe8c208f93ae6e178aeed8", "2.8.0-dev.27": "7aef029819840cd88e6333b5037105264c82e2f4", "2.8.0-dev.28": "37b9492b5e3f80c980323b027712a9ec227ebb07", "2.8.0-dev.29": "37b9492b5e3f80c980323b027712a9ec227ebb07", "2.8.0-dev.30": "62fcc29194c5c1ed16d16c65c21b944d60acfd81", "2.8.0-dev.31": "62fcc29194c5c1ed16d16c65c21b944d60acfd81", "2.8.0-dev.32": "62fcc29194c5c1ed16d16c65c21b944d60acfd81", "2.8.0-dev.33": "62fcc29194c5c1ed16d16c65c21b944d60acfd81", "2.8.0-dev.34": "9b958b23288b9108f357c08d16ab5a054e9456b8", "2.8.0-dev.35": "9b958b23288b9108f357c08d16ab5a054e9456b8", "2.8.0-dev.36": "9b958b23288b9108f357c08d16ab5a054e9456b8", "2.8.0-dev.37": "5ed0deef17ce35faf058462e43ccc86fed761dfe", "2.8.0-dev.38": "fc6db18a9ab2e659cbf600340f5d4f4abb0b1974", "2.8.0-dev.39": "4a88935fd579c4284cec066046b3fcfe32f0c0fa", "2.8.0-dev.40": "eff0f4d1aecdbd12d9f5ca2ff0a21b54f4b90bf5", "2.8.0-dev.41": "3eba5fc0d5e2f0b42c495e3fcb677f16157a0549", "2.8.0-dev.42": "3eba5fc0d5e2f0b42c495e3fcb677f16157a0549", "2.8.0-dev.43": "2c65c7e137baad4c34f9d7c410633f3b0398a373", "2.8.0-dev.44": "4f4fb2e5ea3d830a9cf8f4e83b824f844fa43a0d", "2.8.0-dev.45": "2c65c7e137baad4c34f9d7c410633f3b0398a373", "2.8.0-dev.46": "2c65c7e137baad4c34f9d7c410633f3b0398a373", "2.8.0-dev.47": "2c65c7e137baad4c34f9d7c410633f3b0398a373", "2.8.0-dev.48": "301a95d643e1ba39474bb520faba726ce856884c", "2.8.0-dev.49": "301a95d643e1ba39474bb520faba726ce856884c", "2.8.0-dev.50": "b2d67bfad6619134331404603b61ab85fde90771", "2.8.0-dev.51": "aff73c7aeee85c32082de75962424f199530284d"};
});

// ../sdk/dist/getAllVersions.js
var require_getAllVersions = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.engineVersions = void 0;
  const node_fetch_1 = __importDefault(require_lib2());
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  var versions_1 = require_versions();
  Object.defineProperty(exports2, "engineVersions", {enumerable: true, get: function() {
    return versions_1.engineVersions;
  }});
});

// ../sdk/dist/getGenerators.js
var require_getGenerators = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.knownBinaryTargets = exports2.skipIndex = exports2.getGenerator = exports2.getGenerators = void 0;
  const fs_1 = __importDefault(require("fs"));
  const p_map_1 = __importDefault(require_p_map());
  const path_1 = __importDefault(require("path"));
  const chalk_1 = __importDefault(require_source());
  const fetch_engine_1 = require_dist7();
  const get_platform_1 = require_dist();
  const engine_core_1 = require_dist8();
  const engineCommands_1 = require_engineCommands();
  const make_dir_1 = __importDefault(require_make_dir());
  const pick_1 = require_pick();
  const Generator_1 = require_Generator();
  const resolveOutput_1 = require_resolveOutput();
  const predefinedGeneratorResolvers_1 = require_predefinedGeneratorResolvers();
  const missingGeneratorMessage_1 = require_missingGeneratorMessage();
  const extractPreviewFeatures_1 = require_extractPreviewFeatures();
  const mapPreviewFeatures_1 = require_mapPreviewFeatures();
  const getAllVersions_1 = require_getAllVersions();
  const engines_1 = require("@prisma/engines");
  async function getGenerators2({
    schemaPath,
    providerAliases: aliases,
    version,
    cliVersion,
    printDownloadProgress,
    baseDir = path_1.default.dirname(schemaPath),
    overrideGenerators,
    skipDownload
  }) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    if (!schemaPath) {
      throw new Error(`schemaPath for getGenerators got invalid value ${schemaPath}`);
    }
    if (!fs_1.default.existsSync(schemaPath)) {
      throw new Error(`${schemaPath} does not exist`);
    }
    const platform = await get_platform_1.getPlatform();
    let prismaPath = void 0;
    if (version) {
      const potentialPath = eval(`require('path').join(__dirname, '..')`);
      if (!potentialPath.startsWith("/snapshot/")) {
        const downloadParams = {
          binaries: {
            "query-engine": potentialPath
          },
          binaryTargets: [platform],
          showProgress: false,
          version,
          skipDownload
        };
        const binaryPathsWithEngineType = await fetch_engine_1.download(downloadParams);
        prismaPath = binaryPathsWithEngineType["query-engine"][platform];
      }
    }
    const datamodel = fs_1.default.readFileSync(schemaPath, "utf-8");
    const config = await engineCommands_1.getConfig({
      datamodel,
      datamodelPath: schemaPath,
      prismaPath,
      ignoreEnvVarErrors: true
    });
    const experimentalFeatures = mapPreviewFeatures_1.mapPreviewFeatures(extractPreviewFeatures_1.extractPreviewFeatures(config));
    const dmmf = await engineCommands_1.getDMMF({
      datamodel,
      datamodelPath: schemaPath,
      prismaPath,
      enableExperimental: experimentalFeatures
    });
    if (dmmf.datamodel.models.length === 0) {
      throw new Error(missingGeneratorMessage_1.missingModelMessage);
    }
    const generatorConfigs = overrideGenerators || config.generators;
    await validateGenerators(generatorConfigs);
    const runningGenerators = [];
    try {
      const generators = await p_map_1.default(generatorConfigs, async (generator, index) => {
        let generatorPath = generator.provider;
        let paths;
        if (aliases && aliases[generator.provider]) {
          generatorPath = aliases[generator.provider].generatorPath;
          paths = aliases[generator.provider];
        } else if (predefinedGeneratorResolvers_1.predefinedGeneratorResolvers[generator.provider]) {
          paths = await predefinedGeneratorResolvers_1.predefinedGeneratorResolvers[generator.provider](baseDir, cliVersion);
          generatorPath = paths.generatorPath;
        }
        const generatorInstance = new Generator_1.Generator(generatorPath);
        await generatorInstance.init();
        if (generator.output) {
          generator.output = path_1.default.resolve(baseDir, generator.output);
          generator.isCustomOutput = true;
        } else if (paths) {
          generator.output = paths.outputPath;
        } else {
          if (!generatorInstance.manifest || !generatorInstance.manifest.defaultOutput) {
            throw new Error(`Can't resolve output dir for generator ${chalk_1.default.bold(generator.name)} with provider ${chalk_1.default.bold(generator.provider)}.
The generator needs to either define the \`defaultOutput\` path in the manifest or you need to define \`output\` in the datamodel.prisma file.`);
          }
          generator.output = await resolveOutput_1.resolveOutput({
            defaultOutput: generatorInstance.manifest.defaultOutput,
            baseDir
          });
        }
        const options = {
          datamodel,
          datasources: config.datasources,
          generator,
          dmmf,
          otherGenerators: skipIndex(generatorConfigs, index),
          schemaPath,
          version: version || engines_1.enginesVersion
        };
        generatorInstance.setOptions(options);
        runningGenerators.push(generatorInstance);
        return generatorInstance;
      }, {
        stopOnError: false
      });
      const neededVersions = Object.create(null);
      for (const g of generators) {
        if (((_a = g.manifest) === null || _a === void 0 ? void 0 : _a.requiresEngines) && Array.isArray((_b = g.manifest) === null || _b === void 0 ? void 0 : _b.requiresEngines) && g.manifest.requiresEngines.length > 0) {
          const neededVersion = getEngineVersionForGenerator(g.manifest, version);
          if (!neededVersions[neededVersion]) {
            neededVersions[neededVersion] = {engines: [], binaryTargets: []};
          }
          for (const engine of (_c = g.manifest) === null || _c === void 0 ? void 0 : _c.requiresEngines) {
            if (!neededVersions[neededVersion].engines.includes(engine)) {
              neededVersions[neededVersion].engines.push(engine);
            }
          }
          if (((_e = (_d = g.options) === null || _d === void 0 ? void 0 : _d.generator) === null || _e === void 0 ? void 0 : _e.binaryTargets) && ((_g = (_f = g.options) === null || _f === void 0 ? void 0 : _f.generator) === null || _g === void 0 ? void 0 : _g.binaryTargets.length) > 0) {
            for (let binaryTarget of (_j = (_h = g.options) === null || _h === void 0 ? void 0 : _h.generator) === null || _j === void 0 ? void 0 : _j.binaryTargets) {
              if (binaryTarget === "native") {
                binaryTarget = platform;
              }
              if (!neededVersions[neededVersion].binaryTargets.includes(binaryTarget)) {
                neededVersions[neededVersion].binaryTargets.push(binaryTarget);
              }
            }
          }
        }
      }
      const binaryPathsByVersion = Object.create(null);
      for (let currentVersion in neededVersions) {
        const neededVersion = neededVersions[currentVersion];
        if (neededVersion.binaryTargets.length === 0) {
          neededVersion.binaryTargets.push(platform);
          if (neededVersion.binaryTargets.length === 0) {
            neededVersion.binaryTargets = [platform];
          }
          if (process.env.NETLIFY && !neededVersion.binaryTargets.includes("rhel-openssl-1.0.x")) {
            neededVersion.binaryTargets.push("rhel-openssl-1.0.x");
          }
        }
        let binaryTargetBaseDir = eval(`require('path').join(__dirname, '..')`);
        if (version !== currentVersion) {
          binaryTargetBaseDir = path_1.default.join(binaryTargetBaseDir, `./engines/${currentVersion}/`);
          await make_dir_1.default(binaryTargetBaseDir).catch((e) => console.error(e));
        }
        const binariesConfig = neededVersion.engines.reduce((acc, curr) => {
          acc[engineTypeToBinaryType(curr)] = binaryTargetBaseDir;
          return acc;
        }, Object.create(null));
        const downloadParams = {
          binaries: binariesConfig,
          binaryTargets: neededVersion.binaryTargets,
          showProgress: typeof printDownloadProgress === "boolean" ? printDownloadProgress : true,
          version: currentVersion && currentVersion !== "latest" ? currentVersion : engines_1.enginesVersion,
          skipDownload
        };
        const binaryPathsWithEngineType = await fetch_engine_1.download(downloadParams);
        const binaryPaths = mapKeys(binaryPathsWithEngineType, binaryTypeToEngineType);
        binaryPathsByVersion[currentVersion] = binaryPaths;
      }
      for (const generator of generators) {
        if (generator.manifest && generator.manifest.requiresEngines) {
          const engineVersion = getEngineVersionForGenerator(generator.manifest, version);
          const binaryPaths = binaryPathsByVersion[engineVersion];
          const generatorBinaryPaths = pick_1.pick(binaryPaths, generator.manifest.requiresEngines);
          generator.setBinaryPaths(generatorBinaryPaths);
          if (engineVersion !== version && generator.options && generator.manifest.requiresEngines.includes("queryEngine") && generatorBinaryPaths.queryEngine && generatorBinaryPaths.queryEngine[platform]) {
            const customDmmf = await engineCommands_1.getDMMF({
              datamodel,
              datamodelPath: schemaPath,
              prismaPath: generatorBinaryPaths.queryEngine[platform],
              enableExperimental: experimentalFeatures
            });
            const options = {...generator.options, dmmf: customDmmf};
            generator.setOptions(options);
          }
        }
      }
      return generators;
    } catch (e) {
      runningGenerators.forEach((g) => g.stop());
      throw e;
    }
  }
  exports2.getGenerators = getGenerators2;
  async function getGenerator(options) {
    const generators = await getGenerators2(options);
    return generators[0];
  }
  exports2.getGenerator = getGenerator;
  function skipIndex(arr, index) {
    return [...arr.slice(0, index), ...arr.slice(index + 1)];
  }
  exports2.skipIndex = skipIndex;
  exports2.knownBinaryTargets = [
    "native",
    "darwin",
    "debian-openssl-1.0.x",
    "debian-openssl-1.1.x",
    "rhel-openssl-1.0.x",
    "rhel-openssl-1.1.x",
    "linux-musl",
    "linux-nixos",
    "windows",
    "freebsd11",
    "freebsd12",
    "openbsd",
    "netbsd",
    "arm"
  ];
  const oldToNewBinaryTargetsMapping = {
    "linux-glibc-libssl1.0.1": "debian-openssl-1.0.x",
    "linux-glibc-libssl1.0.2": "debian-openssl-1.0.x",
    "linux-glibc-libssl1.1.0": "debian-openssl1.1.x"
  };
  async function validateGenerators(generators) {
    const platform = await get_platform_1.getPlatform();
    for (const generator of generators) {
      if (generator.provider === "photonjs") {
        throw new Error(`Oops! Photon has been renamed to Prisma Client. Please make the following adjustments:
  1. Rename ${chalk_1.default.red('provider = "photonjs"')} to ${chalk_1.default.green('provider = "prisma-client-js"')} in your ${chalk_1.default.bold("schema.prisma")} file.
  2. Replace your ${chalk_1.default.bold("package.json")}'s ${chalk_1.default.red("@prisma/photon")} dependency to ${chalk_1.default.green("@prisma/client")}
  3. Replace ${chalk_1.default.red("import { Photon } from '@prisma/photon'")} with ${chalk_1.default.green("import { PrismaClient } from '@prisma/client'")} in your code.
  4. Run ${chalk_1.default.green("prisma generate")} again.
      `);
      }
      if (generator.provider === "nexus-prisma") {
        throw new Error("`nexus-prisma` is no longer a generator. You can read more at https://pris.ly/nexus-prisma-upgrade-0.4");
      }
      if (generator.config.platforms) {
        throw new Error(`The \`platforms\` field on the generator definition is deprecated. Please rename it to \`binaryTargets\`.`);
      }
      if (generator.config.pinnedBinaryTargets) {
        throw new Error(`The \`pinnedBinaryTargets\` field on the generator definition is deprecated.
Please use the PRISMA_QUERY_ENGINE_BINARY env var instead to pin the binary target.`);
      }
      if (generator.binaryTargets) {
        for (const binaryTarget of generator.binaryTargets) {
          if (oldToNewBinaryTargetsMapping[binaryTarget]) {
            throw new Error(`Binary target ${chalk_1.default.red.bold(binaryTarget)} is deprecated. Please use ${chalk_1.default.green.bold(oldToNewBinaryTargetsMapping[binaryTarget])} instead.`);
          }
          if (!exports2.knownBinaryTargets.includes(binaryTarget)) {
            throw new Error(`Unknown binary target ${chalk_1.default.red(binaryTarget)} in generator ${chalk_1.default.bold(generator.name)}.
Possible binaryTargets: ${chalk_1.default.greenBright(exports2.knownBinaryTargets.join(", "))}`);
          }
        }
        const binaryTargets = generator.binaryTargets && generator.binaryTargets.length > 0 ? generator.binaryTargets : ["native"];
        const resolvedBinaryTargets = binaryTargets.map((p) => p === "native" ? platform : p);
        if (!resolvedBinaryTargets.includes(platform)) {
          if (generator) {
            console.log(`${chalk_1.default.yellow("Warning:")} Your current platform \`${chalk_1.default.bold(platform)}\` is not included in your generator's \`binaryTargets\` configuration ${JSON.stringify(generator.binaryTargets)}.
    To fix it, use this generator config in your ${chalk_1.default.bold("schema.prisma")}:
    ${chalk_1.default.greenBright(engine_core_1.printGeneratorConfig({
              ...generator,
              binaryTargets: engine_core_1.fixBinaryTargets(generator.binaryTargets, platform)
            }))}
    ${chalk_1.default.gray(`Note, that by providing \`native\`, Prisma Client automatically resolves \`${platform}\`.
    Read more about deploying Prisma Client: ${chalk_1.default.underline("https://github.com/prisma/prisma/blob/master/docs/core/generators/prisma-client-js.md")}`)}
`);
          } else {
            console.log(`${chalk_1.default.yellow("Warning")} The binaryTargets ${JSON.stringify(binaryTargets)} don't include your local platform ${platform}, which you can also point to with \`native\`.
    In case you want to fix this, you can provide ${chalk_1.default.greenBright(`binaryTargets: ${JSON.stringify(["native", ...binaryTargets || []])}`)} in the schema.prisma file.`);
          }
        }
      }
    }
  }
  function engineTypeToBinaryType(engineType) {
    if (engineType === "introspectionEngine") {
      return "introspection-engine";
    }
    if (engineType === "migrationEngine") {
      return "migration-engine";
    }
    if (engineType === "queryEngine") {
      return "query-engine";
    }
    if (engineType === "prismaFmt") {
      return "prisma-fmt";
    }
    throw new Error(`Could not convert engine type ${engineType}`);
  }
  function binaryTypeToEngineType(binaryType) {
    if (binaryType === "introspection-engine") {
      return "introspectionEngine";
    }
    if (binaryType === "migration-engine") {
      return "migrationEngine";
    }
    if (binaryType === "query-engine") {
      return "queryEngine";
    }
    if (binaryType === "prisma-fmt") {
      return "prismaFmt";
    }
    throw new Error(`Could not convert binary type ${binaryType}`);
  }
  function mapKeys(obj, mapper) {
    return Object.entries(obj).reduce((acc, [key, value]) => {
      acc[mapper(key)] = value;
      return acc;
    }, {});
  }
  function getEngineVersionForGenerator(manifest, defaultVersion) {
    let neededVersion = manifest === null || manifest === void 0 ? void 0 : manifest.requiresEngineVersion;
    if ((manifest === null || manifest === void 0 ? void 0 : manifest.version) && getAllVersions_1.engineVersions[manifest === null || manifest === void 0 ? void 0 : manifest.version]) {
      neededVersion = getAllVersions_1.engineVersions[manifest === null || manifest === void 0 ? void 0 : manifest.version];
    }
    neededVersion = neededVersion !== null && neededVersion !== void 0 ? neededVersion : defaultVersion;
    return neededVersion !== null && neededVersion !== void 0 ? neededVersion : "latest";
  }
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/high-level-opt.js
var require_high_level_opt = __commonJS((exports2, module3) => {
  "use strict";
  const argmap = new Map([
    ["C", "cwd"],
    ["f", "file"],
    ["z", "gzip"],
    ["P", "preservePaths"],
    ["U", "unlink"],
    ["strip-components", "strip"],
    ["stripComponents", "strip"],
    ["keep-newer", "newer"],
    ["keepNewer", "newer"],
    ["keep-newer-files", "newer"],
    ["keepNewerFiles", "newer"],
    ["k", "keep"],
    ["keep-existing", "keep"],
    ["keepExisting", "keep"],
    ["m", "noMtime"],
    ["no-mtime", "noMtime"],
    ["p", "preserveOwner"],
    ["L", "follow"],
    ["h", "follow"]
  ]);
  const parse = module3.exports = (opt) => opt ? Object.keys(opt).map((k) => [
    argmap.has(k) ? argmap.get(k) : k,
    opt[k]
  ]).reduce((set, kv) => (set[kv[0]] = kv[1], set), Object.create(null)) : {};
});

// ../../node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js
var require_iterator = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = function(Yallist) {
    Yallist.prototype[Symbol.iterator] = function* () {
      for (let walker = this.head; walker; walker = walker.next) {
        yield walker.value;
      }
    };
  };
});

// ../../node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js
var require_yallist = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = Yallist;
  Yallist.Node = Node;
  Yallist.create = Yallist;
  function Yallist(list) {
    var self2 = this;
    if (!(self2 instanceof Yallist)) {
      self2 = new Yallist();
    }
    self2.tail = null;
    self2.head = null;
    self2.length = 0;
    if (list && typeof list.forEach === "function") {
      list.forEach(function(item) {
        self2.push(item);
      });
    } else if (arguments.length > 0) {
      for (var i = 0, l = arguments.length; i < l; i++) {
        self2.push(arguments[i]);
      }
    }
    return self2;
  }
  Yallist.prototype.removeNode = function(node) {
    if (node.list !== this) {
      throw new Error("removing node which does not belong to this list");
    }
    var next = node.next;
    var prev = node.prev;
    if (next) {
      next.prev = prev;
    }
    if (prev) {
      prev.next = next;
    }
    if (node === this.head) {
      this.head = next;
    }
    if (node === this.tail) {
      this.tail = prev;
    }
    node.list.length--;
    node.next = null;
    node.prev = null;
    node.list = null;
    return next;
  };
  Yallist.prototype.unshiftNode = function(node) {
    if (node === this.head) {
      return;
    }
    if (node.list) {
      node.list.removeNode(node);
    }
    var head = this.head;
    node.list = this;
    node.next = head;
    if (head) {
      head.prev = node;
    }
    this.head = node;
    if (!this.tail) {
      this.tail = node;
    }
    this.length++;
  };
  Yallist.prototype.pushNode = function(node) {
    if (node === this.tail) {
      return;
    }
    if (node.list) {
      node.list.removeNode(node);
    }
    var tail = this.tail;
    node.list = this;
    node.prev = tail;
    if (tail) {
      tail.next = node;
    }
    this.tail = node;
    if (!this.head) {
      this.head = node;
    }
    this.length++;
  };
  Yallist.prototype.push = function() {
    for (var i = 0, l = arguments.length; i < l; i++) {
      push(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.unshift = function() {
    for (var i = 0, l = arguments.length; i < l; i++) {
      unshift(this, arguments[i]);
    }
    return this.length;
  };
  Yallist.prototype.pop = function() {
    if (!this.tail) {
      return void 0;
    }
    var res = this.tail.value;
    this.tail = this.tail.prev;
    if (this.tail) {
      this.tail.next = null;
    } else {
      this.head = null;
    }
    this.length--;
    return res;
  };
  Yallist.prototype.shift = function() {
    if (!this.head) {
      return void 0;
    }
    var res = this.head.value;
    this.head = this.head.next;
    if (this.head) {
      this.head.prev = null;
    } else {
      this.tail = null;
    }
    this.length--;
    return res;
  };
  Yallist.prototype.forEach = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.head, i = 0; walker !== null; i++) {
      fn.call(thisp, walker.value, i, this);
      walker = walker.next;
    }
  };
  Yallist.prototype.forEachReverse = function(fn, thisp) {
    thisp = thisp || this;
    for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
      fn.call(thisp, walker.value, i, this);
      walker = walker.prev;
    }
  };
  Yallist.prototype.get = function(n) {
    for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
      walker = walker.next;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.getReverse = function(n) {
    for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
      walker = walker.prev;
    }
    if (i === n && walker !== null) {
      return walker.value;
    }
  };
  Yallist.prototype.map = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.head; walker !== null; ) {
      res.push(fn.call(thisp, walker.value, this));
      walker = walker.next;
    }
    return res;
  };
  Yallist.prototype.mapReverse = function(fn, thisp) {
    thisp = thisp || this;
    var res = new Yallist();
    for (var walker = this.tail; walker !== null; ) {
      res.push(fn.call(thisp, walker.value, this));
      walker = walker.prev;
    }
    return res;
  };
  Yallist.prototype.reduce = function(fn, initial) {
    var acc;
    var walker = this.head;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.head) {
      walker = this.head.next;
      acc = this.head.value;
    } else {
      throw new TypeError("Reduce of empty list with no initial value");
    }
    for (var i = 0; walker !== null; i++) {
      acc = fn(acc, walker.value, i);
      walker = walker.next;
    }
    return acc;
  };
  Yallist.prototype.reduceReverse = function(fn, initial) {
    var acc;
    var walker = this.tail;
    if (arguments.length > 1) {
      acc = initial;
    } else if (this.tail) {
      walker = this.tail.prev;
      acc = this.tail.value;
    } else {
      throw new TypeError("Reduce of empty list with no initial value");
    }
    for (var i = this.length - 1; walker !== null; i--) {
      acc = fn(acc, walker.value, i);
      walker = walker.prev;
    }
    return acc;
  };
  Yallist.prototype.toArray = function() {
    var arr = new Array(this.length);
    for (var i = 0, walker = this.head; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.next;
    }
    return arr;
  };
  Yallist.prototype.toArrayReverse = function() {
    var arr = new Array(this.length);
    for (var i = 0, walker = this.tail; walker !== null; i++) {
      arr[i] = walker.value;
      walker = walker.prev;
    }
    return arr;
  };
  Yallist.prototype.slice = function(from, to) {
    to = to || this.length;
    if (to < 0) {
      to += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to > this.length) {
      to = this.length;
    }
    for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
      walker = walker.next;
    }
    for (; walker !== null && i < to; i++, walker = walker.next) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.sliceReverse = function(from, to) {
    to = to || this.length;
    if (to < 0) {
      to += this.length;
    }
    from = from || 0;
    if (from < 0) {
      from += this.length;
    }
    var ret = new Yallist();
    if (to < from || to < 0) {
      return ret;
    }
    if (from < 0) {
      from = 0;
    }
    if (to > this.length) {
      to = this.length;
    }
    for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
      walker = walker.prev;
    }
    for (; walker !== null && i > from; i--, walker = walker.prev) {
      ret.push(walker.value);
    }
    return ret;
  };
  Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
    if (start > this.length) {
      start = this.length - 1;
    }
    if (start < 0) {
      start = this.length + start;
    }
    for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
      walker = walker.next;
    }
    var ret = [];
    for (var i = 0; walker && i < deleteCount; i++) {
      ret.push(walker.value);
      walker = this.removeNode(walker);
    }
    if (walker === null) {
      walker = this.tail;
    }
    if (walker !== this.head && walker !== this.tail) {
      walker = walker.prev;
    }
    for (var i = 0; i < nodes.length; i++) {
      walker = insert(this, walker, nodes[i]);
    }
    return ret;
  };
  Yallist.prototype.reverse = function() {
    var head = this.head;
    var tail = this.tail;
    for (var walker = head; walker !== null; walker = walker.prev) {
      var p = walker.prev;
      walker.prev = walker.next;
      walker.next = p;
    }
    this.head = tail;
    this.tail = head;
    return this;
  };
  function insert(self2, node, value) {
    var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
    if (inserted.next === null) {
      self2.tail = inserted;
    }
    if (inserted.prev === null) {
      self2.head = inserted;
    }
    self2.length++;
    return inserted;
  }
  function push(self2, item) {
    self2.tail = new Node(item, self2.tail, null, self2);
    if (!self2.head) {
      self2.head = self2.tail;
    }
    self2.length++;
  }
  function unshift(self2, item) {
    self2.head = new Node(item, null, self2.head, self2);
    if (!self2.tail) {
      self2.tail = self2.head;
    }
    self2.length++;
  }
  function Node(value, prev, next, list) {
    if (!(this instanceof Node)) {
      return new Node(value, prev, next, list);
    }
    this.list = list;
    this.value = value;
    if (prev) {
      prev.next = this;
      this.prev = prev;
    } else {
      this.prev = null;
    }
    if (next) {
      next.prev = this;
      this.next = next;
    } else {
      this.next = null;
    }
  }
  try {
    require_iterator()(Yallist);
  } catch (er) {
  }
});

// ../../node_modules/.pnpm/minipass@3.1.3/node_modules/minipass/index.js
var require_minipass = __commonJS((exports2, module3) => {
  "use strict";
  const EE = require("events");
  const Stream = require("stream");
  const Yallist = require_yallist();
  const SD = require("string_decoder").StringDecoder;
  const EOF = Symbol("EOF");
  const MAYBE_EMIT_END = Symbol("maybeEmitEnd");
  const EMITTED_END = Symbol("emittedEnd");
  const EMITTING_END = Symbol("emittingEnd");
  const CLOSED = Symbol("closed");
  const READ = Symbol("read");
  const FLUSH = Symbol("flush");
  const FLUSHCHUNK = Symbol("flushChunk");
  const ENCODING = Symbol("encoding");
  const DECODER = Symbol("decoder");
  const FLOWING = Symbol("flowing");
  const PAUSED = Symbol("paused");
  const RESUME = Symbol("resume");
  const BUFFERLENGTH = Symbol("bufferLength");
  const BUFFERPUSH = Symbol("bufferPush");
  const BUFFERSHIFT = Symbol("bufferShift");
  const OBJECTMODE = Symbol("objectMode");
  const DESTROYED = Symbol("destroyed");
  const doIter = global._MP_NO_ITERATOR_SYMBOLS_ !== "1";
  const ASYNCITERATOR = doIter && Symbol.asyncIterator || Symbol("asyncIterator not implemented");
  const ITERATOR = doIter && Symbol.iterator || Symbol("iterator not implemented");
  const isEndish = (ev) => ev === "end" || ev === "finish" || ev === "prefinish";
  const isArrayBuffer = (b) => b instanceof ArrayBuffer || typeof b === "object" && b.constructor && b.constructor.name === "ArrayBuffer" && b.byteLength >= 0;
  const isArrayBufferView = (b) => !Buffer.isBuffer(b) && ArrayBuffer.isView(b);
  module3.exports = class Minipass extends Stream {
    constructor(options) {
      super();
      this[FLOWING] = false;
      this[PAUSED] = false;
      this.pipes = new Yallist();
      this.buffer = new Yallist();
      this[OBJECTMODE] = options && options.objectMode || false;
      if (this[OBJECTMODE])
        this[ENCODING] = null;
      else
        this[ENCODING] = options && options.encoding || null;
      if (this[ENCODING] === "buffer")
        this[ENCODING] = null;
      this[DECODER] = this[ENCODING] ? new SD(this[ENCODING]) : null;
      this[EOF] = false;
      this[EMITTED_END] = false;
      this[EMITTING_END] = false;
      this[CLOSED] = false;
      this.writable = true;
      this.readable = true;
      this[BUFFERLENGTH] = 0;
      this[DESTROYED] = false;
    }
    get bufferLength() {
      return this[BUFFERLENGTH];
    }
    get encoding() {
      return this[ENCODING];
    }
    set encoding(enc) {
      if (this[OBJECTMODE])
        throw new Error("cannot set encoding in objectMode");
      if (this[ENCODING] && enc !== this[ENCODING] && (this[DECODER] && this[DECODER].lastNeed || this[BUFFERLENGTH]))
        throw new Error("cannot change encoding");
      if (this[ENCODING] !== enc) {
        this[DECODER] = enc ? new SD(enc) : null;
        if (this.buffer.length)
          this.buffer = this.buffer.map((chunk) => this[DECODER].write(chunk));
      }
      this[ENCODING] = enc;
    }
    setEncoding(enc) {
      this.encoding = enc;
    }
    get objectMode() {
      return this[OBJECTMODE];
    }
    set objectMode(om) {
      this[OBJECTMODE] = this[OBJECTMODE] || !!om;
    }
    write(chunk, encoding, cb) {
      if (this[EOF])
        throw new Error("write after end");
      if (this[DESTROYED]) {
        this.emit("error", Object.assign(new Error("Cannot call write after a stream was destroyed"), {code: "ERR_STREAM_DESTROYED"}));
        return true;
      }
      if (typeof encoding === "function")
        cb = encoding, encoding = "utf8";
      if (!encoding)
        encoding = "utf8";
      if (!this[OBJECTMODE] && !Buffer.isBuffer(chunk)) {
        if (isArrayBufferView(chunk))
          chunk = Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);
        else if (isArrayBuffer(chunk))
          chunk = Buffer.from(chunk);
        else if (typeof chunk !== "string")
          this.objectMode = true;
      }
      if (!this.objectMode && !chunk.length) {
        if (this[BUFFERLENGTH] !== 0)
          this.emit("readable");
        if (cb)
          cb();
        return this.flowing;
      }
      if (typeof chunk === "string" && !this[OBJECTMODE] && !(encoding === this[ENCODING] && !this[DECODER].lastNeed)) {
        chunk = Buffer.from(chunk, encoding);
      }
      if (Buffer.isBuffer(chunk) && this[ENCODING])
        chunk = this[DECODER].write(chunk);
      if (this.flowing) {
        if (this[BUFFERLENGTH] !== 0)
          this[FLUSH](true);
        this.emit("data", chunk);
      } else
        this[BUFFERPUSH](chunk);
      if (this[BUFFERLENGTH] !== 0)
        this.emit("readable");
      if (cb)
        cb();
      return this.flowing;
    }
    read(n) {
      if (this[DESTROYED])
        return null;
      try {
        if (this[BUFFERLENGTH] === 0 || n === 0 || n > this[BUFFERLENGTH])
          return null;
        if (this[OBJECTMODE])
          n = null;
        if (this.buffer.length > 1 && !this[OBJECTMODE]) {
          if (this.encoding)
            this.buffer = new Yallist([
              Array.from(this.buffer).join("")
            ]);
          else
            this.buffer = new Yallist([
              Buffer.concat(Array.from(this.buffer), this[BUFFERLENGTH])
            ]);
        }
        return this[READ](n || null, this.buffer.head.value);
      } finally {
        this[MAYBE_EMIT_END]();
      }
    }
    [READ](n, chunk) {
      if (n === chunk.length || n === null)
        this[BUFFERSHIFT]();
      else {
        this.buffer.head.value = chunk.slice(n);
        chunk = chunk.slice(0, n);
        this[BUFFERLENGTH] -= n;
      }
      this.emit("data", chunk);
      if (!this.buffer.length && !this[EOF])
        this.emit("drain");
      return chunk;
    }
    end(chunk, encoding, cb) {
      if (typeof chunk === "function")
        cb = chunk, chunk = null;
      if (typeof encoding === "function")
        cb = encoding, encoding = "utf8";
      if (chunk)
        this.write(chunk, encoding);
      if (cb)
        this.once("end", cb);
      this[EOF] = true;
      this.writable = false;
      if (this.flowing || !this[PAUSED])
        this[MAYBE_EMIT_END]();
      return this;
    }
    [RESUME]() {
      if (this[DESTROYED])
        return;
      this[PAUSED] = false;
      this[FLOWING] = true;
      this.emit("resume");
      if (this.buffer.length)
        this[FLUSH]();
      else if (this[EOF])
        this[MAYBE_EMIT_END]();
      else
        this.emit("drain");
    }
    resume() {
      return this[RESUME]();
    }
    pause() {
      this[FLOWING] = false;
      this[PAUSED] = true;
    }
    get destroyed() {
      return this[DESTROYED];
    }
    get flowing() {
      return this[FLOWING];
    }
    get paused() {
      return this[PAUSED];
    }
    [BUFFERPUSH](chunk) {
      if (this[OBJECTMODE])
        this[BUFFERLENGTH] += 1;
      else
        this[BUFFERLENGTH] += chunk.length;
      return this.buffer.push(chunk);
    }
    [BUFFERSHIFT]() {
      if (this.buffer.length) {
        if (this[OBJECTMODE])
          this[BUFFERLENGTH] -= 1;
        else
          this[BUFFERLENGTH] -= this.buffer.head.value.length;
      }
      return this.buffer.shift();
    }
    [FLUSH](noDrain) {
      do {
      } while (this[FLUSHCHUNK](this[BUFFERSHIFT]()));
      if (!noDrain && !this.buffer.length && !this[EOF])
        this.emit("drain");
    }
    [FLUSHCHUNK](chunk) {
      return chunk ? (this.emit("data", chunk), this.flowing) : false;
    }
    pipe(dest, opts) {
      if (this[DESTROYED])
        return;
      const ended = this[EMITTED_END];
      opts = opts || {};
      if (dest === process.stdout || dest === process.stderr)
        opts.end = false;
      else
        opts.end = opts.end !== false;
      const p = {dest, opts, ondrain: (_2) => this[RESUME]()};
      this.pipes.push(p);
      dest.on("drain", p.ondrain);
      this[RESUME]();
      if (ended && p.opts.end)
        p.dest.end();
      return dest;
    }
    addListener(ev, fn) {
      return this.on(ev, fn);
    }
    on(ev, fn) {
      try {
        return super.on(ev, fn);
      } finally {
        if (ev === "data" && !this.pipes.length && !this.flowing)
          this[RESUME]();
        else if (isEndish(ev) && this[EMITTED_END]) {
          super.emit(ev);
          this.removeAllListeners(ev);
        }
      }
    }
    get emittedEnd() {
      return this[EMITTED_END];
    }
    [MAYBE_EMIT_END]() {
      if (!this[EMITTING_END] && !this[EMITTED_END] && !this[DESTROYED] && this.buffer.length === 0 && this[EOF]) {
        this[EMITTING_END] = true;
        this.emit("end");
        this.emit("prefinish");
        this.emit("finish");
        if (this[CLOSED])
          this.emit("close");
        this[EMITTING_END] = false;
      }
    }
    emit(ev, data) {
      if (ev !== "error" && ev !== "close" && ev !== DESTROYED && this[DESTROYED])
        return;
      else if (ev === "data") {
        if (!data)
          return;
        if (this.pipes.length)
          this.pipes.forEach((p) => p.dest.write(data) === false && this.pause());
      } else if (ev === "end") {
        if (this[EMITTED_END] === true)
          return;
        this[EMITTED_END] = true;
        this.readable = false;
        if (this[DECODER]) {
          data = this[DECODER].end();
          if (data) {
            this.pipes.forEach((p) => p.dest.write(data));
            super.emit("data", data);
          }
        }
        this.pipes.forEach((p) => {
          p.dest.removeListener("drain", p.ondrain);
          if (p.opts.end)
            p.dest.end();
        });
      } else if (ev === "close") {
        this[CLOSED] = true;
        if (!this[EMITTED_END] && !this[DESTROYED])
          return;
      }
      const args2 = new Array(arguments.length);
      args2[0] = ev;
      args2[1] = data;
      if (arguments.length > 2) {
        for (let i = 2; i < arguments.length; i++) {
          args2[i] = arguments[i];
        }
      }
      try {
        return super.emit.apply(this, args2);
      } finally {
        if (!isEndish(ev))
          this[MAYBE_EMIT_END]();
        else
          this.removeAllListeners(ev);
      }
    }
    collect() {
      const buf = [];
      if (!this[OBJECTMODE])
        buf.dataLength = 0;
      const p = this.promise();
      this.on("data", (c) => {
        buf.push(c);
        if (!this[OBJECTMODE])
          buf.dataLength += c.length;
      });
      return p.then(() => buf);
    }
    concat() {
      return this[OBJECTMODE] ? Promise.reject(new Error("cannot concat in objectMode")) : this.collect().then((buf) => this[OBJECTMODE] ? Promise.reject(new Error("cannot concat in objectMode")) : this[ENCODING] ? buf.join("") : Buffer.concat(buf, buf.dataLength));
    }
    promise() {
      return new Promise((resolve, reject) => {
        this.on(DESTROYED, () => reject(new Error("stream destroyed")));
        this.on("end", () => resolve());
        this.on("error", (er) => reject(er));
      });
    }
    [ASYNCITERATOR]() {
      const next = () => {
        const res = this.read();
        if (res !== null)
          return Promise.resolve({done: false, value: res});
        if (this[EOF])
          return Promise.resolve({done: true});
        let resolve = null;
        let reject = null;
        const onerr = (er) => {
          this.removeListener("data", ondata);
          this.removeListener("end", onend);
          reject(er);
        };
        const ondata = (value) => {
          this.removeListener("error", onerr);
          this.removeListener("end", onend);
          this.pause();
          resolve({value, done: !!this[EOF]});
        };
        const onend = () => {
          this.removeListener("error", onerr);
          this.removeListener("data", ondata);
          resolve({done: true});
        };
        const ondestroy = () => onerr(new Error("stream destroyed"));
        return new Promise((res2, rej) => {
          reject = rej;
          resolve = res2;
          this.once(DESTROYED, ondestroy);
          this.once("error", onerr);
          this.once("end", onend);
          this.once("data", ondata);
        });
      };
      return {next};
    }
    [ITERATOR]() {
      const next = () => {
        const value = this.read();
        const done = value === null;
        return {value, done};
      };
      return {next};
    }
    destroy(er) {
      if (this[DESTROYED]) {
        if (er)
          this.emit("error", er);
        else
          this.emit(DESTROYED);
        return this;
      }
      this[DESTROYED] = true;
      this.buffer = new Yallist();
      this[BUFFERLENGTH] = 0;
      if (typeof this.close === "function" && !this[CLOSED])
        this.close();
      if (er)
        this.emit("error", er);
      else
        this.emit(DESTROYED);
      return this;
    }
    static isStream(s) {
      return !!s && (s instanceof Minipass || s instanceof Stream || s instanceof EE && (typeof s.pipe === "function" || typeof s.write === "function" && typeof s.end === "function"));
    }
  };
});

// ../../node_modules/.pnpm/minizlib@2.1.0/node_modules/minizlib/constants.js
var require_constants4 = __commonJS((exports2, module3) => {
  const realZlibConstants = require("zlib").constants || {ZLIB_VERNUM: 4736};
  module3.exports = Object.freeze(Object.assign(Object.create(null), {
    Z_NO_FLUSH: 0,
    Z_PARTIAL_FLUSH: 1,
    Z_SYNC_FLUSH: 2,
    Z_FULL_FLUSH: 3,
    Z_FINISH: 4,
    Z_BLOCK: 5,
    Z_OK: 0,
    Z_STREAM_END: 1,
    Z_NEED_DICT: 2,
    Z_ERRNO: -1,
    Z_STREAM_ERROR: -2,
    Z_DATA_ERROR: -3,
    Z_MEM_ERROR: -4,
    Z_BUF_ERROR: -5,
    Z_VERSION_ERROR: -6,
    Z_NO_COMPRESSION: 0,
    Z_BEST_SPEED: 1,
    Z_BEST_COMPRESSION: 9,
    Z_DEFAULT_COMPRESSION: -1,
    Z_FILTERED: 1,
    Z_HUFFMAN_ONLY: 2,
    Z_RLE: 3,
    Z_FIXED: 4,
    Z_DEFAULT_STRATEGY: 0,
    DEFLATE: 1,
    INFLATE: 2,
    GZIP: 3,
    GUNZIP: 4,
    DEFLATERAW: 5,
    INFLATERAW: 6,
    UNZIP: 7,
    BROTLI_DECODE: 8,
    BROTLI_ENCODE: 9,
    Z_MIN_WINDOWBITS: 8,
    Z_MAX_WINDOWBITS: 15,
    Z_DEFAULT_WINDOWBITS: 15,
    Z_MIN_CHUNK: 64,
    Z_MAX_CHUNK: Infinity,
    Z_DEFAULT_CHUNK: 16384,
    Z_MIN_MEMLEVEL: 1,
    Z_MAX_MEMLEVEL: 9,
    Z_DEFAULT_MEMLEVEL: 8,
    Z_MIN_LEVEL: -1,
    Z_MAX_LEVEL: 9,
    Z_DEFAULT_LEVEL: -1,
    BROTLI_OPERATION_PROCESS: 0,
    BROTLI_OPERATION_FLUSH: 1,
    BROTLI_OPERATION_FINISH: 2,
    BROTLI_OPERATION_EMIT_METADATA: 3,
    BROTLI_MODE_GENERIC: 0,
    BROTLI_MODE_TEXT: 1,
    BROTLI_MODE_FONT: 2,
    BROTLI_DEFAULT_MODE: 0,
    BROTLI_MIN_QUALITY: 0,
    BROTLI_MAX_QUALITY: 11,
    BROTLI_DEFAULT_QUALITY: 11,
    BROTLI_MIN_WINDOW_BITS: 10,
    BROTLI_MAX_WINDOW_BITS: 24,
    BROTLI_LARGE_MAX_WINDOW_BITS: 30,
    BROTLI_DEFAULT_WINDOW: 22,
    BROTLI_MIN_INPUT_BLOCK_BITS: 16,
    BROTLI_MAX_INPUT_BLOCK_BITS: 24,
    BROTLI_PARAM_MODE: 0,
    BROTLI_PARAM_QUALITY: 1,
    BROTLI_PARAM_LGWIN: 2,
    BROTLI_PARAM_LGBLOCK: 3,
    BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: 4,
    BROTLI_PARAM_SIZE_HINT: 5,
    BROTLI_PARAM_LARGE_WINDOW: 6,
    BROTLI_PARAM_NPOSTFIX: 7,
    BROTLI_PARAM_NDIRECT: 8,
    BROTLI_DECODER_RESULT_ERROR: 0,
    BROTLI_DECODER_RESULT_SUCCESS: 1,
    BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: 2,
    BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: 3,
    BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: 0,
    BROTLI_DECODER_PARAM_LARGE_WINDOW: 1,
    BROTLI_DECODER_NO_ERROR: 0,
    BROTLI_DECODER_SUCCESS: 1,
    BROTLI_DECODER_NEEDS_MORE_INPUT: 2,
    BROTLI_DECODER_NEEDS_MORE_OUTPUT: 3,
    BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: -1,
    BROTLI_DECODER_ERROR_FORMAT_RESERVED: -2,
    BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: -3,
    BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: -4,
    BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: -5,
    BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: -6,
    BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: -7,
    BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: -8,
    BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: -9,
    BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: -10,
    BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: -11,
    BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: -12,
    BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: -13,
    BROTLI_DECODER_ERROR_FORMAT_PADDING_1: -14,
    BROTLI_DECODER_ERROR_FORMAT_PADDING_2: -15,
    BROTLI_DECODER_ERROR_FORMAT_DISTANCE: -16,
    BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: -19,
    BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: -20,
    BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: -21,
    BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: -22,
    BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: -25,
    BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: -26,
    BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: -27,
    BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: -30,
    BROTLI_DECODER_ERROR_UNREACHABLE: -31
  }, realZlibConstants));
});

// ../../node_modules/.pnpm/minizlib@2.1.0/node_modules/minizlib/index.js
var require_minizlib = __commonJS((exports2) => {
  "use strict";
  const assert = require("assert");
  const Buffer2 = require("buffer").Buffer;
  const realZlib = require("zlib");
  const constants = exports2.constants = require_constants4();
  const Minipass = require_minipass();
  const OriginalBufferConcat = Buffer2.concat;
  const _superWrite = Symbol("_superWrite");
  class ZlibError extends Error {
    constructor(err) {
      super("zlib: " + err.message);
      this.code = err.code;
      this.errno = err.errno;
      if (!this.code)
        this.code = "ZLIB_ERROR";
      this.message = "zlib: " + err.message;
      Error.captureStackTrace(this, this.constructor);
    }
    get name() {
      return "ZlibError";
    }
  }
  const _opts = Symbol("opts");
  const _flushFlag = Symbol("flushFlag");
  const _finishFlushFlag = Symbol("finishFlushFlag");
  const _fullFlushFlag = Symbol("fullFlushFlag");
  const _handle = Symbol("handle");
  const _onError = Symbol("onError");
  const _sawError = Symbol("sawError");
  const _level = Symbol("level");
  const _strategy = Symbol("strategy");
  const _ended = Symbol("ended");
  const _defaultFullFlush = Symbol("_defaultFullFlush");
  class ZlibBase extends Minipass {
    constructor(opts, mode) {
      if (!opts || typeof opts !== "object")
        throw new TypeError("invalid options for ZlibBase constructor");
      super(opts);
      this[_ended] = false;
      this[_opts] = opts;
      this[_flushFlag] = opts.flush;
      this[_finishFlushFlag] = opts.finishFlush;
      try {
        this[_handle] = new realZlib[mode](opts);
      } catch (er) {
        throw new ZlibError(er);
      }
      this[_onError] = (err) => {
        this[_sawError] = true;
        this.close();
        this.emit("error", err);
      };
      this[_handle].on("error", (er) => this[_onError](new ZlibError(er)));
      this.once("end", () => this.close);
    }
    close() {
      if (this[_handle]) {
        this[_handle].close();
        this[_handle] = null;
        this.emit("close");
      }
    }
    reset() {
      if (!this[_sawError]) {
        assert(this[_handle], "zlib binding closed");
        return this[_handle].reset();
      }
    }
    flush(flushFlag) {
      if (this.ended)
        return;
      if (typeof flushFlag !== "number")
        flushFlag = this[_fullFlushFlag];
      this.write(Object.assign(Buffer2.alloc(0), {[_flushFlag]: flushFlag}));
    }
    end(chunk, encoding, cb) {
      if (chunk)
        this.write(chunk, encoding);
      this.flush(this[_finishFlushFlag]);
      this[_ended] = true;
      return super.end(null, null, cb);
    }
    get ended() {
      return this[_ended];
    }
    write(chunk, encoding, cb) {
      if (typeof encoding === "function")
        cb = encoding, encoding = "utf8";
      if (typeof chunk === "string")
        chunk = Buffer2.from(chunk, encoding);
      if (this[_sawError])
        return;
      assert(this[_handle], "zlib binding closed");
      const nativeHandle = this[_handle]._handle;
      const originalNativeClose = nativeHandle.close;
      nativeHandle.close = () => {
      };
      const originalClose = this[_handle].close;
      this[_handle].close = () => {
      };
      Buffer2.concat = (args2) => args2;
      let result;
      try {
        const flushFlag = typeof chunk[_flushFlag] === "number" ? chunk[_flushFlag] : this[_flushFlag];
        result = this[_handle]._processChunk(chunk, flushFlag);
        Buffer2.concat = OriginalBufferConcat;
      } catch (err) {
        Buffer2.concat = OriginalBufferConcat;
        this[_onError](new ZlibError(err));
      } finally {
        if (this[_handle]) {
          this[_handle]._handle = nativeHandle;
          nativeHandle.close = originalNativeClose;
          this[_handle].close = originalClose;
          this[_handle].removeAllListeners("error");
        }
      }
      let writeReturn;
      if (result) {
        if (Array.isArray(result) && result.length > 0) {
          writeReturn = this[_superWrite](Buffer2.from(result[0]));
          for (let i = 1; i < result.length; i++) {
            writeReturn = this[_superWrite](result[i]);
          }
        } else {
          writeReturn = this[_superWrite](Buffer2.from(result));
        }
      }
      if (cb)
        cb();
      return writeReturn;
    }
    [_superWrite](data) {
      return super.write(data);
    }
  }
  class Zlib extends ZlibBase {
    constructor(opts, mode) {
      opts = opts || {};
      opts.flush = opts.flush || constants.Z_NO_FLUSH;
      opts.finishFlush = opts.finishFlush || constants.Z_FINISH;
      super(opts, mode);
      this[_fullFlushFlag] = constants.Z_FULL_FLUSH;
      this[_level] = opts.level;
      this[_strategy] = opts.strategy;
    }
    params(level, strategy) {
      if (this[_sawError])
        return;
      if (!this[_handle])
        throw new Error("cannot switch params when binding is closed");
      if (!this[_handle].params)
        throw new Error("not supported in this implementation");
      if (this[_level] !== level || this[_strategy] !== strategy) {
        this.flush(constants.Z_SYNC_FLUSH);
        assert(this[_handle], "zlib binding closed");
        const origFlush = this[_handle].flush;
        this[_handle].flush = (flushFlag, cb) => {
          this.flush(flushFlag);
          cb();
        };
        try {
          this[_handle].params(level, strategy);
        } finally {
          this[_handle].flush = origFlush;
        }
        if (this[_handle]) {
          this[_level] = level;
          this[_strategy] = strategy;
        }
      }
    }
  }
  class Deflate extends Zlib {
    constructor(opts) {
      super(opts, "Deflate");
    }
  }
  class Inflate extends Zlib {
    constructor(opts) {
      super(opts, "Inflate");
    }
  }
  const _portable = Symbol("_portable");
  class Gzip extends Zlib {
    constructor(opts) {
      super(opts, "Gzip");
      this[_portable] = opts && !!opts.portable;
    }
    [_superWrite](data) {
      if (!this[_portable])
        return super[_superWrite](data);
      this[_portable] = false;
      data[9] = 255;
      return super[_superWrite](data);
    }
  }
  class Gunzip extends Zlib {
    constructor(opts) {
      super(opts, "Gunzip");
    }
  }
  class DeflateRaw extends Zlib {
    constructor(opts) {
      super(opts, "DeflateRaw");
    }
  }
  class InflateRaw extends Zlib {
    constructor(opts) {
      super(opts, "InflateRaw");
    }
  }
  class Unzip extends Zlib {
    constructor(opts) {
      super(opts, "Unzip");
    }
  }
  class Brotli extends ZlibBase {
    constructor(opts, mode) {
      opts = opts || {};
      opts.flush = opts.flush || constants.BROTLI_OPERATION_PROCESS;
      opts.finishFlush = opts.finishFlush || constants.BROTLI_OPERATION_FINISH;
      super(opts, mode);
      this[_fullFlushFlag] = constants.BROTLI_OPERATION_FLUSH;
    }
  }
  class BrotliCompress extends Brotli {
    constructor(opts) {
      super(opts, "BrotliCompress");
    }
  }
  class BrotliDecompress extends Brotli {
    constructor(opts) {
      super(opts, "BrotliDecompress");
    }
  }
  exports2.Deflate = Deflate;
  exports2.Inflate = Inflate;
  exports2.Gzip = Gzip;
  exports2.Gunzip = Gunzip;
  exports2.DeflateRaw = DeflateRaw;
  exports2.InflateRaw = InflateRaw;
  exports2.Unzip = Unzip;
  if (typeof realZlib.BrotliCompress === "function") {
    exports2.BrotliCompress = BrotliCompress;
    exports2.BrotliDecompress = BrotliDecompress;
  } else {
    exports2.BrotliCompress = exports2.BrotliDecompress = class {
      constructor() {
        throw new Error("Brotli is not supported in this version of Node.js");
      }
    };
  }
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/types.js
var require_types2 = __commonJS((exports2) => {
  "use strict";
  exports2.name = new Map([
    ["0", "File"],
    ["", "OldFile"],
    ["1", "Link"],
    ["2", "SymbolicLink"],
    ["3", "CharacterDevice"],
    ["4", "BlockDevice"],
    ["5", "Directory"],
    ["6", "FIFO"],
    ["7", "ContiguousFile"],
    ["g", "GlobalExtendedHeader"],
    ["x", "ExtendedHeader"],
    ["A", "SolarisACL"],
    ["D", "GNUDumpDir"],
    ["I", "Inode"],
    ["K", "NextFileHasLongLinkpath"],
    ["L", "NextFileHasLongPath"],
    ["M", "ContinuationFile"],
    ["N", "OldGnuLongPath"],
    ["S", "SparseFile"],
    ["V", "TapeVolumeHeader"],
    ["X", "OldExtendedHeader"]
  ]);
  exports2.code = new Map(Array.from(exports2.name).map((kv) => [kv[1], kv[0]]));
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/read-entry.js
var require_read_entry = __commonJS((exports2, module3) => {
  "use strict";
  const types = require_types2();
  const MiniPass = require_minipass();
  const SLURP = Symbol("slurp");
  module3.exports = class ReadEntry extends MiniPass {
    constructor(header, ex, gex) {
      super();
      this.pause();
      this.extended = ex;
      this.globalExtended = gex;
      this.header = header;
      this.startBlockSize = 512 * Math.ceil(header.size / 512);
      this.blockRemain = this.startBlockSize;
      this.remain = header.size;
      this.type = header.type;
      this.meta = false;
      this.ignore = false;
      switch (this.type) {
        case "File":
        case "OldFile":
        case "Link":
        case "SymbolicLink":
        case "CharacterDevice":
        case "BlockDevice":
        case "Directory":
        case "FIFO":
        case "ContiguousFile":
        case "GNUDumpDir":
          break;
        case "NextFileHasLongLinkpath":
        case "NextFileHasLongPath":
        case "OldGnuLongPath":
        case "GlobalExtendedHeader":
        case "ExtendedHeader":
        case "OldExtendedHeader":
          this.meta = true;
          break;
        default:
          this.ignore = true;
      }
      this.path = header.path;
      this.mode = header.mode;
      if (this.mode)
        this.mode = this.mode & 4095;
      this.uid = header.uid;
      this.gid = header.gid;
      this.uname = header.uname;
      this.gname = header.gname;
      this.size = header.size;
      this.mtime = header.mtime;
      this.atime = header.atime;
      this.ctime = header.ctime;
      this.linkpath = header.linkpath;
      this.uname = header.uname;
      this.gname = header.gname;
      if (ex)
        this[SLURP](ex);
      if (gex)
        this[SLURP](gex, true);
    }
    write(data) {
      const writeLen = data.length;
      if (writeLen > this.blockRemain)
        throw new Error("writing more to entry than is appropriate");
      const r = this.remain;
      const br = this.blockRemain;
      this.remain = Math.max(0, r - writeLen);
      this.blockRemain = Math.max(0, br - writeLen);
      if (this.ignore)
        return true;
      if (r >= writeLen)
        return super.write(data);
      return super.write(data.slice(0, r));
    }
    [SLURP](ex, global2) {
      for (let k in ex) {
        if (ex[k] !== null && ex[k] !== void 0 && !(global2 && k === "path"))
          this[k] = ex[k];
      }
    }
  };
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/large-numbers.js
var require_large_numbers = __commonJS((exports2) => {
  "use strict";
  const encode = exports2.encode = (num, buf) => {
    if (!Number.isSafeInteger(num))
      throw Error("cannot encode number outside of javascript safe integer range");
    else if (num < 0)
      encodeNegative(num, buf);
    else
      encodePositive(num, buf);
    return buf;
  };
  const encodePositive = (num, buf) => {
    buf[0] = 128;
    for (var i = buf.length; i > 1; i--) {
      buf[i - 1] = num & 255;
      num = Math.floor(num / 256);
    }
  };
  const encodeNegative = (num, buf) => {
    buf[0] = 255;
    var flipped = false;
    num = num * -1;
    for (var i = buf.length; i > 1; i--) {
      var byte = num & 255;
      num = Math.floor(num / 256);
      if (flipped)
        buf[i - 1] = onesComp(byte);
      else if (byte === 0)
        buf[i - 1] = 0;
      else {
        flipped = true;
        buf[i - 1] = twosComp(byte);
      }
    }
  };
  const parse = exports2.parse = (buf) => {
    var post = buf[buf.length - 1];
    var pre = buf[0];
    var value;
    if (pre === 128)
      value = pos(buf.slice(1, buf.length));
    else if (pre === 255)
      value = twos(buf);
    else
      throw Error("invalid base256 encoding");
    if (!Number.isSafeInteger(value))
      throw Error("parsed number outside of javascript safe integer range");
    return value;
  };
  const twos = (buf) => {
    var len = buf.length;
    var sum = 0;
    var flipped = false;
    for (var i = len - 1; i > -1; i--) {
      var byte = buf[i];
      var f;
      if (flipped)
        f = onesComp(byte);
      else if (byte === 0)
        f = byte;
      else {
        flipped = true;
        f = twosComp(byte);
      }
      if (f !== 0)
        sum -= f * Math.pow(256, len - i - 1);
    }
    return sum;
  };
  const pos = (buf) => {
    var len = buf.length;
    var sum = 0;
    for (var i = len - 1; i > -1; i--) {
      var byte = buf[i];
      if (byte !== 0)
        sum += byte * Math.pow(256, len - i - 1);
    }
    return sum;
  };
  const onesComp = (byte) => (255 ^ byte) & 255;
  const twosComp = (byte) => (255 ^ byte) + 1 & 255;
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/header.js
var require_header = __commonJS((exports2, module3) => {
  "use strict";
  const types = require_types2();
  const pathModule = require("path").posix;
  const large = require_large_numbers();
  const SLURP = Symbol("slurp");
  const TYPE = Symbol("type");
  class Header {
    constructor(data, off, ex, gex) {
      this.cksumValid = false;
      this.needPax = false;
      this.nullBlock = false;
      this.block = null;
      this.path = null;
      this.mode = null;
      this.uid = null;
      this.gid = null;
      this.size = null;
      this.mtime = null;
      this.cksum = null;
      this[TYPE] = "0";
      this.linkpath = null;
      this.uname = null;
      this.gname = null;
      this.devmaj = 0;
      this.devmin = 0;
      this.atime = null;
      this.ctime = null;
      if (Buffer.isBuffer(data))
        this.decode(data, off || 0, ex, gex);
      else if (data)
        this.set(data);
    }
    decode(buf, off, ex, gex) {
      if (!off)
        off = 0;
      if (!buf || !(buf.length >= off + 512))
        throw new Error("need 512 bytes for header");
      this.path = decString(buf, off, 100);
      this.mode = decNumber(buf, off + 100, 8);
      this.uid = decNumber(buf, off + 108, 8);
      this.gid = decNumber(buf, off + 116, 8);
      this.size = decNumber(buf, off + 124, 12);
      this.mtime = decDate(buf, off + 136, 12);
      this.cksum = decNumber(buf, off + 148, 12);
      this[SLURP](ex);
      this[SLURP](gex, true);
      this[TYPE] = decString(buf, off + 156, 1);
      if (this[TYPE] === "")
        this[TYPE] = "0";
      if (this[TYPE] === "0" && this.path.substr(-1) === "/")
        this[TYPE] = "5";
      if (this[TYPE] === "5")
        this.size = 0;
      this.linkpath = decString(buf, off + 157, 100);
      if (buf.slice(off + 257, off + 265).toString() === "ustar\x0000") {
        this.uname = decString(buf, off + 265, 32);
        this.gname = decString(buf, off + 297, 32);
        this.devmaj = decNumber(buf, off + 329, 8);
        this.devmin = decNumber(buf, off + 337, 8);
        if (buf[off + 475] !== 0) {
          const prefix = decString(buf, off + 345, 155);
          this.path = prefix + "/" + this.path;
        } else {
          const prefix = decString(buf, off + 345, 130);
          if (prefix)
            this.path = prefix + "/" + this.path;
          this.atime = decDate(buf, off + 476, 12);
          this.ctime = decDate(buf, off + 488, 12);
        }
      }
      let sum = 8 * 32;
      for (let i = off; i < off + 148; i++) {
        sum += buf[i];
      }
      for (let i = off + 156; i < off + 512; i++) {
        sum += buf[i];
      }
      this.cksumValid = sum === this.cksum;
      if (this.cksum === null && sum === 8 * 32)
        this.nullBlock = true;
    }
    [SLURP](ex, global2) {
      for (let k in ex) {
        if (ex[k] !== null && ex[k] !== void 0 && !(global2 && k === "path"))
          this[k] = ex[k];
      }
    }
    encode(buf, off) {
      if (!buf) {
        buf = this.block = Buffer.alloc(512);
        off = 0;
      }
      if (!off)
        off = 0;
      if (!(buf.length >= off + 512))
        throw new Error("need 512 bytes for header");
      const prefixSize = this.ctime || this.atime ? 130 : 155;
      const split = splitPrefix(this.path || "", prefixSize);
      const path19 = split[0];
      const prefix = split[1];
      this.needPax = split[2];
      this.needPax = encString(buf, off, 100, path19) || this.needPax;
      this.needPax = encNumber(buf, off + 100, 8, this.mode) || this.needPax;
      this.needPax = encNumber(buf, off + 108, 8, this.uid) || this.needPax;
      this.needPax = encNumber(buf, off + 116, 8, this.gid) || this.needPax;
      this.needPax = encNumber(buf, off + 124, 12, this.size) || this.needPax;
      this.needPax = encDate(buf, off + 136, 12, this.mtime) || this.needPax;
      buf[off + 156] = this[TYPE].charCodeAt(0);
      this.needPax = encString(buf, off + 157, 100, this.linkpath) || this.needPax;
      buf.write("ustar\x0000", off + 257, 8);
      this.needPax = encString(buf, off + 265, 32, this.uname) || this.needPax;
      this.needPax = encString(buf, off + 297, 32, this.gname) || this.needPax;
      this.needPax = encNumber(buf, off + 329, 8, this.devmaj) || this.needPax;
      this.needPax = encNumber(buf, off + 337, 8, this.devmin) || this.needPax;
      this.needPax = encString(buf, off + 345, prefixSize, prefix) || this.needPax;
      if (buf[off + 475] !== 0)
        this.needPax = encString(buf, off + 345, 155, prefix) || this.needPax;
      else {
        this.needPax = encString(buf, off + 345, 130, prefix) || this.needPax;
        this.needPax = encDate(buf, off + 476, 12, this.atime) || this.needPax;
        this.needPax = encDate(buf, off + 488, 12, this.ctime) || this.needPax;
      }
      let sum = 8 * 32;
      for (let i = off; i < off + 148; i++) {
        sum += buf[i];
      }
      for (let i = off + 156; i < off + 512; i++) {
        sum += buf[i];
      }
      this.cksum = sum;
      encNumber(buf, off + 148, 8, this.cksum);
      this.cksumValid = true;
      return this.needPax;
    }
    set(data) {
      for (let i in data) {
        if (data[i] !== null && data[i] !== void 0)
          this[i] = data[i];
      }
    }
    get type() {
      return types.name.get(this[TYPE]) || this[TYPE];
    }
    get typeKey() {
      return this[TYPE];
    }
    set type(type) {
      if (types.code.has(type))
        this[TYPE] = types.code.get(type);
      else
        this[TYPE] = type;
    }
  }
  const splitPrefix = (p, prefixSize) => {
    const pathSize = 100;
    let pp = p;
    let prefix = "";
    let ret;
    const root = pathModule.parse(p).root || ".";
    if (Buffer.byteLength(pp) < pathSize)
      ret = [pp, prefix, false];
    else {
      prefix = pathModule.dirname(pp);
      pp = pathModule.basename(pp);
      do {
        if (Buffer.byteLength(pp) <= pathSize && Buffer.byteLength(prefix) <= prefixSize)
          ret = [pp, prefix, false];
        else if (Buffer.byteLength(pp) > pathSize && Buffer.byteLength(prefix) <= prefixSize)
          ret = [pp.substr(0, pathSize - 1), prefix, true];
        else {
          pp = pathModule.join(pathModule.basename(prefix), pp);
          prefix = pathModule.dirname(prefix);
        }
      } while (prefix !== root && !ret);
      if (!ret)
        ret = [p.substr(0, pathSize - 1), "", true];
    }
    return ret;
  };
  const decString = (buf, off, size) => buf.slice(off, off + size).toString("utf8").replace(/\0.*/, "");
  const decDate = (buf, off, size) => numToDate(decNumber(buf, off, size));
  const numToDate = (num) => num === null ? null : new Date(num * 1e3);
  const decNumber = (buf, off, size) => buf[off] & 128 ? large.parse(buf.slice(off, off + size)) : decSmallNumber(buf, off, size);
  const nanNull = (value) => isNaN(value) ? null : value;
  const decSmallNumber = (buf, off, size) => nanNull(parseInt(buf.slice(off, off + size).toString("utf8").replace(/\0.*$/, "").trim(), 8));
  const MAXNUM = {
    12: 8589934591,
    8: 2097151
  };
  const encNumber = (buf, off, size, number) => number === null ? false : number > MAXNUM[size] || number < 0 ? (large.encode(number, buf.slice(off, off + size)), true) : (encSmallNumber(buf, off, size, number), false);
  const encSmallNumber = (buf, off, size, number) => buf.write(octalString(number, size), off, size, "ascii");
  const octalString = (number, size) => padOctal(Math.floor(number).toString(8), size);
  const padOctal = (string, size) => (string.length === size - 1 ? string : new Array(size - string.length - 1).join("0") + string + " ") + "\0";
  const encDate = (buf, off, size, date) => date === null ? false : encNumber(buf, off, size, date.getTime() / 1e3);
  const NULLS = new Array(156).join("\0");
  const encString = (buf, off, size, string) => string === null ? false : (buf.write(string + NULLS, off, size, "utf8"), string.length !== Buffer.byteLength(string) || string.length > size);
  module3.exports = Header;
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/pax.js
var require_pax = __commonJS((exports2, module3) => {
  "use strict";
  const Header = require_header();
  const path19 = require("path");
  class Pax {
    constructor(obj, global2) {
      this.atime = obj.atime || null;
      this.charset = obj.charset || null;
      this.comment = obj.comment || null;
      this.ctime = obj.ctime || null;
      this.gid = obj.gid || null;
      this.gname = obj.gname || null;
      this.linkpath = obj.linkpath || null;
      this.mtime = obj.mtime || null;
      this.path = obj.path || null;
      this.size = obj.size || null;
      this.uid = obj.uid || null;
      this.uname = obj.uname || null;
      this.dev = obj.dev || null;
      this.ino = obj.ino || null;
      this.nlink = obj.nlink || null;
      this.global = global2 || false;
    }
    encode() {
      const body = this.encodeBody();
      if (body === "")
        return null;
      const bodyLen = Buffer.byteLength(body);
      const bufLen = 512 * Math.ceil(1 + bodyLen / 512);
      const buf = Buffer.allocUnsafe(bufLen);
      for (let i = 0; i < 512; i++) {
        buf[i] = 0;
      }
      new Header({
        path: ("PaxHeader/" + path19.basename(this.path)).slice(0, 99),
        mode: this.mode || 420,
        uid: this.uid || null,
        gid: this.gid || null,
        size: bodyLen,
        mtime: this.mtime || null,
        type: this.global ? "GlobalExtendedHeader" : "ExtendedHeader",
        linkpath: "",
        uname: this.uname || "",
        gname: this.gname || "",
        devmaj: 0,
        devmin: 0,
        atime: this.atime || null,
        ctime: this.ctime || null
      }).encode(buf);
      buf.write(body, 512, bodyLen, "utf8");
      for (let i = bodyLen + 512; i < buf.length; i++) {
        buf[i] = 0;
      }
      return buf;
    }
    encodeBody() {
      return this.encodeField("path") + this.encodeField("ctime") + this.encodeField("atime") + this.encodeField("dev") + this.encodeField("ino") + this.encodeField("nlink") + this.encodeField("charset") + this.encodeField("comment") + this.encodeField("gid") + this.encodeField("gname") + this.encodeField("linkpath") + this.encodeField("mtime") + this.encodeField("size") + this.encodeField("uid") + this.encodeField("uname");
    }
    encodeField(field) {
      if (this[field] === null || this[field] === void 0)
        return "";
      const v = this[field] instanceof Date ? this[field].getTime() / 1e3 : this[field];
      const s = " " + (field === "dev" || field === "ino" || field === "nlink" ? "SCHILY." : "") + field + "=" + v + "\n";
      const byteLen = Buffer.byteLength(s);
      let digits = Math.floor(Math.log(byteLen) / Math.log(10)) + 1;
      if (byteLen + digits >= Math.pow(10, digits))
        digits += 1;
      const len = digits + byteLen;
      return len + s;
    }
  }
  Pax.parse = (string, ex, g) => new Pax(merge(parseKV(string), ex), g);
  const merge = (a, b) => b ? Object.keys(a).reduce((s, k) => (s[k] = a[k], s), b) : a;
  const parseKV = (string) => string.replace(/\n$/, "").split("\n").reduce(parseKVLine, Object.create(null));
  const parseKVLine = (set, line) => {
    const n = parseInt(line, 10);
    if (n !== Buffer.byteLength(line) + 1)
      return set;
    line = line.substr((n + " ").length);
    const kv = line.split("=");
    const k = kv.shift().replace(/^SCHILY\.(dev|ino|nlink)/, "$1");
    if (!k)
      return set;
    const v = kv.join("=");
    set[k] = /^([A-Z]+\.)?([mac]|birth|creation)time$/.test(k) ? new Date(v * 1e3) : /^[0-9]+$/.test(v) ? +v : v;
    return set;
  };
  module3.exports = Pax;
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/warn-mixin.js
var require_warn_mixin = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (Base) => class extends Base {
    warn(code, message, data = {}) {
      if (this.file)
        data.file = this.file;
      if (this.cwd)
        data.cwd = this.cwd;
      data.code = message instanceof Error && message.code || code;
      data.tarCode = code;
      if (!this.strict && data.recoverable !== false) {
        if (message instanceof Error) {
          data = Object.assign(message, data);
          message = message.message;
        }
        this.emit("warn", data.tarCode, message, data);
      } else if (message instanceof Error) {
        this.emit("error", Object.assign(message, data));
      } else
        this.emit("error", Object.assign(new Error(`${code}: ${message}`), data));
    }
  };
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/winchars.js
var require_winchars = __commonJS((exports2, module3) => {
  "use strict";
  const raw = [
    "|",
    "<",
    ">",
    "?",
    ":"
  ];
  const win = raw.map((char) => String.fromCharCode(61440 + char.charCodeAt(0)));
  const toWin = new Map(raw.map((char, i) => [char, win[i]]));
  const toRaw = new Map(win.map((char, i) => [char, raw[i]]));
  module3.exports = {
    encode: (s) => raw.reduce((s2, c) => s2.split(c).join(toWin.get(c)), s),
    decode: (s) => win.reduce((s2, c) => s2.split(c).join(toRaw.get(c)), s)
  };
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/mode-fix.js
var require_mode_fix = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (mode, isDir, portable) => {
    mode &= 4095;
    if (portable) {
      mode = (mode | 384) & ~18;
    }
    if (isDir) {
      if (mode & 256)
        mode |= 64;
      if (mode & 32)
        mode |= 8;
      if (mode & 4)
        mode |= 1;
    }
    return mode;
  };
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/write-entry.js
var require_write_entry = __commonJS((exports2, module3) => {
  "use strict";
  const MiniPass = require_minipass();
  const Pax = require_pax();
  const Header = require_header();
  const ReadEntry = require_read_entry();
  const fs17 = require("fs");
  const path19 = require("path");
  const types = require_types2();
  const maxReadSize = 16 * 1024 * 1024;
  const PROCESS = Symbol("process");
  const FILE = Symbol("file");
  const DIRECTORY = Symbol("directory");
  const SYMLINK = Symbol("symlink");
  const HARDLINK = Symbol("hardlink");
  const HEADER = Symbol("header");
  const READ = Symbol("read");
  const LSTAT = Symbol("lstat");
  const ONLSTAT = Symbol("onlstat");
  const ONREAD = Symbol("onread");
  const ONREADLINK = Symbol("onreadlink");
  const OPENFILE = Symbol("openfile");
  const ONOPENFILE = Symbol("onopenfile");
  const CLOSE = Symbol("close");
  const MODE = Symbol("mode");
  const warner = require_warn_mixin();
  const winchars = require_winchars();
  const modeFix = require_mode_fix();
  const WriteEntry = warner(class WriteEntry2 extends MiniPass {
    constructor(p, opt) {
      opt = opt || {};
      super(opt);
      if (typeof p !== "string")
        throw new TypeError("path is required");
      this.path = p;
      this.portable = !!opt.portable;
      this.myuid = process.getuid && process.getuid();
      this.myuser = process.env.USER || "";
      this.maxReadSize = opt.maxReadSize || maxReadSize;
      this.linkCache = opt.linkCache || new Map();
      this.statCache = opt.statCache || new Map();
      this.preservePaths = !!opt.preservePaths;
      this.cwd = opt.cwd || process.cwd();
      this.strict = !!opt.strict;
      this.noPax = !!opt.noPax;
      this.noMtime = !!opt.noMtime;
      this.mtime = opt.mtime || null;
      if (typeof opt.onwarn === "function")
        this.on("warn", opt.onwarn);
      let pathWarn = false;
      if (!this.preservePaths && path19.win32.isAbsolute(p)) {
        const parsed = path19.win32.parse(p);
        this.path = p.substr(parsed.root.length);
        pathWarn = parsed.root;
      }
      this.win32 = !!opt.win32 || process.platform === "win32";
      if (this.win32) {
        this.path = winchars.decode(this.path.replace(/\\/g, "/"));
        p = p.replace(/\\/g, "/");
      }
      this.absolute = opt.absolute || path19.resolve(this.cwd, p);
      if (this.path === "")
        this.path = "./";
      if (pathWarn) {
        this.warn("TAR_ENTRY_INFO", `stripping ${pathWarn} from absolute path`, {
          entry: this,
          path: pathWarn + this.path
        });
      }
      if (this.statCache.has(this.absolute))
        this[ONLSTAT](this.statCache.get(this.absolute));
      else
        this[LSTAT]();
    }
    [LSTAT]() {
      fs17.lstat(this.absolute, (er, stat) => {
        if (er)
          return this.emit("error", er);
        this[ONLSTAT](stat);
      });
    }
    [ONLSTAT](stat) {
      this.statCache.set(this.absolute, stat);
      this.stat = stat;
      if (!stat.isFile())
        stat.size = 0;
      this.type = getType(stat);
      this.emit("stat", stat);
      this[PROCESS]();
    }
    [PROCESS]() {
      switch (this.type) {
        case "File":
          return this[FILE]();
        case "Directory":
          return this[DIRECTORY]();
        case "SymbolicLink":
          return this[SYMLINK]();
        default:
          return this.end();
      }
    }
    [MODE](mode) {
      return modeFix(mode, this.type === "Directory", this.portable);
    }
    [HEADER]() {
      if (this.type === "Directory" && this.portable)
        this.noMtime = true;
      this.header = new Header({
        path: this.path,
        linkpath: this.linkpath,
        mode: this[MODE](this.stat.mode),
        uid: this.portable ? null : this.stat.uid,
        gid: this.portable ? null : this.stat.gid,
        size: this.stat.size,
        mtime: this.noMtime ? null : this.mtime || this.stat.mtime,
        type: this.type,
        uname: this.portable ? null : this.stat.uid === this.myuid ? this.myuser : "",
        atime: this.portable ? null : this.stat.atime,
        ctime: this.portable ? null : this.stat.ctime
      });
      if (this.header.encode() && !this.noPax)
        this.write(new Pax({
          atime: this.portable ? null : this.header.atime,
          ctime: this.portable ? null : this.header.ctime,
          gid: this.portable ? null : this.header.gid,
          mtime: this.noMtime ? null : this.mtime || this.header.mtime,
          path: this.path,
          linkpath: this.linkpath,
          size: this.header.size,
          uid: this.portable ? null : this.header.uid,
          uname: this.portable ? null : this.header.uname,
          dev: this.portable ? null : this.stat.dev,
          ino: this.portable ? null : this.stat.ino,
          nlink: this.portable ? null : this.stat.nlink
        }).encode());
      this.write(this.header.block);
    }
    [DIRECTORY]() {
      if (this.path.substr(-1) !== "/")
        this.path += "/";
      this.stat.size = 0;
      this[HEADER]();
      this.end();
    }
    [SYMLINK]() {
      fs17.readlink(this.absolute, (er, linkpath) => {
        if (er)
          return this.emit("error", er);
        this[ONREADLINK](linkpath);
      });
    }
    [ONREADLINK](linkpath) {
      this.linkpath = linkpath.replace(/\\/g, "/");
      this[HEADER]();
      this.end();
    }
    [HARDLINK](linkpath) {
      this.type = "Link";
      this.linkpath = path19.relative(this.cwd, linkpath).replace(/\\/g, "/");
      this.stat.size = 0;
      this[HEADER]();
      this.end();
    }
    [FILE]() {
      if (this.stat.nlink > 1) {
        const linkKey = this.stat.dev + ":" + this.stat.ino;
        if (this.linkCache.has(linkKey)) {
          const linkpath = this.linkCache.get(linkKey);
          if (linkpath.indexOf(this.cwd) === 0)
            return this[HARDLINK](linkpath);
        }
        this.linkCache.set(linkKey, this.absolute);
      }
      this[HEADER]();
      if (this.stat.size === 0)
        return this.end();
      this[OPENFILE]();
    }
    [OPENFILE]() {
      fs17.open(this.absolute, "r", (er, fd) => {
        if (er)
          return this.emit("error", er);
        this[ONOPENFILE](fd);
      });
    }
    [ONOPENFILE](fd) {
      const blockLen = 512 * Math.ceil(this.stat.size / 512);
      const bufLen = Math.min(blockLen, this.maxReadSize);
      const buf = Buffer.allocUnsafe(bufLen);
      this[READ](fd, buf, 0, buf.length, 0, this.stat.size, blockLen);
    }
    [READ](fd, buf, offset, length, pos, remain, blockRemain) {
      fs17.read(fd, buf, offset, length, pos, (er, bytesRead) => {
        if (er) {
          return this[CLOSE](fd, () => this.emit("error", er));
        }
        this[ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead);
      });
    }
    [CLOSE](fd, cb) {
      fs17.close(fd, cb);
    }
    [ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead) {
      if (bytesRead <= 0 && remain > 0) {
        const er = new Error("encountered unexpected EOF");
        er.path = this.absolute;
        er.syscall = "read";
        er.code = "EOF";
        return this[CLOSE](fd, () => this.emit("error", er));
      }
      if (bytesRead > remain) {
        const er = new Error("did not encounter expected EOF");
        er.path = this.absolute;
        er.syscall = "read";
        er.code = "EOF";
        return this[CLOSE](fd, () => this.emit("error", er));
      }
      if (bytesRead === remain) {
        for (let i = bytesRead; i < length && bytesRead < blockRemain; i++) {
          buf[i + offset] = 0;
          bytesRead++;
          remain++;
        }
      }
      const writeBuf = offset === 0 && bytesRead === buf.length ? buf : buf.slice(offset, offset + bytesRead);
      remain -= bytesRead;
      blockRemain -= bytesRead;
      pos += bytesRead;
      offset += bytesRead;
      this.write(writeBuf);
      if (!remain) {
        if (blockRemain)
          this.write(Buffer.alloc(blockRemain));
        return this[CLOSE](fd, (er) => er ? this.emit("error", er) : this.end());
      }
      if (offset >= length) {
        buf = Buffer.allocUnsafe(length);
        offset = 0;
      }
      length = buf.length - offset;
      this[READ](fd, buf, offset, length, pos, remain, blockRemain);
    }
  });
  class WriteEntrySync extends WriteEntry {
    constructor(path20, opt) {
      super(path20, opt);
    }
    [LSTAT]() {
      this[ONLSTAT](fs17.lstatSync(this.absolute));
    }
    [SYMLINK]() {
      this[ONREADLINK](fs17.readlinkSync(this.absolute));
    }
    [OPENFILE]() {
      this[ONOPENFILE](fs17.openSync(this.absolute, "r"));
    }
    [READ](fd, buf, offset, length, pos, remain, blockRemain) {
      let threw = true;
      try {
        const bytesRead = fs17.readSync(fd, buf, offset, length, pos);
        this[ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead);
        threw = false;
      } finally {
        if (threw)
          try {
            this[CLOSE](fd, () => {
            });
          } catch (er) {
          }
      }
    }
    [CLOSE](fd, cb) {
      fs17.closeSync(fd);
      cb();
    }
  }
  const WriteEntryTar = warner(class WriteEntryTar2 extends MiniPass {
    constructor(readEntry, opt) {
      opt = opt || {};
      super(opt);
      this.preservePaths = !!opt.preservePaths;
      this.portable = !!opt.portable;
      this.strict = !!opt.strict;
      this.noPax = !!opt.noPax;
      this.noMtime = !!opt.noMtime;
      this.readEntry = readEntry;
      this.type = readEntry.type;
      if (this.type === "Directory" && this.portable)
        this.noMtime = true;
      this.path = readEntry.path;
      this.mode = this[MODE](readEntry.mode);
      this.uid = this.portable ? null : readEntry.uid;
      this.gid = this.portable ? null : readEntry.gid;
      this.uname = this.portable ? null : readEntry.uname;
      this.gname = this.portable ? null : readEntry.gname;
      this.size = readEntry.size;
      this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime;
      this.atime = this.portable ? null : readEntry.atime;
      this.ctime = this.portable ? null : readEntry.ctime;
      this.linkpath = readEntry.linkpath;
      if (typeof opt.onwarn === "function")
        this.on("warn", opt.onwarn);
      let pathWarn = false;
      if (path19.isAbsolute(this.path) && !this.preservePaths) {
        const parsed = path19.parse(this.path);
        pathWarn = parsed.root;
        this.path = this.path.substr(parsed.root.length);
      }
      this.remain = readEntry.size;
      this.blockRemain = readEntry.startBlockSize;
      this.header = new Header({
        path: this.path,
        linkpath: this.linkpath,
        mode: this.mode,
        uid: this.portable ? null : this.uid,
        gid: this.portable ? null : this.gid,
        size: this.size,
        mtime: this.noMtime ? null : this.mtime,
        type: this.type,
        uname: this.portable ? null : this.uname,
        atime: this.portable ? null : this.atime,
        ctime: this.portable ? null : this.ctime
      });
      if (pathWarn) {
        this.warn("TAR_ENTRY_INFO", `stripping ${pathWarn} from absolute path`, {
          entry: this,
          path: pathWarn + this.path
        });
      }
      if (this.header.encode() && !this.noPax)
        super.write(new Pax({
          atime: this.portable ? null : this.atime,
          ctime: this.portable ? null : this.ctime,
          gid: this.portable ? null : this.gid,
          mtime: this.noMtime ? null : this.mtime,
          path: this.path,
          linkpath: this.linkpath,
          size: this.size,
          uid: this.portable ? null : this.uid,
          uname: this.portable ? null : this.uname,
          dev: this.portable ? null : this.readEntry.dev,
          ino: this.portable ? null : this.readEntry.ino,
          nlink: this.portable ? null : this.readEntry.nlink
        }).encode());
      super.write(this.header.block);
      readEntry.pipe(this);
    }
    [MODE](mode) {
      return modeFix(mode, this.type === "Directory", this.portable);
    }
    write(data) {
      const writeLen = data.length;
      if (writeLen > this.blockRemain)
        throw new Error("writing more to entry than is appropriate");
      this.blockRemain -= writeLen;
      return super.write(data);
    }
    end() {
      if (this.blockRemain)
        this.write(Buffer.alloc(this.blockRemain));
      return super.end();
    }
  });
  WriteEntry.Sync = WriteEntrySync;
  WriteEntry.Tar = WriteEntryTar;
  const getType = (stat) => stat.isFile() ? "File" : stat.isDirectory() ? "Directory" : stat.isSymbolicLink() ? "SymbolicLink" : "Unsupported";
  module3.exports = WriteEntry;
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/pack.js
var require_pack = __commonJS((exports2, module3) => {
  "use strict";
  class PackJob {
    constructor(path20, absolute) {
      this.path = path20 || "./";
      this.absolute = absolute;
      this.entry = null;
      this.stat = null;
      this.readdir = null;
      this.pending = false;
      this.ignore = false;
      this.piped = false;
    }
  }
  const MiniPass = require_minipass();
  const zlib = require_minizlib();
  const ReadEntry = require_read_entry();
  const WriteEntry = require_write_entry();
  const WriteEntrySync = WriteEntry.Sync;
  const WriteEntryTar = WriteEntry.Tar;
  const Yallist = require_yallist();
  const EOF = Buffer.alloc(1024);
  const ONSTAT = Symbol("onStat");
  const ENDED = Symbol("ended");
  const QUEUE = Symbol("queue");
  const CURRENT = Symbol("current");
  const PROCESS = Symbol("process");
  const PROCESSING = Symbol("processing");
  const PROCESSJOB = Symbol("processJob");
  const JOBS = Symbol("jobs");
  const JOBDONE = Symbol("jobDone");
  const ADDFSENTRY = Symbol("addFSEntry");
  const ADDTARENTRY = Symbol("addTarEntry");
  const STAT = Symbol("stat");
  const READDIR = Symbol("readdir");
  const ONREADDIR = Symbol("onreaddir");
  const PIPE = Symbol("pipe");
  const ENTRY = Symbol("entry");
  const ENTRYOPT = Symbol("entryOpt");
  const WRITEENTRYCLASS = Symbol("writeEntryClass");
  const WRITE = Symbol("write");
  const ONDRAIN = Symbol("ondrain");
  const fs17 = require("fs");
  const path19 = require("path");
  const warner = require_warn_mixin();
  const Pack = warner(class Pack2 extends MiniPass {
    constructor(opt) {
      super(opt);
      opt = opt || Object.create(null);
      this.opt = opt;
      this.file = opt.file || "";
      this.cwd = opt.cwd || process.cwd();
      this.maxReadSize = opt.maxReadSize;
      this.preservePaths = !!opt.preservePaths;
      this.strict = !!opt.strict;
      this.noPax = !!opt.noPax;
      this.prefix = (opt.prefix || "").replace(/(\\|\/)+$/, "");
      this.linkCache = opt.linkCache || new Map();
      this.statCache = opt.statCache || new Map();
      this.readdirCache = opt.readdirCache || new Map();
      this[WRITEENTRYCLASS] = WriteEntry;
      if (typeof opt.onwarn === "function")
        this.on("warn", opt.onwarn);
      this.portable = !!opt.portable;
      this.zip = null;
      if (opt.gzip) {
        if (typeof opt.gzip !== "object")
          opt.gzip = {};
        if (this.portable)
          opt.gzip.portable = true;
        this.zip = new zlib.Gzip(opt.gzip);
        this.zip.on("data", (chunk) => super.write(chunk));
        this.zip.on("end", (_2) => super.end());
        this.zip.on("drain", (_2) => this[ONDRAIN]());
        this.on("resume", (_2) => this.zip.resume());
      } else
        this.on("drain", this[ONDRAIN]);
      this.noDirRecurse = !!opt.noDirRecurse;
      this.follow = !!opt.follow;
      this.noMtime = !!opt.noMtime;
      this.mtime = opt.mtime || null;
      this.filter = typeof opt.filter === "function" ? opt.filter : (_2) => true;
      this[QUEUE] = new Yallist();
      this[JOBS] = 0;
      this.jobs = +opt.jobs || 4;
      this[PROCESSING] = false;
      this[ENDED] = false;
    }
    [WRITE](chunk) {
      return super.write(chunk);
    }
    add(path20) {
      this.write(path20);
      return this;
    }
    end(path20) {
      if (path20)
        this.write(path20);
      this[ENDED] = true;
      this[PROCESS]();
      return this;
    }
    write(path20) {
      if (this[ENDED])
        throw new Error("write after end");
      if (path20 instanceof ReadEntry)
        this[ADDTARENTRY](path20);
      else
        this[ADDFSENTRY](path20);
      return this.flowing;
    }
    [ADDTARENTRY](p) {
      const absolute = path19.resolve(this.cwd, p.path);
      if (this.prefix)
        p.path = this.prefix + "/" + p.path.replace(/^\.(\/+|$)/, "");
      if (!this.filter(p.path, p))
        p.resume();
      else {
        const job = new PackJob(p.path, absolute, false);
        job.entry = new WriteEntryTar(p, this[ENTRYOPT](job));
        job.entry.on("end", (_2) => this[JOBDONE](job));
        this[JOBS] += 1;
        this[QUEUE].push(job);
      }
      this[PROCESS]();
    }
    [ADDFSENTRY](p) {
      const absolute = path19.resolve(this.cwd, p);
      if (this.prefix)
        p = this.prefix + "/" + p.replace(/^\.(\/+|$)/, "");
      this[QUEUE].push(new PackJob(p, absolute));
      this[PROCESS]();
    }
    [STAT](job) {
      job.pending = true;
      this[JOBS] += 1;
      const stat = this.follow ? "stat" : "lstat";
      fs17[stat](job.absolute, (er, stat2) => {
        job.pending = false;
        this[JOBS] -= 1;
        if (er)
          this.emit("error", er);
        else
          this[ONSTAT](job, stat2);
      });
    }
    [ONSTAT](job, stat) {
      this.statCache.set(job.absolute, stat);
      job.stat = stat;
      if (!this.filter(job.path, stat))
        job.ignore = true;
      this[PROCESS]();
    }
    [READDIR](job) {
      job.pending = true;
      this[JOBS] += 1;
      fs17.readdir(job.absolute, (er, entries) => {
        job.pending = false;
        this[JOBS] -= 1;
        if (er)
          return this.emit("error", er);
        this[ONREADDIR](job, entries);
      });
    }
    [ONREADDIR](job, entries) {
      this.readdirCache.set(job.absolute, entries);
      job.readdir = entries;
      this[PROCESS]();
    }
    [PROCESS]() {
      if (this[PROCESSING])
        return;
      this[PROCESSING] = true;
      for (let w = this[QUEUE].head; w !== null && this[JOBS] < this.jobs; w = w.next) {
        this[PROCESSJOB](w.value);
        if (w.value.ignore) {
          const p = w.next;
          this[QUEUE].removeNode(w);
          w.next = p;
        }
      }
      this[PROCESSING] = false;
      if (this[ENDED] && !this[QUEUE].length && this[JOBS] === 0) {
        if (this.zip)
          this.zip.end(EOF);
        else {
          super.write(EOF);
          super.end();
        }
      }
    }
    get [CURRENT]() {
      return this[QUEUE] && this[QUEUE].head && this[QUEUE].head.value;
    }
    [JOBDONE](job) {
      this[QUEUE].shift();
      this[JOBS] -= 1;
      this[PROCESS]();
    }
    [PROCESSJOB](job) {
      if (job.pending)
        return;
      if (job.entry) {
        if (job === this[CURRENT] && !job.piped)
          this[PIPE](job);
        return;
      }
      if (!job.stat) {
        if (this.statCache.has(job.absolute))
          this[ONSTAT](job, this.statCache.get(job.absolute));
        else
          this[STAT](job);
      }
      if (!job.stat)
        return;
      if (job.ignore)
        return;
      if (!this.noDirRecurse && job.stat.isDirectory() && !job.readdir) {
        if (this.readdirCache.has(job.absolute))
          this[ONREADDIR](job, this.readdirCache.get(job.absolute));
        else
          this[READDIR](job);
        if (!job.readdir)
          return;
      }
      job.entry = this[ENTRY](job);
      if (!job.entry) {
        job.ignore = true;
        return;
      }
      if (job === this[CURRENT] && !job.piped)
        this[PIPE](job);
    }
    [ENTRYOPT](job) {
      return {
        onwarn: (code, msg, data) => this.warn(code, msg, data),
        noPax: this.noPax,
        cwd: this.cwd,
        absolute: job.absolute,
        preservePaths: this.preservePaths,
        maxReadSize: this.maxReadSize,
        strict: this.strict,
        portable: this.portable,
        linkCache: this.linkCache,
        statCache: this.statCache,
        noMtime: this.noMtime,
        mtime: this.mtime
      };
    }
    [ENTRY](job) {
      this[JOBS] += 1;
      try {
        return new this[WRITEENTRYCLASS](job.path, this[ENTRYOPT](job)).on("end", () => this[JOBDONE](job)).on("error", (er) => this.emit("error", er));
      } catch (er) {
        this.emit("error", er);
      }
    }
    [ONDRAIN]() {
      if (this[CURRENT] && this[CURRENT].entry)
        this[CURRENT].entry.resume();
    }
    [PIPE](job) {
      job.piped = true;
      if (job.readdir)
        job.readdir.forEach((entry) => {
          const p = this.prefix ? job.path.slice(this.prefix.length + 1) || "./" : job.path;
          const base = p === "./" ? "" : p.replace(/\/*$/, "/");
          this[ADDFSENTRY](base + entry);
        });
      const source = job.entry;
      const zip = this.zip;
      if (zip)
        source.on("data", (chunk) => {
          if (!zip.write(chunk))
            source.pause();
        });
      else
        source.on("data", (chunk) => {
          if (!super.write(chunk))
            source.pause();
        });
    }
    pause() {
      if (this.zip)
        this.zip.pause();
      return super.pause();
    }
  });
  class PackSync extends Pack {
    constructor(opt) {
      super(opt);
      this[WRITEENTRYCLASS] = WriteEntrySync;
    }
    pause() {
    }
    resume() {
    }
    [STAT](job) {
      const stat = this.follow ? "statSync" : "lstatSync";
      this[ONSTAT](job, fs17[stat](job.absolute));
    }
    [READDIR](job, stat) {
      this[ONREADDIR](job, fs17.readdirSync(job.absolute));
    }
    [PIPE](job) {
      const source = job.entry;
      const zip = this.zip;
      if (job.readdir)
        job.readdir.forEach((entry) => {
          const p = this.prefix ? job.path.slice(this.prefix.length + 1) || "./" : job.path;
          const base = p === "./" ? "" : p.replace(/\/*$/, "/");
          this[ADDFSENTRY](base + entry);
        });
      if (zip)
        source.on("data", (chunk) => {
          zip.write(chunk);
        });
      else
        source.on("data", (chunk) => {
          super[WRITE](chunk);
        });
    }
  }
  Pack.Sync = PackSync;
  module3.exports = Pack;
});

// ../../node_modules/.pnpm/fs-minipass@2.1.0/node_modules/fs-minipass/index.js
var require_fs_minipass = __commonJS((exports2) => {
  "use strict";
  const MiniPass = require_minipass();
  const EE = require("events").EventEmitter;
  const fs17 = require("fs");
  let writev = fs17.writev;
  if (!writev) {
    const binding = process.binding("fs");
    const FSReqWrap = binding.FSReqWrap || binding.FSReqCallback;
    writev = (fd, iovec, pos, cb) => {
      const done = (er, bw) => cb(er, bw, iovec);
      const req = new FSReqWrap();
      req.oncomplete = done;
      binding.writeBuffers(fd, iovec, pos, req);
    };
  }
  const _autoClose = Symbol("_autoClose");
  const _close = Symbol("_close");
  const _ended = Symbol("_ended");
  const _fd = Symbol("_fd");
  const _finished = Symbol("_finished");
  const _flags = Symbol("_flags");
  const _flush = Symbol("_flush");
  const _handleChunk = Symbol("_handleChunk");
  const _makeBuf = Symbol("_makeBuf");
  const _mode = Symbol("_mode");
  const _needDrain = Symbol("_needDrain");
  const _onerror = Symbol("_onerror");
  const _onopen = Symbol("_onopen");
  const _onread = Symbol("_onread");
  const _onwrite = Symbol("_onwrite");
  const _open = Symbol("_open");
  const _path = Symbol("_path");
  const _pos = Symbol("_pos");
  const _queue = Symbol("_queue");
  const _read = Symbol("_read");
  const _readSize = Symbol("_readSize");
  const _reading = Symbol("_reading");
  const _remain = Symbol("_remain");
  const _size = Symbol("_size");
  const _write = Symbol("_write");
  const _writing = Symbol("_writing");
  const _defaultFlag = Symbol("_defaultFlag");
  const _errored = Symbol("_errored");
  class ReadStream extends MiniPass {
    constructor(path19, opt) {
      opt = opt || {};
      super(opt);
      this.readable = true;
      this.writable = false;
      if (typeof path19 !== "string")
        throw new TypeError("path must be a string");
      this[_errored] = false;
      this[_fd] = typeof opt.fd === "number" ? opt.fd : null;
      this[_path] = path19;
      this[_readSize] = opt.readSize || 16 * 1024 * 1024;
      this[_reading] = false;
      this[_size] = typeof opt.size === "number" ? opt.size : Infinity;
      this[_remain] = this[_size];
      this[_autoClose] = typeof opt.autoClose === "boolean" ? opt.autoClose : true;
      if (typeof this[_fd] === "number")
        this[_read]();
      else
        this[_open]();
    }
    get fd() {
      return this[_fd];
    }
    get path() {
      return this[_path];
    }
    write() {
      throw new TypeError("this is a readable stream");
    }
    end() {
      throw new TypeError("this is a readable stream");
    }
    [_open]() {
      fs17.open(this[_path], "r", (er, fd) => this[_onopen](er, fd));
    }
    [_onopen](er, fd) {
      if (er)
        this[_onerror](er);
      else {
        this[_fd] = fd;
        this.emit("open", fd);
        this[_read]();
      }
    }
    [_makeBuf]() {
      return Buffer.allocUnsafe(Math.min(this[_readSize], this[_remain]));
    }
    [_read]() {
      if (!this[_reading]) {
        this[_reading] = true;
        const buf = this[_makeBuf]();
        if (buf.length === 0)
          return process.nextTick(() => this[_onread](null, 0, buf));
        fs17.read(this[_fd], buf, 0, buf.length, null, (er, br, buf2) => this[_onread](er, br, buf2));
      }
    }
    [_onread](er, br, buf) {
      this[_reading] = false;
      if (er)
        this[_onerror](er);
      else if (this[_handleChunk](br, buf))
        this[_read]();
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === "number") {
        const fd = this[_fd];
        this[_fd] = null;
        fs17.close(fd, (er) => er ? this.emit("error", er) : this.emit("close"));
      }
    }
    [_onerror](er) {
      this[_reading] = true;
      this[_close]();
      this.emit("error", er);
    }
    [_handleChunk](br, buf) {
      let ret = false;
      this[_remain] -= br;
      if (br > 0)
        ret = super.write(br < buf.length ? buf.slice(0, br) : buf);
      if (br === 0 || this[_remain] <= 0) {
        ret = false;
        this[_close]();
        super.end();
      }
      return ret;
    }
    emit(ev, data) {
      switch (ev) {
        case "prefinish":
        case "finish":
          break;
        case "drain":
          if (typeof this[_fd] === "number")
            this[_read]();
          break;
        case "error":
          if (this[_errored])
            return;
          this[_errored] = true;
          return super.emit(ev, data);
        default:
          return super.emit(ev, data);
      }
    }
  }
  class ReadStreamSync extends ReadStream {
    [_open]() {
      let threw = true;
      try {
        this[_onopen](null, fs17.openSync(this[_path], "r"));
        threw = false;
      } finally {
        if (threw)
          this[_close]();
      }
    }
    [_read]() {
      let threw = true;
      try {
        if (!this[_reading]) {
          this[_reading] = true;
          do {
            const buf = this[_makeBuf]();
            const br = buf.length === 0 ? 0 : fs17.readSync(this[_fd], buf, 0, buf.length, null);
            if (!this[_handleChunk](br, buf))
              break;
          } while (true);
          this[_reading] = false;
        }
        threw = false;
      } finally {
        if (threw)
          this[_close]();
      }
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === "number") {
        const fd = this[_fd];
        this[_fd] = null;
        fs17.closeSync(fd);
        this.emit("close");
      }
    }
  }
  class WriteStream extends EE {
    constructor(path19, opt) {
      opt = opt || {};
      super(opt);
      this.readable = false;
      this.writable = true;
      this[_errored] = false;
      this[_writing] = false;
      this[_ended] = false;
      this[_needDrain] = false;
      this[_queue] = [];
      this[_path] = path19;
      this[_fd] = typeof opt.fd === "number" ? opt.fd : null;
      this[_mode] = opt.mode === void 0 ? 438 : opt.mode;
      this[_pos] = typeof opt.start === "number" ? opt.start : null;
      this[_autoClose] = typeof opt.autoClose === "boolean" ? opt.autoClose : true;
      const defaultFlag = this[_pos] !== null ? "r+" : "w";
      this[_defaultFlag] = opt.flags === void 0;
      this[_flags] = this[_defaultFlag] ? defaultFlag : opt.flags;
      if (this[_fd] === null)
        this[_open]();
    }
    emit(ev, data) {
      if (ev === "error") {
        if (this[_errored])
          return;
        this[_errored] = true;
      }
      return super.emit(ev, data);
    }
    get fd() {
      return this[_fd];
    }
    get path() {
      return this[_path];
    }
    [_onerror](er) {
      this[_close]();
      this[_writing] = true;
      this.emit("error", er);
    }
    [_open]() {
      fs17.open(this[_path], this[_flags], this[_mode], (er, fd) => this[_onopen](er, fd));
    }
    [_onopen](er, fd) {
      if (this[_defaultFlag] && this[_flags] === "r+" && er && er.code === "ENOENT") {
        this[_flags] = "w";
        this[_open]();
      } else if (er)
        this[_onerror](er);
      else {
        this[_fd] = fd;
        this.emit("open", fd);
        this[_flush]();
      }
    }
    end(buf, enc) {
      if (buf)
        this.write(buf, enc);
      this[_ended] = true;
      if (!this[_writing] && !this[_queue].length && typeof this[_fd] === "number")
        this[_onwrite](null, 0);
      return this;
    }
    write(buf, enc) {
      if (typeof buf === "string")
        buf = Buffer.from(buf, enc);
      if (this[_ended]) {
        this.emit("error", new Error("write() after end()"));
        return false;
      }
      if (this[_fd] === null || this[_writing] || this[_queue].length) {
        this[_queue].push(buf);
        this[_needDrain] = true;
        return false;
      }
      this[_writing] = true;
      this[_write](buf);
      return true;
    }
    [_write](buf) {
      fs17.write(this[_fd], buf, 0, buf.length, this[_pos], (er, bw) => this[_onwrite](er, bw));
    }
    [_onwrite](er, bw) {
      if (er)
        this[_onerror](er);
      else {
        if (this[_pos] !== null)
          this[_pos] += bw;
        if (this[_queue].length)
          this[_flush]();
        else {
          this[_writing] = false;
          if (this[_ended] && !this[_finished]) {
            this[_finished] = true;
            this[_close]();
            this.emit("finish");
          } else if (this[_needDrain]) {
            this[_needDrain] = false;
            this.emit("drain");
          }
        }
      }
    }
    [_flush]() {
      if (this[_queue].length === 0) {
        if (this[_ended])
          this[_onwrite](null, 0);
      } else if (this[_queue].length === 1)
        this[_write](this[_queue].pop());
      else {
        const iovec = this[_queue];
        this[_queue] = [];
        writev(this[_fd], iovec, this[_pos], (er, bw) => this[_onwrite](er, bw));
      }
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === "number") {
        const fd = this[_fd];
        this[_fd] = null;
        fs17.close(fd, (er) => er ? this.emit("error", er) : this.emit("close"));
      }
    }
  }
  class WriteStreamSync extends WriteStream {
    [_open]() {
      let fd;
      if (this[_defaultFlag] && this[_flags] === "r+") {
        try {
          fd = fs17.openSync(this[_path], this[_flags], this[_mode]);
        } catch (er) {
          if (er.code === "ENOENT") {
            this[_flags] = "w";
            return this[_open]();
          } else
            throw er;
        }
      } else
        fd = fs17.openSync(this[_path], this[_flags], this[_mode]);
      this[_onopen](null, fd);
    }
    [_close]() {
      if (this[_autoClose] && typeof this[_fd] === "number") {
        const fd = this[_fd];
        this[_fd] = null;
        fs17.closeSync(fd);
        this.emit("close");
      }
    }
    [_write](buf) {
      let threw = true;
      try {
        this[_onwrite](null, fs17.writeSync(this[_fd], buf, 0, buf.length, this[_pos]));
        threw = false;
      } finally {
        if (threw)
          try {
            this[_close]();
          } catch (_2) {
          }
      }
    }
  }
  exports2.ReadStream = ReadStream;
  exports2.ReadStreamSync = ReadStreamSync;
  exports2.WriteStream = WriteStream;
  exports2.WriteStreamSync = WriteStreamSync;
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/parse.js
var require_parse4 = __commonJS((exports2, module3) => {
  "use strict";
  const warner = require_warn_mixin();
  const path19 = require("path");
  const Header = require_header();
  const EE = require("events");
  const Yallist = require_yallist();
  const maxMetaEntrySize = 1024 * 1024;
  const Entry = require_read_entry();
  const Pax = require_pax();
  const zlib = require_minizlib();
  const gzipHeader = Buffer.from([31, 139]);
  const STATE = Symbol("state");
  const WRITEENTRY = Symbol("writeEntry");
  const READENTRY = Symbol("readEntry");
  const NEXTENTRY = Symbol("nextEntry");
  const PROCESSENTRY = Symbol("processEntry");
  const EX = Symbol("extendedHeader");
  const GEX = Symbol("globalExtendedHeader");
  const META = Symbol("meta");
  const EMITMETA = Symbol("emitMeta");
  const BUFFER = Symbol("buffer");
  const QUEUE = Symbol("queue");
  const ENDED = Symbol("ended");
  const EMITTEDEND = Symbol("emittedEnd");
  const EMIT = Symbol("emit");
  const UNZIP = Symbol("unzip");
  const CONSUMECHUNK = Symbol("consumeChunk");
  const CONSUMECHUNKSUB = Symbol("consumeChunkSub");
  const CONSUMEBODY = Symbol("consumeBody");
  const CONSUMEMETA = Symbol("consumeMeta");
  const CONSUMEHEADER = Symbol("consumeHeader");
  const CONSUMING = Symbol("consuming");
  const BUFFERCONCAT = Symbol("bufferConcat");
  const MAYBEEND = Symbol("maybeEnd");
  const WRITING = Symbol("writing");
  const ABORTED = Symbol("aborted");
  const DONE = Symbol("onDone");
  const SAW_VALID_ENTRY = Symbol("sawValidEntry");
  const SAW_NULL_BLOCK = Symbol("sawNullBlock");
  const SAW_EOF = Symbol("sawEOF");
  const noop = (_2) => true;
  module3.exports = warner(class Parser extends EE {
    constructor(opt) {
      opt = opt || {};
      super(opt);
      this.file = opt.file || "";
      this[SAW_VALID_ENTRY] = null;
      this.on(DONE, (_2) => {
        if (this[STATE] === "begin" || this[SAW_VALID_ENTRY] === false) {
          this.warn("TAR_BAD_ARCHIVE", "Unrecognized archive format");
        }
      });
      if (opt.ondone)
        this.on(DONE, opt.ondone);
      else
        this.on(DONE, (_2) => {
          this.emit("prefinish");
          this.emit("finish");
          this.emit("end");
          this.emit("close");
        });
      this.strict = !!opt.strict;
      this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize;
      this.filter = typeof opt.filter === "function" ? opt.filter : noop;
      this.writable = true;
      this.readable = false;
      this[QUEUE] = new Yallist();
      this[BUFFER] = null;
      this[READENTRY] = null;
      this[WRITEENTRY] = null;
      this[STATE] = "begin";
      this[META] = "";
      this[EX] = null;
      this[GEX] = null;
      this[ENDED] = false;
      this[UNZIP] = null;
      this[ABORTED] = false;
      this[SAW_NULL_BLOCK] = false;
      this[SAW_EOF] = false;
      if (typeof opt.onwarn === "function")
        this.on("warn", opt.onwarn);
      if (typeof opt.onentry === "function")
        this.on("entry", opt.onentry);
    }
    [CONSUMEHEADER](chunk, position) {
      if (this[SAW_VALID_ENTRY] === null)
        this[SAW_VALID_ENTRY] = false;
      let header;
      try {
        header = new Header(chunk, position, this[EX], this[GEX]);
      } catch (er) {
        return this.warn("TAR_ENTRY_INVALID", er);
      }
      if (header.nullBlock) {
        if (this[SAW_NULL_BLOCK]) {
          this[SAW_EOF] = true;
          if (this[STATE] === "begin")
            this[STATE] = "header";
          this[EMIT]("eof");
        } else {
          this[SAW_NULL_BLOCK] = true;
          this[EMIT]("nullBlock");
        }
      } else {
        this[SAW_NULL_BLOCK] = false;
        if (!header.cksumValid)
          this.warn("TAR_ENTRY_INVALID", "checksum failure", {header});
        else if (!header.path)
          this.warn("TAR_ENTRY_INVALID", "path is required", {header});
        else {
          const type = header.type;
          if (/^(Symbolic)?Link$/.test(type) && !header.linkpath)
            this.warn("TAR_ENTRY_INVALID", "linkpath required", {header});
          else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath)
            this.warn("TAR_ENTRY_INVALID", "linkpath forbidden", {header});
          else {
            const entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX]);
            if (!this[SAW_VALID_ENTRY]) {
              if (entry.remain) {
                const onend = () => {
                  if (!entry.invalid)
                    this[SAW_VALID_ENTRY] = true;
                };
                entry.on("end", onend);
              } else {
                this[SAW_VALID_ENTRY] = true;
              }
            }
            if (entry.meta) {
              if (entry.size > this.maxMetaEntrySize) {
                entry.ignore = true;
                this[EMIT]("ignoredEntry", entry);
                this[STATE] = "ignore";
                entry.resume();
              } else if (entry.size > 0) {
                this[META] = "";
                entry.on("data", (c) => this[META] += c);
                this[STATE] = "meta";
              }
            } else {
              this[EX] = null;
              entry.ignore = entry.ignore || !this.filter(entry.path, entry);
              if (entry.ignore) {
                this[EMIT]("ignoredEntry", entry);
                this[STATE] = entry.remain ? "ignore" : "header";
                entry.resume();
              } else {
                if (entry.remain)
                  this[STATE] = "body";
                else {
                  this[STATE] = "header";
                  entry.end();
                }
                if (!this[READENTRY]) {
                  this[QUEUE].push(entry);
                  this[NEXTENTRY]();
                } else
                  this[QUEUE].push(entry);
              }
            }
          }
        }
      }
    }
    [PROCESSENTRY](entry) {
      let go = true;
      if (!entry) {
        this[READENTRY] = null;
        go = false;
      } else if (Array.isArray(entry))
        this.emit.apply(this, entry);
      else {
        this[READENTRY] = entry;
        this.emit("entry", entry);
        if (!entry.emittedEnd) {
          entry.on("end", (_2) => this[NEXTENTRY]());
          go = false;
        }
      }
      return go;
    }
    [NEXTENTRY]() {
      do {
      } while (this[PROCESSENTRY](this[QUEUE].shift()));
      if (!this[QUEUE].length) {
        const re = this[READENTRY];
        const drainNow = !re || re.flowing || re.size === re.remain;
        if (drainNow) {
          if (!this[WRITING])
            this.emit("drain");
        } else
          re.once("drain", (_2) => this.emit("drain"));
      }
    }
    [CONSUMEBODY](chunk, position) {
      const entry = this[WRITEENTRY];
      const br = entry.blockRemain;
      const c = br >= chunk.length && position === 0 ? chunk : chunk.slice(position, position + br);
      entry.write(c);
      if (!entry.blockRemain) {
        this[STATE] = "header";
        this[WRITEENTRY] = null;
        entry.end();
      }
      return c.length;
    }
    [CONSUMEMETA](chunk, position) {
      const entry = this[WRITEENTRY];
      const ret = this[CONSUMEBODY](chunk, position);
      if (!this[WRITEENTRY])
        this[EMITMETA](entry);
      return ret;
    }
    [EMIT](ev, data, extra) {
      if (!this[QUEUE].length && !this[READENTRY])
        this.emit(ev, data, extra);
      else
        this[QUEUE].push([ev, data, extra]);
    }
    [EMITMETA](entry) {
      this[EMIT]("meta", this[META]);
      switch (entry.type) {
        case "ExtendedHeader":
        case "OldExtendedHeader":
          this[EX] = Pax.parse(this[META], this[EX], false);
          break;
        case "GlobalExtendedHeader":
          this[GEX] = Pax.parse(this[META], this[GEX], true);
          break;
        case "NextFileHasLongPath":
        case "OldGnuLongPath":
          this[EX] = this[EX] || Object.create(null);
          this[EX].path = this[META].replace(/\0.*/, "");
          break;
        case "NextFileHasLongLinkpath":
          this[EX] = this[EX] || Object.create(null);
          this[EX].linkpath = this[META].replace(/\0.*/, "");
          break;
        default:
          throw new Error("unknown meta: " + entry.type);
      }
    }
    abort(error) {
      this[ABORTED] = true;
      this.emit("abort", error);
      this.warn("TAR_ABORT", error, {recoverable: false});
    }
    write(chunk) {
      if (this[ABORTED])
        return;
      if (this[UNZIP] === null && chunk) {
        if (this[BUFFER]) {
          chunk = Buffer.concat([this[BUFFER], chunk]);
          this[BUFFER] = null;
        }
        if (chunk.length < gzipHeader.length) {
          this[BUFFER] = chunk;
          return true;
        }
        for (let i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {
          if (chunk[i] !== gzipHeader[i])
            this[UNZIP] = false;
        }
        if (this[UNZIP] === null) {
          const ended = this[ENDED];
          this[ENDED] = false;
          this[UNZIP] = new zlib.Unzip();
          this[UNZIP].on("data", (chunk2) => this[CONSUMECHUNK](chunk2));
          this[UNZIP].on("error", (er) => this.abort(er));
          this[UNZIP].on("end", (_2) => {
            this[ENDED] = true;
            this[CONSUMECHUNK]();
          });
          this[WRITING] = true;
          const ret2 = this[UNZIP][ended ? "end" : "write"](chunk);
          this[WRITING] = false;
          return ret2;
        }
      }
      this[WRITING] = true;
      if (this[UNZIP])
        this[UNZIP].write(chunk);
      else
        this[CONSUMECHUNK](chunk);
      this[WRITING] = false;
      const ret = this[QUEUE].length ? false : this[READENTRY] ? this[READENTRY].flowing : true;
      if (!ret && !this[QUEUE].length)
        this[READENTRY].once("drain", (_2) => this.emit("drain"));
      return ret;
    }
    [BUFFERCONCAT](c) {
      if (c && !this[ABORTED])
        this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c;
    }
    [MAYBEEND]() {
      if (this[ENDED] && !this[EMITTEDEND] && !this[ABORTED] && !this[CONSUMING]) {
        this[EMITTEDEND] = true;
        const entry = this[WRITEENTRY];
        if (entry && entry.blockRemain) {
          const have = this[BUFFER] ? this[BUFFER].length : 0;
          this.warn("TAR_BAD_ARCHIVE", `Truncated input (needed ${entry.blockRemain} more bytes, only ${have} available)`, {entry});
          if (this[BUFFER])
            entry.write(this[BUFFER]);
          entry.end();
        }
        this[EMIT](DONE);
      }
    }
    [CONSUMECHUNK](chunk) {
      if (this[CONSUMING])
        this[BUFFERCONCAT](chunk);
      else if (!chunk && !this[BUFFER])
        this[MAYBEEND]();
      else {
        this[CONSUMING] = true;
        if (this[BUFFER]) {
          this[BUFFERCONCAT](chunk);
          const c = this[BUFFER];
          this[BUFFER] = null;
          this[CONSUMECHUNKSUB](c);
        } else {
          this[CONSUMECHUNKSUB](chunk);
        }
        while (this[BUFFER] && this[BUFFER].length >= 512 && !this[ABORTED] && !this[SAW_EOF]) {
          const c = this[BUFFER];
          this[BUFFER] = null;
          this[CONSUMECHUNKSUB](c);
        }
        this[CONSUMING] = false;
      }
      if (!this[BUFFER] || this[ENDED])
        this[MAYBEEND]();
    }
    [CONSUMECHUNKSUB](chunk) {
      let position = 0;
      let length = chunk.length;
      while (position + 512 <= length && !this[ABORTED] && !this[SAW_EOF]) {
        switch (this[STATE]) {
          case "begin":
          case "header":
            this[CONSUMEHEADER](chunk, position);
            position += 512;
            break;
          case "ignore":
          case "body":
            position += this[CONSUMEBODY](chunk, position);
            break;
          case "meta":
            position += this[CONSUMEMETA](chunk, position);
            break;
          default:
            throw new Error("invalid state: " + this[STATE]);
        }
      }
      if (position < length) {
        if (this[BUFFER])
          this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]]);
        else
          this[BUFFER] = chunk.slice(position);
      }
    }
    end(chunk) {
      if (!this[ABORTED]) {
        if (this[UNZIP])
          this[UNZIP].end(chunk);
        else {
          this[ENDED] = true;
          this.write(chunk);
        }
      }
    }
  });
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/list.js
var require_list = __commonJS((exports2, module3) => {
  "use strict";
  const hlo = require_high_level_opt();
  const Parser = require_parse4();
  const fs17 = require("fs");
  const fsm = require_fs_minipass();
  const path19 = require("path");
  const t = module3.exports = (opt_, files, cb) => {
    if (typeof opt_ === "function")
      cb = opt_, files = null, opt_ = {};
    else if (Array.isArray(opt_))
      files = opt_, opt_ = {};
    if (typeof files === "function")
      cb = files, files = null;
    if (!files)
      files = [];
    else
      files = Array.from(files);
    const opt = hlo(opt_);
    if (opt.sync && typeof cb === "function")
      throw new TypeError("callback not supported for sync tar functions");
    if (!opt.file && typeof cb === "function")
      throw new TypeError("callback only supported with file option");
    if (files.length)
      filesFilter(opt, files);
    if (!opt.noResume)
      onentryFunction(opt);
    return opt.file && opt.sync ? listFileSync(opt) : opt.file ? listFile(opt, cb) : list(opt);
  };
  const onentryFunction = (opt) => {
    const onentry = opt.onentry;
    opt.onentry = onentry ? (e) => {
      onentry(e);
      e.resume();
    } : (e) => e.resume();
  };
  const filesFilter = (opt, files) => {
    const map = new Map(files.map((f) => [f.replace(/\/+$/, ""), true]));
    const filter = opt.filter;
    const mapHas = (file, r) => {
      const root = r || path19.parse(file).root || ".";
      const ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path19.dirname(file), root);
      map.set(file, ret);
      return ret;
    };
    opt.filter = filter ? (file, entry) => filter(file, entry) && mapHas(file.replace(/\/+$/, "")) : (file) => mapHas(file.replace(/\/+$/, ""));
  };
  const listFileSync = (opt) => {
    const p = list(opt);
    const file = opt.file;
    let threw = true;
    let fd;
    try {
      const stat = fs17.statSync(file);
      const readSize = opt.maxReadSize || 16 * 1024 * 1024;
      if (stat.size < readSize) {
        p.end(fs17.readFileSync(file));
      } else {
        let pos = 0;
        const buf = Buffer.allocUnsafe(readSize);
        fd = fs17.openSync(file, "r");
        while (pos < stat.size) {
          let bytesRead = fs17.readSync(fd, buf, 0, readSize, pos);
          pos += bytesRead;
          p.write(buf.slice(0, bytesRead));
        }
        p.end();
      }
      threw = false;
    } finally {
      if (threw && fd)
        try {
          fs17.closeSync(fd);
        } catch (er) {
        }
    }
  };
  const listFile = (opt, cb) => {
    const parse = new Parser(opt);
    const readSize = opt.maxReadSize || 16 * 1024 * 1024;
    const file = opt.file;
    const p = new Promise((resolve, reject) => {
      parse.on("error", reject);
      parse.on("end", resolve);
      fs17.stat(file, (er, stat) => {
        if (er)
          reject(er);
        else {
          const stream = new fsm.ReadStream(file, {
            readSize,
            size: stat.size
          });
          stream.on("error", reject);
          stream.pipe(parse);
        }
      });
    });
    return cb ? p.then(cb, cb) : p;
  };
  const list = (opt) => new Parser(opt);
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/create.js
var require_create = __commonJS((exports2, module3) => {
  "use strict";
  const hlo = require_high_level_opt();
  const Pack = require_pack();
  const fs17 = require("fs");
  const fsm = require_fs_minipass();
  const t = require_list();
  const path19 = require("path");
  const c = module3.exports = (opt_, files, cb) => {
    if (typeof files === "function")
      cb = files;
    if (Array.isArray(opt_))
      files = opt_, opt_ = {};
    if (!files || !Array.isArray(files) || !files.length)
      throw new TypeError("no files or directories specified");
    files = Array.from(files);
    const opt = hlo(opt_);
    if (opt.sync && typeof cb === "function")
      throw new TypeError("callback not supported for sync tar functions");
    if (!opt.file && typeof cb === "function")
      throw new TypeError("callback only supported with file option");
    return opt.file && opt.sync ? createFileSync(opt, files) : opt.file ? createFile(opt, files, cb) : opt.sync ? createSync(opt, files) : create(opt, files);
  };
  const createFileSync = (opt, files) => {
    const p = new Pack.Sync(opt);
    const stream = new fsm.WriteStreamSync(opt.file, {
      mode: opt.mode || 438
    });
    p.pipe(stream);
    addFilesSync(p, files);
  };
  const createFile = (opt, files, cb) => {
    const p = new Pack(opt);
    const stream = new fsm.WriteStream(opt.file, {
      mode: opt.mode || 438
    });
    p.pipe(stream);
    const promise = new Promise((res, rej) => {
      stream.on("error", rej);
      stream.on("close", res);
      p.on("error", rej);
    });
    addFilesAsync(p, files);
    return cb ? promise.then(cb, cb) : promise;
  };
  const addFilesSync = (p, files) => {
    files.forEach((file) => {
      if (file.charAt(0) === "@")
        t({
          file: path19.resolve(p.cwd, file.substr(1)),
          sync: true,
          noResume: true,
          onentry: (entry) => p.add(entry)
        });
      else
        p.add(file);
    });
    p.end();
  };
  const addFilesAsync = (p, files) => {
    while (files.length) {
      const file = files.shift();
      if (file.charAt(0) === "@")
        return t({
          file: path19.resolve(p.cwd, file.substr(1)),
          noResume: true,
          onentry: (entry) => p.add(entry)
        }).then((_2) => addFilesAsync(p, files));
      else
        p.add(file);
    }
    p.end();
  };
  const createSync = (opt, files) => {
    const p = new Pack.Sync(opt);
    addFilesSync(p, files);
    return p;
  };
  const create = (opt, files) => {
    const p = new Pack(opt);
    addFilesAsync(p, files);
    return p;
  };
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/replace.js
var require_replace = __commonJS((exports2, module3) => {
  "use strict";
  const hlo = require_high_level_opt();
  const Pack = require_pack();
  const Parse = require_parse4();
  const fs17 = require("fs");
  const fsm = require_fs_minipass();
  const t = require_list();
  const path19 = require("path");
  const Header = require_header();
  const r = module3.exports = (opt_, files, cb) => {
    const opt = hlo(opt_);
    if (!opt.file)
      throw new TypeError("file is required");
    if (opt.gzip)
      throw new TypeError("cannot append to compressed archives");
    if (!files || !Array.isArray(files) || !files.length)
      throw new TypeError("no files or directories specified");
    files = Array.from(files);
    return opt.sync ? replaceSync(opt, files) : replace(opt, files, cb);
  };
  const replaceSync = (opt, files) => {
    const p = new Pack.Sync(opt);
    let threw = true;
    let fd;
    let position;
    try {
      try {
        fd = fs17.openSync(opt.file, "r+");
      } catch (er) {
        if (er.code === "ENOENT")
          fd = fs17.openSync(opt.file, "w+");
        else
          throw er;
      }
      const st = fs17.fstatSync(fd);
      const headBuf = Buffer.alloc(512);
      POSITION:
        for (position = 0; position < st.size; position += 512) {
          for (let bufPos = 0, bytes = 0; bufPos < 512; bufPos += bytes) {
            bytes = fs17.readSync(fd, headBuf, bufPos, headBuf.length - bufPos, position + bufPos);
            if (position === 0 && headBuf[0] === 31 && headBuf[1] === 139)
              throw new Error("cannot append to compressed archives");
            if (!bytes)
              break POSITION;
          }
          let h = new Header(headBuf);
          if (!h.cksumValid)
            break;
          let entryBlockSize = 512 * Math.ceil(h.size / 512);
          if (position + entryBlockSize + 512 > st.size)
            break;
          position += entryBlockSize;
          if (opt.mtimeCache)
            opt.mtimeCache.set(h.path, h.mtime);
        }
      threw = false;
      streamSync(opt, p, position, fd, files);
    } finally {
      if (threw)
        try {
          fs17.closeSync(fd);
        } catch (er) {
        }
    }
  };
  const streamSync = (opt, p, position, fd, files) => {
    const stream = new fsm.WriteStreamSync(opt.file, {
      fd,
      start: position
    });
    p.pipe(stream);
    addFilesSync(p, files);
  };
  const replace = (opt, files, cb) => {
    files = Array.from(files);
    const p = new Pack(opt);
    const getPos = (fd, size, cb_) => {
      const cb2 = (er, pos) => {
        if (er)
          fs17.close(fd, (_2) => cb_(er));
        else
          cb_(null, pos);
      };
      let position = 0;
      if (size === 0)
        return cb2(null, 0);
      let bufPos = 0;
      const headBuf = Buffer.alloc(512);
      const onread = (er, bytes) => {
        if (er)
          return cb2(er);
        bufPos += bytes;
        if (bufPos < 512 && bytes)
          return fs17.read(fd, headBuf, bufPos, headBuf.length - bufPos, position + bufPos, onread);
        if (position === 0 && headBuf[0] === 31 && headBuf[1] === 139)
          return cb2(new Error("cannot append to compressed archives"));
        if (bufPos < 512)
          return cb2(null, position);
        const h = new Header(headBuf);
        if (!h.cksumValid)
          return cb2(null, position);
        const entryBlockSize = 512 * Math.ceil(h.size / 512);
        if (position + entryBlockSize + 512 > size)
          return cb2(null, position);
        position += entryBlockSize + 512;
        if (position >= size)
          return cb2(null, position);
        if (opt.mtimeCache)
          opt.mtimeCache.set(h.path, h.mtime);
        bufPos = 0;
        fs17.read(fd, headBuf, 0, 512, position, onread);
      };
      fs17.read(fd, headBuf, 0, 512, position, onread);
    };
    const promise = new Promise((resolve, reject) => {
      p.on("error", reject);
      let flag = "r+";
      const onopen = (er, fd) => {
        if (er && er.code === "ENOENT" && flag === "r+") {
          flag = "w+";
          return fs17.open(opt.file, flag, onopen);
        }
        if (er)
          return reject(er);
        fs17.fstat(fd, (er2, st) => {
          if (er2)
            return reject(er2);
          getPos(fd, st.size, (er3, position) => {
            if (er3)
              return reject(er3);
            const stream = new fsm.WriteStream(opt.file, {
              fd,
              start: position
            });
            p.pipe(stream);
            stream.on("error", reject);
            stream.on("close", resolve);
            addFilesAsync(p, files);
          });
        });
      };
      fs17.open(opt.file, flag, onopen);
    });
    return cb ? promise.then(cb, cb) : promise;
  };
  const addFilesSync = (p, files) => {
    files.forEach((file) => {
      if (file.charAt(0) === "@")
        t({
          file: path19.resolve(p.cwd, file.substr(1)),
          sync: true,
          noResume: true,
          onentry: (entry) => p.add(entry)
        });
      else
        p.add(file);
    });
    p.end();
  };
  const addFilesAsync = (p, files) => {
    while (files.length) {
      const file = files.shift();
      if (file.charAt(0) === "@")
        return t({
          file: path19.resolve(p.cwd, file.substr(1)),
          noResume: true,
          onentry: (entry) => p.add(entry)
        }).then((_2) => addFilesAsync(p, files));
      else
        p.add(file);
    }
    p.end();
  };
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/update.js
var require_update = __commonJS((exports2, module3) => {
  "use strict";
  const hlo = require_high_level_opt();
  const r = require_replace();
  const u = module3.exports = (opt_, files, cb) => {
    const opt = hlo(opt_);
    if (!opt.file)
      throw new TypeError("file is required");
    if (opt.gzip)
      throw new TypeError("cannot append to compressed archives");
    if (!files || !Array.isArray(files) || !files.length)
      throw new TypeError("no files or directories specified");
    files = Array.from(files);
    mtimeFilter(opt);
    return r(opt, files, cb);
  };
  const mtimeFilter = (opt) => {
    const filter = opt.filter;
    if (!opt.mtimeCache)
      opt.mtimeCache = new Map();
    opt.filter = filter ? (path19, stat) => filter(path19, stat) && !(opt.mtimeCache.get(path19) > stat.mtime) : (path19, stat) => !(opt.mtimeCache.get(path19) > stat.mtime);
  };
});

// ../../node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/opts-arg.js
var require_opts_arg = __commonJS((exports2, module3) => {
  const {promisify: promisify3} = require("util");
  const fs17 = require("fs");
  const optsArg = (opts) => {
    if (!opts)
      opts = {mode: 511, fs: fs17};
    else if (typeof opts === "object")
      opts = {mode: 511, fs: fs17, ...opts};
    else if (typeof opts === "number")
      opts = {mode: opts, fs: fs17};
    else if (typeof opts === "string")
      opts = {mode: parseInt(opts, 8), fs: fs17};
    else
      throw new TypeError("invalid options argument");
    opts.mkdir = opts.mkdir || opts.fs.mkdir || fs17.mkdir;
    opts.mkdirAsync = promisify3(opts.mkdir);
    opts.stat = opts.stat || opts.fs.stat || fs17.stat;
    opts.statAsync = promisify3(opts.stat);
    opts.statSync = opts.statSync || opts.fs.statSync || fs17.statSync;
    opts.mkdirSync = opts.mkdirSync || opts.fs.mkdirSync || fs17.mkdirSync;
    return opts;
  };
  module3.exports = optsArg;
});

// ../../node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/path-arg.js
var require_path_arg = __commonJS((exports2, module3) => {
  const platform = process.env.__TESTING_MKDIRP_PLATFORM__ || process.platform;
  const {resolve, parse} = require("path");
  const pathArg = (path19) => {
    if (/\0/.test(path19)) {
      throw Object.assign(new TypeError("path must be a string without null bytes"), {
        path: path19,
        code: "ERR_INVALID_ARG_VALUE"
      });
    }
    path19 = resolve(path19);
    if (platform === "win32") {
      const badWinChars = /[*|"<>?:]/;
      const {root} = parse(path19);
      if (badWinChars.test(path19.substr(root.length))) {
        throw Object.assign(new Error("Illegal characters in path."), {
          path: path19,
          code: "EINVAL"
        });
      }
    }
    return path19;
  };
  module3.exports = pathArg;
});

// ../../node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/find-made.js
var require_find_made = __commonJS((exports2, module3) => {
  const {dirname} = require("path");
  const findMade = (opts, parent, path19 = void 0) => {
    if (path19 === parent)
      return Promise.resolve();
    return opts.statAsync(parent).then((st) => st.isDirectory() ? path19 : void 0, (er) => er.code === "ENOENT" ? findMade(opts, dirname(parent), parent) : void 0);
  };
  const findMadeSync = (opts, parent, path19 = void 0) => {
    if (path19 === parent)
      return void 0;
    try {
      return opts.statSync(parent).isDirectory() ? path19 : void 0;
    } catch (er) {
      return er.code === "ENOENT" ? findMadeSync(opts, dirname(parent), parent) : void 0;
    }
  };
  module3.exports = {findMade, findMadeSync};
});

// ../../node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/mkdirp-manual.js
var require_mkdirp_manual = __commonJS((exports2, module3) => {
  const {dirname} = require("path");
  const mkdirpManual = (path19, opts, made) => {
    opts.recursive = false;
    const parent = dirname(path19);
    if (parent === path19) {
      return opts.mkdirAsync(path19, opts).catch((er) => {
        if (er.code !== "EISDIR")
          throw er;
      });
    }
    return opts.mkdirAsync(path19, opts).then(() => made || path19, (er) => {
      if (er.code === "ENOENT")
        return mkdirpManual(parent, opts).then((made2) => mkdirpManual(path19, opts, made2));
      if (er.code !== "EEXIST" && er.code !== "EROFS")
        throw er;
      return opts.statAsync(path19).then((st) => {
        if (st.isDirectory())
          return made;
        else
          throw er;
      }, () => {
        throw er;
      });
    });
  };
  const mkdirpManualSync = (path19, opts, made) => {
    const parent = dirname(path19);
    opts.recursive = false;
    if (parent === path19) {
      try {
        return opts.mkdirSync(path19, opts);
      } catch (er) {
        if (er.code !== "EISDIR")
          throw er;
        else
          return;
      }
    }
    try {
      opts.mkdirSync(path19, opts);
      return made || path19;
    } catch (er) {
      if (er.code === "ENOENT")
        return mkdirpManualSync(path19, opts, mkdirpManualSync(parent, opts, made));
      if (er.code !== "EEXIST" && er.code !== "EROFS")
        throw er;
      try {
        if (!opts.statSync(path19).isDirectory())
          throw er;
      } catch (_2) {
        throw er;
      }
    }
  };
  module3.exports = {mkdirpManual, mkdirpManualSync};
});

// ../../node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/mkdirp-native.js
var require_mkdirp_native = __commonJS((exports2, module3) => {
  const {dirname} = require("path");
  const {findMade, findMadeSync} = require_find_made();
  const {mkdirpManual, mkdirpManualSync} = require_mkdirp_manual();
  const mkdirpNative = (path19, opts) => {
    opts.recursive = true;
    const parent = dirname(path19);
    if (parent === path19)
      return opts.mkdirAsync(path19, opts);
    return findMade(opts, path19).then((made) => opts.mkdirAsync(path19, opts).then(() => made).catch((er) => {
      if (er.code === "ENOENT")
        return mkdirpManual(path19, opts);
      else
        throw er;
    }));
  };
  const mkdirpNativeSync = (path19, opts) => {
    opts.recursive = true;
    const parent = dirname(path19);
    if (parent === path19)
      return opts.mkdirSync(path19, opts);
    const made = findMadeSync(opts, path19);
    try {
      opts.mkdirSync(path19, opts);
      return made;
    } catch (er) {
      if (er.code === "ENOENT")
        return mkdirpManualSync(path19, opts);
      else
        throw er;
    }
  };
  module3.exports = {mkdirpNative, mkdirpNativeSync};
});

// ../../node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/use-native.js
var require_use_native = __commonJS((exports2, module3) => {
  const fs17 = require("fs");
  const version = process.env.__TESTING_MKDIRP_NODE_VERSION__ || process.version;
  const versArr = version.replace(/^v/, "").split(".");
  const hasNative = +versArr[0] > 10 || +versArr[0] === 10 && +versArr[1] >= 12;
  const useNative = !hasNative ? () => false : (opts) => opts.mkdir === fs17.mkdir;
  const useNativeSync = !hasNative ? () => false : (opts) => opts.mkdirSync === fs17.mkdirSync;
  module3.exports = {useNative, useNativeSync};
});

// ../../node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/index.js
var require_mkdirp = __commonJS((exports2, module3) => {
  const optsArg = require_opts_arg();
  const pathArg = require_path_arg();
  const {mkdirpNative, mkdirpNativeSync} = require_mkdirp_native();
  const {mkdirpManual, mkdirpManualSync} = require_mkdirp_manual();
  const {useNative, useNativeSync} = require_use_native();
  const mkdirp = (path19, opts) => {
    path19 = pathArg(path19);
    opts = optsArg(opts);
    return useNative(opts) ? mkdirpNative(path19, opts) : mkdirpManual(path19, opts);
  };
  const mkdirpSync = (path19, opts) => {
    path19 = pathArg(path19);
    opts = optsArg(opts);
    return useNativeSync(opts) ? mkdirpNativeSync(path19, opts) : mkdirpManualSync(path19, opts);
  };
  mkdirp.sync = mkdirpSync;
  mkdirp.native = (path19, opts) => mkdirpNative(pathArg(path19), optsArg(opts));
  mkdirp.manual = (path19, opts) => mkdirpManual(pathArg(path19), optsArg(opts));
  mkdirp.nativeSync = (path19, opts) => mkdirpNativeSync(pathArg(path19), optsArg(opts));
  mkdirp.manualSync = (path19, opts) => mkdirpManualSync(pathArg(path19), optsArg(opts));
  module3.exports = mkdirp;
});

// ../../node_modules/.pnpm/chownr@2.0.0/node_modules/chownr/chownr.js
var require_chownr = __commonJS((exports2, module3) => {
  "use strict";
  const fs17 = require("fs");
  const path19 = require("path");
  const LCHOWN = fs17.lchown ? "lchown" : "chown";
  const LCHOWNSYNC = fs17.lchownSync ? "lchownSync" : "chownSync";
  const needEISDIRHandled = fs17.lchown && !process.version.match(/v1[1-9]+\./) && !process.version.match(/v10\.[6-9]/);
  const lchownSync = (path20, uid, gid) => {
    try {
      return fs17[LCHOWNSYNC](path20, uid, gid);
    } catch (er) {
      if (er.code !== "ENOENT")
        throw er;
    }
  };
  const chownSync = (path20, uid, gid) => {
    try {
      return fs17.chownSync(path20, uid, gid);
    } catch (er) {
      if (er.code !== "ENOENT")
        throw er;
    }
  };
  const handleEISDIR = needEISDIRHandled ? (path20, uid, gid, cb) => (er) => {
    if (!er || er.code !== "EISDIR")
      cb(er);
    else
      fs17.chown(path20, uid, gid, cb);
  } : (_2, __, ___, cb) => cb;
  const handleEISDirSync = needEISDIRHandled ? (path20, uid, gid) => {
    try {
      return lchownSync(path20, uid, gid);
    } catch (er) {
      if (er.code !== "EISDIR")
        throw er;
      chownSync(path20, uid, gid);
    }
  } : (path20, uid, gid) => lchownSync(path20, uid, gid);
  const nodeVersion = process.version;
  let readdir = (path20, options, cb) => fs17.readdir(path20, options, cb);
  let readdirSync = (path20, options) => fs17.readdirSync(path20, options);
  if (/^v4\./.test(nodeVersion))
    readdir = (path20, options, cb) => fs17.readdir(path20, cb);
  const chown = (cpath, uid, gid, cb) => {
    fs17[LCHOWN](cpath, uid, gid, handleEISDIR(cpath, uid, gid, (er) => {
      cb(er && er.code !== "ENOENT" ? er : null);
    }));
  };
  const chownrKid = (p, child, uid, gid, cb) => {
    if (typeof child === "string")
      return fs17.lstat(path19.resolve(p, child), (er, stats) => {
        if (er)
          return cb(er.code !== "ENOENT" ? er : null);
        stats.name = child;
        chownrKid(p, stats, uid, gid, cb);
      });
    if (child.isDirectory()) {
      chownr(path19.resolve(p, child.name), uid, gid, (er) => {
        if (er)
          return cb(er);
        const cpath = path19.resolve(p, child.name);
        chown(cpath, uid, gid, cb);
      });
    } else {
      const cpath = path19.resolve(p, child.name);
      chown(cpath, uid, gid, cb);
    }
  };
  const chownr = (p, uid, gid, cb) => {
    readdir(p, {withFileTypes: true}, (er, children) => {
      if (er) {
        if (er.code === "ENOENT")
          return cb();
        else if (er.code !== "ENOTDIR" && er.code !== "ENOTSUP")
          return cb(er);
      }
      if (er || !children.length)
        return chown(p, uid, gid, cb);
      let len = children.length;
      let errState = null;
      const then = (er2) => {
        if (errState)
          return;
        if (er2)
          return cb(errState = er2);
        if (--len === 0)
          return chown(p, uid, gid, cb);
      };
      children.forEach((child) => chownrKid(p, child, uid, gid, then));
    });
  };
  const chownrKidSync = (p, child, uid, gid) => {
    if (typeof child === "string") {
      try {
        const stats = fs17.lstatSync(path19.resolve(p, child));
        stats.name = child;
        child = stats;
      } catch (er) {
        if (er.code === "ENOENT")
          return;
        else
          throw er;
      }
    }
    if (child.isDirectory())
      chownrSync(path19.resolve(p, child.name), uid, gid);
    handleEISDirSync(path19.resolve(p, child.name), uid, gid);
  };
  const chownrSync = (p, uid, gid) => {
    let children;
    try {
      children = readdirSync(p, {withFileTypes: true});
    } catch (er) {
      if (er.code === "ENOENT")
        return;
      else if (er.code === "ENOTDIR" || er.code === "ENOTSUP")
        return handleEISDirSync(p, uid, gid);
      else
        throw er;
    }
    if (children && children.length)
      children.forEach((child) => chownrKidSync(p, child, uid, gid));
    return handleEISDirSync(p, uid, gid);
  };
  module3.exports = chownr;
  chownr.sync = chownrSync;
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/mkdir.js
var require_mkdir = __commonJS((exports2, module3) => {
  "use strict";
  const mkdirp = require_mkdirp();
  const fs17 = require("fs");
  const path19 = require("path");
  const chownr = require_chownr();
  class SymlinkError extends Error {
    constructor(symlink, path20) {
      super("Cannot extract through symbolic link");
      this.path = path20;
      this.symlink = symlink;
    }
    get name() {
      return "SylinkError";
    }
  }
  class CwdError extends Error {
    constructor(path20, code) {
      super(code + ": Cannot cd into '" + path20 + "'");
      this.path = path20;
      this.code = code;
    }
    get name() {
      return "CwdError";
    }
  }
  const mkdir = module3.exports = (dir, opt, cb) => {
    const umask = opt.umask;
    const mode = opt.mode | 448;
    const needChmod = (mode & umask) !== 0;
    const uid = opt.uid;
    const gid = opt.gid;
    const doChown = typeof uid === "number" && typeof gid === "number" && (uid !== opt.processUid || gid !== opt.processGid);
    const preserve = opt.preserve;
    const unlink = opt.unlink;
    const cache = opt.cache;
    const cwd = opt.cwd;
    const done = (er, created) => {
      if (er)
        cb(er);
      else {
        cache.set(dir, true);
        if (created && doChown)
          chownr(created, uid, gid, (er2) => done(er2));
        else if (needChmod)
          fs17.chmod(dir, mode, cb);
        else
          cb();
      }
    };
    if (cache && cache.get(dir) === true)
      return done();
    if (dir === cwd)
      return fs17.stat(dir, (er, st) => {
        if (er || !st.isDirectory())
          er = new CwdError(dir, er && er.code || "ENOTDIR");
        done(er);
      });
    if (preserve)
      return mkdirp(dir, {mode}).then((made) => done(null, made), done);
    const sub = path19.relative(cwd, dir);
    const parts = sub.split(/\/|\\/);
    mkdir_(cwd, parts, mode, cache, unlink, cwd, null, done);
  };
  const mkdir_ = (base, parts, mode, cache, unlink, cwd, created, cb) => {
    if (!parts.length)
      return cb(null, created);
    const p = parts.shift();
    const part = base + "/" + p;
    if (cache.get(part))
      return mkdir_(part, parts, mode, cache, unlink, cwd, created, cb);
    fs17.mkdir(part, mode, onmkdir(part, parts, mode, cache, unlink, cwd, created, cb));
  };
  const onmkdir = (part, parts, mode, cache, unlink, cwd, created, cb) => (er) => {
    if (er) {
      if (er.path && path19.dirname(er.path) === cwd && (er.code === "ENOTDIR" || er.code === "ENOENT"))
        return cb(new CwdError(cwd, er.code));
      fs17.lstat(part, (statEr, st) => {
        if (statEr)
          cb(statEr);
        else if (st.isDirectory())
          mkdir_(part, parts, mode, cache, unlink, cwd, created, cb);
        else if (unlink)
          fs17.unlink(part, (er2) => {
            if (er2)
              return cb(er2);
            fs17.mkdir(part, mode, onmkdir(part, parts, mode, cache, unlink, cwd, created, cb));
          });
        else if (st.isSymbolicLink())
          return cb(new SymlinkError(part, part + "/" + parts.join("/")));
        else
          cb(er);
      });
    } else {
      created = created || part;
      mkdir_(part, parts, mode, cache, unlink, cwd, created, cb);
    }
  };
  const mkdirSync = module3.exports.sync = (dir, opt) => {
    const umask = opt.umask;
    const mode = opt.mode | 448;
    const needChmod = (mode & umask) !== 0;
    const uid = opt.uid;
    const gid = opt.gid;
    const doChown = typeof uid === "number" && typeof gid === "number" && (uid !== opt.processUid || gid !== opt.processGid);
    const preserve = opt.preserve;
    const unlink = opt.unlink;
    const cache = opt.cache;
    const cwd = opt.cwd;
    const done = (created2) => {
      cache.set(dir, true);
      if (created2 && doChown)
        chownr.sync(created2, uid, gid);
      if (needChmod)
        fs17.chmodSync(dir, mode);
    };
    if (cache && cache.get(dir) === true)
      return done();
    if (dir === cwd) {
      let ok = false;
      let code = "ENOTDIR";
      try {
        ok = fs17.statSync(dir).isDirectory();
      } catch (er) {
        code = er.code;
      } finally {
        if (!ok)
          throw new CwdError(dir, code);
      }
      done();
      return;
    }
    if (preserve)
      return done(mkdirp.sync(dir, mode));
    const sub = path19.relative(cwd, dir);
    const parts = sub.split(/\/|\\/);
    let created = null;
    for (let p = parts.shift(), part = cwd; p && (part += "/" + p); p = parts.shift()) {
      if (cache.get(part))
        continue;
      try {
        fs17.mkdirSync(part, mode);
        created = created || part;
        cache.set(part, true);
      } catch (er) {
        if (er.path && path19.dirname(er.path) === cwd && (er.code === "ENOTDIR" || er.code === "ENOENT"))
          return new CwdError(cwd, er.code);
        const st = fs17.lstatSync(part);
        if (st.isDirectory()) {
          cache.set(part, true);
          continue;
        } else if (unlink) {
          fs17.unlinkSync(part);
          fs17.mkdirSync(part, mode);
          created = created || part;
          cache.set(part, true);
          continue;
        } else if (st.isSymbolicLink())
          return new SymlinkError(part, part + "/" + parts.join("/"));
      }
    }
    return done(created);
  };
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/path-reservations.js
var require_path_reservations = __commonJS((exports2, module3) => {
  const assert = require("assert");
  module3.exports = () => {
    const queues = new Map();
    const reservations = new Map();
    const {join} = require("path");
    const getDirs = (path19) => join(path19).split(/[\\\/]/).slice(0, -1).reduce((set, path20) => set.length ? set.concat(join(set[set.length - 1], path20)) : [path20], []);
    const running = new Set();
    const getQueues = (fn) => {
      const res = reservations.get(fn);
      if (!res)
        throw new Error("function does not have any path reservations");
      return {
        paths: res.paths.map((path19) => queues.get(path19)),
        dirs: [...res.dirs].map((path19) => queues.get(path19))
      };
    };
    const check2 = (fn) => {
      const {paths, dirs} = getQueues(fn);
      return paths.every((q) => q[0] === fn) && dirs.every((q) => q[0] instanceof Set && q[0].has(fn));
    };
    const run = (fn) => {
      if (running.has(fn) || !check2(fn))
        return false;
      running.add(fn);
      fn(() => clear(fn));
      return true;
    };
    const clear = (fn) => {
      if (!running.has(fn))
        return false;
      const {paths, dirs} = reservations.get(fn);
      const next = new Set();
      paths.forEach((path19) => {
        const q = queues.get(path19);
        assert.equal(q[0], fn);
        if (q.length === 1)
          queues.delete(path19);
        else {
          q.shift();
          if (typeof q[0] === "function")
            next.add(q[0]);
          else
            q[0].forEach((fn2) => next.add(fn2));
        }
      });
      dirs.forEach((dir) => {
        const q = queues.get(dir);
        assert(q[0] instanceof Set);
        if (q[0].size === 1 && q.length === 1) {
          queues.delete(dir);
        } else if (q[0].size === 1) {
          q.shift();
          next.add(q[0]);
        } else
          q[0].delete(fn);
      });
      running.delete(fn);
      next.forEach((fn2) => run(fn2));
      return true;
    };
    const reserve = (paths, fn) => {
      const dirs = new Set(paths.map((path19) => getDirs(path19)).reduce((a, b) => a.concat(b)));
      reservations.set(fn, {dirs, paths});
      paths.forEach((path19) => {
        const q = queues.get(path19);
        if (!q)
          queues.set(path19, [fn]);
        else
          q.push(fn);
      });
      dirs.forEach((dir) => {
        const q = queues.get(dir);
        if (!q)
          queues.set(dir, [new Set([fn])]);
        else if (q[q.length - 1] instanceof Set)
          q[q.length - 1].add(fn);
        else
          q.push(new Set([fn]));
      });
      return run(fn);
    };
    return {check: check2, reserve};
  };
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/get-write-flag.js
var require_get_write_flag = __commonJS((exports2, module3) => {
  const platform = process.env.__FAKE_PLATFORM__ || process.platform;
  const isWindows = platform === "win32";
  const fs17 = global.__FAKE_TESTING_FS__ || require("fs");
  const {O_CREAT, O_TRUNC, O_WRONLY, UV_FS_O_FILEMAP = 0} = fs17.constants;
  const fMapEnabled = isWindows && !!UV_FS_O_FILEMAP;
  const fMapLimit = 512 * 1024;
  const fMapFlag = UV_FS_O_FILEMAP | O_TRUNC | O_CREAT | O_WRONLY;
  module3.exports = !fMapEnabled ? () => "w" : (size) => size < fMapLimit ? fMapFlag : "w";
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/unpack.js
var require_unpack = __commonJS((exports2, module3) => {
  "use strict";
  const assert = require("assert");
  const EE = require("events").EventEmitter;
  const Parser = require_parse4();
  const fs17 = require("fs");
  const fsm = require_fs_minipass();
  const path19 = require("path");
  const mkdir = require_mkdir();
  const mkdirSync = mkdir.sync;
  const wc = require_winchars();
  const pathReservations = require_path_reservations();
  const ONENTRY = Symbol("onEntry");
  const CHECKFS = Symbol("checkFs");
  const CHECKFS2 = Symbol("checkFs2");
  const ISREUSABLE = Symbol("isReusable");
  const MAKEFS = Symbol("makeFs");
  const FILE = Symbol("file");
  const DIRECTORY = Symbol("directory");
  const LINK = Symbol("link");
  const SYMLINK = Symbol("symlink");
  const HARDLINK = Symbol("hardlink");
  const UNSUPPORTED = Symbol("unsupported");
  const UNKNOWN = Symbol("unknown");
  const CHECKPATH = Symbol("checkPath");
  const MKDIR = Symbol("mkdir");
  const ONERROR = Symbol("onError");
  const PENDING = Symbol("pending");
  const PEND = Symbol("pend");
  const UNPEND = Symbol("unpend");
  const ENDED = Symbol("ended");
  const MAYBECLOSE = Symbol("maybeClose");
  const SKIP = Symbol("skip");
  const DOCHOWN = Symbol("doChown");
  const UID = Symbol("uid");
  const GID = Symbol("gid");
  const crypto = require("crypto");
  const getFlag = require_get_write_flag();
  const neverCalled = () => {
    throw new Error("sync function called cb somehow?!?");
  };
  const unlinkFile = (path20, cb) => {
    if (process.platform !== "win32")
      return fs17.unlink(path20, cb);
    const name = path20 + ".DELETE." + crypto.randomBytes(16).toString("hex");
    fs17.rename(path20, name, (er) => {
      if (er)
        return cb(er);
      fs17.unlink(name, cb);
    });
  };
  const unlinkFileSync = (path20) => {
    if (process.platform !== "win32")
      return fs17.unlinkSync(path20);
    const name = path20 + ".DELETE." + crypto.randomBytes(16).toString("hex");
    fs17.renameSync(path20, name);
    fs17.unlinkSync(name);
  };
  const uint32 = (a, b, c) => a === a >>> 0 ? a : b === b >>> 0 ? b : c;
  class Unpack extends Parser {
    constructor(opt) {
      if (!opt)
        opt = {};
      opt.ondone = (_2) => {
        this[ENDED] = true;
        this[MAYBECLOSE]();
      };
      super(opt);
      this.reservations = pathReservations();
      this.transform = typeof opt.transform === "function" ? opt.transform : null;
      this.writable = true;
      this.readable = false;
      this[PENDING] = 0;
      this[ENDED] = false;
      this.dirCache = opt.dirCache || new Map();
      if (typeof opt.uid === "number" || typeof opt.gid === "number") {
        if (typeof opt.uid !== "number" || typeof opt.gid !== "number")
          throw new TypeError("cannot set owner without number uid and gid");
        if (opt.preserveOwner)
          throw new TypeError("cannot preserve owner in archive and also set owner explicitly");
        this.uid = opt.uid;
        this.gid = opt.gid;
        this.setOwner = true;
      } else {
        this.uid = null;
        this.gid = null;
        this.setOwner = false;
      }
      if (opt.preserveOwner === void 0 && typeof opt.uid !== "number")
        this.preserveOwner = process.getuid && process.getuid() === 0;
      else
        this.preserveOwner = !!opt.preserveOwner;
      this.processUid = (this.preserveOwner || this.setOwner) && process.getuid ? process.getuid() : null;
      this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ? process.getgid() : null;
      this.forceChown = opt.forceChown === true;
      this.win32 = !!opt.win32 || process.platform === "win32";
      this.newer = !!opt.newer;
      this.keep = !!opt.keep;
      this.noMtime = !!opt.noMtime;
      this.preservePaths = !!opt.preservePaths;
      this.unlink = !!opt.unlink;
      this.cwd = path19.resolve(opt.cwd || process.cwd());
      this.strip = +opt.strip || 0;
      this.processUmask = process.umask();
      this.umask = typeof opt.umask === "number" ? opt.umask : this.processUmask;
      this.dmode = opt.dmode || 511 & ~this.umask;
      this.fmode = opt.fmode || 438 & ~this.umask;
      this.on("entry", (entry) => this[ONENTRY](entry));
    }
    warn(code, msg, data = {}) {
      if (code === "TAR_BAD_ARCHIVE" || code === "TAR_ABORT")
        data.recoverable = false;
      return super.warn(code, msg, data);
    }
    [MAYBECLOSE]() {
      if (this[ENDED] && this[PENDING] === 0) {
        this.emit("prefinish");
        this.emit("finish");
        this.emit("end");
        this.emit("close");
      }
    }
    [CHECKPATH](entry) {
      if (this.strip) {
        const parts = entry.path.split(/\/|\\/);
        if (parts.length < this.strip)
          return false;
        entry.path = parts.slice(this.strip).join("/");
        if (entry.type === "Link") {
          const linkparts = entry.linkpath.split(/\/|\\/);
          if (linkparts.length >= this.strip)
            entry.linkpath = linkparts.slice(this.strip).join("/");
        }
      }
      if (!this.preservePaths) {
        const p = entry.path;
        if (p.match(/(^|\/|\\)\.\.(\\|\/|$)/)) {
          this.warn("TAR_ENTRY_ERROR", `path contains '..'`, {
            entry,
            path: p
          });
          return false;
        }
        if (path19.win32.isAbsolute(p)) {
          const parsed = path19.win32.parse(p);
          entry.path = p.substr(parsed.root.length);
          const r = parsed.root;
          this.warn("TAR_ENTRY_INFO", `stripping ${r} from absolute path`, {
            entry,
            path: p
          });
        }
      }
      if (this.win32) {
        const parsed = path19.win32.parse(entry.path);
        entry.path = parsed.root === "" ? wc.encode(entry.path) : parsed.root + wc.encode(entry.path.substr(parsed.root.length));
      }
      if (path19.isAbsolute(entry.path))
        entry.absolute = entry.path;
      else
        entry.absolute = path19.resolve(this.cwd, entry.path);
      return true;
    }
    [ONENTRY](entry) {
      if (!this[CHECKPATH](entry))
        return entry.resume();
      assert.equal(typeof entry.absolute, "string");
      switch (entry.type) {
        case "Directory":
        case "GNUDumpDir":
          if (entry.mode)
            entry.mode = entry.mode | 448;
        case "File":
        case "OldFile":
        case "ContiguousFile":
        case "Link":
        case "SymbolicLink":
          return this[CHECKFS](entry);
        case "CharacterDevice":
        case "BlockDevice":
        case "FIFO":
          return this[UNSUPPORTED](entry);
      }
    }
    [ONERROR](er, entry) {
      if (er.name === "CwdError")
        this.emit("error", er);
      else {
        this.warn("TAR_ENTRY_ERROR", er, {entry});
        this[UNPEND]();
        entry.resume();
      }
    }
    [MKDIR](dir, mode, cb) {
      mkdir(dir, {
        uid: this.uid,
        gid: this.gid,
        processUid: this.processUid,
        processGid: this.processGid,
        umask: this.processUmask,
        preserve: this.preservePaths,
        unlink: this.unlink,
        cache: this.dirCache,
        cwd: this.cwd,
        mode
      }, cb);
    }
    [DOCHOWN](entry) {
      return this.forceChown || this.preserveOwner && (typeof entry.uid === "number" && entry.uid !== this.processUid || typeof entry.gid === "number" && entry.gid !== this.processGid) || (typeof this.uid === "number" && this.uid !== this.processUid || typeof this.gid === "number" && this.gid !== this.processGid);
    }
    [UID](entry) {
      return uint32(this.uid, entry.uid, this.processUid);
    }
    [GID](entry) {
      return uint32(this.gid, entry.gid, this.processGid);
    }
    [FILE](entry, fullyDone) {
      const mode = entry.mode & 4095 || this.fmode;
      const stream = new fsm.WriteStream(entry.absolute, {
        flags: getFlag(entry.size),
        mode,
        autoClose: false
      });
      stream.on("error", (er) => this[ONERROR](er, entry));
      let actions = 1;
      const done = (er) => {
        if (er)
          return this[ONERROR](er, entry);
        if (--actions === 0) {
          fs17.close(stream.fd, (er2) => {
            fullyDone();
            er2 ? this[ONERROR](er2, entry) : this[UNPEND]();
          });
        }
      };
      stream.on("finish", (_2) => {
        const abs = entry.absolute;
        const fd = stream.fd;
        if (entry.mtime && !this.noMtime) {
          actions++;
          const atime = entry.atime || new Date();
          const mtime = entry.mtime;
          fs17.futimes(fd, atime, mtime, (er) => er ? fs17.utimes(abs, atime, mtime, (er2) => done(er2 && er)) : done());
        }
        if (this[DOCHOWN](entry)) {
          actions++;
          const uid = this[UID](entry);
          const gid = this[GID](entry);
          fs17.fchown(fd, uid, gid, (er) => er ? fs17.chown(abs, uid, gid, (er2) => done(er2 && er)) : done());
        }
        done();
      });
      const tx = this.transform ? this.transform(entry) || entry : entry;
      if (tx !== entry) {
        tx.on("error", (er) => this[ONERROR](er, entry));
        entry.pipe(tx);
      }
      tx.pipe(stream);
    }
    [DIRECTORY](entry, fullyDone) {
      const mode = entry.mode & 4095 || this.dmode;
      this[MKDIR](entry.absolute, mode, (er) => {
        if (er) {
          fullyDone();
          return this[ONERROR](er, entry);
        }
        let actions = 1;
        const done = (_2) => {
          if (--actions === 0) {
            fullyDone();
            this[UNPEND]();
            entry.resume();
          }
        };
        if (entry.mtime && !this.noMtime) {
          actions++;
          fs17.utimes(entry.absolute, entry.atime || new Date(), entry.mtime, done);
        }
        if (this[DOCHOWN](entry)) {
          actions++;
          fs17.chown(entry.absolute, this[UID](entry), this[GID](entry), done);
        }
        done();
      });
    }
    [UNSUPPORTED](entry) {
      entry.unsupported = true;
      this.warn("TAR_ENTRY_UNSUPPORTED", `unsupported entry type: ${entry.type}`, {entry});
      entry.resume();
    }
    [SYMLINK](entry, done) {
      this[LINK](entry, entry.linkpath, "symlink", done);
    }
    [HARDLINK](entry, done) {
      this[LINK](entry, path19.resolve(this.cwd, entry.linkpath), "link", done);
    }
    [PEND]() {
      this[PENDING]++;
    }
    [UNPEND]() {
      this[PENDING]--;
      this[MAYBECLOSE]();
    }
    [SKIP](entry) {
      this[UNPEND]();
      entry.resume();
    }
    [ISREUSABLE](entry, st) {
      return entry.type === "File" && !this.unlink && st.isFile() && st.nlink <= 1 && process.platform !== "win32";
    }
    [CHECKFS](entry) {
      this[PEND]();
      const paths = [entry.path];
      if (entry.linkpath)
        paths.push(entry.linkpath);
      this.reservations.reserve(paths, (done) => this[CHECKFS2](entry, done));
    }
    [CHECKFS2](entry, done) {
      this[MKDIR](path19.dirname(entry.absolute), this.dmode, (er) => {
        if (er) {
          done();
          return this[ONERROR](er, entry);
        }
        fs17.lstat(entry.absolute, (er2, st) => {
          if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {
            this[SKIP](entry);
            done();
          } else if (er2 || this[ISREUSABLE](entry, st)) {
            this[MAKEFS](null, entry, done);
          } else if (st.isDirectory()) {
            if (entry.type === "Directory") {
              if (!entry.mode || (st.mode & 4095) === entry.mode)
                this[MAKEFS](null, entry, done);
              else
                fs17.chmod(entry.absolute, entry.mode, (er3) => this[MAKEFS](er3, entry, done));
            } else
              fs17.rmdir(entry.absolute, (er3) => this[MAKEFS](er3, entry, done));
          } else
            unlinkFile(entry.absolute, (er3) => this[MAKEFS](er3, entry, done));
        });
      });
    }
    [MAKEFS](er, entry, done) {
      if (er)
        return this[ONERROR](er, entry);
      switch (entry.type) {
        case "File":
        case "OldFile":
        case "ContiguousFile":
          return this[FILE](entry, done);
        case "Link":
          return this[HARDLINK](entry, done);
        case "SymbolicLink":
          return this[SYMLINK](entry, done);
        case "Directory":
        case "GNUDumpDir":
          return this[DIRECTORY](entry, done);
      }
    }
    [LINK](entry, linkpath, link5, done) {
      fs17[link5](linkpath, entry.absolute, (er) => {
        if (er)
          return this[ONERROR](er, entry);
        done();
        this[UNPEND]();
        entry.resume();
      });
    }
  }
  class UnpackSync extends Unpack {
    constructor(opt) {
      super(opt);
    }
    [CHECKFS](entry) {
      const er = this[MKDIR](path19.dirname(entry.absolute), this.dmode, neverCalled);
      if (er)
        return this[ONERROR](er, entry);
      try {
        const st = fs17.lstatSync(entry.absolute);
        if (this.keep || this.newer && st.mtime > entry.mtime)
          return this[SKIP](entry);
        else if (this[ISREUSABLE](entry, st))
          return this[MAKEFS](null, entry, neverCalled);
        else {
          try {
            if (st.isDirectory()) {
              if (entry.type === "Directory") {
                if (entry.mode && (st.mode & 4095) !== entry.mode)
                  fs17.chmodSync(entry.absolute, entry.mode);
              } else
                fs17.rmdirSync(entry.absolute);
            } else
              unlinkFileSync(entry.absolute);
            return this[MAKEFS](null, entry, neverCalled);
          } catch (er2) {
            return this[ONERROR](er2, entry);
          }
        }
      } catch (er2) {
        return this[MAKEFS](null, entry, neverCalled);
      }
    }
    [FILE](entry, _2) {
      const mode = entry.mode & 4095 || this.fmode;
      const oner = (er) => {
        let closeError;
        try {
          fs17.closeSync(fd);
        } catch (e) {
          closeError = e;
        }
        if (er || closeError)
          this[ONERROR](er || closeError, entry);
      };
      let stream;
      let fd;
      try {
        fd = fs17.openSync(entry.absolute, getFlag(entry.size), mode);
      } catch (er) {
        return oner(er);
      }
      const tx = this.transform ? this.transform(entry) || entry : entry;
      if (tx !== entry) {
        tx.on("error", (er) => this[ONERROR](er, entry));
        entry.pipe(tx);
      }
      tx.on("data", (chunk) => {
        try {
          fs17.writeSync(fd, chunk, 0, chunk.length);
        } catch (er) {
          oner(er);
        }
      });
      tx.on("end", (_3) => {
        let er = null;
        if (entry.mtime && !this.noMtime) {
          const atime = entry.atime || new Date();
          const mtime = entry.mtime;
          try {
            fs17.futimesSync(fd, atime, mtime);
          } catch (futimeser) {
            try {
              fs17.utimesSync(entry.absolute, atime, mtime);
            } catch (utimeser) {
              er = futimeser;
            }
          }
        }
        if (this[DOCHOWN](entry)) {
          const uid = this[UID](entry);
          const gid = this[GID](entry);
          try {
            fs17.fchownSync(fd, uid, gid);
          } catch (fchowner) {
            try {
              fs17.chownSync(entry.absolute, uid, gid);
            } catch (chowner) {
              er = er || fchowner;
            }
          }
        }
        oner(er);
      });
    }
    [DIRECTORY](entry, _2) {
      const mode = entry.mode & 4095 || this.dmode;
      const er = this[MKDIR](entry.absolute, mode);
      if (er)
        return this[ONERROR](er, entry);
      if (entry.mtime && !this.noMtime) {
        try {
          fs17.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime);
        } catch (er2) {
        }
      }
      if (this[DOCHOWN](entry)) {
        try {
          fs17.chownSync(entry.absolute, this[UID](entry), this[GID](entry));
        } catch (er2) {
        }
      }
      entry.resume();
    }
    [MKDIR](dir, mode) {
      try {
        return mkdir.sync(dir, {
          uid: this.uid,
          gid: this.gid,
          processUid: this.processUid,
          processGid: this.processGid,
          umask: this.processUmask,
          preserve: this.preservePaths,
          unlink: this.unlink,
          cache: this.dirCache,
          cwd: this.cwd,
          mode
        });
      } catch (er) {
        return er;
      }
    }
    [LINK](entry, linkpath, link5, _2) {
      try {
        fs17[link5 + "Sync"](linkpath, entry.absolute);
        entry.resume();
      } catch (er) {
        return this[ONERROR](er, entry);
      }
    }
  }
  Unpack.Sync = UnpackSync;
  module3.exports = Unpack;
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/lib/extract.js
var require_extract = __commonJS((exports2, module3) => {
  "use strict";
  const hlo = require_high_level_opt();
  const Unpack = require_unpack();
  const fs17 = require("fs");
  const fsm = require_fs_minipass();
  const path19 = require("path");
  const x = module3.exports = (opt_, files, cb) => {
    if (typeof opt_ === "function")
      cb = opt_, files = null, opt_ = {};
    else if (Array.isArray(opt_))
      files = opt_, opt_ = {};
    if (typeof files === "function")
      cb = files, files = null;
    if (!files)
      files = [];
    else
      files = Array.from(files);
    const opt = hlo(opt_);
    if (opt.sync && typeof cb === "function")
      throw new TypeError("callback not supported for sync tar functions");
    if (!opt.file && typeof cb === "function")
      throw new TypeError("callback only supported with file option");
    if (files.length)
      filesFilter(opt, files);
    return opt.file && opt.sync ? extractFileSync(opt) : opt.file ? extractFile(opt, cb) : opt.sync ? extractSync(opt) : extract(opt);
  };
  const filesFilter = (opt, files) => {
    const map = new Map(files.map((f) => [f.replace(/\/+$/, ""), true]));
    const filter = opt.filter;
    const mapHas = (file, r) => {
      const root = r || path19.parse(file).root || ".";
      const ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path19.dirname(file), root);
      map.set(file, ret);
      return ret;
    };
    opt.filter = filter ? (file, entry) => filter(file, entry) && mapHas(file.replace(/\/+$/, "")) : (file) => mapHas(file.replace(/\/+$/, ""));
  };
  const extractFileSync = (opt) => {
    const u = new Unpack.Sync(opt);
    const file = opt.file;
    let threw = true;
    let fd;
    const stat = fs17.statSync(file);
    const readSize = opt.maxReadSize || 16 * 1024 * 1024;
    const stream = new fsm.ReadStreamSync(file, {
      readSize,
      size: stat.size
    });
    stream.pipe(u);
  };
  const extractFile = (opt, cb) => {
    const u = new Unpack(opt);
    const readSize = opt.maxReadSize || 16 * 1024 * 1024;
    const file = opt.file;
    const p = new Promise((resolve, reject) => {
      u.on("error", reject);
      u.on("close", resolve);
      fs17.stat(file, (er, stat) => {
        if (er)
          reject(er);
        else {
          const stream = new fsm.ReadStream(file, {
            readSize,
            size: stat.size
          });
          stream.on("error", reject);
          stream.pipe(u);
        }
      });
    });
    return cb ? p.then(cb, cb) : p;
  };
  const extractSync = (opt) => {
    return new Unpack.Sync(opt);
  };
  const extract = (opt) => {
    return new Unpack(opt);
  };
});

// ../../node_modules/.pnpm/tar@6.0.2/node_modules/tar/index.js
var require_tar = __commonJS((exports2) => {
  "use strict";
  exports2.c = exports2.create = require_create();
  exports2.r = exports2.replace = require_replace();
  exports2.t = exports2.list = require_list();
  exports2.u = exports2.update = require_update();
  exports2.x = exports2.extract = require_extract();
  exports2.Pack = require_pack();
  exports2.Unpack = require_unpack();
  exports2.Parse = require_parse4();
  exports2.ReadEntry = require_read_entry();
  exports2.WriteEntry = require_write_entry();
  exports2.Header = require_header();
  exports2.Pax = require_pax();
  exports2.types = require_types2();
});

// ../../node_modules/.pnpm/prettysize@2.0.0/node_modules/prettysize/index.js
var require_prettysize = __commonJS((exports2, module3) => {
  "use strict";
  var sizes = [
    "Bytes",
    "kB",
    "MB",
    "GB",
    "TB",
    "PB",
    "EB"
  ];
  module3.exports = function(size, nospace, one, places, numOnly) {
    if (typeof nospace === "object") {
      var opts = nospace;
      nospace = opts.nospace;
      one = opts.one;
      places = opts.places || 1;
      numOnly = opts.numOnly;
    } else {
      places = places || 1;
    }
    var mysize;
    for (var id = 0; id < sizes.length; ++id) {
      var unit = sizes[id];
      if (one) {
        unit = unit.slice(0, 1);
      }
      var s = Math.pow(1024, id);
      var fixed;
      if (size >= s) {
        fixed = String((size / s).toFixed(places));
        if (fixed.indexOf(".0") === fixed.length - 2) {
          fixed = fixed.slice(0, -2);
        }
        mysize = fixed + (nospace ? "" : " ") + unit;
      }
    }
    if (!mysize) {
      var _unit = one ? sizes[0].slice(0, 1) : sizes[0];
      mysize = "0" + (nospace ? "" : " ") + _unit;
    }
    if (numOnly) {
      mysize = Number.parseFloat(mysize);
    }
    return mysize;
  };
});

// ../../node_modules/.pnpm/@timsuchanek/sleep-promise@8.0.1/node_modules/@timsuchanek/sleep-promise/build/cjs.js
var require_cjs = __commonJS((exports2, module3) => {
  "use strict";
  var cachedSetTimeout = setTimeout;
  function createSleepPromise(a, b) {
    var c = b.useCachedSetTimeout, d = c ? cachedSetTimeout : setTimeout;
    return new Promise(function(b2) {
      d(b2, a);
    });
  }
  function sleep(a) {
    function b(a2) {
      return e.then(function() {
        return a2;
      });
    }
    var c = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {}, d = c.useCachedSetTimeout, e = createSleepPromise(a, {useCachedSetTimeout: d});
    return b.then = function() {
      return e.then.apply(e, arguments);
    }, b.catch = Promise.resolve().catch, b;
  }
  module3.exports = sleep;
});

// ../../node_modules/.pnpm/@timsuchanek/copy@1.4.5/node_modules/@timsuchanek/copy/index.js
var require_copy2 = __commonJS((exports2, module3) => {
  const fs17 = require("fs");
  const path19 = require("path");
  const {promisify: promisify3} = require("util");
  const readFile2 = promisify3(fs17.readFile);
  const writeFile = promisify3(fs17.writeFile);
  const mkdir = promisify3(fs17.mkdir);
  const mkdirp = require_mkdirp();
  const pretty = require_prettysize();
  const sleep = require_cjs();
  const assert = require("assert");
  class Copy {
    constructor(options = {}) {
      this.from = path19.normalize(options.from);
      this.to = path19.normalize(options.to);
      this.recursive = options.recursive || false;
      this.overwrite = options.overwrite || false;
      this.overwriteMismatches = options.overwriteMismatches || false;
      this.verbose = options.verbose || false;
      this.json = options.json || false;
      this.ignoreErrors = options.ignoreErrors || false;
      this.parallelJobs = options.parallelJobs || 1;
      this.stateFile = options.state;
      this.stateFrequency = options.stateFrequency || 100;
      this.fns = {
        stat: promisify3(options.stat || fs17.stat),
        readdir: promisify3(options.readdir || fs17.readdir),
        copyFile: promisify3(options.copyFile || fs17.copyFile)
      };
      this.stateCatchUp = 0;
      this.state = {
        wip: [],
        counts: {
          directories: 0,
          files: 0,
          copies: 0
        }
      };
      this.pending = [];
      this.errors = [];
      assert.equal(typeof this.from, "string", "from should be a string");
      assert.equal(typeof this.to, "string", "to should be a string");
      assert.equal(typeof this.parallelJobs, "number", "parallelJobs should be a number");
      assert.equal(typeof this.stateFrequency, "number", "stateFrequency should be a number");
      assert.equal(typeof this.fns.stat, "function", "stat should be a function");
      assert.equal(typeof this.fns.readdir, "function", "readdir should be a function");
      assert.equal(typeof this.fns.copyFile, "function", "copyFile should be a function");
    }
    async start() {
      try {
        await this.loadState();
        if ((await this.fns.stat(this.from)).isDirectory()) {
          await mkdirp(this.to);
        } else {
          const basedir = path19.dirname(this.to);
          await mkdirp(basedir);
        }
        await this.copy(this.from, this.to);
        while (this.pending.length > 0) {
          await sleep(10);
        }
        await this.processJobErrors();
        await this.saveState();
        if (this.state.wip.length) {
          throw new Error("Incomplete `wip` found. Copy likely incomplete.");
        }
        return this.state;
      } catch (err) {
        err.state = this.state;
        throw err;
      }
    }
    async loadState() {
      if (!this.stateFile)
        return;
      try {
        await this.fns.stat(this.stateFile);
        this.state = JSON.parse(await readFile2(this.stateFile));
        this.stateCatchUp = this.state.wip.length;
      } catch (err) {
        if (err.code !== "ENOENT") {
          throw err;
        }
      }
    }
    async saveState() {
      if (!this.stateFile)
        return;
      await writeFile(this.stateFile, JSON.stringify(this.state, null, 2));
    }
    async processJobErrors() {
      let err = this.errors.shift();
      while (err) {
        this.handleError(err);
        err = this.errors.shift();
      }
    }
    async copy(from, to) {
      let catchingUp = this.stateCatchUp > 0;
      if (catchingUp) {
        if (this.state.wip.includes(from)) {
          this.stateCatchUp -= 1;
        } else if (!this.state.wip.some((wipFile) => wipFile.startsWith(from))) {
          return;
        }
      }
      try {
        await this.processJobErrors();
        const fromStat = await this.fns.stat(from);
        const isDirectory = fromStat.isDirectory();
        if (isDirectory && this.recursive) {
          await this.copyDirectory(from, to);
        } else if (!isDirectory) {
          if (!catchingUp) {
            this.state.wip.push(from);
          }
          await this.queueAction(() => this.copyFile(from, to, fromStat));
          if (this.state.counts.files % this.stateFrequency === 0) {
            await this.saveState();
          }
        }
      } catch (err) {
        this.handleError(err);
      }
    }
    async copyDirectory(from, to) {
      try {
        try {
          await this.fns.stat(to);
        } catch (err) {
          if (err.code === "ENOENT") {
            await mkdir(to);
          } else {
            throw err;
          }
        }
        const files = await this.fns.readdir(from);
        for (let file of files) {
          await this.copy(path19.join(from, file), path19.join(to, file));
        }
      } catch (err) {
        this.handleError(err);
      } finally {
        this.state.counts.directories++;
      }
    }
    async queueAction(asyncFunction) {
      while (this.pending.length >= this.parallelJobs) {
        await sleep(10);
      }
      const action = async () => {
        try {
          await asyncFunction();
        } finally {
          this.pending.splice(this.pending.indexOf(asyncFunction), 1);
        }
      };
      this.pending.push(action);
      action().catch((err) => this.errors.push(err));
    }
    async copyFile(from, to, fromStat) {
      this.logCopyAction(to, "start");
      try {
        const toStat = await this.fns.stat(to);
        if (this.overwrite) {
          await this.doCopy(from, to, fromStat);
        } else if (this.overwriteMismatches) {
          if (fromStat.size !== toStat.size || fromStat.mtimeMs > toStat.mtimeMs) {
            this.logCopyAction(to, "stats mismatch", {
              fromStat: {
                size: fromStat.size,
                mtimeMs: fromStat.mtimeMs
              },
              toStat: {
                size: toStat.size,
                mtimeMs: toStat.mtimeMs
              }
            });
            await this.doCopy(from, to, fromStat);
          } else {
            this.logCopyAction(to, "skipped, stats match");
          }
        } else {
          this.logCopyAction(to, "skipped");
        }
        this.removeWip(from);
      } catch (err) {
        if (err.code === "ENOENT") {
          await this.doCopy(from, to, fromStat);
          this.removeWip(from);
        } else {
          throw err;
        }
      }
      this.state.counts.files++;
    }
    async doCopy(from, to, fromStat) {
      try {
        if (this.verbose || this.json) {
          const start = Date.now();
          await this.fns.copyFile(from, to);
          const speed = fromStat.size / ((Date.now() - start) / 1e3);
          this.logCopyAction(to, "complete", {speed});
        } else {
          await this.fns.copyFile(from, to);
        }
        this.state.counts.copies++;
      } catch (err) {
        this.logCopyAction(to, "error");
        this.handleError(err);
      }
    }
    removeWip(from) {
      let wipIndex = this.state.wip.indexOf(from);
      if (wipIndex >= 0) {
        this.state.wip.splice(wipIndex, 1);
      }
    }
    log(message) {
      if (this.verbose || this.json) {
        if (this.json === "pretty") {
          console.log(JSON.stringify({message, state: this.state}, null, 2) + "\n");
        } else if (this.json) {
          console.log(JSON.stringify({message, state: this.state}));
        } else {
          console.log(`Count: ${this.state.counts.directories}d ${this.state.counts.files}f Jobs: ${this.pending.length} ${message}`);
        }
      }
    }
    logCopyAction(file, action, extra) {
      if (this.json) {
        let message = {file, action};
        if (extra) {
          Object.assign(message, extra);
        }
        this.log(message);
      } else {
        let message = `Copying: '${file}' (${action})`;
        if (extra && extra.speed !== void 0) {
          message += ` (${pretty(extra.speed)}/s)`;
        }
        this.log(message);
      }
    }
    handleError(err) {
      if (this.ignoreErrors) {
        console.error(err);
      } else {
        throw err;
      }
    }
  }
  module3.exports = (options) => {
    const copy = new Copy(options);
    return copy.start();
  };
  module3.exports.Copy = Copy;
});

// ../../node_modules/.pnpm/is-arrayish@0.2.1/node_modules/is-arrayish/index.js
var require_is_arrayish = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = function isArrayish(obj) {
    if (!obj) {
      return false;
    }
    return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && obj.splice instanceof Function;
  };
});

// ../../node_modules/.pnpm/error-ex@1.3.2/node_modules/error-ex/index.js
var require_error_ex = __commonJS((exports2, module3) => {
  "use strict";
  var util4 = require("util");
  var isArrayish = require_is_arrayish();
  var errorEx = function errorEx2(name, properties) {
    if (!name || name.constructor !== String) {
      properties = name || {};
      name = Error.name;
    }
    var errorExError = function ErrorEXError(message) {
      if (!this) {
        return new ErrorEXError(message);
      }
      message = message instanceof Error ? message.message : message || this.message;
      Error.call(this, message);
      Error.captureStackTrace(this, errorExError);
      this.name = name;
      Object.defineProperty(this, "message", {
        configurable: true,
        enumerable: false,
        get: function() {
          var newMessage = message.split(/\r?\n/g);
          for (var key in properties) {
            if (!properties.hasOwnProperty(key)) {
              continue;
            }
            var modifier = properties[key];
            if ("message" in modifier) {
              newMessage = modifier.message(this[key], newMessage) || newMessage;
              if (!isArrayish(newMessage)) {
                newMessage = [newMessage];
              }
            }
          }
          return newMessage.join("\n");
        },
        set: function(v) {
          message = v;
        }
      });
      var overwrittenStack = null;
      var stackDescriptor = Object.getOwnPropertyDescriptor(this, "stack");
      var stackGetter = stackDescriptor.get;
      var stackValue = stackDescriptor.value;
      delete stackDescriptor.value;
      delete stackDescriptor.writable;
      stackDescriptor.set = function(newstack) {
        overwrittenStack = newstack;
      };
      stackDescriptor.get = function() {
        var stack = (overwrittenStack || (stackGetter ? stackGetter.call(this) : stackValue)).split(/\r?\n+/g);
        if (!overwrittenStack) {
          stack[0] = this.name + ": " + this.message;
        }
        var lineCount = 1;
        for (var key in properties) {
          if (!properties.hasOwnProperty(key)) {
            continue;
          }
          var modifier = properties[key];
          if ("line" in modifier) {
            var line = modifier.line(this[key]);
            if (line) {
              stack.splice(lineCount++, 0, "    " + line);
            }
          }
          if ("stack" in modifier) {
            modifier.stack(this[key], stack);
          }
        }
        return stack.join("\n");
      };
      Object.defineProperty(this, "stack", stackDescriptor);
    };
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(errorExError.prototype, Error.prototype);
      Object.setPrototypeOf(errorExError, Error);
    } else {
      util4.inherits(errorExError, Error);
    }
    return errorExError;
  };
  errorEx.append = function(str, def) {
    return {
      message: function(v, message) {
        v = v || def;
        if (v) {
          message[0] += " " + str.replace("%s", v.toString());
        }
        return message;
      }
    };
  };
  errorEx.line = function(str, def) {
    return {
      line: function(v) {
        v = v || def;
        if (v) {
          return str.replace("%s", v.toString());
        }
        return null;
      }
    };
  };
  module3.exports = errorEx;
});

// ../../node_modules/.pnpm/json-parse-even-better-errors@2.3.1/node_modules/json-parse-even-better-errors/index.js
var require_json_parse_even_better_errors = __commonJS((exports2, module3) => {
  "use strict";
  const hexify = (char) => {
    const h = char.charCodeAt(0).toString(16).toUpperCase();
    return "0x" + (h.length % 2 ? "0" : "") + h;
  };
  const parseError = (e, txt, context) => {
    if (!txt) {
      return {
        message: e.message + " while parsing empty string",
        position: 0
      };
    }
    const badToken = e.message.match(/^Unexpected token (.) .*position\s+(\d+)/i);
    const errIdx = badToken ? +badToken[2] : e.message.match(/^Unexpected end of JSON.*/i) ? txt.length - 1 : null;
    const msg = badToken ? e.message.replace(/^Unexpected token ./, `Unexpected token ${JSON.stringify(badToken[1])} (${hexify(badToken[1])})`) : e.message;
    if (errIdx !== null && errIdx !== void 0) {
      const start = errIdx <= context ? 0 : errIdx - context;
      const end = errIdx + context >= txt.length ? txt.length : errIdx + context;
      const slice = (start === 0 ? "" : "...") + txt.slice(start, end) + (end === txt.length ? "" : "...");
      const near = txt === slice ? "" : "near ";
      return {
        message: msg + ` while parsing ${near}${JSON.stringify(slice)}`,
        position: errIdx
      };
    } else {
      return {
        message: msg + ` while parsing '${txt.slice(0, context * 2)}'`,
        position: 0
      };
    }
  };
  class JSONParseError extends SyntaxError {
    constructor(er, txt, context, caller) {
      context = context || 20;
      const metadata = parseError(er, txt, context);
      super(metadata.message);
      Object.assign(this, metadata);
      this.code = "EJSONPARSE";
      this.systemError = er;
      Error.captureStackTrace(this, caller || this.constructor);
    }
    get name() {
      return this.constructor.name;
    }
    set name(n) {
    }
    get [Symbol.toStringTag]() {
      return this.constructor.name;
    }
  }
  const kIndent = Symbol.for("indent");
  const kNewline = Symbol.for("newline");
  const formatRE = /^\s*[{\[]((?:\r?\n)+)([\s\t]*)/;
  const emptyRE = /^(?:\{\}|\[\])((?:\r?\n)+)?$/;
  const parseJson = (txt, reviver, context) => {
    const parseText = stripBOM(txt);
    context = context || 20;
    try {
      const [, newline = "\n", indent2 = "  "] = parseText.match(emptyRE) || parseText.match(formatRE) || [, "", ""];
      const result = JSON.parse(parseText, reviver);
      if (result && typeof result === "object") {
        result[kNewline] = newline;
        result[kIndent] = indent2;
      }
      return result;
    } catch (e) {
      if (typeof txt !== "string" && !Buffer.isBuffer(txt)) {
        const isEmptyArray = Array.isArray(txt) && txt.length === 0;
        throw Object.assign(new TypeError(`Cannot parse ${isEmptyArray ? "an empty array" : String(txt)}`), {
          code: "EJSONPARSE",
          systemError: e
        });
      }
      throw new JSONParseError(e, parseText, context, parseJson);
    }
  };
  const stripBOM = (txt) => String(txt).replace(/^\uFEFF/, "");
  module3.exports = parseJson;
  parseJson.JSONParseError = JSONParseError;
  parseJson.noExceptions = (txt, reviver) => {
    try {
      return JSON.parse(stripBOM(txt), reviver);
    } catch (e) {
    }
  };
});

// ../../node_modules/.pnpm/lines-and-columns@1.1.6/node_modules/lines-and-columns/dist/index.js
var require_dist9 = __commonJS((exports2) => {
  "use strict";
  var LF = "\n";
  var CR = "\r";
  var LinesAndColumns = function() {
    function LinesAndColumns2(string) {
      this.string = string;
      var offsets = [0];
      for (var offset = 0; offset < string.length; ) {
        switch (string[offset]) {
          case LF:
            offset += LF.length;
            offsets.push(offset);
            break;
          case CR:
            offset += CR.length;
            if (string[offset] === LF) {
              offset += LF.length;
            }
            offsets.push(offset);
            break;
          default:
            offset++;
            break;
        }
      }
      this.offsets = offsets;
    }
    LinesAndColumns2.prototype.locationForIndex = function(index) {
      if (index < 0 || index > this.string.length) {
        return null;
      }
      var line = 0;
      var offsets = this.offsets;
      while (offsets[line + 1] <= index) {
        line++;
      }
      var column = index - offsets[line];
      return {line, column};
    };
    LinesAndColumns2.prototype.indexForLocation = function(location) {
      var line = location.line, column = location.column;
      if (line < 0 || line >= this.offsets.length) {
        return null;
      }
      if (column < 0 || column > this.lengthOfLine(line)) {
        return null;
      }
      return this.offsets[line] + column;
    };
    LinesAndColumns2.prototype.lengthOfLine = function(line) {
      var offset = this.offsets[line];
      var nextOffset = line === this.offsets.length - 1 ? this.string.length : this.offsets[line + 1];
      return nextOffset - offset;
    };
    return LinesAndColumns2;
  }();
  exports2.__esModule = true;
  exports2["default"] = LinesAndColumns;
});

// ../../node_modules/.pnpm/js-tokens@4.0.0/node_modules/js-tokens/index.js
var require_js_tokens = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.default = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyus]{1,6}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]+\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;
  exports2.matchToToken = function(match) {
    var token = {type: "invalid", value: match[0], closed: void 0};
    if (match[1])
      token.type = "string", token.closed = !!(match[3] || match[4]);
    else if (match[5])
      token.type = "comment";
    else if (match[6])
      token.type = "comment", token.closed = !!match[7];
    else if (match[8])
      token.type = "regex";
    else if (match[9])
      token.type = "number";
    else if (match[10])
      token.type = "name";
    else if (match[11])
      token.type = "punctuator";
    else if (match[12])
      token.type = "whitespace";
    return token;
  };
});

// ../../node_modules/.pnpm/@babel/helper-validator-identifier@7.10.4/node_modules/@babel/helper-validator-identifier/lib/identifier.js
var require_identifier = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.isIdentifierStart = isIdentifierStart;
  exports2.isIdentifierChar = isIdentifierChar;
  exports2.isIdentifierName = isIdentifierName;
  let nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙՠ-ֈא-תׯ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࣇऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഄ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄຆ-ຊຌ-ຣລວ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡸᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᲐ-ᲺᲽ-Ჿᳩ-ᳬᳮ-ᳳᳵᳶᳺᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄯㄱ-ㆎㆠ-ㆿㇰ-ㇿ㐀-䶿一-鿼ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞿꟂ-ꟊꟵ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꣾꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭩꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
  let nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߽߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛࣓-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯৾ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍୕-ୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఄా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ඁ-ඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᪿᫀᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭᳴᳷-᳹᷀-᷹᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧ꠬ꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱ꣿ-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿";
  const nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
  const nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
  const astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
  const astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
  function isInAstralSet(code, set) {
    let pos = 65536;
    for (let i = 0, length = set.length; i < length; i += 2) {
      pos += set[i];
      if (pos > code)
        return false;
      pos += set[i + 1];
      if (pos >= code)
        return true;
    }
    return false;
  }
  function isIdentifierStart(code) {
    if (code < 65)
      return code === 36;
    if (code <= 90)
      return true;
    if (code < 97)
      return code === 95;
    if (code <= 122)
      return true;
    if (code <= 65535) {
      return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
    }
    return isInAstralSet(code, astralIdentifierStartCodes);
  }
  function isIdentifierChar(code) {
    if (code < 48)
      return code === 36;
    if (code < 58)
      return true;
    if (code < 65)
      return false;
    if (code <= 90)
      return true;
    if (code < 97)
      return code === 95;
    if (code <= 122)
      return true;
    if (code <= 65535) {
      return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
    }
    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
  }
  function isIdentifierName(name) {
    let isFirst = true;
    for (let _i = 0, _Array$from = Array.from(name); _i < _Array$from.length; _i++) {
      const char = _Array$from[_i];
      const cp = char.codePointAt(0);
      if (isFirst) {
        if (!isIdentifierStart(cp)) {
          return false;
        }
        isFirst = false;
      } else if (!isIdentifierChar(cp)) {
        return false;
      }
    }
    return !isFirst;
  }
});

// ../../node_modules/.pnpm/@babel/helper-validator-identifier@7.10.4/node_modules/@babel/helper-validator-identifier/lib/keyword.js
var require_keyword = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.isReservedWord = isReservedWord;
  exports2.isStrictReservedWord = isStrictReservedWord;
  exports2.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
  exports2.isStrictBindReservedWord = isStrictBindReservedWord;
  exports2.isKeyword = isKeyword;
  const reservedWords = {
    keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"],
    strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"],
    strictBind: ["eval", "arguments"]
  };
  const keywords = new Set(reservedWords.keyword);
  const reservedWordsStrictSet = new Set(reservedWords.strict);
  const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
  function isReservedWord(word, inModule) {
    return inModule && word === "await" || word === "enum";
  }
  function isStrictReservedWord(word, inModule) {
    return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
  }
  function isStrictBindOnlyReservedWord(word) {
    return reservedWordsStrictBindSet.has(word);
  }
  function isStrictBindReservedWord(word, inModule) {
    return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
  }
  function isKeyword(word) {
    return keywords.has(word);
  }
});

// ../../node_modules/.pnpm/@babel/helper-validator-identifier@7.10.4/node_modules/@babel/helper-validator-identifier/lib/index.js
var require_lib3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  Object.defineProperty(exports2, "isIdentifierName", {
    enumerable: true,
    get: function() {
      return _identifier.isIdentifierName;
    }
  });
  Object.defineProperty(exports2, "isIdentifierChar", {
    enumerable: true,
    get: function() {
      return _identifier.isIdentifierChar;
    }
  });
  Object.defineProperty(exports2, "isIdentifierStart", {
    enumerable: true,
    get: function() {
      return _identifier.isIdentifierStart;
    }
  });
  Object.defineProperty(exports2, "isReservedWord", {
    enumerable: true,
    get: function() {
      return _keyword.isReservedWord;
    }
  });
  Object.defineProperty(exports2, "isStrictBindOnlyReservedWord", {
    enumerable: true,
    get: function() {
      return _keyword.isStrictBindOnlyReservedWord;
    }
  });
  Object.defineProperty(exports2, "isStrictBindReservedWord", {
    enumerable: true,
    get: function() {
      return _keyword.isStrictBindReservedWord;
    }
  });
  Object.defineProperty(exports2, "isStrictReservedWord", {
    enumerable: true,
    get: function() {
      return _keyword.isStrictReservedWord;
    }
  });
  Object.defineProperty(exports2, "isKeyword", {
    enumerable: true,
    get: function() {
      return _keyword.isKeyword;
    }
  });
  var _identifier = require_identifier();
  var _keyword = require_keyword();
});

// ../../node_modules/.pnpm/escape-string-regexp@1.0.5/node_modules/escape-string-regexp/index.js
var require_escape_string_regexp = __commonJS((exports2, module3) => {
  "use strict";
  var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
  module3.exports = function(str) {
    if (typeof str !== "string") {
      throw new TypeError("Expected a string");
    }
    return str.replace(matchOperatorsRe, "\\$&");
  };
});

// ../../node_modules/.pnpm/color-name@1.1.3/node_modules/color-name/index.js
var require_color_name2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = {
    aliceblue: [240, 248, 255],
    antiquewhite: [250, 235, 215],
    aqua: [0, 255, 255],
    aquamarine: [127, 255, 212],
    azure: [240, 255, 255],
    beige: [245, 245, 220],
    bisque: [255, 228, 196],
    black: [0, 0, 0],
    blanchedalmond: [255, 235, 205],
    blue: [0, 0, 255],
    blueviolet: [138, 43, 226],
    brown: [165, 42, 42],
    burlywood: [222, 184, 135],
    cadetblue: [95, 158, 160],
    chartreuse: [127, 255, 0],
    chocolate: [210, 105, 30],
    coral: [255, 127, 80],
    cornflowerblue: [100, 149, 237],
    cornsilk: [255, 248, 220],
    crimson: [220, 20, 60],
    cyan: [0, 255, 255],
    darkblue: [0, 0, 139],
    darkcyan: [0, 139, 139],
    darkgoldenrod: [184, 134, 11],
    darkgray: [169, 169, 169],
    darkgreen: [0, 100, 0],
    darkgrey: [169, 169, 169],
    darkkhaki: [189, 183, 107],
    darkmagenta: [139, 0, 139],
    darkolivegreen: [85, 107, 47],
    darkorange: [255, 140, 0],
    darkorchid: [153, 50, 204],
    darkred: [139, 0, 0],
    darksalmon: [233, 150, 122],
    darkseagreen: [143, 188, 143],
    darkslateblue: [72, 61, 139],
    darkslategray: [47, 79, 79],
    darkslategrey: [47, 79, 79],
    darkturquoise: [0, 206, 209],
    darkviolet: [148, 0, 211],
    deeppink: [255, 20, 147],
    deepskyblue: [0, 191, 255],
    dimgray: [105, 105, 105],
    dimgrey: [105, 105, 105],
    dodgerblue: [30, 144, 255],
    firebrick: [178, 34, 34],
    floralwhite: [255, 250, 240],
    forestgreen: [34, 139, 34],
    fuchsia: [255, 0, 255],
    gainsboro: [220, 220, 220],
    ghostwhite: [248, 248, 255],
    gold: [255, 215, 0],
    goldenrod: [218, 165, 32],
    gray: [128, 128, 128],
    green: [0, 128, 0],
    greenyellow: [173, 255, 47],
    grey: [128, 128, 128],
    honeydew: [240, 255, 240],
    hotpink: [255, 105, 180],
    indianred: [205, 92, 92],
    indigo: [75, 0, 130],
    ivory: [255, 255, 240],
    khaki: [240, 230, 140],
    lavender: [230, 230, 250],
    lavenderblush: [255, 240, 245],
    lawngreen: [124, 252, 0],
    lemonchiffon: [255, 250, 205],
    lightblue: [173, 216, 230],
    lightcoral: [240, 128, 128],
    lightcyan: [224, 255, 255],
    lightgoldenrodyellow: [250, 250, 210],
    lightgray: [211, 211, 211],
    lightgreen: [144, 238, 144],
    lightgrey: [211, 211, 211],
    lightpink: [255, 182, 193],
    lightsalmon: [255, 160, 122],
    lightseagreen: [32, 178, 170],
    lightskyblue: [135, 206, 250],
    lightslategray: [119, 136, 153],
    lightslategrey: [119, 136, 153],
    lightsteelblue: [176, 196, 222],
    lightyellow: [255, 255, 224],
    lime: [0, 255, 0],
    limegreen: [50, 205, 50],
    linen: [250, 240, 230],
    magenta: [255, 0, 255],
    maroon: [128, 0, 0],
    mediumaquamarine: [102, 205, 170],
    mediumblue: [0, 0, 205],
    mediumorchid: [186, 85, 211],
    mediumpurple: [147, 112, 219],
    mediumseagreen: [60, 179, 113],
    mediumslateblue: [123, 104, 238],
    mediumspringgreen: [0, 250, 154],
    mediumturquoise: [72, 209, 204],
    mediumvioletred: [199, 21, 133],
    midnightblue: [25, 25, 112],
    mintcream: [245, 255, 250],
    mistyrose: [255, 228, 225],
    moccasin: [255, 228, 181],
    navajowhite: [255, 222, 173],
    navy: [0, 0, 128],
    oldlace: [253, 245, 230],
    olive: [128, 128, 0],
    olivedrab: [107, 142, 35],
    orange: [255, 165, 0],
    orangered: [255, 69, 0],
    orchid: [218, 112, 214],
    palegoldenrod: [238, 232, 170],
    palegreen: [152, 251, 152],
    paleturquoise: [175, 238, 238],
    palevioletred: [219, 112, 147],
    papayawhip: [255, 239, 213],
    peachpuff: [255, 218, 185],
    peru: [205, 133, 63],
    pink: [255, 192, 203],
    plum: [221, 160, 221],
    powderblue: [176, 224, 230],
    purple: [128, 0, 128],
    rebeccapurple: [102, 51, 153],
    red: [255, 0, 0],
    rosybrown: [188, 143, 143],
    royalblue: [65, 105, 225],
    saddlebrown: [139, 69, 19],
    salmon: [250, 128, 114],
    sandybrown: [244, 164, 96],
    seagreen: [46, 139, 87],
    seashell: [255, 245, 238],
    sienna: [160, 82, 45],
    silver: [192, 192, 192],
    skyblue: [135, 206, 235],
    slateblue: [106, 90, 205],
    slategray: [112, 128, 144],
    slategrey: [112, 128, 144],
    snow: [255, 250, 250],
    springgreen: [0, 255, 127],
    steelblue: [70, 130, 180],
    tan: [210, 180, 140],
    teal: [0, 128, 128],
    thistle: [216, 191, 216],
    tomato: [255, 99, 71],
    turquoise: [64, 224, 208],
    violet: [238, 130, 238],
    wheat: [245, 222, 179],
    white: [255, 255, 255],
    whitesmoke: [245, 245, 245],
    yellow: [255, 255, 0],
    yellowgreen: [154, 205, 50]
  };
});

// ../../node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/conversions.js
var require_conversions2 = __commonJS((exports2, module3) => {
  var cssKeywords = require_color_name2();
  var reverseKeywords = {};
  for (var key in cssKeywords) {
    if (cssKeywords.hasOwnProperty(key)) {
      reverseKeywords[cssKeywords[key]] = key;
    }
  }
  var convert = module3.exports = {
    rgb: {channels: 3, labels: "rgb"},
    hsl: {channels: 3, labels: "hsl"},
    hsv: {channels: 3, labels: "hsv"},
    hwb: {channels: 3, labels: "hwb"},
    cmyk: {channels: 4, labels: "cmyk"},
    xyz: {channels: 3, labels: "xyz"},
    lab: {channels: 3, labels: "lab"},
    lch: {channels: 3, labels: "lch"},
    hex: {channels: 1, labels: ["hex"]},
    keyword: {channels: 1, labels: ["keyword"]},
    ansi16: {channels: 1, labels: ["ansi16"]},
    ansi256: {channels: 1, labels: ["ansi256"]},
    hcg: {channels: 3, labels: ["h", "c", "g"]},
    apple: {channels: 3, labels: ["r16", "g16", "b16"]},
    gray: {channels: 1, labels: ["gray"]}
  };
  for (var model in convert) {
    if (convert.hasOwnProperty(model)) {
      if (!("channels" in convert[model])) {
        throw new Error("missing channels property: " + model);
      }
      if (!("labels" in convert[model])) {
        throw new Error("missing channel labels property: " + model);
      }
      if (convert[model].labels.length !== convert[model].channels) {
        throw new Error("channel and label counts mismatch: " + model);
      }
      var channels = convert[model].channels;
      var labels = convert[model].labels;
      delete convert[model].channels;
      delete convert[model].labels;
      Object.defineProperty(convert[model], "channels", {value: channels});
      Object.defineProperty(convert[model], "labels", {value: labels});
    }
  }
  convert.rgb.hsl = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var delta = max - min;
    var h;
    var s;
    var l;
    if (max === min) {
      h = 0;
    } else if (r === max) {
      h = (g - b) / delta;
    } else if (g === max) {
      h = 2 + (b - r) / delta;
    } else if (b === max) {
      h = 4 + (r - g) / delta;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
      h += 360;
    }
    l = (min + max) / 2;
    if (max === min) {
      s = 0;
    } else if (l <= 0.5) {
      s = delta / (max + min);
    } else {
      s = delta / (2 - max - min);
    }
    return [h, s * 100, l * 100];
  };
  convert.rgb.hsv = function(rgb) {
    var rdif;
    var gdif;
    var bdif;
    var h;
    var s;
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var v = Math.max(r, g, b);
    var diff = v - Math.min(r, g, b);
    var diffc = function(c) {
      return (v - c) / 6 / diff + 1 / 2;
    };
    if (diff === 0) {
      h = s = 0;
    } else {
      s = diff / v;
      rdif = diffc(r);
      gdif = diffc(g);
      bdif = diffc(b);
      if (r === v) {
        h = bdif - gdif;
      } else if (g === v) {
        h = 1 / 3 + rdif - bdif;
      } else if (b === v) {
        h = 2 / 3 + gdif - rdif;
      }
      if (h < 0) {
        h += 1;
      } else if (h > 1) {
        h -= 1;
      }
    }
    return [
      h * 360,
      s * 100,
      v * 100
    ];
  };
  convert.rgb.hwb = function(rgb) {
    var r = rgb[0];
    var g = rgb[1];
    var b = rgb[2];
    var h = convert.rgb.hsl(rgb)[0];
    var w = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [h, w * 100, b * 100];
  };
  convert.rgb.cmyk = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var c;
    var m;
    var y;
    var k;
    k = Math.min(1 - r, 1 - g, 1 - b);
    c = (1 - r - k) / (1 - k) || 0;
    m = (1 - g - k) / (1 - k) || 0;
    y = (1 - b - k) / (1 - k) || 0;
    return [c * 100, m * 100, y * 100, k * 100];
  };
  function comparativeDistance(x, y) {
    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
  }
  convert.rgb.keyword = function(rgb) {
    var reversed = reverseKeywords[rgb];
    if (reversed) {
      return reversed;
    }
    var currentClosestDistance = Infinity;
    var currentClosestKeyword;
    for (var keyword in cssKeywords) {
      if (cssKeywords.hasOwnProperty(keyword)) {
        var value = cssKeywords[keyword];
        var distance = comparativeDistance(rgb, value);
        if (distance < currentClosestDistance) {
          currentClosestDistance = distance;
          currentClosestKeyword = keyword;
        }
      }
    }
    return currentClosestKeyword;
  };
  convert.keyword.rgb = function(keyword) {
    return cssKeywords[keyword];
  };
  convert.rgb.xyz = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [x * 100, y * 100, z * 100];
  };
  convert.rgb.lab = function(rgb) {
    var xyz = convert.rgb.xyz(rgb);
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert.hsl.rgb = function(hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val;
    if (s === 0) {
      val = l * 255;
      return [val, val, val];
    }
    if (l < 0.5) {
      t2 = l * (1 + s);
    } else {
      t2 = l + s - l * s;
    }
    t1 = 2 * l - t2;
    rgb = [0, 0, 0];
    for (var i = 0; i < 3; i++) {
      t3 = h + 1 / 3 * -(i - 1);
      if (t3 < 0) {
        t3++;
      }
      if (t3 > 1) {
        t3--;
      }
      if (6 * t3 < 1) {
        val = t1 + (t2 - t1) * 6 * t3;
      } else if (2 * t3 < 1) {
        val = t2;
      } else if (3 * t3 < 2) {
        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
      } else {
        val = t1;
      }
      rgb[i] = val * 255;
    }
    return rgb;
  };
  convert.hsl.hsv = function(hsl) {
    var h = hsl[0];
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var smin = s;
    var lmin = Math.max(l, 0.01);
    var sv;
    var v;
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    v = (l + s) / 2;
    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [h, sv * 100, v * 100];
  };
  convert.hsv.rgb = function(hsv) {
    var h = hsv[0] / 60;
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var hi = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (hi) {
      case 0:
        return [v, t, p];
      case 1:
        return [q, v, p];
      case 2:
        return [p, v, t];
      case 3:
        return [p, q, v];
      case 4:
        return [t, p, v];
      case 5:
        return [v, p, q];
    }
  };
  convert.hsv.hsl = function(hsv) {
    var h = hsv[0];
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var vmin = Math.max(v, 0.01);
    var lmin;
    var sl;
    var l;
    l = (2 - s) * v;
    lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [h, sl * 100, l * 100];
  };
  convert.hwb.rgb = function(hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;
    if (ratio > 1) {
      wh /= ratio;
      bl /= ratio;
    }
    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;
    if ((i & 1) !== 0) {
      f = 1 - f;
    }
    n = wh + f * (v - wh);
    var r;
    var g;
    var b;
    switch (i) {
      default:
      case 6:
      case 0:
        r = v;
        g = n;
        b = wh;
        break;
      case 1:
        r = n;
        g = v;
        b = wh;
        break;
      case 2:
        r = wh;
        g = v;
        b = n;
        break;
      case 3:
        r = wh;
        g = n;
        b = v;
        break;
      case 4:
        r = n;
        g = wh;
        b = v;
        break;
      case 5:
        r = v;
        g = wh;
        b = n;
        break;
    }
    return [r * 255, g * 255, b * 255];
  };
  convert.cmyk.rgb = function(cmyk) {
    var c = cmyk[0] / 100;
    var m = cmyk[1] / 100;
    var y = cmyk[2] / 100;
    var k = cmyk[3] / 100;
    var r;
    var g;
    var b;
    r = 1 - Math.min(1, c * (1 - k) + k);
    g = 1 - Math.min(1, m * (1 - k) + k);
    b = 1 - Math.min(1, y * (1 - k) + k);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.rgb = function(xyz) {
    var x = xyz[0] / 100;
    var y = xyz[1] / 100;
    var z = xyz[2] / 100;
    var r;
    var g;
    var b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.204 + z * 1.057;
    r = r > 31308e-7 ? 1.055 * Math.pow(r, 1 / 2.4) - 0.055 : r * 12.92;
    g = g > 31308e-7 ? 1.055 * Math.pow(g, 1 / 2.4) - 0.055 : g * 12.92;
    b = b > 31308e-7 ? 1.055 * Math.pow(b, 1 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [r * 255, g * 255, b * 255];
  };
  convert.xyz.lab = function(xyz) {
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 8856e-6 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 8856e-6 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 8856e-6 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [l, a, b];
  };
  convert.lab.xyz = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var x;
    var y;
    var z;
    y = (l + 16) / 116;
    x = a / 500 + y;
    z = y - b / 200;
    var y2 = Math.pow(y, 3);
    var x2 = Math.pow(x, 3);
    var z2 = Math.pow(z, 3);
    y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
    x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
    z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
    x *= 95.047;
    y *= 100;
    z *= 108.883;
    return [x, y, z];
  };
  convert.lab.lch = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var hr;
    var h;
    var c;
    hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) {
      h += 360;
    }
    c = Math.sqrt(a * a + b * b);
    return [l, c, h];
  };
  convert.lch.lab = function(lch) {
    var l = lch[0];
    var c = lch[1];
    var h = lch[2];
    var a;
    var b;
    var hr;
    hr = h / 360 * 2 * Math.PI;
    a = c * Math.cos(hr);
    b = c * Math.sin(hr);
    return [l, a, b];
  };
  convert.rgb.ansi16 = function(args2) {
    var r = args2[0];
    var g = args2[1];
    var b = args2[2];
    var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args2)[2];
    value = Math.round(value / 50);
    if (value === 0) {
      return 30;
    }
    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value === 2) {
      ansi += 60;
    }
    return ansi;
  };
  convert.hsv.ansi16 = function(args2) {
    return convert.rgb.ansi16(convert.hsv.rgb(args2), args2[2]);
  };
  convert.rgb.ansi256 = function(args2) {
    var r = args2[0];
    var g = args2[1];
    var b = args2[2];
    if (r === g && g === b) {
      if (r < 8) {
        return 16;
      }
      if (r > 248) {
        return 231;
      }
      return Math.round((r - 8) / 247 * 24) + 232;
    }
    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
  };
  convert.ansi16.rgb = function(args2) {
    var color = args2 % 10;
    if (color === 0 || color === 7) {
      if (args2 > 50) {
        color += 3.5;
      }
      color = color / 10.5 * 255;
      return [color, color, color];
    }
    var mult = (~~(args2 > 50) + 1) * 0.5;
    var r = (color & 1) * mult * 255;
    var g = (color >> 1 & 1) * mult * 255;
    var b = (color >> 2 & 1) * mult * 255;
    return [r, g, b];
  };
  convert.ansi256.rgb = function(args2) {
    if (args2 >= 232) {
      var c = (args2 - 232) * 10 + 8;
      return [c, c, c];
    }
    args2 -= 16;
    var rem;
    var r = Math.floor(args2 / 36) / 5 * 255;
    var g = Math.floor((rem = args2 % 36) / 6) / 5 * 255;
    var b = rem % 6 / 5 * 255;
    return [r, g, b];
  };
  convert.rgb.hex = function(args2) {
    var integer = ((Math.round(args2[0]) & 255) << 16) + ((Math.round(args2[1]) & 255) << 8) + (Math.round(args2[2]) & 255);
    var string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert.hex.rgb = function(args2) {
    var match = args2.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) {
      return [0, 0, 0];
    }
    var colorString = match[0];
    if (match[0].length === 3) {
      colorString = colorString.split("").map(function(char) {
        return char + char;
      }).join("");
    }
    var integer = parseInt(colorString, 16);
    var r = integer >> 16 & 255;
    var g = integer >> 8 & 255;
    var b = integer & 255;
    return [r, g, b];
  };
  convert.rgb.hcg = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var max = Math.max(Math.max(r, g), b);
    var min = Math.min(Math.min(r, g), b);
    var chroma = max - min;
    var grayscale;
    var hue;
    if (chroma < 1) {
      grayscale = min / (1 - chroma);
    } else {
      grayscale = 0;
    }
    if (chroma <= 0) {
      hue = 0;
    } else if (max === r) {
      hue = (g - b) / chroma % 6;
    } else if (max === g) {
      hue = 2 + (b - r) / chroma;
    } else {
      hue = 4 + (r - g) / chroma + 4;
    }
    hue /= 6;
    hue %= 1;
    return [hue * 360, chroma * 100, grayscale * 100];
  };
  convert.hsl.hcg = function(hsl) {
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var c = 1;
    var f = 0;
    if (l < 0.5) {
      c = 2 * s * l;
    } else {
      c = 2 * s * (1 - l);
    }
    if (c < 1) {
      f = (l - 0.5 * c) / (1 - c);
    }
    return [hsl[0], c * 100, f * 100];
  };
  convert.hsv.hcg = function(hsv) {
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var c = s * v;
    var f = 0;
    if (c < 1) {
      f = (v - c) / (1 - c);
    }
    return [hsv[0], c * 100, f * 100];
  };
  convert.hcg.rgb = function(hcg) {
    var h = hcg[0] / 360;
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    if (c === 0) {
      return [g * 255, g * 255, g * 255];
    }
    var pure = [0, 0, 0];
    var hi = h % 1 * 6;
    var v = hi % 1;
    var w = 1 - v;
    var mg = 0;
    switch (Math.floor(hi)) {
      case 0:
        pure[0] = 1;
        pure[1] = v;
        pure[2] = 0;
        break;
      case 1:
        pure[0] = w;
        pure[1] = 1;
        pure[2] = 0;
        break;
      case 2:
        pure[0] = 0;
        pure[1] = 1;
        pure[2] = v;
        break;
      case 3:
        pure[0] = 0;
        pure[1] = w;
        pure[2] = 1;
        break;
      case 4:
        pure[0] = v;
        pure[1] = 0;
        pure[2] = 1;
        break;
      default:
        pure[0] = 1;
        pure[1] = 0;
        pure[2] = w;
    }
    mg = (1 - c) * g;
    return [
      (c * pure[0] + mg) * 255,
      (c * pure[1] + mg) * 255,
      (c * pure[2] + mg) * 255
    ];
  };
  convert.hcg.hsv = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1 - c);
    var f = 0;
    if (v > 0) {
      f = c / v;
    }
    return [hcg[0], f * 100, v * 100];
  };
  convert.hcg.hsl = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var l = g * (1 - c) + 0.5 * c;
    var s = 0;
    if (l > 0 && l < 0.5) {
      s = c / (2 * l);
    } else if (l >= 0.5 && l < 1) {
      s = c / (2 * (1 - l));
    }
    return [hcg[0], s * 100, l * 100];
  };
  convert.hcg.hwb = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1 - c);
    return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };
  convert.hwb.hcg = function(hwb) {
    var w = hwb[1] / 100;
    var b = hwb[2] / 100;
    var v = 1 - b;
    var c = v - w;
    var g = 0;
    if (c < 1) {
      g = (v - c) / (1 - c);
    }
    return [hwb[0], c * 100, g * 100];
  };
  convert.apple.rgb = function(apple) {
    return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
  };
  convert.rgb.apple = function(rgb) {
    return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
  };
  convert.gray.rgb = function(args2) {
    return [args2[0] / 100 * 255, args2[0] / 100 * 255, args2[0] / 100 * 255];
  };
  convert.gray.hsl = convert.gray.hsv = function(args2) {
    return [0, 0, args2[0]];
  };
  convert.gray.hwb = function(gray) {
    return [0, 100, gray[0]];
  };
  convert.gray.cmyk = function(gray) {
    return [0, 0, 0, gray[0]];
  };
  convert.gray.lab = function(gray) {
    return [gray[0], 0, 0];
  };
  convert.gray.hex = function(gray) {
    var val = Math.round(gray[0] / 100 * 255) & 255;
    var integer = (val << 16) + (val << 8) + val;
    var string = integer.toString(16).toUpperCase();
    return "000000".substring(string.length) + string;
  };
  convert.rgb.gray = function(rgb) {
    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [val / 255 * 100];
  };
});

// ../../node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/route.js
var require_route2 = __commonJS((exports2, module3) => {
  var conversions = require_conversions2();
  function buildGraph() {
    var graph = {};
    var models = Object.keys(conversions);
    for (var len = models.length, i = 0; i < len; i++) {
      graph[models[i]] = {
        distance: -1,
        parent: null
      };
    }
    return graph;
  }
  function deriveBFS(fromModel) {
    var graph = buildGraph();
    var queue = [fromModel];
    graph[fromModel].distance = 0;
    while (queue.length) {
      var current = queue.pop();
      var adjacents = Object.keys(conversions[current]);
      for (var len = adjacents.length, i = 0; i < len; i++) {
        var adjacent = adjacents[i];
        var node = graph[adjacent];
        if (node.distance === -1) {
          node.distance = graph[current].distance + 1;
          node.parent = current;
          queue.unshift(adjacent);
        }
      }
    }
    return graph;
  }
  function link5(from, to) {
    return function(args2) {
      return to(from(args2));
    };
  }
  function wrapConversion(toModel, graph) {
    var path19 = [graph[toModel].parent, toModel];
    var fn = conversions[graph[toModel].parent][toModel];
    var cur = graph[toModel].parent;
    while (graph[cur].parent) {
      path19.unshift(graph[cur].parent);
      fn = link5(conversions[graph[cur].parent][cur], fn);
      cur = graph[cur].parent;
    }
    fn.conversion = path19;
    return fn;
  }
  module3.exports = function(fromModel) {
    var graph = deriveBFS(fromModel);
    var conversion = {};
    var models = Object.keys(graph);
    for (var len = models.length, i = 0; i < len; i++) {
      var toModel = models[i];
      var node = graph[toModel];
      if (node.parent === null) {
        continue;
      }
      conversion[toModel] = wrapConversion(toModel, graph);
    }
    return conversion;
  };
});

// ../../node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/index.js
var require_color_convert2 = __commonJS((exports2, module3) => {
  var conversions = require_conversions2();
  var route = require_route2();
  var convert = {};
  var models = Object.keys(conversions);
  function wrapRaw(fn) {
    var wrappedFn = function(args2) {
      if (args2 === void 0 || args2 === null) {
        return args2;
      }
      if (arguments.length > 1) {
        args2 = Array.prototype.slice.call(arguments);
      }
      return fn(args2);
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  function wrapRounded(fn) {
    var wrappedFn = function(args2) {
      if (args2 === void 0 || args2 === null) {
        return args2;
      }
      if (arguments.length > 1) {
        args2 = Array.prototype.slice.call(arguments);
      }
      var result = fn(args2);
      if (typeof result === "object") {
        for (var len = result.length, i = 0; i < len; i++) {
          result[i] = Math.round(result[i]);
        }
      }
      return result;
    };
    if ("conversion" in fn) {
      wrappedFn.conversion = fn.conversion;
    }
    return wrappedFn;
  }
  models.forEach(function(fromModel) {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], "channels", {value: conversions[fromModel].channels});
    Object.defineProperty(convert[fromModel], "labels", {value: conversions[fromModel].labels});
    var routes = route(fromModel);
    var routeModels = Object.keys(routes);
    routeModels.forEach(function(toModel) {
      var fn = routes[toModel];
      convert[fromModel][toModel] = wrapRounded(fn);
      convert[fromModel][toModel].raw = wrapRaw(fn);
    });
  });
  module3.exports = convert;
});

// ../../node_modules/.pnpm/ansi-styles@3.2.1/node_modules/ansi-styles/index.js
var require_ansi_styles2 = __commonJS((exports2, module3) => {
  "use strict";
  const colorConvert = require_color_convert2();
  const wrapAnsi16 = (fn, offset) => function() {
    const code = fn.apply(colorConvert, arguments);
    return `[${code + offset}m`;
  };
  const wrapAnsi256 = (fn, offset) => function() {
    const code = fn.apply(colorConvert, arguments);
    return `[${38 + offset};5;${code}m`;
  };
  const wrapAnsi16m = (fn, offset) => function() {
    const rgb = fn.apply(colorConvert, arguments);
    return `[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
  };
  function assembleStyles() {
    const codes = new Map();
    const styles = {
      modifier: {
        reset: [0, 0],
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        gray: [90, 39],
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    styles.color.grey = styles.color.gray;
    for (const groupName of Object.keys(styles)) {
      const group = styles[groupName];
      for (const styleName of Object.keys(group)) {
        const style = group[styleName];
        styles[styleName] = {
          open: `[${style[0]}m`,
          close: `[${style[1]}m`
        };
        group[styleName] = styles[styleName];
        codes.set(style[0], style[1]);
      }
      Object.defineProperty(styles, groupName, {
        value: group,
        enumerable: false
      });
      Object.defineProperty(styles, "codes", {
        value: codes,
        enumerable: false
      });
    }
    const ansi2ansi = (n) => n;
    const rgb2rgb = (r, g, b) => [r, g, b];
    styles.color.close = "[39m";
    styles.bgColor.close = "[49m";
    styles.color.ansi = {
      ansi: wrapAnsi16(ansi2ansi, 0)
    };
    styles.color.ansi256 = {
      ansi256: wrapAnsi256(ansi2ansi, 0)
    };
    styles.color.ansi16m = {
      rgb: wrapAnsi16m(rgb2rgb, 0)
    };
    styles.bgColor.ansi = {
      ansi: wrapAnsi16(ansi2ansi, 10)
    };
    styles.bgColor.ansi256 = {
      ansi256: wrapAnsi256(ansi2ansi, 10)
    };
    styles.bgColor.ansi16m = {
      rgb: wrapAnsi16m(rgb2rgb, 10)
    };
    for (let key of Object.keys(colorConvert)) {
      if (typeof colorConvert[key] !== "object") {
        continue;
      }
      const suite = colorConvert[key];
      if (key === "ansi16") {
        key = "ansi";
      }
      if ("ansi16" in suite) {
        styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
        styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
      }
      if ("ansi256" in suite) {
        styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
        styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
      }
      if ("rgb" in suite) {
        styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
        styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
      }
    }
    return styles;
  }
  Object.defineProperty(module3, "exports", {
    enumerable: true,
    get: assembleStyles
  });
});

// ../../node_modules/.pnpm/has-flag@3.0.0/node_modules/has-flag/index.js
var require_has_flag2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (flag, argv) => {
    argv = argv || process.argv;
    const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
    const pos = argv.indexOf(prefix + flag);
    const terminatorPos = argv.indexOf("--");
    return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
  };
});

// ../../node_modules/.pnpm/supports-color@5.5.0/node_modules/supports-color/index.js
var require_supports_color2 = __commonJS((exports2, module3) => {
  "use strict";
  const os3 = require("os");
  const hasFlag = require_has_flag2();
  const env = process.env;
  let forceColor;
  if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false")) {
    forceColor = false;
  } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
    forceColor = true;
  }
  if ("FORCE_COLOR" in env) {
    forceColor = env.FORCE_COLOR.length === 0 || parseInt(env.FORCE_COLOR, 10) !== 0;
  }
  function translateLevel(level) {
    if (level === 0) {
      return false;
    }
    return {
      level,
      hasBasic: true,
      has256: level >= 2,
      has16m: level >= 3
    };
  }
  function supportsColor(stream) {
    if (forceColor === false) {
      return 0;
    }
    if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
      return 3;
    }
    if (hasFlag("color=256")) {
      return 2;
    }
    if (stream && !stream.isTTY && forceColor !== true) {
      return 0;
    }
    const min = forceColor ? 1 : 0;
    if (process.platform === "win32") {
      const osRelease = os3.release().split(".");
      if (Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
        return Number(osRelease[2]) >= 14931 ? 3 : 2;
      }
      return 1;
    }
    if ("CI" in env) {
      if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((sign) => sign in env) || env.CI_NAME === "codeship") {
        return 1;
      }
      return min;
    }
    if ("TEAMCITY_VERSION" in env) {
      return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    }
    if (env.COLORTERM === "truecolor") {
      return 3;
    }
    if ("TERM_PROGRAM" in env) {
      const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
      switch (env.TERM_PROGRAM) {
        case "iTerm.app":
          return version >= 3 ? 3 : 2;
        case "Apple_Terminal":
          return 2;
      }
    }
    if (/-256(color)?$/i.test(env.TERM)) {
      return 2;
    }
    if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
      return 1;
    }
    if ("COLORTERM" in env) {
      return 1;
    }
    if (env.TERM === "dumb") {
      return min;
    }
    return min;
  }
  function getSupportLevel(stream) {
    const level = supportsColor(stream);
    return translateLevel(level);
  }
  module3.exports = {
    supportsColor: getSupportLevel,
    stdout: getSupportLevel(process.stdout),
    stderr: getSupportLevel(process.stderr)
  };
});

// ../../node_modules/.pnpm/chalk@2.4.2/node_modules/chalk/templates.js
var require_templates2 = __commonJS((exports2, module3) => {
  "use strict";
  const TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
  const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
  const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
  const ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
  const ESCAPES = new Map([
    ["n", "\n"],
    ["r", "\r"],
    ["t", "	"],
    ["b", "\b"],
    ["f", "\f"],
    ["v", "\v"],
    ["0", "\0"],
    ["\\", "\\"],
    ["e", ""],
    ["a", "\x07"]
  ]);
  function unescape2(c) {
    if (c[0] === "u" && c.length === 5 || c[0] === "x" && c.length === 3) {
      return String.fromCharCode(parseInt(c.slice(1), 16));
    }
    return ESCAPES.get(c) || c;
  }
  function parseArguments(name, args2) {
    const results = [];
    const chunks = args2.trim().split(/\s*,\s*/g);
    let matches;
    for (const chunk of chunks) {
      if (!isNaN(chunk)) {
        results.push(Number(chunk));
      } else if (matches = chunk.match(STRING_REGEX)) {
        results.push(matches[2].replace(ESCAPE_REGEX, (m, escape2, chr) => escape2 ? unescape2(escape2) : chr));
      } else {
        throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
      }
    }
    return results;
  }
  function parseStyle(style) {
    STYLE_REGEX.lastIndex = 0;
    const results = [];
    let matches;
    while ((matches = STYLE_REGEX.exec(style)) !== null) {
      const name = matches[1];
      if (matches[2]) {
        const args2 = parseArguments(name, matches[2]);
        results.push([name].concat(args2));
      } else {
        results.push([name]);
      }
    }
    return results;
  }
  function buildStyle(chalk27, styles) {
    const enabled = {};
    for (const layer of styles) {
      for (const style of layer.styles) {
        enabled[style[0]] = layer.inverse ? null : style.slice(1);
      }
    }
    let current = chalk27;
    for (const styleName of Object.keys(enabled)) {
      if (Array.isArray(enabled[styleName])) {
        if (!(styleName in current)) {
          throw new Error(`Unknown Chalk style: ${styleName}`);
        }
        if (enabled[styleName].length > 0) {
          current = current[styleName].apply(current, enabled[styleName]);
        } else {
          current = current[styleName];
        }
      }
    }
    return current;
  }
  module3.exports = (chalk27, tmp) => {
    const styles = [];
    const chunks = [];
    let chunk = [];
    tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
      if (escapeChar) {
        chunk.push(unescape2(escapeChar));
      } else if (style) {
        const str = chunk.join("");
        chunk = [];
        chunks.push(styles.length === 0 ? str : buildStyle(chalk27, styles)(str));
        styles.push({inverse, styles: parseStyle(style)});
      } else if (close) {
        if (styles.length === 0) {
          throw new Error("Found extraneous } in Chalk template literal");
        }
        chunks.push(buildStyle(chalk27, styles)(chunk.join("")));
        chunk = [];
        styles.pop();
      } else {
        chunk.push(chr);
      }
    });
    chunks.push(chunk.join(""));
    if (styles.length > 0) {
      const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
      throw new Error(errMsg);
    }
    return chunks.join("");
  };
});

// ../../node_modules/.pnpm/chalk@2.4.2/node_modules/chalk/index.js
var require_chalk = __commonJS((exports2, module3) => {
  "use strict";
  const escapeStringRegexp = require_escape_string_regexp();
  const ansiStyles = require_ansi_styles2();
  const stdoutColor = require_supports_color2().stdout;
  const template = require_templates2();
  const isSimpleWindowsTerm = process.platform === "win32" && !(process.env.TERM || "").toLowerCase().startsWith("xterm");
  const levelMapping = ["ansi", "ansi", "ansi256", "ansi16m"];
  const skipModels = new Set(["gray"]);
  const styles = Object.create(null);
  function applyOptions(obj, options) {
    options = options || {};
    const scLevel = stdoutColor ? stdoutColor.level : 0;
    obj.level = options.level === void 0 ? scLevel : options.level;
    obj.enabled = "enabled" in options ? options.enabled : obj.level > 0;
  }
  function Chalk(options) {
    if (!this || !(this instanceof Chalk) || this.template) {
      const chalk27 = {};
      applyOptions(chalk27, options);
      chalk27.template = function() {
        const args2 = [].slice.call(arguments);
        return chalkTag.apply(null, [chalk27.template].concat(args2));
      };
      Object.setPrototypeOf(chalk27, Chalk.prototype);
      Object.setPrototypeOf(chalk27.template, chalk27);
      chalk27.template.constructor = Chalk;
      return chalk27.template;
    }
    applyOptions(this, options);
  }
  if (isSimpleWindowsTerm) {
    ansiStyles.blue.open = "[94m";
  }
  for (const key of Object.keys(ansiStyles)) {
    ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), "g");
    styles[key] = {
      get() {
        const codes = ansiStyles[key];
        return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
      }
    };
  }
  styles.visible = {
    get() {
      return build.call(this, this._styles || [], true, "visible");
    }
  };
  ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), "g");
  for (const model of Object.keys(ansiStyles.color.ansi)) {
    if (skipModels.has(model)) {
      continue;
    }
    styles[model] = {
      get() {
        const level = this.level;
        return function() {
          const open3 = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
          const codes = {
            open: open3,
            close: ansiStyles.color.close,
            closeRe: ansiStyles.color.closeRe
          };
          return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
        };
      }
    };
  }
  ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), "g");
  for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
    if (skipModels.has(model)) {
      continue;
    }
    const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
    styles[bgModel] = {
      get() {
        const level = this.level;
        return function() {
          const open3 = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
          const codes = {
            open: open3,
            close: ansiStyles.bgColor.close,
            closeRe: ansiStyles.bgColor.closeRe
          };
          return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
        };
      }
    };
  }
  const proto = Object.defineProperties(() => {
  }, styles);
  function build(_styles, _empty, key) {
    const builder = function() {
      return applyStyle.apply(builder, arguments);
    };
    builder._styles = _styles;
    builder._empty = _empty;
    const self2 = this;
    Object.defineProperty(builder, "level", {
      enumerable: true,
      get() {
        return self2.level;
      },
      set(level) {
        self2.level = level;
      }
    });
    Object.defineProperty(builder, "enabled", {
      enumerable: true,
      get() {
        return self2.enabled;
      },
      set(enabled) {
        self2.enabled = enabled;
      }
    });
    builder.hasGrey = this.hasGrey || key === "gray" || key === "grey";
    builder.__proto__ = proto;
    return builder;
  }
  function applyStyle() {
    const args2 = arguments;
    const argsLen = args2.length;
    let str = String(arguments[0]);
    if (argsLen === 0) {
      return "";
    }
    if (argsLen > 1) {
      for (let a = 1; a < argsLen; a++) {
        str += " " + args2[a];
      }
    }
    if (!this.enabled || this.level <= 0 || !str) {
      return this._empty ? "" : str;
    }
    const originalDim = ansiStyles.dim.open;
    if (isSimpleWindowsTerm && this.hasGrey) {
      ansiStyles.dim.open = "";
    }
    for (const code of this._styles.slice().reverse()) {
      str = code.open + str.replace(code.closeRe, code.open) + code.close;
      str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
    }
    ansiStyles.dim.open = originalDim;
    return str;
  }
  function chalkTag(chalk27, strings) {
    if (!Array.isArray(strings)) {
      return [].slice.call(arguments, 1).join(" ");
    }
    const args2 = [].slice.call(arguments, 2);
    const parts = [strings.raw[0]];
    for (let i = 1; i < strings.length; i++) {
      parts.push(String(args2[i - 1]).replace(/[{}\\]/g, "\\$&"));
      parts.push(String(strings.raw[i]));
    }
    return template(chalk27, parts.join(""));
  }
  Object.defineProperties(Chalk.prototype, styles);
  module3.exports = Chalk();
  module3.exports.supportsColor = stdoutColor;
  module3.exports.default = module3.exports;
});

// ../../node_modules/.pnpm/@babel/highlight@7.10.4/node_modules/@babel/highlight/lib/index.js
var require_lib4 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.shouldHighlight = shouldHighlight;
  exports2.getChalk = getChalk;
  exports2.default = highlight;
  var _jsTokens = _interopRequireWildcard(require_js_tokens());
  var _helperValidatorIdentifier = require_lib3();
  var _chalk = _interopRequireDefault(require_chalk());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function")
      return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function() {
      return cache;
    };
    return cache;
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return {default: obj};
    }
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function getDefs(chalk27) {
    return {
      keyword: chalk27.cyan,
      capitalized: chalk27.yellow,
      jsx_tag: chalk27.yellow,
      punctuator: chalk27.yellow,
      number: chalk27.magenta,
      string: chalk27.green,
      regex: chalk27.magenta,
      comment: chalk27.grey,
      invalid: chalk27.white.bgRed.bold
    };
  }
  const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
  const JSX_TAG = /^[a-z][\w-]*$/i;
  const BRACKET = /^[()[\]{}]$/;
  function getTokenType(match) {
    const [offset, text] = match.slice(-2);
    const token = (0, _jsTokens.matchToToken)(match);
    if (token.type === "name") {
      if ((0, _helperValidatorIdentifier.isKeyword)(token.value) || (0, _helperValidatorIdentifier.isReservedWord)(token.value)) {
        return "keyword";
      }
      if (JSX_TAG.test(token.value) && (text[offset - 1] === "<" || text.substr(offset - 2, 2) == "</")) {
        return "jsx_tag";
      }
      if (token.value[0] !== token.value[0].toLowerCase()) {
        return "capitalized";
      }
    }
    if (token.type === "punctuator" && BRACKET.test(token.value)) {
      return "bracket";
    }
    if (token.type === "invalid" && (token.value === "@" || token.value === "#")) {
      return "punctuator";
    }
    return token.type;
  }
  function highlightTokens(defs, text) {
    return text.replace(_jsTokens.default, function(...args2) {
      const type = getTokenType(args2);
      const colorize = defs[type];
      if (colorize) {
        return args2[0].split(NEWLINE).map((str) => colorize(str)).join("\n");
      } else {
        return args2[0];
      }
    });
  }
  function shouldHighlight(options) {
    return _chalk.default.supportsColor || options.forceColor;
  }
  function getChalk(options) {
    let chalk27 = _chalk.default;
    if (options.forceColor) {
      chalk27 = new _chalk.default.constructor({
        enabled: true,
        level: 1
      });
    }
    return chalk27;
  }
  function highlight(code, options = {}) {
    if (shouldHighlight(options)) {
      const chalk27 = getChalk(options);
      const defs = getDefs(chalk27);
      return highlightTokens(defs, code);
    } else {
      return code;
    }
  }
});

// ../../node_modules/.pnpm/@babel/code-frame@7.10.4/node_modules/@babel/code-frame/lib/index.js
var require_lib5 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.codeFrameColumns = codeFrameColumns;
  exports2.default = _default;
  var _highlight = _interopRequireWildcard(require_lib4());
  function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function")
      return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function() {
      return cache;
    };
    return cache;
  }
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
      return {default: obj};
    }
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  let deprecationWarningShown = false;
  function getDefs(chalk27) {
    return {
      gutter: chalk27.grey,
      marker: chalk27.red.bold,
      message: chalk27.red.bold
    };
  }
  const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
  function getMarkerLines(loc, source, opts) {
    const startLoc = Object.assign({
      column: 0,
      line: -1
    }, loc.start);
    const endLoc = Object.assign({}, startLoc, loc.end);
    const {
      linesAbove = 2,
      linesBelow = 3
    } = opts || {};
    const startLine = startLoc.line;
    const startColumn = startLoc.column;
    const endLine = endLoc.line;
    const endColumn = endLoc.column;
    let start = Math.max(startLine - (linesAbove + 1), 0);
    let end = Math.min(source.length, endLine + linesBelow);
    if (startLine === -1) {
      start = 0;
    }
    if (endLine === -1) {
      end = source.length;
    }
    const lineDiff = endLine - startLine;
    const markerLines = {};
    if (lineDiff) {
      for (let i = 0; i <= lineDiff; i++) {
        const lineNumber = i + startLine;
        if (!startColumn) {
          markerLines[lineNumber] = true;
        } else if (i === 0) {
          const sourceLength = source[lineNumber - 1].length;
          markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
        } else if (i === lineDiff) {
          markerLines[lineNumber] = [0, endColumn];
        } else {
          const sourceLength = source[lineNumber - i].length;
          markerLines[lineNumber] = [0, sourceLength];
        }
      }
    } else {
      if (startColumn === endColumn) {
        if (startColumn) {
          markerLines[startLine] = [startColumn, 0];
        } else {
          markerLines[startLine] = true;
        }
      } else {
        markerLines[startLine] = [startColumn, endColumn - startColumn];
      }
    }
    return {
      start,
      end,
      markerLines
    };
  }
  function codeFrameColumns(rawLines, loc, opts = {}) {
    const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);
    const chalk27 = (0, _highlight.getChalk)(opts);
    const defs = getDefs(chalk27);
    const maybeHighlight = (chalkFn, string) => {
      return highlighted ? chalkFn(string) : string;
    };
    const lines = rawLines.split(NEWLINE);
    const {
      start,
      end,
      markerLines
    } = getMarkerLines(loc, lines, opts);
    const hasColumns = loc.start && typeof loc.start.column === "number";
    const numberMaxWidth = String(end).length;
    const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;
    let frame = highlightedLines.split(NEWLINE).slice(start, end).map((line, index) => {
      const number = start + 1 + index;
      const paddedNumber = ` ${number}`.slice(-numberMaxWidth);
      const gutter = ` ${paddedNumber} | `;
      const hasMarker = markerLines[number];
      const lastMarkerLine = !markerLines[number + 1];
      if (hasMarker) {
        let markerLine = "";
        if (Array.isArray(hasMarker)) {
          const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
          const numberOfMarkers = hasMarker[1] || 1;
          markerLine = ["\n ", maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")), markerSpacing, maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)].join("");
          if (lastMarkerLine && opts.message) {
            markerLine += " " + maybeHighlight(defs.message, opts.message);
          }
        }
        return [maybeHighlight(defs.marker, ">"), maybeHighlight(defs.gutter, gutter), line, markerLine].join("");
      } else {
        return ` ${maybeHighlight(defs.gutter, gutter)}${line}`;
      }
    }).join("\n");
    if (opts.message && !hasColumns) {
      frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}
${frame}`;
    }
    if (highlighted) {
      return chalk27.reset(frame);
    } else {
      return frame;
    }
  }
  function _default(rawLines, lineNumber, colNumber, opts = {}) {
    if (!deprecationWarningShown) {
      deprecationWarningShown = true;
      const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
      if (process.emitWarning) {
        process.emitWarning(message, "DeprecationWarning");
      } else {
        const deprecationError = new Error(message);
        deprecationError.name = "DeprecationWarning";
        console.warn(new Error(message));
      }
    }
    colNumber = Math.max(colNumber, 0);
    const location = {
      start: {
        column: colNumber,
        line: lineNumber
      }
    };
    return codeFrameColumns(rawLines, location, opts);
  }
});

// ../../node_modules/.pnpm/parse-json@5.1.0/node_modules/parse-json/index.js
var require_parse_json = __commonJS((exports2, module3) => {
  "use strict";
  const errorEx = require_error_ex();
  const fallback = require_json_parse_even_better_errors();
  const {default: LinesAndColumns} = require_dist9();
  const {codeFrameColumns} = require_lib5();
  const JSONError = errorEx("JSONError", {
    fileName: errorEx.append("in %s"),
    codeFrame: errorEx.append("\n\n%s\n")
  });
  module3.exports = (string, reviver, filename) => {
    if (typeof reviver === "string") {
      filename = reviver;
      reviver = null;
    }
    try {
      try {
        return JSON.parse(string, reviver);
      } catch (error) {
        fallback(string, reviver);
        throw error;
      }
    } catch (error) {
      error.message = error.message.replace(/\n/g, "");
      const indexMatch = error.message.match(/in JSON at position (\d+) while parsing/);
      const jsonError = new JSONError(error);
      if (filename) {
        jsonError.fileName = filename;
      }
      if (indexMatch && indexMatch.length > 0) {
        const lines = new LinesAndColumns(string);
        const index = Number(indexMatch[1]);
        const location = lines.locationForIndex(index);
        const codeFrame = codeFrameColumns(string, {start: {line: location.line + 1, column: location.column + 1}}, {highlightCode: true});
        jsonError.codeFrame = codeFrame;
      }
      throw jsonError;
    }
  };
});

// ../../node_modules/.pnpm/semver@5.7.1/node_modules/semver/semver.js
var require_semver2 = __commonJS((exports2, module3) => {
  exports2 = module3.exports = SemVer;
  var debug3;
  if (typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
    debug3 = function() {
      var args2 = Array.prototype.slice.call(arguments, 0);
      args2.unshift("SEMVER");
      console.log.apply(console, args2);
    };
  } else {
    debug3 = function() {
    };
  }
  exports2.SEMVER_SPEC_VERSION = "2.0.0";
  var MAX_LENGTH = 256;
  var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
  var MAX_SAFE_COMPONENT_LENGTH = 16;
  var re = exports2.re = [];
  var src = exports2.src = [];
  var R = 0;
  var NUMERICIDENTIFIER = R++;
  src[NUMERICIDENTIFIER] = "0|[1-9]\\d*";
  var NUMERICIDENTIFIERLOOSE = R++;
  src[NUMERICIDENTIFIERLOOSE] = "[0-9]+";
  var NONNUMERICIDENTIFIER = R++;
  src[NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
  var MAINVERSION = R++;
  src[MAINVERSION] = "(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")\\.(" + src[NUMERICIDENTIFIER] + ")";
  var MAINVERSIONLOOSE = R++;
  src[MAINVERSIONLOOSE] = "(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[NUMERICIDENTIFIERLOOSE] + ")";
  var PRERELEASEIDENTIFIER = R++;
  src[PRERELEASEIDENTIFIER] = "(?:" + src[NUMERICIDENTIFIER] + "|" + src[NONNUMERICIDENTIFIER] + ")";
  var PRERELEASEIDENTIFIERLOOSE = R++;
  src[PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[NUMERICIDENTIFIERLOOSE] + "|" + src[NONNUMERICIDENTIFIER] + ")";
  var PRERELEASE = R++;
  src[PRERELEASE] = "(?:-(" + src[PRERELEASEIDENTIFIER] + "(?:\\." + src[PRERELEASEIDENTIFIER] + ")*))";
  var PRERELEASELOOSE = R++;
  src[PRERELEASELOOSE] = "(?:-?(" + src[PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[PRERELEASEIDENTIFIERLOOSE] + ")*))";
  var BUILDIDENTIFIER = R++;
  src[BUILDIDENTIFIER] = "[0-9A-Za-z-]+";
  var BUILD = R++;
  src[BUILD] = "(?:\\+(" + src[BUILDIDENTIFIER] + "(?:\\." + src[BUILDIDENTIFIER] + ")*))";
  var FULL = R++;
  var FULLPLAIN = "v?" + src[MAINVERSION] + src[PRERELEASE] + "?" + src[BUILD] + "?";
  src[FULL] = "^" + FULLPLAIN + "$";
  var LOOSEPLAIN = "[v=\\s]*" + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + "?" + src[BUILD] + "?";
  var LOOSE = R++;
  src[LOOSE] = "^" + LOOSEPLAIN + "$";
  var GTLT = R++;
  src[GTLT] = "((?:<|>)?=?)";
  var XRANGEIDENTIFIERLOOSE = R++;
  src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
  var XRANGEIDENTIFIER = R++;
  src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + "|x|X|\\*";
  var XRANGEPLAIN = R++;
  src[XRANGEPLAIN] = "[v=\\s]*(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:\\.(" + src[XRANGEIDENTIFIER] + ")(?:" + src[PRERELEASE] + ")?" + src[BUILD] + "?)?)?";
  var XRANGEPLAINLOOSE = R++;
  src[XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[XRANGEIDENTIFIERLOOSE] + ")(?:" + src[PRERELEASELOOSE] + ")?" + src[BUILD] + "?)?)?";
  var XRANGE = R++;
  src[XRANGE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAIN] + "$";
  var XRANGELOOSE = R++;
  src[XRANGELOOSE] = "^" + src[GTLT] + "\\s*" + src[XRANGEPLAINLOOSE] + "$";
  var COERCE = R++;
  src[COERCE] = "(?:^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
  var LONETILDE = R++;
  src[LONETILDE] = "(?:~>?)";
  var TILDETRIM = R++;
  src[TILDETRIM] = "(\\s*)" + src[LONETILDE] + "\\s+";
  re[TILDETRIM] = new RegExp(src[TILDETRIM], "g");
  var tildeTrimReplace = "$1~";
  var TILDE = R++;
  src[TILDE] = "^" + src[LONETILDE] + src[XRANGEPLAIN] + "$";
  var TILDELOOSE = R++;
  src[TILDELOOSE] = "^" + src[LONETILDE] + src[XRANGEPLAINLOOSE] + "$";
  var LONECARET = R++;
  src[LONECARET] = "(?:\\^)";
  var CARETTRIM = R++;
  src[CARETTRIM] = "(\\s*)" + src[LONECARET] + "\\s+";
  re[CARETTRIM] = new RegExp(src[CARETTRIM], "g");
  var caretTrimReplace = "$1^";
  var CARET = R++;
  src[CARET] = "^" + src[LONECARET] + src[XRANGEPLAIN] + "$";
  var CARETLOOSE = R++;
  src[CARETLOOSE] = "^" + src[LONECARET] + src[XRANGEPLAINLOOSE] + "$";
  var COMPARATORLOOSE = R++;
  src[COMPARATORLOOSE] = "^" + src[GTLT] + "\\s*(" + LOOSEPLAIN + ")$|^$";
  var COMPARATOR = R++;
  src[COMPARATOR] = "^" + src[GTLT] + "\\s*(" + FULLPLAIN + ")$|^$";
  var COMPARATORTRIM = R++;
  src[COMPARATORTRIM] = "(\\s*)" + src[GTLT] + "\\s*(" + LOOSEPLAIN + "|" + src[XRANGEPLAIN] + ")";
  re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], "g");
  var comparatorTrimReplace = "$1$2$3";
  var HYPHENRANGE = R++;
  src[HYPHENRANGE] = "^\\s*(" + src[XRANGEPLAIN] + ")\\s+-\\s+(" + src[XRANGEPLAIN] + ")\\s*$";
  var HYPHENRANGELOOSE = R++;
  src[HYPHENRANGELOOSE] = "^\\s*(" + src[XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[XRANGEPLAINLOOSE] + ")\\s*$";
  var STAR = R++;
  src[STAR] = "(<|>)?=?\\s*\\*";
  for (var i = 0; i < R; i++) {
    debug3(i, src[i]);
    if (!re[i]) {
      re[i] = new RegExp(src[i]);
    }
  }
  exports2.parse = parse;
  function parse(version, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (version instanceof SemVer) {
      return version;
    }
    if (typeof version !== "string") {
      return null;
    }
    if (version.length > MAX_LENGTH) {
      return null;
    }
    var r = options.loose ? re[LOOSE] : re[FULL];
    if (!r.test(version)) {
      return null;
    }
    try {
      return new SemVer(version, options);
    } catch (er) {
      return null;
    }
  }
  exports2.valid = valid;
  function valid(version, options) {
    var v = parse(version, options);
    return v ? v.version : null;
  }
  exports2.clean = clean;
  function clean(version, options) {
    var s = parse(version.trim().replace(/^[=v]+/, ""), options);
    return s ? s.version : null;
  }
  exports2.SemVer = SemVer;
  function SemVer(version, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (version instanceof SemVer) {
      if (version.loose === options.loose) {
        return version;
      } else {
        version = version.version;
      }
    } else if (typeof version !== "string") {
      throw new TypeError("Invalid Version: " + version);
    }
    if (version.length > MAX_LENGTH) {
      throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
    }
    if (!(this instanceof SemVer)) {
      return new SemVer(version, options);
    }
    debug3("SemVer", version, options);
    this.options = options;
    this.loose = !!options.loose;
    var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL]);
    if (!m) {
      throw new TypeError("Invalid Version: " + version);
    }
    this.raw = version;
    this.major = +m[1];
    this.minor = +m[2];
    this.patch = +m[3];
    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError("Invalid major version");
    }
    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError("Invalid minor version");
    }
    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError("Invalid patch version");
    }
    if (!m[4]) {
      this.prerelease = [];
    } else {
      this.prerelease = m[4].split(".").map(function(id) {
        if (/^[0-9]+$/.test(id)) {
          var num = +id;
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num;
          }
        }
        return id;
      });
    }
    this.build = m[5] ? m[5].split(".") : [];
    this.format();
  }
  SemVer.prototype.format = function() {
    this.version = this.major + "." + this.minor + "." + this.patch;
    if (this.prerelease.length) {
      this.version += "-" + this.prerelease.join(".");
    }
    return this.version;
  };
  SemVer.prototype.toString = function() {
    return this.version;
  };
  SemVer.prototype.compare = function(other) {
    debug3("SemVer.compare", this.version, this.options, other);
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }
    return this.compareMain(other) || this.comparePre(other);
  };
  SemVer.prototype.compareMain = function(other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }
    return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
  };
  SemVer.prototype.comparePre = function(other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options);
    }
    if (this.prerelease.length && !other.prerelease.length) {
      return -1;
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1;
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0;
    }
    var i2 = 0;
    do {
      var a = this.prerelease[i2];
      var b = other.prerelease[i2];
      debug3("prerelease compare", i2, a, b);
      if (a === void 0 && b === void 0) {
        return 0;
      } else if (b === void 0) {
        return 1;
      } else if (a === void 0) {
        return -1;
      } else if (a === b) {
        continue;
      } else {
        return compareIdentifiers(a, b);
      }
    } while (++i2);
  };
  SemVer.prototype.inc = function(release, identifier) {
    switch (release) {
      case "premajor":
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor = 0;
        this.major++;
        this.inc("pre", identifier);
        break;
      case "preminor":
        this.prerelease.length = 0;
        this.patch = 0;
        this.minor++;
        this.inc("pre", identifier);
        break;
      case "prepatch":
        this.prerelease.length = 0;
        this.inc("patch", identifier);
        this.inc("pre", identifier);
        break;
      case "prerelease":
        if (this.prerelease.length === 0) {
          this.inc("patch", identifier);
        }
        this.inc("pre", identifier);
        break;
      case "major":
        if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
          this.major++;
        }
        this.minor = 0;
        this.patch = 0;
        this.prerelease = [];
        break;
      case "minor":
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++;
        }
        this.patch = 0;
        this.prerelease = [];
        break;
      case "patch":
        if (this.prerelease.length === 0) {
          this.patch++;
        }
        this.prerelease = [];
        break;
      case "pre":
        if (this.prerelease.length === 0) {
          this.prerelease = [0];
        } else {
          var i2 = this.prerelease.length;
          while (--i2 >= 0) {
            if (typeof this.prerelease[i2] === "number") {
              this.prerelease[i2]++;
              i2 = -2;
            }
          }
          if (i2 === -1) {
            this.prerelease.push(0);
          }
        }
        if (identifier) {
          if (this.prerelease[0] === identifier) {
            if (isNaN(this.prerelease[1])) {
              this.prerelease = [identifier, 0];
            }
          } else {
            this.prerelease = [identifier, 0];
          }
        }
        break;
      default:
        throw new Error("invalid increment argument: " + release);
    }
    this.format();
    this.raw = this.version;
    return this;
  };
  exports2.inc = inc;
  function inc(version, release, loose, identifier) {
    if (typeof loose === "string") {
      identifier = loose;
      loose = void 0;
    }
    try {
      return new SemVer(version, loose).inc(release, identifier).version;
    } catch (er) {
      return null;
    }
  }
  exports2.diff = diff;
  function diff(version1, version2) {
    if (eq(version1, version2)) {
      return null;
    } else {
      var v1 = parse(version1);
      var v2 = parse(version2);
      var prefix = "";
      if (v1.prerelease.length || v2.prerelease.length) {
        prefix = "pre";
        var defaultResult = "prerelease";
      }
      for (var key in v1) {
        if (key === "major" || key === "minor" || key === "patch") {
          if (v1[key] !== v2[key]) {
            return prefix + key;
          }
        }
      }
      return defaultResult;
    }
  }
  exports2.compareIdentifiers = compareIdentifiers;
  var numeric = /^[0-9]+$/;
  function compareIdentifiers(a, b) {
    var anum = numeric.test(a);
    var bnum = numeric.test(b);
    if (anum && bnum) {
      a = +a;
      b = +b;
    }
    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
  }
  exports2.rcompareIdentifiers = rcompareIdentifiers;
  function rcompareIdentifiers(a, b) {
    return compareIdentifiers(b, a);
  }
  exports2.major = major;
  function major(a, loose) {
    return new SemVer(a, loose).major;
  }
  exports2.minor = minor;
  function minor(a, loose) {
    return new SemVer(a, loose).minor;
  }
  exports2.patch = patch;
  function patch(a, loose) {
    return new SemVer(a, loose).patch;
  }
  exports2.compare = compare;
  function compare(a, b, loose) {
    return new SemVer(a, loose).compare(new SemVer(b, loose));
  }
  exports2.compareLoose = compareLoose;
  function compareLoose(a, b) {
    return compare(a, b, true);
  }
  exports2.rcompare = rcompare;
  function rcompare(a, b, loose) {
    return compare(b, a, loose);
  }
  exports2.sort = sort;
  function sort(list, loose) {
    return list.sort(function(a, b) {
      return exports2.compare(a, b, loose);
    });
  }
  exports2.rsort = rsort;
  function rsort(list, loose) {
    return list.sort(function(a, b) {
      return exports2.rcompare(a, b, loose);
    });
  }
  exports2.gt = gt;
  function gt(a, b, loose) {
    return compare(a, b, loose) > 0;
  }
  exports2.lt = lt;
  function lt(a, b, loose) {
    return compare(a, b, loose) < 0;
  }
  exports2.eq = eq;
  function eq(a, b, loose) {
    return compare(a, b, loose) === 0;
  }
  exports2.neq = neq;
  function neq(a, b, loose) {
    return compare(a, b, loose) !== 0;
  }
  exports2.gte = gte;
  function gte(a, b, loose) {
    return compare(a, b, loose) >= 0;
  }
  exports2.lte = lte;
  function lte(a, b, loose) {
    return compare(a, b, loose) <= 0;
  }
  exports2.cmp = cmp;
  function cmp(a, op, b, loose) {
    switch (op) {
      case "===":
        if (typeof a === "object")
          a = a.version;
        if (typeof b === "object")
          b = b.version;
        return a === b;
      case "!==":
        if (typeof a === "object")
          a = a.version;
        if (typeof b === "object")
          b = b.version;
        return a !== b;
      case "":
      case "=":
      case "==":
        return eq(a, b, loose);
      case "!=":
        return neq(a, b, loose);
      case ">":
        return gt(a, b, loose);
      case ">=":
        return gte(a, b, loose);
      case "<":
        return lt(a, b, loose);
      case "<=":
        return lte(a, b, loose);
      default:
        throw new TypeError("Invalid operator: " + op);
    }
  }
  exports2.Comparator = Comparator;
  function Comparator(comp, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (comp instanceof Comparator) {
      if (comp.loose === !!options.loose) {
        return comp;
      } else {
        comp = comp.value;
      }
    }
    if (!(this instanceof Comparator)) {
      return new Comparator(comp, options);
    }
    debug3("comparator", comp, options);
    this.options = options;
    this.loose = !!options.loose;
    this.parse(comp);
    if (this.semver === ANY) {
      this.value = "";
    } else {
      this.value = this.operator + this.semver.version;
    }
    debug3("comp", this);
  }
  var ANY = {};
  Comparator.prototype.parse = function(comp) {
    var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
    var m = comp.match(r);
    if (!m) {
      throw new TypeError("Invalid comparator: " + comp);
    }
    this.operator = m[1];
    if (this.operator === "=") {
      this.operator = "";
    }
    if (!m[2]) {
      this.semver = ANY;
    } else {
      this.semver = new SemVer(m[2], this.options.loose);
    }
  };
  Comparator.prototype.toString = function() {
    return this.value;
  };
  Comparator.prototype.test = function(version) {
    debug3("Comparator.test", version, this.options.loose);
    if (this.semver === ANY) {
      return true;
    }
    if (typeof version === "string") {
      version = new SemVer(version, this.options);
    }
    return cmp(version, this.operator, this.semver, this.options);
  };
  Comparator.prototype.intersects = function(comp, options) {
    if (!(comp instanceof Comparator)) {
      throw new TypeError("a Comparator is required");
    }
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    var rangeTmp;
    if (this.operator === "") {
      rangeTmp = new Range(comp.value, options);
      return satisfies(this.value, rangeTmp, options);
    } else if (comp.operator === "") {
      rangeTmp = new Range(this.value, options);
      return satisfies(comp.semver, rangeTmp, options);
    }
    var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
    var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
    var sameSemVer = this.semver.version === comp.semver.version;
    var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
    var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && ((this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"));
    var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ((this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">"));
    return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
  };
  exports2.Range = Range;
  function Range(range, options) {
    if (!options || typeof options !== "object") {
      options = {
        loose: !!options,
        includePrerelease: false
      };
    }
    if (range instanceof Range) {
      if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
        return range;
      } else {
        return new Range(range.raw, options);
      }
    }
    if (range instanceof Comparator) {
      return new Range(range.value, options);
    }
    if (!(this instanceof Range)) {
      return new Range(range, options);
    }
    this.options = options;
    this.loose = !!options.loose;
    this.includePrerelease = !!options.includePrerelease;
    this.raw = range;
    this.set = range.split(/\s*\|\|\s*/).map(function(range2) {
      return this.parseRange(range2.trim());
    }, this).filter(function(c) {
      return c.length;
    });
    if (!this.set.length) {
      throw new TypeError("Invalid SemVer Range: " + range);
    }
    this.format();
  }
  Range.prototype.format = function() {
    this.range = this.set.map(function(comps) {
      return comps.join(" ").trim();
    }).join("||").trim();
    return this.range;
  };
  Range.prototype.toString = function() {
    return this.range;
  };
  Range.prototype.parseRange = function(range) {
    var loose = this.options.loose;
    range = range.trim();
    var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
    range = range.replace(hr, hyphenReplace);
    debug3("hyphen replace", range);
    range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
    debug3("comparator trim", range, re[COMPARATORTRIM]);
    range = range.replace(re[TILDETRIM], tildeTrimReplace);
    range = range.replace(re[CARETTRIM], caretTrimReplace);
    range = range.split(/\s+/).join(" ");
    var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
    var set = range.split(" ").map(function(comp) {
      return parseComparator(comp, this.options);
    }, this).join(" ").split(/\s+/);
    if (this.options.loose) {
      set = set.filter(function(comp) {
        return !!comp.match(compRe);
      });
    }
    set = set.map(function(comp) {
      return new Comparator(comp, this.options);
    }, this);
    return set;
  };
  Range.prototype.intersects = function(range, options) {
    if (!(range instanceof Range)) {
      throw new TypeError("a Range is required");
    }
    return this.set.some(function(thisComparators) {
      return thisComparators.every(function(thisComparator) {
        return range.set.some(function(rangeComparators) {
          return rangeComparators.every(function(rangeComparator) {
            return thisComparator.intersects(rangeComparator, options);
          });
        });
      });
    });
  };
  exports2.toComparators = toComparators;
  function toComparators(range, options) {
    return new Range(range, options).set.map(function(comp) {
      return comp.map(function(c) {
        return c.value;
      }).join(" ").trim().split(" ");
    });
  }
  function parseComparator(comp, options) {
    debug3("comp", comp, options);
    comp = replaceCarets(comp, options);
    debug3("caret", comp);
    comp = replaceTildes(comp, options);
    debug3("tildes", comp);
    comp = replaceXRanges(comp, options);
    debug3("xrange", comp);
    comp = replaceStars(comp, options);
    debug3("stars", comp);
    return comp;
  }
  function isX(id) {
    return !id || id.toLowerCase() === "x" || id === "*";
  }
  function replaceTildes(comp, options) {
    return comp.trim().split(/\s+/).map(function(comp2) {
      return replaceTilde(comp2, options);
    }).join(" ");
  }
  function replaceTilde(comp, options) {
    var r = options.loose ? re[TILDELOOSE] : re[TILDE];
    return comp.replace(r, function(_2, M, m, p, pr) {
      debug3("tilde", comp, _2, M, m, p, pr);
      var ret;
      if (isX(M)) {
        ret = "";
      } else if (isX(m)) {
        ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
      } else if (isX(p)) {
        ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
      } else if (pr) {
        debug3("replaceTilde pr", pr);
        ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
      } else {
        ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
      }
      debug3("tilde return", ret);
      return ret;
    });
  }
  function replaceCarets(comp, options) {
    return comp.trim().split(/\s+/).map(function(comp2) {
      return replaceCaret(comp2, options);
    }).join(" ");
  }
  function replaceCaret(comp, options) {
    debug3("caret", comp, options);
    var r = options.loose ? re[CARETLOOSE] : re[CARET];
    return comp.replace(r, function(_2, M, m, p, pr) {
      debug3("caret", comp, _2, M, m, p, pr);
      var ret;
      if (isX(M)) {
        ret = "";
      } else if (isX(m)) {
        ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
      } else if (isX(p)) {
        if (M === "0") {
          ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
        } else {
          ret = ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0";
        }
      } else if (pr) {
        debug3("replaceCaret pr", pr);
        if (M === "0") {
          if (m === "0") {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1);
          } else {
            ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0";
          }
        } else {
          ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
        }
      } else {
        debug3("no pr");
        if (M === "0") {
          if (m === "0") {
            ret = ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1);
          } else {
            ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0";
          }
        } else {
          ret = ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0";
        }
      }
      debug3("caret return", ret);
      return ret;
    });
  }
  function replaceXRanges(comp, options) {
    debug3("replaceXRanges", comp, options);
    return comp.split(/\s+/).map(function(comp2) {
      return replaceXRange(comp2, options);
    }).join(" ");
  }
  function replaceXRange(comp, options) {
    comp = comp.trim();
    var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
    return comp.replace(r, function(ret, gtlt, M, m, p, pr) {
      debug3("xRange", comp, ret, gtlt, M, m, p, pr);
      var xM = isX(M);
      var xm = xM || isX(m);
      var xp = xm || isX(p);
      var anyX = xp;
      if (gtlt === "=" && anyX) {
        gtlt = "";
      }
      if (xM) {
        if (gtlt === ">" || gtlt === "<") {
          ret = "<0.0.0";
        } else {
          ret = "*";
        }
      } else if (gtlt && anyX) {
        if (xm) {
          m = 0;
        }
        p = 0;
        if (gtlt === ">") {
          gtlt = ">=";
          if (xm) {
            M = +M + 1;
            m = 0;
            p = 0;
          } else {
            m = +m + 1;
            p = 0;
          }
        } else if (gtlt === "<=") {
          gtlt = "<";
          if (xm) {
            M = +M + 1;
          } else {
            m = +m + 1;
          }
        }
        ret = gtlt + M + "." + m + "." + p;
      } else if (xm) {
        ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
      } else if (xp) {
        ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0";
      }
      debug3("xRange return", ret);
      return ret;
    });
  }
  function replaceStars(comp, options) {
    debug3("replaceStars", comp, options);
    return comp.trim().replace(re[STAR], "");
  }
  function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
    if (isX(fM)) {
      from = "";
    } else if (isX(fm)) {
      from = ">=" + fM + ".0.0";
    } else if (isX(fp)) {
      from = ">=" + fM + "." + fm + ".0";
    } else {
      from = ">=" + from;
    }
    if (isX(tM)) {
      to = "";
    } else if (isX(tm)) {
      to = "<" + (+tM + 1) + ".0.0";
    } else if (isX(tp)) {
      to = "<" + tM + "." + (+tm + 1) + ".0";
    } else if (tpr) {
      to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
    } else {
      to = "<=" + to;
    }
    return (from + " " + to).trim();
  }
  Range.prototype.test = function(version) {
    if (!version) {
      return false;
    }
    if (typeof version === "string") {
      version = new SemVer(version, this.options);
    }
    for (var i2 = 0; i2 < this.set.length; i2++) {
      if (testSet(this.set[i2], version, this.options)) {
        return true;
      }
    }
    return false;
  };
  function testSet(set, version, options) {
    for (var i2 = 0; i2 < set.length; i2++) {
      if (!set[i2].test(version)) {
        return false;
      }
    }
    if (version.prerelease.length && !options.includePrerelease) {
      for (i2 = 0; i2 < set.length; i2++) {
        debug3(set[i2].semver);
        if (set[i2].semver === ANY) {
          continue;
        }
        if (set[i2].semver.prerelease.length > 0) {
          var allowed = set[i2].semver;
          if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
            return true;
          }
        }
      }
      return false;
    }
    return true;
  }
  exports2.satisfies = satisfies;
  function satisfies(version, range, options) {
    try {
      range = new Range(range, options);
    } catch (er) {
      return false;
    }
    return range.test(version);
  }
  exports2.maxSatisfying = maxSatisfying;
  function maxSatisfying(versions, range, options) {
    var max = null;
    var maxSV = null;
    try {
      var rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    versions.forEach(function(v) {
      if (rangeObj.test(v)) {
        if (!max || maxSV.compare(v) === -1) {
          max = v;
          maxSV = new SemVer(max, options);
        }
      }
    });
    return max;
  }
  exports2.minSatisfying = minSatisfying;
  function minSatisfying(versions, range, options) {
    var min = null;
    var minSV = null;
    try {
      var rangeObj = new Range(range, options);
    } catch (er) {
      return null;
    }
    versions.forEach(function(v) {
      if (rangeObj.test(v)) {
        if (!min || minSV.compare(v) === 1) {
          min = v;
          minSV = new SemVer(min, options);
        }
      }
    });
    return min;
  }
  exports2.minVersion = minVersion;
  function minVersion(range, loose) {
    range = new Range(range, loose);
    var minver = new SemVer("0.0.0");
    if (range.test(minver)) {
      return minver;
    }
    minver = new SemVer("0.0.0-0");
    if (range.test(minver)) {
      return minver;
    }
    minver = null;
    for (var i2 = 0; i2 < range.set.length; ++i2) {
      var comparators = range.set[i2];
      comparators.forEach(function(comparator) {
        var compver = new SemVer(comparator.semver.version);
        switch (comparator.operator) {
          case ">":
            if (compver.prerelease.length === 0) {
              compver.patch++;
            } else {
              compver.prerelease.push(0);
            }
            compver.raw = compver.format();
          case "":
          case ">=":
            if (!minver || gt(minver, compver)) {
              minver = compver;
            }
            break;
          case "<":
          case "<=":
            break;
          default:
            throw new Error("Unexpected operation: " + comparator.operator);
        }
      });
    }
    if (minver && range.test(minver)) {
      return minver;
    }
    return null;
  }
  exports2.validRange = validRange;
  function validRange(range, options) {
    try {
      return new Range(range, options).range || "*";
    } catch (er) {
      return null;
    }
  }
  exports2.ltr = ltr;
  function ltr(version, range, options) {
    return outside(version, range, "<", options);
  }
  exports2.gtr = gtr;
  function gtr(version, range, options) {
    return outside(version, range, ">", options);
  }
  exports2.outside = outside;
  function outside(version, range, hilo, options) {
    version = new SemVer(version, options);
    range = new Range(range, options);
    var gtfn, ltefn, ltfn, comp, ecomp;
    switch (hilo) {
      case ">":
        gtfn = gt;
        ltefn = lte;
        ltfn = lt;
        comp = ">";
        ecomp = ">=";
        break;
      case "<":
        gtfn = lt;
        ltefn = gte;
        ltfn = gt;
        comp = "<";
        ecomp = "<=";
        break;
      default:
        throw new TypeError('Must provide a hilo val of "<" or ">"');
    }
    if (satisfies(version, range, options)) {
      return false;
    }
    for (var i2 = 0; i2 < range.set.length; ++i2) {
      var comparators = range.set[i2];
      var high = null;
      var low = null;
      comparators.forEach(function(comparator) {
        if (comparator.semver === ANY) {
          comparator = new Comparator(">=0.0.0");
        }
        high = high || comparator;
        low = low || comparator;
        if (gtfn(comparator.semver, high.semver, options)) {
          high = comparator;
        } else if (ltfn(comparator.semver, low.semver, options)) {
          low = comparator;
        }
      });
      if (high.operator === comp || high.operator === ecomp) {
        return false;
      }
      if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
        return false;
      } else if (low.operator === ecomp && ltfn(version, low.semver)) {
        return false;
      }
    }
    return true;
  }
  exports2.prerelease = prerelease;
  function prerelease(version, options) {
    var parsed = parse(version, options);
    return parsed && parsed.prerelease.length ? parsed.prerelease : null;
  }
  exports2.intersects = intersects;
  function intersects(r1, r2, options) {
    r1 = new Range(r1, options);
    r2 = new Range(r2, options);
    return r1.intersects(r2);
  }
  exports2.coerce = coerce;
  function coerce(version) {
    if (version instanceof SemVer) {
      return version;
    }
    if (typeof version !== "string") {
      return null;
    }
    var match = version.match(re[COERCE]);
    if (match == null) {
      return null;
    }
    return parse(match[1] + "." + (match[2] || "0") + "." + (match[3] || "0"));
  }
});

// ../../node_modules/.pnpm/spdx-license-ids@3.0.6/node_modules/spdx-license-ids/index.json
var require_spdx_license_ids = __commonJS((exports2, module3) => {
  module3.exports = [
    "0BSD",
    "AAL",
    "ADSL",
    "AFL-1.1",
    "AFL-1.2",
    "AFL-2.0",
    "AFL-2.1",
    "AFL-3.0",
    "AGPL-1.0-only",
    "AGPL-1.0-or-later",
    "AGPL-3.0-only",
    "AGPL-3.0-or-later",
    "AMDPLPA",
    "AML",
    "AMPAS",
    "ANTLR-PD",
    "APAFML",
    "APL-1.0",
    "APSL-1.0",
    "APSL-1.1",
    "APSL-1.2",
    "APSL-2.0",
    "Abstyles",
    "Adobe-2006",
    "Adobe-Glyph",
    "Afmparse",
    "Aladdin",
    "Apache-1.0",
    "Apache-1.1",
    "Apache-2.0",
    "Artistic-1.0",
    "Artistic-1.0-Perl",
    "Artistic-1.0-cl8",
    "Artistic-2.0",
    "BSD-1-Clause",
    "BSD-2-Clause",
    "BSD-2-Clause-Patent",
    "BSD-2-Clause-Views",
    "BSD-3-Clause",
    "BSD-3-Clause-Attribution",
    "BSD-3-Clause-Clear",
    "BSD-3-Clause-LBNL",
    "BSD-3-Clause-No-Nuclear-License",
    "BSD-3-Clause-No-Nuclear-License-2014",
    "BSD-3-Clause-No-Nuclear-Warranty",
    "BSD-3-Clause-Open-MPI",
    "BSD-4-Clause",
    "BSD-4-Clause-UC",
    "BSD-Protection",
    "BSD-Source-Code",
    "BSL-1.0",
    "Bahyph",
    "Barr",
    "Beerware",
    "BitTorrent-1.0",
    "BitTorrent-1.1",
    "BlueOak-1.0.0",
    "Borceux",
    "CAL-1.0",
    "CAL-1.0-Combined-Work-Exception",
    "CATOSL-1.1",
    "CC-BY-1.0",
    "CC-BY-2.0",
    "CC-BY-2.5",
    "CC-BY-3.0",
    "CC-BY-3.0-AT",
    "CC-BY-4.0",
    "CC-BY-NC-1.0",
    "CC-BY-NC-2.0",
    "CC-BY-NC-2.5",
    "CC-BY-NC-3.0",
    "CC-BY-NC-4.0",
    "CC-BY-NC-ND-1.0",
    "CC-BY-NC-ND-2.0",
    "CC-BY-NC-ND-2.5",
    "CC-BY-NC-ND-3.0",
    "CC-BY-NC-ND-3.0-IGO",
    "CC-BY-NC-ND-4.0",
    "CC-BY-NC-SA-1.0",
    "CC-BY-NC-SA-2.0",
    "CC-BY-NC-SA-2.5",
    "CC-BY-NC-SA-3.0",
    "CC-BY-NC-SA-4.0",
    "CC-BY-ND-1.0",
    "CC-BY-ND-2.0",
    "CC-BY-ND-2.5",
    "CC-BY-ND-3.0",
    "CC-BY-ND-4.0",
    "CC-BY-SA-1.0",
    "CC-BY-SA-2.0",
    "CC-BY-SA-2.5",
    "CC-BY-SA-3.0",
    "CC-BY-SA-3.0-AT",
    "CC-BY-SA-4.0",
    "CC-PDDC",
    "CC0-1.0",
    "CDDL-1.0",
    "CDDL-1.1",
    "CDLA-Permissive-1.0",
    "CDLA-Sharing-1.0",
    "CECILL-1.0",
    "CECILL-1.1",
    "CECILL-2.0",
    "CECILL-2.1",
    "CECILL-B",
    "CECILL-C",
    "CERN-OHL-1.1",
    "CERN-OHL-1.2",
    "CERN-OHL-P-2.0",
    "CERN-OHL-S-2.0",
    "CERN-OHL-W-2.0",
    "CNRI-Jython",
    "CNRI-Python",
    "CNRI-Python-GPL-Compatible",
    "CPAL-1.0",
    "CPL-1.0",
    "CPOL-1.02",
    "CUA-OPL-1.0",
    "Caldera",
    "ClArtistic",
    "Condor-1.1",
    "Crossword",
    "CrystalStacker",
    "Cube",
    "D-FSL-1.0",
    "DOC",
    "DSDP",
    "Dotseqn",
    "ECL-1.0",
    "ECL-2.0",
    "EFL-1.0",
    "EFL-2.0",
    "EPICS",
    "EPL-1.0",
    "EPL-2.0",
    "EUDatagrid",
    "EUPL-1.0",
    "EUPL-1.1",
    "EUPL-1.2",
    "Entessa",
    "ErlPL-1.1",
    "Eurosym",
    "FSFAP",
    "FSFUL",
    "FSFULLR",
    "FTL",
    "Fair",
    "Frameworx-1.0",
    "FreeImage",
    "GFDL-1.1-invariants-only",
    "GFDL-1.1-invariants-or-later",
    "GFDL-1.1-no-invariants-only",
    "GFDL-1.1-no-invariants-or-later",
    "GFDL-1.1-only",
    "GFDL-1.1-or-later",
    "GFDL-1.2-invariants-only",
    "GFDL-1.2-invariants-or-later",
    "GFDL-1.2-no-invariants-only",
    "GFDL-1.2-no-invariants-or-later",
    "GFDL-1.2-only",
    "GFDL-1.2-or-later",
    "GFDL-1.3-invariants-only",
    "GFDL-1.3-invariants-or-later",
    "GFDL-1.3-no-invariants-only",
    "GFDL-1.3-no-invariants-or-later",
    "GFDL-1.3-only",
    "GFDL-1.3-or-later",
    "GL2PS",
    "GLWTPL",
    "GPL-1.0-only",
    "GPL-1.0-or-later",
    "GPL-2.0-only",
    "GPL-2.0-or-later",
    "GPL-3.0-only",
    "GPL-3.0-or-later",
    "Giftware",
    "Glide",
    "Glulxe",
    "HPND",
    "HPND-sell-variant",
    "HaskellReport",
    "Hippocratic-2.1",
    "IBM-pibs",
    "ICU",
    "IJG",
    "IPA",
    "IPL-1.0",
    "ISC",
    "ImageMagick",
    "Imlib2",
    "Info-ZIP",
    "Intel",
    "Intel-ACPI",
    "Interbase-1.0",
    "JPNIC",
    "JSON",
    "JasPer-2.0",
    "LAL-1.2",
    "LAL-1.3",
    "LGPL-2.0-only",
    "LGPL-2.0-or-later",
    "LGPL-2.1-only",
    "LGPL-2.1-or-later",
    "LGPL-3.0-only",
    "LGPL-3.0-or-later",
    "LGPLLR",
    "LPL-1.0",
    "LPL-1.02",
    "LPPL-1.0",
    "LPPL-1.1",
    "LPPL-1.2",
    "LPPL-1.3a",
    "LPPL-1.3c",
    "Latex2e",
    "Leptonica",
    "LiLiQ-P-1.1",
    "LiLiQ-R-1.1",
    "LiLiQ-Rplus-1.1",
    "Libpng",
    "Linux-OpenIB",
    "MIT",
    "MIT-0",
    "MIT-CMU",
    "MIT-advertising",
    "MIT-enna",
    "MIT-feh",
    "MITNFA",
    "MPL-1.0",
    "MPL-1.1",
    "MPL-2.0",
    "MPL-2.0-no-copyleft-exception",
    "MS-PL",
    "MS-RL",
    "MTLL",
    "MakeIndex",
    "MirOS",
    "Motosoto",
    "MulanPSL-1.0",
    "MulanPSL-2.0",
    "Multics",
    "Mup",
    "NASA-1.3",
    "NBPL-1.0",
    "NCGL-UK-2.0",
    "NCSA",
    "NGPL",
    "NIST-PD",
    "NIST-PD-fallback",
    "NLOD-1.0",
    "NLPL",
    "NOSL",
    "NPL-1.0",
    "NPL-1.1",
    "NPOSL-3.0",
    "NRL",
    "NTP",
    "NTP-0",
    "Naumen",
    "Net-SNMP",
    "NetCDF",
    "Newsletr",
    "Nokia",
    "Noweb",
    "O-UDA-1.0",
    "OCCT-PL",
    "OCLC-2.0",
    "ODC-By-1.0",
    "ODbL-1.0",
    "OFL-1.0",
    "OFL-1.0-RFN",
    "OFL-1.0-no-RFN",
    "OFL-1.1",
    "OFL-1.1-RFN",
    "OFL-1.1-no-RFN",
    "OGC-1.0",
    "OGL-Canada-2.0",
    "OGL-UK-1.0",
    "OGL-UK-2.0",
    "OGL-UK-3.0",
    "OGTSL",
    "OLDAP-1.1",
    "OLDAP-1.2",
    "OLDAP-1.3",
    "OLDAP-1.4",
    "OLDAP-2.0",
    "OLDAP-2.0.1",
    "OLDAP-2.1",
    "OLDAP-2.2",
    "OLDAP-2.2.1",
    "OLDAP-2.2.2",
    "OLDAP-2.3",
    "OLDAP-2.4",
    "OLDAP-2.5",
    "OLDAP-2.6",
    "OLDAP-2.7",
    "OLDAP-2.8",
    "OML",
    "OPL-1.0",
    "OSET-PL-2.1",
    "OSL-1.0",
    "OSL-1.1",
    "OSL-2.0",
    "OSL-2.1",
    "OSL-3.0",
    "OpenSSL",
    "PDDL-1.0",
    "PHP-3.0",
    "PHP-3.01",
    "PSF-2.0",
    "Parity-6.0.0",
    "Parity-7.0.0",
    "Plexus",
    "PolyForm-Noncommercial-1.0.0",
    "PolyForm-Small-Business-1.0.0",
    "PostgreSQL",
    "Python-2.0",
    "QPL-1.0",
    "Qhull",
    "RHeCos-1.1",
    "RPL-1.1",
    "RPL-1.5",
    "RPSL-1.0",
    "RSA-MD",
    "RSCPL",
    "Rdisc",
    "Ruby",
    "SAX-PD",
    "SCEA",
    "SGI-B-1.0",
    "SGI-B-1.1",
    "SGI-B-2.0",
    "SHL-0.5",
    "SHL-0.51",
    "SISSL",
    "SISSL-1.2",
    "SMLNJ",
    "SMPPL",
    "SNIA",
    "SPL-1.0",
    "SSH-OpenSSH",
    "SSH-short",
    "SSPL-1.0",
    "SWL",
    "Saxpath",
    "Sendmail",
    "Sendmail-8.23",
    "SimPL-2.0",
    "Sleepycat",
    "Spencer-86",
    "Spencer-94",
    "Spencer-99",
    "SugarCRM-1.1.3",
    "TAPR-OHL-1.0",
    "TCL",
    "TCP-wrappers",
    "TMate",
    "TORQUE-1.1",
    "TOSL",
    "TU-Berlin-1.0",
    "TU-Berlin-2.0",
    "UCL-1.0",
    "UPL-1.0",
    "Unicode-DFS-2015",
    "Unicode-DFS-2016",
    "Unicode-TOU",
    "Unlicense",
    "VOSTROM",
    "VSL-1.0",
    "Vim",
    "W3C",
    "W3C-19980720",
    "W3C-20150513",
    "WTFPL",
    "Watcom-1.0",
    "Wsuipa",
    "X11",
    "XFree86-1.1",
    "XSkat",
    "Xerox",
    "Xnet",
    "YPL-1.0",
    "YPL-1.1",
    "ZPL-1.1",
    "ZPL-2.0",
    "ZPL-2.1",
    "Zed",
    "Zend-2.0",
    "Zimbra-1.3",
    "Zimbra-1.4",
    "Zlib",
    "blessing",
    "bzip2-1.0.5",
    "bzip2-1.0.6",
    "copyleft-next-0.3.0",
    "copyleft-next-0.3.1",
    "curl",
    "diffmark",
    "dvipdfm",
    "eGenix",
    "etalab-2.0",
    "gSOAP-1.3b",
    "gnuplot",
    "iMatix",
    "libpng-2.0",
    "libselinux-1.0",
    "libtiff",
    "mpich2",
    "psfrag",
    "psutils",
    "xinetd",
    "xpp",
    "zlib-acknowledgement"
  ];
});

// ../../node_modules/.pnpm/spdx-license-ids@3.0.6/node_modules/spdx-license-ids/deprecated.json
var require_deprecated = __commonJS((exports2, module3) => {
  module3.exports = [
    "AGPL-1.0",
    "AGPL-3.0",
    "BSD-2-Clause-FreeBSD",
    "BSD-2-Clause-NetBSD",
    "GFDL-1.1",
    "GFDL-1.2",
    "GFDL-1.3",
    "GPL-1.0",
    "GPL-2.0",
    "GPL-2.0-with-GCC-exception",
    "GPL-2.0-with-autoconf-exception",
    "GPL-2.0-with-bison-exception",
    "GPL-2.0-with-classpath-exception",
    "GPL-2.0-with-font-exception",
    "GPL-3.0",
    "GPL-3.0-with-GCC-exception",
    "GPL-3.0-with-autoconf-exception",
    "LGPL-2.0",
    "LGPL-2.1",
    "LGPL-3.0",
    "Nunit",
    "StandardML-NJ",
    "eCos-2.0",
    "wxWindows"
  ];
});

// ../../node_modules/.pnpm/spdx-exceptions@2.3.0/node_modules/spdx-exceptions/index.json
var require_spdx_exceptions = __commonJS((exports2, module3) => {
  module3.exports = [
    "389-exception",
    "Autoconf-exception-2.0",
    "Autoconf-exception-3.0",
    "Bison-exception-2.2",
    "Bootloader-exception",
    "Classpath-exception-2.0",
    "CLISP-exception-2.0",
    "DigiRule-FOSS-exception",
    "eCos-exception-2.0",
    "Fawkes-Runtime-exception",
    "FLTK-exception",
    "Font-exception-2.0",
    "freertos-exception-2.0",
    "GCC-exception-2.0",
    "GCC-exception-3.1",
    "gnu-javamail-exception",
    "GPL-3.0-linking-exception",
    "GPL-3.0-linking-source-exception",
    "GPL-CC-1.0",
    "i2p-gpl-java-exception",
    "Libtool-exception",
    "Linux-syscall-note",
    "LLVM-exception",
    "LZMA-exception",
    "mif-exception",
    "Nokia-Qt-exception-1.1",
    "OCaml-LGPL-linking-exception",
    "OCCT-exception-1.0",
    "OpenJDK-assembly-exception-1.0",
    "openvpn-openssl-exception",
    "PS-or-PDF-font-exception-20170817",
    "Qt-GPL-exception-1.0",
    "Qt-LGPL-exception-1.1",
    "Qwt-exception-1.0",
    "Swift-exception",
    "u-boot-exception-2.0",
    "Universal-FOSS-exception-1.0",
    "WxWindows-exception-3.1"
  ];
});

// ../../node_modules/.pnpm/spdx-expression-parse@3.0.1/node_modules/spdx-expression-parse/scan.js
var require_scan2 = __commonJS((exports2, module3) => {
  "use strict";
  var licenses = [].concat(require_spdx_license_ids()).concat(require_deprecated());
  var exceptions = require_spdx_exceptions();
  module3.exports = function(source) {
    var index = 0;
    function hasMore() {
      return index < source.length;
    }
    function read(value) {
      if (value instanceof RegExp) {
        var chars = source.slice(index);
        var match = chars.match(value);
        if (match) {
          index += match[0].length;
          return match[0];
        }
      } else {
        if (source.indexOf(value, index) === index) {
          index += value.length;
          return value;
        }
      }
    }
    function skipWhitespace() {
      read(/[ ]*/);
    }
    function operator() {
      var string;
      var possibilities = ["WITH", "AND", "OR", "(", ")", ":", "+"];
      for (var i = 0; i < possibilities.length; i++) {
        string = read(possibilities[i]);
        if (string) {
          break;
        }
      }
      if (string === "+" && index > 1 && source[index - 2] === " ") {
        throw new Error("Space before `+`");
      }
      return string && {
        type: "OPERATOR",
        string
      };
    }
    function idstring() {
      return read(/[A-Za-z0-9-.]+/);
    }
    function expectIdstring() {
      var string = idstring();
      if (!string) {
        throw new Error("Expected idstring at offset " + index);
      }
      return string;
    }
    function documentRef() {
      if (read("DocumentRef-")) {
        var string = expectIdstring();
        return {type: "DOCUMENTREF", string};
      }
    }
    function licenseRef() {
      if (read("LicenseRef-")) {
        var string = expectIdstring();
        return {type: "LICENSEREF", string};
      }
    }
    function identifier() {
      var begin = index;
      var string = idstring();
      if (licenses.indexOf(string) !== -1) {
        return {
          type: "LICENSE",
          string
        };
      } else if (exceptions.indexOf(string) !== -1) {
        return {
          type: "EXCEPTION",
          string
        };
      }
      index = begin;
    }
    function parseToken() {
      return operator() || documentRef() || licenseRef() || identifier();
    }
    var tokens = [];
    while (hasMore()) {
      skipWhitespace();
      if (!hasMore()) {
        break;
      }
      var token = parseToken();
      if (!token) {
        throw new Error("Unexpected `" + source[index] + "` at offset " + index);
      }
      tokens.push(token);
    }
    return tokens;
  };
});

// ../../node_modules/.pnpm/spdx-expression-parse@3.0.1/node_modules/spdx-expression-parse/parse.js
var require_parse5 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = function(tokens) {
    var index = 0;
    function hasMore() {
      return index < tokens.length;
    }
    function token() {
      return hasMore() ? tokens[index] : null;
    }
    function next() {
      if (!hasMore()) {
        throw new Error();
      }
      index++;
    }
    function parseOperator(operator) {
      var t = token();
      if (t && t.type === "OPERATOR" && operator === t.string) {
        next();
        return t.string;
      }
    }
    function parseWith() {
      if (parseOperator("WITH")) {
        var t = token();
        if (t && t.type === "EXCEPTION") {
          next();
          return t.string;
        }
        throw new Error("Expected exception after `WITH`");
      }
    }
    function parseLicenseRef() {
      var begin = index;
      var string = "";
      var t = token();
      if (t.type === "DOCUMENTREF") {
        next();
        string += "DocumentRef-" + t.string + ":";
        if (!parseOperator(":")) {
          throw new Error("Expected `:` after `DocumentRef-...`");
        }
      }
      t = token();
      if (t.type === "LICENSEREF") {
        next();
        string += "LicenseRef-" + t.string;
        return {license: string};
      }
      index = begin;
    }
    function parseLicense() {
      var t = token();
      if (t && t.type === "LICENSE") {
        next();
        var node2 = {license: t.string};
        if (parseOperator("+")) {
          node2.plus = true;
        }
        var exception = parseWith();
        if (exception) {
          node2.exception = exception;
        }
        return node2;
      }
    }
    function parseParenthesizedExpression() {
      var left = parseOperator("(");
      if (!left) {
        return;
      }
      var expr = parseExpression();
      if (!parseOperator(")")) {
        throw new Error("Expected `)`");
      }
      return expr;
    }
    function parseAtom() {
      return parseParenthesizedExpression() || parseLicenseRef() || parseLicense();
    }
    function makeBinaryOpParser(operator, nextParser) {
      return function parseBinaryOp() {
        var left = nextParser();
        if (!left) {
          return;
        }
        if (!parseOperator(operator)) {
          return left;
        }
        var right = parseBinaryOp();
        if (!right) {
          throw new Error("Expected expression");
        }
        return {
          left,
          conjunction: operator.toLowerCase(),
          right
        };
      };
    }
    var parseAnd = makeBinaryOpParser("AND", parseAtom);
    var parseExpression = makeBinaryOpParser("OR", parseAnd);
    var node = parseExpression();
    if (!node || hasMore()) {
      throw new Error("Syntax error");
    }
    return node;
  };
});

// ../../node_modules/.pnpm/spdx-expression-parse@3.0.1/node_modules/spdx-expression-parse/index.js
var require_spdx_expression_parse = __commonJS((exports2, module3) => {
  "use strict";
  var scan = require_scan2();
  var parse = require_parse5();
  module3.exports = function(source) {
    return parse(scan(source));
  };
});

// ../../node_modules/.pnpm/spdx-correct@3.1.1/node_modules/spdx-correct/index.js
var require_spdx_correct = __commonJS((exports2, module3) => {
  var parse = require_spdx_expression_parse();
  var spdxLicenseIds = require_spdx_license_ids();
  function valid(string) {
    try {
      parse(string);
      return true;
    } catch (error) {
      return false;
    }
  }
  var transpositions = [
    ["APGL", "AGPL"],
    ["Gpl", "GPL"],
    ["GLP", "GPL"],
    ["APL", "Apache"],
    ["ISD", "ISC"],
    ["GLP", "GPL"],
    ["IST", "ISC"],
    ["Claude", "Clause"],
    [" or later", "+"],
    [" International", ""],
    ["GNU", "GPL"],
    ["GUN", "GPL"],
    ["+", ""],
    ["GNU GPL", "GPL"],
    ["GNU/GPL", "GPL"],
    ["GNU GLP", "GPL"],
    ["GNU General Public License", "GPL"],
    ["Gnu public license", "GPL"],
    ["GNU Public License", "GPL"],
    ["GNU GENERAL PUBLIC LICENSE", "GPL"],
    ["MTI", "MIT"],
    ["Mozilla Public License", "MPL"],
    ["Universal Permissive License", "UPL"],
    ["WTH", "WTF"],
    ["-License", ""]
  ];
  var TRANSPOSED = 0;
  var CORRECT = 1;
  var transforms = [
    function(argument) {
      return argument.toUpperCase();
    },
    function(argument) {
      return argument.trim();
    },
    function(argument) {
      return argument.replace(/\./g, "");
    },
    function(argument) {
      return argument.replace(/\s+/g, "");
    },
    function(argument) {
      return argument.replace(/\s+/g, "-");
    },
    function(argument) {
      return argument.replace("v", "-");
    },
    function(argument) {
      return argument.replace(/,?\s*(\d)/, "-$1");
    },
    function(argument) {
      return argument.replace(/,?\s*(\d)/, "-$1.0");
    },
    function(argument) {
      return argument.replace(/,?\s*(V\.|v\.|V|v|Version|version)\s*(\d)/, "-$2");
    },
    function(argument) {
      return argument.replace(/,?\s*(V\.|v\.|V|v|Version|version)\s*(\d)/, "-$2.0");
    },
    function(argument) {
      return argument[0].toUpperCase() + argument.slice(1);
    },
    function(argument) {
      return argument.replace("/", "-");
    },
    function(argument) {
      return argument.replace(/\s*V\s*(\d)/, "-$1").replace(/(\d)$/, "$1.0");
    },
    function(argument) {
      if (argument.indexOf("3.0") !== -1) {
        return argument + "-or-later";
      } else {
        return argument + "-only";
      }
    },
    function(argument) {
      return argument + "only";
    },
    function(argument) {
      return argument.replace(/(\d)$/, "-$1.0");
    },
    function(argument) {
      return argument.replace(/(-| )?(\d)$/, "-$2-Clause");
    },
    function(argument) {
      return argument.replace(/(-| )clause(-| )(\d)/, "-$3-Clause");
    },
    function(argument) {
      return argument.replace(/\b(Modified|New|Revised)(-| )?BSD((-| )License)?/i, "BSD-3-Clause");
    },
    function(argument) {
      return argument.replace(/\bSimplified(-| )?BSD((-| )License)?/i, "BSD-2-Clause");
    },
    function(argument) {
      return argument.replace(/\b(Free|Net)(-| )?BSD((-| )License)?/i, "BSD-2-Clause-$1BSD");
    },
    function(argument) {
      return argument.replace(/\bClear(-| )?BSD((-| )License)?/i, "BSD-3-Clause-Clear");
    },
    function(argument) {
      return argument.replace(/\b(Old|Original)(-| )?BSD((-| )License)?/i, "BSD-4-Clause");
    },
    function(argument) {
      return "CC-" + argument;
    },
    function(argument) {
      return "CC-" + argument + "-4.0";
    },
    function(argument) {
      return argument.replace("Attribution", "BY").replace("NonCommercial", "NC").replace("NoDerivatives", "ND").replace(/ (\d)/, "-$1").replace(/ ?International/, "");
    },
    function(argument) {
      return "CC-" + argument.replace("Attribution", "BY").replace("NonCommercial", "NC").replace("NoDerivatives", "ND").replace(/ (\d)/, "-$1").replace(/ ?International/, "") + "-4.0";
    }
  ];
  var licensesWithVersions = spdxLicenseIds.map(function(id) {
    var match = /^(.*)-\d+\.\d+$/.exec(id);
    return match ? [match[0], match[1]] : [id, null];
  }).reduce(function(objectMap, item) {
    var key = item[1];
    objectMap[key] = objectMap[key] || [];
    objectMap[key].push(item[0]);
    return objectMap;
  }, {});
  var licensesWithOneVersion = Object.keys(licensesWithVersions).map(function makeEntries(key) {
    return [key, licensesWithVersions[key]];
  }).filter(function identifySoleVersions(item) {
    return item[1].length === 1 && item[0] !== null && item[0] !== "APL";
  }).map(function createLastResorts(item) {
    return [item[0], item[1][0]];
  });
  licensesWithVersions = void 0;
  var lastResorts = [
    ["UNLI", "Unlicense"],
    ["WTF", "WTFPL"],
    ["2 CLAUSE", "BSD-2-Clause"],
    ["2-CLAUSE", "BSD-2-Clause"],
    ["3 CLAUSE", "BSD-3-Clause"],
    ["3-CLAUSE", "BSD-3-Clause"],
    ["AFFERO", "AGPL-3.0-or-later"],
    ["AGPL", "AGPL-3.0-or-later"],
    ["APACHE", "Apache-2.0"],
    ["ARTISTIC", "Artistic-2.0"],
    ["Affero", "AGPL-3.0-or-later"],
    ["BEER", "Beerware"],
    ["BOOST", "BSL-1.0"],
    ["BSD", "BSD-2-Clause"],
    ["CDDL", "CDDL-1.1"],
    ["ECLIPSE", "EPL-1.0"],
    ["FUCK", "WTFPL"],
    ["GNU", "GPL-3.0-or-later"],
    ["LGPL", "LGPL-3.0-or-later"],
    ["GPLV1", "GPL-1.0-only"],
    ["GPL-1", "GPL-1.0-only"],
    ["GPLV2", "GPL-2.0-only"],
    ["GPL-2", "GPL-2.0-only"],
    ["GPL", "GPL-3.0-or-later"],
    ["MIT +NO-FALSE-ATTRIBS", "MITNFA"],
    ["MIT", "MIT"],
    ["MPL", "MPL-2.0"],
    ["X11", "X11"],
    ["ZLIB", "Zlib"]
  ].concat(licensesWithOneVersion);
  var SUBSTRING = 0;
  var IDENTIFIER = 1;
  var validTransformation = function(identifier) {
    for (var i = 0; i < transforms.length; i++) {
      var transformed = transforms[i](identifier).trim();
      if (transformed !== identifier && valid(transformed)) {
        return transformed;
      }
    }
    return null;
  };
  var validLastResort = function(identifier) {
    var upperCased = identifier.toUpperCase();
    for (var i = 0; i < lastResorts.length; i++) {
      var lastResort = lastResorts[i];
      if (upperCased.indexOf(lastResort[SUBSTRING]) > -1) {
        return lastResort[IDENTIFIER];
      }
    }
    return null;
  };
  var anyCorrection = function(identifier, check2) {
    for (var i = 0; i < transpositions.length; i++) {
      var transposition = transpositions[i];
      var transposed = transposition[TRANSPOSED];
      if (identifier.indexOf(transposed) > -1) {
        var corrected = identifier.replace(transposed, transposition[CORRECT]);
        var checked = check2(corrected);
        if (checked !== null) {
          return checked;
        }
      }
    }
    return null;
  };
  module3.exports = function(identifier, options) {
    options = options || {};
    var upgrade = options.upgrade === void 0 ? true : !!options.upgrade;
    function postprocess(value) {
      return upgrade ? upgradeGPLs(value) : value;
    }
    var validArugment = typeof identifier === "string" && identifier.trim().length !== 0;
    if (!validArugment) {
      throw Error("Invalid argument. Expected non-empty string.");
    }
    identifier = identifier.trim();
    if (valid(identifier)) {
      return postprocess(identifier);
    }
    var noPlus = identifier.replace(/\+$/, "").trim();
    if (valid(noPlus)) {
      return postprocess(noPlus);
    }
    var transformed = validTransformation(identifier);
    if (transformed !== null) {
      return postprocess(transformed);
    }
    transformed = anyCorrection(identifier, function(argument) {
      if (valid(argument)) {
        return argument;
      }
      return validTransformation(argument);
    });
    if (transformed !== null) {
      return postprocess(transformed);
    }
    transformed = validLastResort(identifier);
    if (transformed !== null) {
      return postprocess(transformed);
    }
    transformed = anyCorrection(identifier, validLastResort);
    if (transformed !== null) {
      return postprocess(transformed);
    }
    return null;
  };
  function upgradeGPLs(value) {
    if ([
      "GPL-1.0",
      "LGPL-1.0",
      "AGPL-1.0",
      "GPL-2.0",
      "LGPL-2.0",
      "AGPL-2.0",
      "LGPL-2.1"
    ].indexOf(value) !== -1) {
      return value + "-only";
    } else if ([
      "GPL-1.0+",
      "GPL-2.0+",
      "GPL-3.0+",
      "LGPL-2.0+",
      "LGPL-2.1+",
      "LGPL-3.0+",
      "AGPL-1.0+",
      "AGPL-3.0+"
    ].indexOf(value) !== -1) {
      return value.replace(/\+$/, "-or-later");
    } else if (["GPL-3.0", "LGPL-3.0", "AGPL-3.0"].indexOf(value) !== -1) {
      return value + "-or-later";
    } else {
      return value;
    }
  }
});

// ../../node_modules/.pnpm/validate-npm-package-license@3.0.4/node_modules/validate-npm-package-license/index.js
var require_validate_npm_package_license = __commonJS((exports2, module3) => {
  var parse = require_spdx_expression_parse();
  var correct = require_spdx_correct();
  var genericWarning = 'license should be a valid SPDX license expression (without "LicenseRef"), "UNLICENSED", or "SEE LICENSE IN <filename>"';
  var fileReferenceRE = /^SEE LICEN[CS]E IN (.+)$/;
  function startsWith(prefix, string) {
    return string.slice(0, prefix.length) === prefix;
  }
  function usesLicenseRef(ast) {
    if (ast.hasOwnProperty("license")) {
      var license = ast.license;
      return startsWith("LicenseRef", license) || startsWith("DocumentRef", license);
    } else {
      return usesLicenseRef(ast.left) || usesLicenseRef(ast.right);
    }
  }
  module3.exports = function(argument) {
    var ast;
    try {
      ast = parse(argument);
    } catch (e) {
      var match;
      if (argument === "UNLICENSED" || argument === "UNLICENCED") {
        return {
          validForOldPackages: true,
          validForNewPackages: true,
          unlicensed: true
        };
      } else if (match = fileReferenceRE.exec(argument)) {
        return {
          validForOldPackages: true,
          validForNewPackages: true,
          inFile: match[1]
        };
      } else {
        var result = {
          validForOldPackages: false,
          validForNewPackages: false,
          warnings: [genericWarning]
        };
        if (argument.trim().length !== 0) {
          var corrected = correct(argument);
          if (corrected) {
            result.warnings.push('license is similar to the valid expression "' + corrected + '"');
          }
        }
        return result;
      }
    }
    if (usesLicenseRef(ast)) {
      return {
        validForNewPackages: false,
        validForOldPackages: false,
        spdx: true,
        warnings: [genericWarning]
      };
    } else {
      return {
        validForNewPackages: true,
        validForOldPackages: true,
        spdx: true
      };
    }
  };
});

// ../../node_modules/.pnpm/hosted-git-info@2.8.8/node_modules/hosted-git-info/git-host-info.js
var require_git_host_info = __commonJS((exports2, module3) => {
  "use strict";
  var gitHosts = module3.exports = {
    github: {
      protocols: ["git", "http", "git+ssh", "git+https", "ssh", "https"],
      domain: "github.com",
      treepath: "tree",
      filetemplate: "https://{auth@}raw.githubusercontent.com/{user}/{project}/{committish}/{path}",
      bugstemplate: "https://{domain}/{user}/{project}/issues",
      gittemplate: "git://{auth@}{domain}/{user}/{project}.git{#committish}",
      tarballtemplate: "https://codeload.{domain}/{user}/{project}/tar.gz/{committish}"
    },
    bitbucket: {
      protocols: ["git+ssh", "git+https", "ssh", "https"],
      domain: "bitbucket.org",
      treepath: "src",
      tarballtemplate: "https://{domain}/{user}/{project}/get/{committish}.tar.gz"
    },
    gitlab: {
      protocols: ["git+ssh", "git+https", "ssh", "https"],
      domain: "gitlab.com",
      treepath: "tree",
      bugstemplate: "https://{domain}/{user}/{project}/issues",
      httpstemplate: "git+https://{auth@}{domain}/{user}/{projectPath}.git{#committish}",
      tarballtemplate: "https://{domain}/{user}/{project}/repository/archive.tar.gz?ref={committish}",
      pathmatch: /^[/]([^/]+)[/]((?!.*(\/-\/|\/repository\/archive\.tar\.gz\?=.*|\/repository\/[^/]+\/archive.tar.gz$)).*?)(?:[.]git|[/])?$/
    },
    gist: {
      protocols: ["git", "git+ssh", "git+https", "ssh", "https"],
      domain: "gist.github.com",
      pathmatch: /^[/](?:([^/]+)[/])?([a-z0-9]{32,})(?:[.]git)?$/,
      filetemplate: "https://gist.githubusercontent.com/{user}/{project}/raw{/committish}/{path}",
      bugstemplate: "https://{domain}/{project}",
      gittemplate: "git://{domain}/{project}.git{#committish}",
      sshtemplate: "git@{domain}:/{project}.git{#committish}",
      sshurltemplate: "git+ssh://git@{domain}/{project}.git{#committish}",
      browsetemplate: "https://{domain}/{project}{/committish}",
      browsefiletemplate: "https://{domain}/{project}{/committish}{#path}",
      docstemplate: "https://{domain}/{project}{/committish}",
      httpstemplate: "git+https://{domain}/{project}.git{#committish}",
      shortcuttemplate: "{type}:{project}{#committish}",
      pathtemplate: "{project}{#committish}",
      tarballtemplate: "https://codeload.github.com/gist/{project}/tar.gz/{committish}",
      hashformat: function(fragment) {
        return "file-" + formatHashFragment(fragment);
      }
    }
  };
  var gitHostDefaults = {
    sshtemplate: "git@{domain}:{user}/{project}.git{#committish}",
    sshurltemplate: "git+ssh://git@{domain}/{user}/{project}.git{#committish}",
    browsetemplate: "https://{domain}/{user}/{project}{/tree/committish}",
    browsefiletemplate: "https://{domain}/{user}/{project}/{treepath}/{committish}/{path}{#fragment}",
    docstemplate: "https://{domain}/{user}/{project}{/tree/committish}#readme",
    httpstemplate: "git+https://{auth@}{domain}/{user}/{project}.git{#committish}",
    filetemplate: "https://{domain}/{user}/{project}/raw/{committish}/{path}",
    shortcuttemplate: "{type}:{user}/{project}{#committish}",
    pathtemplate: "{user}/{project}{#committish}",
    pathmatch: /^[/]([^/]+)[/]([^/]+?)(?:[.]git|[/])?$/,
    hashformat: formatHashFragment
  };
  Object.keys(gitHosts).forEach(function(name) {
    Object.keys(gitHostDefaults).forEach(function(key) {
      if (gitHosts[name][key])
        return;
      gitHosts[name][key] = gitHostDefaults[key];
    });
    gitHosts[name].protocols_re = RegExp("^(" + gitHosts[name].protocols.map(function(protocol) {
      return protocol.replace(/([\\+*{}()[\]$^|])/g, "\\$1");
    }).join("|") + "):$");
  });
  function formatHashFragment(fragment) {
    return fragment.toLowerCase().replace(/^\W+|\/|\W+$/g, "").replace(/\W+/g, "-");
  }
});

// ../../node_modules/.pnpm/hosted-git-info@2.8.8/node_modules/hosted-git-info/git-host.js
var require_git_host = __commonJS((exports2, module3) => {
  "use strict";
  var gitHosts = require_git_host_info();
  var extend = Object.assign || function _extend(target, source) {
    if (source === null || typeof source !== "object")
      return target;
    var keys = Object.keys(source);
    var i = keys.length;
    while (i--) {
      target[keys[i]] = source[keys[i]];
    }
    return target;
  };
  module3.exports = GitHost;
  function GitHost(type, user, auth, project, committish, defaultRepresentation, opts) {
    var gitHostInfo = this;
    gitHostInfo.type = type;
    Object.keys(gitHosts[type]).forEach(function(key) {
      gitHostInfo[key] = gitHosts[type][key];
    });
    gitHostInfo.user = user;
    gitHostInfo.auth = auth;
    gitHostInfo.project = project;
    gitHostInfo.committish = committish;
    gitHostInfo.default = defaultRepresentation;
    gitHostInfo.opts = opts || {};
  }
  GitHost.prototype.hash = function() {
    return this.committish ? "#" + this.committish : "";
  };
  GitHost.prototype._fill = function(template, opts) {
    if (!template)
      return;
    var vars = extend({}, opts);
    vars.path = vars.path ? vars.path.replace(/^[/]+/g, "") : "";
    opts = extend(extend({}, this.opts), opts);
    var self2 = this;
    Object.keys(this).forEach(function(key) {
      if (self2[key] != null && vars[key] == null)
        vars[key] = self2[key];
    });
    var rawAuth = vars.auth;
    var rawcommittish = vars.committish;
    var rawFragment = vars.fragment;
    var rawPath = vars.path;
    var rawProject = vars.project;
    Object.keys(vars).forEach(function(key) {
      var value = vars[key];
      if ((key === "path" || key === "project") && typeof value === "string") {
        vars[key] = value.split("/").map(function(pathComponent) {
          return encodeURIComponent(pathComponent);
        }).join("/");
      } else {
        vars[key] = encodeURIComponent(value);
      }
    });
    vars["auth@"] = rawAuth ? rawAuth + "@" : "";
    vars["#fragment"] = rawFragment ? "#" + this.hashformat(rawFragment) : "";
    vars.fragment = vars.fragment ? vars.fragment : "";
    vars["#path"] = rawPath ? "#" + this.hashformat(rawPath) : "";
    vars["/path"] = vars.path ? "/" + vars.path : "";
    vars.projectPath = rawProject.split("/").map(encodeURIComponent).join("/");
    if (opts.noCommittish) {
      vars["#committish"] = "";
      vars["/tree/committish"] = "";
      vars["/committish"] = "";
      vars.committish = "";
    } else {
      vars["#committish"] = rawcommittish ? "#" + rawcommittish : "";
      vars["/tree/committish"] = vars.committish ? "/" + vars.treepath + "/" + vars.committish : "";
      vars["/committish"] = vars.committish ? "/" + vars.committish : "";
      vars.committish = vars.committish || "master";
    }
    var res = template;
    Object.keys(vars).forEach(function(key) {
      res = res.replace(new RegExp("[{]" + key + "[}]", "g"), vars[key]);
    });
    if (opts.noGitPlus) {
      return res.replace(/^git[+]/, "");
    } else {
      return res;
    }
  };
  GitHost.prototype.ssh = function(opts) {
    return this._fill(this.sshtemplate, opts);
  };
  GitHost.prototype.sshurl = function(opts) {
    return this._fill(this.sshurltemplate, opts);
  };
  GitHost.prototype.browse = function(P, F, opts) {
    if (typeof P === "string") {
      if (typeof F !== "string") {
        opts = F;
        F = null;
      }
      return this._fill(this.browsefiletemplate, extend({
        fragment: F,
        path: P
      }, opts));
    } else {
      return this._fill(this.browsetemplate, P);
    }
  };
  GitHost.prototype.docs = function(opts) {
    return this._fill(this.docstemplate, opts);
  };
  GitHost.prototype.bugs = function(opts) {
    return this._fill(this.bugstemplate, opts);
  };
  GitHost.prototype.https = function(opts) {
    return this._fill(this.httpstemplate, opts);
  };
  GitHost.prototype.git = function(opts) {
    return this._fill(this.gittemplate, opts);
  };
  GitHost.prototype.shortcut = function(opts) {
    return this._fill(this.shortcuttemplate, opts);
  };
  GitHost.prototype.path = function(opts) {
    return this._fill(this.pathtemplate, opts);
  };
  GitHost.prototype.tarball = function(opts_) {
    var opts = extend({}, opts_, {noCommittish: false});
    return this._fill(this.tarballtemplate, opts);
  };
  GitHost.prototype.file = function(P, opts) {
    return this._fill(this.filetemplate, extend({path: P}, opts));
  };
  GitHost.prototype.getDefaultRepresentation = function() {
    return this.default;
  };
  GitHost.prototype.toString = function(opts) {
    if (this.default && typeof this[this.default] === "function")
      return this[this.default](opts);
    return this.sshurl(opts);
  };
});

// ../../node_modules/.pnpm/hosted-git-info@2.8.8/node_modules/hosted-git-info/index.js
var require_hosted_git_info = __commonJS((exports2, module3) => {
  "use strict";
  var url = require("url");
  var gitHosts = require_git_host_info();
  var GitHost = module3.exports = require_git_host();
  var protocolToRepresentationMap = {
    "git+ssh:": "sshurl",
    "git+https:": "https",
    "ssh:": "sshurl",
    "git:": "git"
  };
  function protocolToRepresentation(protocol) {
    return protocolToRepresentationMap[protocol] || protocol.slice(0, -1);
  }
  var authProtocols = {
    "git:": true,
    "https:": true,
    "git+https:": true,
    "http:": true,
    "git+http:": true
  };
  var cache = {};
  module3.exports.fromUrl = function(giturl, opts) {
    if (typeof giturl !== "string")
      return;
    var key = giturl + JSON.stringify(opts || {});
    if (!(key in cache)) {
      cache[key] = fromUrl(giturl, opts);
    }
    return cache[key];
  };
  function fromUrl(giturl, opts) {
    if (giturl == null || giturl === "")
      return;
    var url2 = fixupUnqualifiedGist(isGitHubShorthand(giturl) ? "github:" + giturl : giturl);
    var parsed = parseGitUrl(url2);
    var shortcutMatch = url2.match(new RegExp("^([^:]+):(?:(?:[^@:]+(?:[^@]+)?@)?([^/]*))[/](.+?)(?:[.]git)?($|#)"));
    var matches = Object.keys(gitHosts).map(function(gitHostName) {
      try {
        var gitHostInfo = gitHosts[gitHostName];
        var auth = null;
        if (parsed.auth && authProtocols[parsed.protocol]) {
          auth = parsed.auth;
        }
        var committish = parsed.hash ? decodeURIComponent(parsed.hash.substr(1)) : null;
        var user = null;
        var project = null;
        var defaultRepresentation = null;
        if (shortcutMatch && shortcutMatch[1] === gitHostName) {
          user = shortcutMatch[2] && decodeURIComponent(shortcutMatch[2]);
          project = decodeURIComponent(shortcutMatch[3]);
          defaultRepresentation = "shortcut";
        } else {
          if (parsed.host && parsed.host !== gitHostInfo.domain && parsed.host.replace(/^www[.]/, "") !== gitHostInfo.domain)
            return;
          if (!gitHostInfo.protocols_re.test(parsed.protocol))
            return;
          if (!parsed.path)
            return;
          var pathmatch = gitHostInfo.pathmatch;
          var matched = parsed.path.match(pathmatch);
          if (!matched)
            return;
          if (matched[1] !== null && matched[1] !== void 0) {
            user = decodeURIComponent(matched[1].replace(/^:/, ""));
          }
          project = decodeURIComponent(matched[2]);
          defaultRepresentation = protocolToRepresentation(parsed.protocol);
        }
        return new GitHost(gitHostName, user, auth, project, committish, defaultRepresentation, opts);
      } catch (ex) {
        if (ex instanceof URIError) {
        } else
          throw ex;
      }
    }).filter(function(gitHostInfo) {
      return gitHostInfo;
    });
    if (matches.length !== 1)
      return;
    return matches[0];
  }
  function isGitHubShorthand(arg11) {
    return /^[^:@%/\s.-][^:@%/\s]*[/][^:@\s/%]+(?:#.*)?$/.test(arg11);
  }
  function fixupUnqualifiedGist(giturl) {
    var parsed = url.parse(giturl);
    if (parsed.protocol === "gist:" && parsed.host && !parsed.path) {
      return parsed.protocol + "/" + parsed.host;
    } else {
      return giturl;
    }
  }
  function parseGitUrl(giturl) {
    var matched = giturl.match(/^([^@]+)@([^:/]+):[/]?((?:[^/]+[/])?[^/]+?)(?:[.]git)?(#.*)?$/);
    if (!matched) {
      var legacy = url.parse(giturl);
      if (legacy.auth && typeof url.URL === "function") {
        var authmatch = giturl.match(/[^@]+@[^:/]+/);
        if (authmatch) {
          var whatwg = new url.URL(authmatch[0]);
          legacy.auth = whatwg.username || "";
          if (whatwg.password)
            legacy.auth += ":" + whatwg.password;
        }
      }
      return legacy;
    }
    return {
      protocol: "git+ssh:",
      slashes: true,
      auth: matched[1],
      host: matched[2],
      port: null,
      hostname: matched[2],
      hash: matched[4],
      search: null,
      query: null,
      pathname: "/" + matched[3],
      path: "/" + matched[3],
      href: "git+ssh://" + matched[1] + "@" + matched[2] + "/" + matched[3] + (matched[4] || "")
    };
  }
});

// ../../node_modules/.pnpm/resolve@1.18.1/node_modules/resolve/lib/caller.js
var require_caller = __commonJS((exports2, module3) => {
  module3.exports = function() {
    var origPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = function(_2, stack2) {
      return stack2;
    };
    var stack = new Error().stack;
    Error.prepareStackTrace = origPrepareStackTrace;
    return stack[2].getFileName();
  };
});

// ../../node_modules/.pnpm/path-parse@1.0.6/node_modules/path-parse/index.js
var require_path_parse = __commonJS((exports2, module3) => {
  "use strict";
  var isWindows = process.platform === "win32";
  var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
  var splitTailRe = /^([\s\S]*?)((?:\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))(?:[\\\/]*)$/;
  var win32 = {};
  function win32SplitPath(filename) {
    var result = splitDeviceRe.exec(filename), device = (result[1] || "") + (result[2] || ""), tail = result[3] || "";
    var result2 = splitTailRe.exec(tail), dir = result2[1], basename = result2[2], ext = result2[3];
    return [device, dir, basename, ext];
  }
  win32.parse = function(pathString) {
    if (typeof pathString !== "string") {
      throw new TypeError("Parameter 'pathString' must be a string, not " + typeof pathString);
    }
    var allParts = win32SplitPath(pathString);
    if (!allParts || allParts.length !== 4) {
      throw new TypeError("Invalid path '" + pathString + "'");
    }
    return {
      root: allParts[0],
      dir: allParts[0] + allParts[1].slice(0, -1),
      base: allParts[2],
      ext: allParts[3],
      name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
    };
  };
  var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  var posix = {};
  function posixSplitPath(filename) {
    return splitPathRe.exec(filename).slice(1);
  }
  posix.parse = function(pathString) {
    if (typeof pathString !== "string") {
      throw new TypeError("Parameter 'pathString' must be a string, not " + typeof pathString);
    }
    var allParts = posixSplitPath(pathString);
    if (!allParts || allParts.length !== 4) {
      throw new TypeError("Invalid path '" + pathString + "'");
    }
    allParts[1] = allParts[1] || "";
    allParts[2] = allParts[2] || "";
    allParts[3] = allParts[3] || "";
    return {
      root: allParts[0],
      dir: allParts[0] + allParts[1].slice(0, -1),
      base: allParts[2],
      ext: allParts[3],
      name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
    };
  };
  if (isWindows)
    module3.exports = win32.parse;
  else
    module3.exports = posix.parse;
  module3.exports.posix = posix.parse;
  module3.exports.win32 = win32.parse;
});

// ../../node_modules/.pnpm/resolve@1.18.1/node_modules/resolve/lib/node-modules-paths.js
var require_node_modules_paths = __commonJS((exports2, module3) => {
  var path19 = require("path");
  var parse = path19.parse || require_path_parse();
  var getNodeModulesDirs = function getNodeModulesDirs2(absoluteStart, modules) {
    var prefix = "/";
    if (/^([A-Za-z]:)/.test(absoluteStart)) {
      prefix = "";
    } else if (/^\\\\/.test(absoluteStart)) {
      prefix = "\\\\";
    }
    var paths = [absoluteStart];
    var parsed = parse(absoluteStart);
    while (parsed.dir !== paths[paths.length - 1]) {
      paths.push(parsed.dir);
      parsed = parse(parsed.dir);
    }
    return paths.reduce(function(dirs, aPath) {
      return dirs.concat(modules.map(function(moduleDir) {
        return path19.resolve(prefix, aPath, moduleDir);
      }));
    }, []);
  };
  module3.exports = function nodeModulesPaths(start, opts, request) {
    var modules = opts && opts.moduleDirectory ? [].concat(opts.moduleDirectory) : ["node_modules"];
    if (opts && typeof opts.paths === "function") {
      return opts.paths(request, start, function() {
        return getNodeModulesDirs(start, modules);
      }, opts);
    }
    var dirs = getNodeModulesDirs(start, modules);
    return opts && opts.paths ? dirs.concat(opts.paths) : dirs;
  };
});

// ../../node_modules/.pnpm/resolve@1.18.1/node_modules/resolve/lib/normalize-options.js
var require_normalize_options = __commonJS((exports2, module3) => {
  module3.exports = function(x, opts) {
    return opts || {};
  };
});

// ../../node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/implementation.js
var require_implementation = __commonJS((exports2, module3) => {
  "use strict";
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var slice = Array.prototype.slice;
  var toStr = Object.prototype.toString;
  var funcType = "[object Function]";
  module3.exports = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.call(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args2 = slice.call(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(this, args2.concat(slice.call(arguments)));
        if (Object(result) === result) {
          return result;
        }
        return this;
      } else {
        return target.apply(that, args2.concat(slice.call(arguments)));
      }
    };
    var boundLength = Math.max(0, target.length - args2.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
      boundArgs.push("$" + i);
    }
    bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty2() {
      };
      Empty.prototype = target.prototype;
      bound.prototype = new Empty();
      Empty.prototype = null;
    }
    return bound;
  };
});

// ../../node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/index.js
var require_function_bind = __commonJS((exports2, module3) => {
  "use strict";
  var implementation = require_implementation();
  module3.exports = Function.prototype.bind || implementation;
});

// ../../node_modules/.pnpm/has@1.0.3/node_modules/has/src/index.js
var require_src4 = __commonJS((exports2, module3) => {
  "use strict";
  var bind = require_function_bind();
  module3.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
});

// ../../node_modules/.pnpm/is-core-module@2.0.0/node_modules/is-core-module/core.json
var require_core2 = __commonJS((exports2, module3) => {
  module3.exports = {
    assert: true,
    "assert/strict": ">= 15",
    async_hooks: ">= 8",
    buffer_ieee754: "< 0.9.7",
    buffer: true,
    child_process: true,
    cluster: true,
    console: true,
    constants: true,
    crypto: true,
    _debug_agent: ">= 1 && < 8",
    _debugger: "< 8",
    dgram: true,
    dns: true,
    "dns/promises": ">= 15",
    domain: ">= 0.7.12",
    events: true,
    freelist: "< 6",
    fs: true,
    "fs/promises": [">= 10 && < 10.1", ">= 14"],
    _http_agent: ">= 0.11.1",
    _http_client: ">= 0.11.1",
    _http_common: ">= 0.11.1",
    _http_incoming: ">= 0.11.1",
    _http_outgoing: ">= 0.11.1",
    _http_server: ">= 0.11.1",
    http: true,
    http2: ">= 8.8",
    https: true,
    inspector: ">= 8.0.0",
    _linklist: "< 8",
    module: true,
    net: true,
    "node-inspect/lib/_inspect": ">= 7.6.0 && < 12",
    "node-inspect/lib/internal/inspect_client": ">= 7.6.0 && < 12",
    "node-inspect/lib/internal/inspect_repl": ">= 7.6.0 && < 12",
    os: true,
    path: true,
    perf_hooks: ">= 8.5",
    process: ">= 1",
    punycode: true,
    querystring: true,
    readline: true,
    repl: true,
    smalloc: ">= 0.11.5 && < 3",
    _stream_duplex: ">= 0.9.4",
    _stream_transform: ">= 0.9.4",
    _stream_wrap: ">= 1.4.1",
    _stream_passthrough: ">= 0.9.4",
    _stream_readable: ">= 0.9.4",
    _stream_writable: ">= 0.9.4",
    stream: true,
    "stream/promises": ">= 15",
    string_decoder: true,
    sys: [">= 0.6 && < 0.7", ">= 0.8"],
    timers: true,
    "timers/promises": ">= 15",
    _tls_common: ">= 0.11.13",
    _tls_legacy: ">= 0.11.3 && < 10",
    _tls_wrap: ">= 0.11.3",
    tls: true,
    trace_events: ">= 10",
    tty: true,
    url: true,
    util: true,
    "v8/tools/arguments": ">= 10 && < 12",
    "v8/tools/codemap": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/consarray": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/csvparser": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/logreader": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/profile_view": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/splaytree": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    v8: ">= 1",
    vm: true,
    wasi: ">= 13.4 && < 13.5",
    worker_threads: ">= 11.7",
    zlib: true
  };
});

// ../../node_modules/.pnpm/is-core-module@2.0.0/node_modules/is-core-module/index.js
var require_is_core_module = __commonJS((exports2, module3) => {
  "use strict";
  var has = require_src4();
  function specifierIncluded(current, specifier) {
    var nodeParts = current.split(".");
    var parts = specifier.split(" ");
    var op = parts.length > 1 ? parts[0] : "=";
    var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split(".");
    for (var i = 0; i < 3; ++i) {
      var cur = parseInt(nodeParts[i] || 0, 10);
      var ver = parseInt(versionParts[i] || 0, 10);
      if (cur === ver) {
        continue;
      }
      if (op === "<") {
        return cur < ver;
      }
      if (op === ">=") {
        return cur >= ver;
      }
      return false;
    }
    return op === ">=";
  }
  function matchesRange(current, range) {
    var specifiers = range.split(/ ?&& ?/);
    if (specifiers.length === 0) {
      return false;
    }
    for (var i = 0; i < specifiers.length; ++i) {
      if (!specifierIncluded(current, specifiers[i])) {
        return false;
      }
    }
    return true;
  }
  function versionIncluded(nodeVersion, specifierValue) {
    if (typeof specifierValue === "boolean") {
      return specifierValue;
    }
    var current = typeof nodeVersion === "undefined" ? process.versions && process.versions.node && process.versions.node : nodeVersion;
    if (typeof current !== "string") {
      throw new TypeError(typeof nodeVersion === "undefined" ? "Unable to determine current node version" : "If provided, a valid node version is required");
    }
    if (specifierValue && typeof specifierValue === "object") {
      for (var i = 0; i < specifierValue.length; ++i) {
        if (matchesRange(current, specifierValue[i])) {
          return true;
        }
      }
      return false;
    }
    return matchesRange(current, specifierValue);
  }
  var data = require_core2();
  module3.exports = function isCore(x, nodeVersion) {
    return has(data, x) && versionIncluded(nodeVersion, data[x]);
  };
});

// ../../node_modules/.pnpm/resolve@1.18.1/node_modules/resolve/lib/async.js
var require_async6 = __commonJS((exports2, module3) => {
  var fs17 = require("fs");
  var path19 = require("path");
  var caller = require_caller();
  var nodeModulesPaths = require_node_modules_paths();
  var normalizeOptions = require_normalize_options();
  var isCore = require_is_core_module();
  var realpathFS = fs17.realpath && typeof fs17.realpath.native === "function" ? fs17.realpath.native : fs17.realpath;
  var defaultIsFile = function isFile(file, cb) {
    fs17.stat(file, function(err, stat) {
      if (!err) {
        return cb(null, stat.isFile() || stat.isFIFO());
      }
      if (err.code === "ENOENT" || err.code === "ENOTDIR")
        return cb(null, false);
      return cb(err);
    });
  };
  var defaultIsDir = function isDirectory(dir, cb) {
    fs17.stat(dir, function(err, stat) {
      if (!err) {
        return cb(null, stat.isDirectory());
      }
      if (err.code === "ENOENT" || err.code === "ENOTDIR")
        return cb(null, false);
      return cb(err);
    });
  };
  var defaultRealpath = function realpath(x, cb) {
    realpathFS(x, function(realpathErr, realPath) {
      if (realpathErr && realpathErr.code !== "ENOENT")
        cb(realpathErr);
      else
        cb(null, realpathErr ? x : realPath);
    });
  };
  var maybeRealpath = function maybeRealpath2(realpath, x, opts, cb) {
    if (opts && opts.preserveSymlinks === false) {
      realpath(x, cb);
    } else {
      cb(null, x);
    }
  };
  var getPackageCandidates = function getPackageCandidates2(x, start, opts) {
    var dirs = nodeModulesPaths(start, opts, x);
    for (var i = 0; i < dirs.length; i++) {
      dirs[i] = path19.join(dirs[i], x);
    }
    return dirs;
  };
  module3.exports = function resolve(x, options, callback) {
    var cb = callback;
    var opts = options;
    if (typeof options === "function") {
      cb = opts;
      opts = {};
    }
    if (typeof x !== "string") {
      var err = new TypeError("Path must be a string.");
      return process.nextTick(function() {
        cb(err);
      });
    }
    opts = normalizeOptions(x, opts);
    var isFile = opts.isFile || defaultIsFile;
    var isDirectory = opts.isDirectory || defaultIsDir;
    var readFile2 = opts.readFile || fs17.readFile;
    var realpath = opts.realpath || defaultRealpath;
    var packageIterator = opts.packageIterator;
    var extensions = opts.extensions || [".js"];
    var basedir = opts.basedir || path19.dirname(caller());
    var parent = opts.filename || basedir;
    opts.paths = opts.paths || [];
    var absoluteStart = path19.resolve(basedir);
    maybeRealpath(realpath, absoluteStart, opts, function(err2, realStart) {
      if (err2)
        cb(err2);
      else
        init(realStart);
    });
    var res;
    function init(basedir2) {
      if (/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/.test(x)) {
        res = path19.resolve(basedir2, x);
        if (x === "." || x === ".." || x.slice(-1) === "/")
          res += "/";
        if (/\/$/.test(x) && res === basedir2) {
          loadAsDirectory(res, opts.package, onfile);
        } else
          loadAsFile(res, opts.package, onfile);
      } else if (isCore(x)) {
        return cb(null, x);
      } else
        loadNodeModules(x, basedir2, function(err2, n, pkg2) {
          if (err2)
            cb(err2);
          else if (n) {
            return maybeRealpath(realpath, n, opts, function(err3, realN) {
              if (err3) {
                cb(err3);
              } else {
                cb(null, realN, pkg2);
              }
            });
          } else {
            var moduleError = new Error("Cannot find module '" + x + "' from '" + parent + "'");
            moduleError.code = "MODULE_NOT_FOUND";
            cb(moduleError);
          }
        });
    }
    function onfile(err2, m, pkg2) {
      if (err2)
        cb(err2);
      else if (m)
        cb(null, m, pkg2);
      else
        loadAsDirectory(res, function(err3, d, pkg3) {
          if (err3)
            cb(err3);
          else if (d) {
            maybeRealpath(realpath, d, opts, function(err4, realD) {
              if (err4) {
                cb(err4);
              } else {
                cb(null, realD, pkg3);
              }
            });
          } else {
            var moduleError = new Error("Cannot find module '" + x + "' from '" + parent + "'");
            moduleError.code = "MODULE_NOT_FOUND";
            cb(moduleError);
          }
        });
    }
    function loadAsFile(x2, thePackage, callback2) {
      var loadAsFilePackage = thePackage;
      var cb2 = callback2;
      if (typeof loadAsFilePackage === "function") {
        cb2 = loadAsFilePackage;
        loadAsFilePackage = void 0;
      }
      var exts = [""].concat(extensions);
      load(exts, x2, loadAsFilePackage);
      function load(exts2, x3, loadPackage) {
        if (exts2.length === 0)
          return cb2(null, void 0, loadPackage);
        var file = x3 + exts2[0];
        var pkg2 = loadPackage;
        if (pkg2)
          onpkg(null, pkg2);
        else
          loadpkg(path19.dirname(file), onpkg);
        function onpkg(err2, pkg_, dir) {
          pkg2 = pkg_;
          if (err2)
            return cb2(err2);
          if (dir && pkg2 && opts.pathFilter) {
            var rfile = path19.relative(dir, file);
            var rel = rfile.slice(0, rfile.length - exts2[0].length);
            var r = opts.pathFilter(pkg2, x3, rel);
            if (r)
              return load([""].concat(extensions.slice()), path19.resolve(dir, r), pkg2);
          }
          isFile(file, onex);
        }
        function onex(err2, ex) {
          if (err2)
            return cb2(err2);
          if (ex)
            return cb2(null, file, pkg2);
          load(exts2.slice(1), x3, pkg2);
        }
      }
    }
    function loadpkg(dir, cb2) {
      if (dir === "" || dir === "/")
        return cb2(null);
      if (process.platform === "win32" && /^\w:[/\\]*$/.test(dir)) {
        return cb2(null);
      }
      if (/[/\\]node_modules[/\\]*$/.test(dir))
        return cb2(null);
      maybeRealpath(realpath, dir, opts, function(unwrapErr, pkgdir) {
        if (unwrapErr)
          return loadpkg(path19.dirname(dir), cb2);
        var pkgfile = path19.join(pkgdir, "package.json");
        isFile(pkgfile, function(err2, ex) {
          if (!ex)
            return loadpkg(path19.dirname(dir), cb2);
          readFile2(pkgfile, function(err3, body) {
            if (err3)
              cb2(err3);
            try {
              var pkg2 = JSON.parse(body);
            } catch (jsonErr) {
            }
            if (pkg2 && opts.packageFilter) {
              pkg2 = opts.packageFilter(pkg2, pkgfile);
            }
            cb2(null, pkg2, dir);
          });
        });
      });
    }
    function loadAsDirectory(x2, loadAsDirectoryPackage, callback2) {
      var cb2 = callback2;
      var fpkg = loadAsDirectoryPackage;
      if (typeof fpkg === "function") {
        cb2 = fpkg;
        fpkg = opts.package;
      }
      maybeRealpath(realpath, x2, opts, function(unwrapErr, pkgdir) {
        if (unwrapErr)
          return cb2(unwrapErr);
        var pkgfile = path19.join(pkgdir, "package.json");
        isFile(pkgfile, function(err2, ex) {
          if (err2)
            return cb2(err2);
          if (!ex)
            return loadAsFile(path19.join(x2, "index"), fpkg, cb2);
          readFile2(pkgfile, function(err3, body) {
            if (err3)
              return cb2(err3);
            try {
              var pkg2 = JSON.parse(body);
            } catch (jsonErr) {
            }
            if (pkg2 && opts.packageFilter) {
              pkg2 = opts.packageFilter(pkg2, pkgfile);
            }
            if (pkg2 && pkg2.main) {
              if (typeof pkg2.main !== "string") {
                var mainError = new TypeError("package “" + pkg2.name + "” `main` must be a string");
                mainError.code = "INVALID_PACKAGE_MAIN";
                return cb2(mainError);
              }
              if (pkg2.main === "." || pkg2.main === "./") {
                pkg2.main = "index";
              }
              loadAsFile(path19.resolve(x2, pkg2.main), pkg2, function(err4, m, pkg3) {
                if (err4)
                  return cb2(err4);
                if (m)
                  return cb2(null, m, pkg3);
                if (!pkg3)
                  return loadAsFile(path19.join(x2, "index"), pkg3, cb2);
                var dir = path19.resolve(x2, pkg3.main);
                loadAsDirectory(dir, pkg3, function(err5, n, pkg4) {
                  if (err5)
                    return cb2(err5);
                  if (n)
                    return cb2(null, n, pkg4);
                  loadAsFile(path19.join(x2, "index"), pkg4, cb2);
                });
              });
              return;
            }
            loadAsFile(path19.join(x2, "/index"), pkg2, cb2);
          });
        });
      });
    }
    function processDirs(cb2, dirs) {
      if (dirs.length === 0)
        return cb2(null, void 0);
      var dir = dirs[0];
      isDirectory(path19.dirname(dir), isdir);
      function isdir(err2, isdir2) {
        if (err2)
          return cb2(err2);
        if (!isdir2)
          return processDirs(cb2, dirs.slice(1));
        loadAsFile(dir, opts.package, onfile2);
      }
      function onfile2(err2, m, pkg2) {
        if (err2)
          return cb2(err2);
        if (m)
          return cb2(null, m, pkg2);
        loadAsDirectory(dir, opts.package, ondir);
      }
      function ondir(err2, n, pkg2) {
        if (err2)
          return cb2(err2);
        if (n)
          return cb2(null, n, pkg2);
        processDirs(cb2, dirs.slice(1));
      }
    }
    function loadNodeModules(x2, start, cb2) {
      var thunk = function() {
        return getPackageCandidates(x2, start, opts);
      };
      processDirs(cb2, packageIterator ? packageIterator(x2, start, thunk, opts) : thunk());
    }
  };
});

// ../../node_modules/.pnpm/resolve@1.18.1/node_modules/resolve/lib/core.json
var require_core3 = __commonJS((exports2, module3) => {
  module3.exports = {
    assert: true,
    "assert/strict": ">= 15",
    async_hooks: ">= 8",
    buffer_ieee754: "< 0.9.7",
    buffer: true,
    child_process: true,
    cluster: true,
    console: true,
    constants: true,
    crypto: true,
    _debug_agent: ">= 1 && < 8",
    _debugger: "< 8",
    dgram: true,
    dns: true,
    "dns/promises": ">= 15",
    domain: ">= 0.7.12",
    events: true,
    freelist: "< 6",
    fs: true,
    "fs/promises": [">= 10 && < 10.1", ">= 14"],
    _http_agent: ">= 0.11.1",
    _http_client: ">= 0.11.1",
    _http_common: ">= 0.11.1",
    _http_incoming: ">= 0.11.1",
    _http_outgoing: ">= 0.11.1",
    _http_server: ">= 0.11.1",
    http: true,
    http2: ">= 8.8",
    https: true,
    inspector: ">= 8.0.0",
    _linklist: "< 8",
    module: true,
    net: true,
    "node-inspect/lib/_inspect": ">= 7.6.0 && < 12",
    "node-inspect/lib/internal/inspect_client": ">= 7.6.0 && < 12",
    "node-inspect/lib/internal/inspect_repl": ">= 7.6.0 && < 12",
    os: true,
    path: true,
    perf_hooks: ">= 8.5",
    process: ">= 1",
    punycode: true,
    querystring: true,
    readline: true,
    repl: true,
    smalloc: ">= 0.11.5 && < 3",
    _stream_duplex: ">= 0.9.4",
    _stream_transform: ">= 0.9.4",
    _stream_wrap: ">= 1.4.1",
    _stream_passthrough: ">= 0.9.4",
    _stream_readable: ">= 0.9.4",
    _stream_writable: ">= 0.9.4",
    stream: true,
    "stream/promises": ">= 15",
    string_decoder: true,
    sys: [">= 0.6 && < 0.7", ">= 0.8"],
    timers: true,
    "timers/promises": ">= 15",
    _tls_common: ">= 0.11.13",
    _tls_legacy: ">= 0.11.3 && < 10",
    _tls_wrap: ">= 0.11.3",
    tls: true,
    trace_events: ">= 10",
    tty: true,
    url: true,
    util: true,
    "v8/tools/arguments": ">= 10 && < 12",
    "v8/tools/codemap": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/consarray": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/csvparser": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/logreader": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/profile_view": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    "v8/tools/splaytree": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
    v8: ">= 1",
    vm: true,
    wasi: ">= 13.4 && < 13.5",
    worker_threads: ">= 11.7",
    zlib: true
  };
});

// ../../node_modules/.pnpm/resolve@1.18.1/node_modules/resolve/lib/core.js
var require_core4 = __commonJS((exports2, module3) => {
  var current = process.versions && process.versions.node && process.versions.node.split(".") || [];
  function specifierIncluded(specifier) {
    var parts = specifier.split(" ");
    var op = parts.length > 1 ? parts[0] : "=";
    var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split(".");
    for (var i = 0; i < 3; ++i) {
      var cur = parseInt(current[i] || 0, 10);
      var ver = parseInt(versionParts[i] || 0, 10);
      if (cur === ver) {
        continue;
      }
      if (op === "<") {
        return cur < ver;
      } else if (op === ">=") {
        return cur >= ver;
      } else {
        return false;
      }
    }
    return op === ">=";
  }
  function matchesRange(range) {
    var specifiers = range.split(/ ?&& ?/);
    if (specifiers.length === 0) {
      return false;
    }
    for (var i = 0; i < specifiers.length; ++i) {
      if (!specifierIncluded(specifiers[i])) {
        return false;
      }
    }
    return true;
  }
  function versionIncluded(specifierValue) {
    if (typeof specifierValue === "boolean") {
      return specifierValue;
    }
    if (specifierValue && typeof specifierValue === "object") {
      for (var i = 0; i < specifierValue.length; ++i) {
        if (matchesRange(specifierValue[i])) {
          return true;
        }
      }
      return false;
    }
    return matchesRange(specifierValue);
  }
  var data = require_core3();
  var core = {};
  for (var mod in data) {
    if (Object.prototype.hasOwnProperty.call(data, mod)) {
      core[mod] = versionIncluded(data[mod]);
    }
  }
  module3.exports = core;
});

// ../../node_modules/.pnpm/resolve@1.18.1/node_modules/resolve/lib/is-core.js
var require_is_core = __commonJS((exports2, module3) => {
  var isCoreModule = require_is_core_module();
  module3.exports = function isCore(x) {
    return isCoreModule(x);
  };
});

// ../../node_modules/.pnpm/resolve@1.18.1/node_modules/resolve/lib/sync.js
var require_sync8 = __commonJS((exports2, module3) => {
  var isCore = require_is_core_module();
  var fs17 = require("fs");
  var path19 = require("path");
  var caller = require_caller();
  var nodeModulesPaths = require_node_modules_paths();
  var normalizeOptions = require_normalize_options();
  var realpathFS = fs17.realpathSync && typeof fs17.realpathSync.native === "function" ? fs17.realpathSync.native : fs17.realpathSync;
  var defaultIsFile = function isFile(file) {
    try {
      var stat = fs17.statSync(file);
    } catch (e) {
      if (e && (e.code === "ENOENT" || e.code === "ENOTDIR"))
        return false;
      throw e;
    }
    return stat.isFile() || stat.isFIFO();
  };
  var defaultIsDir = function isDirectory(dir) {
    try {
      var stat = fs17.statSync(dir);
    } catch (e) {
      if (e && (e.code === "ENOENT" || e.code === "ENOTDIR"))
        return false;
      throw e;
    }
    return stat.isDirectory();
  };
  var defaultRealpathSync = function realpathSync(x) {
    try {
      return realpathFS(x);
    } catch (realpathErr) {
      if (realpathErr.code !== "ENOENT") {
        throw realpathErr;
      }
    }
    return x;
  };
  var maybeRealpathSync = function maybeRealpathSync2(realpathSync, x, opts) {
    if (opts && opts.preserveSymlinks === false) {
      return realpathSync(x);
    }
    return x;
  };
  var getPackageCandidates = function getPackageCandidates2(x, start, opts) {
    var dirs = nodeModulesPaths(start, opts, x);
    for (var i = 0; i < dirs.length; i++) {
      dirs[i] = path19.join(dirs[i], x);
    }
    return dirs;
  };
  module3.exports = function resolveSync(x, options) {
    if (typeof x !== "string") {
      throw new TypeError("Path must be a string.");
    }
    var opts = normalizeOptions(x, options);
    var isFile = opts.isFile || defaultIsFile;
    var readFileSync = opts.readFileSync || fs17.readFileSync;
    var isDirectory = opts.isDirectory || defaultIsDir;
    var realpathSync = opts.realpathSync || defaultRealpathSync;
    var packageIterator = opts.packageIterator;
    var extensions = opts.extensions || [".js"];
    var basedir = opts.basedir || path19.dirname(caller());
    var parent = opts.filename || basedir;
    opts.paths = opts.paths || [];
    var absoluteStart = maybeRealpathSync(realpathSync, path19.resolve(basedir), opts);
    if (/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/.test(x)) {
      var res = path19.resolve(absoluteStart, x);
      if (x === "." || x === ".." || x.slice(-1) === "/")
        res += "/";
      var m = loadAsFileSync(res) || loadAsDirectorySync(res);
      if (m)
        return maybeRealpathSync(realpathSync, m, opts);
    } else if (isCore(x)) {
      return x;
    } else {
      var n = loadNodeModulesSync(x, absoluteStart);
      if (n)
        return maybeRealpathSync(realpathSync, n, opts);
    }
    var err = new Error("Cannot find module '" + x + "' from '" + parent + "'");
    err.code = "MODULE_NOT_FOUND";
    throw err;
    function loadAsFileSync(x2) {
      var pkg2 = loadpkg(path19.dirname(x2));
      if (pkg2 && pkg2.dir && pkg2.pkg && opts.pathFilter) {
        var rfile = path19.relative(pkg2.dir, x2);
        var r = opts.pathFilter(pkg2.pkg, x2, rfile);
        if (r) {
          x2 = path19.resolve(pkg2.dir, r);
        }
      }
      if (isFile(x2)) {
        return x2;
      }
      for (var i = 0; i < extensions.length; i++) {
        var file = x2 + extensions[i];
        if (isFile(file)) {
          return file;
        }
      }
    }
    function loadpkg(dir) {
      if (dir === "" || dir === "/")
        return;
      if (process.platform === "win32" && /^\w:[/\\]*$/.test(dir)) {
        return;
      }
      if (/[/\\]node_modules[/\\]*$/.test(dir))
        return;
      var pkgfile = path19.join(maybeRealpathSync(realpathSync, dir, opts), "package.json");
      if (!isFile(pkgfile)) {
        return loadpkg(path19.dirname(dir));
      }
      var body = readFileSync(pkgfile);
      try {
        var pkg2 = JSON.parse(body);
      } catch (jsonErr) {
      }
      if (pkg2 && opts.packageFilter) {
        pkg2 = opts.packageFilter(pkg2, dir);
      }
      return {pkg: pkg2, dir};
    }
    function loadAsDirectorySync(x2) {
      var pkgfile = path19.join(maybeRealpathSync(realpathSync, x2, opts), "/package.json");
      if (isFile(pkgfile)) {
        try {
          var body = readFileSync(pkgfile, "UTF8");
          var pkg2 = JSON.parse(body);
        } catch (e) {
        }
        if (pkg2 && opts.packageFilter) {
          pkg2 = opts.packageFilter(pkg2, x2);
        }
        if (pkg2 && pkg2.main) {
          if (typeof pkg2.main !== "string") {
            var mainError = new TypeError("package “" + pkg2.name + "” `main` must be a string");
            mainError.code = "INVALID_PACKAGE_MAIN";
            throw mainError;
          }
          if (pkg2.main === "." || pkg2.main === "./") {
            pkg2.main = "index";
          }
          try {
            var m2 = loadAsFileSync(path19.resolve(x2, pkg2.main));
            if (m2)
              return m2;
            var n2 = loadAsDirectorySync(path19.resolve(x2, pkg2.main));
            if (n2)
              return n2;
          } catch (e) {
          }
        }
      }
      return loadAsFileSync(path19.join(x2, "/index"));
    }
    function loadNodeModulesSync(x2, start) {
      var thunk = function() {
        return getPackageCandidates(x2, start, opts);
      };
      var dirs = packageIterator ? packageIterator(x2, start, thunk, opts) : thunk();
      for (var i = 0; i < dirs.length; i++) {
        var dir = dirs[i];
        if (isDirectory(path19.dirname(dir))) {
          var m2 = loadAsFileSync(dir);
          if (m2)
            return m2;
          var n2 = loadAsDirectorySync(dir);
          if (n2)
            return n2;
        }
      }
    }
  };
});

// ../../node_modules/.pnpm/resolve@1.18.1/node_modules/resolve/index.js
var require_resolve = __commonJS((exports2, module3) => {
  var async = require_async6();
  async.core = require_core4();
  async.isCore = require_is_core();
  async.sync = require_sync8();
  module3.exports = async;
});

// ../../node_modules/.pnpm/normalize-package-data@2.5.0/node_modules/normalize-package-data/lib/extract_description.js
var require_extract_description = __commonJS((exports2, module3) => {
  module3.exports = extractDescription;
  function extractDescription(d) {
    if (!d)
      return;
    if (d === "ERROR: No README data found!")
      return;
    d = d.trim().split("\n");
    for (var s = 0; d[s] && d[s].trim().match(/^(#|$)/); s++)
      ;
    var l = d.length;
    for (var e = s + 1; e < l && d[e].trim(); e++)
      ;
    return d.slice(s, e).join(" ").trim();
  }
});

// ../../node_modules/.pnpm/normalize-package-data@2.5.0/node_modules/normalize-package-data/lib/typos.json
var require_typos = __commonJS((exports2, module3) => {
  module3.exports = {
    topLevel: {
      dependancies: "dependencies",
      dependecies: "dependencies",
      depdenencies: "dependencies",
      devEependencies: "devDependencies",
      depends: "dependencies",
      "dev-dependencies": "devDependencies",
      devDependences: "devDependencies",
      devDepenencies: "devDependencies",
      devdependencies: "devDependencies",
      repostitory: "repository",
      repo: "repository",
      prefereGlobal: "preferGlobal",
      hompage: "homepage",
      hampage: "homepage",
      autohr: "author",
      autor: "author",
      contributers: "contributors",
      publicationConfig: "publishConfig",
      script: "scripts"
    },
    bugs: {web: "url", name: "url"},
    script: {server: "start", tests: "test"}
  };
});

// ../../node_modules/.pnpm/normalize-package-data@2.5.0/node_modules/normalize-package-data/lib/fixer.js
var require_fixer = __commonJS((exports2, module3) => {
  var semver = require_semver2();
  var validateLicense = require_validate_npm_package_license();
  var hostedGitInfo = require_hosted_git_info();
  var isBuiltinModule = require_resolve().isCore;
  var depTypes = ["dependencies", "devDependencies", "optionalDependencies"];
  var extractDescription = require_extract_description();
  var url = require("url");
  var typos = require_typos();
  var fixer = module3.exports = {
    warn: function() {
    },
    fixRepositoryField: function(data) {
      if (data.repositories) {
        this.warn("repositories");
        data.repository = data.repositories[0];
      }
      if (!data.repository)
        return this.warn("missingRepository");
      if (typeof data.repository === "string") {
        data.repository = {
          type: "git",
          url: data.repository
        };
      }
      var r = data.repository.url || "";
      if (r) {
        var hosted = hostedGitInfo.fromUrl(r);
        if (hosted) {
          r = data.repository.url = hosted.getDefaultRepresentation() == "shortcut" ? hosted.https() : hosted.toString();
        }
      }
      if (r.match(/github.com\/[^\/]+\/[^\/]+\.git\.git$/)) {
        this.warn("brokenGitUrl", r);
      }
    },
    fixTypos: function(data) {
      Object.keys(typos.topLevel).forEach(function(d) {
        if (data.hasOwnProperty(d)) {
          this.warn("typo", d, typos.topLevel[d]);
        }
      }, this);
    },
    fixScriptsField: function(data) {
      if (!data.scripts)
        return;
      if (typeof data.scripts !== "object") {
        this.warn("nonObjectScripts");
        delete data.scripts;
        return;
      }
      Object.keys(data.scripts).forEach(function(k) {
        if (typeof data.scripts[k] !== "string") {
          this.warn("nonStringScript");
          delete data.scripts[k];
        } else if (typos.script[k] && !data.scripts[typos.script[k]]) {
          this.warn("typo", k, typos.script[k], "scripts");
        }
      }, this);
    },
    fixFilesField: function(data) {
      var files = data.files;
      if (files && !Array.isArray(files)) {
        this.warn("nonArrayFiles");
        delete data.files;
      } else if (data.files) {
        data.files = data.files.filter(function(file) {
          if (!file || typeof file !== "string") {
            this.warn("invalidFilename", file);
            return false;
          } else {
            return true;
          }
        }, this);
      }
    },
    fixBinField: function(data) {
      if (!data.bin)
        return;
      if (typeof data.bin === "string") {
        var b = {};
        var match;
        if (match = data.name.match(/^@[^/]+[/](.*)$/)) {
          b[match[1]] = data.bin;
        } else {
          b[data.name] = data.bin;
        }
        data.bin = b;
      }
    },
    fixManField: function(data) {
      if (!data.man)
        return;
      if (typeof data.man === "string") {
        data.man = [data.man];
      }
    },
    fixBundleDependenciesField: function(data) {
      var bdd = "bundledDependencies";
      var bd = "bundleDependencies";
      if (data[bdd] && !data[bd]) {
        data[bd] = data[bdd];
        delete data[bdd];
      }
      if (data[bd] && !Array.isArray(data[bd])) {
        this.warn("nonArrayBundleDependencies");
        delete data[bd];
      } else if (data[bd]) {
        data[bd] = data[bd].filter(function(bd2) {
          if (!bd2 || typeof bd2 !== "string") {
            this.warn("nonStringBundleDependency", bd2);
            return false;
          } else {
            if (!data.dependencies) {
              data.dependencies = {};
            }
            if (!data.dependencies.hasOwnProperty(bd2)) {
              this.warn("nonDependencyBundleDependency", bd2);
              data.dependencies[bd2] = "*";
            }
            return true;
          }
        }, this);
      }
    },
    fixDependencies: function(data, strict) {
      var loose = !strict;
      objectifyDeps(data, this.warn);
      addOptionalDepsToDeps(data, this.warn);
      this.fixBundleDependenciesField(data);
      ["dependencies", "devDependencies"].forEach(function(deps) {
        if (!(deps in data))
          return;
        if (!data[deps] || typeof data[deps] !== "object") {
          this.warn("nonObjectDependencies", deps);
          delete data[deps];
          return;
        }
        Object.keys(data[deps]).forEach(function(d) {
          var r = data[deps][d];
          if (typeof r !== "string") {
            this.warn("nonStringDependency", d, JSON.stringify(r));
            delete data[deps][d];
          }
          var hosted = hostedGitInfo.fromUrl(data[deps][d]);
          if (hosted)
            data[deps][d] = hosted.toString();
        }, this);
      }, this);
    },
    fixModulesField: function(data) {
      if (data.modules) {
        this.warn("deprecatedModules");
        delete data.modules;
      }
    },
    fixKeywordsField: function(data) {
      if (typeof data.keywords === "string") {
        data.keywords = data.keywords.split(/,\s+/);
      }
      if (data.keywords && !Array.isArray(data.keywords)) {
        delete data.keywords;
        this.warn("nonArrayKeywords");
      } else if (data.keywords) {
        data.keywords = data.keywords.filter(function(kw) {
          if (typeof kw !== "string" || !kw) {
            this.warn("nonStringKeyword");
            return false;
          } else {
            return true;
          }
        }, this);
      }
    },
    fixVersionField: function(data, strict) {
      var loose = !strict;
      if (!data.version) {
        data.version = "";
        return true;
      }
      if (!semver.valid(data.version, loose)) {
        throw new Error('Invalid version: "' + data.version + '"');
      }
      data.version = semver.clean(data.version, loose);
      return true;
    },
    fixPeople: function(data) {
      modifyPeople(data, unParsePerson);
      modifyPeople(data, parsePerson);
    },
    fixNameField: function(data, options) {
      if (typeof options === "boolean")
        options = {strict: options};
      else if (typeof options === "undefined")
        options = {};
      var strict = options.strict;
      if (!data.name && !strict) {
        data.name = "";
        return;
      }
      if (typeof data.name !== "string") {
        throw new Error("name field must be a string.");
      }
      if (!strict)
        data.name = data.name.trim();
      ensureValidName(data.name, strict, options.allowLegacyCase);
      if (isBuiltinModule(data.name))
        this.warn("conflictingName", data.name);
    },
    fixDescriptionField: function(data) {
      if (data.description && typeof data.description !== "string") {
        this.warn("nonStringDescription");
        delete data.description;
      }
      if (data.readme && !data.description)
        data.description = extractDescription(data.readme);
      if (data.description === void 0)
        delete data.description;
      if (!data.description)
        this.warn("missingDescription");
    },
    fixReadmeField: function(data) {
      if (!data.readme) {
        this.warn("missingReadme");
        data.readme = "ERROR: No README data found!";
      }
    },
    fixBugsField: function(data) {
      if (!data.bugs && data.repository && data.repository.url) {
        var hosted = hostedGitInfo.fromUrl(data.repository.url);
        if (hosted && hosted.bugs()) {
          data.bugs = {url: hosted.bugs()};
        }
      } else if (data.bugs) {
        var emailRe = /^.+@.*\..+$/;
        if (typeof data.bugs == "string") {
          if (emailRe.test(data.bugs))
            data.bugs = {email: data.bugs};
          else if (url.parse(data.bugs).protocol)
            data.bugs = {url: data.bugs};
          else
            this.warn("nonEmailUrlBugsString");
        } else {
          bugsTypos(data.bugs, this.warn);
          var oldBugs = data.bugs;
          data.bugs = {};
          if (oldBugs.url) {
            if (typeof oldBugs.url == "string" && url.parse(oldBugs.url).protocol)
              data.bugs.url = oldBugs.url;
            else
              this.warn("nonUrlBugsUrlField");
          }
          if (oldBugs.email) {
            if (typeof oldBugs.email == "string" && emailRe.test(oldBugs.email))
              data.bugs.email = oldBugs.email;
            else
              this.warn("nonEmailBugsEmailField");
          }
        }
        if (!data.bugs.email && !data.bugs.url) {
          delete data.bugs;
          this.warn("emptyNormalizedBugs");
        }
      }
    },
    fixHomepageField: function(data) {
      if (!data.homepage && data.repository && data.repository.url) {
        var hosted = hostedGitInfo.fromUrl(data.repository.url);
        if (hosted && hosted.docs())
          data.homepage = hosted.docs();
      }
      if (!data.homepage)
        return;
      if (typeof data.homepage !== "string") {
        this.warn("nonUrlHomepage");
        return delete data.homepage;
      }
      if (!url.parse(data.homepage).protocol) {
        data.homepage = "http://" + data.homepage;
      }
    },
    fixLicenseField: function(data) {
      if (!data.license) {
        return this.warn("missingLicense");
      } else {
        if (typeof data.license !== "string" || data.license.length < 1 || data.license.trim() === "") {
          this.warn("invalidLicense");
        } else {
          if (!validateLicense(data.license).validForNewPackages)
            this.warn("invalidLicense");
        }
      }
    }
  };
  function isValidScopedPackageName(spec) {
    if (spec.charAt(0) !== "@")
      return false;
    var rest = spec.slice(1).split("/");
    if (rest.length !== 2)
      return false;
    return rest[0] && rest[1] && rest[0] === encodeURIComponent(rest[0]) && rest[1] === encodeURIComponent(rest[1]);
  }
  function isCorrectlyEncodedName(spec) {
    return !spec.match(/[\/@\s\+%:]/) && spec === encodeURIComponent(spec);
  }
  function ensureValidName(name, strict, allowLegacyCase) {
    if (name.charAt(0) === "." || !(isValidScopedPackageName(name) || isCorrectlyEncodedName(name)) || strict && !allowLegacyCase && name !== name.toLowerCase() || name.toLowerCase() === "node_modules" || name.toLowerCase() === "favicon.ico") {
      throw new Error("Invalid name: " + JSON.stringify(name));
    }
  }
  function modifyPeople(data, fn) {
    if (data.author)
      data.author = fn(data.author);
    ["maintainers", "contributors"].forEach(function(set) {
      if (!Array.isArray(data[set]))
        return;
      data[set] = data[set].map(fn);
    });
    return data;
  }
  function unParsePerson(person) {
    if (typeof person === "string")
      return person;
    var name = person.name || "";
    var u = person.url || person.web;
    var url2 = u ? " (" + u + ")" : "";
    var e = person.email || person.mail;
    var email = e ? " <" + e + ">" : "";
    return name + email + url2;
  }
  function parsePerson(person) {
    if (typeof person !== "string")
      return person;
    var name = person.match(/^([^\(<]+)/);
    var url2 = person.match(/\(([^\)]+)\)/);
    var email = person.match(/<([^>]+)>/);
    var obj = {};
    if (name && name[0].trim())
      obj.name = name[0].trim();
    if (email)
      obj.email = email[1];
    if (url2)
      obj.url = url2[1];
    return obj;
  }
  function addOptionalDepsToDeps(data, warn) {
    var o = data.optionalDependencies;
    if (!o)
      return;
    var d = data.dependencies || {};
    Object.keys(o).forEach(function(k) {
      d[k] = o[k];
    });
    data.dependencies = d;
  }
  function depObjectify(deps, type, warn) {
    if (!deps)
      return {};
    if (typeof deps === "string") {
      deps = deps.trim().split(/[\n\r\s\t ,]+/);
    }
    if (!Array.isArray(deps))
      return deps;
    warn("deprecatedArrayDependencies", type);
    var o = {};
    deps.filter(function(d) {
      return typeof d === "string";
    }).forEach(function(d) {
      d = d.trim().split(/(:?[@\s><=])/);
      var dn = d.shift();
      var dv = d.join("");
      dv = dv.trim();
      dv = dv.replace(/^@/, "");
      o[dn] = dv;
    });
    return o;
  }
  function objectifyDeps(data, warn) {
    depTypes.forEach(function(type) {
      if (!data[type])
        return;
      data[type] = depObjectify(data[type], type, warn);
    });
  }
  function bugsTypos(bugs, warn) {
    if (!bugs)
      return;
    Object.keys(bugs).forEach(function(k) {
      if (typos.bugs[k]) {
        warn("typo", k, typos.bugs[k], "bugs");
        bugs[typos.bugs[k]] = bugs[k];
        delete bugs[k];
      }
    });
  }
});

// ../../node_modules/.pnpm/normalize-package-data@2.5.0/node_modules/normalize-package-data/lib/warning_messages.json
var require_warning_messages = __commonJS((exports2, module3) => {
  module3.exports = {
    repositories: "'repositories' (plural) Not supported. Please pick one as the 'repository' field",
    missingRepository: "No repository field.",
    brokenGitUrl: "Probably broken git url: %s",
    nonObjectScripts: "scripts must be an object",
    nonStringScript: "script values must be string commands",
    nonArrayFiles: "Invalid 'files' member",
    invalidFilename: "Invalid filename in 'files' list: %s",
    nonArrayBundleDependencies: "Invalid 'bundleDependencies' list. Must be array of package names",
    nonStringBundleDependency: "Invalid bundleDependencies member: %s",
    nonDependencyBundleDependency: "Non-dependency in bundleDependencies: %s",
    nonObjectDependencies: "%s field must be an object",
    nonStringDependency: "Invalid dependency: %s %s",
    deprecatedArrayDependencies: "specifying %s as array is deprecated",
    deprecatedModules: "modules field is deprecated",
    nonArrayKeywords: "keywords should be an array of strings",
    nonStringKeyword: "keywords should be an array of strings",
    conflictingName: "%s is also the name of a node core module.",
    nonStringDescription: "'description' field should be a string",
    missingDescription: "No description",
    missingReadme: "No README data",
    missingLicense: "No license field.",
    nonEmailUrlBugsString: "Bug string field must be url, email, or {email,url}",
    nonUrlBugsUrlField: "bugs.url field must be a string url. Deleted.",
    nonEmailBugsEmailField: "bugs.email field must be a string email. Deleted.",
    emptyNormalizedBugs: "Normalized value of bugs field is an empty object. Deleted.",
    nonUrlHomepage: "homepage field must be a string url. Deleted.",
    invalidLicense: "license should be a valid SPDX license expression",
    typo: "%s should probably be %s."
  };
});

// ../../node_modules/.pnpm/normalize-package-data@2.5.0/node_modules/normalize-package-data/lib/make_warning.js
var require_make_warning = __commonJS((exports2, module3) => {
  var util4 = require("util");
  var messages = require_warning_messages();
  module3.exports = function() {
    var args2 = Array.prototype.slice.call(arguments, 0);
    var warningName = args2.shift();
    if (warningName == "typo") {
      return makeTypoWarning.apply(null, args2);
    } else {
      var msgTemplate = messages[warningName] ? messages[warningName] : warningName + ": '%s'";
      args2.unshift(msgTemplate);
      return util4.format.apply(null, args2);
    }
  };
  function makeTypoWarning(providedName, probableName, field) {
    if (field) {
      providedName = field + "['" + providedName + "']";
      probableName = field + "['" + probableName + "']";
    }
    return util4.format(messages.typo, providedName, probableName);
  }
});

// ../../node_modules/.pnpm/normalize-package-data@2.5.0/node_modules/normalize-package-data/lib/normalize.js
var require_normalize = __commonJS((exports2, module3) => {
  module3.exports = normalize;
  var fixer = require_fixer();
  normalize.fixer = fixer;
  var makeWarning = require_make_warning();
  var fieldsToFix = [
    "name",
    "version",
    "description",
    "repository",
    "modules",
    "scripts",
    "files",
    "bin",
    "man",
    "bugs",
    "keywords",
    "readme",
    "homepage",
    "license"
  ];
  var otherThingsToFix = ["dependencies", "people", "typos"];
  var thingsToFix = fieldsToFix.map(function(fieldName) {
    return ucFirst(fieldName) + "Field";
  });
  thingsToFix = thingsToFix.concat(otherThingsToFix);
  function normalize(data, warn, strict) {
    if (warn === true)
      warn = null, strict = true;
    if (!strict)
      strict = false;
    if (!warn || data.private)
      warn = function(msg) {
      };
    if (data.scripts && data.scripts.install === "node-gyp rebuild" && !data.scripts.preinstall) {
      data.gypfile = true;
    }
    fixer.warn = function() {
      warn(makeWarning.apply(null, arguments));
    };
    thingsToFix.forEach(function(thingName) {
      fixer["fix" + ucFirst(thingName)](data, strict);
    });
    data._id = data.name + "@" + data.version;
  }
  function ucFirst(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  }
});

// ../../node_modules/.pnpm/read-pkg@5.2.0/node_modules/read-pkg/index.js
var require_read_pkg = __commonJS((exports2, module3) => {
  "use strict";
  const {promisify: promisify3} = require("util");
  const fs17 = require("fs");
  const path19 = require("path");
  const parseJson = require_parse_json();
  const readFileAsync2 = promisify3(fs17.readFile);
  module3.exports = async (options) => {
    options = {
      cwd: process.cwd(),
      normalize: true,
      ...options
    };
    const filePath = path19.resolve(options.cwd, "package.json");
    const json = parseJson(await readFileAsync2(filePath, "utf8"));
    if (options.normalize) {
      require_normalize()(json);
    }
    return json;
  };
  module3.exports.sync = (options) => {
    options = {
      cwd: process.cwd(),
      normalize: true,
      ...options
    };
    const filePath = path19.resolve(options.cwd, "package.json");
    const json = parseJson(fs17.readFileSync(filePath, "utf8"));
    if (options.normalize) {
      require_normalize()(json);
    }
    return json;
  };
});

// ../../node_modules/.pnpm/read-pkg-up@7.0.1/node_modules/read-pkg-up/index.js
var require_read_pkg_up = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const findUp = require_find_up();
  const readPkg = require_read_pkg();
  module3.exports = async (options) => {
    const filePath = await findUp("package.json", options);
    if (!filePath) {
      return;
    }
    return {
      packageJson: await readPkg({...options, cwd: path19.dirname(filePath)}),
      path: filePath
    };
  };
  module3.exports.sync = (options) => {
    const filePath = findUp.sync("package.json", options);
    if (!filePath) {
      return;
    }
    return {
      packageJson: readPkg.sync({...options, cwd: path19.dirname(filePath)}),
      path: filePath
    };
  };
});

// ../sdk/dist/getPackedPackage.js
var require_getPackedPackage = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getPackedPackage = void 0;
  const execa_1 = __importDefault(require_execa());
  const path_1 = __importDefault(require("path"));
  const tempy_1 = __importDefault(require_tempy());
  const fs_1 = __importDefault(require("fs"));
  const resolve_pkg_1 = __importDefault(require_resolve_pkg());
  const tar_1 = __importDefault(require_tar());
  const copy_1 = __importDefault(require_copy2());
  const make_dir_1 = __importDefault(require_make_dir());
  const util_1 = require("util");
  const rimraf_1 = __importDefault(require_rimraf());
  const read_pkg_up_1 = __importDefault(require_read_pkg_up());
  const del = util_1.promisify(rimraf_1.default);
  async function getPackedPackage(name, target, packageDir) {
    packageDir = packageDir || resolve_pkg_1.default(name, {cwd: __dirname}) || resolve_pkg_1.default(name, {cwd: target});
    if (!packageDir) {
      const pkg2 = await read_pkg_up_1.default({
        cwd: target
      });
      if (pkg2 && pkg2.packageJson.name === name) {
        packageDir = path_1.default.dirname(pkg2.path);
      }
    }
    if (!packageDir && fs_1.default.existsSync(path_1.default.join(process.cwd(), "package.json"))) {
      packageDir = process.cwd();
    }
    if (!packageDir) {
      throw new Error(`Error in getPackage: Could not resolve package ${name} from ${__dirname}`);
    }
    const tmpDir = tempy_1.default.directory();
    const archivePath = path_1.default.join(tmpDir, `package.tgz`);
    await execa_1.default.command(`yarn pack -f ${archivePath}`, {
      shell: true,
      cwd: packageDir
    });
    await tar_1.default.extract({
      cwd: tmpDir,
      file: archivePath
    });
    await del(archivePath);
    if (target) {
      await make_dir_1.default(target);
      await copy_1.default({
        from: path_1.default.join(tmpDir, "package"),
        to: target,
        recursive: true,
        parallelJobs: 20,
        overwrite: true
      });
      await del(tmpDir);
    }
    return path_1.default.join(tmpDir, "package");
  }
  exports2.getPackedPackage = getPackedPackage;
});

// ../../node_modules/.pnpm/requires-port@1.0.0/node_modules/requires-port/index.js
var require_requires_port = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = function required(port, protocol) {
    protocol = protocol.split(":")[0];
    port = +port;
    if (!port)
      return false;
    switch (protocol) {
      case "http":
      case "ws":
        return port !== 80;
      case "https":
      case "wss":
        return port !== 443;
      case "ftp":
        return port !== 21;
      case "gopher":
        return port !== 70;
      case "file":
        return false;
    }
    return port !== 0;
  };
});

// ../../node_modules/.pnpm/querystringify@2.2.0/node_modules/querystringify/index.js
var require_querystringify = __commonJS((exports2) => {
  "use strict";
  var has = Object.prototype.hasOwnProperty;
  var undef;
  function decode(input) {
    try {
      return decodeURIComponent(input.replace(/\+/g, " "));
    } catch (e) {
      return null;
    }
  }
  function encode(input) {
    try {
      return encodeURIComponent(input);
    } catch (e) {
      return null;
    }
  }
  function querystring(query) {
    var parser = /([^=?#&]+)=?([^&]*)/g, result = {}, part;
    while (part = parser.exec(query)) {
      var key = decode(part[1]), value = decode(part[2]);
      if (key === null || value === null || key in result)
        continue;
      result[key] = value;
    }
    return result;
  }
  function querystringify(obj, prefix) {
    prefix = prefix || "";
    var pairs = [], value, key;
    if (typeof prefix !== "string")
      prefix = "?";
    for (key in obj) {
      if (has.call(obj, key)) {
        value = obj[key];
        if (!value && (value === null || value === undef || isNaN(value))) {
          value = "";
        }
        key = encode(key);
        value = encode(value);
        if (key === null || value === null)
          continue;
        pairs.push(key + "=" + value);
      }
    }
    return pairs.length ? prefix + pairs.join("&") : "";
  }
  exports2.stringify = querystringify;
  exports2.parse = querystring;
});

// ../../node_modules/.pnpm/url-parse@1.4.7/node_modules/url-parse/index.js
var require_url_parse = __commonJS((exports2, module3) => {
  "use strict";
  var required = require_requires_port();
  var qs = require_querystringify();
  var slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;
  var protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i;
  var whitespace = "[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]";
  var left = new RegExp("^" + whitespace + "+");
  function trimLeft(str) {
    return (str ? str : "").toString().replace(left, "");
  }
  var rules = [
    ["#", "hash"],
    ["?", "query"],
    function sanitize(address) {
      return address.replace("\\", "/");
    },
    ["/", "pathname"],
    ["@", "auth", 1],
    [NaN, "host", void 0, 1, 1],
    [/:(\d+)$/, "port", void 0, 1],
    [NaN, "hostname", void 0, 1, 1]
  ];
  var ignore = {hash: 1, query: 1};
  function lolcation(loc) {
    var globalVar;
    if (typeof window !== "undefined")
      globalVar = window;
    else if (typeof global !== "undefined")
      globalVar = global;
    else if (typeof self !== "undefined")
      globalVar = self;
    else
      globalVar = {};
    var location = globalVar.location || {};
    loc = loc || location;
    var finaldestination = {}, type = typeof loc, key;
    if (loc.protocol === "blob:") {
      finaldestination = new Url(unescape(loc.pathname), {});
    } else if (type === "string") {
      finaldestination = new Url(loc, {});
      for (key in ignore)
        delete finaldestination[key];
    } else if (type === "object") {
      for (key in loc) {
        if (key in ignore)
          continue;
        finaldestination[key] = loc[key];
      }
      if (finaldestination.slashes === void 0) {
        finaldestination.slashes = slashes.test(loc.href);
      }
    }
    return finaldestination;
  }
  function extractProtocol(address) {
    address = trimLeft(address);
    var match = protocolre.exec(address);
    return {
      protocol: match[1] ? match[1].toLowerCase() : "",
      slashes: !!match[2],
      rest: match[3]
    };
  }
  function resolve(relative, base) {
    if (relative === "")
      return base;
    var path19 = (base || "/").split("/").slice(0, -1).concat(relative.split("/")), i = path19.length, last = path19[i - 1], unshift = false, up = 0;
    while (i--) {
      if (path19[i] === ".") {
        path19.splice(i, 1);
      } else if (path19[i] === "..") {
        path19.splice(i, 1);
        up++;
      } else if (up) {
        if (i === 0)
          unshift = true;
        path19.splice(i, 1);
        up--;
      }
    }
    if (unshift)
      path19.unshift("");
    if (last === "." || last === "..")
      path19.push("");
    return path19.join("/");
  }
  function Url(address, location, parser) {
    address = trimLeft(address);
    if (!(this instanceof Url)) {
      return new Url(address, location, parser);
    }
    var relative, extracted, parse, instruction, index, key, instructions = rules.slice(), type = typeof location, url = this, i = 0;
    if (type !== "object" && type !== "string") {
      parser = location;
      location = null;
    }
    if (parser && typeof parser !== "function")
      parser = qs.parse;
    location = lolcation(location);
    extracted = extractProtocol(address || "");
    relative = !extracted.protocol && !extracted.slashes;
    url.slashes = extracted.slashes || relative && location.slashes;
    url.protocol = extracted.protocol || location.protocol || "";
    address = extracted.rest;
    if (!extracted.slashes)
      instructions[3] = [/(.*)/, "pathname"];
    for (; i < instructions.length; i++) {
      instruction = instructions[i];
      if (typeof instruction === "function") {
        address = instruction(address);
        continue;
      }
      parse = instruction[0];
      key = instruction[1];
      if (parse !== parse) {
        url[key] = address;
      } else if (typeof parse === "string") {
        if (~(index = address.indexOf(parse))) {
          if (typeof instruction[2] === "number") {
            url[key] = address.slice(0, index);
            address = address.slice(index + instruction[2]);
          } else {
            url[key] = address.slice(index);
            address = address.slice(0, index);
          }
        }
      } else if (index = parse.exec(address)) {
        url[key] = index[1];
        address = address.slice(0, index.index);
      }
      url[key] = url[key] || (relative && instruction[3] ? location[key] || "" : "");
      if (instruction[4])
        url[key] = url[key].toLowerCase();
    }
    if (parser)
      url.query = parser(url.query);
    if (relative && location.slashes && url.pathname.charAt(0) !== "/" && (url.pathname !== "" || location.pathname !== "")) {
      url.pathname = resolve(url.pathname, location.pathname);
    }
    if (!required(url.port, url.protocol)) {
      url.host = url.hostname;
      url.port = "";
    }
    url.username = url.password = "";
    if (url.auth) {
      instruction = url.auth.split(":");
      url.username = instruction[0] || "";
      url.password = instruction[1] || "";
    }
    url.origin = url.protocol && url.host && url.protocol !== "file:" ? url.protocol + "//" + url.host : "null";
    url.href = url.toString();
  }
  function set(part, value, fn) {
    var url = this;
    switch (part) {
      case "query":
        if (typeof value === "string" && value.length) {
          value = (fn || qs.parse)(value);
        }
        url[part] = value;
        break;
      case "port":
        url[part] = value;
        if (!required(value, url.protocol)) {
          url.host = url.hostname;
          url[part] = "";
        } else if (value) {
          url.host = url.hostname + ":" + value;
        }
        break;
      case "hostname":
        url[part] = value;
        if (url.port)
          value += ":" + url.port;
        url.host = value;
        break;
      case "host":
        url[part] = value;
        if (/:\d+$/.test(value)) {
          value = value.split(":");
          url.port = value.pop();
          url.hostname = value.join(":");
        } else {
          url.hostname = value;
          url.port = "";
        }
        break;
      case "protocol":
        url.protocol = value.toLowerCase();
        url.slashes = !fn;
        break;
      case "pathname":
      case "hash":
        if (value) {
          var char = part === "pathname" ? "/" : "#";
          url[part] = value.charAt(0) !== char ? char + value : value;
        } else {
          url[part] = value;
        }
        break;
      default:
        url[part] = value;
    }
    for (var i = 0; i < rules.length; i++) {
      var ins = rules[i];
      if (ins[4])
        url[ins[1]] = url[ins[1]].toLowerCase();
    }
    url.origin = url.protocol && url.host && url.protocol !== "file:" ? url.protocol + "//" + url.host : "null";
    url.href = url.toString();
    return url;
  }
  function toString(stringify) {
    if (!stringify || typeof stringify !== "function")
      stringify = qs.stringify;
    var query, url = this, protocol = url.protocol;
    if (protocol && protocol.charAt(protocol.length - 1) !== ":")
      protocol += ":";
    var result = protocol + (url.slashes ? "//" : "");
    if (url.username) {
      result += url.username;
      if (url.password)
        result += ":" + url.password;
      result += "@";
    }
    result += url.host + url.pathname;
    query = typeof url.query === "object" ? stringify(url.query) : url.query;
    if (query)
      result += query.charAt(0) !== "?" ? "?" + query : query;
    if (url.hash)
      result += url.hash;
    return result;
  }
  Url.prototype = {set, toString};
  Url.extractProtocol = extractProtocol;
  Url.location = lolcation;
  Url.trimLeft = trimLeft;
  Url.qs = qs;
  module3.exports = Url;
});

// ../sdk/dist/convertCredentials.js
var require_convertCredentials = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.databaseTypeToConnectorType = exports2.uriToCredentials = exports2.credentialsToUri = void 0;
  const url_parse_1 = __importDefault(require_url_parse());
  const path_1 = __importDefault(require("path"));
  function credentialsToUri(credentials) {
    const type = databaseTypeToProtocol(credentials.type);
    if (credentials.type === "mongo") {
      return credentials.uri;
    }
    const url = new url_parse_1.default(type + "//", true);
    if (credentials.host) {
      url.hostname = credentials.host;
    }
    if (credentials.type === "postgresql") {
      if (credentials.database) {
        url.pathname = "/" + credentials.database;
      }
      if (credentials.schema) {
        url.query.schema = credentials.schema;
      }
      if (credentials.socket) {
        url.query.host = credentials.socket;
      }
    } else if (credentials.type === "mysql") {
      url.pathname = "/" + (credentials.database || credentials.schema || "");
      if (credentials.socket) {
        url.query.socket = credentials.socket;
      }
    }
    if (credentials.ssl) {
      url.query.sslmode = "prefer";
    }
    if (credentials.user) {
      url.username = credentials.user;
    }
    if (credentials.password) {
      url.password = credentials.password;
    }
    if (credentials.port) {
      url.port = String(credentials.port);
    }
    url.host = `${url.hostname}${url.port ? `:${url.port}` : ""}`;
    if (credentials.extraFields) {
      for (const [key, value] of Object.entries(credentials.extraFields)) {
        url.query[key] = value;
      }
    }
    if (url.pathname === "/") {
      url.pathname = "";
    }
    if (credentials.type === "sqlite") {
      return credentials.uri;
    }
    return url.toString((q) => Object.entries(q).map(([key, value]) => `${key}=${value}`).join("&"));
  }
  exports2.credentialsToUri = credentialsToUri;
  function uriToCredentials3(connectionString) {
    const uri = new url_parse_1.default(connectionString, true);
    const type = protocolToDatabaseType(uri.protocol);
    const exists = (str) => str && str.length > 0;
    if (type === "mongo") {
      return {
        type,
        uri: connectionString
      };
    }
    const {schema, socket, host, ...extraFields} = uri.query;
    let database = void 0;
    if (type === "sqlite" && uri.pathname) {
      if (uri.pathname.startsWith("file:")) {
        database = uri.pathname.slice(5);
      }
      if (uri.pathname.startsWith("sqlite:")) {
        database = uri.pathname.slice(7);
      } else {
        database = path_1.default.basename(uri.pathname);
      }
    } else if (uri.pathname.length > 1) {
      database = uri.pathname.slice(1);
    }
    return {
      type,
      host: exists(uri.hostname) ? uri.hostname : void 0,
      user: exists(uri.username) ? uri.username : void 0,
      port: exists(uri.port) ? Number(uri.port) : void 0,
      password: exists(uri.password) ? uri.password : void 0,
      database,
      schema: uri.query.schema || void 0,
      uri: connectionString,
      ssl: Boolean(uri.query.sslmode),
      socket: uri.query.socket || uri.query.host,
      extraFields
    };
  }
  exports2.uriToCredentials = uriToCredentials3;
  function databaseTypeToProtocol(databaseType) {
    switch (databaseType) {
      case "postgresql":
        return "postgresql:";
      case "mysql":
        return "mysql:";
      case "mongo":
        return "mongodb:";
      case "sqlite":
        return "sqlite:";
      case "sqlserver":
        return "sqlserver:";
    }
  }
  function protocolToDatabaseType(protocol) {
    switch (protocol) {
      case "postgresql:":
      case "postgres:":
        return "postgresql";
      case "mongodb:":
        return "mongo";
      case "mysql:":
        return "mysql";
      case "file:":
      case "sqlite:":
        return "sqlite";
      case "sqlserver:":
      case "jdbc:sqlserver:":
        return "sqlserver";
    }
    throw new Error(`Unknown database type ${protocol}`);
  }
  function databaseTypeToConnectorType2(databaseType) {
    switch (databaseType) {
      case "postgresql":
        return "postgresql";
      case "mysql":
        return "mysql";
      case "sqlite":
        return "sqlite";
      case "sqlserver":
        return "sqlserver";
    }
    throw new Error(`Mongo is not yet supported`);
  }
  exports2.databaseTypeToConnectorType = databaseTypeToConnectorType2;
});

// ../../node_modules/.pnpm/async@2.6.3/node_modules/async/dist/async.js
var require_async7 = __commonJS((exports2, module3) => {
  (function(global2, factory) {
    typeof exports2 === "object" && typeof module3 !== "undefined" ? factory(exports2) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.async = global2.async || {});
  })(exports2, function(exports3) {
    "use strict";
    function slice(arrayLike, start) {
      start = start | 0;
      var newLen = Math.max(arrayLike.length - start, 0);
      var newArr = Array(newLen);
      for (var idx = 0; idx < newLen; idx++) {
        newArr[idx] = arrayLike[start + idx];
      }
      return newArr;
    }
    var apply = function(fn) {
      var args2 = slice(arguments, 1);
      return function() {
        var callArgs = slice(arguments);
        return fn.apply(null, args2.concat(callArgs));
      };
    };
    var initialParams = function(fn) {
      return function() {
        var args2 = slice(arguments);
        var callback = args2.pop();
        fn.call(this, args2, callback);
      };
    };
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    var hasSetImmediate = typeof setImmediate === "function" && setImmediate;
    var hasNextTick = typeof process === "object" && typeof process.nextTick === "function";
    function fallback(fn) {
      setTimeout(fn, 0);
    }
    function wrap(defer) {
      return function(fn) {
        var args2 = slice(arguments, 1);
        defer(function() {
          fn.apply(null, args2);
        });
      };
    }
    var _defer;
    if (hasSetImmediate) {
      _defer = setImmediate;
    } else if (hasNextTick) {
      _defer = process.nextTick;
    } else {
      _defer = fallback;
    }
    var setImmediate$1 = wrap(_defer);
    function asyncify(func) {
      return initialParams(function(args2, callback) {
        var result;
        try {
          result = func.apply(this, args2);
        } catch (e) {
          return callback(e);
        }
        if (isObject(result) && typeof result.then === "function") {
          result.then(function(value) {
            invokeCallback(callback, null, value);
          }, function(err) {
            invokeCallback(callback, err.message ? err : new Error(err));
          });
        } else {
          callback(null, result);
        }
      });
    }
    function invokeCallback(callback, error, value) {
      try {
        callback(error, value);
      } catch (e) {
        setImmediate$1(rethrow, e);
      }
    }
    function rethrow(error) {
      throw error;
    }
    var supportsSymbol = typeof Symbol === "function";
    function isAsync(fn) {
      return supportsSymbol && fn[Symbol.toStringTag] === "AsyncFunction";
    }
    function wrapAsync(asyncFn) {
      return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;
    }
    function applyEach$1(eachfn) {
      return function(fns) {
        var args2 = slice(arguments, 1);
        var go = initialParams(function(args3, callback) {
          var that = this;
          return eachfn(fns, function(fn, cb) {
            wrapAsync(fn).apply(that, args3.concat(cb));
          }, callback);
        });
        if (args2.length) {
          return go.apply(this, args2);
        } else {
          return go;
        }
      };
    }
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var Symbol$1 = root.Symbol;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag$1), tag = value[symToStringTag$1];
      try {
        value[symToStringTag$1] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag$1] = tag;
        } else {
          delete value[symToStringTag$1];
        }
      }
      return result;
    }
    var objectProto$1 = Object.prototype;
    var nativeObjectToString$1 = objectProto$1.toString;
    function objectToString(value) {
      return nativeObjectToString$1.call(value);
    }
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    var breakLoop = {};
    function noop() {
    }
    function once(fn) {
      return function() {
        if (fn === null)
          return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
      };
    }
    var iteratorSymbol = typeof Symbol === "function" && Symbol.iterator;
    var getIterator = function(coll) {
      return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
    };
    function baseTimes(n, iteratee) {
      var index2 = -1, result = Array(n);
      while (++index2 < n) {
        result[index2] = iteratee(index2);
      }
      return result;
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    var objectProto$3 = Object.prototype;
    var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
    var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty$2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function stubFalse() {
      return false;
    }
    var freeExports = typeof exports3 == "object" && exports3 && !exports3.nodeType && exports3;
    var freeModule = freeExports && typeof module3 == "object" && module3 && !module3.nodeType && module3;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    var MAX_SAFE_INTEGER$1 = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER$1 : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    var argsTag$1 = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag$1 = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    var freeExports$1 = typeof exports3 == "object" && exports3 && !exports3.nodeType && exports3;
    var freeModule$1 = freeExports$1 && typeof module3 == "object" && module3 && !module3.nodeType && module3;
    var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
    var freeProcess = moduleExports$1 && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule$1 && freeModule$1.require && freeModule$1.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    var objectProto$2 = Object.prototype;
    var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty$1.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    var objectProto$5 = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto$5;
      return value === proto;
    }
    function overArg(func, transform2) {
      return function(arg11) {
        return func(transform2(arg11));
      };
    }
    var nativeKeys = overArg(Object.keys, Object);
    var objectProto$4 = Object.prototype;
    var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$3.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function createArrayIterator(coll) {
      var i = -1;
      var len = coll.length;
      return function next() {
        return ++i < len ? {value: coll[i], key: i} : null;
      };
    }
    function createES2015Iterator(iterator2) {
      var i = -1;
      return function next() {
        var item = iterator2.next();
        if (item.done)
          return null;
        i++;
        return {value: item.value, key: i};
      };
    }
    function createObjectIterator(obj) {
      var okeys = keys(obj);
      var i = -1;
      var len = okeys.length;
      return function next() {
        var key = okeys[++i];
        return i < len ? {value: obj[key], key} : null;
      };
    }
    function iterator(coll) {
      if (isArrayLike(coll)) {
        return createArrayIterator(coll);
      }
      var iterator2 = getIterator(coll);
      return iterator2 ? createES2015Iterator(iterator2) : createObjectIterator(coll);
    }
    function onlyOnce(fn) {
      return function() {
        if (fn === null)
          throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
      };
    }
    function _eachOfLimit(limit) {
      return function(obj, iteratee, callback) {
        callback = once(callback || noop);
        if (limit <= 0 || !obj) {
          return callback(null);
        }
        var nextElem = iterator(obj);
        var done = false;
        var running = 0;
        var looping = false;
        function iterateeCallback(err, value) {
          running -= 1;
          if (err) {
            done = true;
            callback(err);
          } else if (value === breakLoop || done && running <= 0) {
            done = true;
            return callback(null);
          } else if (!looping) {
            replenish();
          }
        }
        function replenish() {
          looping = true;
          while (running < limit && !done) {
            var elem = nextElem();
            if (elem === null) {
              done = true;
              if (running <= 0) {
                callback(null);
              }
              return;
            }
            running += 1;
            iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
          }
          looping = false;
        }
        replenish();
      };
    }
    function eachOfLimit(coll, limit, iteratee, callback) {
      _eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);
    }
    function doLimit(fn, limit) {
      return function(iterable, iteratee, callback) {
        return fn(iterable, limit, iteratee, callback);
      };
    }
    function eachOfArrayLike(coll, iteratee, callback) {
      callback = once(callback || noop);
      var index2 = 0, completed = 0, length = coll.length;
      if (length === 0) {
        callback(null);
      }
      function iteratorCallback(err, value) {
        if (err) {
          callback(err);
        } else if (++completed === length || value === breakLoop) {
          callback(null);
        }
      }
      for (; index2 < length; index2++) {
        iteratee(coll[index2], index2, onlyOnce(iteratorCallback));
      }
    }
    var eachOfGeneric = doLimit(eachOfLimit, Infinity);
    var eachOf = function(coll, iteratee, callback) {
      var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
      eachOfImplementation(coll, wrapAsync(iteratee), callback);
    };
    function doParallel(fn) {
      return function(obj, iteratee, callback) {
        return fn(eachOf, obj, wrapAsync(iteratee), callback);
      };
    }
    function _asyncMap(eachfn, arr, iteratee, callback) {
      callback = callback || noop;
      arr = arr || [];
      var results = [];
      var counter = 0;
      var _iteratee = wrapAsync(iteratee);
      eachfn(arr, function(value, _2, callback2) {
        var index2 = counter++;
        _iteratee(value, function(err, v) {
          results[index2] = v;
          callback2(err);
        });
      }, function(err) {
        callback(err, results);
      });
    }
    var map = doParallel(_asyncMap);
    var applyEach = applyEach$1(map);
    function doParallelLimit(fn) {
      return function(obj, limit, iteratee, callback) {
        return fn(_eachOfLimit(limit), obj, wrapAsync(iteratee), callback);
      };
    }
    var mapLimit = doParallelLimit(_asyncMap);
    var mapSeries = doLimit(mapLimit, 1);
    var applyEachSeries = applyEach$1(mapSeries);
    function arrayEach(array, iteratee) {
      var index2 = -1, length = array == null ? 0 : array.length;
      while (++index2 < length) {
        if (iteratee(array[index2], index2, array) === false) {
          break;
        }
      }
      return array;
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index2 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index2];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    var baseFor = createBaseFor();
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index2 = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index2-- : ++index2 < length) {
        if (predicate(array[index2], index2, array)) {
          return index2;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function strictIndexOf(array, value, fromIndex) {
      var index2 = fromIndex - 1, length = array.length;
      while (++index2 < length) {
        if (array[index2] === value) {
          return index2;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    var auto = function(tasks, concurrency, callback) {
      if (typeof concurrency === "function") {
        callback = concurrency;
        concurrency = null;
      }
      callback = once(callback || noop);
      var keys$$1 = keys(tasks);
      var numTasks = keys$$1.length;
      if (!numTasks) {
        return callback(null);
      }
      if (!concurrency) {
        concurrency = numTasks;
      }
      var results = {};
      var runningTasks = 0;
      var hasError = false;
      var listeners = Object.create(null);
      var readyTasks = [];
      var readyToCheck = [];
      var uncheckedDependencies = {};
      baseForOwn(tasks, function(task, key) {
        if (!isArray(task)) {
          enqueueTask(key, [task]);
          readyToCheck.push(key);
          return;
        }
        var dependencies = task.slice(0, task.length - 1);
        var remainingDependencies = dependencies.length;
        if (remainingDependencies === 0) {
          enqueueTask(key, task);
          readyToCheck.push(key);
          return;
        }
        uncheckedDependencies[key] = remainingDependencies;
        arrayEach(dependencies, function(dependencyName) {
          if (!tasks[dependencyName]) {
            throw new Error("async.auto task `" + key + "` has a non-existent dependency `" + dependencyName + "` in " + dependencies.join(", "));
          }
          addListener(dependencyName, function() {
            remainingDependencies--;
            if (remainingDependencies === 0) {
              enqueueTask(key, task);
            }
          });
        });
      });
      checkForDeadlocks();
      processQueue();
      function enqueueTask(key, task) {
        readyTasks.push(function() {
          runTask(key, task);
        });
      }
      function processQueue() {
        if (readyTasks.length === 0 && runningTasks === 0) {
          return callback(null, results);
        }
        while (readyTasks.length && runningTasks < concurrency) {
          var run = readyTasks.shift();
          run();
        }
      }
      function addListener(taskName, fn) {
        var taskListeners = listeners[taskName];
        if (!taskListeners) {
          taskListeners = listeners[taskName] = [];
        }
        taskListeners.push(fn);
      }
      function taskComplete(taskName) {
        var taskListeners = listeners[taskName] || [];
        arrayEach(taskListeners, function(fn) {
          fn();
        });
        processQueue();
      }
      function runTask(key, task) {
        if (hasError)
          return;
        var taskCallback = onlyOnce(function(err, result) {
          runningTasks--;
          if (arguments.length > 2) {
            result = slice(arguments, 1);
          }
          if (err) {
            var safeResults = {};
            baseForOwn(results, function(val, rkey) {
              safeResults[rkey] = val;
            });
            safeResults[key] = result;
            hasError = true;
            listeners = Object.create(null);
            callback(err, safeResults);
          } else {
            results[key] = result;
            taskComplete(key);
          }
        });
        runningTasks++;
        var taskFn = wrapAsync(task[task.length - 1]);
        if (task.length > 1) {
          taskFn(results, taskCallback);
        } else {
          taskFn(taskCallback);
        }
      }
      function checkForDeadlocks() {
        var currentTask;
        var counter = 0;
        while (readyToCheck.length) {
          currentTask = readyToCheck.pop();
          counter++;
          arrayEach(getDependents(currentTask), function(dependent) {
            if (--uncheckedDependencies[dependent] === 0) {
              readyToCheck.push(dependent);
            }
          });
        }
        if (counter !== numTasks) {
          throw new Error("async.auto cannot execute tasks due to a recursive dependency");
        }
      }
      function getDependents(taskName) {
        var result = [];
        baseForOwn(tasks, function(task, key) {
          if (isArray(task) && baseIndexOf(task, taskName, 0) >= 0) {
            result.push(key);
          }
        });
        return result;
      }
    };
    function arrayMap(array, iteratee) {
      var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index2 < length) {
        result[index2] = iteratee(array[index2], index2, array);
      }
      return result;
    }
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    var INFINITY = 1 / 0;
    var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function baseSlice(array, start, end) {
      var index2 = -1, length = array.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index2 < length) {
        result[index2] = array[index2 + start];
      }
      return result;
    }
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === void 0 ? length : end;
      return !start && end >= length ? array : baseSlice(array, start, end);
    }
    function charsEndIndex(strSymbols, chrSymbols) {
      var index2 = strSymbols.length;
      while (index2-- && baseIndexOf(chrSymbols, strSymbols[index2], 0) > -1) {
      }
      return index2;
    }
    function charsStartIndex(strSymbols, chrSymbols) {
      var index2 = -1, length = strSymbols.length;
      while (++index2 < length && baseIndexOf(chrSymbols, strSymbols[index2], 0) > -1) {
      }
      return index2;
    }
    function asciiToArray(string) {
      return string.split("");
    }
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsZWJ = "\\u200d";
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }
    var rsAstralRange$1 = "\\ud800-\\udfff";
    var rsComboMarksRange$1 = "\\u0300-\\u036f";
    var reComboHalfMarksRange$1 = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange$1 = "\\u20d0-\\u20ff";
    var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
    var rsVarRange$1 = "\\ufe0e\\ufe0f";
    var rsAstral = "[" + rsAstralRange$1 + "]";
    var rsCombo = "[" + rsComboRange$1 + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange$1 + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsZWJ$1 = "\\u200d";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange$1 + "]?";
    var rsOptJoin = "(?:" + rsZWJ$1 + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }
    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    var reTrim = /^\s+|\s+$/g;
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === void 0)) {
        return string.replace(reTrim, "");
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
      return castSlice(strSymbols, start, end).join("");
    }
    var FN_ARGS = /^(?:async\s+)?(function)?\s*[^\(]*\(\s*([^\)]*)\)/m;
    var FN_ARG_SPLIT = /,/;
    var FN_ARG = /(=.+)?(\s*)$/;
    var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
    function parseParams(func) {
      func = func.toString().replace(STRIP_COMMENTS, "");
      func = func.match(FN_ARGS)[2].replace(" ", "");
      func = func ? func.split(FN_ARG_SPLIT) : [];
      func = func.map(function(arg11) {
        return trim(arg11.replace(FN_ARG, ""));
      });
      return func;
    }
    function autoInject(tasks, callback) {
      var newTasks = {};
      baseForOwn(tasks, function(taskFn, key) {
        var params;
        var fnIsAsync = isAsync(taskFn);
        var hasNoDeps = !fnIsAsync && taskFn.length === 1 || fnIsAsync && taskFn.length === 0;
        if (isArray(taskFn)) {
          params = taskFn.slice(0, -1);
          taskFn = taskFn[taskFn.length - 1];
          newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);
        } else if (hasNoDeps) {
          newTasks[key] = taskFn;
        } else {
          params = parseParams(taskFn);
          if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {
            throw new Error("autoInject task functions require explicit parameters.");
          }
          if (!fnIsAsync)
            params.pop();
          newTasks[key] = params.concat(newTask);
        }
        function newTask(results, taskCb) {
          var newArgs = arrayMap(params, function(name) {
            return results[name];
          });
          newArgs.push(taskCb);
          wrapAsync(taskFn).apply(null, newArgs);
        }
      });
      auto(newTasks, callback);
    }
    function DLL() {
      this.head = this.tail = null;
      this.length = 0;
    }
    function setInitial(dll, node) {
      dll.length = 1;
      dll.head = dll.tail = node;
    }
    DLL.prototype.removeLink = function(node) {
      if (node.prev)
        node.prev.next = node.next;
      else
        this.head = node.next;
      if (node.next)
        node.next.prev = node.prev;
      else
        this.tail = node.prev;
      node.prev = node.next = null;
      this.length -= 1;
      return node;
    };
    DLL.prototype.empty = function() {
      while (this.head)
        this.shift();
      return this;
    };
    DLL.prototype.insertAfter = function(node, newNode) {
      newNode.prev = node;
      newNode.next = node.next;
      if (node.next)
        node.next.prev = newNode;
      else
        this.tail = newNode;
      node.next = newNode;
      this.length += 1;
    };
    DLL.prototype.insertBefore = function(node, newNode) {
      newNode.prev = node.prev;
      newNode.next = node;
      if (node.prev)
        node.prev.next = newNode;
      else
        this.head = newNode;
      node.prev = newNode;
      this.length += 1;
    };
    DLL.prototype.unshift = function(node) {
      if (this.head)
        this.insertBefore(this.head, node);
      else
        setInitial(this, node);
    };
    DLL.prototype.push = function(node) {
      if (this.tail)
        this.insertAfter(this.tail, node);
      else
        setInitial(this, node);
    };
    DLL.prototype.shift = function() {
      return this.head && this.removeLink(this.head);
    };
    DLL.prototype.pop = function() {
      return this.tail && this.removeLink(this.tail);
    };
    DLL.prototype.toArray = function() {
      var arr = Array(this.length);
      var curr = this.head;
      for (var idx = 0; idx < this.length; idx++) {
        arr[idx] = curr.data;
        curr = curr.next;
      }
      return arr;
    };
    DLL.prototype.remove = function(testFn) {
      var curr = this.head;
      while (!!curr) {
        var next = curr.next;
        if (testFn(curr)) {
          this.removeLink(curr);
        }
        curr = next;
      }
      return this;
    };
    function queue(worker, concurrency, payload) {
      if (concurrency == null) {
        concurrency = 1;
      } else if (concurrency === 0) {
        throw new Error("Concurrency must not be zero");
      }
      var _worker = wrapAsync(worker);
      var numRunning = 0;
      var workersList = [];
      var processingScheduled = false;
      function _insert(data, insertAtFront, callback) {
        if (callback != null && typeof callback !== "function") {
          throw new Error("task callback must be a function");
        }
        q.started = true;
        if (!isArray(data)) {
          data = [data];
        }
        if (data.length === 0 && q.idle()) {
          return setImmediate$1(function() {
            q.drain();
          });
        }
        for (var i = 0, l = data.length; i < l; i++) {
          var item = {
            data: data[i],
            callback: callback || noop
          };
          if (insertAtFront) {
            q._tasks.unshift(item);
          } else {
            q._tasks.push(item);
          }
        }
        if (!processingScheduled) {
          processingScheduled = true;
          setImmediate$1(function() {
            processingScheduled = false;
            q.process();
          });
        }
      }
      function _next(tasks) {
        return function(err) {
          numRunning -= 1;
          for (var i = 0, l = tasks.length; i < l; i++) {
            var task = tasks[i];
            var index2 = baseIndexOf(workersList, task, 0);
            if (index2 === 0) {
              workersList.shift();
            } else if (index2 > 0) {
              workersList.splice(index2, 1);
            }
            task.callback.apply(task, arguments);
            if (err != null) {
              q.error(err, task.data);
            }
          }
          if (numRunning <= q.concurrency - q.buffer) {
            q.unsaturated();
          }
          if (q.idle()) {
            q.drain();
          }
          q.process();
        };
      }
      var isProcessing = false;
      var q = {
        _tasks: new DLL(),
        concurrency,
        payload,
        saturated: noop,
        unsaturated: noop,
        buffer: concurrency / 4,
        empty: noop,
        drain: noop,
        error: noop,
        started: false,
        paused: false,
        push: function(data, callback) {
          _insert(data, false, callback);
        },
        kill: function() {
          q.drain = noop;
          q._tasks.empty();
        },
        unshift: function(data, callback) {
          _insert(data, true, callback);
        },
        remove: function(testFn) {
          q._tasks.remove(testFn);
        },
        process: function() {
          if (isProcessing) {
            return;
          }
          isProcessing = true;
          while (!q.paused && numRunning < q.concurrency && q._tasks.length) {
            var tasks = [], data = [];
            var l = q._tasks.length;
            if (q.payload)
              l = Math.min(l, q.payload);
            for (var i = 0; i < l; i++) {
              var node = q._tasks.shift();
              tasks.push(node);
              workersList.push(node);
              data.push(node.data);
            }
            numRunning += 1;
            if (q._tasks.length === 0) {
              q.empty();
            }
            if (numRunning === q.concurrency) {
              q.saturated();
            }
            var cb = onlyOnce(_next(tasks));
            _worker(data, cb);
          }
          isProcessing = false;
        },
        length: function() {
          return q._tasks.length;
        },
        running: function() {
          return numRunning;
        },
        workersList: function() {
          return workersList;
        },
        idle: function() {
          return q._tasks.length + numRunning === 0;
        },
        pause: function() {
          q.paused = true;
        },
        resume: function() {
          if (q.paused === false) {
            return;
          }
          q.paused = false;
          setImmediate$1(q.process);
        }
      };
      return q;
    }
    function cargo(worker, payload) {
      return queue(worker, 1, payload);
    }
    var eachOfSeries = doLimit(eachOfLimit, 1);
    function reduce(coll, memo, iteratee, callback) {
      callback = once(callback || noop);
      var _iteratee = wrapAsync(iteratee);
      eachOfSeries(coll, function(x, i, callback2) {
        _iteratee(memo, x, function(err, v) {
          memo = v;
          callback2(err);
        });
      }, function(err) {
        callback(err, memo);
      });
    }
    function seq() {
      var _functions = arrayMap(arguments, wrapAsync);
      return function() {
        var args2 = slice(arguments);
        var that = this;
        var cb = args2[args2.length - 1];
        if (typeof cb == "function") {
          args2.pop();
        } else {
          cb = noop;
        }
        reduce(_functions, args2, function(newargs, fn, cb2) {
          fn.apply(that, newargs.concat(function(err) {
            var nextargs = slice(arguments, 1);
            cb2(err, nextargs);
          }));
        }, function(err, results) {
          cb.apply(that, [err].concat(results));
        });
      };
    }
    var compose = function() {
      return seq.apply(null, slice(arguments).reverse());
    };
    var _concat = Array.prototype.concat;
    var concatLimit = function(coll, limit, iteratee, callback) {
      callback = callback || noop;
      var _iteratee = wrapAsync(iteratee);
      mapLimit(coll, limit, function(val, callback2) {
        _iteratee(val, function(err) {
          if (err)
            return callback2(err);
          return callback2(null, slice(arguments, 1));
        });
      }, function(err, mapResults) {
        var result = [];
        for (var i = 0; i < mapResults.length; i++) {
          if (mapResults[i]) {
            result = _concat.apply(result, mapResults[i]);
          }
        }
        return callback(err, result);
      });
    };
    var concat = doLimit(concatLimit, Infinity);
    var concatSeries = doLimit(concatLimit, 1);
    var constant = function() {
      var values = slice(arguments);
      var args2 = [null].concat(values);
      return function() {
        var callback = arguments[arguments.length - 1];
        return callback.apply(this, args2);
      };
    };
    function identity(value) {
      return value;
    }
    function _createTester(check2, getResult) {
      return function(eachfn, arr, iteratee, cb) {
        cb = cb || noop;
        var testPassed = false;
        var testResult;
        eachfn(arr, function(value, _2, callback) {
          iteratee(value, function(err, result) {
            if (err) {
              callback(err);
            } else if (check2(result) && !testResult) {
              testPassed = true;
              testResult = getResult(true, value);
              callback(null, breakLoop);
            } else {
              callback();
            }
          });
        }, function(err) {
          if (err) {
            cb(err);
          } else {
            cb(null, testPassed ? testResult : getResult(false));
          }
        });
      };
    }
    function _findGetResult(v, x) {
      return x;
    }
    var detect = doParallel(_createTester(identity, _findGetResult));
    var detectLimit = doParallelLimit(_createTester(identity, _findGetResult));
    var detectSeries = doLimit(detectLimit, 1);
    function consoleFunc(name) {
      return function(fn) {
        var args2 = slice(arguments, 1);
        args2.push(function(err) {
          var args3 = slice(arguments, 1);
          if (typeof console === "object") {
            if (err) {
              if (console.error) {
                console.error(err);
              }
            } else if (console[name]) {
              arrayEach(args3, function(x) {
                console[name](x);
              });
            }
          }
        });
        wrapAsync(fn).apply(null, args2);
      };
    }
    var dir = consoleFunc("dir");
    function doDuring(fn, test, callback) {
      callback = onlyOnce(callback || noop);
      var _fn = wrapAsync(fn);
      var _test = wrapAsync(test);
      function next(err) {
        if (err)
          return callback(err);
        var args2 = slice(arguments, 1);
        args2.push(check2);
        _test.apply(this, args2);
      }
      function check2(err, truth) {
        if (err)
          return callback(err);
        if (!truth)
          return callback(null);
        _fn(next);
      }
      check2(null, true);
    }
    function doWhilst(iteratee, test, callback) {
      callback = onlyOnce(callback || noop);
      var _iteratee = wrapAsync(iteratee);
      var next = function(err) {
        if (err)
          return callback(err);
        var args2 = slice(arguments, 1);
        if (test.apply(this, args2))
          return _iteratee(next);
        callback.apply(null, [null].concat(args2));
      };
      _iteratee(next);
    }
    function doUntil(iteratee, test, callback) {
      doWhilst(iteratee, function() {
        return !test.apply(this, arguments);
      }, callback);
    }
    function during(test, fn, callback) {
      callback = onlyOnce(callback || noop);
      var _fn = wrapAsync(fn);
      var _test = wrapAsync(test);
      function next(err) {
        if (err)
          return callback(err);
        _test(check2);
      }
      function check2(err, truth) {
        if (err)
          return callback(err);
        if (!truth)
          return callback(null);
        _fn(next);
      }
      _test(check2);
    }
    function _withoutIndex(iteratee) {
      return function(value, index2, callback) {
        return iteratee(value, callback);
      };
    }
    function eachLimit(coll, iteratee, callback) {
      eachOf(coll, _withoutIndex(wrapAsync(iteratee)), callback);
    }
    function eachLimit$1(coll, limit, iteratee, callback) {
      _eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);
    }
    var eachSeries = doLimit(eachLimit$1, 1);
    function ensureAsync(fn) {
      if (isAsync(fn))
        return fn;
      return initialParams(function(args2, callback) {
        var sync = true;
        args2.push(function() {
          var innerArgs = arguments;
          if (sync) {
            setImmediate$1(function() {
              callback.apply(null, innerArgs);
            });
          } else {
            callback.apply(null, innerArgs);
          }
        });
        fn.apply(this, args2);
        sync = false;
      });
    }
    function notId(v) {
      return !v;
    }
    var every = doParallel(_createTester(notId, notId));
    var everyLimit = doParallelLimit(_createTester(notId, notId));
    var everySeries = doLimit(everyLimit, 1);
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    function filterArray(eachfn, arr, iteratee, callback) {
      var truthValues = new Array(arr.length);
      eachfn(arr, function(x, index2, callback2) {
        iteratee(x, function(err, v) {
          truthValues[index2] = !!v;
          callback2(err);
        });
      }, function(err) {
        if (err)
          return callback(err);
        var results = [];
        for (var i = 0; i < arr.length; i++) {
          if (truthValues[i])
            results.push(arr[i]);
        }
        callback(null, results);
      });
    }
    function filterGeneric(eachfn, coll, iteratee, callback) {
      var results = [];
      eachfn(coll, function(x, index2, callback2) {
        iteratee(x, function(err, v) {
          if (err) {
            callback2(err);
          } else {
            if (v) {
              results.push({index: index2, value: x});
            }
            callback2();
          }
        });
      }, function(err) {
        if (err) {
          callback(err);
        } else {
          callback(null, arrayMap(results.sort(function(a, b) {
            return a.index - b.index;
          }), baseProperty("value")));
        }
      });
    }
    function _filter(eachfn, coll, iteratee, callback) {
      var filter2 = isArrayLike(coll) ? filterArray : filterGeneric;
      filter2(eachfn, coll, wrapAsync(iteratee), callback || noop);
    }
    var filter = doParallel(_filter);
    var filterLimit = doParallelLimit(_filter);
    var filterSeries = doLimit(filterLimit, 1);
    function forever(fn, errback) {
      var done = onlyOnce(errback || noop);
      var task = wrapAsync(ensureAsync(fn));
      function next(err) {
        if (err)
          return done(err);
        task(next);
      }
      next();
    }
    var groupByLimit = function(coll, limit, iteratee, callback) {
      callback = callback || noop;
      var _iteratee = wrapAsync(iteratee);
      mapLimit(coll, limit, function(val, callback2) {
        _iteratee(val, function(err, key) {
          if (err)
            return callback2(err);
          return callback2(null, {key, val});
        });
      }, function(err, mapResults) {
        var result = {};
        var hasOwnProperty2 = Object.prototype.hasOwnProperty;
        for (var i = 0; i < mapResults.length; i++) {
          if (mapResults[i]) {
            var key = mapResults[i].key;
            var val = mapResults[i].val;
            if (hasOwnProperty2.call(result, key)) {
              result[key].push(val);
            } else {
              result[key] = [val];
            }
          }
        }
        return callback(err, result);
      });
    };
    var groupBy = doLimit(groupByLimit, Infinity);
    var groupBySeries = doLimit(groupByLimit, 1);
    var log = consoleFunc("log");
    function mapValuesLimit(obj, limit, iteratee, callback) {
      callback = once(callback || noop);
      var newObj = {};
      var _iteratee = wrapAsync(iteratee);
      eachOfLimit(obj, limit, function(val, key, next) {
        _iteratee(val, key, function(err, result) {
          if (err)
            return next(err);
          newObj[key] = result;
          next();
        });
      }, function(err) {
        callback(err, newObj);
      });
    }
    var mapValues = doLimit(mapValuesLimit, Infinity);
    var mapValuesSeries = doLimit(mapValuesLimit, 1);
    function has(obj, key) {
      return key in obj;
    }
    function memoize(fn, hasher) {
      var memo = Object.create(null);
      var queues = Object.create(null);
      hasher = hasher || identity;
      var _fn = wrapAsync(fn);
      var memoized = initialParams(function memoized2(args2, callback) {
        var key = hasher.apply(null, args2);
        if (has(memo, key)) {
          setImmediate$1(function() {
            callback.apply(null, memo[key]);
          });
        } else if (has(queues, key)) {
          queues[key].push(callback);
        } else {
          queues[key] = [callback];
          _fn.apply(null, args2.concat(function() {
            var args3 = slice(arguments);
            memo[key] = args3;
            var q = queues[key];
            delete queues[key];
            for (var i = 0, l = q.length; i < l; i++) {
              q[i].apply(null, args3);
            }
          }));
        }
      });
      memoized.memo = memo;
      memoized.unmemoized = fn;
      return memoized;
    }
    var _defer$1;
    if (hasNextTick) {
      _defer$1 = process.nextTick;
    } else if (hasSetImmediate) {
      _defer$1 = setImmediate;
    } else {
      _defer$1 = fallback;
    }
    var nextTick = wrap(_defer$1);
    function _parallel(eachfn, tasks, callback) {
      callback = callback || noop;
      var results = isArrayLike(tasks) ? [] : {};
      eachfn(tasks, function(task, key, callback2) {
        wrapAsync(task)(function(err, result) {
          if (arguments.length > 2) {
            result = slice(arguments, 1);
          }
          results[key] = result;
          callback2(err);
        });
      }, function(err) {
        callback(err, results);
      });
    }
    function parallelLimit(tasks, callback) {
      _parallel(eachOf, tasks, callback);
    }
    function parallelLimit$1(tasks, limit, callback) {
      _parallel(_eachOfLimit(limit), tasks, callback);
    }
    var queue$1 = function(worker, concurrency) {
      var _worker = wrapAsync(worker);
      return queue(function(items, cb) {
        _worker(items[0], cb);
      }, concurrency, 1);
    };
    var priorityQueue = function(worker, concurrency) {
      var q = queue$1(worker, concurrency);
      q.push = function(data, priority, callback) {
        if (callback == null)
          callback = noop;
        if (typeof callback !== "function") {
          throw new Error("task callback must be a function");
        }
        q.started = true;
        if (!isArray(data)) {
          data = [data];
        }
        if (data.length === 0) {
          return setImmediate$1(function() {
            q.drain();
          });
        }
        priority = priority || 0;
        var nextNode = q._tasks.head;
        while (nextNode && priority >= nextNode.priority) {
          nextNode = nextNode.next;
        }
        for (var i = 0, l = data.length; i < l; i++) {
          var item = {
            data: data[i],
            priority,
            callback
          };
          if (nextNode) {
            q._tasks.insertBefore(nextNode, item);
          } else {
            q._tasks.push(item);
          }
        }
        setImmediate$1(q.process);
      };
      delete q.unshift;
      return q;
    };
    function race(tasks, callback) {
      callback = once(callback || noop);
      if (!isArray(tasks))
        return callback(new TypeError("First argument to race must be an array of functions"));
      if (!tasks.length)
        return callback();
      for (var i = 0, l = tasks.length; i < l; i++) {
        wrapAsync(tasks[i])(callback);
      }
    }
    function reduceRight(array, memo, iteratee, callback) {
      var reversed = slice(array).reverse();
      reduce(reversed, memo, iteratee, callback);
    }
    function reflect(fn) {
      var _fn = wrapAsync(fn);
      return initialParams(function reflectOn(args2, reflectCallback) {
        args2.push(function callback(error, cbArg) {
          if (error) {
            reflectCallback(null, {error});
          } else {
            var value;
            if (arguments.length <= 2) {
              value = cbArg;
            } else {
              value = slice(arguments, 1);
            }
            reflectCallback(null, {value});
          }
        });
        return _fn.apply(this, args2);
      });
    }
    function reflectAll(tasks) {
      var results;
      if (isArray(tasks)) {
        results = arrayMap(tasks, reflect);
      } else {
        results = {};
        baseForOwn(tasks, function(task, key) {
          results[key] = reflect.call(this, task);
        });
      }
      return results;
    }
    function reject$1(eachfn, arr, iteratee, callback) {
      _filter(eachfn, arr, function(value, cb) {
        iteratee(value, function(err, v) {
          cb(err, !v);
        });
      }, callback);
    }
    var reject = doParallel(reject$1);
    var rejectLimit = doParallelLimit(reject$1);
    var rejectSeries = doLimit(rejectLimit, 1);
    function constant$1(value) {
      return function() {
        return value;
      };
    }
    function retry(opts, task, callback) {
      var DEFAULT_TIMES = 5;
      var DEFAULT_INTERVAL = 0;
      var options = {
        times: DEFAULT_TIMES,
        intervalFunc: constant$1(DEFAULT_INTERVAL)
      };
      function parseTimes(acc, t) {
        if (typeof t === "object") {
          acc.times = +t.times || DEFAULT_TIMES;
          acc.intervalFunc = typeof t.interval === "function" ? t.interval : constant$1(+t.interval || DEFAULT_INTERVAL);
          acc.errorFilter = t.errorFilter;
        } else if (typeof t === "number" || typeof t === "string") {
          acc.times = +t || DEFAULT_TIMES;
        } else {
          throw new Error("Invalid arguments for async.retry");
        }
      }
      if (arguments.length < 3 && typeof opts === "function") {
        callback = task || noop;
        task = opts;
      } else {
        parseTimes(options, opts);
        callback = callback || noop;
      }
      if (typeof task !== "function") {
        throw new Error("Invalid arguments for async.retry");
      }
      var _task = wrapAsync(task);
      var attempt = 1;
      function retryAttempt() {
        _task(function(err) {
          if (err && attempt++ < options.times && (typeof options.errorFilter != "function" || options.errorFilter(err))) {
            setTimeout(retryAttempt, options.intervalFunc(attempt));
          } else {
            callback.apply(null, arguments);
          }
        });
      }
      retryAttempt();
    }
    var retryable = function(opts, task) {
      if (!task) {
        task = opts;
        opts = null;
      }
      var _task = wrapAsync(task);
      return initialParams(function(args2, callback) {
        function taskFn(cb) {
          _task.apply(null, args2.concat(cb));
        }
        if (opts)
          retry(opts, taskFn, callback);
        else
          retry(taskFn, callback);
      });
    };
    function series(tasks, callback) {
      _parallel(eachOfSeries, tasks, callback);
    }
    var some = doParallel(_createTester(Boolean, identity));
    var someLimit = doParallelLimit(_createTester(Boolean, identity));
    var someSeries = doLimit(someLimit, 1);
    function sortBy(coll, iteratee, callback) {
      var _iteratee = wrapAsync(iteratee);
      map(coll, function(x, callback2) {
        _iteratee(x, function(err, criteria) {
          if (err)
            return callback2(err);
          callback2(null, {value: x, criteria});
        });
      }, function(err, results) {
        if (err)
          return callback(err);
        callback(null, arrayMap(results.sort(comparator), baseProperty("value")));
      });
      function comparator(left, right) {
        var a = left.criteria, b = right.criteria;
        return a < b ? -1 : a > b ? 1 : 0;
      }
    }
    function timeout(asyncFn, milliseconds, info) {
      var fn = wrapAsync(asyncFn);
      return initialParams(function(args2, callback) {
        var timedOut = false;
        var timer;
        function timeoutCallback() {
          var name = asyncFn.name || "anonymous";
          var error = new Error('Callback function "' + name + '" timed out.');
          error.code = "ETIMEDOUT";
          if (info) {
            error.info = info;
          }
          timedOut = true;
          callback(error);
        }
        args2.push(function() {
          if (!timedOut) {
            callback.apply(null, arguments);
            clearTimeout(timer);
          }
        });
        timer = setTimeout(timeoutCallback, milliseconds);
        fn.apply(null, args2);
      });
    }
    var nativeCeil = Math.ceil;
    var nativeMax = Math.max;
    function baseRange(start, end, step, fromRight) {
      var index2 = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
      while (length--) {
        result[fromRight ? length : ++index2] = start;
        start += step;
      }
      return result;
    }
    function timeLimit(count, limit, iteratee, callback) {
      var _iteratee = wrapAsync(iteratee);
      mapLimit(baseRange(0, count, 1), limit, _iteratee, callback);
    }
    var times = doLimit(timeLimit, Infinity);
    var timesSeries = doLimit(timeLimit, 1);
    function transform(coll, accumulator, iteratee, callback) {
      if (arguments.length <= 3) {
        callback = iteratee;
        iteratee = accumulator;
        accumulator = isArray(coll) ? [] : {};
      }
      callback = once(callback || noop);
      var _iteratee = wrapAsync(iteratee);
      eachOf(coll, function(v, k, cb) {
        _iteratee(accumulator, v, k, cb);
      }, function(err) {
        callback(err, accumulator);
      });
    }
    function tryEach(tasks, callback) {
      var error = null;
      var result;
      callback = callback || noop;
      eachSeries(tasks, function(task, callback2) {
        wrapAsync(task)(function(err, res) {
          if (arguments.length > 2) {
            result = slice(arguments, 1);
          } else {
            result = res;
          }
          error = err;
          callback2(!err);
        });
      }, function() {
        callback(error, result);
      });
    }
    function unmemoize(fn) {
      return function() {
        return (fn.unmemoized || fn).apply(null, arguments);
      };
    }
    function whilst(test, iteratee, callback) {
      callback = onlyOnce(callback || noop);
      var _iteratee = wrapAsync(iteratee);
      if (!test())
        return callback(null);
      var next = function(err) {
        if (err)
          return callback(err);
        if (test())
          return _iteratee(next);
        var args2 = slice(arguments, 1);
        callback.apply(null, [null].concat(args2));
      };
      _iteratee(next);
    }
    function until(test, iteratee, callback) {
      whilst(function() {
        return !test.apply(this, arguments);
      }, iteratee, callback);
    }
    var waterfall = function(tasks, callback) {
      callback = once(callback || noop);
      if (!isArray(tasks))
        return callback(new Error("First argument to waterfall must be an array of functions"));
      if (!tasks.length)
        return callback();
      var taskIndex = 0;
      function nextTask(args2) {
        var task = wrapAsync(tasks[taskIndex++]);
        args2.push(onlyOnce(next));
        task.apply(null, args2);
      }
      function next(err) {
        if (err || taskIndex === tasks.length) {
          return callback.apply(null, arguments);
        }
        nextTask(slice(arguments, 1));
      }
      nextTask([]);
    };
    var index = {
      apply,
      applyEach,
      applyEachSeries,
      asyncify,
      auto,
      autoInject,
      cargo,
      compose,
      concat,
      concatLimit,
      concatSeries,
      constant,
      detect,
      detectLimit,
      detectSeries,
      dir,
      doDuring,
      doUntil,
      doWhilst,
      during,
      each: eachLimit,
      eachLimit: eachLimit$1,
      eachOf,
      eachOfLimit,
      eachOfSeries,
      eachSeries,
      ensureAsync,
      every,
      everyLimit,
      everySeries,
      filter,
      filterLimit,
      filterSeries,
      forever,
      groupBy,
      groupByLimit,
      groupBySeries,
      log,
      map,
      mapLimit,
      mapSeries,
      mapValues,
      mapValuesLimit,
      mapValuesSeries,
      memoize,
      nextTick,
      parallel: parallelLimit,
      parallelLimit: parallelLimit$1,
      priorityQueue,
      queue: queue$1,
      race,
      reduce,
      reduceRight,
      reflect,
      reflectAll,
      reject,
      rejectLimit,
      rejectSeries,
      retry,
      retryable,
      seq,
      series,
      setImmediate: setImmediate$1,
      some,
      someLimit,
      someSeries,
      sortBy,
      timeout,
      times,
      timesLimit: timeLimit,
      timesSeries,
      transform,
      tryEach,
      unmemoize,
      until,
      waterfall,
      whilst,
      all: every,
      allLimit: everyLimit,
      allSeries: everySeries,
      any: some,
      anyLimit: someLimit,
      anySeries: someSeries,
      find: detect,
      findLimit: detectLimit,
      findSeries: detectSeries,
      forEach: eachLimit,
      forEachSeries: eachSeries,
      forEachLimit: eachLimit$1,
      forEachOf: eachOf,
      forEachOfSeries: eachOfSeries,
      forEachOfLimit: eachOfLimit,
      inject: reduce,
      foldl: reduce,
      foldr: reduceRight,
      select: filter,
      selectLimit: filterLimit,
      selectSeries: filterSeries,
      wrapSync: asyncify
    };
    exports3["default"] = index;
    exports3.apply = apply;
    exports3.applyEach = applyEach;
    exports3.applyEachSeries = applyEachSeries;
    exports3.asyncify = asyncify;
    exports3.auto = auto;
    exports3.autoInject = autoInject;
    exports3.cargo = cargo;
    exports3.compose = compose;
    exports3.concat = concat;
    exports3.concatLimit = concatLimit;
    exports3.concatSeries = concatSeries;
    exports3.constant = constant;
    exports3.detect = detect;
    exports3.detectLimit = detectLimit;
    exports3.detectSeries = detectSeries;
    exports3.dir = dir;
    exports3.doDuring = doDuring;
    exports3.doUntil = doUntil;
    exports3.doWhilst = doWhilst;
    exports3.during = during;
    exports3.each = eachLimit;
    exports3.eachLimit = eachLimit$1;
    exports3.eachOf = eachOf;
    exports3.eachOfLimit = eachOfLimit;
    exports3.eachOfSeries = eachOfSeries;
    exports3.eachSeries = eachSeries;
    exports3.ensureAsync = ensureAsync;
    exports3.every = every;
    exports3.everyLimit = everyLimit;
    exports3.everySeries = everySeries;
    exports3.filter = filter;
    exports3.filterLimit = filterLimit;
    exports3.filterSeries = filterSeries;
    exports3.forever = forever;
    exports3.groupBy = groupBy;
    exports3.groupByLimit = groupByLimit;
    exports3.groupBySeries = groupBySeries;
    exports3.log = log;
    exports3.map = map;
    exports3.mapLimit = mapLimit;
    exports3.mapSeries = mapSeries;
    exports3.mapValues = mapValues;
    exports3.mapValuesLimit = mapValuesLimit;
    exports3.mapValuesSeries = mapValuesSeries;
    exports3.memoize = memoize;
    exports3.nextTick = nextTick;
    exports3.parallel = parallelLimit;
    exports3.parallelLimit = parallelLimit$1;
    exports3.priorityQueue = priorityQueue;
    exports3.queue = queue$1;
    exports3.race = race;
    exports3.reduce = reduce;
    exports3.reduceRight = reduceRight;
    exports3.reflect = reflect;
    exports3.reflectAll = reflectAll;
    exports3.reject = reject;
    exports3.rejectLimit = rejectLimit;
    exports3.rejectSeries = rejectSeries;
    exports3.retry = retry;
    exports3.retryable = retryable;
    exports3.seq = seq;
    exports3.series = series;
    exports3.setImmediate = setImmediate$1;
    exports3.some = some;
    exports3.someLimit = someLimit;
    exports3.someSeries = someSeries;
    exports3.sortBy = sortBy;
    exports3.timeout = timeout;
    exports3.times = times;
    exports3.timesLimit = timeLimit;
    exports3.timesSeries = timesSeries;
    exports3.transform = transform;
    exports3.tryEach = tryEach;
    exports3.unmemoize = unmemoize;
    exports3.until = until;
    exports3.waterfall = waterfall;
    exports3.whilst = whilst;
    exports3.all = every;
    exports3.allLimit = everyLimit;
    exports3.allSeries = everySeries;
    exports3.any = some;
    exports3.anyLimit = someLimit;
    exports3.anySeries = someSeries;
    exports3.find = detect;
    exports3.findLimit = detectLimit;
    exports3.findSeries = detectSeries;
    exports3.forEach = eachLimit;
    exports3.forEachSeries = eachSeries;
    exports3.forEachLimit = eachLimit$1;
    exports3.forEachOf = eachOf;
    exports3.forEachOfSeries = eachOfSeries;
    exports3.forEachOfLimit = eachOfLimit;
    exports3.inject = reduce;
    exports3.foldl = reduce;
    exports3.foldr = reduceRight;
    exports3.select = filter;
    exports3.selectLimit = filterLimit;
    exports3.selectSeries = filterSeries;
    exports3.wrapSync = asyncify;
    Object.defineProperty(exports3, "__esModule", {value: true});
  });
});

// ../../node_modules/.pnpm/process-nextick-args@2.0.1/node_modules/process-nextick-args/index.js
var require_process_nextick_args = __commonJS((exports2, module3) => {
  "use strict";
  if (typeof process === "undefined" || !process.version || process.version.indexOf("v0.") === 0 || process.version.indexOf("v1.") === 0 && process.version.indexOf("v1.8.") !== 0) {
    module3.exports = {nextTick};
  } else {
    module3.exports = process;
  }
  function nextTick(fn, arg1, arg22, arg32) {
    if (typeof fn !== "function") {
      throw new TypeError('"callback" argument must be a function');
    }
    var len = arguments.length;
    var args2, i;
    switch (len) {
      case 0:
      case 1:
        return process.nextTick(fn);
      case 2:
        return process.nextTick(function afterTickOne() {
          fn.call(null, arg1);
        });
      case 3:
        return process.nextTick(function afterTickTwo() {
          fn.call(null, arg1, arg22);
        });
      case 4:
        return process.nextTick(function afterTickThree() {
          fn.call(null, arg1, arg22, arg32);
        });
      default:
        args2 = new Array(len - 1);
        i = 0;
        while (i < args2.length) {
          args2[i++] = arguments[i];
        }
        return process.nextTick(function afterTick() {
          fn.apply(null, args2);
        });
    }
  }
});

// ../../node_modules/.pnpm/isarray@1.0.0/node_modules/isarray/index.js
var require_isarray = __commonJS((exports2, module3) => {
  var toString = {}.toString;
  module3.exports = Array.isArray || function(arr) {
    return toString.call(arr) == "[object Array]";
  };
});

// ../../node_modules/.pnpm/readable-stream@2.3.7/node_modules/readable-stream/lib/internal/streams/stream.js
var require_stream6 = __commonJS((exports2, module3) => {
  module3.exports = require("stream");
});

// ../../node_modules/.pnpm/safe-buffer@5.1.2/node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS((exports2, module3) => {
  var buffer = require("buffer");
  var Buffer2 = buffer.Buffer;
  function copyProps(src, dst) {
    for (var key in src) {
      dst[key] = src[key];
    }
  }
  if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
    module3.exports = buffer;
  } else {
    copyProps(buffer, exports2);
    exports2.Buffer = SafeBuffer;
  }
  function SafeBuffer(arg11, encodingOrOffset, length) {
    return Buffer2(arg11, encodingOrOffset, length);
  }
  copyProps(Buffer2, SafeBuffer);
  SafeBuffer.from = function(arg11, encodingOrOffset, length) {
    if (typeof arg11 === "number") {
      throw new TypeError("Argument must not be a number");
    }
    return Buffer2(arg11, encodingOrOffset, length);
  };
  SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    var buf = Buffer2(size);
    if (fill !== void 0) {
      if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
    } else {
      buf.fill(0);
    }
    return buf;
  };
  SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return Buffer2(size);
  };
  SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== "number") {
      throw new TypeError("Argument must be a number");
    }
    return buffer.SlowBuffer(size);
  };
});

// ../../node_modules/.pnpm/core-util-is@1.0.2/node_modules/core-util-is/lib/util.js
var require_util5 = __commonJS((exports2) => {
  function isArray(arg11) {
    if (Array.isArray) {
      return Array.isArray(arg11);
    }
    return objectToString(arg11) === "[object Array]";
  }
  exports2.isArray = isArray;
  function isBoolean(arg11) {
    return typeof arg11 === "boolean";
  }
  exports2.isBoolean = isBoolean;
  function isNull(arg11) {
    return arg11 === null;
  }
  exports2.isNull = isNull;
  function isNullOrUndefined(arg11) {
    return arg11 == null;
  }
  exports2.isNullOrUndefined = isNullOrUndefined;
  function isNumber(arg11) {
    return typeof arg11 === "number";
  }
  exports2.isNumber = isNumber;
  function isString(arg11) {
    return typeof arg11 === "string";
  }
  exports2.isString = isString;
  function isSymbol(arg11) {
    return typeof arg11 === "symbol";
  }
  exports2.isSymbol = isSymbol;
  function isUndefined(arg11) {
    return arg11 === void 0;
  }
  exports2.isUndefined = isUndefined;
  function isRegExp(re) {
    return objectToString(re) === "[object RegExp]";
  }
  exports2.isRegExp = isRegExp;
  function isObject(arg11) {
    return typeof arg11 === "object" && arg11 !== null;
  }
  exports2.isObject = isObject;
  function isDate(d) {
    return objectToString(d) === "[object Date]";
  }
  exports2.isDate = isDate;
  function isError7(e) {
    return objectToString(e) === "[object Error]" || e instanceof Error;
  }
  exports2.isError = isError7;
  function isFunction(arg11) {
    return typeof arg11 === "function";
  }
  exports2.isFunction = isFunction;
  function isPrimitive(arg11) {
    return arg11 === null || typeof arg11 === "boolean" || typeof arg11 === "number" || typeof arg11 === "string" || typeof arg11 === "symbol" || typeof arg11 === "undefined";
  }
  exports2.isPrimitive = isPrimitive;
  exports2.isBuffer = Buffer.isBuffer;
  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }
});

// ../../node_modules/.pnpm/readable-stream@2.3.7/node_modules/readable-stream/lib/internal/streams/BufferList.js
var require_BufferList = __commonJS((exports2, module3) => {
  "use strict";
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var Buffer2 = require_safe_buffer().Buffer;
  var util4 = require("util");
  function copyBuffer(src, target, offset) {
    src.copy(target, offset);
  }
  module3.exports = function() {
    function BufferList() {
      _classCallCheck(this, BufferList);
      this.head = null;
      this.tail = null;
      this.length = 0;
    }
    BufferList.prototype.push = function push(v) {
      var entry = {data: v, next: null};
      if (this.length > 0)
        this.tail.next = entry;
      else
        this.head = entry;
      this.tail = entry;
      ++this.length;
    };
    BufferList.prototype.unshift = function unshift(v) {
      var entry = {data: v, next: this.head};
      if (this.length === 0)
        this.tail = entry;
      this.head = entry;
      ++this.length;
    };
    BufferList.prototype.shift = function shift() {
      if (this.length === 0)
        return;
      var ret = this.head.data;
      if (this.length === 1)
        this.head = this.tail = null;
      else
        this.head = this.head.next;
      --this.length;
      return ret;
    };
    BufferList.prototype.clear = function clear() {
      this.head = this.tail = null;
      this.length = 0;
    };
    BufferList.prototype.join = function join(s) {
      if (this.length === 0)
        return "";
      var p = this.head;
      var ret = "" + p.data;
      while (p = p.next) {
        ret += s + p.data;
      }
      return ret;
    };
    BufferList.prototype.concat = function concat(n) {
      if (this.length === 0)
        return Buffer2.alloc(0);
      if (this.length === 1)
        return this.head.data;
      var ret = Buffer2.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        copyBuffer(p.data, ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    };
    return BufferList;
  }();
  if (util4 && util4.inspect && util4.inspect.custom) {
    module3.exports.prototype[util4.inspect.custom] = function() {
      var obj = util4.inspect({length: this.length});
      return this.constructor.name + " " + obj;
    };
  }
});

// ../../node_modules/.pnpm/readable-stream@2.3.7/node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS((exports2, module3) => {
  "use strict";
  var pna = require_process_nextick_args();
  function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
      if (cb) {
        cb(err);
      } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
        pna.nextTick(emitErrorNT, this, err);
      }
      return this;
    }
    if (this._readableState) {
      this._readableState.destroyed = true;
    }
    if (this._writableState) {
      this._writableState.destroyed = true;
    }
    this._destroy(err || null, function(err2) {
      if (!cb && err2) {
        pna.nextTick(emitErrorNT, _this, err2);
        if (_this._writableState) {
          _this._writableState.errorEmitted = true;
        }
      } else if (cb) {
        cb(err2);
      }
    });
    return this;
  }
  function undestroy() {
    if (this._readableState) {
      this._readableState.destroyed = false;
      this._readableState.reading = false;
      this._readableState.ended = false;
      this._readableState.endEmitted = false;
    }
    if (this._writableState) {
      this._writableState.destroyed = false;
      this._writableState.ended = false;
      this._writableState.ending = false;
      this._writableState.finished = false;
      this._writableState.errorEmitted = false;
    }
  }
  function emitErrorNT(self2, err) {
    self2.emit("error", err);
  }
  module3.exports = {
    destroy,
    undestroy
  };
});

// ../../node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/node.js
var require_node3 = __commonJS((exports2, module3) => {
  module3.exports = require("util").deprecate;
});

// ../../node_modules/.pnpm/readable-stream@2.3.7/node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable = __commonJS((exports2, module3) => {
  "use strict";
  var pna = require_process_nextick_args();
  module3.exports = Writable;
  function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
      onCorkedFinish(_this, state);
    };
  }
  var asyncWrite = !process.browser && ["v0.10", "v0.9."].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
  var Duplex;
  Writable.WritableState = WritableState;
  var util4 = Object.create(require_util5());
  util4.inherits = require_inherits();
  var internalUtil = {
    deprecate: require_node3()
  };
  var Stream = require_stream6();
  var Buffer2 = require_safe_buffer().Buffer;
  var OurUint8Array = global.Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer2.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var destroyImpl = require_destroy();
  util4.inherits(Writable, Stream);
  function nop() {
  }
  function WritableState(options, stream) {
    Duplex = Duplex || require_stream_duplex();
    options = options || {};
    var isDuplex = stream instanceof Duplex;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.writableObjectMode;
    var hwm = options.highWaterMark;
    var writableHwm = options.writableHighWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    if (hwm || hwm === 0)
      this.highWaterMark = hwm;
    else if (isDuplex && (writableHwm || writableHwm === 0))
      this.highWaterMark = writableHwm;
    else
      this.highWaterMark = defaultHwm;
    this.highWaterMark = Math.floor(this.highWaterMark);
    this.finalCalled = false;
    this.needDrain = false;
    this.ending = false;
    this.ended = false;
    this.finished = false;
    this.destroyed = false;
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.length = 0;
    this.writing = false;
    this.corked = 0;
    this.sync = true;
    this.bufferProcessing = false;
    this.onwrite = function(er) {
      onwrite(stream, er);
    };
    this.writecb = null;
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    this.pendingcb = 0;
    this.prefinished = false;
    this.errorEmitted = false;
    this.bufferedRequestCount = 0;
    this.corkedRequestsFree = new CorkedRequest(this);
  }
  WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  (function() {
    try {
      Object.defineProperty(WritableState.prototype, "buffer", {
        get: internalUtil.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch (_2) {
    }
  })();
  var realHasInstance;
  if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
      value: function(object) {
        if (realHasInstance.call(this, object))
          return true;
        if (this !== Writable)
          return false;
        return object && object._writableState instanceof WritableState;
      }
    });
  } else {
    realHasInstance = function(object) {
      return object instanceof this;
    };
  }
  function Writable(options) {
    Duplex = Duplex || require_stream_duplex();
    if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
      return new Writable(options);
    }
    this._writableState = new WritableState(options, this);
    this.writable = true;
    if (options) {
      if (typeof options.write === "function")
        this._write = options.write;
      if (typeof options.writev === "function")
        this._writev = options.writev;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
      if (typeof options.final === "function")
        this._final = options.final;
    }
    Stream.call(this);
  }
  Writable.prototype.pipe = function() {
    this.emit("error", new Error("Cannot pipe, not readable"));
  };
  function writeAfterEnd(stream, cb) {
    var er = new Error("write after end");
    stream.emit("error", er);
    pna.nextTick(cb, er);
  }
  function validChunk(stream, state, chunk, cb) {
    var valid = true;
    var er = false;
    if (chunk === null) {
      er = new TypeError("May not write null values to stream");
    } else if (typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
      er = new TypeError("Invalid non-string/buffer chunk");
    }
    if (er) {
      stream.emit("error", er);
      pna.nextTick(cb, er);
      valid = false;
    }
    return valid;
  }
  Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer2.isBuffer(chunk)) {
      chunk = _uint8ArrayToBuffer(chunk);
    }
    if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (isBuf)
      encoding = "buffer";
    else if (!encoding)
      encoding = state.defaultEncoding;
    if (typeof cb !== "function")
      cb = nop;
    if (state.ended)
      writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
  };
  Writable.prototype.cork = function() {
    var state = this._writableState;
    state.corked++;
  };
  Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
      state.corked--;
      if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest)
        clearBuffer(this, state);
    }
  };
  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    if (typeof encoding === "string")
      encoding = encoding.toLowerCase();
    if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
      throw new TypeError("Unknown encoding: " + encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };
  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
      chunk = Buffer2.from(chunk, encoding);
    }
    return chunk;
  }
  Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    enumerable: false,
    get: function() {
      return this._writableState.highWaterMark;
    }
  });
  function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
      var newChunk = decodeChunk(state, chunk, encoding);
      if (chunk !== newChunk) {
        isBuf = true;
        encoding = "buffer";
        chunk = newChunk;
      }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    if (!ret)
      state.needDrain = true;
    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = {
        chunk,
        encoding,
        isBuf,
        callback: cb,
        next: null
      };
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }
    return ret;
  }
  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (writev)
      stream._writev(chunk, state.onwrite);
    else
      stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }
  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
      pna.nextTick(cb, er);
      pna.nextTick(finishMaybe, stream, state);
      stream._writableState.errorEmitted = true;
      stream.emit("error", er);
    } else {
      cb(er);
      stream._writableState.errorEmitted = true;
      stream.emit("error", er);
      finishMaybe(stream, state);
    }
  }
  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }
  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    onwriteStateUpdate(state);
    if (er)
      onwriteError(stream, state, sync, er, cb);
    else {
      var finished = needFinish(state);
      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }
      if (sync) {
        asyncWrite(afterWrite, stream, state, finished, cb);
      } else {
        afterWrite(stream, state, finished, cb);
      }
    }
  }
  function afterWrite(stream, state, finished, cb) {
    if (!finished)
      onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit("drain");
    }
  }
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;
      var allBuffers = true;
      while (entry) {
        buffer[count] = entry;
        if (!entry.isBuf)
          allBuffers = false;
        entry = entry.next;
        count += 1;
      }
      buffer.allBuffers = allBuffers;
      doWrite(stream, state, true, state.length, buffer, "", holder.finish);
      state.pendingcb++;
      state.lastBufferedRequest = null;
      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
      state.bufferedRequestCount = 0;
    } else {
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;
        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        state.bufferedRequestCount--;
        if (state.writing) {
          break;
        }
      }
      if (entry === null)
        state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }
  Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new Error("_write() is not implemented"));
  };
  Writable.prototype._writev = null;
  Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (chunk !== null && chunk !== void 0)
      this.write(chunk, encoding);
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }
    if (!state.ending && !state.finished)
      endWritable(this, state, cb);
  };
  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }
  function callFinal(stream, state) {
    stream._final(function(err) {
      state.pendingcb--;
      if (err) {
        stream.emit("error", err);
      }
      state.prefinished = true;
      stream.emit("prefinish");
      finishMaybe(stream, state);
    });
  }
  function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
      if (typeof stream._final === "function") {
        state.pendingcb++;
        state.finalCalled = true;
        pna.nextTick(callFinal, stream, state);
      } else {
        state.prefinished = true;
        stream.emit("prefinish");
      }
    }
  }
  function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
      prefinish(stream, state);
      if (state.pendingcb === 0) {
        state.finished = true;
        stream.emit("finish");
      }
    }
    return need;
  }
  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished)
        pna.nextTick(cb);
      else
        stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
  }
  function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    if (state.corkedRequestsFree) {
      state.corkedRequestsFree.next = corkReq;
    } else {
      state.corkedRequestsFree = corkReq;
    }
  }
  Object.defineProperty(Writable.prototype, "destroyed", {
    get: function() {
      if (this._writableState === void 0) {
        return false;
      }
      return this._writableState.destroyed;
    },
    set: function(value) {
      if (!this._writableState) {
        return;
      }
      this._writableState.destroyed = value;
    }
  });
  Writable.prototype.destroy = destroyImpl.destroy;
  Writable.prototype._undestroy = destroyImpl.undestroy;
  Writable.prototype._destroy = function(err, cb) {
    this.end();
    cb(err);
  };
});

// ../../node_modules/.pnpm/readable-stream@2.3.7/node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex = __commonJS((exports2, module3) => {
  "use strict";
  var pna = require_process_nextick_args();
  var objectKeys = Object.keys || function(obj) {
    var keys2 = [];
    for (var key in obj) {
      keys2.push(key);
    }
    return keys2;
  };
  module3.exports = Duplex;
  var util4 = Object.create(require_util5());
  util4.inherits = require_inherits();
  var Readable = require_stream_readable();
  var Writable = require_stream_writable();
  util4.inherits(Duplex, Readable);
  {
    var keys = objectKeys(Writable.prototype);
    for (var v = 0; v < keys.length; v++) {
      var method = keys[v];
      if (!Duplex.prototype[method])
        Duplex.prototype[method] = Writable.prototype[method];
    }
  }
  function Duplex(options) {
    if (!(this instanceof Duplex))
      return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    if (options && options.readable === false)
      this.readable = false;
    if (options && options.writable === false)
      this.writable = false;
    this.allowHalfOpen = true;
    if (options && options.allowHalfOpen === false)
      this.allowHalfOpen = false;
    this.once("end", onend);
  }
  Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    enumerable: false,
    get: function() {
      return this._writableState.highWaterMark;
    }
  });
  function onend() {
    if (this.allowHalfOpen || this._writableState.ended)
      return;
    pna.nextTick(onEndNT, this);
  }
  function onEndNT(self2) {
    self2.end();
  }
  Object.defineProperty(Duplex.prototype, "destroyed", {
    get: function() {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return false;
      }
      return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function(value) {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return;
      }
      this._readableState.destroyed = value;
      this._writableState.destroyed = value;
    }
  });
  Duplex.prototype._destroy = function(err, cb) {
    this.push(null);
    this.end();
    pna.nextTick(cb, err);
  };
});

// ../../node_modules/.pnpm/readable-stream@2.3.7/node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable = __commonJS((exports2, module3) => {
  "use strict";
  var pna = require_process_nextick_args();
  module3.exports = Readable;
  var isArray = require_isarray();
  var Duplex;
  Readable.ReadableState = ReadableState;
  var EE = require("events").EventEmitter;
  var EElistenerCount = function(emitter, type) {
    return emitter.listeners(type).length;
  };
  var Stream = require_stream6();
  var Buffer2 = require_safe_buffer().Buffer;
  var OurUint8Array = global.Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer2.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var util4 = Object.create(require_util5());
  util4.inherits = require_inherits();
  var debugUtil = require("util");
  var debug3 = void 0;
  if (debugUtil && debugUtil.debuglog) {
    debug3 = debugUtil.debuglog("stream");
  } else {
    debug3 = function() {
    };
  }
  var BufferList = require_BufferList();
  var destroyImpl = require_destroy();
  var StringDecoder;
  util4.inherits(Readable, Stream);
  var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
  function prependListener(emitter, event, fn) {
    if (typeof emitter.prependListener === "function")
      return emitter.prependListener(event, fn);
    if (!emitter._events || !emitter._events[event])
      emitter.on(event, fn);
    else if (isArray(emitter._events[event]))
      emitter._events[event].unshift(fn);
    else
      emitter._events[event] = [fn, emitter._events[event]];
  }
  function ReadableState(options, stream) {
    Duplex = Duplex || require_stream_duplex();
    options = options || {};
    var isDuplex = stream instanceof Duplex;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.readableObjectMode;
    var hwm = options.highWaterMark;
    var readableHwm = options.readableHighWaterMark;
    var defaultHwm = this.objectMode ? 16 : 16 * 1024;
    if (hwm || hwm === 0)
      this.highWaterMark = hwm;
    else if (isDuplex && (readableHwm || readableHwm === 0))
      this.highWaterMark = readableHwm;
    else
      this.highWaterMark = defaultHwm;
    this.highWaterMark = Math.floor(this.highWaterMark);
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    this.sync = true;
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.destroyed = false;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.awaitDrain = 0;
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder)
        StringDecoder = require("string_decoder/").StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable(options) {
    Duplex = Duplex || require_stream_duplex();
    if (!(this instanceof Readable))
      return new Readable(options);
    this._readableState = new ReadableState(options, this);
    this.readable = true;
    if (options) {
      if (typeof options.read === "function")
        this._read = options.read;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
    }
    Stream.call(this);
  }
  Object.defineProperty(Readable.prototype, "destroyed", {
    get: function() {
      if (this._readableState === void 0) {
        return false;
      }
      return this._readableState.destroyed;
    },
    set: function(value) {
      if (!this._readableState) {
        return;
      }
      this._readableState.destroyed = value;
    }
  });
  Readable.prototype.destroy = destroyImpl.destroy;
  Readable.prototype._undestroy = destroyImpl.undestroy;
  Readable.prototype._destroy = function(err, cb) {
    this.push(null);
    cb(err);
  };
  Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
      if (typeof chunk === "string") {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = Buffer2.from(chunk, encoding);
          encoding = "";
        }
        skipChunkCheck = true;
      }
    } else {
      skipChunkCheck = true;
    }
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  };
  Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
  };
  function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    var state = stream._readableState;
    if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else {
      var er;
      if (!skipChunkCheck)
        er = chunkInvalid(state, chunk);
      if (er) {
        stream.emit("error", er);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (addToFront) {
          if (state.endEmitted)
            stream.emit("error", new Error("stream.unshift() after end event"));
          else
            addChunk(stream, state, chunk, true);
        } else if (state.ended) {
          stream.emit("error", new Error("stream.push() after EOF"));
        } else {
          state.reading = false;
          if (state.decoder && !encoding) {
            chunk = state.decoder.write(chunk);
            if (state.objectMode || chunk.length !== 0)
              addChunk(stream, state, chunk, false);
            else
              maybeReadMore(stream, state);
          } else {
            addChunk(stream, state, chunk, false);
          }
        }
      } else if (!addToFront) {
        state.reading = false;
      }
    }
    return needMoreData(state);
  }
  function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
      stream.emit("data", chunk);
      stream.read(0);
    } else {
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront)
        state.buffer.unshift(chunk);
      else
        state.buffer.push(chunk);
      if (state.needReadable)
        emitReadable(stream);
    }
    maybeReadMore(stream, state);
  }
  function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
      er = new TypeError("Invalid non-string/buffer chunk");
    }
    return er;
  }
  function needMoreData(state) {
    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
  }
  Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
  };
  Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder)
      StringDecoder = require("string_decoder/").StringDecoder;
    this._readableState.decoder = new StringDecoder(enc);
    this._readableState.encoding = enc;
    return this;
  };
  var MAX_HWM = 8388608;
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
    return n;
  }
  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended)
      return 0;
    if (state.objectMode)
      return 1;
    if (n !== n) {
      if (state.flowing && state.length)
        return state.buffer.head.data.length;
      else
        return state.length;
    }
    if (n > state.highWaterMark)
      state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length)
      return n;
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }
    return state.length;
  }
  Readable.prototype.read = function(n) {
    debug3("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0)
      state.emittedReadable = false;
    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
      debug3("read: emitReadable", state.length, state.ended);
      if (state.length === 0 && state.ended)
        endReadable(this);
      else
        emitReadable(this);
      return null;
    }
    n = howMuchToRead(n, state);
    if (n === 0 && state.ended) {
      if (state.length === 0)
        endReadable(this);
      return null;
    }
    var doRead = state.needReadable;
    debug3("need readable", doRead);
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug3("length less than watermark", doRead);
    }
    if (state.ended || state.reading) {
      doRead = false;
      debug3("reading or ended", doRead);
    } else if (doRead) {
      debug3("do read");
      state.reading = true;
      state.sync = true;
      if (state.length === 0)
        state.needReadable = true;
      this._read(state.highWaterMark);
      state.sync = false;
      if (!state.reading)
        n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0)
      ret = fromList(n, state);
    else
      ret = null;
    if (ret === null) {
      state.needReadable = true;
      n = 0;
    } else {
      state.length -= n;
    }
    if (state.length === 0) {
      if (!state.ended)
        state.needReadable = true;
      if (nOrig !== n && state.ended)
        endReadable(this);
    }
    if (ret !== null)
      this.emit("data", ret);
    return ret;
  };
  function onEofChunk(stream, state) {
    if (state.ended)
      return;
    if (state.decoder) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;
    emitReadable(stream);
  }
  function emitReadable(stream) {
    var state = stream._readableState;
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug3("emitReadable", state.flowing);
      state.emittedReadable = true;
      if (state.sync)
        pna.nextTick(emitReadable_, stream);
      else
        emitReadable_(stream);
    }
  }
  function emitReadable_(stream) {
    debug3("emit readable");
    stream.emit("readable");
    flow(stream);
  }
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      pna.nextTick(maybeReadMore_, stream, state);
    }
  }
  function maybeReadMore_(stream, state) {
    var len = state.length;
    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
      debug3("maybeReadMore read 0");
      stream.read(0);
      if (len === state.length)
        break;
      else
        len = state.length;
    }
    state.readingMore = false;
  }
  Readable.prototype._read = function(n) {
    this.emit("error", new Error("_read() is not implemented"));
  };
  Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug3("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted)
      pna.nextTick(endFn);
    else
      src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
      debug3("onunpipe");
      if (readable === src) {
        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
          unpipeInfo.hasUnpiped = true;
          cleanup();
        }
      }
    }
    function onend() {
      debug3("onend");
      dest.end();
    }
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
      debug3("cleanup");
      dest.removeListener("close", onclose);
      dest.removeListener("finish", onfinish);
      dest.removeListener("drain", ondrain);
      dest.removeListener("error", onerror);
      dest.removeListener("unpipe", onunpipe);
      src.removeListener("end", onend);
      src.removeListener("end", unpipe);
      src.removeListener("data", ondata);
      cleanedUp = true;
      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
        ondrain();
    }
    var increasedAwaitDrain = false;
    src.on("data", ondata);
    function ondata(chunk) {
      debug3("ondata");
      increasedAwaitDrain = false;
      var ret = dest.write(chunk);
      if (ret === false && !increasedAwaitDrain) {
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
          debug3("false write response, pause", src._readableState.awaitDrain);
          src._readableState.awaitDrain++;
          increasedAwaitDrain = true;
        }
        src.pause();
      }
    }
    function onerror(er) {
      debug3("onerror", er);
      unpipe();
      dest.removeListener("error", onerror);
      if (EElistenerCount(dest, "error") === 0)
        dest.emit("error", er);
    }
    prependListener(dest, "error", onerror);
    function onclose() {
      dest.removeListener("finish", onfinish);
      unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
      debug3("onfinish");
      dest.removeListener("close", onclose);
      unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
      debug3("unpipe");
      src.unpipe(dest);
    }
    dest.emit("pipe", src);
    if (!state.flowing) {
      debug3("pipe resume");
      src.resume();
    }
    return dest;
  };
  function pipeOnDrain(src) {
    return function() {
      var state = src._readableState;
      debug3("pipeOnDrain", state.awaitDrain);
      if (state.awaitDrain)
        state.awaitDrain--;
      if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
        state.flowing = true;
        flow(src);
      }
    };
  }
  Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {hasUnpiped: false};
    if (state.pipesCount === 0)
      return this;
    if (state.pipesCount === 1) {
      if (dest && dest !== state.pipes)
        return this;
      if (!dest)
        dest = state.pipes;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest)
        dest.emit("unpipe", this, unpipeInfo);
      return this;
    }
    if (!dest) {
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      for (var i = 0; i < len; i++) {
        dests[i].emit("unpipe", this, unpipeInfo);
      }
      return this;
    }
    var index = indexOf(state.pipes, dest);
    if (index === -1)
      return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1)
      state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
  };
  Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    if (ev === "data") {
      if (this._readableState.flowing !== false)
        this.resume();
    } else if (ev === "readable") {
      var state = this._readableState;
      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.emittedReadable = false;
        if (!state.reading) {
          pna.nextTick(nReadingNextTick, this);
        } else if (state.length) {
          emitReadable(this);
        }
      }
    }
    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;
  function nReadingNextTick(self2) {
    debug3("readable nexttick read 0");
    self2.read(0);
  }
  Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
      debug3("resume");
      state.flowing = true;
      resume(this, state);
    }
    return this;
  };
  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      pna.nextTick(resume_, stream, state);
    }
  }
  function resume_(stream, state) {
    if (!state.reading) {
      debug3("resume read 0");
      stream.read(0);
    }
    state.resumeScheduled = false;
    state.awaitDrain = 0;
    stream.emit("resume");
    flow(stream);
    if (state.flowing && !state.reading)
      stream.read(0);
  }
  Readable.prototype.pause = function() {
    debug3("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
      debug3("pause");
      this._readableState.flowing = false;
      this.emit("pause");
    }
    return this;
  };
  function flow(stream) {
    var state = stream._readableState;
    debug3("flow", state.flowing);
    while (state.flowing && stream.read() !== null) {
    }
  }
  Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
      debug3("wrapped end");
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length)
          _this.push(chunk);
      }
      _this.push(null);
    });
    stream.on("data", function(chunk) {
      debug3("wrapped data");
      if (state.decoder)
        chunk = state.decoder.write(chunk);
      if (state.objectMode && (chunk === null || chunk === void 0))
        return;
      else if (!state.objectMode && (!chunk || !chunk.length))
        return;
      var ret = _this.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });
    for (var i in stream) {
      if (this[i] === void 0 && typeof stream[i] === "function") {
        this[i] = function(method) {
          return function() {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    }
    for (var n = 0; n < kProxyEvents.length; n++) {
      stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    }
    this._read = function(n2) {
      debug3("wrapped _read", n2);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };
    return this;
  };
  Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    enumerable: false,
    get: function() {
      return this._readableState.highWaterMark;
    }
  });
  Readable._fromList = fromList;
  function fromList(n, state) {
    if (state.length === 0)
      return null;
    var ret;
    if (state.objectMode)
      ret = state.buffer.shift();
    else if (!n || n >= state.length) {
      if (state.decoder)
        ret = state.buffer.join("");
      else if (state.buffer.length === 1)
        ret = state.buffer.head.data;
      else
        ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      ret = fromListPartial(n, state.buffer, state.decoder);
    }
    return ret;
  }
  function fromListPartial(n, list, hasStrings) {
    var ret;
    if (n < list.head.data.length) {
      ret = list.head.data.slice(0, n);
      list.head.data = list.head.data.slice(n);
    } else if (n === list.head.data.length) {
      ret = list.shift();
    } else {
      ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
    }
    return ret;
  }
  function copyFromBufferString(n, list) {
    var p = list.head;
    var c = 1;
    var ret = p.data;
    n -= ret.length;
    while (p = p.next) {
      var str = p.data;
      var nb = n > str.length ? str.length : n;
      if (nb === str.length)
        ret += str;
      else
        ret += str.slice(0, n);
      n -= nb;
      if (n === 0) {
        if (nb === str.length) {
          ++c;
          if (p.next)
            list.head = p.next;
          else
            list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = str.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }
  function copyFromBuffer(n, list) {
    var ret = Buffer2.allocUnsafe(n);
    var p = list.head;
    var c = 1;
    p.data.copy(ret);
    n -= p.data.length;
    while (p = p.next) {
      var buf = p.data;
      var nb = n > buf.length ? buf.length : n;
      buf.copy(ret, ret.length - n, 0, nb);
      n -= nb;
      if (n === 0) {
        if (nb === buf.length) {
          ++c;
          if (p.next)
            list.head = p.next;
          else
            list.head = list.tail = null;
        } else {
          list.head = p;
          p.data = buf.slice(nb);
        }
        break;
      }
      ++c;
    }
    list.length -= c;
    return ret;
  }
  function endReadable(stream) {
    var state = stream._readableState;
    if (state.length > 0)
      throw new Error('"endReadable()" called on non-empty stream');
    if (!state.endEmitted) {
      state.ended = true;
      pna.nextTick(endReadableNT, state, stream);
    }
  }
  function endReadableNT(state, stream) {
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit("end");
    }
  }
  function indexOf(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x)
        return i;
    }
    return -1;
  }
});

// ../../node_modules/.pnpm/readable-stream@2.3.7/node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = Transform;
  var Duplex = require_stream_duplex();
  var util4 = Object.create(require_util5());
  util4.inherits = require_inherits();
  util4.inherits(Transform, Duplex);
  function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (!cb) {
      return this.emit("error", new Error("write callback called multiple times"));
    }
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null)
      this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      this._read(rs.highWaterMark);
    }
  }
  function Transform(options) {
    if (!(this instanceof Transform))
      return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
      afterTransform: afterTransform.bind(this),
      needTransform: false,
      transforming: false,
      writecb: null,
      writechunk: null,
      writeencoding: null
    };
    this._readableState.needReadable = true;
    this._readableState.sync = false;
    if (options) {
      if (typeof options.transform === "function")
        this._transform = options.transform;
      if (typeof options.flush === "function")
        this._flush = options.flush;
    }
    this.on("prefinish", prefinish);
  }
  function prefinish() {
    var _this = this;
    if (typeof this._flush === "function") {
      this._flush(function(er, data) {
        done(_this, er, data);
      });
    } else {
      done(this, null, null);
    }
  }
  Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  };
  Transform.prototype._transform = function(chunk, encoding, cb) {
    throw new Error("_transform() is not implemented");
  };
  Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
        this._read(rs.highWaterMark);
    }
  };
  Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      ts.needTransform = true;
    }
  };
  Transform.prototype._destroy = function(err, cb) {
    var _this2 = this;
    Duplex.prototype._destroy.call(this, err, function(err2) {
      cb(err2);
      _this2.emit("close");
    });
  };
  function done(stream, er, data) {
    if (er)
      return stream.emit("error", er);
    if (data != null)
      stream.push(data);
    if (stream._writableState.length)
      throw new Error("Calling transform done when ws.length != 0");
    if (stream._transformState.transforming)
      throw new Error("Calling transform done when still transforming");
    return stream.push(null);
  }
});

// ../../node_modules/.pnpm/readable-stream@2.3.7/node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = PassThrough;
  var Transform = require_stream_transform();
  var util4 = Object.create(require_util5());
  util4.inherits = require_inherits();
  util4.inherits(PassThrough, Transform);
  function PassThrough(options) {
    if (!(this instanceof PassThrough))
      return new PassThrough(options);
    Transform.call(this, options);
  }
  PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
  };
});

// ../../node_modules/.pnpm/readable-stream@2.3.7/node_modules/readable-stream/readable.js
var require_readable = __commonJS((exports2, module3) => {
  var Stream = require("stream");
  if (process.env.READABLE_STREAM === "disable" && Stream) {
    module3.exports = Stream;
    exports2 = module3.exports = Stream.Readable;
    exports2.Readable = Stream.Readable;
    exports2.Writable = Stream.Writable;
    exports2.Duplex = Stream.Duplex;
    exports2.Transform = Stream.Transform;
    exports2.PassThrough = Stream.PassThrough;
    exports2.Stream = Stream;
  } else {
    exports2 = module3.exports = require_stream_readable();
    exports2.Stream = Stream || exports2;
    exports2.Readable = exports2;
    exports2.Writable = require_stream_writable();
    exports2.Duplex = require_stream_duplex();
    exports2.Transform = require_stream_transform();
    exports2.PassThrough = require_stream_passthrough();
  }
});

// ../../node_modules/.pnpm/readable-stream@2.3.7/node_modules/readable-stream/passthrough.js
var require_passthrough = __commonJS((exports2, module3) => {
  module3.exports = require_readable().PassThrough;
});

// ../../node_modules/.pnpm/lazystream@1.0.0/node_modules/lazystream/lib/lazystream.js
var require_lazystream = __commonJS((exports2, module3) => {
  var util4 = require("util");
  var PassThrough = require_passthrough();
  module3.exports = {
    Readable,
    Writable
  };
  util4.inherits(Readable, PassThrough);
  util4.inherits(Writable, PassThrough);
  function beforeFirstCall(instance, method, callback) {
    instance[method] = function() {
      delete instance[method];
      callback.apply(this, arguments);
      return this[method].apply(this, arguments);
    };
  }
  function Readable(fn, options) {
    if (!(this instanceof Readable))
      return new Readable(fn, options);
    PassThrough.call(this, options);
    beforeFirstCall(this, "_read", function() {
      var source = fn.call(this, options);
      var emit = this.emit.bind(this, "error");
      source.on("error", emit);
      source.pipe(this);
    });
    this.emit("readable");
  }
  function Writable(fn, options) {
    if (!(this instanceof Writable))
      return new Writable(fn, options);
    PassThrough.call(this, options);
    beforeFirstCall(this, "_write", function() {
      var destination = fn.call(this, options);
      var emit = this.emit.bind(this, "error");
      destination.on("error", emit);
      this.pipe(destination);
    });
    this.emit("writable");
  }
});

// ../../node_modules/.pnpm/normalize-path@3.0.0/node_modules/normalize-path/index.js
var require_normalize_path = __commonJS((exports2, module3) => {
  /*!
   * normalize-path <https://github.com/jonschlinkert/normalize-path>
   *
   * Copyright (c) 2014-2018, Jon Schlinkert.
   * Released under the MIT License.
   */
  module3.exports = function(path19, stripTrailing) {
    if (typeof path19 !== "string") {
      throw new TypeError("expected path to be a string");
    }
    if (path19 === "\\" || path19 === "/")
      return "/";
    var len = path19.length;
    if (len <= 1)
      return path19;
    var prefix = "";
    if (len > 4 && path19[3] === "\\") {
      var ch = path19[2];
      if ((ch === "?" || ch === ".") && path19.slice(0, 2) === "\\\\") {
        path19 = path19.slice(2);
        prefix = "//";
      }
    }
    var segs = path19.split(/[/\\]+/);
    if (stripTrailing !== false && segs[segs.length - 1] === "") {
      segs.pop();
    }
    return prefix + segs.join("/");
  };
});

// ../../node_modules/.pnpm/lodash.defaults@4.2.0/node_modules/lodash.defaults/index.js
var require_lodash = __commonJS((exports2, module3) => {
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  function apply(func, thisArg, args2) {
    switch (args2.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args2[0]);
      case 2:
        return func.call(thisArg, args2[0], args2[1]);
      case 3:
        return func.call(thisArg, args2[0], args2[1], args2[2]);
    }
    return func.apply(thisArg, args2);
  }
  function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var nativeMax = Math.max;
  function arrayLikeKeys(value, inherited) {
    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length, skipIndexes = !!length;
    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  function assignInDefaults(objValue, srcValue, key, object) {
    if (objValue === void 0 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
      return srcValue;
    }
    return objValue;
  }
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
      object[key] = value;
    }
  }
  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object), result = [];
    for (var key in object) {
      if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  function baseRest(func, start) {
    start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args2 = arguments, index = -1, length = nativeMax(args2.length - start, 0), array = Array(length);
      while (++index < length) {
        array[index] = args2[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args2[index];
      }
      otherArgs[start] = array;
      return apply(func, this, otherArgs);
    };
  }
  function copyObject(source, props, object, customizer) {
    object || (object = {});
    var index = -1, length = props.length;
    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
      assignValue(object, key, newValue === void 0 ? source[key] : newValue);
    }
    return object;
  }
  function createAssigner(assigner) {
    return baseRest(function(object, sources) {
      var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
      customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? void 0 : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }
  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = typeof index;
    if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
      return eq(object[index], value);
    }
    return false;
  }
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto;
  }
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
  }
  var isArray = Array.isArray;
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : "";
    return tag == funcTag || tag == genTag;
  }
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
    copyObject(source, keysIn(source), object, customizer);
  });
  var defaults = baseRest(function(args2) {
    args2.push(void 0, assignInDefaults);
    return apply(assignInWith, void 0, args2);
  });
  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }
  module3.exports = defaults;
});

// ../../node_modules/.pnpm/lodash.flatten@4.4.0/node_modules/lodash.flatten/index.js
var require_lodash2 = __commonJS((exports2, module3) => {
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }
  var objectProto = Object.prototype;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var Symbol2 = root.Symbol;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1, length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }
  function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }
  function flatten(array) {
    var length = array ? array.length : 0;
    return length ? baseFlatten(array, 1) : [];
  }
  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
  }
  var isArray = Array.isArray;
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : "";
    return tag == funcTag || tag == genTag;
  }
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  module3.exports = flatten;
});

// ../../node_modules/.pnpm/lodash.difference@4.5.0/node_modules/lodash.difference/index.js
var require_lodash3 = __commonJS((exports2, module3) => {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  function apply(func, thisArg, args2) {
    switch (args2.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args2[0]);
      case 2:
        return func.call(thisArg, args2[0], args2[1]);
      case 3:
        return func.call(thisArg, args2[0], args2[1], args2[2]);
    }
    return func.apply(thisArg, args2);
  }
  function arrayIncludes(array, value) {
    var length = array ? array.length : 0;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }
  function arrayIncludesWith(array, value, comparator) {
    var index = -1, length = array ? array.length : 0;
    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }
  function arrayMap(array, iteratee) {
    var index = -1, length = array ? array.length : 0, result = Array(length);
    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }
  function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return baseFindIndex(array, baseIsNaN, fromIndex);
    }
    var index = fromIndex - 1, length = array.length;
    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }
  function baseIsNaN(value) {
    return value !== value;
  }
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  function cacheHas(cache, key) {
    return cache.has(key);
  }
  function getValue(object, key) {
    return object == null ? void 0 : object[key];
  }
  function isHostObject(value) {
    var result = false;
    if (value != null && typeof value.toString != "function") {
      try {
        result = !!(value + "");
      } catch (e) {
      }
    }
    return result;
  }
  var arrayProto = Array.prototype;
  var funcProto = Function.prototype;
  var objectProto = Object.prototype;
  var coreJsData = root["__core-js_shared__"];
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  var Symbol2 = root.Symbol;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var splice = arrayProto.splice;
  var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
  var nativeMax = Math.max;
  var Map2 = getNative(root, "Map");
  var nativeCreate = getNative(Object, "create");
  function Hash(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }
  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : void 0;
  }
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
  }
  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  function ListCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear() {
    this.__data__ = [];
  }
  function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    return true;
  }
  function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? void 0 : data[index][1];
  }
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  function MapCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear() {
    this.__data__ = {
      hash: new Hash(),
      map: new (Map2 || ListCache)(),
      string: new Hash()
    };
  }
  function mapCacheDelete(key) {
    return getMapData(this, key)["delete"](key);
  }
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  function SetCache(values) {
    var index = -1, length = values ? values.length : 0;
    this.__data__ = new MapCache();
    while (++index < length) {
      this.add(values[index]);
    }
  }
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }
  function setCacheHas(value) {
    return this.__data__.has(value);
  }
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  function baseDifference(array, values, iteratee, comparator) {
    var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
    if (!length) {
      return result;
    }
    if (iteratee) {
      values = arrayMap(values, baseUnary(iteratee));
    }
    if (comparator) {
      includes = arrayIncludesWith;
      isCommon = false;
    } else if (values.length >= LARGE_ARRAY_SIZE) {
      includes = cacheHas;
      isCommon = false;
      values = new SetCache(values);
    }
    outer:
      while (++index < length) {
        var value = array[index], computed = iteratee ? iteratee(value) : value;
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        } else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
    return result;
  }
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1, length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  function baseRest(func, start) {
    start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args2 = arguments, index = -1, length = nativeMax(args2.length - start, 0), array = Array(length);
      while (++index < length) {
        array[index] = args2[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args2[index];
      }
      otherArgs[start] = array;
      return apply(func, this, otherArgs);
    };
  }
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : void 0;
  }
  function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  var difference = baseRest(function(array, values) {
    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
  });
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
  }
  var isArray = Array.isArray;
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : "";
    return tag == funcTag || tag == genTag;
  }
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  module3.exports = difference;
});

// ../../node_modules/.pnpm/lodash.union@4.6.0/node_modules/lodash.union/index.js
var require_lodash4 = __commonJS((exports2, module3) => {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var INFINITY = 1 / 0;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  function apply(func, thisArg, args2) {
    switch (args2.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args2[0]);
      case 2:
        return func.call(thisArg, args2[0], args2[1]);
      case 3:
        return func.call(thisArg, args2[0], args2[1], args2[2]);
    }
    return func.apply(thisArg, args2);
  }
  function arrayIncludes(array, value) {
    var length = array ? array.length : 0;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }
  function arrayIncludesWith(array, value, comparator) {
    var index = -1, length = array ? array.length : 0;
    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }
  function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return baseFindIndex(array, baseIsNaN, fromIndex);
    }
    var index = fromIndex - 1, length = array.length;
    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }
  function baseIsNaN(value) {
    return value !== value;
  }
  function cacheHas(cache, key) {
    return cache.has(key);
  }
  function getValue(object, key) {
    return object == null ? void 0 : object[key];
  }
  function isHostObject(value) {
    var result = false;
    if (value != null && typeof value.toString != "function") {
      try {
        result = !!(value + "");
      } catch (e) {
      }
    }
    return result;
  }
  function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  var arrayProto = Array.prototype;
  var funcProto = Function.prototype;
  var objectProto = Object.prototype;
  var coreJsData = root["__core-js_shared__"];
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  var Symbol2 = root.Symbol;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var splice = arrayProto.splice;
  var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
  var nativeMax = Math.max;
  var Map2 = getNative(root, "Map");
  var Set2 = getNative(root, "Set");
  var nativeCreate = getNative(Object, "create");
  function Hash(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }
  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : void 0;
  }
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
  }
  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  function ListCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear() {
    this.__data__ = [];
  }
  function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    return true;
  }
  function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? void 0 : data[index][1];
  }
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  function MapCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear() {
    this.__data__ = {
      hash: new Hash(),
      map: new (Map2 || ListCache)(),
      string: new Hash()
    };
  }
  function mapCacheDelete(key) {
    return getMapData(this, key)["delete"](key);
  }
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  function SetCache(values) {
    var index = -1, length = values ? values.length : 0;
    this.__data__ = new MapCache();
    while (++index < length) {
      this.add(values[index]);
    }
  }
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }
  function setCacheHas(value) {
    return this.__data__.has(value);
  }
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1, length = array.length;
    predicate || (predicate = isFlattenable);
    result || (result = []);
    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  function baseRest(func, start) {
    start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
    return function() {
      var args2 = arguments, index = -1, length = nativeMax(args2.length - start, 0), array = Array(length);
      while (++index < length) {
        array[index] = args2[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args2[index];
      }
      otherArgs[start] = array;
      return apply(func, this, otherArgs);
    };
  }
  function baseUniq(array, iteratee, comparator) {
    var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith;
    } else if (length >= LARGE_ARRAY_SIZE) {
      var set = iteratee ? null : createSet(array);
      if (set) {
        return setToArray(set);
      }
      isCommon = false;
      includes = cacheHas;
      seen = new SetCache();
    } else {
      seen = iteratee ? [] : result;
    }
    outer:
      while (++index < length) {
        var value = array[index], computed = iteratee ? iteratee(value) : value;
        value = comparator || value !== 0 ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        } else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
    return result;
  }
  var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values) {
    return new Set2(values);
  };
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : void 0;
  }
  function isFlattenable(value) {
    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
  }
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  var union = baseRest(function(arrays) {
    return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
  });
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
  }
  var isArray = Array.isArray;
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : "";
    return tag == funcTag || tag == genTag;
  }
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  function noop() {
  }
  module3.exports = union;
});

// ../../node_modules/.pnpm/lodash.isplainobject@4.0.6/node_modules/lodash.isplainobject/index.js
var require_lodash5 = __commonJS((exports2, module3) => {
  var objectTag = "[object Object]";
  function isHostObject(value) {
    var result = false;
    if (value != null && typeof value.toString != "function") {
      try {
        result = !!(value + "");
      } catch (e) {
      }
    }
    return result;
  }
  function overArg(func, transform) {
    return function(arg11) {
      return func(transform(arg11));
    };
  }
  var funcProto = Function.prototype;
  var objectProto = Object.prototype;
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectCtorString = funcToString.call(Object);
  var objectToString = objectProto.toString;
  var getPrototype = overArg(Object.getPrototypeOf, Object);
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  function isPlainObject(value) {
    if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }
  module3.exports = isPlainObject;
});

// ../../node_modules/.pnpm/archiver-utils@2.1.0/node_modules/archiver-utils/file.js
var require_file = __commonJS((exports2, module3) => {
  var fs17 = require_graceful_fs();
  var path19 = require("path");
  var flatten = require_lodash2();
  var difference = require_lodash3();
  var union = require_lodash4();
  var isPlainObject = require_lodash5();
  var glob = require_glob();
  var file = module3.exports = {};
  var pathSeparatorRe = /[\/\\]/g;
  var processPatterns = function(patterns, fn) {
    var result = [];
    flatten(patterns).forEach(function(pattern) {
      var exclusion = pattern.indexOf("!") === 0;
      if (exclusion) {
        pattern = pattern.slice(1);
      }
      var matches = fn(pattern);
      if (exclusion) {
        result = difference(result, matches);
      } else {
        result = union(result, matches);
      }
    });
    return result;
  };
  file.exists = function() {
    var filepath = path19.join.apply(path19, arguments);
    return fs17.existsSync(filepath);
  };
  file.expand = function(...args2) {
    var options = isPlainObject(args2[0]) ? args2.shift() : {};
    var patterns = Array.isArray(args2[0]) ? args2[0] : args2;
    if (patterns.length === 0) {
      return [];
    }
    var matches = processPatterns(patterns, function(pattern) {
      return glob.sync(pattern, options);
    });
    if (options.filter) {
      matches = matches.filter(function(filepath) {
        filepath = path19.join(options.cwd || "", filepath);
        try {
          if (typeof options.filter === "function") {
            return options.filter(filepath);
          } else {
            return fs17.statSync(filepath)[options.filter]();
          }
        } catch (e) {
          return false;
        }
      });
    }
    return matches;
  };
  file.expandMapping = function(patterns, destBase, options) {
    options = Object.assign({
      rename: function(destBase2, destPath) {
        return path19.join(destBase2 || "", destPath);
      }
    }, options);
    var files = [];
    var fileByDest = {};
    file.expand(options, patterns).forEach(function(src) {
      var destPath = src;
      if (options.flatten) {
        destPath = path19.basename(destPath);
      }
      if (options.ext) {
        destPath = destPath.replace(/(\.[^\/]*)?$/, options.ext);
      }
      var dest = options.rename(destBase, destPath, options);
      if (options.cwd) {
        src = path19.join(options.cwd, src);
      }
      dest = dest.replace(pathSeparatorRe, "/");
      src = src.replace(pathSeparatorRe, "/");
      if (fileByDest[dest]) {
        fileByDest[dest].src.push(src);
      } else {
        files.push({
          src: [src],
          dest
        });
        fileByDest[dest] = files[files.length - 1];
      }
    });
    return files;
  };
  file.normalizeFilesArray = function(data) {
    var files = [];
    data.forEach(function(obj) {
      var prop;
      if ("src" in obj || "dest" in obj) {
        files.push(obj);
      }
    });
    if (files.length === 0) {
      return [];
    }
    files = _(files).chain().forEach(function(obj) {
      if (!("src" in obj) || !obj.src) {
        return;
      }
      if (Array.isArray(obj.src)) {
        obj.src = flatten(obj.src);
      } else {
        obj.src = [obj.src];
      }
    }).map(function(obj) {
      var expandOptions = Object.assign({}, obj);
      delete expandOptions.src;
      delete expandOptions.dest;
      if (obj.expand) {
        return file.expandMapping(obj.src, obj.dest, expandOptions).map(function(mapObj) {
          var result2 = Object.assign({}, obj);
          result2.orig = Object.assign({}, obj);
          result2.src = mapObj.src;
          result2.dest = mapObj.dest;
          ["expand", "cwd", "flatten", "rename", "ext"].forEach(function(prop) {
            delete result2[prop];
          });
          return result2;
        });
      }
      var result = Object.assign({}, obj);
      result.orig = Object.assign({}, obj);
      if ("src" in result) {
        Object.defineProperty(result, "src", {
          enumerable: true,
          get: function fn() {
            var src;
            if (!("result" in fn)) {
              src = obj.src;
              src = Array.isArray(src) ? flatten(src) : [src];
              fn.result = file.expand(expandOptions, src);
            }
            return fn.result;
          }
        });
      }
      if ("dest" in result) {
        result.dest = obj.dest;
      }
      return result;
    }).flatten().value();
    return files;
  };
});

// ../../node_modules/.pnpm/archiver-utils@2.1.0/node_modules/archiver-utils/index.js
var require_archiver_utils = __commonJS((exports2, module3) => {
  var fs17 = require_graceful_fs();
  var path19 = require("path");
  var nutil = require("util");
  var lazystream = require_lazystream();
  var normalizePath = require_normalize_path();
  var defaults = require_lodash();
  var Stream = require("stream").Stream;
  var PassThrough = require_readable().PassThrough;
  var utils = module3.exports = {};
  utils.file = require_file();
  utils.collectStream = function(source, callback) {
    var collection = [];
    var size = 0;
    source.on("error", callback);
    source.on("data", function(chunk) {
      collection.push(chunk);
      size += chunk.length;
    });
    source.on("end", function() {
      var buf = new Buffer(size);
      var offset = 0;
      collection.forEach(function(data) {
        data.copy(buf, offset);
        offset += data.length;
      });
      callback(null, buf);
    });
  };
  utils.dateify = function(dateish) {
    dateish = dateish || new Date();
    if (dateish instanceof Date) {
      dateish = dateish;
    } else if (typeof dateish === "string") {
      dateish = new Date(dateish);
    } else {
      dateish = new Date();
    }
    return dateish;
  };
  utils.defaults = function(object, source, guard) {
    var args2 = arguments;
    args2[0] = args2[0] || {};
    return defaults(...args2);
  };
  utils.isStream = function(source) {
    return source instanceof Stream;
  };
  utils.lazyReadStream = function(filepath) {
    return new lazystream.Readable(function() {
      return fs17.createReadStream(filepath);
    });
  };
  utils.normalizeInputSource = function(source) {
    if (source === null) {
      return new Buffer(0);
    } else if (typeof source === "string") {
      return new Buffer(source);
    } else if (utils.isStream(source) && !source._readableState) {
      var normalized = new PassThrough();
      source.pipe(normalized);
      return normalized;
    }
    return source;
  };
  utils.sanitizePath = function(filepath) {
    return normalizePath(filepath, false).replace(/^\w+:/, "").replace(/^(\.\.\/|\/)+/, "");
  };
  utils.trailingSlashIt = function(str) {
    return str.slice(-1) !== "/" ? str + "/" : str;
  };
  utils.unixifyPath = function(filepath) {
    return normalizePath(filepath, false).replace(/^\w+:/, "");
  };
  utils.walkdir = function(dirpath, base, callback) {
    var results = [];
    if (typeof base === "function") {
      callback = base;
      base = dirpath;
    }
    fs17.readdir(dirpath, function(err, list) {
      var i = 0;
      var file;
      var filepath;
      if (err) {
        return callback(err);
      }
      (function next() {
        file = list[i++];
        if (!file) {
          return callback(null, results);
        }
        filepath = path19.join(dirpath, file);
        fs17.stat(filepath, function(err2, stats) {
          results.push({
            path: filepath,
            relative: path19.relative(base, filepath).replace(/\\/g, "/"),
            stats
          });
          if (stats && stats.isDirectory()) {
            utils.walkdir(filepath, base, function(err3, res) {
              res.forEach(function(dirEntry) {
                results.push(dirEntry);
              });
              next();
            });
          } else {
            next();
          }
        });
      })();
    });
  };
});

// ../../node_modules/.pnpm/archiver@4.0.1/node_modules/archiver/lib/error.js
var require_error3 = __commonJS((exports2, module3) => {
  /**
   * Archiver Core
   *
   * @ignore
   * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}
   * @copyright (c) 2012-2014 Chris Talkington, contributors.
   */
  var util4 = require("util");
  const ERROR_CODES = {
    ABORTED: "archive was aborted",
    DIRECTORYDIRPATHREQUIRED: "diretory dirpath argument must be a non-empty string value",
    DIRECTORYFUNCTIONINVALIDDATA: "invalid data returned by directory custom data function",
    ENTRYNAMEREQUIRED: "entry name must be a non-empty string value",
    FILEFILEPATHREQUIRED: "file filepath argument must be a non-empty string value",
    FINALIZING: "archive already finalizing",
    QUEUECLOSED: "queue closed",
    NOENDMETHOD: "no suitable finalize/end method defined by module",
    DIRECTORYNOTSUPPORTED: "support for directory entries not defined by module",
    FORMATSET: "archive format already set",
    INPUTSTEAMBUFFERREQUIRED: "input source must be valid Stream or Buffer instance",
    MODULESET: "module already set",
    SYMLINKNOTSUPPORTED: "support for symlink entries not defined by module",
    SYMLINKFILEPATHREQUIRED: "symlink filepath argument must be a non-empty string value",
    SYMLINKTARGETREQUIRED: "symlink target argument must be a non-empty string value",
    ENTRYNOTSUPPORTED: "entry not supported"
  };
  function ArchiverError(code, data) {
    Error.captureStackTrace(this, this.constructor);
    this.message = ERROR_CODES[code] || code;
    this.code = code;
    this.data = data;
  }
  util4.inherits(ArchiverError, Error);
  exports2 = module3.exports = ArchiverError;
});

// ../../node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/stream.js
var require_stream7 = __commonJS((exports2, module3) => {
  module3.exports = require("stream");
});

// ../../node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS((exports2, module3) => {
  "use strict";
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    return Constructor;
  }
  var _require = require("buffer");
  var Buffer2 = _require.Buffer;
  var _require2 = require("util");
  var inspect = _require2.inspect;
  var custom = inspect && inspect.custom || "inspect";
  function copyBuffer(src, target, offset) {
    Buffer2.prototype.copy.call(src, target, offset);
  }
  module3.exports = /* @__PURE__ */ function() {
    function BufferList() {
      _classCallCheck(this, BufferList);
      this.head = null;
      this.tail = null;
      this.length = 0;
    }
    _createClass(BufferList, [{
      key: "push",
      value: function push(v) {
        var entry = {
          data: v,
          next: null
        };
        if (this.length > 0)
          this.tail.next = entry;
        else
          this.head = entry;
        this.tail = entry;
        ++this.length;
      }
    }, {
      key: "unshift",
      value: function unshift(v) {
        var entry = {
          data: v,
          next: this.head
        };
        if (this.length === 0)
          this.tail = entry;
        this.head = entry;
        ++this.length;
      }
    }, {
      key: "shift",
      value: function shift() {
        if (this.length === 0)
          return;
        var ret = this.head.data;
        if (this.length === 1)
          this.head = this.tail = null;
        else
          this.head = this.head.next;
        --this.length;
        return ret;
      }
    }, {
      key: "clear",
      value: function clear() {
        this.head = this.tail = null;
        this.length = 0;
      }
    }, {
      key: "join",
      value: function join(s) {
        if (this.length === 0)
          return "";
        var p = this.head;
        var ret = "" + p.data;
        while (p = p.next) {
          ret += s + p.data;
        }
        return ret;
      }
    }, {
      key: "concat",
      value: function concat(n) {
        if (this.length === 0)
          return Buffer2.alloc(0);
        var ret = Buffer2.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;
        while (p) {
          copyBuffer(p.data, ret, i);
          i += p.data.length;
          p = p.next;
        }
        return ret;
      }
    }, {
      key: "consume",
      value: function consume(n, hasStrings) {
        var ret;
        if (n < this.head.data.length) {
          ret = this.head.data.slice(0, n);
          this.head.data = this.head.data.slice(n);
        } else if (n === this.head.data.length) {
          ret = this.shift();
        } else {
          ret = hasStrings ? this._getString(n) : this._getBuffer(n);
        }
        return ret;
      }
    }, {
      key: "first",
      value: function first() {
        return this.head.data;
      }
    }, {
      key: "_getString",
      value: function _getString(n) {
        var p = this.head;
        var c = 1;
        var ret = p.data;
        n -= ret.length;
        while (p = p.next) {
          var str = p.data;
          var nb = n > str.length ? str.length : n;
          if (nb === str.length)
            ret += str;
          else
            ret += str.slice(0, n);
          n -= nb;
          if (n === 0) {
            if (nb === str.length) {
              ++c;
              if (p.next)
                this.head = p.next;
              else
                this.head = this.tail = null;
            } else {
              this.head = p;
              p.data = str.slice(nb);
            }
            break;
          }
          ++c;
        }
        this.length -= c;
        return ret;
      }
    }, {
      key: "_getBuffer",
      value: function _getBuffer(n) {
        var ret = Buffer2.allocUnsafe(n);
        var p = this.head;
        var c = 1;
        p.data.copy(ret);
        n -= p.data.length;
        while (p = p.next) {
          var buf = p.data;
          var nb = n > buf.length ? buf.length : n;
          buf.copy(ret, ret.length - n, 0, nb);
          n -= nb;
          if (n === 0) {
            if (nb === buf.length) {
              ++c;
              if (p.next)
                this.head = p.next;
              else
                this.head = this.tail = null;
            } else {
              this.head = p;
              p.data = buf.slice(nb);
            }
            break;
          }
          ++c;
        }
        this.length -= c;
        return ret;
      }
    }, {
      key: custom,
      value: function value(_2, options) {
        return inspect(this, _objectSpread({}, options, {
          depth: 0,
          customInspect: false
        }));
      }
    }]);
    return BufferList;
  }();
});

// ../../node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy2 = __commonJS((exports2, module3) => {
  "use strict";
  function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
      if (cb) {
        cb(err);
      } else if (err) {
        if (!this._writableState) {
          process.nextTick(emitErrorNT, this, err);
        } else if (!this._writableState.errorEmitted) {
          this._writableState.errorEmitted = true;
          process.nextTick(emitErrorNT, this, err);
        }
      }
      return this;
    }
    if (this._readableState) {
      this._readableState.destroyed = true;
    }
    if (this._writableState) {
      this._writableState.destroyed = true;
    }
    this._destroy(err || null, function(err2) {
      if (!cb && err2) {
        if (!_this._writableState) {
          process.nextTick(emitErrorAndCloseNT, _this, err2);
        } else if (!_this._writableState.errorEmitted) {
          _this._writableState.errorEmitted = true;
          process.nextTick(emitErrorAndCloseNT, _this, err2);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      } else if (cb) {
        process.nextTick(emitCloseNT, _this);
        cb(err2);
      } else {
        process.nextTick(emitCloseNT, _this);
      }
    });
    return this;
  }
  function emitErrorAndCloseNT(self2, err) {
    emitErrorNT(self2, err);
    emitCloseNT(self2);
  }
  function emitCloseNT(self2) {
    if (self2._writableState && !self2._writableState.emitClose)
      return;
    if (self2._readableState && !self2._readableState.emitClose)
      return;
    self2.emit("close");
  }
  function undestroy() {
    if (this._readableState) {
      this._readableState.destroyed = false;
      this._readableState.reading = false;
      this._readableState.ended = false;
      this._readableState.endEmitted = false;
    }
    if (this._writableState) {
      this._writableState.destroyed = false;
      this._writableState.ended = false;
      this._writableState.ending = false;
      this._writableState.finalCalled = false;
      this._writableState.prefinished = false;
      this._writableState.finished = false;
      this._writableState.errorEmitted = false;
    }
  }
  function emitErrorNT(self2, err) {
    self2.emit("error", err);
  }
  function errorOrDestroy(stream, err) {
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy)
      stream.destroy(err);
    else
      stream.emit("error", err);
  }
  module3.exports = {
    destroy,
    undestroy,
    errorOrDestroy
  };
});

// ../../node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/errors.js
var require_errors2 = __commonJS((exports2, module3) => {
  "use strict";
  const codes = {};
  function createErrorType(code, message, Base) {
    if (!Base) {
      Base = Error;
    }
    function getMessage(arg1, arg22, arg32) {
      if (typeof message === "string") {
        return message;
      } else {
        return message(arg1, arg22, arg32);
      }
    }
    class NodeError extends Base {
      constructor(arg1, arg22, arg32) {
        super(getMessage(arg1, arg22, arg32));
      }
    }
    NodeError.prototype.name = Base.name;
    NodeError.prototype.code = code;
    codes[code] = NodeError;
  }
  function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
      const len = expected.length;
      expected = expected.map((i) => String(i));
      if (len > 2) {
        return `one of ${thing} ${expected.slice(0, len - 1).join(", ")}, or ` + expected[len - 1];
      } else if (len === 2) {
        return `one of ${thing} ${expected[0]} or ${expected[1]}`;
      } else {
        return `of ${thing} ${expected[0]}`;
      }
    } else {
      return `of ${thing} ${String(expected)}`;
    }
  }
  function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
  }
  function endsWith(str, search, this_len) {
    if (this_len === void 0 || this_len > str.length) {
      this_len = str.length;
    }
    return str.substring(this_len - search.length, this_len) === search;
  }
  function includes(str, search, start) {
    if (typeof start !== "number") {
      start = 0;
    }
    if (start + search.length > str.length) {
      return false;
    } else {
      return str.indexOf(search, start) !== -1;
    }
  }
  createErrorType("ERR_INVALID_OPT_VALUE", function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
  }, TypeError);
  createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
    let determiner;
    if (typeof expected === "string" && startsWith(expected, "not ")) {
      determiner = "must not be";
      expected = expected.replace(/^not /, "");
    } else {
      determiner = "must be";
    }
    let msg;
    if (endsWith(name, " argument")) {
      msg = `The ${name} ${determiner} ${oneOf(expected, "type")}`;
    } else {
      const type = includes(name, ".") ? "property" : "argument";
      msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, "type")}`;
    }
    msg += `. Received type ${typeof actual}`;
    return msg;
  }, TypeError);
  createErrorType("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
  createErrorType("ERR_METHOD_NOT_IMPLEMENTED", function(name) {
    return "The " + name + " method is not implemented";
  });
  createErrorType("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
  createErrorType("ERR_STREAM_DESTROYED", function(name) {
    return "Cannot call " + name + " after a stream was destroyed";
  });
  createErrorType("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
  createErrorType("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
  createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
  createErrorType("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
  createErrorType("ERR_UNKNOWN_ENCODING", function(arg11) {
    return "Unknown encoding: " + arg11;
  }, TypeError);
  createErrorType("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
  module3.exports.codes = codes;
});

// ../../node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/state.js
var require_state = __commonJS((exports2, module3) => {
  "use strict";
  var ERR_INVALID_OPT_VALUE = require_errors2().codes.ERR_INVALID_OPT_VALUE;
  function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
  }
  function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
      if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
        var name = isDuplex ? duplexKey : "highWaterMark";
        throw new ERR_INVALID_OPT_VALUE(name, hwm);
      }
      return Math.floor(hwm);
    }
    return state.objectMode ? 16 : 16 * 1024;
  }
  module3.exports = {
    getHighWaterMark
  };
});

// ../../node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_writable.js
var require_stream_writable2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = Writable;
  function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
      onCorkedFinish(_this, state);
    };
  }
  var Duplex;
  Writable.WritableState = WritableState;
  var internalUtil = {
    deprecate: require_node3()
  };
  var Stream = require_stream7();
  var Buffer2 = require("buffer").Buffer;
  var OurUint8Array = global.Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer2.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var destroyImpl = require_destroy2();
  var _require = require_state();
  var getHighWaterMark = _require.getHighWaterMark;
  var _require$codes = require_errors2().codes;
  var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
  var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
  var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
  var ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE;
  var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
  var ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES;
  var ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END;
  var ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
  var errorOrDestroy = destroyImpl.errorOrDestroy;
  require_inherits()(Writable, Stream);
  function nop() {
  }
  function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require_stream_duplex2();
    options = options || {};
    if (typeof isDuplex !== "boolean")
      isDuplex = stream instanceof Duplex;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.writableObjectMode;
    this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
    this.finalCalled = false;
    this.needDrain = false;
    this.ending = false;
    this.ended = false;
    this.finished = false;
    this.destroyed = false;
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.length = 0;
    this.writing = false;
    this.corked = 0;
    this.sync = true;
    this.bufferProcessing = false;
    this.onwrite = function(er) {
      onwrite(stream, er);
    };
    this.writecb = null;
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null;
    this.pendingcb = 0;
    this.prefinished = false;
    this.errorEmitted = false;
    this.emitClose = options.emitClose !== false;
    this.autoDestroy = !!options.autoDestroy;
    this.bufferedRequestCount = 0;
    this.corkedRequestsFree = new CorkedRequest(this);
  }
  WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while (current) {
      out.push(current);
      current = current.next;
    }
    return out;
  };
  (function() {
    try {
      Object.defineProperty(WritableState.prototype, "buffer", {
        get: internalUtil.deprecate(function writableStateBufferGetter() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch (_2) {
    }
  })();
  var realHasInstance;
  if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
      value: function value(object) {
        if (realHasInstance.call(this, object))
          return true;
        if (this !== Writable)
          return false;
        return object && object._writableState instanceof WritableState;
      }
    });
  } else {
    realHasInstance = function realHasInstance2(object) {
      return object instanceof this;
    };
  }
  function Writable(options) {
    Duplex = Duplex || require_stream_duplex2();
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this))
      return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex);
    this.writable = true;
    if (options) {
      if (typeof options.write === "function")
        this._write = options.write;
      if (typeof options.writev === "function")
        this._writev = options.writev;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
      if (typeof options.final === "function")
        this._final = options.final;
    }
    Stream.call(this);
  }
  Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
  };
  function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END();
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
  }
  function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) {
      er = new ERR_STREAM_NULL_VALUES();
    } else if (typeof chunk !== "string" && !state.objectMode) {
      er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
    }
    if (er) {
      errorOrDestroy(stream, er);
      process.nextTick(cb, er);
      return false;
    }
    return true;
  }
  Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer2.isBuffer(chunk)) {
      chunk = _uint8ArrayToBuffer(chunk);
    }
    if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (isBuf)
      encoding = "buffer";
    else if (!encoding)
      encoding = state.defaultEncoding;
    if (typeof cb !== "function")
      cb = nop;
    if (state.ending)
      writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
      state.pendingcb++;
      ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
  };
  Writable.prototype.cork = function() {
    this._writableState.corked++;
  };
  Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
      state.corked--;
      if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest)
        clearBuffer(this, state);
    }
  };
  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    if (typeof encoding === "string")
      encoding = encoding.toLowerCase();
    if (!(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((encoding + "").toLowerCase()) > -1))
      throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
  };
  Object.defineProperty(Writable.prototype, "writableBuffer", {
    enumerable: false,
    get: function get() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === "string") {
      chunk = Buffer2.from(chunk, encoding);
    }
    return chunk;
  }
  Object.defineProperty(Writable.prototype, "writableHighWaterMark", {
    enumerable: false,
    get: function get() {
      return this._writableState.highWaterMark;
    }
  });
  function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
      var newChunk = decodeChunk(state, chunk, encoding);
      if (chunk !== newChunk) {
        isBuf = true;
        encoding = "buffer";
        chunk = newChunk;
      }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark;
    if (!ret)
      state.needDrain = true;
    if (state.writing || state.corked) {
      var last = state.lastBufferedRequest;
      state.lastBufferedRequest = {
        chunk,
        encoding,
        isBuf,
        callback: cb,
        next: null
      };
      if (last) {
        last.next = state.lastBufferedRequest;
      } else {
        state.bufferedRequest = state.lastBufferedRequest;
      }
      state.bufferedRequestCount += 1;
    } else {
      doWrite(stream, state, false, len, chunk, encoding, cb);
    }
    return ret;
  }
  function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed)
      state.onwrite(new ERR_STREAM_DESTROYED("write"));
    else if (writev)
      stream._writev(chunk, state.onwrite);
    else
      stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
  }
  function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
      process.nextTick(cb, er);
      process.nextTick(finishMaybe, stream, state);
      stream._writableState.errorEmitted = true;
      errorOrDestroy(stream, er);
    } else {
      cb(er);
      stream._writableState.errorEmitted = true;
      errorOrDestroy(stream, er);
      finishMaybe(stream, state);
    }
  }
  function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
  }
  function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== "function")
      throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er)
      onwriteError(stream, state, sync, er, cb);
    else {
      var finished = needFinish(state) || stream.destroyed;
      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
        clearBuffer(stream, state);
      }
      if (sync) {
        process.nextTick(afterWrite, stream, state, finished, cb);
      } else {
        afterWrite(stream, state, finished, cb);
      }
    }
  }
  function afterWrite(stream, state, finished, cb) {
    if (!finished)
      onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
  }
  function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
      state.needDrain = false;
      stream.emit("drain");
    }
  }
  function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
      var l = state.bufferedRequestCount;
      var buffer = new Array(l);
      var holder = state.corkedRequestsFree;
      holder.entry = entry;
      var count = 0;
      var allBuffers = true;
      while (entry) {
        buffer[count] = entry;
        if (!entry.isBuf)
          allBuffers = false;
        entry = entry.next;
        count += 1;
      }
      buffer.allBuffers = allBuffers;
      doWrite(stream, state, true, state.length, buffer, "", holder.finish);
      state.pendingcb++;
      state.lastBufferedRequest = null;
      if (holder.next) {
        state.corkedRequestsFree = holder.next;
        holder.next = null;
      } else {
        state.corkedRequestsFree = new CorkedRequest(state);
      }
      state.bufferedRequestCount = 0;
    } else {
      while (entry) {
        var chunk = entry.chunk;
        var encoding = entry.encoding;
        var cb = entry.callback;
        var len = state.objectMode ? 1 : chunk.length;
        doWrite(stream, state, false, len, chunk, encoding, cb);
        entry = entry.next;
        state.bufferedRequestCount--;
        if (state.writing) {
          break;
        }
      }
      if (entry === null)
        state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
  }
  Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_write()"));
  };
  Writable.prototype._writev = null;
  Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === "function") {
      cb = chunk;
      chunk = null;
      encoding = null;
    } else if (typeof encoding === "function") {
      cb = encoding;
      encoding = null;
    }
    if (chunk !== null && chunk !== void 0)
      this.write(chunk, encoding);
    if (state.corked) {
      state.corked = 1;
      this.uncork();
    }
    if (!state.ending)
      endWritable(this, state, cb);
    return this;
  };
  Object.defineProperty(Writable.prototype, "writableLength", {
    enumerable: false,
    get: function get() {
      return this._writableState.length;
    }
  });
  function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
  }
  function callFinal(stream, state) {
    stream._final(function(err) {
      state.pendingcb--;
      if (err) {
        errorOrDestroy(stream, err);
      }
      state.prefinished = true;
      stream.emit("prefinish");
      finishMaybe(stream, state);
    });
  }
  function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
      if (typeof stream._final === "function" && !state.destroyed) {
        state.pendingcb++;
        state.finalCalled = true;
        process.nextTick(callFinal, stream, state);
      } else {
        state.prefinished = true;
        stream.emit("prefinish");
      }
    }
  }
  function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
      prefinish(stream, state);
      if (state.pendingcb === 0) {
        state.finished = true;
        stream.emit("finish");
        if (state.autoDestroy) {
          var rState = stream._readableState;
          if (!rState || rState.autoDestroy && rState.endEmitted) {
            stream.destroy();
          }
        }
      }
    }
    return need;
  }
  function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
      if (state.finished)
        process.nextTick(cb);
      else
        stream.once("finish", cb);
    }
    state.ended = true;
    stream.writable = false;
  }
  function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while (entry) {
      var cb = entry.callback;
      state.pendingcb--;
      cb(err);
      entry = entry.next;
    }
    state.corkedRequestsFree.next = corkReq;
  }
  Object.defineProperty(Writable.prototype, "destroyed", {
    enumerable: false,
    get: function get() {
      if (this._writableState === void 0) {
        return false;
      }
      return this._writableState.destroyed;
    },
    set: function set(value) {
      if (!this._writableState) {
        return;
      }
      this._writableState.destroyed = value;
    }
  });
  Writable.prototype.destroy = destroyImpl.destroy;
  Writable.prototype._undestroy = destroyImpl.undestroy;
  Writable.prototype._destroy = function(err, cb) {
    cb(err);
  };
});

// ../../node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_duplex.js
var require_stream_duplex2 = __commonJS((exports2, module3) => {
  "use strict";
  var objectKeys = Object.keys || function(obj) {
    var keys2 = [];
    for (var key in obj) {
      keys2.push(key);
    }
    return keys2;
  };
  module3.exports = Duplex;
  var Readable = require_stream_readable2();
  var Writable = require_stream_writable2();
  require_inherits()(Duplex, Readable);
  {
    var keys = objectKeys(Writable.prototype);
    for (var v = 0; v < keys.length; v++) {
      var method = keys[v];
      if (!Duplex.prototype[method])
        Duplex.prototype[method] = Writable.prototype[method];
    }
  }
  function Duplex(options) {
    if (!(this instanceof Duplex))
      return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
      if (options.readable === false)
        this.readable = false;
      if (options.writable === false)
        this.writable = false;
      if (options.allowHalfOpen === false) {
        this.allowHalfOpen = false;
        this.once("end", onend);
      }
    }
  }
  Object.defineProperty(Duplex.prototype, "writableHighWaterMark", {
    enumerable: false,
    get: function get() {
      return this._writableState.highWaterMark;
    }
  });
  Object.defineProperty(Duplex.prototype, "writableBuffer", {
    enumerable: false,
    get: function get() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  Object.defineProperty(Duplex.prototype, "writableLength", {
    enumerable: false,
    get: function get() {
      return this._writableState.length;
    }
  });
  function onend() {
    if (this._writableState.ended)
      return;
    process.nextTick(onEndNT, this);
  }
  function onEndNT(self2) {
    self2.end();
  }
  Object.defineProperty(Duplex.prototype, "destroyed", {
    enumerable: false,
    get: function get() {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return false;
      }
      return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
      if (this._readableState === void 0 || this._writableState === void 0) {
        return;
      }
      this._readableState.destroyed = value;
      this._writableState.destroyed = value;
    }
  });
});

// ../../node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream2 = __commonJS((exports2, module3) => {
  "use strict";
  var ERR_STREAM_PREMATURE_CLOSE = require_errors2().codes.ERR_STREAM_PREMATURE_CLOSE;
  function once(callback) {
    var called = false;
    return function() {
      if (called)
        return;
      called = true;
      for (var _len = arguments.length, args2 = new Array(_len), _key = 0; _key < _len; _key++) {
        args2[_key] = arguments[_key];
      }
      callback.apply(this, args2);
    };
  }
  function noop() {
  }
  function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
  }
  function eos(stream, opts, callback) {
    if (typeof opts === "function")
      return eos(stream, null, opts);
    if (!opts)
      opts = {};
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish2() {
      if (!stream.writable)
        onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish2() {
      writable = false;
      writableEnded = true;
      if (!readable)
        callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend2() {
      readable = false;
      readableEnded = true;
      if (!writable)
        callback.call(stream);
    };
    var onerror = function onerror2(err) {
      callback.call(stream, err);
    };
    var onclose = function onclose2() {
      var err;
      if (readable && !readableEnded) {
        if (!stream._readableState || !stream._readableState.ended)
          err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream, err);
      }
      if (writable && !writableEnded) {
        if (!stream._writableState || !stream._writableState.ended)
          err = new ERR_STREAM_PREMATURE_CLOSE();
        return callback.call(stream, err);
      }
    };
    var onrequest = function onrequest2() {
      stream.req.on("finish", onfinish);
    };
    if (isRequest(stream)) {
      stream.on("complete", onfinish);
      stream.on("abort", onclose);
      if (stream.req)
        onrequest();
      else
        stream.on("request", onrequest);
    } else if (writable && !stream._writableState) {
      stream.on("end", onlegacyfinish);
      stream.on("close", onlegacyfinish);
    }
    stream.on("end", onend);
    stream.on("finish", onfinish);
    if (opts.error !== false)
      stream.on("error", onerror);
    stream.on("close", onclose);
    return function() {
      stream.removeListener("complete", onfinish);
      stream.removeListener("abort", onclose);
      stream.removeListener("request", onrequest);
      if (stream.req)
        stream.req.removeListener("finish", onfinish);
      stream.removeListener("end", onlegacyfinish);
      stream.removeListener("close", onlegacyfinish);
      stream.removeListener("finish", onfinish);
      stream.removeListener("end", onend);
      stream.removeListener("error", onerror);
      stream.removeListener("close", onclose);
    };
  }
  module3.exports = eos;
});

// ../../node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS((exports2, module3) => {
  "use strict";
  var _Object$setPrototypeO;
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var finished = require_end_of_stream2();
  var kLastResolve = Symbol("lastResolve");
  var kLastReject = Symbol("lastReject");
  var kError = Symbol("error");
  var kEnded = Symbol("ended");
  var kLastPromise = Symbol("lastPromise");
  var kHandlePromise = Symbol("handlePromise");
  var kStream = Symbol("stream");
  function createIterResult(value, done) {
    return {
      value,
      done
    };
  }
  function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
      var data = iter[kStream].read();
      if (data !== null) {
        iter[kLastPromise] = null;
        iter[kLastResolve] = null;
        iter[kLastReject] = null;
        resolve(createIterResult(data, false));
      }
    }
  }
  function onReadable(iter) {
    process.nextTick(readAndResolve, iter);
  }
  function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
      lastPromise.then(function() {
        if (iter[kEnded]) {
          resolve(createIterResult(void 0, true));
          return;
        }
        iter[kHandlePromise](resolve, reject);
      }, reject);
    };
  }
  var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
  });
  var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream() {
      return this[kStream];
    },
    next: function next() {
      var _this = this;
      var error = this[kError];
      if (error !== null) {
        return Promise.reject(error);
      }
      if (this[kEnded]) {
        return Promise.resolve(createIterResult(void 0, true));
      }
      if (this[kStream].destroyed) {
        return new Promise(function(resolve, reject) {
          process.nextTick(function() {
            if (_this[kError]) {
              reject(_this[kError]);
            } else {
              resolve(createIterResult(void 0, true));
            }
          });
        });
      }
      var lastPromise = this[kLastPromise];
      var promise;
      if (lastPromise) {
        promise = new Promise(wrapForNext(lastPromise, this));
      } else {
        var data = this[kStream].read();
        if (data !== null) {
          return Promise.resolve(createIterResult(data, false));
        }
        promise = new Promise(this[kHandlePromise]);
      }
      this[kLastPromise] = promise;
      return promise;
    }
  }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
  }), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    return new Promise(function(resolve, reject) {
      _this2[kStream].destroy(null, function(err) {
        if (err) {
          reject(err);
          return;
        }
        resolve(createIterResult(void 0, true));
      });
    });
  }), _Object$setPrototypeO), AsyncIteratorPrototype);
  var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator2(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
      value: stream,
      writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kLastReject, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kError, {
      value: null,
      writable: true
    }), _defineProperty(_Object$create, kEnded, {
      value: stream._readableState.endEmitted,
      writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
      value: function value(resolve, reject) {
        var data = iterator[kStream].read();
        if (data) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(data, false));
        } else {
          iterator[kLastResolve] = resolve;
          iterator[kLastReject] = reject;
        }
      },
      writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
      if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
        var reject = iterator[kLastReject];
        if (reject !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          reject(err);
        }
        iterator[kError] = err;
        return;
      }
      var resolve = iterator[kLastResolve];
      if (resolve !== null) {
        iterator[kLastPromise] = null;
        iterator[kLastResolve] = null;
        iterator[kLastReject] = null;
        resolve(createIterResult(void 0, true));
      }
      iterator[kEnded] = true;
    });
    stream.on("readable", onReadable.bind(null, iterator));
    return iterator;
  };
  module3.exports = createReadableStreamAsyncIterator;
});

// ../../node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/from.js
var require_from = __commonJS((exports2, module3) => {
  "use strict";
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg11) {
    try {
      var info = gen[key](arg11);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function() {
      var self2 = this, args2 = arguments;
      return new Promise(function(resolve, reject) {
        var gen = fn.apply(self2, args2);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(void 0);
      });
    };
  }
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
    } else {
      obj[key] = value;
    }
    return obj;
  }
  var ERR_INVALID_ARG_TYPE = require_errors2().codes.ERR_INVALID_ARG_TYPE;
  function from(Readable, iterable, opts) {
    var iterator;
    if (iterable && typeof iterable.next === "function") {
      iterator = iterable;
    } else if (iterable && iterable[Symbol.asyncIterator])
      iterator = iterable[Symbol.asyncIterator]();
    else if (iterable && iterable[Symbol.iterator])
      iterator = iterable[Symbol.iterator]();
    else
      throw new ERR_INVALID_ARG_TYPE("iterable", ["Iterable"], iterable);
    var readable = new Readable(_objectSpread({
      objectMode: true
    }, opts));
    var reading = false;
    readable._read = function() {
      if (!reading) {
        reading = true;
        next();
      }
    };
    function next() {
      return _next2.apply(this, arguments);
    }
    function _next2() {
      _next2 = _asyncToGenerator(function* () {
        try {
          var _ref = yield iterator.next(), value = _ref.value, done = _ref.done;
          if (done) {
            readable.push(null);
          } else if (readable.push(yield value)) {
            next();
          } else {
            reading = false;
          }
        } catch (err) {
          readable.destroy(err);
        }
      });
      return _next2.apply(this, arguments);
    }
    return readable;
  }
  module3.exports = from;
});

// ../../node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_readable.js
var require_stream_readable2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = Readable;
  var Duplex;
  Readable.ReadableState = ReadableState;
  var EE = require("events").EventEmitter;
  var EElistenerCount = function EElistenerCount2(emitter, type) {
    return emitter.listeners(type).length;
  };
  var Stream = require_stream7();
  var Buffer2 = require("buffer").Buffer;
  var OurUint8Array = global.Uint8Array || function() {
  };
  function _uint8ArrayToBuffer(chunk) {
    return Buffer2.from(chunk);
  }
  function _isUint8Array(obj) {
    return Buffer2.isBuffer(obj) || obj instanceof OurUint8Array;
  }
  var debugUtil = require("util");
  var debug3;
  if (debugUtil && debugUtil.debuglog) {
    debug3 = debugUtil.debuglog("stream");
  } else {
    debug3 = function debug4() {
    };
  }
  var BufferList = require_buffer_list();
  var destroyImpl = require_destroy2();
  var _require = require_state();
  var getHighWaterMark = _require.getHighWaterMark;
  var _require$codes = require_errors2().codes;
  var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
  var ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF;
  var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
  var ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
  var StringDecoder;
  var createReadableStreamAsyncIterator;
  var from;
  require_inherits()(Readable, Stream);
  var errorOrDestroy = destroyImpl.errorOrDestroy;
  var kProxyEvents = ["error", "close", "destroy", "pause", "resume"];
  function prependListener(emitter, event, fn) {
    if (typeof emitter.prependListener === "function")
      return emitter.prependListener(event, fn);
    if (!emitter._events || !emitter._events[event])
      emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event]))
      emitter._events[event].unshift(fn);
    else
      emitter._events[event] = [fn, emitter._events[event]];
  }
  function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require_stream_duplex2();
    options = options || {};
    if (typeof isDuplex !== "boolean")
      isDuplex = stream instanceof Duplex;
    this.objectMode = !!options.objectMode;
    if (isDuplex)
      this.objectMode = this.objectMode || !!options.readableObjectMode;
    this.highWaterMark = getHighWaterMark(this, options, "readableHighWaterMark", isDuplex);
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false;
    this.sync = true;
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true;
    this.emitClose = options.emitClose !== false;
    this.autoDestroy = !!options.autoDestroy;
    this.destroyed = false;
    this.defaultEncoding = options.defaultEncoding || "utf8";
    this.awaitDrain = 0;
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
      if (!StringDecoder)
        StringDecoder = require("string_decoder/").StringDecoder;
      this.decoder = new StringDecoder(options.encoding);
      this.encoding = options.encoding;
    }
  }
  function Readable(options) {
    Duplex = Duplex || require_stream_duplex2();
    if (!(this instanceof Readable))
      return new Readable(options);
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex);
    this.readable = true;
    if (options) {
      if (typeof options.read === "function")
        this._read = options.read;
      if (typeof options.destroy === "function")
        this._destroy = options.destroy;
    }
    Stream.call(this);
  }
  Object.defineProperty(Readable.prototype, "destroyed", {
    enumerable: false,
    get: function get() {
      if (this._readableState === void 0) {
        return false;
      }
      return this._readableState.destroyed;
    },
    set: function set(value) {
      if (!this._readableState) {
        return;
      }
      this._readableState.destroyed = value;
    }
  });
  Readable.prototype.destroy = destroyImpl.destroy;
  Readable.prototype._undestroy = destroyImpl.undestroy;
  Readable.prototype._destroy = function(err, cb) {
    cb(err);
  };
  Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
      if (typeof chunk === "string") {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = Buffer2.from(chunk, encoding);
          encoding = "";
        }
        skipChunkCheck = true;
      }
    } else {
      skipChunkCheck = true;
    }
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
  };
  Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
  };
  function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug3("readableAddChunk", chunk);
    var state = stream._readableState;
    if (chunk === null) {
      state.reading = false;
      onEofChunk(stream, state);
    } else {
      var er;
      if (!skipChunkCheck)
        er = chunkInvalid(state, chunk);
      if (er) {
        errorOrDestroy(stream, er);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (typeof chunk !== "string" && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer2.prototype) {
          chunk = _uint8ArrayToBuffer(chunk);
        }
        if (addToFront) {
          if (state.endEmitted)
            errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
          else
            addChunk(stream, state, chunk, true);
        } else if (state.ended) {
          errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
        } else if (state.destroyed) {
          return false;
        } else {
          state.reading = false;
          if (state.decoder && !encoding) {
            chunk = state.decoder.write(chunk);
            if (state.objectMode || chunk.length !== 0)
              addChunk(stream, state, chunk, false);
            else
              maybeReadMore(stream, state);
          } else {
            addChunk(stream, state, chunk, false);
          }
        }
      } else if (!addToFront) {
        state.reading = false;
        maybeReadMore(stream, state);
      }
    }
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
  }
  function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
      state.awaitDrain = 0;
      stream.emit("data", chunk);
    } else {
      state.length += state.objectMode ? 1 : chunk.length;
      if (addToFront)
        state.buffer.unshift(chunk);
      else
        state.buffer.push(chunk);
      if (state.needReadable)
        emitReadable(stream);
    }
    maybeReadMore(stream, state);
  }
  function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state.objectMode) {
      er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer", "Uint8Array"], chunk);
    }
    return er;
  }
  Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
  };
  Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder)
      StringDecoder = require("string_decoder/").StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder;
    this._readableState.encoding = this._readableState.decoder.encoding;
    var p = this._readableState.buffer.head;
    var content = "";
    while (p !== null) {
      content += decoder.write(p.data);
      p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== "")
      this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
  };
  var MAX_HWM = 1073741824;
  function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) {
      n = MAX_HWM;
    } else {
      n--;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      n++;
    }
    return n;
  }
  function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended)
      return 0;
    if (state.objectMode)
      return 1;
    if (n !== n) {
      if (state.flowing && state.length)
        return state.buffer.head.data.length;
      else
        return state.length;
    }
    if (n > state.highWaterMark)
      state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length)
      return n;
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    }
    return state.length;
  }
  Readable.prototype.read = function(n) {
    debug3("read", n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0)
      state.emittedReadable = false;
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
      debug3("read: emitReadable", state.length, state.ended);
      if (state.length === 0 && state.ended)
        endReadable(this);
      else
        emitReadable(this);
      return null;
    }
    n = howMuchToRead(n, state);
    if (n === 0 && state.ended) {
      if (state.length === 0)
        endReadable(this);
      return null;
    }
    var doRead = state.needReadable;
    debug3("need readable", doRead);
    if (state.length === 0 || state.length - n < state.highWaterMark) {
      doRead = true;
      debug3("length less than watermark", doRead);
    }
    if (state.ended || state.reading) {
      doRead = false;
      debug3("reading or ended", doRead);
    } else if (doRead) {
      debug3("do read");
      state.reading = true;
      state.sync = true;
      if (state.length === 0)
        state.needReadable = true;
      this._read(state.highWaterMark);
      state.sync = false;
      if (!state.reading)
        n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0)
      ret = fromList(n, state);
    else
      ret = null;
    if (ret === null) {
      state.needReadable = state.length <= state.highWaterMark;
      n = 0;
    } else {
      state.length -= n;
      state.awaitDrain = 0;
    }
    if (state.length === 0) {
      if (!state.ended)
        state.needReadable = true;
      if (nOrig !== n && state.ended)
        endReadable(this);
    }
    if (ret !== null)
      this.emit("data", ret);
    return ret;
  };
  function onEofChunk(stream, state) {
    debug3("onEofChunk");
    if (state.ended)
      return;
    if (state.decoder) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) {
        state.buffer.push(chunk);
        state.length += state.objectMode ? 1 : chunk.length;
      }
    }
    state.ended = true;
    if (state.sync) {
      emitReadable(stream);
    } else {
      state.needReadable = false;
      if (!state.emittedReadable) {
        state.emittedReadable = true;
        emitReadable_(stream);
      }
    }
  }
  function emitReadable(stream) {
    var state = stream._readableState;
    debug3("emitReadable", state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
      debug3("emitReadable", state.flowing);
      state.emittedReadable = true;
      process.nextTick(emitReadable_, stream);
    }
  }
  function emitReadable_(stream) {
    var state = stream._readableState;
    debug3("emitReadable_", state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
      stream.emit("readable");
      state.emittedReadable = false;
    }
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
  }
  function maybeReadMore(stream, state) {
    if (!state.readingMore) {
      state.readingMore = true;
      process.nextTick(maybeReadMore_, stream, state);
    }
  }
  function maybeReadMore_(stream, state) {
    while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
      var len = state.length;
      debug3("maybeReadMore read 0");
      stream.read(0);
      if (len === state.length)
        break;
    }
    state.readingMore = false;
  }
  Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED("_read()"));
  };
  Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch (state.pipesCount) {
      case 0:
        state.pipes = dest;
        break;
      case 1:
        state.pipes = [state.pipes, dest];
        break;
      default:
        state.pipes.push(dest);
        break;
    }
    state.pipesCount += 1;
    debug3("pipe count=%d opts=%j", state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted)
      process.nextTick(endFn);
    else
      src.once("end", endFn);
    dest.on("unpipe", onunpipe);
    function onunpipe(readable, unpipeInfo) {
      debug3("onunpipe");
      if (readable === src) {
        if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
          unpipeInfo.hasUnpiped = true;
          cleanup();
        }
      }
    }
    function onend() {
      debug3("onend");
      dest.end();
    }
    var ondrain = pipeOnDrain(src);
    dest.on("drain", ondrain);
    var cleanedUp = false;
    function cleanup() {
      debug3("cleanup");
      dest.removeListener("close", onclose);
      dest.removeListener("finish", onfinish);
      dest.removeListener("drain", ondrain);
      dest.removeListener("error", onerror);
      dest.removeListener("unpipe", onunpipe);
      src.removeListener("end", onend);
      src.removeListener("end", unpipe);
      src.removeListener("data", ondata);
      cleanedUp = true;
      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain))
        ondrain();
    }
    src.on("data", ondata);
    function ondata(chunk) {
      debug3("ondata");
      var ret = dest.write(chunk);
      debug3("dest.write", ret);
      if (ret === false) {
        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
          debug3("false write response, pause", state.awaitDrain);
          state.awaitDrain++;
        }
        src.pause();
      }
    }
    function onerror(er) {
      debug3("onerror", er);
      unpipe();
      dest.removeListener("error", onerror);
      if (EElistenerCount(dest, "error") === 0)
        errorOrDestroy(dest, er);
    }
    prependListener(dest, "error", onerror);
    function onclose() {
      dest.removeListener("finish", onfinish);
      unpipe();
    }
    dest.once("close", onclose);
    function onfinish() {
      debug3("onfinish");
      dest.removeListener("close", onclose);
      unpipe();
    }
    dest.once("finish", onfinish);
    function unpipe() {
      debug3("unpipe");
      src.unpipe(dest);
    }
    dest.emit("pipe", src);
    if (!state.flowing) {
      debug3("pipe resume");
      src.resume();
    }
    return dest;
  };
  function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
      var state = src._readableState;
      debug3("pipeOnDrain", state.awaitDrain);
      if (state.awaitDrain)
        state.awaitDrain--;
      if (state.awaitDrain === 0 && EElistenerCount(src, "data")) {
        state.flowing = true;
        flow(src);
      }
    };
  }
  Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
      hasUnpiped: false
    };
    if (state.pipesCount === 0)
      return this;
    if (state.pipesCount === 1) {
      if (dest && dest !== state.pipes)
        return this;
      if (!dest)
        dest = state.pipes;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      if (dest)
        dest.emit("unpipe", this, unpipeInfo);
      return this;
    }
    if (!dest) {
      var dests = state.pipes;
      var len = state.pipesCount;
      state.pipes = null;
      state.pipesCount = 0;
      state.flowing = false;
      for (var i = 0; i < len; i++) {
        dests[i].emit("unpipe", this, {
          hasUnpiped: false
        });
      }
      return this;
    }
    var index = indexOf(state.pipes, dest);
    if (index === -1)
      return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1)
      state.pipes = state.pipes[0];
    dest.emit("unpipe", this, unpipeInfo);
    return this;
  };
  Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === "data") {
      state.readableListening = this.listenerCount("readable") > 0;
      if (state.flowing !== false)
        this.resume();
    } else if (ev === "readable") {
      if (!state.endEmitted && !state.readableListening) {
        state.readableListening = state.needReadable = true;
        state.flowing = false;
        state.emittedReadable = false;
        debug3("on readable", state.length, state.reading);
        if (state.length) {
          emitReadable(this);
        } else if (!state.reading) {
          process.nextTick(nReadingNextTick, this);
        }
      }
    }
    return res;
  };
  Readable.prototype.addListener = Readable.prototype.on;
  Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === "readable") {
      process.nextTick(updateReadableListening, this);
    }
    return res;
  };
  Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === "readable" || ev === void 0) {
      process.nextTick(updateReadableListening, this);
    }
    return res;
  };
  function updateReadableListening(self2) {
    var state = self2._readableState;
    state.readableListening = self2.listenerCount("readable") > 0;
    if (state.resumeScheduled && !state.paused) {
      state.flowing = true;
    } else if (self2.listenerCount("data") > 0) {
      self2.resume();
    }
  }
  function nReadingNextTick(self2) {
    debug3("readable nexttick read 0");
    self2.read(0);
  }
  Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
      debug3("resume");
      state.flowing = !state.readableListening;
      resume(this, state);
    }
    state.paused = false;
    return this;
  };
  function resume(stream, state) {
    if (!state.resumeScheduled) {
      state.resumeScheduled = true;
      process.nextTick(resume_, stream, state);
    }
  }
  function resume_(stream, state) {
    debug3("resume", state.reading);
    if (!state.reading) {
      stream.read(0);
    }
    state.resumeScheduled = false;
    stream.emit("resume");
    flow(stream);
    if (state.flowing && !state.reading)
      stream.read(0);
  }
  Readable.prototype.pause = function() {
    debug3("call pause flowing=%j", this._readableState.flowing);
    if (this._readableState.flowing !== false) {
      debug3("pause");
      this._readableState.flowing = false;
      this.emit("pause");
    }
    this._readableState.paused = true;
    return this;
  };
  function flow(stream) {
    var state = stream._readableState;
    debug3("flow", state.flowing);
    while (state.flowing && stream.read() !== null) {
      ;
    }
  }
  Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on("end", function() {
      debug3("wrapped end");
      if (state.decoder && !state.ended) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length)
          _this.push(chunk);
      }
      _this.push(null);
    });
    stream.on("data", function(chunk) {
      debug3("wrapped data");
      if (state.decoder)
        chunk = state.decoder.write(chunk);
      if (state.objectMode && (chunk === null || chunk === void 0))
        return;
      else if (!state.objectMode && (!chunk || !chunk.length))
        return;
      var ret = _this.push(chunk);
      if (!ret) {
        paused = true;
        stream.pause();
      }
    });
    for (var i in stream) {
      if (this[i] === void 0 && typeof stream[i] === "function") {
        this[i] = function methodWrap(method) {
          return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
          };
        }(i);
      }
    }
    for (var n = 0; n < kProxyEvents.length; n++) {
      stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
    }
    this._read = function(n2) {
      debug3("wrapped _read", n2);
      if (paused) {
        paused = false;
        stream.resume();
      }
    };
    return this;
  };
  if (typeof Symbol === "function") {
    Readable.prototype[Symbol.asyncIterator] = function() {
      if (createReadableStreamAsyncIterator === void 0) {
        createReadableStreamAsyncIterator = require_async_iterator();
      }
      return createReadableStreamAsyncIterator(this);
    };
  }
  Object.defineProperty(Readable.prototype, "readableHighWaterMark", {
    enumerable: false,
    get: function get() {
      return this._readableState.highWaterMark;
    }
  });
  Object.defineProperty(Readable.prototype, "readableBuffer", {
    enumerable: false,
    get: function get() {
      return this._readableState && this._readableState.buffer;
    }
  });
  Object.defineProperty(Readable.prototype, "readableFlowing", {
    enumerable: false,
    get: function get() {
      return this._readableState.flowing;
    },
    set: function set(state) {
      if (this._readableState) {
        this._readableState.flowing = state;
      }
    }
  });
  Readable._fromList = fromList;
  Object.defineProperty(Readable.prototype, "readableLength", {
    enumerable: false,
    get: function get() {
      return this._readableState.length;
    }
  });
  function fromList(n, state) {
    if (state.length === 0)
      return null;
    var ret;
    if (state.objectMode)
      ret = state.buffer.shift();
    else if (!n || n >= state.length) {
      if (state.decoder)
        ret = state.buffer.join("");
      else if (state.buffer.length === 1)
        ret = state.buffer.first();
      else
        ret = state.buffer.concat(state.length);
      state.buffer.clear();
    } else {
      ret = state.buffer.consume(n, state.decoder);
    }
    return ret;
  }
  function endReadable(stream) {
    var state = stream._readableState;
    debug3("endReadable", state.endEmitted);
    if (!state.endEmitted) {
      state.ended = true;
      process.nextTick(endReadableNT, state, stream);
    }
  }
  function endReadableNT(state, stream) {
    debug3("endReadableNT", state.endEmitted, state.length);
    if (!state.endEmitted && state.length === 0) {
      state.endEmitted = true;
      stream.readable = false;
      stream.emit("end");
      if (state.autoDestroy) {
        var wState = stream._writableState;
        if (!wState || wState.autoDestroy && wState.finished) {
          stream.destroy();
        }
      }
    }
  }
  if (typeof Symbol === "function") {
    Readable.from = function(iterable, opts) {
      if (from === void 0) {
        from = require_from();
      }
      return from(Readable, iterable, opts);
    };
  }
  function indexOf(xs, x) {
    for (var i = 0, l = xs.length; i < l; i++) {
      if (xs[i] === x)
        return i;
    }
    return -1;
  }
});

// ../../node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_transform.js
var require_stream_transform2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = Transform;
  var _require$codes = require_errors2().codes;
  var ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED;
  var ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK;
  var ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING;
  var ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
  var Duplex = require_stream_duplex2();
  require_inherits()(Transform, Duplex);
  function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) {
      return this.emit("error", new ERR_MULTIPLE_CALLBACK());
    }
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null)
      this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) {
      this._read(rs.highWaterMark);
    }
  }
  function Transform(options) {
    if (!(this instanceof Transform))
      return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
      afterTransform: afterTransform.bind(this),
      needTransform: false,
      transforming: false,
      writecb: null,
      writechunk: null,
      writeencoding: null
    };
    this._readableState.needReadable = true;
    this._readableState.sync = false;
    if (options) {
      if (typeof options.transform === "function")
        this._transform = options.transform;
      if (typeof options.flush === "function")
        this._flush = options.flush;
    }
    this.on("prefinish", prefinish);
  }
  function prefinish() {
    var _this = this;
    if (typeof this._flush === "function" && !this._readableState.destroyed) {
      this._flush(function(er, data) {
        done(_this, er, data);
      });
    } else {
      done(this, null, null);
    }
  }
  Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
  };
  Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
  };
  Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
      var rs = this._readableState;
      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark)
        this._read(rs.highWaterMark);
    }
  };
  Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
      ts.transforming = true;
      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else {
      ts.needTransform = true;
    }
  };
  Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
      cb(err2);
    });
  };
  function done(stream, er, data) {
    if (er)
      return stream.emit("error", er);
    if (data != null)
      stream.push(data);
    if (stream._writableState.length)
      throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming)
      throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
  }
});

// ../../node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/_stream_passthrough.js
var require_stream_passthrough2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = PassThrough;
  var Transform = require_stream_transform2();
  require_inherits()(PassThrough, Transform);
  function PassThrough(options) {
    if (!(this instanceof PassThrough))
      return new PassThrough(options);
    Transform.call(this, options);
  }
  PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
  };
});

// ../../node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS((exports2, module3) => {
  "use strict";
  var eos;
  function once(callback) {
    var called = false;
    return function() {
      if (called)
        return;
      called = true;
      callback.apply(void 0, arguments);
    };
  }
  var _require$codes = require_errors2().codes;
  var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
  var ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
  function noop(err) {
    if (err)
      throw err;
  }
  function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === "function";
  }
  function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on("close", function() {
      closed = true;
    });
    if (eos === void 0)
      eos = require_end_of_stream2();
    eos(stream, {
      readable: reading,
      writable: writing
    }, function(err) {
      if (err)
        return callback(err);
      closed = true;
      callback();
    });
    var destroyed = false;
    return function(err) {
      if (closed)
        return;
      if (destroyed)
        return;
      destroyed = true;
      if (isRequest(stream))
        return stream.abort();
      if (typeof stream.destroy === "function")
        return stream.destroy();
      callback(err || new ERR_STREAM_DESTROYED("pipe"));
    };
  }
  function call(fn) {
    fn();
  }
  function pipe(from, to) {
    return from.pipe(to);
  }
  function popCallback(streams) {
    if (!streams.length)
      return noop;
    if (typeof streams[streams.length - 1] !== "function")
      return noop;
    return streams.pop();
  }
  function pipeline() {
    for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
      streams[_key] = arguments[_key];
    }
    var callback = popCallback(streams);
    if (Array.isArray(streams[0]))
      streams = streams[0];
    if (streams.length < 2) {
      throw new ERR_MISSING_ARGS("streams");
    }
    var error;
    var destroys = streams.map(function(stream, i) {
      var reading = i < streams.length - 1;
      var writing = i > 0;
      return destroyer(stream, reading, writing, function(err) {
        if (!error)
          error = err;
        if (err)
          destroys.forEach(call);
        if (reading)
          return;
        destroys.forEach(call);
        callback(error);
      });
    });
    return streams.reduce(pipe);
  }
  module3.exports = pipeline;
});

// ../../node_modules/.pnpm/readable-stream@3.6.0/node_modules/readable-stream/readable.js
var require_readable2 = __commonJS((exports2, module3) => {
  var Stream = require("stream");
  if (process.env.READABLE_STREAM === "disable" && Stream) {
    module3.exports = Stream.Readable;
    Object.assign(module3.exports, Stream);
    module3.exports.Stream = Stream;
  } else {
    exports2 = module3.exports = require_stream_readable2();
    exports2.Stream = Stream || exports2;
    exports2.Readable = exports2;
    exports2.Writable = require_stream_writable2();
    exports2.Duplex = require_stream_duplex2();
    exports2.Transform = require_stream_transform2();
    exports2.PassThrough = require_stream_passthrough2();
    exports2.finished = require_end_of_stream2();
    exports2.pipeline = require_pipeline();
  }
});

// ../../node_modules/.pnpm/archiver@4.0.1/node_modules/archiver/lib/core.js
var require_core5 = __commonJS((exports2, module3) => {
  /**
   * Archiver Core
   *
   * @ignore
   * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}
   * @copyright (c) 2012-2014 Chris Talkington, contributors.
   */
  var fs17 = require("fs");
  var glob = require_glob();
  var async = require_async7();
  var path19 = require("path");
  var util4 = require_archiver_utils();
  var inherits = require("util").inherits;
  var ArchiverError = require_error3();
  var Transform = require_readable2().Transform;
  var win32 = process.platform === "win32";
  var Archiver = function(format11, options) {
    if (!(this instanceof Archiver)) {
      return new Archiver(format11, options);
    }
    if (typeof format11 !== "string") {
      options = format11;
      format11 = "zip";
    }
    options = this.options = util4.defaults(options, {
      highWaterMark: 1024 * 1024,
      statConcurrency: 4
    });
    Transform.call(this, options);
    this._format = false;
    this._module = false;
    this._pending = 0;
    this._pointer = 0;
    this._entriesCount = 0;
    this._entriesProcessedCount = 0;
    this._fsEntriesTotalBytes = 0;
    this._fsEntriesProcessedBytes = 0;
    this._queue = async.queue(this._onQueueTask.bind(this), 1);
    this._queue.drain = this._onQueueDrain.bind(this);
    this._statQueue = async.queue(this._onStatQueueTask.bind(this), options.statConcurrency);
    this._statQueue.drain = this._onQueueDrain.bind(this);
    this._state = {
      aborted: false,
      finalize: false,
      finalizing: false,
      finalized: false,
      modulePiped: false
    };
    this._streams = [];
  };
  inherits(Archiver, Transform);
  Archiver.prototype._abort = function() {
    this._state.aborted = true;
    this._queue.kill();
    this._statQueue.kill();
    if (this._queue.idle()) {
      this._shutdown();
    }
  };
  Archiver.prototype._append = function(filepath, data) {
    data = data || {};
    var task = {
      source: null,
      filepath
    };
    if (!data.name) {
      data.name = filepath;
    }
    data.sourcePath = filepath;
    task.data = data;
    this._entriesCount++;
    if (data.stats && data.stats instanceof fs17.Stats) {
      task = this._updateQueueTaskWithStats(task, data.stats);
      if (task) {
        if (data.stats.size) {
          this._fsEntriesTotalBytes += data.stats.size;
        }
        this._queue.push(task);
      }
    } else {
      this._statQueue.push(task);
    }
  };
  Archiver.prototype._finalize = function() {
    if (this._state.finalizing || this._state.finalized || this._state.aborted) {
      return;
    }
    this._state.finalizing = true;
    this._moduleFinalize();
    this._state.finalizing = false;
    this._state.finalized = true;
  };
  Archiver.prototype._maybeFinalize = function() {
    if (this._state.finalizing || this._state.finalized || this._state.aborted) {
      return false;
    }
    if (this._state.finalize && this._pending === 0 && this._queue.idle() && this._statQueue.idle()) {
      this._finalize();
      return true;
    }
    return false;
  };
  Archiver.prototype._moduleAppend = function(source, data, callback) {
    if (this._state.aborted) {
      callback();
      return;
    }
    this._module.append(source, data, function(err) {
      this._task = null;
      if (this._state.aborted) {
        this._shutdown();
        return;
      }
      if (err) {
        this.emit("error", err);
        setImmediate(callback);
        return;
      }
      this.emit("entry", data);
      this._entriesProcessedCount++;
      if (data.stats && data.stats.size) {
        this._fsEntriesProcessedBytes += data.stats.size;
      }
      this.emit("progress", {
        entries: {
          total: this._entriesCount,
          processed: this._entriesProcessedCount
        },
        fs: {
          totalBytes: this._fsEntriesTotalBytes,
          processedBytes: this._fsEntriesProcessedBytes
        }
      });
      setImmediate(callback);
    }.bind(this));
  };
  Archiver.prototype._moduleFinalize = function() {
    if (typeof this._module.finalize === "function") {
      this._module.finalize();
    } else if (typeof this._module.end === "function") {
      this._module.end();
    } else {
      this.emit("error", new ArchiverError("NOENDMETHOD"));
    }
  };
  Archiver.prototype._modulePipe = function() {
    this._module.on("error", this._onModuleError.bind(this));
    this._module.pipe(this);
    this._state.modulePiped = true;
  };
  Archiver.prototype._moduleSupports = function(key) {
    if (!this._module.supports || !this._module.supports[key]) {
      return false;
    }
    return this._module.supports[key];
  };
  Archiver.prototype._moduleUnpipe = function() {
    this._module.unpipe(this);
    this._state.modulePiped = false;
  };
  Archiver.prototype._normalizeEntryData = function(data, stats) {
    data = util4.defaults(data, {
      type: "file",
      name: null,
      date: null,
      mode: null,
      prefix: null,
      sourcePath: null,
      stats: false
    });
    if (stats && data.stats === false) {
      data.stats = stats;
    }
    var isDir = data.type === "directory";
    if (data.name) {
      if (typeof data.prefix === "string" && data.prefix !== "") {
        data.name = data.prefix + "/" + data.name;
        data.prefix = null;
      }
      data.name = util4.sanitizePath(data.name);
      if (data.type !== "symlink" && data.name.slice(-1) === "/") {
        isDir = true;
        data.type = "directory";
      } else if (isDir) {
        data.name += "/";
      }
    }
    if (typeof data.mode === "number") {
      if (win32) {
        data.mode &= 511;
      } else {
        data.mode &= 4095;
      }
    } else if (data.stats && data.mode === null) {
      if (win32) {
        data.mode = data.stats.mode & 511;
      } else {
        data.mode = data.stats.mode & 4095;
      }
      if (win32 && isDir) {
        data.mode = 493;
      }
    } else if (data.mode === null) {
      data.mode = isDir ? 493 : 420;
    }
    if (data.stats && data.date === null) {
      data.date = data.stats.mtime;
    } else {
      data.date = util4.dateify(data.date);
    }
    return data;
  };
  Archiver.prototype._onModuleError = function(err) {
    this.emit("error", err);
  };
  Archiver.prototype._onQueueDrain = function() {
    if (this._state.finalizing || this._state.finalized || this._state.aborted) {
      return;
    }
    if (this._state.finalize && this._pending === 0 && this._queue.idle() && this._statQueue.idle()) {
      this._finalize();
    }
  };
  Archiver.prototype._onQueueTask = function(task, callback) {
    if (this._state.finalizing || this._state.finalized || this._state.aborted) {
      callback();
      return;
    }
    this._task = task;
    this._moduleAppend(task.source, task.data, callback);
  };
  Archiver.prototype._onStatQueueTask = function(task, callback) {
    if (this._state.finalizing || this._state.finalized || this._state.aborted) {
      callback();
      return;
    }
    fs17.lstat(task.filepath, function(err, stats) {
      if (this._state.aborted) {
        setImmediate(callback);
        return;
      }
      if (err) {
        this._entriesCount--;
        this.emit("warning", err);
        setImmediate(callback);
        return;
      }
      task = this._updateQueueTaskWithStats(task, stats);
      if (task) {
        if (stats.size) {
          this._fsEntriesTotalBytes += stats.size;
        }
        this._queue.push(task);
      }
      setImmediate(callback);
    }.bind(this));
  };
  Archiver.prototype._shutdown = function() {
    this._moduleUnpipe();
    this.end();
  };
  Archiver.prototype._transform = function(chunk, encoding, callback) {
    if (chunk) {
      this._pointer += chunk.length;
    }
    callback(null, chunk);
  };
  Archiver.prototype._updateQueueTaskWithStats = function(task, stats) {
    if (stats.isFile()) {
      task.data.type = "file";
      task.data.sourceType = "stream";
      task.source = util4.lazyReadStream(task.filepath);
    } else if (stats.isDirectory() && this._moduleSupports("directory")) {
      task.data.name = util4.trailingSlashIt(task.data.name);
      task.data.type = "directory";
      task.data.sourcePath = util4.trailingSlashIt(task.filepath);
      task.data.sourceType = "buffer";
      task.source = Buffer.concat([]);
    } else if (stats.isSymbolicLink() && this._moduleSupports("symlink")) {
      var linkPath = fs17.readlinkSync(task.filepath);
      var dirName = path19.dirname(task.filepath);
      task.data.type = "symlink";
      task.data.linkname = path19.relative(dirName, path19.resolve(dirName, linkPath));
      task.data.sourceType = "buffer";
      task.source = Buffer.concat([]);
    } else {
      if (stats.isDirectory()) {
        this.emit("warning", new ArchiverError("DIRECTORYNOTSUPPORTED", task.data));
      } else if (stats.isSymbolicLink()) {
        this.emit("warning", new ArchiverError("SYMLINKNOTSUPPORTED", task.data));
      } else {
        this.emit("warning", new ArchiverError("ENTRYNOTSUPPORTED", task.data));
      }
      return null;
    }
    task.data = this._normalizeEntryData(task.data, stats);
    return task;
  };
  Archiver.prototype.abort = function() {
    if (this._state.aborted || this._state.finalized) {
      return this;
    }
    this._abort();
    return this;
  };
  Archiver.prototype.append = function(source, data) {
    if (this._state.finalize || this._state.aborted) {
      this.emit("error", new ArchiverError("QUEUECLOSED"));
      return this;
    }
    data = this._normalizeEntryData(data);
    if (typeof data.name !== "string" || data.name.length === 0) {
      this.emit("error", new ArchiverError("ENTRYNAMEREQUIRED"));
      return this;
    }
    if (data.type === "directory" && !this._moduleSupports("directory")) {
      this.emit("error", new ArchiverError("DIRECTORYNOTSUPPORTED", {name: data.name}));
      return this;
    }
    source = util4.normalizeInputSource(source);
    if (Buffer.isBuffer(source)) {
      data.sourceType = "buffer";
    } else if (util4.isStream(source)) {
      data.sourceType = "stream";
    } else {
      this.emit("error", new ArchiverError("INPUTSTEAMBUFFERREQUIRED", {name: data.name}));
      return this;
    }
    this._entriesCount++;
    this._queue.push({
      data,
      source
    });
    return this;
  };
  Archiver.prototype.directory = function(dirpath, destpath, data) {
    if (this._state.finalize || this._state.aborted) {
      this.emit("error", new ArchiverError("QUEUECLOSED"));
      return this;
    }
    if (typeof dirpath !== "string" || dirpath.length === 0) {
      this.emit("error", new ArchiverError("DIRECTORYDIRPATHREQUIRED"));
      return this;
    }
    this._pending++;
    if (destpath === false) {
      destpath = "";
    } else if (typeof destpath !== "string") {
      destpath = dirpath;
    }
    var dataFunction = false;
    if (typeof data === "function") {
      dataFunction = data;
      data = {};
    } else if (typeof data !== "object") {
      data = {};
    }
    var globOptions = {
      stat: false,
      dot: true,
      cwd: dirpath
    };
    function onGlobEnd() {
      this._pending--;
      this._maybeFinalize();
    }
    function onGlobError(err) {
      this.emit("error", err);
    }
    function onGlobMatch(match) {
      var ignoreMatch = false;
      var entryData = Object.assign({}, data);
      entryData.name = match;
      entryData.prefix = destpath;
      match = globber._makeAbs(match);
      try {
        if (dataFunction) {
          entryData = dataFunction(entryData);
          if (entryData === false) {
            ignoreMatch = true;
          } else if (typeof entryData !== "object") {
            throw new ArchiverError("DIRECTORYFUNCTIONINVALIDDATA", {dirpath});
          }
        }
      } catch (e) {
        this.emit("error", e);
        return;
      }
      if (ignoreMatch) {
        return;
      }
      this._append(match, entryData);
    }
    var globber = glob("**", globOptions);
    globber.on("error", onGlobError.bind(this));
    globber.on("match", onGlobMatch.bind(this));
    globber.on("end", onGlobEnd.bind(this));
    return this;
  };
  Archiver.prototype.file = function(filepath, data) {
    if (this._state.finalize || this._state.aborted) {
      this.emit("error", new ArchiverError("QUEUECLOSED"));
      return this;
    }
    if (typeof filepath !== "string" || filepath.length === 0) {
      this.emit("error", new ArchiverError("FILEFILEPATHREQUIRED"));
      return this;
    }
    this._append(filepath, data);
    return this;
  };
  Archiver.prototype.glob = function(pattern, options, data) {
    this._pending++;
    options = util4.defaults(options, {
      stat: false
    });
    function onGlobEnd() {
      this._pending--;
      this._maybeFinalize();
    }
    function onGlobError(err) {
      this.emit("error", err);
    }
    function onGlobMatch(match) {
      var entryData = Object.assign({}, data);
      if (options.cwd) {
        entryData.name = match;
        match = globber._makeAbs(match);
      }
      this._append(match, entryData);
    }
    var globber = glob(pattern, options);
    globber.on("error", onGlobError.bind(this));
    globber.on("match", onGlobMatch.bind(this));
    globber.on("end", onGlobEnd.bind(this));
    return this;
  };
  Archiver.prototype.finalize = function() {
    if (this._state.aborted) {
      this.emit("error", new ArchiverError("ABORTED"));
      return this;
    }
    if (this._state.finalize) {
      this.emit("error", new ArchiverError("FINALIZING"));
      return this;
    }
    this._state.finalize = true;
    if (this._pending === 0 && this._queue.idle() && this._statQueue.idle()) {
      this._finalize();
    }
    var self2 = this;
    return new Promise(function(resolve, reject) {
      var errored;
      self2._module.on("end", function() {
        if (!errored) {
          resolve();
        }
      });
      self2._module.on("error", function(err) {
        errored = true;
        reject(err);
      });
    });
  };
  Archiver.prototype.setFormat = function(format11) {
    if (this._format) {
      this.emit("error", new ArchiverError("FORMATSET"));
      return this;
    }
    this._format = format11;
    return this;
  };
  Archiver.prototype.setModule = function(module4) {
    if (this._state.aborted) {
      this.emit("error", new ArchiverError("ABORTED"));
      return this;
    }
    if (this._state.module) {
      this.emit("error", new ArchiverError("MODULESET"));
      return this;
    }
    this._module = module4;
    this._modulePipe();
    return this;
  };
  Archiver.prototype.symlink = function(filepath, target) {
    if (this._state.finalize || this._state.aborted) {
      this.emit("error", new ArchiverError("QUEUECLOSED"));
      return this;
    }
    if (typeof filepath !== "string" || filepath.length === 0) {
      this.emit("error", new ArchiverError("SYMLINKFILEPATHREQUIRED"));
      return this;
    }
    if (typeof target !== "string" || target.length === 0) {
      this.emit("error", new ArchiverError("SYMLINKTARGETREQUIRED", {filepath}));
      return this;
    }
    if (!this._moduleSupports("symlink")) {
      this.emit("error", new ArchiverError("SYMLINKNOTSUPPORTED", {filepath}));
      return this;
    }
    var data = {};
    data.type = "symlink";
    data.name = filepath.replace(/\\/g, "/");
    data.linkname = target.replace(/\\/g, "/");
    data.sourceType = "buffer";
    this._entriesCount++;
    this._queue.push({
      data,
      source: Buffer.concat([])
    });
    return this;
  };
  Archiver.prototype.pointer = function() {
    return this._pointer;
  };
  Archiver.prototype.use = function(plugin) {
    this._streams.push(plugin);
    return this;
  };
  module3.exports = Archiver;
});

// ../../node_modules/.pnpm/compress-commons@3.0.0/node_modules/compress-commons/lib/archivers/archive-entry.js
var require_archive_entry = __commonJS((exports2, module3) => {
  var ArchiveEntry = module3.exports = function() {
  };
  ArchiveEntry.prototype.getName = function() {
  };
  ArchiveEntry.prototype.getSize = function() {
  };
  ArchiveEntry.prototype.getLastModifiedDate = function() {
  };
  ArchiveEntry.prototype.isDirectory = function() {
  };
});

// ../../node_modules/.pnpm/compress-commons@3.0.0/node_modules/compress-commons/lib/archivers/zip/util.js
var require_util6 = __commonJS((exports2, module3) => {
  var util4 = module3.exports = {};
  util4.dateToDos = function(d, forceLocalTime) {
    forceLocalTime = forceLocalTime || false;
    var year = forceLocalTime ? d.getFullYear() : d.getUTCFullYear();
    if (year < 1980) {
      return 2162688;
    } else if (year >= 2044) {
      return 2141175677;
    }
    var val = {
      year,
      month: forceLocalTime ? d.getMonth() : d.getUTCMonth(),
      date: forceLocalTime ? d.getDate() : d.getUTCDate(),
      hours: forceLocalTime ? d.getHours() : d.getUTCHours(),
      minutes: forceLocalTime ? d.getMinutes() : d.getUTCMinutes(),
      seconds: forceLocalTime ? d.getSeconds() : d.getUTCSeconds()
    };
    return val.year - 1980 << 25 | val.month + 1 << 21 | val.date << 16 | val.hours << 11 | val.minutes << 5 | val.seconds / 2;
  };
  util4.dosToDate = function(dos) {
    return new Date((dos >> 25 & 127) + 1980, (dos >> 21 & 15) - 1, dos >> 16 & 31, dos >> 11 & 31, dos >> 5 & 63, (dos & 31) << 1);
  };
  util4.fromDosTime = function(buf) {
    return util4.dosToDate(buf.readUInt32LE(0));
  };
  util4.getEightBytes = function(v) {
    var buf = Buffer.alloc(8);
    buf.writeUInt32LE(v % 4294967296, 0);
    buf.writeUInt32LE(v / 4294967296 | 0, 4);
    return buf;
  };
  util4.getShortBytes = function(v) {
    var buf = Buffer.alloc(2);
    buf.writeUInt16LE((v & 65535) >>> 0, 0);
    return buf;
  };
  util4.getShortBytesValue = function(buf, offset) {
    return buf.readUInt16LE(offset);
  };
  util4.getLongBytes = function(v) {
    var buf = Buffer.alloc(4);
    buf.writeUInt32LE((v & 4294967295) >>> 0, 0);
    return buf;
  };
  util4.getLongBytesValue = function(buf, offset) {
    return buf.readUInt32LE(offset);
  };
  util4.toDosTime = function(d) {
    return util4.getLongBytes(util4.dateToDos(d));
  };
});

// ../../node_modules/.pnpm/compress-commons@3.0.0/node_modules/compress-commons/lib/archivers/zip/general-purpose-bit.js
var require_general_purpose_bit = __commonJS((exports2, module3) => {
  var zipUtil = require_util6();
  var DATA_DESCRIPTOR_FLAG = 1 << 3;
  var ENCRYPTION_FLAG = 1 << 0;
  var NUMBER_OF_SHANNON_FANO_TREES_FLAG = 1 << 2;
  var SLIDING_DICTIONARY_SIZE_FLAG = 1 << 1;
  var STRONG_ENCRYPTION_FLAG = 1 << 6;
  var UFT8_NAMES_FLAG = 1 << 11;
  var GeneralPurposeBit = module3.exports = function() {
    if (!(this instanceof GeneralPurposeBit)) {
      return new GeneralPurposeBit();
    }
    this.descriptor = false;
    this.encryption = false;
    this.utf8 = false;
    this.numberOfShannonFanoTrees = 0;
    this.strongEncryption = false;
    this.slidingDictionarySize = 0;
    return this;
  };
  GeneralPurposeBit.prototype.encode = function() {
    return zipUtil.getShortBytes((this.descriptor ? DATA_DESCRIPTOR_FLAG : 0) | (this.utf8 ? UFT8_NAMES_FLAG : 0) | (this.encryption ? ENCRYPTION_FLAG : 0) | (this.strongEncryption ? STRONG_ENCRYPTION_FLAG : 0));
  };
  GeneralPurposeBit.prototype.parse = function(buf, offset) {
    var flag = zipUtil.getShortBytesValue(buf, offset);
    var gbp = new GeneralPurposeBit();
    gbp.useDataDescriptor((flag & DATA_DESCRIPTOR_FLAG) !== 0);
    gbp.useUTF8ForNames((flag & UFT8_NAMES_FLAG) !== 0);
    gbp.useStrongEncryption((flag & STRONG_ENCRYPTION_FLAG) !== 0);
    gbp.useEncryption((flag & ENCRYPTION_FLAG) !== 0);
    gbp.setSlidingDictionarySize((flag & SLIDING_DICTIONARY_SIZE_FLAG) !== 0 ? 8192 : 4096);
    gbp.setNumberOfShannonFanoTrees((flag & NUMBER_OF_SHANNON_FANO_TREES_FLAG) !== 0 ? 3 : 2);
    return gbp;
  };
  GeneralPurposeBit.prototype.setNumberOfShannonFanoTrees = function(n) {
    this.numberOfShannonFanoTrees = n;
  };
  GeneralPurposeBit.prototype.getNumberOfShannonFanoTrees = function() {
    return this.numberOfShannonFanoTrees;
  };
  GeneralPurposeBit.prototype.setSlidingDictionarySize = function(n) {
    this.slidingDictionarySize = n;
  };
  GeneralPurposeBit.prototype.getSlidingDictionarySize = function() {
    return this.slidingDictionarySize;
  };
  GeneralPurposeBit.prototype.useDataDescriptor = function(b) {
    this.descriptor = b;
  };
  GeneralPurposeBit.prototype.usesDataDescriptor = function() {
    return this.descriptor;
  };
  GeneralPurposeBit.prototype.useEncryption = function(b) {
    this.encryption = b;
  };
  GeneralPurposeBit.prototype.usesEncryption = function() {
    return this.encryption;
  };
  GeneralPurposeBit.prototype.useStrongEncryption = function(b) {
    this.strongEncryption = b;
  };
  GeneralPurposeBit.prototype.usesStrongEncryption = function() {
    return this.strongEncryption;
  };
  GeneralPurposeBit.prototype.useUTF8ForNames = function(b) {
    this.utf8 = b;
  };
  GeneralPurposeBit.prototype.usesUTF8ForNames = function() {
    return this.utf8;
  };
});

// ../../node_modules/.pnpm/compress-commons@3.0.0/node_modules/compress-commons/lib/archivers/zip/unix-stat.js
var require_unix_stat = __commonJS((exports2, module3) => {
  module3.exports = {
    PERM_MASK: 4095,
    FILE_TYPE_FLAG: 61440,
    LINK_FLAG: 40960,
    FILE_FLAG: 32768,
    DIR_FLAG: 16384,
    DEFAULT_LINK_PERM: 511,
    DEFAULT_DIR_PERM: 493,
    DEFAULT_FILE_PERM: 420
  };
});

// ../../node_modules/.pnpm/compress-commons@3.0.0/node_modules/compress-commons/lib/archivers/zip/constants.js
var require_constants5 = __commonJS((exports2, module3) => {
  module3.exports = {
    WORD: 4,
    DWORD: 8,
    EMPTY: Buffer.alloc(0),
    SHORT: 2,
    SHORT_MASK: 65535,
    SHORT_SHIFT: 16,
    SHORT_ZERO: Buffer.from(Array(2)),
    LONG: 4,
    LONG_ZERO: Buffer.from(Array(4)),
    MIN_VERSION_INITIAL: 10,
    MIN_VERSION_DATA_DESCRIPTOR: 20,
    MIN_VERSION_ZIP64: 45,
    VERSION_MADEBY: 45,
    METHOD_STORED: 0,
    METHOD_DEFLATED: 8,
    PLATFORM_UNIX: 3,
    PLATFORM_FAT: 0,
    SIG_LFH: 67324752,
    SIG_DD: 134695760,
    SIG_CFH: 33639248,
    SIG_EOCD: 101010256,
    SIG_ZIP64_EOCD: 101075792,
    SIG_ZIP64_EOCD_LOC: 117853008,
    ZIP64_MAGIC_SHORT: 65535,
    ZIP64_MAGIC: 4294967295,
    ZIP64_EXTRA_ID: 1,
    ZLIB_NO_COMPRESSION: 0,
    ZLIB_BEST_SPEED: 1,
    ZLIB_BEST_COMPRESSION: 9,
    ZLIB_DEFAULT_COMPRESSION: -1,
    MODE_MASK: 4095,
    DEFAULT_FILE_MODE: 33188,
    DEFAULT_DIR_MODE: 16877,
    EXT_FILE_ATTR_DIR: 1106051088,
    EXT_FILE_ATTR_FILE: 2175008800,
    S_IFMT: 61440,
    S_IFIFO: 4096,
    S_IFCHR: 8192,
    S_IFDIR: 16384,
    S_IFBLK: 24576,
    S_IFREG: 32768,
    S_IFLNK: 40960,
    S_IFSOCK: 49152,
    S_DOS_A: 32,
    S_DOS_D: 16,
    S_DOS_V: 8,
    S_DOS_S: 4,
    S_DOS_H: 2,
    S_DOS_R: 1
  };
});

// ../../node_modules/.pnpm/compress-commons@3.0.0/node_modules/compress-commons/lib/archivers/zip/zip-archive-entry.js
var require_zip_archive_entry = __commonJS((exports2, module3) => {
  var inherits = require("util").inherits;
  var normalizePath = require_normalize_path();
  var ArchiveEntry = require_archive_entry();
  var GeneralPurposeBit = require_general_purpose_bit();
  var UnixStat = require_unix_stat();
  var constants = require_constants5();
  var zipUtil = require_util6();
  var ZipArchiveEntry = module3.exports = function(name) {
    if (!(this instanceof ZipArchiveEntry)) {
      return new ZipArchiveEntry(name);
    }
    ArchiveEntry.call(this);
    this.platform = constants.PLATFORM_FAT;
    this.method = -1;
    this.name = null;
    this.size = 0;
    this.csize = 0;
    this.gpb = new GeneralPurposeBit();
    this.crc = 0;
    this.time = -1;
    this.minver = constants.MIN_VERSION_INITIAL;
    this.mode = -1;
    this.extra = null;
    this.exattr = 0;
    this.inattr = 0;
    this.comment = null;
    if (name) {
      this.setName(name);
    }
  };
  inherits(ZipArchiveEntry, ArchiveEntry);
  ZipArchiveEntry.prototype.getCentralDirectoryExtra = function() {
    return this.getExtra();
  };
  ZipArchiveEntry.prototype.getComment = function() {
    return this.comment !== null ? this.comment : "";
  };
  ZipArchiveEntry.prototype.getCompressedSize = function() {
    return this.csize;
  };
  ZipArchiveEntry.prototype.getCrc = function() {
    return this.crc;
  };
  ZipArchiveEntry.prototype.getExternalAttributes = function() {
    return this.exattr;
  };
  ZipArchiveEntry.prototype.getExtra = function() {
    return this.extra !== null ? this.extra : constants.EMPTY;
  };
  ZipArchiveEntry.prototype.getGeneralPurposeBit = function() {
    return this.gpb;
  };
  ZipArchiveEntry.prototype.getInternalAttributes = function() {
    return this.inattr;
  };
  ZipArchiveEntry.prototype.getLastModifiedDate = function() {
    return this.getTime();
  };
  ZipArchiveEntry.prototype.getLocalFileDataExtra = function() {
    return this.getExtra();
  };
  ZipArchiveEntry.prototype.getMethod = function() {
    return this.method;
  };
  ZipArchiveEntry.prototype.getName = function() {
    return this.name;
  };
  ZipArchiveEntry.prototype.getPlatform = function() {
    return this.platform;
  };
  ZipArchiveEntry.prototype.getSize = function() {
    return this.size;
  };
  ZipArchiveEntry.prototype.getTime = function() {
    return this.time !== -1 ? zipUtil.dosToDate(this.time) : -1;
  };
  ZipArchiveEntry.prototype.getTimeDos = function() {
    return this.time !== -1 ? this.time : 0;
  };
  ZipArchiveEntry.prototype.getUnixMode = function() {
    return this.platform !== constants.PLATFORM_UNIX ? 0 : this.getExternalAttributes() >> constants.SHORT_SHIFT & constants.SHORT_MASK;
  };
  ZipArchiveEntry.prototype.getVersionNeededToExtract = function() {
    return this.minver;
  };
  ZipArchiveEntry.prototype.setComment = function(comment) {
    if (Buffer.byteLength(comment) !== comment.length) {
      this.getGeneralPurposeBit().useUTF8ForNames(true);
    }
    this.comment = comment;
  };
  ZipArchiveEntry.prototype.setCompressedSize = function(size) {
    if (size < 0) {
      throw new Error("invalid entry compressed size");
    }
    this.csize = size;
  };
  ZipArchiveEntry.prototype.setCrc = function(crc) {
    if (crc < 0) {
      throw new Error("invalid entry crc32");
    }
    this.crc = crc;
  };
  ZipArchiveEntry.prototype.setExternalAttributes = function(attr) {
    this.exattr = attr >>> 0;
  };
  ZipArchiveEntry.prototype.setExtra = function(extra) {
    this.extra = extra;
  };
  ZipArchiveEntry.prototype.setGeneralPurposeBit = function(gpb) {
    if (!(gpb instanceof GeneralPurposeBit)) {
      throw new Error("invalid entry GeneralPurposeBit");
    }
    this.gpb = gpb;
  };
  ZipArchiveEntry.prototype.setInternalAttributes = function(attr) {
    this.inattr = attr;
  };
  ZipArchiveEntry.prototype.setMethod = function(method) {
    if (method < 0) {
      throw new Error("invalid entry compression method");
    }
    this.method = method;
  };
  ZipArchiveEntry.prototype.setName = function(name) {
    name = normalizePath(name, false).replace(/^\w+:/, "").replace(/^(\.\.\/|\/)+/, "");
    if (Buffer.byteLength(name) !== name.length) {
      this.getGeneralPurposeBit().useUTF8ForNames(true);
    }
    this.name = name;
  };
  ZipArchiveEntry.prototype.setPlatform = function(platform) {
    this.platform = platform;
  };
  ZipArchiveEntry.prototype.setSize = function(size) {
    if (size < 0) {
      throw new Error("invalid entry size");
    }
    this.size = size;
  };
  ZipArchiveEntry.prototype.setTime = function(time, forceLocalTime) {
    if (!(time instanceof Date)) {
      throw new Error("invalid entry time");
    }
    this.time = zipUtil.dateToDos(time, forceLocalTime);
  };
  ZipArchiveEntry.prototype.setUnixMode = function(mode) {
    mode |= this.isDirectory() ? constants.S_IFDIR : constants.S_IFREG;
    var extattr = 0;
    extattr |= mode << constants.SHORT_SHIFT | (this.isDirectory() ? constants.S_DOS_D : constants.S_DOS_A);
    this.setExternalAttributes(extattr);
    this.mode = mode & constants.MODE_MASK;
    this.platform = constants.PLATFORM_UNIX;
  };
  ZipArchiveEntry.prototype.setVersionNeededToExtract = function(minver) {
    this.minver = minver;
  };
  ZipArchiveEntry.prototype.isDirectory = function() {
    return this.getName().slice(-1) === "/";
  };
  ZipArchiveEntry.prototype.isUnixSymlink = function() {
    return (this.getUnixMode() & UnixStat.FILE_TYPE_FLAG) === UnixStat.LINK_FLAG;
  };
  ZipArchiveEntry.prototype.isZip64 = function() {
    return this.csize > constants.ZIP64_MAGIC || this.size > constants.ZIP64_MAGIC;
  };
});

// ../../node_modules/.pnpm/compress-commons@3.0.0/node_modules/compress-commons/lib/util/index.js
var require_util7 = __commonJS((exports2, module3) => {
  var Stream = require("stream").Stream;
  var PassThrough = require_readable().PassThrough;
  var util4 = module3.exports = {};
  util4.isStream = function(source) {
    return source instanceof Stream;
  };
  util4.normalizeInputSource = function(source) {
    if (source === null) {
      return Buffer.alloc(0);
    } else if (typeof source === "string") {
      return Buffer.from(source);
    } else if (util4.isStream(source) && !source._readableState) {
      var normalized = new PassThrough();
      source.pipe(normalized);
      return normalized;
    }
    return source;
  };
});

// ../../node_modules/.pnpm/compress-commons@3.0.0/node_modules/compress-commons/lib/archivers/archive-output-stream.js
var require_archive_output_stream = __commonJS((exports2, module3) => {
  var inherits = require("util").inherits;
  var Transform = require_readable().Transform;
  var ArchiveEntry = require_archive_entry();
  var util4 = require_util7();
  var ArchiveOutputStream = module3.exports = function(options) {
    if (!(this instanceof ArchiveOutputStream)) {
      return new ArchiveOutputStream(options);
    }
    Transform.call(this, options);
    this.offset = 0;
    this._archive = {
      finish: false,
      finished: false,
      processing: false
    };
  };
  inherits(ArchiveOutputStream, Transform);
  ArchiveOutputStream.prototype._appendBuffer = function(zae, source, callback) {
  };
  ArchiveOutputStream.prototype._appendStream = function(zae, source, callback) {
  };
  ArchiveOutputStream.prototype._emitErrorCallback = function(err) {
    if (err) {
      this.emit("error", err);
    }
  };
  ArchiveOutputStream.prototype._finish = function(ae) {
  };
  ArchiveOutputStream.prototype._normalizeEntry = function(ae) {
  };
  ArchiveOutputStream.prototype._transform = function(chunk, encoding, callback) {
    callback(null, chunk);
  };
  ArchiveOutputStream.prototype.entry = function(ae, source, callback) {
    source = source || null;
    if (typeof callback !== "function") {
      callback = this._emitErrorCallback.bind(this);
    }
    if (!(ae instanceof ArchiveEntry)) {
      callback(new Error("not a valid instance of ArchiveEntry"));
      return;
    }
    if (this._archive.finish || this._archive.finished) {
      callback(new Error("unacceptable entry after finish"));
      return;
    }
    if (this._archive.processing) {
      callback(new Error("already processing an entry"));
      return;
    }
    this._archive.processing = true;
    this._normalizeEntry(ae);
    this._entry = ae;
    source = util4.normalizeInputSource(source);
    if (Buffer.isBuffer(source)) {
      this._appendBuffer(ae, source, callback);
    } else if (util4.isStream(source)) {
      this._appendStream(ae, source, callback);
    } else {
      this._archive.processing = false;
      callback(new Error("input source must be valid Stream or Buffer instance"));
      return;
    }
    return this;
  };
  ArchiveOutputStream.prototype.finish = function() {
    if (this._archive.processing) {
      this._archive.finish = true;
      return;
    }
    this._finish();
  };
  ArchiveOutputStream.prototype.getBytesWritten = function() {
    return this.offset;
  };
  ArchiveOutputStream.prototype.write = function(chunk, cb) {
    if (chunk) {
      this.offset += chunk.length;
    }
    return Transform.prototype.write.call(this, chunk, cb);
  };
});

// ../../node_modules/.pnpm/buffer-crc32@0.2.13/node_modules/buffer-crc32/index.js
var require_buffer_crc32 = __commonJS((exports2, module3) => {
  var Buffer2 = require("buffer").Buffer;
  var CRC_TABLE = [
    0,
    1996959894,
    3993919788,
    2567524794,
    124634137,
    1886057615,
    3915621685,
    2657392035,
    249268274,
    2044508324,
    3772115230,
    2547177864,
    162941995,
    2125561021,
    3887607047,
    2428444049,
    498536548,
    1789927666,
    4089016648,
    2227061214,
    450548861,
    1843258603,
    4107580753,
    2211677639,
    325883990,
    1684777152,
    4251122042,
    2321926636,
    335633487,
    1661365465,
    4195302755,
    2366115317,
    997073096,
    1281953886,
    3579855332,
    2724688242,
    1006888145,
    1258607687,
    3524101629,
    2768942443,
    901097722,
    1119000684,
    3686517206,
    2898065728,
    853044451,
    1172266101,
    3705015759,
    2882616665,
    651767980,
    1373503546,
    3369554304,
    3218104598,
    565507253,
    1454621731,
    3485111705,
    3099436303,
    671266974,
    1594198024,
    3322730930,
    2970347812,
    795835527,
    1483230225,
    3244367275,
    3060149565,
    1994146192,
    31158534,
    2563907772,
    4023717930,
    1907459465,
    112637215,
    2680153253,
    3904427059,
    2013776290,
    251722036,
    2517215374,
    3775830040,
    2137656763,
    141376813,
    2439277719,
    3865271297,
    1802195444,
    476864866,
    2238001368,
    4066508878,
    1812370925,
    453092731,
    2181625025,
    4111451223,
    1706088902,
    314042704,
    2344532202,
    4240017532,
    1658658271,
    366619977,
    2362670323,
    4224994405,
    1303535960,
    984961486,
    2747007092,
    3569037538,
    1256170817,
    1037604311,
    2765210733,
    3554079995,
    1131014506,
    879679996,
    2909243462,
    3663771856,
    1141124467,
    855842277,
    2852801631,
    3708648649,
    1342533948,
    654459306,
    3188396048,
    3373015174,
    1466479909,
    544179635,
    3110523913,
    3462522015,
    1591671054,
    702138776,
    2966460450,
    3352799412,
    1504918807,
    783551873,
    3082640443,
    3233442989,
    3988292384,
    2596254646,
    62317068,
    1957810842,
    3939845945,
    2647816111,
    81470997,
    1943803523,
    3814918930,
    2489596804,
    225274430,
    2053790376,
    3826175755,
    2466906013,
    167816743,
    2097651377,
    4027552580,
    2265490386,
    503444072,
    1762050814,
    4150417245,
    2154129355,
    426522225,
    1852507879,
    4275313526,
    2312317920,
    282753626,
    1742555852,
    4189708143,
    2394877945,
    397917763,
    1622183637,
    3604390888,
    2714866558,
    953729732,
    1340076626,
    3518719985,
    2797360999,
    1068828381,
    1219638859,
    3624741850,
    2936675148,
    906185462,
    1090812512,
    3747672003,
    2825379669,
    829329135,
    1181335161,
    3412177804,
    3160834842,
    628085408,
    1382605366,
    3423369109,
    3138078467,
    570562233,
    1426400815,
    3317316542,
    2998733608,
    733239954,
    1555261956,
    3268935591,
    3050360625,
    752459403,
    1541320221,
    2607071920,
    3965973030,
    1969922972,
    40735498,
    2617837225,
    3943577151,
    1913087877,
    83908371,
    2512341634,
    3803740692,
    2075208622,
    213261112,
    2463272603,
    3855990285,
    2094854071,
    198958881,
    2262029012,
    4057260610,
    1759359992,
    534414190,
    2176718541,
    4139329115,
    1873836001,
    414664567,
    2282248934,
    4279200368,
    1711684554,
    285281116,
    2405801727,
    4167216745,
    1634467795,
    376229701,
    2685067896,
    3608007406,
    1308918612,
    956543938,
    2808555105,
    3495958263,
    1231636301,
    1047427035,
    2932959818,
    3654703836,
    1088359270,
    936918e3,
    2847714899,
    3736837829,
    1202900863,
    817233897,
    3183342108,
    3401237130,
    1404277552,
    615818150,
    3134207493,
    3453421203,
    1423857449,
    601450431,
    3009837614,
    3294710456,
    1567103746,
    711928724,
    3020668471,
    3272380065,
    1510334235,
    755167117
  ];
  if (typeof Int32Array !== "undefined") {
    CRC_TABLE = new Int32Array(CRC_TABLE);
  }
  function ensureBuffer(input) {
    if (Buffer2.isBuffer(input)) {
      return input;
    }
    var hasNewBufferAPI = typeof Buffer2.alloc === "function" && typeof Buffer2.from === "function";
    if (typeof input === "number") {
      return hasNewBufferAPI ? Buffer2.alloc(input) : new Buffer2(input);
    } else if (typeof input === "string") {
      return hasNewBufferAPI ? Buffer2.from(input) : new Buffer2(input);
    } else {
      throw new Error("input must be buffer, number, or string, received " + typeof input);
    }
  }
  function bufferizeInt(num) {
    var tmp = ensureBuffer(4);
    tmp.writeInt32BE(num, 0);
    return tmp;
  }
  function _crc32(buf, previous) {
    buf = ensureBuffer(buf);
    if (Buffer2.isBuffer(previous)) {
      previous = previous.readUInt32BE(0);
    }
    var crc = ~~previous ^ -1;
    for (var n = 0; n < buf.length; n++) {
      crc = CRC_TABLE[(crc ^ buf[n]) & 255] ^ crc >>> 8;
    }
    return crc ^ -1;
  }
  function crc32() {
    return bufferizeInt(_crc32.apply(null, arguments));
  }
  crc32.signed = function() {
    return _crc32.apply(null, arguments);
  };
  crc32.unsigned = function() {
    return _crc32.apply(null, arguments) >>> 0;
  };
  module3.exports = crc32;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/es6/create_buffer.js
var require_create_buffer = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _buffer = require("buffer");
  var createBuffer = _buffer.Buffer.from && _buffer.Buffer.alloc && _buffer.Buffer.allocUnsafe && _buffer.Buffer.allocUnsafeSlow ? _buffer.Buffer.from : function(val) {
    return new _buffer.Buffer(val);
  };
  exports2.default = createBuffer;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/es6/define_crc.js
var require_define_crc = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.default = function(model, calc) {
    var fn = function fn2(buf, previous) {
      return calc(buf, previous) >>> 0;
    };
    fn.signed = calc;
    fn.unsigned = fn;
    fn.model = model;
    return fn;
  };
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/es6/crc1.js
var require_crc1 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _buffer = require("buffer");
  var _create_buffer = require_create_buffer();
  var _create_buffer2 = _interopRequireDefault(_create_buffer);
  var _define_crc = require_define_crc();
  var _define_crc2 = _interopRequireDefault(_define_crc);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var crc1 = (0, _define_crc2.default)("crc1", function(buf, previous) {
    if (!_buffer.Buffer.isBuffer(buf))
      buf = (0, _create_buffer2.default)(buf);
    var crc = ~~previous;
    var accum = 0;
    for (var index = 0; index < buf.length; index++) {
      var byte = buf[index];
      accum += byte;
    }
    crc += accum % 256;
    return crc % 256;
  });
  exports2.default = crc1;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/crc1.js
var require_crc12 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = require_crc1().default;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/es6/crc8.js
var require_crc8 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _buffer = require("buffer");
  var _create_buffer = require_create_buffer();
  var _create_buffer2 = _interopRequireDefault(_create_buffer);
  var _define_crc = require_define_crc();
  var _define_crc2 = _interopRequireDefault(_define_crc);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var TABLE = [0, 7, 14, 9, 28, 27, 18, 21, 56, 63, 54, 49, 36, 35, 42, 45, 112, 119, 126, 121, 108, 107, 98, 101, 72, 79, 70, 65, 84, 83, 90, 93, 224, 231, 238, 233, 252, 251, 242, 245, 216, 223, 214, 209, 196, 195, 202, 205, 144, 151, 158, 153, 140, 139, 130, 133, 168, 175, 166, 161, 180, 179, 186, 189, 199, 192, 201, 206, 219, 220, 213, 210, 255, 248, 241, 246, 227, 228, 237, 234, 183, 176, 185, 190, 171, 172, 165, 162, 143, 136, 129, 134, 147, 148, 157, 154, 39, 32, 41, 46, 59, 60, 53, 50, 31, 24, 17, 22, 3, 4, 13, 10, 87, 80, 89, 94, 75, 76, 69, 66, 111, 104, 97, 102, 115, 116, 125, 122, 137, 142, 135, 128, 149, 146, 155, 156, 177, 182, 191, 184, 173, 170, 163, 164, 249, 254, 247, 240, 229, 226, 235, 236, 193, 198, 207, 200, 221, 218, 211, 212, 105, 110, 103, 96, 117, 114, 123, 124, 81, 86, 95, 88, 77, 74, 67, 68, 25, 30, 23, 16, 5, 2, 11, 12, 33, 38, 47, 40, 61, 58, 51, 52, 78, 73, 64, 71, 82, 85, 92, 91, 118, 113, 120, 127, 106, 109, 100, 99, 62, 57, 48, 55, 34, 37, 44, 43, 6, 1, 8, 15, 26, 29, 20, 19, 174, 169, 160, 167, 178, 181, 188, 187, 150, 145, 152, 159, 138, 141, 132, 131, 222, 217, 208, 215, 194, 197, 204, 203, 230, 225, 232, 239, 250, 253, 244, 243];
  if (typeof Int32Array !== "undefined")
    TABLE = new Int32Array(TABLE);
  var crc8 = (0, _define_crc2.default)("crc-8", function(buf, previous) {
    if (!_buffer.Buffer.isBuffer(buf))
      buf = (0, _create_buffer2.default)(buf);
    var crc = ~~previous;
    for (var index = 0; index < buf.length; index++) {
      var byte = buf[index];
      crc = TABLE[(crc ^ byte) & 255] & 255;
    }
    return crc;
  });
  exports2.default = crc8;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/crc8.js
var require_crc82 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = require_crc8().default;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/es6/crc81wire.js
var require_crc81wire = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _buffer = require("buffer");
  var _create_buffer = require_create_buffer();
  var _create_buffer2 = _interopRequireDefault(_create_buffer);
  var _define_crc = require_define_crc();
  var _define_crc2 = _interopRequireDefault(_define_crc);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var TABLE = [0, 94, 188, 226, 97, 63, 221, 131, 194, 156, 126, 32, 163, 253, 31, 65, 157, 195, 33, 127, 252, 162, 64, 30, 95, 1, 227, 189, 62, 96, 130, 220, 35, 125, 159, 193, 66, 28, 254, 160, 225, 191, 93, 3, 128, 222, 60, 98, 190, 224, 2, 92, 223, 129, 99, 61, 124, 34, 192, 158, 29, 67, 161, 255, 70, 24, 250, 164, 39, 121, 155, 197, 132, 218, 56, 102, 229, 187, 89, 7, 219, 133, 103, 57, 186, 228, 6, 88, 25, 71, 165, 251, 120, 38, 196, 154, 101, 59, 217, 135, 4, 90, 184, 230, 167, 249, 27, 69, 198, 152, 122, 36, 248, 166, 68, 26, 153, 199, 37, 123, 58, 100, 134, 216, 91, 5, 231, 185, 140, 210, 48, 110, 237, 179, 81, 15, 78, 16, 242, 172, 47, 113, 147, 205, 17, 79, 173, 243, 112, 46, 204, 146, 211, 141, 111, 49, 178, 236, 14, 80, 175, 241, 19, 77, 206, 144, 114, 44, 109, 51, 209, 143, 12, 82, 176, 238, 50, 108, 142, 208, 83, 13, 239, 177, 240, 174, 76, 18, 145, 207, 45, 115, 202, 148, 118, 40, 171, 245, 23, 73, 8, 86, 180, 234, 105, 55, 213, 139, 87, 9, 235, 181, 54, 104, 138, 212, 149, 203, 41, 119, 244, 170, 72, 22, 233, 183, 85, 11, 136, 214, 52, 106, 43, 117, 151, 201, 74, 20, 246, 168, 116, 42, 200, 150, 21, 75, 169, 247, 182, 232, 10, 84, 215, 137, 107, 53];
  if (typeof Int32Array !== "undefined")
    TABLE = new Int32Array(TABLE);
  var crc81wire = (0, _define_crc2.default)("dallas-1-wire", function(buf, previous) {
    if (!_buffer.Buffer.isBuffer(buf))
      buf = (0, _create_buffer2.default)(buf);
    var crc = ~~previous;
    for (var index = 0; index < buf.length; index++) {
      var byte = buf[index];
      crc = TABLE[(crc ^ byte) & 255] & 255;
    }
    return crc;
  });
  exports2.default = crc81wire;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/crc8_1wire.js
var require_crc8_1wire = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = require_crc81wire().default;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/es6/crc16.js
var require_crc16 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _buffer = require("buffer");
  var _create_buffer = require_create_buffer();
  var _create_buffer2 = _interopRequireDefault(_create_buffer);
  var _define_crc = require_define_crc();
  var _define_crc2 = _interopRequireDefault(_define_crc);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var TABLE = [0, 49345, 49537, 320, 49921, 960, 640, 49729, 50689, 1728, 1920, 51009, 1280, 50625, 50305, 1088, 52225, 3264, 3456, 52545, 3840, 53185, 52865, 3648, 2560, 51905, 52097, 2880, 51457, 2496, 2176, 51265, 55297, 6336, 6528, 55617, 6912, 56257, 55937, 6720, 7680, 57025, 57217, 8e3, 56577, 7616, 7296, 56385, 5120, 54465, 54657, 5440, 55041, 6080, 5760, 54849, 53761, 4800, 4992, 54081, 4352, 53697, 53377, 4160, 61441, 12480, 12672, 61761, 13056, 62401, 62081, 12864, 13824, 63169, 63361, 14144, 62721, 13760, 13440, 62529, 15360, 64705, 64897, 15680, 65281, 16320, 16e3, 65089, 64001, 15040, 15232, 64321, 14592, 63937, 63617, 14400, 10240, 59585, 59777, 10560, 60161, 11200, 10880, 59969, 60929, 11968, 12160, 61249, 11520, 60865, 60545, 11328, 58369, 9408, 9600, 58689, 9984, 59329, 59009, 9792, 8704, 58049, 58241, 9024, 57601, 8640, 8320, 57409, 40961, 24768, 24960, 41281, 25344, 41921, 41601, 25152, 26112, 42689, 42881, 26432, 42241, 26048, 25728, 42049, 27648, 44225, 44417, 27968, 44801, 28608, 28288, 44609, 43521, 27328, 27520, 43841, 26880, 43457, 43137, 26688, 30720, 47297, 47489, 31040, 47873, 31680, 31360, 47681, 48641, 32448, 32640, 48961, 32e3, 48577, 48257, 31808, 46081, 29888, 30080, 46401, 30464, 47041, 46721, 30272, 29184, 45761, 45953, 29504, 45313, 29120, 28800, 45121, 20480, 37057, 37249, 20800, 37633, 21440, 21120, 37441, 38401, 22208, 22400, 38721, 21760, 38337, 38017, 21568, 39937, 23744, 23936, 40257, 24320, 40897, 40577, 24128, 23040, 39617, 39809, 23360, 39169, 22976, 22656, 38977, 34817, 18624, 18816, 35137, 19200, 35777, 35457, 19008, 19968, 36545, 36737, 20288, 36097, 19904, 19584, 35905, 17408, 33985, 34177, 17728, 34561, 18368, 18048, 34369, 33281, 17088, 17280, 33601, 16640, 33217, 32897, 16448];
  if (typeof Int32Array !== "undefined")
    TABLE = new Int32Array(TABLE);
  var crc16 = (0, _define_crc2.default)("crc-16", function(buf, previous) {
    if (!_buffer.Buffer.isBuffer(buf))
      buf = (0, _create_buffer2.default)(buf);
    var crc = ~~previous;
    for (var index = 0; index < buf.length; index++) {
      var byte = buf[index];
      crc = (TABLE[(crc ^ byte) & 255] ^ crc >> 8) & 65535;
    }
    return crc;
  });
  exports2.default = crc16;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/crc16.js
var require_crc162 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = require_crc16().default;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/es6/crc16ccitt.js
var require_crc16ccitt = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _buffer = require("buffer");
  var _create_buffer = require_create_buffer();
  var _create_buffer2 = _interopRequireDefault(_create_buffer);
  var _define_crc = require_define_crc();
  var _define_crc2 = _interopRequireDefault(_define_crc);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var TABLE = [0, 4129, 8258, 12387, 16516, 20645, 24774, 28903, 33032, 37161, 41290, 45419, 49548, 53677, 57806, 61935, 4657, 528, 12915, 8786, 21173, 17044, 29431, 25302, 37689, 33560, 45947, 41818, 54205, 50076, 62463, 58334, 9314, 13379, 1056, 5121, 25830, 29895, 17572, 21637, 42346, 46411, 34088, 38153, 58862, 62927, 50604, 54669, 13907, 9842, 5649, 1584, 30423, 26358, 22165, 18100, 46939, 42874, 38681, 34616, 63455, 59390, 55197, 51132, 18628, 22757, 26758, 30887, 2112, 6241, 10242, 14371, 51660, 55789, 59790, 63919, 35144, 39273, 43274, 47403, 23285, 19156, 31415, 27286, 6769, 2640, 14899, 10770, 56317, 52188, 64447, 60318, 39801, 35672, 47931, 43802, 27814, 31879, 19684, 23749, 11298, 15363, 3168, 7233, 60846, 64911, 52716, 56781, 44330, 48395, 36200, 40265, 32407, 28342, 24277, 20212, 15891, 11826, 7761, 3696, 65439, 61374, 57309, 53244, 48923, 44858, 40793, 36728, 37256, 33193, 45514, 41451, 53516, 49453, 61774, 57711, 4224, 161, 12482, 8419, 20484, 16421, 28742, 24679, 33721, 37784, 41979, 46042, 49981, 54044, 58239, 62302, 689, 4752, 8947, 13010, 16949, 21012, 25207, 29270, 46570, 42443, 38312, 34185, 62830, 58703, 54572, 50445, 13538, 9411, 5280, 1153, 29798, 25671, 21540, 17413, 42971, 47098, 34713, 38840, 59231, 63358, 50973, 55100, 9939, 14066, 1681, 5808, 26199, 30326, 17941, 22068, 55628, 51565, 63758, 59695, 39368, 35305, 47498, 43435, 22596, 18533, 30726, 26663, 6336, 2273, 14466, 10403, 52093, 56156, 60223, 64286, 35833, 39896, 43963, 48026, 19061, 23124, 27191, 31254, 2801, 6864, 10931, 14994, 64814, 60687, 56684, 52557, 48554, 44427, 40424, 36297, 31782, 27655, 23652, 19525, 15522, 11395, 7392, 3265, 61215, 65342, 53085, 57212, 44955, 49082, 36825, 40952, 28183, 32310, 20053, 24180, 11923, 16050, 3793, 7920];
  if (typeof Int32Array !== "undefined")
    TABLE = new Int32Array(TABLE);
  var crc16ccitt = (0, _define_crc2.default)("ccitt", function(buf, previous) {
    if (!_buffer.Buffer.isBuffer(buf))
      buf = (0, _create_buffer2.default)(buf);
    var crc = typeof previous !== "undefined" ? ~~previous : 65535;
    for (var index = 0; index < buf.length; index++) {
      var byte = buf[index];
      crc = (TABLE[(crc >> 8 ^ byte) & 255] ^ crc << 8) & 65535;
    }
    return crc;
  });
  exports2.default = crc16ccitt;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/crc16_ccitt.js
var require_crc16_ccitt = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = require_crc16ccitt().default;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/es6/crc16modbus.js
var require_crc16modbus = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _buffer = require("buffer");
  var _create_buffer = require_create_buffer();
  var _create_buffer2 = _interopRequireDefault(_create_buffer);
  var _define_crc = require_define_crc();
  var _define_crc2 = _interopRequireDefault(_define_crc);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var TABLE = [0, 49345, 49537, 320, 49921, 960, 640, 49729, 50689, 1728, 1920, 51009, 1280, 50625, 50305, 1088, 52225, 3264, 3456, 52545, 3840, 53185, 52865, 3648, 2560, 51905, 52097, 2880, 51457, 2496, 2176, 51265, 55297, 6336, 6528, 55617, 6912, 56257, 55937, 6720, 7680, 57025, 57217, 8e3, 56577, 7616, 7296, 56385, 5120, 54465, 54657, 5440, 55041, 6080, 5760, 54849, 53761, 4800, 4992, 54081, 4352, 53697, 53377, 4160, 61441, 12480, 12672, 61761, 13056, 62401, 62081, 12864, 13824, 63169, 63361, 14144, 62721, 13760, 13440, 62529, 15360, 64705, 64897, 15680, 65281, 16320, 16e3, 65089, 64001, 15040, 15232, 64321, 14592, 63937, 63617, 14400, 10240, 59585, 59777, 10560, 60161, 11200, 10880, 59969, 60929, 11968, 12160, 61249, 11520, 60865, 60545, 11328, 58369, 9408, 9600, 58689, 9984, 59329, 59009, 9792, 8704, 58049, 58241, 9024, 57601, 8640, 8320, 57409, 40961, 24768, 24960, 41281, 25344, 41921, 41601, 25152, 26112, 42689, 42881, 26432, 42241, 26048, 25728, 42049, 27648, 44225, 44417, 27968, 44801, 28608, 28288, 44609, 43521, 27328, 27520, 43841, 26880, 43457, 43137, 26688, 30720, 47297, 47489, 31040, 47873, 31680, 31360, 47681, 48641, 32448, 32640, 48961, 32e3, 48577, 48257, 31808, 46081, 29888, 30080, 46401, 30464, 47041, 46721, 30272, 29184, 45761, 45953, 29504, 45313, 29120, 28800, 45121, 20480, 37057, 37249, 20800, 37633, 21440, 21120, 37441, 38401, 22208, 22400, 38721, 21760, 38337, 38017, 21568, 39937, 23744, 23936, 40257, 24320, 40897, 40577, 24128, 23040, 39617, 39809, 23360, 39169, 22976, 22656, 38977, 34817, 18624, 18816, 35137, 19200, 35777, 35457, 19008, 19968, 36545, 36737, 20288, 36097, 19904, 19584, 35905, 17408, 33985, 34177, 17728, 34561, 18368, 18048, 34369, 33281, 17088, 17280, 33601, 16640, 33217, 32897, 16448];
  if (typeof Int32Array !== "undefined")
    TABLE = new Int32Array(TABLE);
  var crc16modbus = (0, _define_crc2.default)("crc-16-modbus", function(buf, previous) {
    if (!_buffer.Buffer.isBuffer(buf))
      buf = (0, _create_buffer2.default)(buf);
    var crc = typeof previous !== "undefined" ? ~~previous : 65535;
    for (var index = 0; index < buf.length; index++) {
      var byte = buf[index];
      crc = (TABLE[(crc ^ byte) & 255] ^ crc >> 8) & 65535;
    }
    return crc;
  });
  exports2.default = crc16modbus;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/crc16_modbus.js
var require_crc16_modbus = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = require_crc16modbus().default;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/es6/crc16xmodem.js
var require_crc16xmodem = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _buffer = require("buffer");
  var _create_buffer = require_create_buffer();
  var _create_buffer2 = _interopRequireDefault(_create_buffer);
  var _define_crc = require_define_crc();
  var _define_crc2 = _interopRequireDefault(_define_crc);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var crc16xmodem = (0, _define_crc2.default)("xmodem", function(buf, previous) {
    if (!_buffer.Buffer.isBuffer(buf))
      buf = (0, _create_buffer2.default)(buf);
    var crc = typeof previous !== "undefined" ? ~~previous : 0;
    for (var index = 0; index < buf.length; index++) {
      var byte = buf[index];
      var code = crc >>> 8 & 255;
      code ^= byte & 255;
      code ^= code >>> 4;
      crc = crc << 8 & 65535;
      crc ^= code;
      code = code << 5 & 65535;
      crc ^= code;
      code = code << 7 & 65535;
      crc ^= code;
    }
    return crc;
  });
  exports2.default = crc16xmodem;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/crc16_xmodem.js
var require_crc16_xmodem = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = require_crc16xmodem().default;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/es6/crc16kermit.js
var require_crc16kermit = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _buffer = require("buffer");
  var _create_buffer = require_create_buffer();
  var _create_buffer2 = _interopRequireDefault(_create_buffer);
  var _define_crc = require_define_crc();
  var _define_crc2 = _interopRequireDefault(_define_crc);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var TABLE = [0, 4489, 8978, 12955, 17956, 22445, 25910, 29887, 35912, 40385, 44890, 48851, 51820, 56293, 59774, 63735, 4225, 264, 13203, 8730, 22181, 18220, 30135, 25662, 40137, 36160, 49115, 44626, 56045, 52068, 63999, 59510, 8450, 12427, 528, 5017, 26406, 30383, 17460, 21949, 44362, 48323, 36440, 40913, 60270, 64231, 51324, 55797, 12675, 8202, 4753, 792, 30631, 26158, 21685, 17724, 48587, 44098, 40665, 36688, 64495, 60006, 55549, 51572, 16900, 21389, 24854, 28831, 1056, 5545, 10034, 14011, 52812, 57285, 60766, 64727, 34920, 39393, 43898, 47859, 21125, 17164, 29079, 24606, 5281, 1320, 14259, 9786, 57037, 53060, 64991, 60502, 39145, 35168, 48123, 43634, 25350, 29327, 16404, 20893, 9506, 13483, 1584, 6073, 61262, 65223, 52316, 56789, 43370, 47331, 35448, 39921, 29575, 25102, 20629, 16668, 13731, 9258, 5809, 1848, 65487, 60998, 56541, 52564, 47595, 43106, 39673, 35696, 33800, 38273, 42778, 46739, 49708, 54181, 57662, 61623, 2112, 6601, 11090, 15067, 20068, 24557, 28022, 31999, 38025, 34048, 47003, 42514, 53933, 49956, 61887, 57398, 6337, 2376, 15315, 10842, 24293, 20332, 32247, 27774, 42250, 46211, 34328, 38801, 58158, 62119, 49212, 53685, 10562, 14539, 2640, 7129, 28518, 32495, 19572, 24061, 46475, 41986, 38553, 34576, 62383, 57894, 53437, 49460, 14787, 10314, 6865, 2904, 32743, 28270, 23797, 19836, 50700, 55173, 58654, 62615, 32808, 37281, 41786, 45747, 19012, 23501, 26966, 30943, 3168, 7657, 12146, 16123, 54925, 50948, 62879, 58390, 37033, 33056, 46011, 41522, 23237, 19276, 31191, 26718, 7393, 3432, 16371, 11898, 59150, 63111, 50204, 54677, 41258, 45219, 33336, 37809, 27462, 31439, 18516, 23005, 11618, 15595, 3696, 8185, 63375, 58886, 54429, 50452, 45483, 40994, 37561, 33584, 31687, 27214, 22741, 18780, 15843, 11370, 7921, 3960];
  if (typeof Int32Array !== "undefined")
    TABLE = new Int32Array(TABLE);
  var crc16kermit = (0, _define_crc2.default)("kermit", function(buf, previous) {
    if (!_buffer.Buffer.isBuffer(buf))
      buf = (0, _create_buffer2.default)(buf);
    var crc = typeof previous !== "undefined" ? ~~previous : 0;
    for (var index = 0; index < buf.length; index++) {
      var byte = buf[index];
      crc = (TABLE[(crc ^ byte) & 255] ^ crc >> 8) & 65535;
    }
    return crc;
  });
  exports2.default = crc16kermit;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/crc16_kermit.js
var require_crc16_kermit = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = require_crc16kermit().default;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/es6/crc24.js
var require_crc24 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _buffer = require("buffer");
  var _create_buffer = require_create_buffer();
  var _create_buffer2 = _interopRequireDefault(_create_buffer);
  var _define_crc = require_define_crc();
  var _define_crc2 = _interopRequireDefault(_define_crc);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var TABLE = [0, 8801531, 9098509, 825846, 9692897, 1419802, 1651692, 10452759, 10584377, 2608578, 2839604, 11344079, 3303384, 11807523, 12104405, 4128302, 12930697, 4391538, 5217156, 13227903, 5679208, 13690003, 14450021, 5910942, 6606768, 14844747, 15604413, 6837830, 16197969, 7431594, 8256604, 16494759, 840169, 9084178, 8783076, 18463, 10434312, 1670131, 1434117, 9678590, 11358416, 2825259, 2590173, 10602790, 4109873, 12122826, 11821884, 3289031, 13213536, 5231515, 4409965, 12912278, 5929345, 14431610, 13675660, 5693559, 6823513, 15618722, 14863188, 6588335, 16513208, 8238147, 7417269, 16212302, 1680338, 10481449, 9664223, 1391140, 9061683, 788936, 36926, 8838341, 12067563, 4091408, 3340262, 11844381, 2868234, 11372785, 10555655, 2579964, 14478683, 5939616, 5650518, 13661357, 5180346, 13190977, 12967607, 4428364, 8219746, 16457881, 16234863, 7468436, 15633027, 6866552, 6578062, 14816117, 1405499, 9649856, 10463030, 1698765, 8819930, 55329, 803287, 9047340, 11858690, 3325945, 4072975, 12086004, 2561507, 10574104, 11387118, 2853909, 13647026, 5664841, 5958079, 14460228, 4446803, 12949160, 13176670, 5194661, 7454091, 16249200, 16476294, 8201341, 14834538, 6559633, 6852199, 15647388, 3360676, 11864927, 12161705, 4185682, 10527045, 2551230, 2782280, 11286707, 9619101, 1346150, 1577872, 10379115, 73852, 8875143, 9172337, 899466, 16124205, 7357910, 8182816, 16421083, 6680524, 14918455, 15678145, 6911546, 5736468, 13747439, 14507289, 5968354, 12873461, 4334094, 5159928, 13170435, 4167245, 12180150, 11879232, 3346363, 11301036, 2767959, 2532769, 10545498, 10360692, 1596303, 1360505, 9604738, 913813, 9157998, 8856728, 92259, 16439492, 8164415, 7343561, 16138546, 6897189, 15692510, 14936872, 6662099, 5986813, 14488838, 13733104, 5750795, 13156124, 5174247, 4352529, 12855018, 2810998, 11315341, 10498427, 2522496, 12124823, 4148844, 3397530, 11901793, 9135439, 862644, 110658, 8912057, 1606574, 10407765, 9590435, 1317464, 15706879, 6940164, 6651890, 14889737, 8145950, 16384229, 16161043, 7394792, 5123014, 13133629, 12910283, 4370992, 14535975, 5997020, 5707818, 13718737, 2504095, 10516836, 11329682, 2796649, 11916158, 3383173, 4130419, 12143240, 8893606, 129117, 876971, 9121104, 1331783, 9576124, 10389322, 1625009, 14908182, 6633453, 6925851, 15721184, 7380471, 16175372, 16402682, 8127489, 4389423, 12891860, 13119266, 5137369, 13704398, 5722165, 6015427, 14517560];
  if (typeof Int32Array !== "undefined")
    TABLE = new Int32Array(TABLE);
  var crc24 = (0, _define_crc2.default)("crc-24", function(buf, previous) {
    if (!_buffer.Buffer.isBuffer(buf))
      buf = (0, _create_buffer2.default)(buf);
    var crc = typeof previous !== "undefined" ? ~~previous : 11994318;
    for (var index = 0; index < buf.length; index++) {
      var byte = buf[index];
      crc = (TABLE[(crc >> 16 ^ byte) & 255] ^ crc << 8) & 16777215;
    }
    return crc;
  });
  exports2.default = crc24;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/crc24.js
var require_crc242 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = require_crc24().default;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/es6/crc32.js
var require_crc32 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _buffer = require("buffer");
  var _create_buffer = require_create_buffer();
  var _create_buffer2 = _interopRequireDefault(_create_buffer);
  var _define_crc = require_define_crc();
  var _define_crc2 = _interopRequireDefault(_define_crc);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var TABLE = [0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918e3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117];
  if (typeof Int32Array !== "undefined")
    TABLE = new Int32Array(TABLE);
  var crc32 = (0, _define_crc2.default)("crc-32", function(buf, previous) {
    if (!_buffer.Buffer.isBuffer(buf))
      buf = (0, _create_buffer2.default)(buf);
    var crc = previous === 0 ? 0 : ~~previous ^ -1;
    for (var index = 0; index < buf.length; index++) {
      var byte = buf[index];
      crc = TABLE[(crc ^ byte) & 255] ^ crc >>> 8;
    }
    return crc ^ -1;
  });
  exports2.default = crc32;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/crc32.js
var require_crc322 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = require_crc32().default;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/es6/crcjam.js
var require_crcjam = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  var _buffer = require("buffer");
  var _create_buffer = require_create_buffer();
  var _create_buffer2 = _interopRequireDefault(_create_buffer);
  var _define_crc = require_define_crc();
  var _define_crc2 = _interopRequireDefault(_define_crc);
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var TABLE = [0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918e3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117];
  if (typeof Int32Array !== "undefined")
    TABLE = new Int32Array(TABLE);
  var crcjam = (0, _define_crc2.default)("jam", function(buf) {
    var previous = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : -1;
    if (!_buffer.Buffer.isBuffer(buf))
      buf = (0, _create_buffer2.default)(buf);
    var crc = previous === 0 ? 0 : ~~previous;
    for (var index = 0; index < buf.length; index++) {
      var byte = buf[index];
      crc = TABLE[(crc ^ byte) & 255] ^ crc >>> 8;
    }
    return crc;
  });
  exports2.default = crcjam;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/crcjam.js
var require_crcjam2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = require_crcjam().default;
});

// ../../node_modules/.pnpm/crc@3.8.0/node_modules/crc/lib/index.js
var require_lib6 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = {
    crc1: require_crc12(),
    crc8: require_crc82(),
    crc81wire: require_crc8_1wire(),
    crc16: require_crc162(),
    crc16ccitt: require_crc16_ccitt(),
    crc16modbus: require_crc16_modbus(),
    crc16xmodem: require_crc16_xmodem(),
    crc16kermit: require_crc16_kermit(),
    crc24: require_crc242(),
    crc32: require_crc322(),
    crcjam: require_crcjam2()
  };
});

// ../../node_modules/.pnpm/crc32-stream@3.0.1/node_modules/crc32-stream/lib/crc32-stream.js
var require_crc32_stream = __commonJS((exports2, module3) => {
  "use strict";
  const {Transform} = require_readable2();
  const {crc32} = require_lib6();
  class CRC32Stream extends Transform {
    constructor(options) {
      super(options);
      this.checksum = Buffer.allocUnsafe(4);
      this.checksum.writeInt32BE(0, 0);
      this.rawSize = 0;
    }
    _transform(chunk, encoding, callback) {
      if (chunk) {
        this.checksum = crc32(chunk, this.checksum);
        this.rawSize += chunk.length;
      }
      callback(null, chunk);
    }
    digest(encoding) {
      const checksum = Buffer.allocUnsafe(4);
      checksum.writeUInt32BE(this.checksum >>> 0, 0);
      return encoding ? checksum.toString(encoding) : checksum;
    }
    hex() {
      return this.digest("hex").toUpperCase();
    }
    size() {
      return this.rawSize;
    }
  }
  module3.exports = CRC32Stream;
});

// ../../node_modules/.pnpm/crc32-stream@3.0.1/node_modules/crc32-stream/lib/deflate-crc32-stream.js
var require_deflate_crc32_stream = __commonJS((exports2, module3) => {
  "use strict";
  const {DeflateRaw} = require("zlib");
  const {crc32} = require_lib6();
  class DeflateCRC32Stream extends DeflateRaw {
    constructor(options) {
      super(options);
      this.checksum = Buffer.allocUnsafe(4);
      this.checksum.writeInt32BE(0, 0);
      this.rawSize = 0;
      this.compressedSize = 0;
    }
    push(chunk, encoding) {
      if (chunk) {
        this.compressedSize += chunk.length;
      }
      return super.push(chunk, encoding);
    }
    write(chunk, enc, cb) {
      if (chunk) {
        this.checksum = crc32(chunk, this.checksum);
        this.rawSize += chunk.length;
      }
      return super.write(chunk, enc, cb);
    }
    digest(encoding) {
      const checksum = Buffer.allocUnsafe(4);
      checksum.writeUInt32BE(this.checksum >>> 0, 0);
      return encoding ? checksum.toString(encoding) : checksum;
    }
    hex() {
      return this.digest("hex").toUpperCase();
    }
    size(compressed = false) {
      if (compressed) {
        return this.compressedSize;
      } else {
        return this.rawSize;
      }
    }
  }
  module3.exports = DeflateCRC32Stream;
});

// ../../node_modules/.pnpm/crc32-stream@3.0.1/node_modules/crc32-stream/lib/index.js
var require_lib7 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = {
    CRC32Stream: require_crc32_stream(),
    DeflateCRC32Stream: require_deflate_crc32_stream()
  };
});

// ../../node_modules/.pnpm/compress-commons@3.0.0/node_modules/compress-commons/lib/archivers/zip/zip-archive-output-stream.js
var require_zip_archive_output_stream = __commonJS((exports2, module3) => {
  var inherits = require("util").inherits;
  var crc32 = require_buffer_crc32();
  var {CRC32Stream} = require_lib7();
  var {DeflateCRC32Stream} = require_lib7();
  var ArchiveOutputStream = require_archive_output_stream();
  var ZipArchiveEntry = require_zip_archive_entry();
  var GeneralPurposeBit = require_general_purpose_bit();
  var constants = require_constants5();
  var util4 = require_util7();
  var zipUtil = require_util6();
  var ZipArchiveOutputStream = module3.exports = function(options) {
    if (!(this instanceof ZipArchiveOutputStream)) {
      return new ZipArchiveOutputStream(options);
    }
    options = this.options = this._defaults(options);
    ArchiveOutputStream.call(this, options);
    this._entry = null;
    this._entries = [];
    this._archive = {
      centralLength: 0,
      centralOffset: 0,
      comment: "",
      finish: false,
      finished: false,
      processing: false,
      forceZip64: options.forceZip64,
      forceLocalTime: options.forceLocalTime
    };
  };
  inherits(ZipArchiveOutputStream, ArchiveOutputStream);
  ZipArchiveOutputStream.prototype._afterAppend = function(ae) {
    this._entries.push(ae);
    if (ae.getGeneralPurposeBit().usesDataDescriptor()) {
      this._writeDataDescriptor(ae);
    }
    this._archive.processing = false;
    this._entry = null;
    if (this._archive.finish && !this._archive.finished) {
      this._finish();
    }
  };
  ZipArchiveOutputStream.prototype._appendBuffer = function(ae, source, callback) {
    if (source.length === 0) {
      ae.setMethod(constants.METHOD_STORED);
    }
    var method = ae.getMethod();
    if (method === constants.METHOD_STORED) {
      ae.setSize(source.length);
      ae.setCompressedSize(source.length);
      ae.setCrc(crc32.unsigned(source));
    }
    this._writeLocalFileHeader(ae);
    if (method === constants.METHOD_STORED) {
      this.write(source);
      this._afterAppend(ae);
      callback(null, ae);
      return;
    } else if (method === constants.METHOD_DEFLATED) {
      this._smartStream(ae, callback).end(source);
      return;
    } else {
      callback(new Error("compression method " + method + " not implemented"));
      return;
    }
  };
  ZipArchiveOutputStream.prototype._appendStream = function(ae, source, callback) {
    ae.getGeneralPurposeBit().useDataDescriptor(true);
    ae.setVersionNeededToExtract(constants.MIN_VERSION_DATA_DESCRIPTOR);
    this._writeLocalFileHeader(ae);
    var smart = this._smartStream(ae, callback);
    source.once("error", function(err) {
      smart.emit("error", err);
      smart.end();
    });
    source.pipe(smart);
  };
  ZipArchiveOutputStream.prototype._defaults = function(o) {
    if (typeof o !== "object") {
      o = {};
    }
    if (typeof o.zlib !== "object") {
      o.zlib = {};
    }
    if (typeof o.zlib.level !== "number") {
      o.zlib.level = constants.ZLIB_BEST_SPEED;
    }
    o.forceZip64 = !!o.forceZip64;
    o.forceLocalTime = !!o.forceLocalTime;
    return o;
  };
  ZipArchiveOutputStream.prototype._finish = function() {
    this._archive.centralOffset = this.offset;
    this._entries.forEach(function(ae) {
      this._writeCentralFileHeader(ae);
    }.bind(this));
    this._archive.centralLength = this.offset - this._archive.centralOffset;
    if (this.isZip64()) {
      this._writeCentralDirectoryZip64();
    }
    this._writeCentralDirectoryEnd();
    this._archive.processing = false;
    this._archive.finish = true;
    this._archive.finished = true;
    this.end();
  };
  ZipArchiveOutputStream.prototype._normalizeEntry = function(ae) {
    if (ae.getMethod() === -1) {
      ae.setMethod(constants.METHOD_DEFLATED);
    }
    if (ae.getMethod() === constants.METHOD_DEFLATED) {
      ae.getGeneralPurposeBit().useDataDescriptor(true);
      ae.setVersionNeededToExtract(constants.MIN_VERSION_DATA_DESCRIPTOR);
    }
    if (ae.getTime() === -1) {
      ae.setTime(new Date(), this._archive.forceLocalTime);
    }
    ae._offsets = {
      file: 0,
      data: 0,
      contents: 0
    };
  };
  ZipArchiveOutputStream.prototype._smartStream = function(ae, callback) {
    var deflate = ae.getMethod() === constants.METHOD_DEFLATED;
    var process2 = deflate ? new DeflateCRC32Stream(this.options.zlib) : new CRC32Stream();
    var error = null;
    function handleStuff() {
      var digest = process2.digest().readUInt32BE(0);
      ae.setCrc(digest);
      ae.setSize(process2.size());
      ae.setCompressedSize(process2.size(true));
      this._afterAppend(ae);
      callback(error, ae);
    }
    process2.once("end", handleStuff.bind(this));
    process2.once("error", function(err) {
      error = err;
    });
    process2.pipe(this, {end: false});
    return process2;
  };
  ZipArchiveOutputStream.prototype._writeCentralDirectoryEnd = function() {
    var records = this._entries.length;
    var size = this._archive.centralLength;
    var offset = this._archive.centralOffset;
    if (this.isZip64()) {
      records = constants.ZIP64_MAGIC_SHORT;
      size = constants.ZIP64_MAGIC;
      offset = constants.ZIP64_MAGIC;
    }
    this.write(zipUtil.getLongBytes(constants.SIG_EOCD));
    this.write(constants.SHORT_ZERO);
    this.write(constants.SHORT_ZERO);
    this.write(zipUtil.getShortBytes(records));
    this.write(zipUtil.getShortBytes(records));
    this.write(zipUtil.getLongBytes(size));
    this.write(zipUtil.getLongBytes(offset));
    var comment = this.getComment();
    var commentLength = Buffer.byteLength(comment);
    this.write(zipUtil.getShortBytes(commentLength));
    this.write(comment);
  };
  ZipArchiveOutputStream.prototype._writeCentralDirectoryZip64 = function() {
    this.write(zipUtil.getLongBytes(constants.SIG_ZIP64_EOCD));
    this.write(zipUtil.getEightBytes(44));
    this.write(zipUtil.getShortBytes(constants.MIN_VERSION_ZIP64));
    this.write(zipUtil.getShortBytes(constants.MIN_VERSION_ZIP64));
    this.write(constants.LONG_ZERO);
    this.write(constants.LONG_ZERO);
    this.write(zipUtil.getEightBytes(this._entries.length));
    this.write(zipUtil.getEightBytes(this._entries.length));
    this.write(zipUtil.getEightBytes(this._archive.centralLength));
    this.write(zipUtil.getEightBytes(this._archive.centralOffset));
    this.write(zipUtil.getLongBytes(constants.SIG_ZIP64_EOCD_LOC));
    this.write(constants.LONG_ZERO);
    this.write(zipUtil.getEightBytes(this._archive.centralOffset + this._archive.centralLength));
    this.write(zipUtil.getLongBytes(1));
  };
  ZipArchiveOutputStream.prototype._writeCentralFileHeader = function(ae) {
    var gpb = ae.getGeneralPurposeBit();
    var method = ae.getMethod();
    var offsets = ae._offsets;
    var size = ae.getSize();
    var compressedSize = ae.getCompressedSize();
    if (ae.isZip64() || offsets.file > constants.ZIP64_MAGIC) {
      size = constants.ZIP64_MAGIC;
      compressedSize = constants.ZIP64_MAGIC;
      ae.setVersionNeededToExtract(constants.MIN_VERSION_ZIP64);
      var extraBuf = Buffer.concat([
        zipUtil.getShortBytes(constants.ZIP64_EXTRA_ID),
        zipUtil.getShortBytes(24),
        zipUtil.getEightBytes(ae.getSize()),
        zipUtil.getEightBytes(ae.getCompressedSize()),
        zipUtil.getEightBytes(offsets.file)
      ], 28);
      ae.setExtra(extraBuf);
    }
    this.write(zipUtil.getLongBytes(constants.SIG_CFH));
    this.write(zipUtil.getShortBytes(ae.getPlatform() << 8 | constants.VERSION_MADEBY));
    this.write(zipUtil.getShortBytes(ae.getVersionNeededToExtract()));
    this.write(gpb.encode());
    this.write(zipUtil.getShortBytes(method));
    this.write(zipUtil.getLongBytes(ae.getTimeDos()));
    this.write(zipUtil.getLongBytes(ae.getCrc()));
    this.write(zipUtil.getLongBytes(compressedSize));
    this.write(zipUtil.getLongBytes(size));
    var name = ae.getName();
    var comment = ae.getComment();
    var extra = ae.getCentralDirectoryExtra();
    if (gpb.usesUTF8ForNames()) {
      name = Buffer.from(name);
      comment = Buffer.from(comment);
    }
    this.write(zipUtil.getShortBytes(name.length));
    this.write(zipUtil.getShortBytes(extra.length));
    this.write(zipUtil.getShortBytes(comment.length));
    this.write(constants.SHORT_ZERO);
    this.write(zipUtil.getShortBytes(ae.getInternalAttributes()));
    this.write(zipUtil.getLongBytes(ae.getExternalAttributes()));
    if (offsets.file > constants.ZIP64_MAGIC) {
      this.write(zipUtil.getLongBytes(constants.ZIP64_MAGIC));
    } else {
      this.write(zipUtil.getLongBytes(offsets.file));
    }
    this.write(name);
    this.write(extra);
    this.write(comment);
  };
  ZipArchiveOutputStream.prototype._writeDataDescriptor = function(ae) {
    this.write(zipUtil.getLongBytes(constants.SIG_DD));
    this.write(zipUtil.getLongBytes(ae.getCrc()));
    if (ae.isZip64()) {
      this.write(zipUtil.getEightBytes(ae.getCompressedSize()));
      this.write(zipUtil.getEightBytes(ae.getSize()));
    } else {
      this.write(zipUtil.getLongBytes(ae.getCompressedSize()));
      this.write(zipUtil.getLongBytes(ae.getSize()));
    }
  };
  ZipArchiveOutputStream.prototype._writeLocalFileHeader = function(ae) {
    var gpb = ae.getGeneralPurposeBit();
    var method = ae.getMethod();
    var name = ae.getName();
    var extra = ae.getLocalFileDataExtra();
    if (ae.isZip64()) {
      gpb.useDataDescriptor(true);
      ae.setVersionNeededToExtract(constants.MIN_VERSION_ZIP64);
    }
    if (gpb.usesUTF8ForNames()) {
      name = Buffer.from(name);
    }
    ae._offsets.file = this.offset;
    this.write(zipUtil.getLongBytes(constants.SIG_LFH));
    this.write(zipUtil.getShortBytes(ae.getVersionNeededToExtract()));
    this.write(gpb.encode());
    this.write(zipUtil.getShortBytes(method));
    this.write(zipUtil.getLongBytes(ae.getTimeDos()));
    ae._offsets.data = this.offset;
    if (gpb.usesDataDescriptor()) {
      this.write(constants.LONG_ZERO);
      this.write(constants.LONG_ZERO);
      this.write(constants.LONG_ZERO);
    } else {
      this.write(zipUtil.getLongBytes(ae.getCrc()));
      this.write(zipUtil.getLongBytes(ae.getCompressedSize()));
      this.write(zipUtil.getLongBytes(ae.getSize()));
    }
    this.write(zipUtil.getShortBytes(name.length));
    this.write(zipUtil.getShortBytes(extra.length));
    this.write(name);
    this.write(extra);
    ae._offsets.contents = this.offset;
  };
  ZipArchiveOutputStream.prototype.getComment = function(comment) {
    return this._archive.comment !== null ? this._archive.comment : "";
  };
  ZipArchiveOutputStream.prototype.isZip64 = function() {
    return this._archive.forceZip64 || this._entries.length > constants.ZIP64_MAGIC_SHORT || this._archive.centralLength > constants.ZIP64_MAGIC || this._archive.centralOffset > constants.ZIP64_MAGIC;
  };
  ZipArchiveOutputStream.prototype.setComment = function(comment) {
    this._archive.comment = comment;
  };
});

// ../../node_modules/.pnpm/compress-commons@3.0.0/node_modules/compress-commons/lib/compress-commons.js
var require_compress_commons = __commonJS((exports2, module3) => {
  module3.exports = {
    ArchiveEntry: require_archive_entry(),
    ZipArchiveEntry: require_zip_archive_entry(),
    ArchiveOutputStream: require_archive_output_stream(),
    ZipArchiveOutputStream: require_zip_archive_output_stream()
  };
});

// ../../node_modules/.pnpm/zip-stream@3.0.1/node_modules/zip-stream/index.js
var require_zip_stream = __commonJS((exports2, module3) => {
  /**
   * ZipStream
   *
   * @ignore
   * @license [MIT]{@link https://github.com/archiverjs/node-zip-stream/blob/master/LICENSE}
   * @copyright (c) 2014 Chris Talkington, contributors.
   */
  var inherits = require("util").inherits;
  var ZipArchiveOutputStream = require_compress_commons().ZipArchiveOutputStream;
  var ZipArchiveEntry = require_compress_commons().ZipArchiveEntry;
  var util4 = require_archiver_utils();
  var ZipStream = module3.exports = function(options) {
    if (!(this instanceof ZipStream)) {
      return new ZipStream(options);
    }
    options = this.options = options || {};
    options.zlib = options.zlib || {};
    ZipArchiveOutputStream.call(this, options);
    if (typeof options.level === "number" && options.level >= 0) {
      options.zlib.level = options.level;
      delete options.level;
    }
    if (!options.forceZip64 && typeof options.zlib.level === "number" && options.zlib.level === 0) {
      options.store = true;
    }
    if (options.comment && options.comment.length > 0) {
      this.setComment(options.comment);
    }
  };
  inherits(ZipStream, ZipArchiveOutputStream);
  ZipStream.prototype._normalizeFileData = function(data) {
    data = util4.defaults(data, {
      type: "file",
      name: null,
      linkname: null,
      date: null,
      mode: null,
      store: this.options.store,
      comment: ""
    });
    var isDir = data.type === "directory";
    var isSymlink = data.type === "symlink";
    if (data.name) {
      data.name = util4.sanitizePath(data.name);
      if (!isSymlink && data.name.slice(-1) === "/") {
        isDir = true;
        data.type = "directory";
      } else if (isDir) {
        data.name += "/";
      }
    }
    if (isDir || isSymlink) {
      data.store = true;
    }
    data.date = util4.dateify(data.date);
    return data;
  };
  ZipStream.prototype.entry = function(source, data, callback) {
    if (typeof callback !== "function") {
      callback = this._emitErrorCallback.bind(this);
    }
    data = this._normalizeFileData(data);
    if (data.type !== "file" && data.type !== "directory" && data.type !== "symlink") {
      callback(new Error(data.type + " entries not currently supported"));
      return;
    }
    if (typeof data.name !== "string" || data.name.length === 0) {
      callback(new Error("entry name must be a non-empty string value"));
      return;
    }
    if (data.type === "symlink" && typeof data.linkname !== "string") {
      callback(new Error("entry linkname must be a non-empty string value when type equals symlink"));
      return;
    }
    var entry = new ZipArchiveEntry(data.name);
    entry.setTime(data.date, this.options.forceLocalTime);
    if (data.store) {
      entry.setMethod(0);
    }
    if (data.comment.length > 0) {
      entry.setComment(data.comment);
    }
    if (data.type === "symlink" && typeof data.mode !== "number") {
      data.mode = 40960;
    }
    if (typeof data.mode === "number") {
      if (data.type === "symlink") {
        data.mode |= 40960;
      }
      entry.setUnixMode(data.mode);
    }
    if (data.type === "symlink" && typeof data.linkname === "string") {
      source = Buffer.from(data.linkname);
    }
    return ZipArchiveOutputStream.prototype.entry.call(this, entry, source, callback);
  };
  ZipStream.prototype.finalize = function() {
    this.finish();
  };
});

// ../../node_modules/.pnpm/archiver@4.0.1/node_modules/archiver/lib/plugins/zip.js
var require_zip = __commonJS((exports2, module3) => {
  /**
   * ZIP Format Plugin
   *
   * @module plugins/zip
   * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}
   * @copyright (c) 2012-2014 Chris Talkington, contributors.
   */
  var engine = require_zip_stream();
  var util4 = require_archiver_utils();
  var Zip = function(options) {
    if (!(this instanceof Zip)) {
      return new Zip(options);
    }
    options = this.options = util4.defaults(options, {
      comment: "",
      forceUTC: false,
      store: false
    });
    this.supports = {
      directory: true,
      symlink: true
    };
    this.engine = new engine(options);
  };
  Zip.prototype.append = function(source, data, callback) {
    this.engine.entry(source, data, callback);
  };
  Zip.prototype.finalize = function() {
    this.engine.finalize();
  };
  Zip.prototype.on = function() {
    return this.engine.on.apply(this.engine, arguments);
  };
  Zip.prototype.pipe = function() {
    return this.engine.pipe.apply(this.engine, arguments);
  };
  Zip.prototype.unpipe = function() {
    return this.engine.unpipe.apply(this.engine, arguments);
  };
  module3.exports = Zip;
});

// ../../node_modules/.pnpm/bl@4.0.3/node_modules/bl/BufferList.js
var require_BufferList2 = __commonJS((exports2, module3) => {
  "use strict";
  const {Buffer: Buffer2} = require("buffer");
  const symbol = Symbol.for("BufferList");
  function BufferList(buf) {
    if (!(this instanceof BufferList)) {
      return new BufferList(buf);
    }
    BufferList._init.call(this, buf);
  }
  BufferList._init = function _init(buf) {
    Object.defineProperty(this, symbol, {value: true});
    this._bufs = [];
    this.length = 0;
    if (buf) {
      this.append(buf);
    }
  };
  BufferList.prototype._new = function _new(buf) {
    return new BufferList(buf);
  };
  BufferList.prototype._offset = function _offset(offset) {
    if (offset === 0) {
      return [0, 0];
    }
    let tot = 0;
    for (let i = 0; i < this._bufs.length; i++) {
      const _t = tot + this._bufs[i].length;
      if (offset < _t || i === this._bufs.length - 1) {
        return [i, offset - tot];
      }
      tot = _t;
    }
  };
  BufferList.prototype._reverseOffset = function(blOffset) {
    const bufferId = blOffset[0];
    let offset = blOffset[1];
    for (let i = 0; i < bufferId; i++) {
      offset += this._bufs[i].length;
    }
    return offset;
  };
  BufferList.prototype.get = function get(index) {
    if (index > this.length || index < 0) {
      return void 0;
    }
    const offset = this._offset(index);
    return this._bufs[offset[0]][offset[1]];
  };
  BufferList.prototype.slice = function slice(start, end) {
    if (typeof start === "number" && start < 0) {
      start += this.length;
    }
    if (typeof end === "number" && end < 0) {
      end += this.length;
    }
    return this.copy(null, 0, start, end);
  };
  BufferList.prototype.copy = function copy(dst, dstStart, srcStart, srcEnd) {
    if (typeof srcStart !== "number" || srcStart < 0) {
      srcStart = 0;
    }
    if (typeof srcEnd !== "number" || srcEnd > this.length) {
      srcEnd = this.length;
    }
    if (srcStart >= this.length) {
      return dst || Buffer2.alloc(0);
    }
    if (srcEnd <= 0) {
      return dst || Buffer2.alloc(0);
    }
    const copy2 = !!dst;
    const off = this._offset(srcStart);
    const len = srcEnd - srcStart;
    let bytes = len;
    let bufoff = copy2 && dstStart || 0;
    let start = off[1];
    if (srcStart === 0 && srcEnd === this.length) {
      if (!copy2) {
        return this._bufs.length === 1 ? this._bufs[0] : Buffer2.concat(this._bufs, this.length);
      }
      for (let i = 0; i < this._bufs.length; i++) {
        this._bufs[i].copy(dst, bufoff);
        bufoff += this._bufs[i].length;
      }
      return dst;
    }
    if (bytes <= this._bufs[off[0]].length - start) {
      return copy2 ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes) : this._bufs[off[0]].slice(start, start + bytes);
    }
    if (!copy2) {
      dst = Buffer2.allocUnsafe(len);
    }
    for (let i = off[0]; i < this._bufs.length; i++) {
      const l = this._bufs[i].length - start;
      if (bytes > l) {
        this._bufs[i].copy(dst, bufoff, start);
        bufoff += l;
      } else {
        this._bufs[i].copy(dst, bufoff, start, start + bytes);
        bufoff += l;
        break;
      }
      bytes -= l;
      if (start) {
        start = 0;
      }
    }
    if (dst.length > bufoff)
      return dst.slice(0, bufoff);
    return dst;
  };
  BufferList.prototype.shallowSlice = function shallowSlice(start, end) {
    start = start || 0;
    end = typeof end !== "number" ? this.length : end;
    if (start < 0) {
      start += this.length;
    }
    if (end < 0) {
      end += this.length;
    }
    if (start === end) {
      return this._new();
    }
    const startOffset = this._offset(start);
    const endOffset = this._offset(end);
    const buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);
    if (endOffset[1] === 0) {
      buffers.pop();
    } else {
      buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);
    }
    if (startOffset[1] !== 0) {
      buffers[0] = buffers[0].slice(startOffset[1]);
    }
    return this._new(buffers);
  };
  BufferList.prototype.toString = function toString(encoding, start, end) {
    return this.slice(start, end).toString(encoding);
  };
  BufferList.prototype.consume = function consume(bytes) {
    bytes = Math.trunc(bytes);
    if (Number.isNaN(bytes) || bytes <= 0)
      return this;
    while (this._bufs.length) {
      if (bytes >= this._bufs[0].length) {
        bytes -= this._bufs[0].length;
        this.length -= this._bufs[0].length;
        this._bufs.shift();
      } else {
        this._bufs[0] = this._bufs[0].slice(bytes);
        this.length -= bytes;
        break;
      }
    }
    return this;
  };
  BufferList.prototype.duplicate = function duplicate() {
    const copy = this._new();
    for (let i = 0; i < this._bufs.length; i++) {
      copy.append(this._bufs[i]);
    }
    return copy;
  };
  BufferList.prototype.append = function append(buf) {
    if (buf == null) {
      return this;
    }
    if (buf.buffer) {
      this._appendBuffer(Buffer2.from(buf.buffer, buf.byteOffset, buf.byteLength));
    } else if (Array.isArray(buf)) {
      for (let i = 0; i < buf.length; i++) {
        this.append(buf[i]);
      }
    } else if (this._isBufferList(buf)) {
      for (let i = 0; i < buf._bufs.length; i++) {
        this.append(buf._bufs[i]);
      }
    } else {
      if (typeof buf === "number") {
        buf = buf.toString();
      }
      this._appendBuffer(Buffer2.from(buf));
    }
    return this;
  };
  BufferList.prototype._appendBuffer = function appendBuffer(buf) {
    this._bufs.push(buf);
    this.length += buf.length;
  };
  BufferList.prototype.indexOf = function(search, offset, encoding) {
    if (encoding === void 0 && typeof offset === "string") {
      encoding = offset;
      offset = void 0;
    }
    if (typeof search === "function" || Array.isArray(search)) {
      throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.');
    } else if (typeof search === "number") {
      search = Buffer2.from([search]);
    } else if (typeof search === "string") {
      search = Buffer2.from(search, encoding);
    } else if (this._isBufferList(search)) {
      search = search.slice();
    } else if (Array.isArray(search.buffer)) {
      search = Buffer2.from(search.buffer, search.byteOffset, search.byteLength);
    } else if (!Buffer2.isBuffer(search)) {
      search = Buffer2.from(search);
    }
    offset = Number(offset || 0);
    if (isNaN(offset)) {
      offset = 0;
    }
    if (offset < 0) {
      offset = this.length + offset;
    }
    if (offset < 0) {
      offset = 0;
    }
    if (search.length === 0) {
      return offset > this.length ? this.length : offset;
    }
    const blOffset = this._offset(offset);
    let blIndex = blOffset[0];
    let buffOffset = blOffset[1];
    for (; blIndex < this._bufs.length; blIndex++) {
      const buff = this._bufs[blIndex];
      while (buffOffset < buff.length) {
        const availableWindow = buff.length - buffOffset;
        if (availableWindow >= search.length) {
          const nativeSearchResult = buff.indexOf(search, buffOffset);
          if (nativeSearchResult !== -1) {
            return this._reverseOffset([blIndex, nativeSearchResult]);
          }
          buffOffset = buff.length - search.length + 1;
        } else {
          const revOffset = this._reverseOffset([blIndex, buffOffset]);
          if (this._match(revOffset, search)) {
            return revOffset;
          }
          buffOffset++;
        }
      }
      buffOffset = 0;
    }
    return -1;
  };
  BufferList.prototype._match = function(offset, search) {
    if (this.length - offset < search.length) {
      return false;
    }
    for (let searchOffset = 0; searchOffset < search.length; searchOffset++) {
      if (this.get(offset + searchOffset) !== search[searchOffset]) {
        return false;
      }
    }
    return true;
  };
  (function() {
    const methods = {
      readDoubleBE: 8,
      readDoubleLE: 8,
      readFloatBE: 4,
      readFloatLE: 4,
      readInt32BE: 4,
      readInt32LE: 4,
      readUInt32BE: 4,
      readUInt32LE: 4,
      readInt16BE: 2,
      readInt16LE: 2,
      readUInt16BE: 2,
      readUInt16LE: 2,
      readInt8: 1,
      readUInt8: 1,
      readIntBE: null,
      readIntLE: null,
      readUIntBE: null,
      readUIntLE: null
    };
    for (const m in methods) {
      (function(m2) {
        if (methods[m2] === null) {
          BufferList.prototype[m2] = function(offset, byteLength) {
            return this.slice(offset, offset + byteLength)[m2](0, byteLength);
          };
        } else {
          BufferList.prototype[m2] = function(offset) {
            return this.slice(offset, offset + methods[m2])[m2](0);
          };
        }
      })(m);
    }
  })();
  BufferList.prototype._isBufferList = function _isBufferList(b) {
    return b instanceof BufferList || BufferList.isBufferList(b);
  };
  BufferList.isBufferList = function isBufferList(b) {
    return b != null && b[symbol];
  };
  module3.exports = BufferList;
});

// ../../node_modules/.pnpm/bl@4.0.3/node_modules/bl/bl.js
var require_bl = __commonJS((exports2, module3) => {
  "use strict";
  const DuplexStream = require_readable2().Duplex;
  const inherits = require_inherits();
  const BufferList = require_BufferList2();
  function BufferListStream(callback) {
    if (!(this instanceof BufferListStream)) {
      return new BufferListStream(callback);
    }
    if (typeof callback === "function") {
      this._callback = callback;
      const piper = function piper2(err) {
        if (this._callback) {
          this._callback(err);
          this._callback = null;
        }
      }.bind(this);
      this.on("pipe", function onPipe(src) {
        src.on("error", piper);
      });
      this.on("unpipe", function onUnpipe(src) {
        src.removeListener("error", piper);
      });
      callback = null;
    }
    BufferList._init.call(this, callback);
    DuplexStream.call(this);
  }
  inherits(BufferListStream, DuplexStream);
  Object.assign(BufferListStream.prototype, BufferList.prototype);
  BufferListStream.prototype._new = function _new(callback) {
    return new BufferListStream(callback);
  };
  BufferListStream.prototype._write = function _write(buf, encoding, callback) {
    this._appendBuffer(buf);
    if (typeof callback === "function") {
      callback();
    }
  };
  BufferListStream.prototype._read = function _read(size) {
    if (!this.length) {
      return this.push(null);
    }
    size = Math.min(size, this.length);
    this.push(this.slice(0, size));
    this.consume(size);
  };
  BufferListStream.prototype.end = function end(chunk) {
    DuplexStream.prototype.end.call(this, chunk);
    if (this._callback) {
      this._callback(null, this.slice());
      this._callback = null;
    }
  };
  BufferListStream.prototype._destroy = function _destroy(err, cb) {
    this._bufs.length = 0;
    this.length = 0;
    cb(err);
  };
  BufferListStream.prototype._isBufferList = function _isBufferList(b) {
    return b instanceof BufferListStream || b instanceof BufferList || BufferListStream.isBufferList(b);
  };
  BufferListStream.isBufferList = BufferList.isBufferList;
  module3.exports = BufferListStream;
  module3.exports.BufferListStream = BufferListStream;
  module3.exports.BufferList = BufferList;
});

// ../../node_modules/.pnpm/tar-stream@2.1.3/node_modules/tar-stream/headers.js
var require_headers = __commonJS((exports2) => {
  var alloc = Buffer.alloc;
  var ZEROS = "0000000000000000000";
  var SEVENS = "7777777777777777777";
  var ZERO_OFFSET = "0".charCodeAt(0);
  var USTAR_MAGIC = Buffer.from("ustar\0", "binary");
  var USTAR_VER = Buffer.from("00", "binary");
  var GNU_MAGIC = Buffer.from("ustar ", "binary");
  var GNU_VER = Buffer.from(" \0", "binary");
  var MASK = parseInt("7777", 8);
  var MAGIC_OFFSET = 257;
  var VERSION_OFFSET = 263;
  var clamp = function(index, len, defaultValue) {
    if (typeof index !== "number")
      return defaultValue;
    index = ~~index;
    if (index >= len)
      return len;
    if (index >= 0)
      return index;
    index += len;
    if (index >= 0)
      return index;
    return 0;
  };
  var toType = function(flag) {
    switch (flag) {
      case 0:
        return "file";
      case 1:
        return "link";
      case 2:
        return "symlink";
      case 3:
        return "character-device";
      case 4:
        return "block-device";
      case 5:
        return "directory";
      case 6:
        return "fifo";
      case 7:
        return "contiguous-file";
      case 72:
        return "pax-header";
      case 55:
        return "pax-global-header";
      case 27:
        return "gnu-long-link-path";
      case 28:
      case 30:
        return "gnu-long-path";
    }
    return null;
  };
  var toTypeflag = function(flag) {
    switch (flag) {
      case "file":
        return 0;
      case "link":
        return 1;
      case "symlink":
        return 2;
      case "character-device":
        return 3;
      case "block-device":
        return 4;
      case "directory":
        return 5;
      case "fifo":
        return 6;
      case "contiguous-file":
        return 7;
      case "pax-header":
        return 72;
    }
    return 0;
  };
  var indexOf = function(block, num, offset, end) {
    for (; offset < end; offset++) {
      if (block[offset] === num)
        return offset;
    }
    return end;
  };
  var cksum = function(block) {
    var sum = 8 * 32;
    for (var i = 0; i < 148; i++)
      sum += block[i];
    for (var j = 156; j < 512; j++)
      sum += block[j];
    return sum;
  };
  var encodeOct = function(val, n) {
    val = val.toString(8);
    if (val.length > n)
      return SEVENS.slice(0, n) + " ";
    else
      return ZEROS.slice(0, n - val.length) + val + " ";
  };
  function parse256(buf) {
    var positive;
    if (buf[0] === 128)
      positive = true;
    else if (buf[0] === 255)
      positive = false;
    else
      return null;
    var tuple = [];
    for (var i = buf.length - 1; i > 0; i--) {
      var byte = buf[i];
      if (positive)
        tuple.push(byte);
      else
        tuple.push(255 - byte);
    }
    var sum = 0;
    var l = tuple.length;
    for (i = 0; i < l; i++) {
      sum += tuple[i] * Math.pow(256, i);
    }
    return positive ? sum : -1 * sum;
  }
  var decodeOct = function(val, offset, length) {
    val = val.slice(offset, offset + length);
    offset = 0;
    if (val[offset] & 128) {
      return parse256(val);
    } else {
      while (offset < val.length && val[offset] === 32)
        offset++;
      var end = clamp(indexOf(val, 32, offset, val.length), val.length, val.length);
      while (offset < end && val[offset] === 0)
        offset++;
      if (end === offset)
        return 0;
      return parseInt(val.slice(offset, end).toString(), 8);
    }
  };
  var decodeStr = function(val, offset, length, encoding) {
    return val.slice(offset, indexOf(val, 0, offset, offset + length)).toString(encoding);
  };
  var addLength = function(str) {
    var len = Buffer.byteLength(str);
    var digits = Math.floor(Math.log(len) / Math.log(10)) + 1;
    if (len + digits >= Math.pow(10, digits))
      digits++;
    return len + digits + str;
  };
  exports2.decodeLongPath = function(buf, encoding) {
    return decodeStr(buf, 0, buf.length, encoding);
  };
  exports2.encodePax = function(opts) {
    var result = "";
    if (opts.name)
      result += addLength(" path=" + opts.name + "\n");
    if (opts.linkname)
      result += addLength(" linkpath=" + opts.linkname + "\n");
    var pax = opts.pax;
    if (pax) {
      for (var key in pax) {
        result += addLength(" " + key + "=" + pax[key] + "\n");
      }
    }
    return Buffer.from(result);
  };
  exports2.decodePax = function(buf) {
    var result = {};
    while (buf.length) {
      var i = 0;
      while (i < buf.length && buf[i] !== 32)
        i++;
      var len = parseInt(buf.slice(0, i).toString(), 10);
      if (!len)
        return result;
      var b = buf.slice(i + 1, len - 1).toString();
      var keyIndex = b.indexOf("=");
      if (keyIndex === -1)
        return result;
      result[b.slice(0, keyIndex)] = b.slice(keyIndex + 1);
      buf = buf.slice(len);
    }
    return result;
  };
  exports2.encode = function(opts) {
    var buf = alloc(512);
    var name = opts.name;
    var prefix = "";
    if (opts.typeflag === 5 && name[name.length - 1] !== "/")
      name += "/";
    if (Buffer.byteLength(name) !== name.length)
      return null;
    while (Buffer.byteLength(name) > 100) {
      var i = name.indexOf("/");
      if (i === -1)
        return null;
      prefix += prefix ? "/" + name.slice(0, i) : name.slice(0, i);
      name = name.slice(i + 1);
    }
    if (Buffer.byteLength(name) > 100 || Buffer.byteLength(prefix) > 155)
      return null;
    if (opts.linkname && Buffer.byteLength(opts.linkname) > 100)
      return null;
    buf.write(name);
    buf.write(encodeOct(opts.mode & MASK, 6), 100);
    buf.write(encodeOct(opts.uid, 6), 108);
    buf.write(encodeOct(opts.gid, 6), 116);
    buf.write(encodeOct(opts.size, 11), 124);
    buf.write(encodeOct(opts.mtime.getTime() / 1e3 | 0, 11), 136);
    buf[156] = ZERO_OFFSET + toTypeflag(opts.type);
    if (opts.linkname)
      buf.write(opts.linkname, 157);
    USTAR_MAGIC.copy(buf, MAGIC_OFFSET);
    USTAR_VER.copy(buf, VERSION_OFFSET);
    if (opts.uname)
      buf.write(opts.uname, 265);
    if (opts.gname)
      buf.write(opts.gname, 297);
    buf.write(encodeOct(opts.devmajor || 0, 6), 329);
    buf.write(encodeOct(opts.devminor || 0, 6), 337);
    if (prefix)
      buf.write(prefix, 345);
    buf.write(encodeOct(cksum(buf), 6), 148);
    return buf;
  };
  exports2.decode = function(buf, filenameEncoding) {
    var typeflag = buf[156] === 0 ? 0 : buf[156] - ZERO_OFFSET;
    var name = decodeStr(buf, 0, 100, filenameEncoding);
    var mode = decodeOct(buf, 100, 8);
    var uid = decodeOct(buf, 108, 8);
    var gid = decodeOct(buf, 116, 8);
    var size = decodeOct(buf, 124, 12);
    var mtime = decodeOct(buf, 136, 12);
    var type = toType(typeflag);
    var linkname = buf[157] === 0 ? null : decodeStr(buf, 157, 100, filenameEncoding);
    var uname = decodeStr(buf, 265, 32);
    var gname = decodeStr(buf, 297, 32);
    var devmajor = decodeOct(buf, 329, 8);
    var devminor = decodeOct(buf, 337, 8);
    var c = cksum(buf);
    if (c === 8 * 32)
      return null;
    if (c !== decodeOct(buf, 148, 8))
      throw new Error("Invalid tar header. Maybe the tar is corrupted or it needs to be gunzipped?");
    if (USTAR_MAGIC.compare(buf, MAGIC_OFFSET, MAGIC_OFFSET + 6) === 0) {
      if (buf[345])
        name = decodeStr(buf, 345, 155, filenameEncoding) + "/" + name;
    } else if (GNU_MAGIC.compare(buf, MAGIC_OFFSET, MAGIC_OFFSET + 6) === 0 && GNU_VER.compare(buf, VERSION_OFFSET, VERSION_OFFSET + 2) === 0) {
    } else {
      throw new Error("Invalid tar header: unknown format.");
    }
    if (typeflag === 0 && name && name[name.length - 1] === "/")
      typeflag = 5;
    return {
      name,
      mode,
      uid,
      gid,
      size,
      mtime: new Date(1e3 * mtime),
      type,
      linkname,
      uname,
      gname,
      devmajor,
      devminor
    };
  };
});

// ../../node_modules/.pnpm/tar-stream@2.1.3/node_modules/tar-stream/extract.js
var require_extract2 = __commonJS((exports2, module3) => {
  var util4 = require("util");
  var bl = require_bl();
  var headers = require_headers();
  var Writable = require_readable2().Writable;
  var PassThrough = require_readable2().PassThrough;
  var noop = function() {
  };
  var overflow = function(size) {
    size &= 511;
    return size && 512 - size;
  };
  var emptyStream = function(self2, offset) {
    var s = new Source(self2, offset);
    s.end();
    return s;
  };
  var mixinPax = function(header, pax) {
    if (pax.path)
      header.name = pax.path;
    if (pax.linkpath)
      header.linkname = pax.linkpath;
    if (pax.size)
      header.size = parseInt(pax.size, 10);
    header.pax = pax;
    return header;
  };
  var Source = function(self2, offset) {
    this._parent = self2;
    this.offset = offset;
    PassThrough.call(this, {autoDestroy: false});
  };
  util4.inherits(Source, PassThrough);
  Source.prototype.destroy = function(err) {
    this._parent.destroy(err);
  };
  var Extract = function(opts) {
    if (!(this instanceof Extract))
      return new Extract(opts);
    Writable.call(this, opts);
    opts = opts || {};
    this._offset = 0;
    this._buffer = bl();
    this._missing = 0;
    this._partial = false;
    this._onparse = noop;
    this._header = null;
    this._stream = null;
    this._overflow = null;
    this._cb = null;
    this._locked = false;
    this._destroyed = false;
    this._pax = null;
    this._paxGlobal = null;
    this._gnuLongPath = null;
    this._gnuLongLinkPath = null;
    var self2 = this;
    var b = self2._buffer;
    var oncontinue = function() {
      self2._continue();
    };
    var onunlock = function(err) {
      self2._locked = false;
      if (err)
        return self2.destroy(err);
      if (!self2._stream)
        oncontinue();
    };
    var onstreamend = function() {
      self2._stream = null;
      var drain = overflow(self2._header.size);
      if (drain)
        self2._parse(drain, ondrain);
      else
        self2._parse(512, onheader);
      if (!self2._locked)
        oncontinue();
    };
    var ondrain = function() {
      self2._buffer.consume(overflow(self2._header.size));
      self2._parse(512, onheader);
      oncontinue();
    };
    var onpaxglobalheader = function() {
      var size = self2._header.size;
      self2._paxGlobal = headers.decodePax(b.slice(0, size));
      b.consume(size);
      onstreamend();
    };
    var onpaxheader = function() {
      var size = self2._header.size;
      self2._pax = headers.decodePax(b.slice(0, size));
      if (self2._paxGlobal)
        self2._pax = Object.assign({}, self2._paxGlobal, self2._pax);
      b.consume(size);
      onstreamend();
    };
    var ongnulongpath = function() {
      var size = self2._header.size;
      this._gnuLongPath = headers.decodeLongPath(b.slice(0, size), opts.filenameEncoding);
      b.consume(size);
      onstreamend();
    };
    var ongnulonglinkpath = function() {
      var size = self2._header.size;
      this._gnuLongLinkPath = headers.decodeLongPath(b.slice(0, size), opts.filenameEncoding);
      b.consume(size);
      onstreamend();
    };
    var onheader = function() {
      var offset = self2._offset;
      var header;
      try {
        header = self2._header = headers.decode(b.slice(0, 512), opts.filenameEncoding);
      } catch (err) {
        self2.emit("error", err);
      }
      b.consume(512);
      if (!header) {
        self2._parse(512, onheader);
        oncontinue();
        return;
      }
      if (header.type === "gnu-long-path") {
        self2._parse(header.size, ongnulongpath);
        oncontinue();
        return;
      }
      if (header.type === "gnu-long-link-path") {
        self2._parse(header.size, ongnulonglinkpath);
        oncontinue();
        return;
      }
      if (header.type === "pax-global-header") {
        self2._parse(header.size, onpaxglobalheader);
        oncontinue();
        return;
      }
      if (header.type === "pax-header") {
        self2._parse(header.size, onpaxheader);
        oncontinue();
        return;
      }
      if (self2._gnuLongPath) {
        header.name = self2._gnuLongPath;
        self2._gnuLongPath = null;
      }
      if (self2._gnuLongLinkPath) {
        header.linkname = self2._gnuLongLinkPath;
        self2._gnuLongLinkPath = null;
      }
      if (self2._pax) {
        self2._header = header = mixinPax(header, self2._pax);
        self2._pax = null;
      }
      self2._locked = true;
      if (!header.size || header.type === "directory") {
        self2._parse(512, onheader);
        self2.emit("entry", header, emptyStream(self2, offset), onunlock);
        return;
      }
      self2._stream = new Source(self2, offset);
      self2.emit("entry", header, self2._stream, onunlock);
      self2._parse(header.size, onstreamend);
      oncontinue();
    };
    this._onheader = onheader;
    this._parse(512, onheader);
  };
  util4.inherits(Extract, Writable);
  Extract.prototype.destroy = function(err) {
    if (this._destroyed)
      return;
    this._destroyed = true;
    if (err)
      this.emit("error", err);
    this.emit("close");
    if (this._stream)
      this._stream.emit("close");
  };
  Extract.prototype._parse = function(size, onparse) {
    if (this._destroyed)
      return;
    this._offset += size;
    this._missing = size;
    if (onparse === this._onheader)
      this._partial = false;
    this._onparse = onparse;
  };
  Extract.prototype._continue = function() {
    if (this._destroyed)
      return;
    var cb = this._cb;
    this._cb = noop;
    if (this._overflow)
      this._write(this._overflow, void 0, cb);
    else
      cb();
  };
  Extract.prototype._write = function(data, enc, cb) {
    if (this._destroyed)
      return;
    var s = this._stream;
    var b = this._buffer;
    var missing = this._missing;
    if (data.length)
      this._partial = true;
    if (data.length < missing) {
      this._missing -= data.length;
      this._overflow = null;
      if (s)
        return s.write(data, cb);
      b.append(data);
      return cb();
    }
    this._cb = cb;
    this._missing = 0;
    var overflow2 = null;
    if (data.length > missing) {
      overflow2 = data.slice(missing);
      data = data.slice(0, missing);
    }
    if (s)
      s.end(data);
    else
      b.append(data);
    this._overflow = overflow2;
    this._onparse();
  };
  Extract.prototype._final = function(cb) {
    if (this._partial)
      return this.destroy(new Error("Unexpected end of data"));
    cb();
  };
  module3.exports = Extract;
});

// ../../node_modules/.pnpm/fs-constants@1.0.0/node_modules/fs-constants/index.js
var require_fs_constants = __commonJS((exports2, module3) => {
  module3.exports = require("fs").constants || require("constants");
});

// ../../node_modules/.pnpm/tar-stream@2.1.3/node_modules/tar-stream/pack.js
var require_pack2 = __commonJS((exports2, module3) => {
  var constants = require_fs_constants();
  var eos = require_end_of_stream();
  var inherits = require_inherits();
  var alloc = Buffer.alloc;
  var Readable = require_readable2().Readable;
  var Writable = require_readable2().Writable;
  var StringDecoder = require("string_decoder").StringDecoder;
  var headers = require_headers();
  var DMODE = parseInt("755", 8);
  var FMODE = parseInt("644", 8);
  var END_OF_TAR = alloc(1024);
  var noop = function() {
  };
  var overflow = function(self2, size) {
    size &= 511;
    if (size)
      self2.push(END_OF_TAR.slice(0, 512 - size));
  };
  function modeToType(mode) {
    switch (mode & constants.S_IFMT) {
      case constants.S_IFBLK:
        return "block-device";
      case constants.S_IFCHR:
        return "character-device";
      case constants.S_IFDIR:
        return "directory";
      case constants.S_IFIFO:
        return "fifo";
      case constants.S_IFLNK:
        return "symlink";
    }
    return "file";
  }
  var Sink = function(to) {
    Writable.call(this);
    this.written = 0;
    this._to = to;
    this._destroyed = false;
  };
  inherits(Sink, Writable);
  Sink.prototype._write = function(data, enc, cb) {
    this.written += data.length;
    if (this._to.push(data))
      return cb();
    this._to._drain = cb;
  };
  Sink.prototype.destroy = function() {
    if (this._destroyed)
      return;
    this._destroyed = true;
    this.emit("close");
  };
  var LinkSink = function() {
    Writable.call(this);
    this.linkname = "";
    this._decoder = new StringDecoder("utf-8");
    this._destroyed = false;
  };
  inherits(LinkSink, Writable);
  LinkSink.prototype._write = function(data, enc, cb) {
    this.linkname += this._decoder.write(data);
    cb();
  };
  LinkSink.prototype.destroy = function() {
    if (this._destroyed)
      return;
    this._destroyed = true;
    this.emit("close");
  };
  var Void = function() {
    Writable.call(this);
    this._destroyed = false;
  };
  inherits(Void, Writable);
  Void.prototype._write = function(data, enc, cb) {
    cb(new Error("No body allowed for this entry"));
  };
  Void.prototype.destroy = function() {
    if (this._destroyed)
      return;
    this._destroyed = true;
    this.emit("close");
  };
  var Pack = function(opts) {
    if (!(this instanceof Pack))
      return new Pack(opts);
    Readable.call(this, opts);
    this._drain = noop;
    this._finalized = false;
    this._finalizing = false;
    this._destroyed = false;
    this._stream = null;
  };
  inherits(Pack, Readable);
  Pack.prototype.entry = function(header, buffer, callback) {
    if (this._stream)
      throw new Error("already piping an entry");
    if (this._finalized || this._destroyed)
      return;
    if (typeof buffer === "function") {
      callback = buffer;
      buffer = null;
    }
    if (!callback)
      callback = noop;
    var self2 = this;
    if (!header.size || header.type === "symlink")
      header.size = 0;
    if (!header.type)
      header.type = modeToType(header.mode);
    if (!header.mode)
      header.mode = header.type === "directory" ? DMODE : FMODE;
    if (!header.uid)
      header.uid = 0;
    if (!header.gid)
      header.gid = 0;
    if (!header.mtime)
      header.mtime = new Date();
    if (typeof buffer === "string")
      buffer = Buffer.from(buffer);
    if (Buffer.isBuffer(buffer)) {
      header.size = buffer.length;
      this._encode(header);
      var ok = this.push(buffer);
      overflow(self2, header.size);
      if (ok)
        process.nextTick(callback);
      else
        this._drain = callback;
      return new Void();
    }
    if (header.type === "symlink" && !header.linkname) {
      var linkSink = new LinkSink();
      eos(linkSink, function(err) {
        if (err) {
          self2.destroy();
          return callback(err);
        }
        header.linkname = linkSink.linkname;
        self2._encode(header);
        callback();
      });
      return linkSink;
    }
    this._encode(header);
    if (header.type !== "file" && header.type !== "contiguous-file") {
      process.nextTick(callback);
      return new Void();
    }
    var sink = new Sink(this);
    this._stream = sink;
    eos(sink, function(err) {
      self2._stream = null;
      if (err) {
        self2.destroy();
        return callback(err);
      }
      if (sink.written !== header.size) {
        self2.destroy();
        return callback(new Error("size mismatch"));
      }
      overflow(self2, header.size);
      if (self2._finalizing)
        self2.finalize();
      callback();
    });
    return sink;
  };
  Pack.prototype.finalize = function() {
    if (this._stream) {
      this._finalizing = true;
      return;
    }
    if (this._finalized)
      return;
    this._finalized = true;
    this.push(END_OF_TAR);
    this.push(null);
  };
  Pack.prototype.destroy = function(err) {
    if (this._destroyed)
      return;
    this._destroyed = true;
    if (err)
      this.emit("error", err);
    this.emit("close");
    if (this._stream && this._stream.destroy)
      this._stream.destroy();
  };
  Pack.prototype._encode = function(header) {
    if (!header.pax) {
      var buf = headers.encode(header);
      if (buf) {
        this.push(buf);
        return;
      }
    }
    this._encodePax(header);
  };
  Pack.prototype._encodePax = function(header) {
    var paxHeader = headers.encodePax({
      name: header.name,
      linkname: header.linkname,
      pax: header.pax
    });
    var newHeader = {
      name: "PaxHeader",
      mode: header.mode,
      uid: header.uid,
      gid: header.gid,
      size: paxHeader.length,
      mtime: header.mtime,
      type: "pax-header",
      linkname: header.linkname && "PaxHeader",
      uname: header.uname,
      gname: header.gname,
      devmajor: header.devmajor,
      devminor: header.devminor
    };
    this.push(headers.encode(newHeader));
    this.push(paxHeader);
    overflow(this, paxHeader.length);
    newHeader.size = header.size;
    newHeader.type = header.type;
    this.push(headers.encode(newHeader));
  };
  Pack.prototype._read = function(n) {
    var drain = this._drain;
    this._drain = noop;
    drain();
  };
  module3.exports = Pack;
});

// ../../node_modules/.pnpm/tar-stream@2.1.3/node_modules/tar-stream/index.js
var require_tar_stream = __commonJS((exports2) => {
  exports2.extract = require_extract2();
  exports2.pack = require_pack2();
});

// ../../node_modules/.pnpm/archiver@4.0.1/node_modules/archiver/lib/plugins/tar.js
var require_tar2 = __commonJS((exports2, module3) => {
  /**
   * TAR Format Plugin
   *
   * @module plugins/tar
   * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}
   * @copyright (c) 2012-2014 Chris Talkington, contributors.
   */
  var zlib = require("zlib");
  var engine = require_tar_stream();
  var util4 = require_archiver_utils();
  var Tar = function(options) {
    if (!(this instanceof Tar)) {
      return new Tar(options);
    }
    options = this.options = util4.defaults(options, {
      gzip: false
    });
    if (typeof options.gzipOptions !== "object") {
      options.gzipOptions = {};
    }
    this.supports = {
      directory: true,
      symlink: true
    };
    this.engine = engine.pack(options);
    this.compressor = false;
    if (options.gzip) {
      this.compressor = zlib.createGzip(options.gzipOptions);
      this.compressor.on("error", this._onCompressorError.bind(this));
    }
  };
  Tar.prototype._onCompressorError = function(err) {
    this.engine.emit("error", err);
  };
  Tar.prototype.append = function(source, data, callback) {
    var self2 = this;
    data.mtime = data.date;
    function append(err, sourceBuffer) {
      if (err) {
        callback(err);
        return;
      }
      self2.engine.entry(data, sourceBuffer, function(err2) {
        callback(err2, data);
      });
    }
    if (data.sourceType === "buffer") {
      append(null, source);
    } else if (data.sourceType === "stream" && data.stats) {
      data.size = data.stats.size;
      var entry = self2.engine.entry(data, function(err) {
        callback(err, data);
      });
      source.pipe(entry);
    } else if (data.sourceType === "stream") {
      util4.collectStream(source, append);
    }
  };
  Tar.prototype.finalize = function() {
    this.engine.finalize();
  };
  Tar.prototype.on = function() {
    return this.engine.on.apply(this.engine, arguments);
  };
  Tar.prototype.pipe = function(destination, options) {
    if (this.compressor) {
      return this.engine.pipe.apply(this.engine, [this.compressor]).pipe(destination, options);
    } else {
      return this.engine.pipe.apply(this.engine, arguments);
    }
  };
  Tar.prototype.unpipe = function() {
    if (this.compressor) {
      return this.compressor.unpipe.apply(this.compressor, arguments);
    } else {
      return this.engine.unpipe.apply(this.engine, arguments);
    }
  };
  module3.exports = Tar;
});

// ../../node_modules/.pnpm/archiver@4.0.1/node_modules/archiver/lib/plugins/json.js
var require_json = __commonJS((exports2, module3) => {
  /**
   * JSON Format Plugin
   *
   * @module plugins/json
   * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}
   * @copyright (c) 2012-2014 Chris Talkington, contributors.
   */
  var inherits = require("util").inherits;
  var Transform = require_readable2().Transform;
  var crc32 = require_buffer_crc32();
  var util4 = require_archiver_utils();
  var Json = function(options) {
    if (!(this instanceof Json)) {
      return new Json(options);
    }
    options = this.options = util4.defaults(options, {});
    Transform.call(this, options);
    this.supports = {
      directory: true,
      symlink: true
    };
    this.files = [];
  };
  inherits(Json, Transform);
  Json.prototype._transform = function(chunk, encoding, callback) {
    callback(null, chunk);
  };
  Json.prototype._writeStringified = function() {
    var fileString = JSON.stringify(this.files);
    this.write(fileString);
  };
  Json.prototype.append = function(source, data, callback) {
    var self2 = this;
    data.crc32 = 0;
    function onend(err, sourceBuffer) {
      if (err) {
        callback(err);
        return;
      }
      data.size = sourceBuffer.length || 0;
      data.crc32 = crc32.unsigned(sourceBuffer);
      self2.files.push(data);
      callback(null, data);
    }
    if (data.sourceType === "buffer") {
      onend(null, source);
    } else if (data.sourceType === "stream") {
      util4.collectStream(source, onend);
    }
  };
  Json.prototype.finalize = function() {
    this._writeStringified();
    this.end();
  };
  module3.exports = Json;
});

// ../../node_modules/.pnpm/archiver@4.0.1/node_modules/archiver/index.js
var require_archiver = __commonJS((exports2, module3) => {
  /**
   * Archiver Vending
   *
   * @ignore
   * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}
   * @copyright (c) 2012-2014 Chris Talkington, contributors.
   */
  var Archiver = require_core5();
  var formats = {};
  var vending = function(format11, options) {
    return vending.create(format11, options);
  };
  vending.create = function(format11, options) {
    if (formats[format11]) {
      var instance = new Archiver(format11, options);
      instance.setFormat(format11);
      instance.setModule(new formats[format11](options));
      return instance;
    } else {
      throw new Error("create(" + format11 + "): format not registered");
    }
  };
  vending.registerFormat = function(format11, module4) {
    if (formats[format11]) {
      throw new Error("register(" + format11 + "): format already registered");
    }
    if (typeof module4 !== "function") {
      throw new Error("register(" + format11 + "): format module invalid");
    }
    if (typeof module4.prototype.append !== "function" || typeof module4.prototype.finalize !== "function") {
      throw new Error("register(" + format11 + "): format module missing methods");
    }
    formats[format11] = module4;
  };
  vending.registerFormat("zip", require_zip());
  vending.registerFormat("tar", require_tar2());
  vending.registerFormat("json", require_json());
  module3.exports = vending;
});

// ../../node_modules/.pnpm/tmp@0.2.1/node_modules/tmp/lib/tmp.js
var require_tmp = __commonJS((exports2, module3) => {
  /*!
   * Tmp
   *
   * Copyright (c) 2011-2017 KARASZI Istvan <github@spam.raszi.hu>
   *
   * MIT Licensed
   */
  const fs17 = require("fs");
  const os3 = require("os");
  const path19 = require("path");
  const crypto = require("crypto");
  const _c = {fs: fs17.constants, os: os3.constants};
  const rimraf = require_rimraf();
  const RANDOM_CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
  const TEMPLATE_PATTERN = /XXXXXX/;
  const DEFAULT_TRIES = 3;
  const CREATE_FLAGS = (_c.O_CREAT || _c.fs.O_CREAT) | (_c.O_EXCL || _c.fs.O_EXCL) | (_c.O_RDWR || _c.fs.O_RDWR);
  const IS_WIN32 = os3.platform() === "win32";
  const EBADF = _c.EBADF || _c.os.errno.EBADF;
  const ENOENT = _c.ENOENT || _c.os.errno.ENOENT;
  const DIR_MODE = 448;
  const FILE_MODE = 384;
  const EXIT = "exit";
  const _removeObjects = [];
  const FN_RMDIR_SYNC = fs17.rmdirSync.bind(fs17);
  const FN_RIMRAF_SYNC = rimraf.sync;
  let _gracefulCleanup = false;
  function tmpName(options, callback) {
    const args2 = _parseArguments(options, callback), opts = args2[0], cb = args2[1];
    try {
      _assertAndSanitizeOptions(opts);
    } catch (err) {
      return cb(err);
    }
    let tries = opts.tries;
    (function _getUniqueName() {
      try {
        const name = _generateTmpName(opts);
        fs17.stat(name, function(err) {
          if (!err) {
            if (tries-- > 0)
              return _getUniqueName();
            return cb(new Error("Could not get a unique tmp filename, max tries reached " + name));
          }
          cb(null, name);
        });
      } catch (err) {
        cb(err);
      }
    })();
  }
  function tmpNameSync(options) {
    const args2 = _parseArguments(options), opts = args2[0];
    _assertAndSanitizeOptions(opts);
    let tries = opts.tries;
    do {
      const name = _generateTmpName(opts);
      try {
        fs17.statSync(name);
      } catch (e) {
        return name;
      }
    } while (tries-- > 0);
    throw new Error("Could not get a unique tmp filename, max tries reached");
  }
  function file(options, callback) {
    const args2 = _parseArguments(options, callback), opts = args2[0], cb = args2[1];
    tmpName(opts, function _tmpNameCreated(err, name) {
      if (err)
        return cb(err);
      fs17.open(name, CREATE_FLAGS, opts.mode || FILE_MODE, function _fileCreated(err2, fd) {
        if (err2)
          return cb(err2);
        if (opts.discardDescriptor) {
          return fs17.close(fd, function _discardCallback(possibleErr) {
            return cb(possibleErr, name, void 0, _prepareTmpFileRemoveCallback(name, -1, opts, false));
          });
        } else {
          const discardOrDetachDescriptor = opts.discardDescriptor || opts.detachDescriptor;
          cb(null, name, fd, _prepareTmpFileRemoveCallback(name, discardOrDetachDescriptor ? -1 : fd, opts, false));
        }
      });
    });
  }
  function fileSync(options) {
    const args2 = _parseArguments(options), opts = args2[0];
    const discardOrDetachDescriptor = opts.discardDescriptor || opts.detachDescriptor;
    const name = tmpNameSync(opts);
    var fd = fs17.openSync(name, CREATE_FLAGS, opts.mode || FILE_MODE);
    if (opts.discardDescriptor) {
      fs17.closeSync(fd);
      fd = void 0;
    }
    return {
      name,
      fd,
      removeCallback: _prepareTmpFileRemoveCallback(name, discardOrDetachDescriptor ? -1 : fd, opts, true)
    };
  }
  function dir(options, callback) {
    const args2 = _parseArguments(options, callback), opts = args2[0], cb = args2[1];
    tmpName(opts, function _tmpNameCreated(err, name) {
      if (err)
        return cb(err);
      fs17.mkdir(name, opts.mode || DIR_MODE, function _dirCreated(err2) {
        if (err2)
          return cb(err2);
        cb(null, name, _prepareTmpDirRemoveCallback(name, opts, false));
      });
    });
  }
  function dirSync(options) {
    const args2 = _parseArguments(options), opts = args2[0];
    const name = tmpNameSync(opts);
    fs17.mkdirSync(name, opts.mode || DIR_MODE);
    return {
      name,
      removeCallback: _prepareTmpDirRemoveCallback(name, opts, true)
    };
  }
  function _removeFileAsync(fdPath, next) {
    const _handler = function(err) {
      if (err && !_isENOENT(err)) {
        return next(err);
      }
      next();
    };
    if (0 <= fdPath[0])
      fs17.close(fdPath[0], function() {
        fs17.unlink(fdPath[1], _handler);
      });
    else
      fs17.unlink(fdPath[1], _handler);
  }
  function _removeFileSync(fdPath) {
    let rethrownException = null;
    try {
      if (0 <= fdPath[0])
        fs17.closeSync(fdPath[0]);
    } catch (e) {
      if (!_isEBADF(e) && !_isENOENT(e))
        throw e;
    } finally {
      try {
        fs17.unlinkSync(fdPath[1]);
      } catch (e) {
        if (!_isENOENT(e))
          rethrownException = e;
      }
    }
    if (rethrownException !== null) {
      throw rethrownException;
    }
  }
  function _prepareTmpFileRemoveCallback(name, fd, opts, sync) {
    const removeCallbackSync = _prepareRemoveCallback(_removeFileSync, [fd, name], sync);
    const removeCallback = _prepareRemoveCallback(_removeFileAsync, [fd, name], sync, removeCallbackSync);
    if (!opts.keep)
      _removeObjects.unshift(removeCallbackSync);
    return sync ? removeCallbackSync : removeCallback;
  }
  function _prepareTmpDirRemoveCallback(name, opts, sync) {
    const removeFunction = opts.unsafeCleanup ? rimraf : fs17.rmdir.bind(fs17);
    const removeFunctionSync = opts.unsafeCleanup ? FN_RIMRAF_SYNC : FN_RMDIR_SYNC;
    const removeCallbackSync = _prepareRemoveCallback(removeFunctionSync, name, sync);
    const removeCallback = _prepareRemoveCallback(removeFunction, name, sync, removeCallbackSync);
    if (!opts.keep)
      _removeObjects.unshift(removeCallbackSync);
    return sync ? removeCallbackSync : removeCallback;
  }
  function _prepareRemoveCallback(removeFunction, fileOrDirName, sync, cleanupCallbackSync) {
    let called = false;
    return function _cleanupCallback(next) {
      if (!called) {
        const toRemove = cleanupCallbackSync || _cleanupCallback;
        const index = _removeObjects.indexOf(toRemove);
        if (index >= 0)
          _removeObjects.splice(index, 1);
        called = true;
        if (sync || removeFunction === FN_RMDIR_SYNC || removeFunction === FN_RIMRAF_SYNC) {
          return removeFunction(fileOrDirName);
        } else {
          return removeFunction(fileOrDirName, next || function() {
          });
        }
      }
    };
  }
  function _garbageCollector() {
    if (!_gracefulCleanup)
      return;
    while (_removeObjects.length) {
      try {
        _removeObjects[0]();
      } catch (e) {
      }
    }
  }
  function _randomChars(howMany) {
    let value = [], rnd = null;
    try {
      rnd = crypto.randomBytes(howMany);
    } catch (e) {
      rnd = crypto.pseudoRandomBytes(howMany);
    }
    for (var i = 0; i < howMany; i++) {
      value.push(RANDOM_CHARS[rnd[i] % RANDOM_CHARS.length]);
    }
    return value.join("");
  }
  function _isBlank(s) {
    return s === null || _isUndefined(s) || !s.trim();
  }
  function _isUndefined(obj) {
    return typeof obj === "undefined";
  }
  function _parseArguments(options, callback) {
    if (typeof options === "function") {
      return [{}, options];
    }
    if (_isUndefined(options)) {
      return [{}, callback];
    }
    const actualOptions = {};
    for (const key of Object.getOwnPropertyNames(options)) {
      actualOptions[key] = options[key];
    }
    return [actualOptions, callback];
  }
  function _generateTmpName(opts) {
    const tmpDir = opts.tmpdir;
    if (!_isUndefined(opts.name))
      return path19.join(tmpDir, opts.dir, opts.name);
    if (!_isUndefined(opts.template))
      return path19.join(tmpDir, opts.dir, opts.template).replace(TEMPLATE_PATTERN, _randomChars(6));
    const name = [
      opts.prefix ? opts.prefix : "tmp",
      "-",
      process.pid,
      "-",
      _randomChars(12),
      opts.postfix ? "-" + opts.postfix : ""
    ].join("");
    return path19.join(tmpDir, opts.dir, name);
  }
  function _assertAndSanitizeOptions(options) {
    options.tmpdir = _getTmpDir(options);
    const tmpDir = options.tmpdir;
    if (!_isUndefined(options.name))
      _assertIsRelative(options.name, "name", tmpDir);
    if (!_isUndefined(options.dir))
      _assertIsRelative(options.dir, "dir", tmpDir);
    if (!_isUndefined(options.template)) {
      _assertIsRelative(options.template, "template", tmpDir);
      if (!options.template.match(TEMPLATE_PATTERN))
        throw new Error(`Invalid template, found "${options.template}".`);
    }
    if (!_isUndefined(options.tries) && isNaN(options.tries) || options.tries < 0)
      throw new Error(`Invalid tries, found "${options.tries}".`);
    options.tries = _isUndefined(options.name) ? options.tries || DEFAULT_TRIES : 1;
    options.keep = !!options.keep;
    options.detachDescriptor = !!options.detachDescriptor;
    options.discardDescriptor = !!options.discardDescriptor;
    options.unsafeCleanup = !!options.unsafeCleanup;
    options.dir = _isUndefined(options.dir) ? "" : path19.relative(tmpDir, _resolvePath(options.dir, tmpDir));
    options.template = _isUndefined(options.template) ? void 0 : path19.relative(tmpDir, _resolvePath(options.template, tmpDir));
    options.template = _isBlank(options.template) ? void 0 : path19.relative(options.dir, options.template);
    options.name = _isUndefined(options.name) ? void 0 : _sanitizeName(options.name);
    options.prefix = _isUndefined(options.prefix) ? "" : options.prefix;
    options.postfix = _isUndefined(options.postfix) ? "" : options.postfix;
  }
  function _resolvePath(name, tmpDir) {
    const sanitizedName = _sanitizeName(name);
    if (sanitizedName.startsWith(tmpDir)) {
      return path19.resolve(sanitizedName);
    } else {
      return path19.resolve(path19.join(tmpDir, sanitizedName));
    }
  }
  function _sanitizeName(name) {
    if (_isBlank(name)) {
      return name;
    }
    return name.replace(/["']/g, "");
  }
  function _assertIsRelative(name, option, tmpDir) {
    if (option === "name") {
      if (path19.isAbsolute(name))
        throw new Error(`${option} option must not contain an absolute path, found "${name}".`);
      let basename = path19.basename(name);
      if (basename === ".." || basename === "." || basename !== name)
        throw new Error(`${option} option must not contain a path, found "${name}".`);
    } else {
      if (path19.isAbsolute(name) && !name.startsWith(tmpDir)) {
        throw new Error(`${option} option must be relative to "${tmpDir}", found "${name}".`);
      }
      let resolvedPath = _resolvePath(name, tmpDir);
      if (!resolvedPath.startsWith(tmpDir))
        throw new Error(`${option} option must be relative to "${tmpDir}", found "${resolvedPath}".`);
    }
  }
  function _isEBADF(error) {
    return _isExpectedError(error, -EBADF, "EBADF");
  }
  function _isENOENT(error) {
    return _isExpectedError(error, -ENOENT, "ENOENT");
  }
  function _isExpectedError(error, errno, code) {
    return IS_WIN32 ? error.code === code : error.code === code && error.errno === errno;
  }
  function setGracefulCleanup() {
    _gracefulCleanup = true;
  }
  function _getTmpDir(options) {
    return path19.resolve(_sanitizeName(options && options.tmpdir || os3.tmpdir()));
  }
  process.addListener(EXIT, _garbageCollector);
  Object.defineProperty(module3.exports, "tmpdir", {
    enumerable: true,
    configurable: false,
    get: function() {
      return _getTmpDir();
    }
  });
  module3.exports.dir = dir;
  module3.exports.dirSync = dirSync;
  module3.exports.file = file;
  module3.exports.fileSync = fileSync;
  module3.exports.tmpName = tmpName;
  module3.exports.tmpNameSync = tmpNameSync;
  module3.exports.setGracefulCleanup = setGracefulCleanup;
});

// ../../node_modules/.pnpm/ci-info@2.0.0/node_modules/ci-info/vendors.json
var require_vendors = __commonJS((exports2, module3) => {
  module3.exports = [
    {
      name: "AppVeyor",
      constant: "APPVEYOR",
      env: "APPVEYOR",
      pr: "APPVEYOR_PULL_REQUEST_NUMBER"
    },
    {
      name: "Azure Pipelines",
      constant: "AZURE_PIPELINES",
      env: "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI",
      pr: "SYSTEM_PULLREQUEST_PULLREQUESTID"
    },
    {
      name: "Bamboo",
      constant: "BAMBOO",
      env: "bamboo_planKey"
    },
    {
      name: "Bitbucket Pipelines",
      constant: "BITBUCKET",
      env: "BITBUCKET_COMMIT",
      pr: "BITBUCKET_PR_ID"
    },
    {
      name: "Bitrise",
      constant: "BITRISE",
      env: "BITRISE_IO",
      pr: "BITRISE_PULL_REQUEST"
    },
    {
      name: "Buddy",
      constant: "BUDDY",
      env: "BUDDY_WORKSPACE_ID",
      pr: "BUDDY_EXECUTION_PULL_REQUEST_ID"
    },
    {
      name: "Buildkite",
      constant: "BUILDKITE",
      env: "BUILDKITE",
      pr: {env: "BUILDKITE_PULL_REQUEST", ne: "false"}
    },
    {
      name: "CircleCI",
      constant: "CIRCLE",
      env: "CIRCLECI",
      pr: "CIRCLE_PULL_REQUEST"
    },
    {
      name: "Cirrus CI",
      constant: "CIRRUS",
      env: "CIRRUS_CI",
      pr: "CIRRUS_PR"
    },
    {
      name: "AWS CodeBuild",
      constant: "CODEBUILD",
      env: "CODEBUILD_BUILD_ARN"
    },
    {
      name: "Codeship",
      constant: "CODESHIP",
      env: {CI_NAME: "codeship"}
    },
    {
      name: "Drone",
      constant: "DRONE",
      env: "DRONE",
      pr: {DRONE_BUILD_EVENT: "pull_request"}
    },
    {
      name: "dsari",
      constant: "DSARI",
      env: "DSARI"
    },
    {
      name: "GitLab CI",
      constant: "GITLAB",
      env: "GITLAB_CI"
    },
    {
      name: "GoCD",
      constant: "GOCD",
      env: "GO_PIPELINE_LABEL"
    },
    {
      name: "Hudson",
      constant: "HUDSON",
      env: "HUDSON_URL"
    },
    {
      name: "Jenkins",
      constant: "JENKINS",
      env: ["JENKINS_URL", "BUILD_ID"],
      pr: {any: ["ghprbPullId", "CHANGE_ID"]}
    },
    {
      name: "Magnum CI",
      constant: "MAGNUM",
      env: "MAGNUM"
    },
    {
      name: "Netlify CI",
      constant: "NETLIFY",
      env: "NETLIFY_BUILD_BASE",
      pr: {env: "PULL_REQUEST", ne: "false"}
    },
    {
      name: "Sail CI",
      constant: "SAIL",
      env: "SAILCI",
      pr: "SAIL_PULL_REQUEST_NUMBER"
    },
    {
      name: "Semaphore",
      constant: "SEMAPHORE",
      env: "SEMAPHORE",
      pr: "PULL_REQUEST_NUMBER"
    },
    {
      name: "Shippable",
      constant: "SHIPPABLE",
      env: "SHIPPABLE",
      pr: {IS_PULL_REQUEST: "true"}
    },
    {
      name: "Solano CI",
      constant: "SOLANO",
      env: "TDDIUM",
      pr: "TDDIUM_PR_ID"
    },
    {
      name: "Strider CD",
      constant: "STRIDER",
      env: "STRIDER"
    },
    {
      name: "TaskCluster",
      constant: "TASKCLUSTER",
      env: ["TASK_ID", "RUN_ID"]
    },
    {
      name: "TeamCity",
      constant: "TEAMCITY",
      env: "TEAMCITY_VERSION"
    },
    {
      name: "Travis CI",
      constant: "TRAVIS",
      env: "TRAVIS",
      pr: {env: "TRAVIS_PULL_REQUEST", ne: "false"}
    }
  ];
});

// ../../node_modules/.pnpm/ci-info@2.0.0/node_modules/ci-info/index.js
var require_ci_info = __commonJS((exports2) => {
  "use strict";
  var vendors = require_vendors();
  var env = process.env;
  Object.defineProperty(exports2, "_vendors", {
    value: vendors.map(function(v) {
      return v.constant;
    })
  });
  exports2.name = null;
  exports2.isPR = null;
  vendors.forEach(function(vendor) {
    var envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];
    var isCI = envs.every(function(obj) {
      return checkEnv(obj);
    });
    exports2[vendor.constant] = isCI;
    if (isCI) {
      exports2.name = vendor.name;
      switch (typeof vendor.pr) {
        case "string":
          exports2.isPR = !!env[vendor.pr];
          break;
        case "object":
          if ("env" in vendor.pr) {
            exports2.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne;
          } else if ("any" in vendor.pr) {
            exports2.isPR = vendor.pr.any.some(function(key) {
              return !!env[key];
            });
          } else {
            exports2.isPR = checkEnv(vendor.pr);
          }
          break;
        default:
          exports2.isPR = null;
      }
    }
  });
  exports2.isCI = !!(env.CI || env.CONTINUOUS_INTEGRATION || env.BUILD_NUMBER || env.RUN_ID || exports2.name || false);
  function checkEnv(obj) {
    if (typeof obj === "string")
      return !!env[obj];
    return Object.keys(obj).every(function(k) {
      return env[k] === obj[k];
    });
  }
});

// ../../node_modules/.pnpm/checkpoint-client@1.1.14/node_modules/checkpoint-client/dist/index.js
var require_dist10 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  var fs17 = require("fs");
  var path19 = require("path");
  var crypto = require("crypto");
  var os3 = require("os");
  var util4 = require("util");
  var cp = require("child_process");
  function _interopDefaultLegacy(e) {
    return e && typeof e === "object" && "default" in e ? e : {default: e};
  }
  var fs__default = /* @__PURE__ */ _interopDefaultLegacy(fs17);
  var path__default = /* @__PURE__ */ _interopDefaultLegacy(path19);
  var crypto__default = /* @__PURE__ */ _interopDefaultLegacy(crypto);
  var os__default = /* @__PURE__ */ _interopDefaultLegacy(os3);
  var util__default = /* @__PURE__ */ _interopDefaultLegacy(util4);
  var cp__default = /* @__PURE__ */ _interopDefaultLegacy(cp);
  const {open: open3, write, close, rename, fsync, unlink} = fs__default["default"];
  const {join, dirname} = path__default["default"];
  var counter = 0;
  function cleanup(dest, err, cb) {
    unlink(dest, function() {
      cb(err);
    });
  }
  function closeAndCleanup(fd, dest, err, cb) {
    close(fd, cleanup.bind(null, dest, err, cb));
  }
  function writeLoop(fd, content, contentLength, offset, cb) {
    write(fd, content, offset, function(err, bytesWritten) {
      if (err) {
        cb(err);
        return;
      }
      return bytesWritten < contentLength - offset ? writeLoop(fd, content, contentLength, offset + bytesWritten, cb) : cb(null);
    });
  }
  function openLoop(dest, cb) {
    open3(dest, "w", function(err, fd) {
      if (err) {
        return err.code === "EMFILE" ? openLoop(dest, cb) : cb(err);
      }
      cb(null, fd);
    });
  }
  function writeAtomic(path20, content, cb) {
    const tmp = join(dirname(path20), "." + process.pid + "." + counter++);
    openLoop(tmp, function(err, fd) {
      if (err) {
        cb(err);
        return;
      }
      const contentLength = Buffer.byteLength(content);
      writeLoop(fd, content, contentLength, 0, function(err2) {
        if (err2) {
          closeAndCleanup(fd, tmp, err2, cb);
          return;
        }
        fsync(fd, function(err3) {
          if (err3) {
            closeAndCleanup(fd, tmp, err3, cb);
            return;
          }
          close(fd, function(err4) {
            if (err4) {
              cleanup(tmp, err4, cb);
              return;
            }
            rename(tmp, path20, (err5) => {
              if (err5) {
                cleanup(tmp, err5, cb);
                return;
              }
              cb(null);
            });
          });
        });
      });
      content = null;
    });
  }
  var fastWriteAtomic = writeAtomic;
  const rnds8 = new Uint8Array(16);
  function rng() {
    return crypto__default["default"].randomFillSync(rnds8);
  }
  var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  function validate(uuid) {
    return typeof uuid === "string" && REGEX.test(uuid);
  }
  const byteToHex = [];
  for (let i = 0; i < 256; ++i) {
    byteToHex.push((i + 256).toString(16).substr(1));
  }
  function stringify(arr, offset = 0) {
    const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
    if (!validate(uuid)) {
      throw TypeError("Stringified UUID is invalid");
    }
    return uuid;
  }
  function v4(options, buf, offset) {
    options = options || {};
    const rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = rnds[i];
      }
      return buf;
    }
    return stringify(rnds);
  }
  const homedir = os__default["default"].homedir();
  const tmpdir = os__default["default"].tmpdir();
  const {env} = process;
  const macos = (name) => {
    const library = path__default["default"].join(homedir, "Library");
    return {
      data: path__default["default"].join(library, "Application Support", name),
      config: path__default["default"].join(library, "Preferences", name),
      cache: path__default["default"].join(library, "Caches", name),
      log: path__default["default"].join(library, "Logs", name),
      temp: path__default["default"].join(tmpdir, name)
    };
  };
  const windows = (name) => {
    const appData = env.APPDATA || path__default["default"].join(homedir, "AppData", "Roaming");
    const localAppData = env.LOCALAPPDATA || path__default["default"].join(homedir, "AppData", "Local");
    return {
      data: path__default["default"].join(localAppData, name, "Data"),
      config: path__default["default"].join(appData, name, "Config"),
      cache: path__default["default"].join(localAppData, name, "Cache"),
      log: path__default["default"].join(localAppData, name, "Log"),
      temp: path__default["default"].join(tmpdir, name)
    };
  };
  const linux = (name) => {
    const username = path__default["default"].basename(homedir);
    return {
      data: path__default["default"].join(env.XDG_DATA_HOME || path__default["default"].join(homedir, ".local", "share"), name),
      config: path__default["default"].join(env.XDG_CONFIG_HOME || path__default["default"].join(homedir, ".config"), name),
      cache: path__default["default"].join(env.XDG_CACHE_HOME || path__default["default"].join(homedir, ".cache"), name),
      log: path__default["default"].join(env.XDG_STATE_HOME || path__default["default"].join(homedir, ".local", "state"), name),
      temp: path__default["default"].join(tmpdir, username, name)
    };
  };
  const envPaths = (name, options) => {
    if (typeof name !== "string") {
      throw new TypeError(`Expected string, got ${typeof name}`);
    }
    options = Object.assign({suffix: "nodejs"}, options);
    if (options.suffix) {
      name += `-${options.suffix}`;
    }
    if (process.platform === "darwin") {
      return macos(name);
    }
    if (process.platform === "win32") {
      return windows(name);
    }
    return linux(name);
  };
  var envPaths_1 = envPaths;
  var _default = envPaths;
  envPaths_1.default = _default;
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function createCommonjsModule(fn, basedir, module4) {
    return module4 = {
      path: basedir,
      exports: {},
      require: function(path20, base) {
        return commonjsRequire(path20, base === void 0 || base === null ? module4.path : base);
      }
    }, fn(module4, module4.exports), module4.exports;
  }
  function commonjsRequire() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
  }
  var semver = createCommonjsModule(function(module4, exports3) {
    exports3 = module4.exports = SemVer;
    var debug3;
    if (typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
      debug3 = function() {
        var args2 = Array.prototype.slice.call(arguments, 0);
        args2.unshift("SEMVER");
        console.log.apply(console, args2);
      };
    } else {
      debug3 = function() {
      };
    }
    exports3.SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var re = exports3.re = [];
    var src = exports3.src = [];
    var t = exports3.tokens = {};
    var R = 0;
    function tok(n) {
      t[n] = R++;
    }
    tok("NUMERICIDENTIFIER");
    src[t.NUMERICIDENTIFIER] = "0|[1-9]\\d*";
    tok("NUMERICIDENTIFIERLOOSE");
    src[t.NUMERICIDENTIFIERLOOSE] = "[0-9]+";
    tok("NONNUMERICIDENTIFIER");
    src[t.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
    tok("MAINVERSION");
    src[t.MAINVERSION] = "(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")";
    tok("MAINVERSIONLOOSE");
    src[t.MAINVERSIONLOOSE] = "(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")";
    tok("PRERELEASEIDENTIFIER");
    src[t.PRERELEASEIDENTIFIER] = "(?:" + src[t.NUMERICIDENTIFIER] + "|" + src[t.NONNUMERICIDENTIFIER] + ")";
    tok("PRERELEASEIDENTIFIERLOOSE");
    src[t.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t.NUMERICIDENTIFIERLOOSE] + "|" + src[t.NONNUMERICIDENTIFIER] + ")";
    tok("PRERELEASE");
    src[t.PRERELEASE] = "(?:-(" + src[t.PRERELEASEIDENTIFIER] + "(?:\\." + src[t.PRERELEASEIDENTIFIER] + ")*))";
    tok("PRERELEASELOOSE");
    src[t.PRERELEASELOOSE] = "(?:-?(" + src[t.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t.PRERELEASEIDENTIFIERLOOSE] + ")*))";
    tok("BUILDIDENTIFIER");
    src[t.BUILDIDENTIFIER] = "[0-9A-Za-z-]+";
    tok("BUILD");
    src[t.BUILD] = "(?:\\+(" + src[t.BUILDIDENTIFIER] + "(?:\\." + src[t.BUILDIDENTIFIER] + ")*))";
    tok("FULL");
    tok("FULLPLAIN");
    src[t.FULLPLAIN] = "v?" + src[t.MAINVERSION] + src[t.PRERELEASE] + "?" + src[t.BUILD] + "?";
    src[t.FULL] = "^" + src[t.FULLPLAIN] + "$";
    tok("LOOSEPLAIN");
    src[t.LOOSEPLAIN] = "[v=\\s]*" + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + "?" + src[t.BUILD] + "?";
    tok("LOOSE");
    src[t.LOOSE] = "^" + src[t.LOOSEPLAIN] + "$";
    tok("GTLT");
    src[t.GTLT] = "((?:<|>)?=?)";
    tok("XRANGEIDENTIFIERLOOSE");
    src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
    tok("XRANGEIDENTIFIER");
    src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + "|x|X|\\*";
    tok("XRANGEPLAIN");
    src[t.XRANGEPLAIN] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:" + src[t.PRERELEASE] + ")?" + src[t.BUILD] + "?)?)?";
    tok("XRANGEPLAINLOOSE");
    src[t.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t.PRERELEASELOOSE] + ")?" + src[t.BUILD] + "?)?)?";
    tok("XRANGE");
    src[t.XRANGE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAIN] + "$";
    tok("XRANGELOOSE");
    src[t.XRANGELOOSE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAINLOOSE] + "$";
    tok("COERCE");
    src[t.COERCE] = "(^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
    tok("COERCERTL");
    re[t.COERCERTL] = new RegExp(src[t.COERCE], "g");
    tok("LONETILDE");
    src[t.LONETILDE] = "(?:~>?)";
    tok("TILDETRIM");
    src[t.TILDETRIM] = "(\\s*)" + src[t.LONETILDE] + "\\s+";
    re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], "g");
    var tildeTrimReplace = "$1~";
    tok("TILDE");
    src[t.TILDE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAIN] + "$";
    tok("TILDELOOSE");
    src[t.TILDELOOSE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + "$";
    tok("LONECARET");
    src[t.LONECARET] = "(?:\\^)";
    tok("CARETTRIM");
    src[t.CARETTRIM] = "(\\s*)" + src[t.LONECARET] + "\\s+";
    re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], "g");
    var caretTrimReplace = "$1^";
    tok("CARET");
    src[t.CARET] = "^" + src[t.LONECARET] + src[t.XRANGEPLAIN] + "$";
    tok("CARETLOOSE");
    src[t.CARETLOOSE] = "^" + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + "$";
    tok("COMPARATORLOOSE");
    src[t.COMPARATORLOOSE] = "^" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + ")$|^$";
    tok("COMPARATOR");
    src[t.COMPARATOR] = "^" + src[t.GTLT] + "\\s*(" + src[t.FULLPLAIN] + ")$|^$";
    tok("COMPARATORTRIM");
    src[t.COMPARATORTRIM] = "(\\s*)" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + "|" + src[t.XRANGEPLAIN] + ")";
    re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], "g");
    var comparatorTrimReplace = "$1$2$3";
    tok("HYPHENRANGE");
    src[t.HYPHENRANGE] = "^\\s*(" + src[t.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t.XRANGEPLAIN] + ")\\s*$";
    tok("HYPHENRANGELOOSE");
    src[t.HYPHENRANGELOOSE] = "^\\s*(" + src[t.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t.XRANGEPLAINLOOSE] + ")\\s*$";
    tok("STAR");
    src[t.STAR] = "(<|>)?=?\\s*\\*";
    for (var i = 0; i < R; i++) {
      debug3(i, src[i]);
      if (!re[i]) {
        re[i] = new RegExp(src[i]);
      }
    }
    exports3.parse = parse2;
    function parse2(version, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version !== "string") {
        return null;
      }
      if (version.length > MAX_LENGTH) {
        return null;
      }
      var r = options.loose ? re[t.LOOSE] : re[t.FULL];
      if (!r.test(version)) {
        return null;
      }
      try {
        return new SemVer(version, options);
      } catch (er) {
        return null;
      }
    }
    exports3.valid = valid;
    function valid(version, options) {
      var v = parse2(version, options);
      return v ? v.version : null;
    }
    exports3.clean = clean;
    function clean(version, options) {
      var s2 = parse2(version.trim().replace(/^[=v]+/, ""), options);
      return s2 ? s2.version : null;
    }
    exports3.SemVer = SemVer;
    function SemVer(version, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        if (version.loose === options.loose) {
          return version;
        } else {
          version = version.version;
        }
      } else if (typeof version !== "string") {
        throw new TypeError("Invalid Version: " + version);
      }
      if (version.length > MAX_LENGTH) {
        throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
      }
      if (!(this instanceof SemVer)) {
        return new SemVer(version, options);
      }
      debug3("SemVer", version, options);
      this.options = options;
      this.loose = !!options.loose;
      var m2 = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
      if (!m2) {
        throw new TypeError("Invalid Version: " + version);
      }
      this.raw = version;
      this.major = +m2[1];
      this.minor = +m2[2];
      this.patch = +m2[3];
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m2[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m2[4].split(".").map(function(id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }
          return id;
        });
      }
      this.build = m2[5] ? m2[5].split(".") : [];
      this.format();
    }
    SemVer.prototype.format = function() {
      this.version = this.major + "." + this.minor + "." + this.patch;
      if (this.prerelease.length) {
        this.version += "-" + this.prerelease.join(".");
      }
      return this.version;
    };
    SemVer.prototype.toString = function() {
      return this.version;
    };
    SemVer.prototype.compare = function(other) {
      debug3("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return this.compareMain(other) || this.comparePre(other);
    };
    SemVer.prototype.compareMain = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    };
    SemVer.prototype.comparePre = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      var i2 = 0;
      do {
        var a = this.prerelease[i2];
        var b = other.prerelease[i2];
        debug3("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    };
    SemVer.prototype.compareBuild = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      var i2 = 0;
      do {
        var a = this.build[i2];
        var b = other.build[i2];
        debug3("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    };
    SemVer.prototype.inc = function(release, identifier) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier);
          this.inc("pre", identifier);
          break;
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier);
          }
          this.inc("pre", identifier);
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case "pre":
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i2 = this.prerelease.length;
            while (--i2 >= 0) {
              if (typeof this.prerelease[i2] === "number") {
                this.prerelease[i2]++;
                i2 = -2;
              }
            }
            if (i2 === -1) {
              this.prerelease.push(0);
            }
          }
          if (identifier) {
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0];
              }
            } else {
              this.prerelease = [identifier, 0];
            }
          }
          break;
        default:
          throw new Error("invalid increment argument: " + release);
      }
      this.format();
      this.raw = this.version;
      return this;
    };
    exports3.inc = inc;
    function inc(version, release, loose, identifier) {
      if (typeof loose === "string") {
        identifier = loose;
        loose = void 0;
      }
      try {
        return new SemVer(version, loose).inc(release, identifier).version;
      } catch (er) {
        return null;
      }
    }
    exports3.diff = diff;
    function diff(version1, version2) {
      if (eq(version1, version2)) {
        return null;
      } else {
        var v1 = parse2(version1);
        var v2 = parse2(version2);
        var prefix = "";
        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = "pre";
          var defaultResult = "prerelease";
        }
        for (var key in v1) {
          if (key === "major" || key === "minor" || key === "patch") {
            if (v1[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }
        return defaultResult;
      }
    }
    exports3.compareIdentifiers = compareIdentifiers;
    var numeric = /^[0-9]+$/;
    function compareIdentifiers(a, b) {
      var anum = numeric.test(a);
      var bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    }
    exports3.rcompareIdentifiers = rcompareIdentifiers;
    function rcompareIdentifiers(a, b) {
      return compareIdentifiers(b, a);
    }
    exports3.major = major;
    function major(a, loose) {
      return new SemVer(a, loose).major;
    }
    exports3.minor = minor;
    function minor(a, loose) {
      return new SemVer(a, loose).minor;
    }
    exports3.patch = patch;
    function patch(a, loose) {
      return new SemVer(a, loose).patch;
    }
    exports3.compare = compare;
    function compare(a, b, loose) {
      return new SemVer(a, loose).compare(new SemVer(b, loose));
    }
    exports3.compareLoose = compareLoose;
    function compareLoose(a, b) {
      return compare(a, b, true);
    }
    exports3.compareBuild = compareBuild;
    function compareBuild(a, b, loose) {
      var versionA = new SemVer(a, loose);
      var versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    }
    exports3.rcompare = rcompare;
    function rcompare(a, b, loose) {
      return compare(b, a, loose);
    }
    exports3.sort = sort;
    function sort(list, loose) {
      return list.sort(function(a, b) {
        return exports3.compareBuild(a, b, loose);
      });
    }
    exports3.rsort = rsort;
    function rsort(list, loose) {
      return list.sort(function(a, b) {
        return exports3.compareBuild(b, a, loose);
      });
    }
    exports3.gt = gt;
    function gt(a, b, loose) {
      return compare(a, b, loose) > 0;
    }
    exports3.lt = lt;
    function lt(a, b, loose) {
      return compare(a, b, loose) < 0;
    }
    exports3.eq = eq;
    function eq(a, b, loose) {
      return compare(a, b, loose) === 0;
    }
    exports3.neq = neq;
    function neq(a, b, loose) {
      return compare(a, b, loose) !== 0;
    }
    exports3.gte = gte;
    function gte(a, b, loose) {
      return compare(a, b, loose) >= 0;
    }
    exports3.lte = lte;
    function lte(a, b, loose) {
      return compare(a, b, loose) <= 0;
    }
    exports3.cmp = cmp;
    function cmp(a, op, b, loose) {
      switch (op) {
        case "===":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a === b;
        case "!==":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError("Invalid operator: " + op);
      }
    }
    exports3.Comparator = Comparator;
    function Comparator(comp, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }
      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options);
      }
      debug3("comparator", comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);
      if (this.semver === ANY) {
        this.value = "";
      } else {
        this.value = this.operator + this.semver.version;
      }
      debug3("comp", this);
    }
    var ANY = {};
    Comparator.prototype.parse = function(comp) {
      var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
      var m2 = comp.match(r);
      if (!m2) {
        throw new TypeError("Invalid comparator: " + comp);
      }
      this.operator = m2[1] !== void 0 ? m2[1] : "";
      if (this.operator === "=") {
        this.operator = "";
      }
      if (!m2[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m2[2], this.options.loose);
      }
    };
    Comparator.prototype.toString = function() {
      return this.value;
    };
    Comparator.prototype.test = function(version) {
      debug3("Comparator.test", version, this.options.loose);
      if (this.semver === ANY || version === ANY) {
        return true;
      }
      if (typeof version === "string") {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }
      return cmp(version, this.operator, this.semver, this.options);
    };
    Comparator.prototype.intersects = function(comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError("a Comparator is required");
      }
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      var rangeTmp;
      if (this.operator === "") {
        if (this.value === "") {
          return true;
        }
        rangeTmp = new Range(comp.value, options);
        return satisfies(this.value, rangeTmp, options);
      } else if (comp.operator === "") {
        if (comp.value === "") {
          return true;
        }
        rangeTmp = new Range(this.value, options);
        return satisfies(comp.semver, rangeTmp, options);
      }
      var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
      var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
      var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && ((this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"));
      var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ((this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">"));
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    };
    exports3.Range = Range;
    function Range(range, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }
      if (range instanceof Comparator) {
        return new Range(range.value, options);
      }
      if (!(this instanceof Range)) {
        return new Range(range, options);
      }
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      this.raw = range;
      this.set = range.split(/\s*\|\|\s*/).map(function(range2) {
        return this.parseRange(range2.trim());
      }, this).filter(function(c) {
        return c.length;
      });
      if (!this.set.length) {
        throw new TypeError("Invalid SemVer Range: " + range);
      }
      this.format();
    }
    Range.prototype.format = function() {
      this.range = this.set.map(function(comps) {
        return comps.join(" ").trim();
      }).join("||").trim();
      return this.range;
    };
    Range.prototype.toString = function() {
      return this.range;
    };
    Range.prototype.parseRange = function(range) {
      var loose = this.options.loose;
      range = range.trim();
      var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
      range = range.replace(hr, hyphenReplace);
      debug3("hyphen replace", range);
      range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
      debug3("comparator trim", range, re[t.COMPARATORTRIM]);
      range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
      range = range.replace(re[t.CARETTRIM], caretTrimReplace);
      range = range.split(/\s+/).join(" ");
      var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
      var set = range.split(" ").map(function(comp) {
        return parseComparator(comp, this.options);
      }, this).join(" ").split(/\s+/);
      if (this.options.loose) {
        set = set.filter(function(comp) {
          return !!comp.match(compRe);
        });
      }
      set = set.map(function(comp) {
        return new Comparator(comp, this.options);
      }, this);
      return set;
    };
    Range.prototype.intersects = function(range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError("a Range is required");
      }
      return this.set.some(function(thisComparators) {
        return isSatisfiable(thisComparators, options) && range.set.some(function(rangeComparators) {
          return isSatisfiable(rangeComparators, options) && thisComparators.every(function(thisComparator) {
            return rangeComparators.every(function(rangeComparator) {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    };
    function isSatisfiable(comparators, options) {
      var result = true;
      var remainingComparators = comparators.slice();
      var testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every(function(otherComparator) {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    }
    exports3.toComparators = toComparators;
    function toComparators(range, options) {
      return new Range(range, options).set.map(function(comp) {
        return comp.map(function(c) {
          return c.value;
        }).join(" ").trim().split(" ");
      });
    }
    function parseComparator(comp, options) {
      debug3("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug3("caret", comp);
      comp = replaceTildes(comp, options);
      debug3("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug3("xrange", comp);
      comp = replaceStars(comp, options);
      debug3("stars", comp);
      return comp;
    }
    function isX(id) {
      return !id || id.toLowerCase() === "x" || id === "*";
    }
    function replaceTildes(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceTilde(comp2, options);
      }).join(" ");
    }
    function replaceTilde(comp, options) {
      var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, function(_2, M, m2, p, pr) {
        debug3("tilde", comp, _2, M, m2, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m2)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          ret = ">=" + M + "." + m2 + ".0 <" + M + "." + (+m2 + 1) + ".0";
        } else if (pr) {
          debug3("replaceTilde pr", pr);
          ret = ">=" + M + "." + m2 + "." + p + "-" + pr + " <" + M + "." + (+m2 + 1) + ".0";
        } else {
          ret = ">=" + M + "." + m2 + "." + p + " <" + M + "." + (+m2 + 1) + ".0";
        }
        debug3("tilde return", ret);
        return ret;
      });
    }
    function replaceCarets(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceCaret(comp2, options);
      }).join(" ");
    }
    function replaceCaret(comp, options) {
      debug3("caret", comp, options);
      var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
      return comp.replace(r, function(_2, M, m2, p, pr) {
        debug3("caret", comp, _2, M, m2, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m2)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          if (M === "0") {
            ret = ">=" + M + "." + m2 + ".0 <" + M + "." + (+m2 + 1) + ".0";
          } else {
            ret = ">=" + M + "." + m2 + ".0 <" + (+M + 1) + ".0.0";
          }
        } else if (pr) {
          debug3("replaceCaret pr", pr);
          if (M === "0") {
            if (m2 === "0") {
              ret = ">=" + M + "." + m2 + "." + p + "-" + pr + " <" + M + "." + m2 + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m2 + "." + p + "-" + pr + " <" + M + "." + (+m2 + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m2 + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
          }
        } else {
          debug3("no pr");
          if (M === "0") {
            if (m2 === "0") {
              ret = ">=" + M + "." + m2 + "." + p + " <" + M + "." + m2 + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m2 + "." + p + " <" + M + "." + (+m2 + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m2 + "." + p + " <" + (+M + 1) + ".0.0";
          }
        }
        debug3("caret return", ret);
        return ret;
      });
    }
    function replaceXRanges(comp, options) {
      debug3("replaceXRanges", comp, options);
      return comp.split(/\s+/).map(function(comp2) {
        return replaceXRange(comp2, options);
      }).join(" ");
    }
    function replaceXRange(comp, options) {
      comp = comp.trim();
      var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, function(ret, gtlt, M, m2, p, pr) {
        debug3("xRange", comp, ret, gtlt, M, m2, p, pr);
        var xM = isX(M);
        var xm = xM || isX(m2);
        var xp = xm || isX(p);
        var anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m2 = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m2 = 0;
              p = 0;
            } else {
              m2 = +m2 + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m2 = +m2 + 1;
            }
          }
          ret = gtlt + M + "." + m2 + "." + p + pr;
        } else if (xm) {
          ret = ">=" + M + ".0.0" + pr + " <" + (+M + 1) + ".0.0" + pr;
        } else if (xp) {
          ret = ">=" + M + "." + m2 + ".0" + pr + " <" + M + "." + (+m2 + 1) + ".0" + pr;
        }
        debug3("xRange return", ret);
        return ret;
      });
    }
    function replaceStars(comp, options) {
      debug3("replaceStars", comp, options);
      return comp.trim().replace(re[t.STAR], "");
    }
    function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = ">=" + fM + ".0.0";
      } else if (isX(fp)) {
        from = ">=" + fM + "." + fm + ".0";
      } else {
        from = ">=" + from;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = "<" + (+tM + 1) + ".0.0";
      } else if (isX(tp)) {
        to = "<" + tM + "." + (+tm + 1) + ".0";
      } else if (tpr) {
        to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
      } else {
        to = "<=" + to;
      }
      return (from + " " + to).trim();
    }
    Range.prototype.test = function(version) {
      if (!version) {
        return false;
      }
      if (typeof version === "string") {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }
      for (var i2 = 0; i2 < this.set.length; i2++) {
        if (testSet(this.set[i2], version, this.options)) {
          return true;
        }
      }
      return false;
    };
    function testSet(set, version, options) {
      for (var i2 = 0; i2 < set.length; i2++) {
        if (!set[i2].test(version)) {
          return false;
        }
      }
      if (version.prerelease.length && !options.includePrerelease) {
        for (i2 = 0; i2 < set.length; i2++) {
          debug3(set[i2].semver);
          if (set[i2].semver === ANY) {
            continue;
          }
          if (set[i2].semver.prerelease.length > 0) {
            var allowed = set[i2].semver;
            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    }
    exports3.satisfies = satisfies;
    function satisfies(version, range, options) {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version);
    }
    exports3.maxSatisfying = maxSatisfying;
    function maxSatisfying(versions, range, options) {
      var max = null;
      var maxSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    }
    exports3.minSatisfying = minSatisfying;
    function minSatisfying(versions, range, options) {
      var min = null;
      var minSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    }
    exports3.minVersion = minVersion;
    function minVersion(range, loose) {
      range = new Range(range, loose);
      var minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        comparators.forEach(function(comparator) {
          var compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!minver || gt(minver, compver)) {
                minver = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error("Unexpected operation: " + comparator.operator);
          }
        });
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    }
    exports3.validRange = validRange;
    function validRange(range, options) {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    }
    exports3.ltr = ltr;
    function ltr(version, range, options) {
      return outside(version, range, "<", options);
    }
    exports3.gtr = gtr;
    function gtr(version, range, options) {
      return outside(version, range, ">", options);
    }
    exports3.outside = outside;
    function outside(version, range, hilo, options) {
      version = new SemVer(version, options);
      range = new Range(range, options);
      var gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version, range, options)) {
        return false;
      }
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        var high = null;
        var low = null;
        comparators.forEach(function(comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }
      return true;
    }
    exports3.prerelease = prerelease;
    function prerelease(version, options) {
      var parsed = parse2(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    }
    exports3.intersects = intersects;
    function intersects(r1, r2, options) {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2);
    }
    exports3.coerce = coerce;
    function coerce(version, options) {
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version === "number") {
        version = String(version);
      }
      if (typeof version !== "string") {
        return null;
      }
      options = options || {};
      var match = null;
      if (!options.rtl) {
        match = version.match(re[t.COERCE]);
      } else {
        var next;
        while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        re[t.COERCERTL].lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      return parse2(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
    }
  });
  const {promisify: promisify3} = util__default["default"];
  const useNativeRecursiveOption = semver.satisfies(process.version, ">=10.12.0");
  const checkPath = (pth) => {
    if (process.platform === "win32") {
      const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path__default["default"].parse(pth).root, ""));
      if (pathHasInvalidWinCharacters) {
        const error = new Error(`Path contains invalid characters: ${pth}`);
        error.code = "EINVAL";
        throw error;
      }
    }
  };
  const processOptions = (options) => {
    const defaults = {
      mode: 511,
      fs: fs__default["default"]
    };
    return {
      ...defaults,
      ...options
    };
  };
  const permissionError = (pth) => {
    const error = new Error(`operation not permitted, mkdir '${pth}'`);
    error.code = "EPERM";
    error.errno = -4048;
    error.path = pth;
    error.syscall = "mkdir";
    return error;
  };
  const makeDir = async (input, options) => {
    checkPath(input);
    options = processOptions(options);
    const mkdir = promisify3(options.fs.mkdir);
    const stat = promisify3(options.fs.stat);
    if (useNativeRecursiveOption && options.fs.mkdir === fs__default["default"].mkdir) {
      const pth = path__default["default"].resolve(input);
      await mkdir(pth, {
        mode: options.mode,
        recursive: true
      });
      return pth;
    }
    const make = async (pth) => {
      try {
        await mkdir(pth, options.mode);
        return pth;
      } catch (error) {
        if (error.code === "EPERM") {
          throw error;
        }
        if (error.code === "ENOENT") {
          if (path__default["default"].dirname(pth) === pth) {
            throw permissionError(pth);
          }
          if (error.message.includes("null bytes")) {
            throw error;
          }
          await make(path__default["default"].dirname(pth));
          return make(pth);
        }
        try {
          const stats = await stat(pth);
          if (!stats.isDirectory()) {
            throw new Error("The path is not a directory");
          }
        } catch (_2) {
          throw error;
        }
        return pth;
      }
    };
    return make(path__default["default"].resolve(input));
  };
  var makeDir_1 = makeDir;
  var sync = (input, options) => {
    checkPath(input);
    options = processOptions(options);
    if (useNativeRecursiveOption && options.fs.mkdirSync === fs__default["default"].mkdirSync) {
      const pth = path__default["default"].resolve(input);
      fs__default["default"].mkdirSync(pth, {
        mode: options.mode,
        recursive: true
      });
      return pth;
    }
    const make = (pth) => {
      try {
        options.fs.mkdirSync(pth, options.mode);
      } catch (error) {
        if (error.code === "EPERM") {
          throw error;
        }
        if (error.code === "ENOENT") {
          if (path__default["default"].dirname(pth) === pth) {
            throw permissionError(pth);
          }
          if (error.message.includes("null bytes")) {
            throw error;
          }
          make(path__default["default"].dirname(pth));
          return make(pth);
        }
        try {
          if (!options.fs.statSync(pth).isDirectory()) {
            throw new Error("The path is not a directory");
          }
        } catch (_2) {
          throw error;
        }
      }
      return pth;
    };
    return make(path__default["default"].resolve(input));
  };
  makeDir_1.sync = sync;
  const exists = util4.promisify(fs__default["default"].exists);
  const readFile2 = util4.promisify(fs__default["default"].readFile);
  const writeFile = util4.promisify(fastWriteAtomic);
  const PRISMA_SIGNATURE = "signature";
  const PRISMA_CACHE_FILE = "prisma";
  async function getSignature(signatureFile, cacheFile) {
    const dirs = envPaths_1(`checkpoint`);
    cacheFile = cacheFile || path__default["default"].join(dirs.cache, PRISMA_CACHE_FILE);
    signatureFile = signatureFile || path__default["default"].join(dirs.cache, PRISMA_SIGNATURE);
    if (await exists(signatureFile)) {
      const signature = await readSignature(signatureFile);
      if (signature) {
        return signature;
      }
    }
    if (await exists(cacheFile)) {
      const signature = await readSignature(cacheFile);
      if (signature) {
        await createSignatureFile(signatureFile, signature);
        return signature;
      }
    }
    return await createSignatureFile(signatureFile);
  }
  function isSignatureValid(signature) {
    return typeof signature === "string" && signature.length === 36;
  }
  async function readSignature(file) {
    try {
      const data = await readFile2(file, "utf8");
      const {signature} = JSON.parse(data);
      if (isSignatureValid(signature)) {
        return signature;
      }
      return "";
    } catch (err) {
      return "";
    }
  }
  async function createSignatureFile(signatureFile, signature) {
    const signatureState = {
      signature: signature || v4()
    };
    await makeDir_1(path__default["default"].dirname(signatureFile));
    await writeFile(signatureFile, JSON.stringify(signatureState, null, "  "));
    return signatureState.signature;
  }
  const readdir = util__default["default"].promisify(fs__default["default"].readdir);
  const readFile$1 = util__default["default"].promisify(fs__default["default"].readFile);
  async function getInfo2() {
    const cachePath = envPaths_1("checkpoint").cache;
    const dir = await readdir(cachePath);
    const cacheItems = [];
    for (const item of dir) {
      if (!item.includes("-")) {
        continue;
      }
      try {
        const jsonData = JSON.parse(await readFile$1(path__default["default"].join(cachePath, item), {encoding: "utf-8"}));
        if (jsonData.output && !jsonData.output.cli_path_hash) {
          jsonData.output.cli_path_hash = item.split("-")[1];
        }
        cacheItems.push(jsonData);
      } catch (e) {
        console.error(e);
      }
    }
    return {
      signature: await getSignature(),
      cachePath,
      cacheItems
    };
  }
  const writeFile$1 = util__default["default"].promisify(fastWriteAtomic);
  const readFile$2 = util__default["default"].promisify(fs__default["default"].readFile);
  const unlink$1 = util__default["default"].promisify(fs__default["default"].unlink);
  const defaultSchema2 = {
    last_reminder: 0,
    cached_at: 0,
    version: "",
    cli_path: "",
    output: {
      client_event_id: "",
      previous_client_event_id: "",
      product: "",
      cli_path_hash: "",
      local_timestamp: "",
      previous_version: "",
      current_version: "",
      current_release_date: 0,
      current_download_url: "",
      current_changelog_url: "",
      package: "",
      release_tag: "",
      install_command: "",
      project_website: "",
      outdated: false,
      alerts: []
    }
  };
  class Config {
    static async new(state, schema = defaultSchema2) {
      await makeDir_1(path__default["default"].dirname(state.cache_file));
      return new Config(state, schema);
    }
    constructor(state, defaultSchema3) {
      this.state = state;
      this.defaultSchema = defaultSchema3;
    }
    async checkCache(newState) {
      const now = newState.now();
      const cache = await this.all();
      if (!cache) {
        return {cache: void 0, stale: true};
      }
      if (newState.version !== cache.version) {
        return {cache, stale: true};
      }
      if (now - cache.cached_at > newState.cache_duration) {
        return {cache, stale: true};
      }
      return {cache, stale: false};
    }
    async set(update) {
      const existing = await this.all() || {};
      const schema = Object.assign(existing, update);
      for (let k in this.defaultSchema) {
        if (typeof schema[k] === "undefined") {
          schema[k] = this.defaultSchema[k];
        }
      }
      await writeFile$1(this.state.cache_file, JSON.stringify(schema, null, "  "));
      return;
    }
    async all() {
      try {
        const data = await readFile$2(this.state.cache_file, "utf8");
        return JSON.parse(data);
      } catch (err) {
        return;
      }
    }
    async get(key) {
      const schema = await this.all();
      if (typeof schema === "undefined") {
        return;
      }
      return schema[key];
    }
    async reset() {
      await writeFile$1(this.state.cache_file, JSON.stringify(this.defaultSchema, null, "  "));
      return;
    }
    async delete() {
      try {
        await unlink$1(this.state.cache_file);
        return;
      } catch (err) {
        return;
      }
    }
  }
  var windows$1 = isexe;
  isexe.sync = sync$1;
  function checkPathExt(path20, options) {
    var pathext = options.pathExt !== void 0 ? options.pathExt : process.env.PATHEXT;
    if (!pathext) {
      return true;
    }
    pathext = pathext.split(";");
    if (pathext.indexOf("") !== -1) {
      return true;
    }
    for (var i = 0; i < pathext.length; i++) {
      var p = pathext[i].toLowerCase();
      if (p && path20.substr(-p.length).toLowerCase() === p) {
        return true;
      }
    }
    return false;
  }
  function checkStat(stat, path20, options) {
    if (!stat.isSymbolicLink() && !stat.isFile()) {
      return false;
    }
    return checkPathExt(path20, options);
  }
  function isexe(path20, options, cb) {
    fs__default["default"].stat(path20, function(er, stat) {
      cb(er, er ? false : checkStat(stat, path20, options));
    });
  }
  function sync$1(path20, options) {
    return checkStat(fs__default["default"].statSync(path20), path20, options);
  }
  var mode = isexe$1;
  isexe$1.sync = sync$2;
  function isexe$1(path20, options, cb) {
    fs__default["default"].stat(path20, function(er, stat) {
      cb(er, er ? false : checkStat$1(stat, options));
    });
  }
  function sync$2(path20, options) {
    return checkStat$1(fs__default["default"].statSync(path20), options);
  }
  function checkStat$1(stat, options) {
    return stat.isFile() && checkMode(stat, options);
  }
  function checkMode(stat, options) {
    var mod = stat.mode;
    var uid = stat.uid;
    var gid = stat.gid;
    var myUid = options.uid !== void 0 ? options.uid : process.getuid && process.getuid();
    var myGid = options.gid !== void 0 ? options.gid : process.getgid && process.getgid();
    var u = parseInt("100", 8);
    var g = parseInt("010", 8);
    var o = parseInt("001", 8);
    var ug = u | g;
    var ret = mod & o || mod & g && gid === myGid || mod & u && uid === myUid || mod & ug && myUid === 0;
    return ret;
  }
  var core;
  if (process.platform === "win32" || commonjsGlobal.TESTING_WINDOWS) {
    core = windows$1;
  } else {
    core = mode;
  }
  var isexe_1 = isexe$2;
  isexe$2.sync = sync$3;
  function isexe$2(path20, options, cb) {
    if (typeof options === "function") {
      cb = options;
      options = {};
    }
    if (!cb) {
      if (typeof Promise !== "function") {
        throw new TypeError("callback not provided");
      }
      return new Promise(function(resolve, reject) {
        isexe$2(path20, options || {}, function(er, is) {
          if (er) {
            reject(er);
          } else {
            resolve(is);
          }
        });
      });
    }
    core(path20, options || {}, function(er, is) {
      if (er) {
        if (er.code === "EACCES" || options && options.ignoreErrors) {
          er = null;
          is = false;
        }
      }
      cb(er, is);
    });
  }
  function sync$3(path20, options) {
    try {
      return core.sync(path20, options || {});
    } catch (er) {
      if (options && options.ignoreErrors || er.code === "EACCES") {
        return false;
      } else {
        throw er;
      }
    }
  }
  const isWindows = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
  const COLON = isWindows ? ";" : ":";
  const getNotFoundError = (cmd) => Object.assign(new Error(`not found: ${cmd}`), {code: "ENOENT"});
  const getPathInfo = (cmd, opt) => {
    const colon = opt.colon || COLON;
    const pathEnv = cmd.match(/\//) || isWindows && cmd.match(/\\/) ? [""] : [
      ...isWindows ? [process.cwd()] : [],
      ...(opt.path || process.env.PATH || "").split(colon)
    ];
    const pathExtExe = isWindows ? opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "";
    const pathExt = isWindows ? pathExtExe.split(colon) : [""];
    if (isWindows) {
      if (cmd.indexOf(".") !== -1 && pathExt[0] !== "")
        pathExt.unshift("");
    }
    return {
      pathEnv,
      pathExt,
      pathExtExe
    };
  };
  const which = (cmd, opt, cb) => {
    if (typeof opt === "function") {
      cb = opt;
      opt = {};
    }
    if (!opt)
      opt = {};
    const {pathEnv, pathExt, pathExtExe} = getPathInfo(cmd, opt);
    const found = [];
    const step = (i) => new Promise((resolve, reject) => {
      if (i === pathEnv.length)
        return opt.all && found.length ? resolve(found) : reject(getNotFoundError(cmd));
      const ppRaw = pathEnv[i];
      const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
      const pCmd = path__default["default"].join(pathPart, cmd);
      const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
      resolve(subStep(p, i, 0));
    });
    const subStep = (p, i, ii) => new Promise((resolve, reject) => {
      if (ii === pathExt.length)
        return resolve(step(i + 1));
      const ext = pathExt[ii];
      isexe_1(p + ext, {pathExt: pathExtExe}, (er, is) => {
        if (!er && is) {
          if (opt.all)
            found.push(p + ext);
          else
            return resolve(p + ext);
        }
        return resolve(subStep(p, i, ii + 1));
      });
    });
    return cb ? step(0).then((res) => cb(null, res), cb) : step(0);
  };
  const whichSync = (cmd, opt) => {
    opt = opt || {};
    const {pathEnv, pathExt, pathExtExe} = getPathInfo(cmd, opt);
    const found = [];
    for (let i = 0; i < pathEnv.length; i++) {
      const ppRaw = pathEnv[i];
      const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
      const pCmd = path__default["default"].join(pathPart, cmd);
      const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
      for (let j = 0; j < pathExt.length; j++) {
        const cur = p + pathExt[j];
        try {
          const is = isexe_1.sync(cur, {pathExt: pathExtExe});
          if (is) {
            if (opt.all)
              found.push(cur);
            else
              return cur;
          }
        } catch (ex) {
        }
      }
    }
    if (opt.all && found.length)
      return found;
    if (opt.nothrow)
      return null;
    throw getNotFoundError(cmd);
  };
  var which_1 = which;
  which.sync = whichSync;
  const pathKey = (options = {}) => {
    const environment = options.env || process.env;
    const platform = options.platform || process.platform;
    if (platform !== "win32") {
      return "PATH";
    }
    return Object.keys(environment).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
  };
  var pathKey_1 = pathKey;
  var _default$1 = pathKey;
  pathKey_1.default = _default$1;
  function resolveCommandAttempt(parsed, withoutPathExt) {
    const env2 = parsed.options.env || process.env;
    const cwd = process.cwd();
    const hasCustomCwd = parsed.options.cwd != null;
    const shouldSwitchCwd = hasCustomCwd && process.chdir !== void 0 && !process.chdir.disabled;
    if (shouldSwitchCwd) {
      try {
        process.chdir(parsed.options.cwd);
      } catch (err) {
      }
    }
    let resolved;
    try {
      resolved = which_1.sync(parsed.command, {
        path: env2[pathKey_1({env: env2})],
        pathExt: withoutPathExt ? path__default["default"].delimiter : void 0
      });
    } catch (e) {
    } finally {
      if (shouldSwitchCwd) {
        process.chdir(cwd);
      }
    }
    if (resolved) {
      resolved = path__default["default"].resolve(hasCustomCwd ? parsed.options.cwd : "", resolved);
    }
    return resolved;
  }
  function resolveCommand(parsed) {
    return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
  }
  var resolveCommand_1 = resolveCommand;
  const metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
  function escapeCommand(arg11) {
    arg11 = arg11.replace(metaCharsRegExp, "^$1");
    return arg11;
  }
  function escapeArgument(arg11, doubleEscapeMetaChars) {
    arg11 = `${arg11}`;
    arg11 = arg11.replace(/(\\*)"/g, '$1$1\\"');
    arg11 = arg11.replace(/(\\*)$/, "$1$1");
    arg11 = `"${arg11}"`;
    arg11 = arg11.replace(metaCharsRegExp, "^$1");
    if (doubleEscapeMetaChars) {
      arg11 = arg11.replace(metaCharsRegExp, "^$1");
    }
    return arg11;
  }
  var command = escapeCommand;
  var argument = escapeArgument;
  var _escape = {
    command,
    argument
  };
  var shebangRegex = /^#!(.*)/;
  var shebangCommand = (string = "") => {
    const match = string.match(shebangRegex);
    if (!match) {
      return null;
    }
    const [path20, argument2] = match[0].replace(/#! ?/, "").split(" ");
    const binary = path20.split("/").pop();
    if (binary === "env") {
      return argument2;
    }
    return argument2 ? `${binary} ${argument2}` : binary;
  };
  function readShebang(command2) {
    const size = 150;
    const buffer = Buffer.alloc(size);
    let fd;
    try {
      fd = fs__default["default"].openSync(command2, "r");
      fs__default["default"].readSync(fd, buffer, 0, size, 0);
      fs__default["default"].closeSync(fd);
    } catch (e) {
    }
    return shebangCommand(buffer.toString());
  }
  var readShebang_1 = readShebang;
  const isWin = process.platform === "win32";
  const isExecutableRegExp = /\.(?:com|exe)$/i;
  const isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
  function detectShebang(parsed) {
    parsed.file = resolveCommand_1(parsed);
    const shebang = parsed.file && readShebang_1(parsed.file);
    if (shebang) {
      parsed.args.unshift(parsed.file);
      parsed.command = shebang;
      return resolveCommand_1(parsed);
    }
    return parsed.file;
  }
  function parseNonShell(parsed) {
    if (!isWin) {
      return parsed;
    }
    const commandFile = detectShebang(parsed);
    const needsShell = !isExecutableRegExp.test(commandFile);
    if (parsed.options.forceShell || needsShell) {
      const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
      parsed.command = path__default["default"].normalize(parsed.command);
      parsed.command = _escape.command(parsed.command);
      parsed.args = parsed.args.map((arg11) => _escape.argument(arg11, needsDoubleEscapeMetaChars));
      const shellCommand = [parsed.command].concat(parsed.args).join(" ");
      parsed.args = ["/d", "/s", "/c", `"${shellCommand}"`];
      parsed.command = process.env.comspec || "cmd.exe";
      parsed.options.windowsVerbatimArguments = true;
    }
    return parsed;
  }
  function parse(command2, args2, options) {
    if (args2 && !Array.isArray(args2)) {
      options = args2;
      args2 = null;
    }
    args2 = args2 ? args2.slice(0) : [];
    options = Object.assign({}, options);
    const parsed = {
      command: command2,
      args: args2,
      options,
      file: void 0,
      original: {
        command: command2,
        args: args2
      }
    };
    return options.shell ? parsed : parseNonShell(parsed);
  }
  var parse_1 = parse;
  const isWin$1 = process.platform === "win32";
  function notFoundError(original, syscall) {
    return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
      code: "ENOENT",
      errno: "ENOENT",
      syscall: `${syscall} ${original.command}`,
      path: original.command,
      spawnargs: original.args
    });
  }
  function hookChildProcess(cp2, parsed) {
    if (!isWin$1) {
      return;
    }
    const originalEmit = cp2.emit;
    cp2.emit = function(name, arg1) {
      if (name === "exit") {
        const err = verifyENOENT(arg1, parsed);
        if (err) {
          return originalEmit.call(cp2, "error", err);
        }
      }
      return originalEmit.apply(cp2, arguments);
    };
  }
  function verifyENOENT(status, parsed) {
    if (isWin$1 && status === 1 && !parsed.file) {
      return notFoundError(parsed.original, "spawn");
    }
    return null;
  }
  function verifyENOENTSync(status, parsed) {
    if (isWin$1 && status === 1 && !parsed.file) {
      return notFoundError(parsed.original, "spawnSync");
    }
    return null;
  }
  var enoent = {
    hookChildProcess,
    verifyENOENT,
    verifyENOENTSync,
    notFoundError
  };
  function spawn(command2, args2, options) {
    const parsed = parse_1(command2, args2, options);
    const spawned = cp__default["default"].spawn(parsed.command, parsed.args, parsed.options);
    enoent.hookChildProcess(spawned, parsed);
    return spawned;
  }
  function spawnSync(command2, args2, options) {
    const parsed = parse_1(command2, args2, options);
    const result = cp__default["default"].spawnSync(parsed.command, parsed.args, parsed.options);
    result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
    return result;
  }
  var crossSpawn = spawn;
  var spawn_1 = spawn;
  var sync$4 = spawnSync;
  var _parse = parse_1;
  var _enoent = enoent;
  crossSpawn.spawn = spawn_1;
  crossSpawn.sync = sync$4;
  crossSpawn._parse = _parse;
  crossSpawn._enoent = _enoent;
  var s = 1e3;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;
  var ms = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse$1(val);
    } else if (type === "number" && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
  function parse$1(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "weeks":
      case "week":
      case "w":
        return n * w;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return void 0;
    }
  }
  function fmtShort(ms2) {
    var msAbs = Math.abs(ms2);
    if (msAbs >= d) {
      return Math.round(ms2 / d) + "d";
    }
    if (msAbs >= h) {
      return Math.round(ms2 / h) + "h";
    }
    if (msAbs >= m) {
      return Math.round(ms2 / m) + "m";
    }
    if (msAbs >= s) {
      return Math.round(ms2 / s) + "s";
    }
    return ms2 + "ms";
  }
  function fmtLong(ms2) {
    var msAbs = Math.abs(ms2);
    if (msAbs >= d) {
      return plural(ms2, msAbs, d, "day");
    }
    if (msAbs >= h) {
      return plural(ms2, msAbs, h, "hour");
    }
    if (msAbs >= m) {
      return plural(ms2, msAbs, m, "minute");
    }
    if (msAbs >= s) {
      return plural(ms2, msAbs, s, "second");
    }
    return ms2 + " ms";
  }
  function plural(ms2, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms2 / n) + " " + name + (isPlural ? "s" : "");
  }
  const childPath = path__default["default"].join(eval("__dirname"), "child");
  async function check2(input) {
    const defaultCache = getCacheFile(input.product, input.cli_path_hash || "default");
    const ci = require_ci_info();
    const state = {
      product: input.product,
      version: input.version,
      cli_install_type: input.cli_install_type || "",
      information: input.information || "",
      local_timestamp: input.local_timestamp || rfc3339(new Date()),
      project_hash: input.project_hash,
      cli_path: input.cli_path || "",
      cli_path_hash: input.cli_path_hash || "",
      endpoint: input.endpoint || "https://checkpoint.prisma.io",
      disable: typeof input.disable === "undefined" ? false : input.disable,
      arch: input.arch || os__default["default"].arch(),
      os: input.os || os__default["default"].platform(),
      node_version: input.node_version || process.version,
      ci: typeof input.ci !== "undefined" ? input.ci : ci.isCI,
      ci_name: typeof input.ci_name !== "undefined" ? input.ci_name || "" : ci.name || "",
      command: input.command || "",
      schema_providers: input.schema_providers || [],
      schema_preview_features: input.schema_preview_features || [],
      schema_generators_providers: input.schema_generators_providers || [],
      cache_file: input.cache_file || defaultCache,
      cache_duration: typeof input.cache_duration === "undefined" ? ms("12h") : input.cache_duration,
      remind_duration: typeof input.remind_duration === "undefined" ? ms("48h") : input.remind_duration,
      force: typeof input.force === "undefined" ? false : input.force,
      timeout: getTimeout(input.timeout),
      unref: typeof input.unref === "undefined" ? true : input.unref,
      child_path: input.child_path || childPath,
      now: () => Date.now(),
      client_event_id: input.client_event_id || "",
      previous_client_event_id: input.previous_client_event_id || ""
    };
    if ((process.env["CHECKPOINT_DISABLE"] || state.disable) && !state.force) {
      return {
        status: "disabled"
      };
    }
    const config = await Config.new(state);
    const cacheResponse = await config.checkCache(state);
    if (cacheResponse.stale || !cacheResponse.cache) {
      const child = spawn$1(state);
      state.unref && child.unref();
      return {
        status: "waiting",
        data: child
      };
    }
    for (const key of Object.keys(state)) {
      if (state[key]) {
        await config.set({
          [key]: state[key]
        });
      }
    }
    const userReminded = state.now() - cacheResponse.cache.last_reminder < state.remind_duration;
    if (userReminded) {
      return {
        status: "reminded",
        data: cacheResponse.cache.output
      };
    }
    await config.set({
      last_reminder: state.now()
    });
    return {
      status: "ok",
      data: cacheResponse.cache.output
    };
  }
  function getCacheFile(product, cacheIdentifier) {
    const dirs = envPaths_1(`checkpoint`);
    return path__default["default"].join(dirs.cache, `${product}-${cacheIdentifier}`);
  }
  function getTimeout(inputTimeout) {
    if (typeof inputTimeout !== "undefined") {
      return inputTimeout;
    }
    const timeoutString = process.env["CHECKPOINT_TIMEOUT"];
    if (typeof timeoutString === "undefined") {
      return 5e3;
    }
    const timeout = parseInt(timeoutString, 10);
    if (isNaN(timeout)) {
      return 5e3;
    }
    return timeout;
  }
  function spawn$1(state) {
    return crossSpawn.spawn(process.execPath, [state.child_path, JSON.stringify(state)], state.unref ? {
      detached: true,
      stdio: "ignore"
    } : {
      detached: false,
      stdio: "pipe"
    });
  }
  function rfc3339(d2) {
    function pad(n) {
      return n < 10 ? "0" + n : n;
    }
    function timezoneOffset(offset) {
      let sign;
      if (offset === 0) {
        return "Z";
      }
      sign = offset > 0 ? "-" : "+";
      offset = Math.abs(offset);
      return sign + pad(Math.floor(offset / 60)) + ":" + pad(offset % 60);
    }
    return d2.getFullYear() + "-" + pad(d2.getMonth() + 1) + "-" + pad(d2.getDate()) + "T" + pad(d2.getHours()) + ":" + pad(d2.getMinutes()) + ":" + pad(d2.getSeconds()) + timezoneOffset(d2.getTimezoneOffset());
  }
  exports2.check = check2;
  exports2.getInfo = getInfo2;
  exports2.getSignature = getSignature;
});

// ../sdk/dist/utils/maskSchema.js
var require_maskSchema = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.mapScalarValues = exports2.maskSchema = void 0;
  function maskSchema(schema) {
    const regex = /url\s*=\s*.+/;
    return schema.split("\n").map((line) => {
      const match = regex.exec(line);
      if (match) {
        return `${line.slice(0, match.index)}url = "***"`;
      }
      return line;
    }).join("\n");
  }
  exports2.maskSchema = maskSchema;
  function mapScalarValues(obj, mapper) {
    const result = {};
    for (const key in obj) {
      if (typeof obj[key] === "object") {
        result[key] = mapScalarValues(obj[key], mapper);
      } else {
        result[key] = mapper(obj[key]);
      }
    }
    return result;
  }
  exports2.mapScalarValues = mapScalarValues;
});

// ../sdk/dist/sendPanic.js
var require_sendPanic = __commonJS((exports2) => {
  "use strict";
  var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, {enumerable: true, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: true, value: v});
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports2 && exports2.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.makeErrorReportCompleted = exports2.createErrorReport = exports2.ErrorKind = exports2.sendPanic = void 0;
  const get_platform_1 = require_dist();
  const archiver_1 = __importDefault(require_archiver());
  const debug_1 = __importDefault(require_dist2());
  const fs_1 = __importDefault(require("fs"));
  const globby_1 = __importDefault(require_globby());
  const node_fetch_1 = __importDefault(require_lib2());
  const os_1 = __importDefault(require("os"));
  const path_1 = __importDefault(require("path"));
  const strip_ansi_1 = __importDefault(require_strip_ansi());
  const tmp_1 = __importDefault(require_tmp());
  const checkpoint3 = __importStar(require_dist10());
  const maskSchema_1 = require_maskSchema();
  const panic_1 = require_panic();
  const fetch_engine_1 = require_dist7();
  const IntrospectionEngine_1 = require_IntrospectionEngine();
  const debug3 = debug_1.default("sendPanic");
  tmp_1.default.setGracefulCleanup();
  async function sendPanic(error, cliVersion, binaryVersion) {
    try {
      let schema;
      let maskedSchema;
      if (error.schemaPath) {
        schema = fs_1.default.readFileSync(error.schemaPath, "utf-8");
      }
      if (error.schema) {
        schema = error.schema;
      }
      if (schema) {
        maskedSchema = maskSchema_1.maskSchema(schema);
      }
      let sqlDump;
      let dbVersion;
      const schemaOrUrl = error.schema || error.introspectionUrl;
      if (error.area === panic_1.ErrorArea.INTROSPECTION_CLI && schemaOrUrl) {
        let engine;
        try {
          engine = new IntrospectionEngine_1.IntrospectionEngine();
          sqlDump = await engine.getDatabaseDescription(schemaOrUrl);
          dbVersion = await engine.getDatabaseVersion(schemaOrUrl);
          engine.stop();
        } catch (e) {
          debug3(e);
          if (engine && engine.isRunning) {
            engine.stop();
          }
        }
      }
      const migrateRequest = error.request ? JSON.stringify(maskSchema_1.mapScalarValues(error.request, (value) => {
        if (typeof value === "string") {
          return maskSchema_1.maskSchema(value);
        }
        return value;
      })) : void 0;
      const params = {
        area: error.area,
        kind: ErrorKind.RUST_PANIC,
        cliVersion,
        binaryVersion,
        command: getCommand(),
        jsStackTrace: strip_ansi_1.default(error.stack || error.message),
        rustStackTrace: error.rustStack,
        operatingSystem: `${os_1.default.arch()} ${os_1.default.platform()} ${os_1.default.release()}`,
        platform: await get_platform_1.getPlatform(),
        liftRequest: migrateRequest,
        schemaFile: maskedSchema,
        fingerprint: await checkpoint3.getSignature(),
        sqlDump,
        dbVersion
      };
      const signedUrl = await createErrorReport(params);
      if (error.schemaPath) {
        const zip = await makeErrorZip(error);
        await uploadZip(zip, signedUrl);
      }
      const id = await makeErrorReportCompleted(signedUrl);
      return id;
    } catch (e) {
      debug3(e);
    }
  }
  exports2.sendPanic = sendPanic;
  function getCommand() {
    if (process.argv[2] === "introspect") {
      return "introspect";
    }
    return process.argv.slice(2).join(" ");
  }
  async function uploadZip(zip, url) {
    return await node_fetch_1.default(url, {
      method: "PUT",
      agent: fetch_engine_1.getProxyAgent(url),
      headers: {
        "Content-Length": String(zip.byteLength)
      },
      body: zip
    });
  }
  async function makeErrorZip(error) {
    if (!error.schemaPath) {
      throw new Error(`Can't make zip without schema path`);
    }
    const schemaDir = path_1.default.dirname(error.schemaPath);
    const tmpFileObj = tmp_1.default.fileSync();
    const outputFile = fs_1.default.createWriteStream(tmpFileObj.name);
    const zip = archiver_1.default("zip", {zlib: {level: 9}});
    zip.pipe(outputFile);
    const schemaFile = maskSchema_1.maskSchema(fs_1.default.readFileSync(error.schemaPath, "utf-8"));
    zip.append(schemaFile, {name: path_1.default.basename(error.schemaPath)});
    if (fs_1.default.existsSync(schemaDir)) {
      const filePaths = await globby_1.default("migrations/**/*", {
        cwd: schemaDir
      });
      for (const filePath of filePaths) {
        let file = fs_1.default.readFileSync(path_1.default.resolve(schemaDir, filePath), "utf-8");
        if (filePath.endsWith("schema.prisma") || filePath.endsWith(path_1.default.basename(error.schemaPath))) {
          file = maskSchema_1.maskSchema(file);
        }
        zip.append(file, {name: path_1.default.basename(filePath)});
      }
    }
    zip.finalize();
    return new Promise((resolve, reject) => {
      outputFile.on("close", () => {
        const buffer = fs_1.default.readFileSync(tmpFileObj.name);
        resolve(buffer);
      });
      zip.on("error", (err) => {
        reject(err);
      });
    });
  }
  var ErrorKind;
  (function(ErrorKind2) {
    ErrorKind2["JS_ERROR"] = "JS_ERROR";
    ErrorKind2["RUST_PANIC"] = "RUST_PANIC";
  })(ErrorKind = exports2.ErrorKind || (exports2.ErrorKind = {}));
  async function createErrorReport(data) {
    const result = await request(`mutation ($data: CreateErrorReportInput!) {
    createErrorReport(data: $data)
  }`, {data});
    return result.createErrorReport;
  }
  exports2.createErrorReport = createErrorReport;
  async function makeErrorReportCompleted(signedUrl) {
    const result = await request(`mutation ($signedUrl: String!) {
  markErrorReportCompleted(signedUrl: $signedUrl)
}`, {signedUrl});
    return result.markErrorReportCompleted;
  }
  exports2.makeErrorReportCompleted = makeErrorReportCompleted;
  async function request(query, variables) {
    const url = "https://error-reports.prisma.sh/";
    const body = JSON.stringify({
      query,
      variables
    });
    return await node_fetch_1.default(url, {
      method: "POST",
      agent: fetch_engine_1.getProxyAgent(url),
      body,
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json"
      }
    }).then((res) => res.json()).then((res) => {
      if (res.errors) {
        throw new Error(JSON.stringify(res.errors));
      }
      return res.data;
    });
  }
});

// ../../node_modules/.pnpm/is-fullwidth-code-point@3.0.0/node_modules/is-fullwidth-code-point/index.js
var require_is_fullwidth_code_point = __commonJS((exports2, module3) => {
  "use strict";
  const isFullwidthCodePoint = (codePoint) => {
    if (Number.isNaN(codePoint)) {
      return false;
    }
    if (codePoint >= 4352 && (codePoint <= 4447 || codePoint === 9001 || codePoint === 9002 || 11904 <= codePoint && codePoint <= 12871 && codePoint !== 12351 || 12880 <= codePoint && codePoint <= 19903 || 19968 <= codePoint && codePoint <= 42182 || 43360 <= codePoint && codePoint <= 43388 || 44032 <= codePoint && codePoint <= 55203 || 63744 <= codePoint && codePoint <= 64255 || 65040 <= codePoint && codePoint <= 65049 || 65072 <= codePoint && codePoint <= 65131 || 65281 <= codePoint && codePoint <= 65376 || 65504 <= codePoint && codePoint <= 65510 || 110592 <= codePoint && codePoint <= 110593 || 127488 <= codePoint && codePoint <= 127569 || 131072 <= codePoint && codePoint <= 262141)) {
      return true;
    }
    return false;
  };
  module3.exports = isFullwidthCodePoint;
  module3.exports.default = isFullwidthCodePoint;
});

// ../../node_modules/.pnpm/astral-regex@2.0.0/node_modules/astral-regex/index.js
var require_astral_regex = __commonJS((exports2, module3) => {
  "use strict";
  const regex = "[\uD800-\uDBFF][\uDC00-\uDFFF]";
  const astralRegex = (options) => options && options.exact ? new RegExp(`^${regex}$`) : new RegExp(regex, "g");
  module3.exports = astralRegex;
});

// ../../node_modules/.pnpm/slice-ansi@3.0.0/node_modules/slice-ansi/index.js
var require_slice_ansi = __commonJS((exports2, module3) => {
  "use strict";
  const isFullwidthCodePoint = require_is_fullwidth_code_point();
  const astralRegex = require_astral_regex();
  const ansiStyles = require_ansi_styles();
  const ESCAPES = [
    "",
    ""
  ];
  const wrapAnsi = (code) => `${ESCAPES[0]}[${code}m`;
  const checkAnsi = (ansiCodes, isEscapes, endAnsiCode) => {
    let output = [];
    ansiCodes = [...ansiCodes];
    for (let ansiCode of ansiCodes) {
      const ansiCodeOrigin = ansiCode;
      if (ansiCode.match(";")) {
        ansiCode = ansiCode.split(";")[0][0] + "0";
      }
      const item = ansiStyles.codes.get(parseInt(ansiCode, 10));
      if (item) {
        const indexEscape = ansiCodes.indexOf(item.toString());
        if (indexEscape >= 0) {
          ansiCodes.splice(indexEscape, 1);
        } else {
          output.push(wrapAnsi(isEscapes ? item : ansiCodeOrigin));
        }
      } else if (isEscapes) {
        output.push(wrapAnsi(0));
        break;
      } else {
        output.push(wrapAnsi(ansiCodeOrigin));
      }
    }
    if (isEscapes) {
      output = output.filter((element, index) => output.indexOf(element) === index);
      if (endAnsiCode !== void 0) {
        const fistEscapeCode = wrapAnsi(ansiStyles.codes.get(parseInt(endAnsiCode, 10)));
        output = output.reduce((current, next) => next === fistEscapeCode ? [next, ...current] : [...current, next], []);
      }
    }
    return output.join("");
  };
  module3.exports = (string, begin, end) => {
    const characters = [...string.normalize()];
    const ansiCodes = [];
    end = typeof end === "number" ? end : characters.length;
    let isInsideEscape = false;
    let ansiCode;
    let visible = 0;
    let output = "";
    for (const [index, character] of characters.entries()) {
      let leftEscape = false;
      if (ESCAPES.includes(character)) {
        const code = /\d[^m]*/.exec(string.slice(index, index + 18));
        ansiCode = code && code.length > 0 ? code[0] : void 0;
        if (visible < end) {
          isInsideEscape = true;
          if (ansiCode !== void 0) {
            ansiCodes.push(ansiCode);
          }
        }
      } else if (isInsideEscape && character === "m") {
        isInsideEscape = false;
        leftEscape = true;
      }
      if (!isInsideEscape && !leftEscape) {
        ++visible;
      }
      if (!astralRegex({exact: true}).test(character) && isFullwidthCodePoint(character.codePointAt())) {
        ++visible;
      }
      if (visible > begin && visible <= end) {
        output += character;
      } else if (visible === begin && !isInsideEscape && ansiCode !== void 0) {
        output = checkAnsi(ansiCodes);
      } else if (visible >= end) {
        output += checkAnsi(ansiCodes, true, ansiCode);
        break;
      }
    }
    return output;
  };
});

// ../../node_modules/.pnpm/emoji-regex@8.0.0/node_modules/emoji-regex/index.js
var require_emoji_regex = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = function() {
    return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
  };
});

// ../../node_modules/.pnpm/string-width@4.2.0/node_modules/string-width/index.js
var require_string_width = __commonJS((exports2, module3) => {
  "use strict";
  const stripAnsi = require_strip_ansi();
  const isFullwidthCodePoint = require_is_fullwidth_code_point();
  const emojiRegex = require_emoji_regex();
  const stringWidth = (string) => {
    string = string.replace(emojiRegex(), "  ");
    if (typeof string !== "string" || string.length === 0) {
      return 0;
    }
    string = stripAnsi(string);
    let width = 0;
    for (let i = 0; i < string.length; i++) {
      const code = string.codePointAt(i);
      if (code <= 31 || code >= 127 && code <= 159) {
        continue;
      }
      if (code >= 768 && code <= 879) {
        continue;
      }
      if (code > 65535) {
        i++;
      }
      width += isFullwidthCodePoint(code) ? 2 : 1;
    }
    return width;
  };
  module3.exports = stringWidth;
  module3.exports.default = stringWidth;
});

// ../../node_modules/.pnpm/cli-truncate@2.1.0/node_modules/cli-truncate/index.js
var require_cli_truncate = __commonJS((exports2, module3) => {
  "use strict";
  const sliceAnsi = require_slice_ansi();
  const stringWidth = require_string_width();
  function getIndexOfNearestSpace(string, index, shouldSearchRight) {
    if (string.charAt(index) === " ") {
      return index;
    }
    for (let i = 1; i <= 3; i++) {
      if (shouldSearchRight) {
        if (string.charAt(index + i) === " ") {
          return index + i;
        }
      } else if (string.charAt(index - i) === " ") {
        return index - i;
      }
    }
    return index;
  }
  module3.exports = (text, columns, options) => {
    options = {
      position: "end",
      preferTruncationOnSpace: false,
      ...options
    };
    const {position, space, preferTruncationOnSpace} = options;
    let ellipsis = "…";
    let ellipsisWidth = 1;
    if (typeof text !== "string") {
      throw new TypeError(`Expected \`input\` to be a string, got ${typeof text}`);
    }
    if (typeof columns !== "number") {
      throw new TypeError(`Expected \`columns\` to be a number, got ${typeof columns}`);
    }
    if (columns < 1) {
      return "";
    }
    if (columns === 1) {
      return ellipsis;
    }
    const length = stringWidth(text);
    if (length <= columns) {
      return text;
    }
    if (position === "start") {
      if (preferTruncationOnSpace) {
        const nearestSpace = getIndexOfNearestSpace(text, length - columns + 1, true);
        return ellipsis + sliceAnsi(text, nearestSpace, length).trim();
      }
      if (space === true) {
        ellipsis += " ";
        ellipsisWidth = 2;
      }
      return ellipsis + sliceAnsi(text, length - columns + ellipsisWidth, length);
    }
    if (position === "middle") {
      if (space === true) {
        ellipsis = " " + ellipsis + " ";
        ellipsisWidth = 3;
      }
      const half = Math.floor(columns / 2);
      if (preferTruncationOnSpace) {
        const spaceNearFirstBreakPoint = getIndexOfNearestSpace(text, half);
        const spaceNearSecondBreakPoint = getIndexOfNearestSpace(text, length - (columns - half) + 1, true);
        return sliceAnsi(text, 0, spaceNearFirstBreakPoint) + ellipsis + sliceAnsi(text, spaceNearSecondBreakPoint, length).trim();
      }
      return sliceAnsi(text, 0, half) + ellipsis + sliceAnsi(text, length - (columns - half) + ellipsisWidth, length);
    }
    if (position === "end") {
      if (preferTruncationOnSpace) {
        const nearestSpace = getIndexOfNearestSpace(text, columns - 1);
        return sliceAnsi(text, 0, nearestSpace) + ellipsis;
      }
      if (space === true) {
        ellipsis = " " + ellipsis;
        ellipsisWidth = 2;
      }
      return sliceAnsi(text, 0, columns - ellipsisWidth) + ellipsis;
    }
    throw new Error(`Expected \`options.position\` to be either \`start\`, \`middle\` or \`end\`, got ${position}`);
  };
});

// ../sdk/dist/drawBox.js
var require_drawBox = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.drawBox = void 0;
  const chalk_1 = __importDefault(require_source());
  const cli_truncate_1 = __importDefault(require_cli_truncate());
  const string_width_1 = __importDefault(require_string_width());
  const chars = {
    topLeft: "┌",
    topRight: "┐",
    bottomRight: "┘",
    bottomLeft: "└",
    vertical: "│",
    horizontal: "─"
  };
  function maxLineLength(str) {
    return str.split("\n").reduce((max, curr) => Math.max(max, string_width_1.default(curr)), 0) + 2;
  }
  function drawBox3({title, width, height, str, horizontalPadding, verticalPadding}) {
    horizontalPadding = horizontalPadding || 0;
    verticalPadding = verticalPadding || 0;
    width = width || maxLineLength(str) + horizontalPadding * 2;
    const topLine = title ? chalk_1.default.grey(chars.topLeft + chars.horizontal) + " " + chalk_1.default.reset.bold(title) + " " + chalk_1.default.grey(chars.horizontal.repeat(width - title.length - 2 - 3) + chars.topRight) + chalk_1.default.reset() : chalk_1.default.grey(chars.topLeft + chars.horizontal) + chalk_1.default.grey(chars.horizontal.repeat(width - 3) + chars.topRight);
    const bottomLine = chars.bottomLeft + chars.horizontal.repeat(width - 2) + chars.bottomRight;
    const lines = str.split("\n");
    if (lines.length < height) {
      lines.push(...new Array(height - lines.length).fill(""));
    }
    const mappedLines = lines.slice(-height).map((l) => {
      const lineWidth = Math.min(string_width_1.default(l), width);
      const paddingRight = Math.max(width - lineWidth - 2, 0);
      return `${chalk_1.default.grey(chars.vertical)}${" ".repeat(horizontalPadding)}${chalk_1.default.reset(cli_truncate_1.default(l, width - 2))}${" ".repeat(paddingRight - horizontalPadding)}${chalk_1.default.grey(chars.vertical)}`;
    }).join("\n");
    return chalk_1.default.grey(topLine + "\n" + mappedLines + "\n" + bottomLine);
  }
  exports2.drawBox = drawBox3;
});

// ../../node_modules/.pnpm/is-ci@2.0.0/node_modules/is-ci/index.js
var require_is_ci = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = require_ci_info().isCI;
});

// ../sdk/dist/isCi.js
var require_isCi = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.isCi = void 0;
  const is_ci_1 = require_is_ci();
  exports2.isCi = () => {
    return !process.stdout.isTTY || is_ci_1.isCi || Boolean(process.env.GITHUB_ACTIONS);
  };
});

// ../sdk/dist/cli/Help.js
var require_Help = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.HelpError = exports2.unknownCommand = void 0;
  const chalk_1 = __importDefault(require_source());
  function unknownCommand2(helpTemplate, cmd) {
    return new HelpError11(`
${chalk_1.default.bold.red(`!`)} Unknown command "${cmd}"
${helpTemplate}`);
  }
  exports2.unknownCommand = unknownCommand2;
  class HelpError11 extends Error {
    constructor(msg) {
      super(msg);
      Object.setPrototypeOf(this, HelpError11.prototype);
    }
  }
  exports2.HelpError = HelpError11;
});

// ../sdk/dist/cli/getSchema.js
var require_getSchema = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getSchemaSync = exports2.getSchemaDirSync = exports2.getSchemaPathFromPackageJsonSync = exports2.getSchemaPathSyncInternal = exports2.getSchemaPathSync = exports2.getSchema = exports2.getSchemaDir = exports2.getRelativeSchemaPath = exports2.getSchemaPathFromPackageJson = exports2.getSchemaPathInternal = exports2.getSchemaPath = void 0;
  const chalk_1 = __importDefault(require_source());
  const execa_1 = __importDefault(require_execa());
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const read_pkg_up_1 = __importDefault(require_read_pkg_up());
  const util_1 = require("util");
  const exists = util_1.promisify(fs_1.default.exists);
  const readFile2 = util_1.promisify(fs_1.default.readFile);
  async function getSchemaPath8(schemaPathFromArgs) {
    return getSchemaPathInternal(schemaPathFromArgs, {
      cwd: process.cwd()
    });
  }
  exports2.getSchemaPath = getSchemaPath8;
  async function getSchemaPathInternal(schemaPathFromArgs, opts = {
    cwd: process.cwd()
  }) {
    var _a, _b;
    if (schemaPathFromArgs) {
      const customSchemaPath = await getAbsoluteSchemaPath(path_1.default.resolve(schemaPathFromArgs));
      if (!customSchemaPath) {
        throw new Error(`Provided --schema at ${schemaPathFromArgs} doesn't exist.`);
      }
      return customSchemaPath;
    }
    const schemaPath = (_b = (_a = await getSchemaPathFromPackageJson(opts.cwd)) !== null && _a !== void 0 ? _a : await getRelativeSchemaPath(opts.cwd)) !== null && _b !== void 0 ? _b : await resolveYarnSchema(opts.cwd);
    if (schemaPath) {
      return schemaPath;
    }
    return null;
  }
  exports2.getSchemaPathInternal = getSchemaPathInternal;
  async function getSchemaPathFromPackageJson(cwd) {
    var _a, _b;
    const pkgJson = await read_pkg_up_1.default({cwd});
    const schemaPathFromPkgJson = (_b = (_a = pkgJson === null || pkgJson === void 0 ? void 0 : pkgJson.packageJson) === null || _a === void 0 ? void 0 : _a.prisma) === null || _b === void 0 ? void 0 : _b.schema;
    if (!schemaPathFromPkgJson || !pkgJson) {
      return null;
    }
    if (typeof schemaPathFromPkgJson !== "string") {
      throw new Error(`Provided schema path \`${schemaPathFromPkgJson}\` from \`${path_1.default.relative(cwd, pkgJson.path)}\` must be of type string`);
    }
    const absoluteSchemaPath = path_1.default.isAbsolute(schemaPathFromPkgJson) ? schemaPathFromPkgJson : path_1.default.resolve(path_1.default.dirname(pkgJson.path), schemaPathFromPkgJson);
    if (await exists(absoluteSchemaPath) === false) {
      throw new Error(`Provided schema path \`${path_1.default.relative(cwd, absoluteSchemaPath)}\` from \`${path_1.default.relative(cwd, pkgJson.path)}\` doesn't exist.`);
    }
    return absoluteSchemaPath;
  }
  exports2.getSchemaPathFromPackageJson = getSchemaPathFromPackageJson;
  async function resolveYarnSchema(cwd) {
    var _a, _b, _c;
    if ((_a = process.env.npm_config_user_agent) === null || _a === void 0 ? void 0 : _a.includes("yarn")) {
      try {
        const {stdout: version} = await execa_1.default.command("yarn --version", {
          cwd
        });
        if (version.startsWith("2")) {
          return null;
        }
        const {stdout} = await execa_1.default.command("yarn workspaces info --json", {
          cwd
        });
        const json = getJson(stdout);
        const workspaces = Object.values(json);
        const workspaceRootDir = await findWorkspaceRoot(cwd);
        if (!workspaceRootDir) {
          return null;
        }
        for (const workspace of workspaces) {
          const workspacePath = path_1.default.join(workspaceRootDir, workspace.location);
          const workspaceSchemaPath = (_b = getSchemaPathFromPackageJsonSync(workspacePath)) !== null && _b !== void 0 ? _b : getRelativeSchemaPathSync(workspacePath);
          if (workspaceSchemaPath) {
            return workspaceSchemaPath;
          }
        }
        const workspaceSchemaPathFromRoot = (_c = getSchemaPathFromPackageJsonSync(workspaceRootDir)) !== null && _c !== void 0 ? _c : getRelativeSchemaPathSync(workspaceRootDir);
        if (workspaceSchemaPathFromRoot) {
          return workspaceSchemaPathFromRoot;
        }
      } catch (e) {
        return null;
      }
    }
    return null;
  }
  function resolveYarnSchemaSync(cwd) {
    var _a, _b, _c;
    if ((_a = process.env.npm_config_user_agent) === null || _a === void 0 ? void 0 : _a.includes("yarn")) {
      try {
        const {stdout: version} = execa_1.default.commandSync("yarn --version", {
          cwd
        });
        if (version.startsWith("2")) {
          return null;
        }
        const {stdout} = execa_1.default.commandSync("yarn workspaces info --json", {
          cwd
        });
        const json = getJson(stdout);
        const workspaces = Object.values(json);
        const workspaceRootDir = findWorkspaceRootSync(cwd);
        if (!workspaceRootDir) {
          return null;
        }
        for (const workspace of workspaces) {
          const workspacePath = path_1.default.join(workspaceRootDir, workspace.location);
          const workspaceSchemaPath = (_b = getSchemaPathFromPackageJsonSync(workspacePath)) !== null && _b !== void 0 ? _b : getRelativeSchemaPathSync(workspacePath);
          if (workspaceSchemaPath) {
            return workspaceSchemaPath;
          }
        }
        const workspaceSchemaPathFromRoot = (_c = getSchemaPathFromPackageJsonSync(workspaceRootDir)) !== null && _c !== void 0 ? _c : getRelativeSchemaPathSync(workspaceRootDir);
        if (workspaceSchemaPathFromRoot) {
          return workspaceSchemaPathFromRoot;
        }
      } catch (e) {
        return null;
      }
    }
    return null;
  }
  async function getAbsoluteSchemaPath(schemaPath) {
    if (await exists(schemaPath)) {
      return schemaPath;
    }
    return null;
  }
  async function getRelativeSchemaPath(cwd) {
    let schemaPath = path_1.default.join(cwd, "schema.prisma");
    if (await exists(schemaPath)) {
      return schemaPath;
    }
    schemaPath = path_1.default.join(cwd, `prisma/schema.prisma`);
    if (await exists(schemaPath)) {
      return schemaPath;
    }
    return null;
  }
  exports2.getRelativeSchemaPath = getRelativeSchemaPath;
  async function getSchemaDir(schemaPathFromArgs) {
    if (schemaPathFromArgs) {
      return path_1.default.resolve(path_1.default.dirname(schemaPathFromArgs));
    }
    const schemaPath = await getSchemaPath8(schemaPathFromArgs);
    if (!schemaPath) {
      return null;
    }
    return path_1.default.dirname(schemaPath);
  }
  exports2.getSchemaDir = getSchemaDir;
  async function getSchema3(schemaPathFromArgs) {
    const schemaPath = await getSchemaPath8(schemaPathFromArgs);
    if (!schemaPath) {
      throw new Error(`Could not find a ${chalk_1.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk_1.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk_1.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
    }
    return readFile2(schemaPath, "utf-8");
  }
  exports2.getSchema = getSchema3;
  function getSchemaPathSync(schemaPathFromArgs) {
    return getSchemaPathSyncInternal(schemaPathFromArgs, {
      cwd: process.cwd()
    });
  }
  exports2.getSchemaPathSync = getSchemaPathSync;
  function getSchemaPathSyncInternal(schemaPathFromArgs, opts = {
    cwd: process.cwd()
  }) {
    var _a, _b;
    if (schemaPathFromArgs) {
      const customSchemaPath = getAbsoluteSchemaPathSync(path_1.default.resolve(schemaPathFromArgs));
      if (!customSchemaPath) {
        throw new Error(`Provided --schema at ${schemaPathFromArgs} doesn't exist.`);
      }
      return customSchemaPath;
    }
    const schemaPath = (_b = (_a = getSchemaPathFromPackageJsonSync(opts.cwd)) !== null && _a !== void 0 ? _a : getRelativeSchemaPathSync(opts.cwd)) !== null && _b !== void 0 ? _b : resolveYarnSchemaSync(opts.cwd);
    if (schemaPath) {
      return schemaPath;
    }
    return null;
  }
  exports2.getSchemaPathSyncInternal = getSchemaPathSyncInternal;
  function getSchemaPathFromPackageJsonSync(cwd) {
    var _a, _b;
    const pkgJson = read_pkg_up_1.default.sync({cwd});
    const schemaPathFromPkgJson = (_b = (_a = pkgJson === null || pkgJson === void 0 ? void 0 : pkgJson.packageJson) === null || _a === void 0 ? void 0 : _a.prisma) === null || _b === void 0 ? void 0 : _b.schema;
    if (!schemaPathFromPkgJson || !pkgJson) {
      return null;
    }
    if (typeof schemaPathFromPkgJson !== "string") {
      throw new Error(`Provided schema path \`${schemaPathFromPkgJson}\` from \`${path_1.default.relative(cwd, pkgJson.path)}\` must be of type string`);
    }
    const absoluteSchemaPath = path_1.default.isAbsolute(schemaPathFromPkgJson) ? schemaPathFromPkgJson : path_1.default.resolve(path_1.default.dirname(pkgJson.path), schemaPathFromPkgJson);
    if (fs_1.default.existsSync(absoluteSchemaPath) === false) {
      throw new Error(`Provided schema path \`${path_1.default.relative(cwd, absoluteSchemaPath)}\` from \`${path_1.default.relative(cwd, pkgJson.path)}\` doesn't exist.`);
    }
    return absoluteSchemaPath;
  }
  exports2.getSchemaPathFromPackageJsonSync = getSchemaPathFromPackageJsonSync;
  function getAbsoluteSchemaPathSync(schemaPath) {
    if (fs_1.default.existsSync(schemaPath)) {
      return schemaPath;
    }
    return null;
  }
  function getRelativeSchemaPathSync(cwd) {
    let schemaPath = path_1.default.join(cwd, "schema.prisma");
    if (fs_1.default.existsSync(schemaPath)) {
      return schemaPath;
    }
    schemaPath = path_1.default.join(cwd, `prisma/schema.prisma`);
    if (fs_1.default.existsSync(schemaPath)) {
      return schemaPath;
    }
    return null;
  }
  function getSchemaDirSync(schemaPathFromArgs) {
    if (schemaPathFromArgs) {
      return path_1.default.resolve(path_1.default.dirname(schemaPathFromArgs));
    }
    const schemaPath = getSchemaPathSync(schemaPathFromArgs);
    if (schemaPath) {
      return path_1.default.dirname(schemaPath);
    }
    return null;
  }
  exports2.getSchemaDirSync = getSchemaDirSync;
  function getSchemaSync(schemaPathFromArgs) {
    const schemaPath = getSchemaPathSync(schemaPathFromArgs);
    if (!schemaPath) {
      throw new Error(`Could not find a ${chalk_1.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk_1.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk_1.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
    }
    return fs_1.default.readFileSync(schemaPath, "utf-8");
  }
  exports2.getSchemaSync = getSchemaSync;
  function getJson(stdout) {
    const firstCurly = stdout.indexOf("{");
    const lastCurly = stdout.lastIndexOf("}");
    const sliced = stdout.slice(firstCurly, lastCurly + 1);
    return JSON.parse(sliced);
  }
  function isPkgJsonWorkspaceRoot(pkgJson) {
    const workspaces = pkgJson.workspaces;
    if (!workspaces) {
      return false;
    }
    return Array.isArray(workspaces) || workspaces.packages !== void 0;
  }
  async function isNearestPkgJsonWorkspaceRoot(cwd) {
    const pkgJson = await read_pkg_up_1.default({cwd});
    if (!pkgJson) {
      return null;
    }
    return {
      isRoot: isPkgJsonWorkspaceRoot(pkgJson.packageJson),
      path: pkgJson.path
    };
  }
  function isNearestPkgJsonWorkspaceRootSync(cwd) {
    const pkgJson = read_pkg_up_1.default.sync({cwd});
    if (!pkgJson) {
      return null;
    }
    return {
      isRoot: isPkgJsonWorkspaceRoot(pkgJson.packageJson),
      path: pkgJson.path
    };
  }
  async function findWorkspaceRoot(cwd) {
    let pkgJson = await isNearestPkgJsonWorkspaceRoot(cwd);
    if (!pkgJson) {
      return null;
    }
    if (pkgJson.isRoot === true) {
      return path_1.default.dirname(pkgJson.path);
    }
    const pkgJsonParentDir = path_1.default.dirname(path_1.default.dirname(pkgJson.path));
    pkgJson = await isNearestPkgJsonWorkspaceRoot(pkgJsonParentDir);
    if (!pkgJson || pkgJson.isRoot === false) {
      return null;
    }
    return path_1.default.dirname(pkgJson.path);
  }
  function findWorkspaceRootSync(cwd) {
    let pkgJson = isNearestPkgJsonWorkspaceRootSync(cwd);
    if (!pkgJson) {
      return null;
    }
    if (pkgJson.isRoot === true) {
      return path_1.default.dirname(pkgJson.path);
    }
    const pkgJsonParentDir = path_1.default.dirname(path_1.default.dirname(pkgJson.path));
    pkgJson = isNearestPkgJsonWorkspaceRootSync(pkgJsonParentDir);
    if (!pkgJson || pkgJson.isRoot === false) {
      return null;
    }
    return path_1.default.dirname(pkgJson.path);
  }
});

// ../../node_modules/.pnpm/min-indent@1.0.1/node_modules/min-indent/index.js
var require_min_indent = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (string) => {
    const match = string.match(/^[ \t]*(?=\S)/gm);
    if (!match) {
      return 0;
    }
    return match.reduce((r, a) => Math.min(r, a.length), Infinity);
  };
});

// ../../node_modules/.pnpm/strip-indent@3.0.0/node_modules/strip-indent/index.js
var require_strip_indent = __commonJS((exports2, module3) => {
  "use strict";
  const minIndent = require_min_indent();
  module3.exports = (string) => {
    const indent2 = minIndent(string);
    if (indent2 === 0) {
      return string;
    }
    const regex = new RegExp(`^[ \\t]{${indent2}}`, "gm");
    return string.replace(regex, "");
  };
});

// ../../node_modules/.pnpm/arg@4.1.3/node_modules/arg/index.js
var require_arg = __commonJS((exports2, module3) => {
  const flagSymbol = Symbol("arg flag");
  function arg11(opts, {argv = process.argv.slice(2), permissive = false, stopAtPositional = false} = {}) {
    if (!opts) {
      throw new Error("Argument specification object is required");
    }
    const result = {_: []};
    const aliases2 = {};
    const handlers = {};
    for (const key of Object.keys(opts)) {
      if (!key) {
        throw new TypeError("Argument key cannot be an empty string");
      }
      if (key[0] !== "-") {
        throw new TypeError(`Argument key must start with '-' but found: '${key}'`);
      }
      if (key.length === 1) {
        throw new TypeError(`Argument key must have a name; singular '-' keys are not allowed: ${key}`);
      }
      if (typeof opts[key] === "string") {
        aliases2[key] = opts[key];
        continue;
      }
      let type = opts[key];
      let isFlag = false;
      if (Array.isArray(type) && type.length === 1 && typeof type[0] === "function") {
        const [fn] = type;
        type = (value, name, prev = []) => {
          prev.push(fn(value, name, prev[prev.length - 1]));
          return prev;
        };
        isFlag = fn === Boolean || fn[flagSymbol] === true;
      } else if (typeof type === "function") {
        isFlag = type === Boolean || type[flagSymbol] === true;
      } else {
        throw new TypeError(`Type missing or not a function or valid array type: ${key}`);
      }
      if (key[1] !== "-" && key.length > 2) {
        throw new TypeError(`Short argument keys (with a single hyphen) must have only one character: ${key}`);
      }
      handlers[key] = [type, isFlag];
    }
    for (let i = 0, len = argv.length; i < len; i++) {
      const wholeArg = argv[i];
      if (stopAtPositional && result._.length > 0) {
        result._ = result._.concat(argv.slice(i));
        break;
      }
      if (wholeArg === "--") {
        result._ = result._.concat(argv.slice(i + 1));
        break;
      }
      if (wholeArg.length > 1 && wholeArg[0] === "-") {
        const separatedArguments = wholeArg[1] === "-" || wholeArg.length === 2 ? [wholeArg] : wholeArg.slice(1).split("").map((a) => `-${a}`);
        for (let j = 0; j < separatedArguments.length; j++) {
          const arg12 = separatedArguments[j];
          const [originalArgName, argStr] = arg12[1] === "-" ? arg12.split(/=(.*)/, 2) : [arg12, void 0];
          let argName = originalArgName;
          while (argName in aliases2) {
            argName = aliases2[argName];
          }
          if (!(argName in handlers)) {
            if (permissive) {
              result._.push(arg12);
              continue;
            } else {
              const err = new Error(`Unknown or unexpected option: ${originalArgName}`);
              err.code = "ARG_UNKNOWN_OPTION";
              throw err;
            }
          }
          const [type, isFlag] = handlers[argName];
          if (!isFlag && j + 1 < separatedArguments.length) {
            throw new TypeError(`Option requires argument (but was followed by another short argument): ${originalArgName}`);
          }
          if (isFlag) {
            result[argName] = type(true, argName, result[argName]);
          } else if (argStr === void 0) {
            if (argv.length < i + 2 || argv[i + 1].length > 1 && argv[i + 1][0] === "-" && !(argv[i + 1].match(/^-?\d*(\.(?=\d))?\d*$/) && (type === Number || typeof BigInt !== "undefined" && type === BigInt))) {
              const extended = originalArgName === argName ? "" : ` (alias for ${argName})`;
              throw new Error(`Option requires argument: ${originalArgName}${extended}`);
            }
            result[argName] = type(argv[i + 1], argName, result[argName]);
            ++i;
          } else {
            result[argName] = type(argStr, argName, result[argName]);
          }
        }
      } else {
        result._.push(wholeArg);
      }
    }
    return result;
  }
  arg11.flag = (fn) => {
    fn[flagSymbol] = true;
    return fn;
  };
  arg11.COUNT = arg11.flag((v, name, existingCount) => (existingCount || 0) + 1);
  module3.exports = arg11;
});

// ../sdk/dist/cli/utils.js
var require_utils5 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.isError = exports2.arg = exports2.format = void 0;
  const strip_indent_1 = __importDefault(require_strip_indent());
  const arg_1 = __importDefault(require_arg());
  function format11(input = "") {
    return strip_indent_1.default(input).trimRight() + "\n";
  }
  exports2.format = format11;
  function arg11(argv, spec, stopAtPositional = true, permissive = false) {
    try {
      return arg_1.default(spec, {argv, stopAtPositional, permissive});
    } catch (err) {
      return err;
    }
  }
  exports2.arg = arg11;
  function isError7(result) {
    return result instanceof Error;
  }
  exports2.isError = isError7;
});

// ../sdk/dist/cli/hashes.js
var require_hashes = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getCLIPathHash = exports2.getProjectHash = void 0;
  const getSchema_1 = require_getSchema();
  const utils_1 = require_utils5();
  const crypto_1 = __importDefault(require("crypto"));
  async function getProjectHash3() {
    const args2 = utils_1.arg(process.argv.slice(3), {"--schema": String});
    let projectPath = await getSchema_1.getSchemaPath(args2["--schema"]);
    projectPath = projectPath || process.cwd();
    return crypto_1.default.createHash("sha256").update(projectPath).digest("hex").substring(0, 8);
  }
  exports2.getProjectHash = getProjectHash3;
  function getCLIPathHash3() {
    const cliPath = process.argv[1];
    return crypto_1.default.createHash("sha256").update(cliPath).digest("hex").substring(0, 8);
  }
  exports2.getCLIPathHash = getCLIPathHash3;
});

// ../../node_modules/.pnpm/p-limit@3.0.2/node_modules/p-limit/index.js
var require_p_limit2 = __commonJS((exports2, module3) => {
  "use strict";
  const pTry = require_p_try();
  const pLimit = (concurrency) => {
    if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {
      throw new TypeError("Expected `concurrency` to be a number from 1 and up");
    }
    const queue = [];
    let activeCount = 0;
    const next = () => {
      activeCount--;
      if (queue.length > 0) {
        queue.shift()();
      }
    };
    const run = async (fn, resolve, ...args2) => {
      activeCount++;
      const result = pTry(fn, ...args2);
      resolve(result);
      try {
        await result;
      } catch (e) {
      }
      next();
    };
    const enqueue = (fn, resolve, ...args2) => {
      queue.push(run.bind(null, fn, resolve, ...args2));
      (async () => {
        await Promise.resolve();
        if (activeCount < concurrency && queue.length > 0) {
          queue.shift()();
        }
      })();
    };
    const generator = (fn, ...args2) => new Promise((resolve) => enqueue(fn, resolve, ...args2));
    Object.defineProperties(generator, {
      activeCount: {
        get: () => activeCount
      },
      pendingCount: {
        get: () => queue.length
      },
      clearQueue: {
        value: () => {
          queue.length = 0;
        }
      }
    });
    return generator;
  };
  module3.exports = pLimit;
});

// ../../node_modules/.pnpm/p-locate@5.0.0/node_modules/p-locate/index.js
var require_p_locate2 = __commonJS((exports2, module3) => {
  "use strict";
  const pLimit = require_p_limit2();
  class EndError extends Error {
    constructor(value) {
      super();
      this.value = value;
    }
  }
  const testElement = async (element, tester) => tester(await element);
  const finder = async (element) => {
    const values = await Promise.all(element);
    if (values[1] === true) {
      throw new EndError(values[0]);
    }
    return false;
  };
  const pLocate = async (iterable, tester, options) => {
    options = {
      concurrency: Infinity,
      preserveOrder: true,
      ...options
    };
    const limit = pLimit(options.concurrency);
    const items = [...iterable].map((element) => [element, limit(testElement, element, tester)]);
    const checkLimit = pLimit(options.preserveOrder ? 1 : Infinity);
    try {
      await Promise.all(items.map((element) => checkLimit(finder, element)));
    } catch (error) {
      if (error instanceof EndError) {
        return error.value;
      }
      throw error;
    }
  };
  module3.exports = pLocate;
});

// ../../node_modules/.pnpm/locate-path@6.0.0/node_modules/locate-path/index.js
var require_locate_path2 = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const fs17 = require("fs");
  const {promisify: promisify3} = require("util");
  const pLocate = require_p_locate2();
  const fsStat = promisify3(fs17.stat);
  const fsLStat = promisify3(fs17.lstat);
  const typeMappings = {
    directory: "isDirectory",
    file: "isFile"
  };
  function checkType({type}) {
    if (type in typeMappings) {
      return;
    }
    throw new Error(`Invalid type specified: ${type}`);
  }
  const matchType = (type, stat) => type === void 0 || stat[typeMappings[type]]();
  module3.exports = async (paths, options) => {
    options = {
      cwd: process.cwd(),
      type: "file",
      allowSymlinks: true,
      ...options
    };
    checkType(options);
    const statFn = options.allowSymlinks ? fsStat : fsLStat;
    return pLocate(paths, async (path_) => {
      try {
        const stat = await statFn(path19.resolve(options.cwd, path_));
        return matchType(options.type, stat);
      } catch (e) {
        return false;
      }
    }, options);
  };
  module3.exports.sync = (paths, options) => {
    options = {
      cwd: process.cwd(),
      allowSymlinks: true,
      type: "file",
      ...options
    };
    checkType(options);
    const statFn = options.allowSymlinks ? fs17.statSync : fs17.lstatSync;
    for (const path_ of paths) {
      try {
        const stat = statFn(path19.resolve(options.cwd, path_));
        if (matchType(options.type, stat)) {
          return path_;
        }
      } catch (e) {
      }
    }
  };
});

// ../../node_modules/.pnpm/find-up@5.0.0/node_modules/find-up/index.js
var require_find_up2 = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const locatePath = require_locate_path2();
  const pathExists = require_path_exists();
  const stop = Symbol("findUp.stop");
  module3.exports = async (name, options = {}) => {
    let directory = path19.resolve(options.cwd || "");
    const {root} = path19.parse(directory);
    const paths = [].concat(name);
    const runMatcher = async (locateOptions) => {
      if (typeof name !== "function") {
        return locatePath(paths, locateOptions);
      }
      const foundPath = await name(locateOptions.cwd);
      if (typeof foundPath === "string") {
        return locatePath([foundPath], locateOptions);
      }
      return foundPath;
    };
    while (true) {
      const foundPath = await runMatcher({...options, cwd: directory});
      if (foundPath === stop) {
        return;
      }
      if (foundPath) {
        return path19.resolve(directory, foundPath);
      }
      if (directory === root) {
        return;
      }
      directory = path19.dirname(directory);
    }
  };
  module3.exports.sync = (name, options = {}) => {
    let directory = path19.resolve(options.cwd || "");
    const {root} = path19.parse(directory);
    const paths = [].concat(name);
    const runMatcher = (locateOptions) => {
      if (typeof name !== "function") {
        return locatePath.sync(paths, locateOptions);
      }
      const foundPath = name(locateOptions.cwd);
      if (typeof foundPath === "string") {
        return locatePath.sync([foundPath], locateOptions);
      }
      return foundPath;
    };
    while (true) {
      const foundPath = runMatcher({...options, cwd: directory});
      if (foundPath === stop) {
        return;
      }
      if (foundPath) {
        return path19.resolve(directory, foundPath);
      }
      if (directory === root) {
        return;
      }
      directory = path19.dirname(directory);
    }
  };
  module3.exports.exists = pathExists;
  module3.exports.sync.exists = pathExists.sync;
  module3.exports.stop = stop;
});

// ../../node_modules/.pnpm/dotenv@8.2.0/node_modules/dotenv/lib/main.js
var require_main2 = __commonJS((exports2, module3) => {
  const fs17 = require("fs");
  const path19 = require("path");
  function log(message) {
    console.log(`[dotenv][DEBUG] ${message}`);
  }
  const NEWLINE = "\n";
  const RE_INI_KEY_VAL = /^\s*([\w.-]+)\s*=\s*(.*)?\s*$/;
  const RE_NEWLINES = /\\n/g;
  const NEWLINES_MATCH = /\n|\r|\r\n/;
  function parse(src, options) {
    const debug3 = Boolean(options && options.debug);
    const obj = {};
    src.toString().split(NEWLINES_MATCH).forEach(function(line, idx) {
      const keyValueArr = line.match(RE_INI_KEY_VAL);
      if (keyValueArr != null) {
        const key = keyValueArr[1];
        let val = keyValueArr[2] || "";
        const end = val.length - 1;
        const isDoubleQuoted = val[0] === '"' && val[end] === '"';
        const isSingleQuoted = val[0] === "'" && val[end] === "'";
        if (isSingleQuoted || isDoubleQuoted) {
          val = val.substring(1, end);
          if (isDoubleQuoted) {
            val = val.replace(RE_NEWLINES, NEWLINE);
          }
        } else {
          val = val.trim();
        }
        obj[key] = val;
      } else if (debug3) {
        log(`did not match key and value when parsing line ${idx + 1}: ${line}`);
      }
    });
    return obj;
  }
  function config(options) {
    let dotenvPath = path19.resolve(process.cwd(), ".env");
    let encoding = "utf8";
    let debug3 = false;
    if (options) {
      if (options.path != null) {
        dotenvPath = options.path;
      }
      if (options.encoding != null) {
        encoding = options.encoding;
      }
      if (options.debug != null) {
        debug3 = true;
      }
    }
    try {
      const parsed = parse(fs17.readFileSync(dotenvPath, {encoding}), {debug: debug3});
      Object.keys(parsed).forEach(function(key) {
        if (!Object.prototype.hasOwnProperty.call(process.env, key)) {
          process.env[key] = parsed[key];
        } else if (debug3) {
          log(`"${key}" is already defined in \`process.env\` and will not be overwritten`);
        }
      });
      return {parsed};
    } catch (e) {
      return {error: e};
    }
  }
  module3.exports.config = config;
  module3.exports.parse = parse;
});

// ../sdk/dist/dotenvExpand.js
var require_dotenvExpand = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.dotenvExpand = void 0;
  function dotenvExpand(config) {
    const environment = config.ignoreProcessEnv ? {} : process.env;
    const interpolate = (envValue) => {
      var matches = envValue.match(/(.?\${(?:[a-zA-Z0-9_]+)?})/g) || [];
      return matches.reduce(function(newEnv, match) {
        const parts = /(.?)\${([a-zA-Z0-9_]+)?}/g.exec(match);
        if (!parts) {
          return newEnv;
        }
        const prefix = parts[1];
        let value, replacePart;
        if (prefix === "\\") {
          replacePart = parts[0];
          value = replacePart.replace("\\$", "$");
        } else {
          const key = parts[2];
          replacePart = parts[0].substring(prefix.length);
          value = environment.hasOwnProperty(key) ? environment[key] : config.parsed[key] || "";
          value = interpolate(value);
        }
        return newEnv.replace(replacePart, value);
      }, envValue);
    };
    for (const configKey in config.parsed) {
      const value = environment.hasOwnProperty(configKey) ? environment[configKey] : config.parsed[configKey];
      config.parsed[configKey] = interpolate(value);
    }
    for (var processKey in config.parsed) {
      environment[processKey] = config.parsed[processKey];
    }
    return config;
  }
  exports2.dotenvExpand = dotenvExpand;
});

// ../sdk/dist/utils/tryLoadEnvs.js
var require_tryLoadEnvs = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.exists = exports2.pathsEqual = exports2.loadEnv = exports2.tryLoadEnvs = void 0;
  const chalk_1 = __importDefault(require_source());
  const debug_1 = __importDefault(require_src2());
  const dotenv_1 = __importDefault(require_main2());
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const dotenvExpand_1 = require_dotenvExpand();
  const debug3 = debug_1.default("tryLoadEnv");
  function tryLoadEnvs2({rootEnvPath, schemaEnvPath}, opts = {
    conflictCheck: "none"
  }) {
    var _a, _b;
    const rootEnvInfo = loadEnv(rootEnvPath);
    if (opts.conflictCheck !== "none") {
      checkForConflicts(rootEnvInfo, schemaEnvPath, opts.conflictCheck);
    }
    let schemaEnvInfo = null;
    if (!pathsEqual(rootEnvInfo === null || rootEnvInfo === void 0 ? void 0 : rootEnvInfo.path, schemaEnvPath)) {
      schemaEnvInfo = loadEnv(schemaEnvPath);
    }
    if (!rootEnvInfo && !schemaEnvInfo) {
      debug3("No Environment variables loaded");
    }
    if (schemaEnvInfo === null || schemaEnvInfo === void 0 ? void 0 : schemaEnvInfo.dotenvResult.error) {
      return console.error(chalk_1.default.redBright.bold("Schema Env Error: ") + schemaEnvInfo.dotenvResult.error);
    }
    const messages = [rootEnvInfo === null || rootEnvInfo === void 0 ? void 0 : rootEnvInfo.message, schemaEnvInfo === null || schemaEnvInfo === void 0 ? void 0 : schemaEnvInfo.message].filter(Boolean);
    return {
      message: messages.join("\n"),
      parsed: {
        ...(_a = rootEnvInfo === null || rootEnvInfo === void 0 ? void 0 : rootEnvInfo.dotenvResult) === null || _a === void 0 ? void 0 : _a.parsed,
        ...(_b = schemaEnvInfo === null || schemaEnvInfo === void 0 ? void 0 : schemaEnvInfo.dotenvResult) === null || _b === void 0 ? void 0 : _b.parsed
      }
    };
  }
  exports2.tryLoadEnvs = tryLoadEnvs2;
  function checkForConflicts(rootEnvInfo, envPath, type) {
    const parsedRootEnv = rootEnvInfo === null || rootEnvInfo === void 0 ? void 0 : rootEnvInfo.dotenvResult.parsed;
    const areNotTheSame = !pathsEqual(rootEnvInfo === null || rootEnvInfo === void 0 ? void 0 : rootEnvInfo.path, envPath);
    if (parsedRootEnv && envPath && areNotTheSame && fs_1.default.existsSync(envPath)) {
      const envConfig = dotenv_1.default.parse(fs_1.default.readFileSync(envPath));
      const conflicts = [];
      for (const k in envConfig) {
        if (parsedRootEnv[k] === envConfig[k]) {
          conflicts.push(k);
        }
      }
      if (conflicts.length > 0) {
        const relativeRootEnvPath = path_1.default.relative(process.cwd(), rootEnvInfo.path);
        const relativeEnvPath = path_1.default.relative(process.cwd(), envPath);
        if (type === "error") {
          const message = `There is a conflict between env var${conflicts.length > 1 ? "s" : ""} in ${chalk_1.default.underline(relativeRootEnvPath)} and ${chalk_1.default.underline(relativeEnvPath)}.
Conflicting env vars:
${conflicts.map((conflict) => `  ${chalk_1.default.bold(conflict)}`).join("\n")}

We suggest to move the contents of ${chalk_1.default.underline(relativeEnvPath)} to ${chalk_1.default.underline(relativeRootEnvPath)} to consolidate your env vars.
`;
          throw new Error(message);
        } else if (type === "warn") {
          const message = `Conflict for env var${conflicts.length > 1 ? "s" : ""} ${conflicts.map((c) => chalk_1.default.bold(c)).join(", ")} in ${chalk_1.default.underline(relativeRootEnvPath)} and ${chalk_1.default.underline(relativeEnvPath)}.
Env vars from ${chalk_1.default.underline(relativeEnvPath)} overwrite the ones from ${chalk_1.default.underline(relativeRootEnvPath)}.
      `;
          console.warn(`${chalk_1.default.yellow("warn(prisma)")} ${message}`);
        }
      }
    }
  }
  function loadEnv(envPath) {
    if (exists(envPath)) {
      debug3(`Environment variables loaded from ${envPath}`);
      return {
        dotenvResult: dotenvExpand_1.dotenvExpand(dotenv_1.default.config({path: envPath})),
        message: chalk_1.default.dim(`Environment variables loaded from ${path_1.default.resolve(envPath)}`),
        path: envPath
      };
    } else {
      debug3(`Environment variables not found at ${envPath}`);
    }
    return null;
  }
  exports2.loadEnv = loadEnv;
  function pathsEqual(path1, path22) {
    return path1 && path22 && path_1.default.resolve(path1) === path_1.default.resolve(path22);
  }
  exports2.pathsEqual = pathsEqual;
  function exists(p) {
    return Boolean(p && fs_1.default.existsSync(p));
  }
  exports2.exists = exists;
});

// ../sdk/dist/utils/getEnvPaths.js
var require_getEnvPaths = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getEnvPaths = void 0;
  const debug_1 = __importDefault(require_src2());
  const find_up_1 = __importDefault(require_find_up2());
  const path_1 = __importDefault(require("path"));
  const fs_1 = __importDefault(require("fs"));
  const getSchema_1 = require_getSchema();
  const tryLoadEnvs_1 = require_tryLoadEnvs();
  const debug3 = debug_1.default("loadEnv");
  function getEnvPaths2(schemaPath, opts = {cwd: process.cwd()}) {
    var _a;
    const rootEnvPath = (_a = getProjectRootEnvPath({cwd: opts.cwd})) !== null && _a !== void 0 ? _a : null;
    const schemaEnvPathFromArgs = schemaPathToEnvPath(schemaPath);
    const schemaEnvPathFromPkgJson = schemaPathToEnvPath(readSchemaPathFromPkgJson());
    const schemaEnvPaths = [
      schemaEnvPathFromArgs,
      schemaEnvPathFromPkgJson,
      "./prisma/.env",
      "./.env"
    ];
    const schemaEnvPath = schemaEnvPaths.find(tryLoadEnvs_1.exists);
    return {rootEnvPath, schemaEnvPath};
  }
  exports2.getEnvPaths = getEnvPaths2;
  function readSchemaPathFromPkgJson() {
    try {
      return getSchema_1.getSchemaPathFromPackageJsonSync(process.cwd());
    } catch (_a) {
      return null;
    }
  }
  function getProjectRootEnvPath(opts) {
    const pkgJsonPath = find_up_1.default.sync((dir) => {
      const pkgPath = path_1.default.join(dir, "package.json");
      if (find_up_1.default.exists(pkgPath)) {
        try {
          let pkg2 = require(pkgPath);
          if (pkg2["name"] !== ".prisma/client") {
            return pkgPath;
          }
        } catch (e) {
          debug3(e);
        }
      }
    }, opts);
    if (!pkgJsonPath) {
      return null;
    }
    const candidate = path_1.default.join(path_1.default.dirname(pkgJsonPath), ".env");
    if (!fs_1.default.existsSync(candidate)) {
      return null;
    }
    return candidate;
  }
  function schemaPathToEnvPath(schemaPath) {
    if (!schemaPath)
      return null;
    return path_1.default.join(path_1.default.dirname(schemaPath), ".env");
  }
});

// ../sdk/dist/utils/trimBlocksFromSchema.js
var require_trimBlocksFromSchema = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.trimBlocksFromSchema = exports2.trimNewLine = void 0;
  function trimNewLine(str) {
    if (str === "") {
      return str;
    }
    let newStr = str;
    if (/\r?\n|\r/.exec(newStr[0])) {
      newStr = newStr.slice(1);
    }
    if (newStr.length > 0 && /\r?\n|\r/.exec(newStr[newStr.length - 1])) {
      newStr = newStr.slice(0, newStr.length - 1);
    }
    return newStr;
  }
  exports2.trimNewLine = trimNewLine;
  function trimBlocksFromSchema2(str, blocks = ["model", "enum", "datasource", "generator"]) {
    const lines = str.split("\n");
    if (lines.length <= 2) {
      return str;
    }
    const modelPositions = [];
    let blockOpen = false;
    let currentStart = -1;
    lines.forEach((line, index) => {
      const trimmed = line.trim();
      if (blocks.some((b) => line.startsWith(b)) && line.endsWith("{")) {
        blockOpen = true;
        currentStart = index;
      }
      if (trimmed.endsWith("}") && currentStart > -1 && blockOpen) {
        modelPositions.push({
          start: currentStart,
          end: index
        });
        blockOpen = false;
        currentStart = -1;
      }
    });
    if (modelPositions.length === 0) {
      return str;
    }
    return trimNewLine(modelPositions.reduceRight((acc, position) => {
      acc.splice(position.start, position.end - position.start + 1);
      return acc;
    }, lines).join("\n"));
  }
  exports2.trimBlocksFromSchema = trimBlocksFromSchema2;
});

// ../sdk/dist/migrateEngineCommands.js
var require_migrateEngineCommands = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.dropDatabase = exports2.createDatabase = exports2.canConnectToDatabase = void 0;
  const execa_1 = __importDefault(require_execa());
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const util_1 = require("util");
  const convertCredentials_1 = require_convertCredentials();
  const resolveBinary_1 = require_resolveBinary();
  const getSchema_1 = require_getSchema();
  const exists = util_1.promisify(fs_1.default.exists);
  async function canConnectToDatabase3(connectionString, cwd = process.cwd(), migrationEnginePath) {
    const credentials = convertCredentials_1.uriToCredentials(connectionString);
    if (credentials.type === "sqlite") {
      const sqliteExists = await doesSqliteDbExist(connectionString, cwd);
      if (sqliteExists) {
        return true;
      } else {
        return {
          code: "P1003",
          message: "SQLite database file doesn't exist"
        };
      }
    }
    migrationEnginePath = migrationEnginePath || await resolveBinary_1.resolveBinary("migration-engine");
    try {
      await execa_1.default(migrationEnginePath, ["cli", "--datasource", connectionString, "can-connect-to-database"], {
        cwd,
        env: {
          ...process.env,
          RUST_BACKTRACE: "1",
          RUST_LOG: "info"
        }
      });
      return true;
    } catch (e) {
      if (e.stdout) {
        let json;
        try {
          json = JSON.parse(e.stdout);
        } catch (e2) {
          throw new Error(`Can't parse migration engine response:
${e2.stdout}`);
        }
        return {
          code: json.error_code,
          message: json.message,
          meta: json.meta
        };
      } else if (e.stderr) {
        throw new Error(`Migration engine error:
${e.stderr}`);
      } else {
        throw new Error(`Migration engine exited.`);
      }
    }
  }
  exports2.canConnectToDatabase = canConnectToDatabase3;
  async function createDatabase(connectionString, cwd = process.cwd(), migrationEnginePath) {
    const dbExists = await canConnectToDatabase3(connectionString, cwd, migrationEnginePath);
    if (dbExists === true) {
      return false;
    }
    migrationEnginePath = migrationEnginePath || await resolveBinary_1.resolveBinary("migration-engine");
    await execa_1.default(migrationEnginePath, ["cli", "--datasource", connectionString, "create-database"], {
      cwd,
      env: {
        ...process.env,
        RUST_BACKTRACE: "1",
        RUST_LOG: "info"
      }
    });
    return true;
  }
  exports2.createDatabase = createDatabase;
  async function dropDatabase(connectionString, cwd = process.cwd(), migrationEnginePath) {
    migrationEnginePath = migrationEnginePath || await resolveBinary_1.resolveBinary("migration-engine");
    return await execa_1.default(migrationEnginePath, ["cli", "--datasource", connectionString, "drop-database"], {
      cwd,
      env: {
        ...process.env,
        RUST_BACKTRACE: "1",
        RUST_LOG: "info"
      }
    });
  }
  exports2.dropDatabase = dropDatabase;
  async function doesSqliteDbExist(connectionString, schemaDir) {
    let filePath = connectionString;
    if (filePath.startsWith("file:")) {
      filePath = filePath.slice(5);
    } else if (filePath.startsWith("sqlite:")) {
      filePath = filePath.slice(7);
    }
    const cwd = schemaDir || await getSchema_1.getSchemaDir();
    if (!cwd) {
      throw new Error(`Could not find schema.prisma in ${process.cwd()}`);
    }
    const absoluteTarget = path_1.default.resolve(cwd, filePath);
    return exists(absoluteTarget);
  }
});

// ../sdk/dist/index.js
var require_dist11 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.dropDatabase = exports2.createDatabase = exports2.canConnectToDatabase = exports2.trimNewLine = exports2.trimBlocksFromSchema = exports2.mapPreviewFeatures = exports2.extractPreviewFeatures = exports2.tryLoadEnvs = exports2.getEnvPaths = exports2.getSchemaPathFromPackageJsonSync = exports2.getSchemaPathFromPackageJson = exports2.getSchemaDirSync = exports2.getSchemaSync = exports2.getSchemaPathSync = exports2.getSchema = exports2.getSchemaDir = exports2.getSchemaPath = exports2.getRelativeSchemaPath = exports2.isError = exports2.format = exports2.arg = exports2.getProjectHash = exports2.getCLIPathHash = exports2.unknownCommand = exports2.HelpError = exports2.isCi = exports2.getCommandWithExecutor = exports2.isCurrentBinInstalledGlobally = exports2.drawBox = exports2.maskSchema = exports2.sendPanic = exports2.link = exports2.ErrorArea = exports2.RustPanic = exports2.uriToCredentials = exports2.credentialsToUri = exports2.getPackedPackage = exports2.formatSchema = exports2.getVersion = exports2.getConfig = exports2.getDMMF = exports2.getGenerator = exports2.getGenerators = exports2.Generator = exports2.IntrospectionEngine = exports2.highlightTS = exports2.highlightSql = exports2.highlightDatamodel = exports2.missingGeneratorMessage = exports2.resolveBinary = exports2.keyBy = exports2.pick = void 0;
  var pick_1 = require_pick();
  Object.defineProperty(exports2, "pick", {enumerable: true, get: function() {
    return pick_1.pick;
  }});
  var keyBy_1 = require_keyBy();
  Object.defineProperty(exports2, "keyBy", {enumerable: true, get: function() {
    return keyBy_1.keyBy;
  }});
  var resolveBinary_1 = require_resolveBinary();
  Object.defineProperty(exports2, "resolveBinary", {enumerable: true, get: function() {
    return resolveBinary_1.resolveBinary;
  }});
  var missingGeneratorMessage_1 = require_missingGeneratorMessage();
  Object.defineProperty(exports2, "missingGeneratorMessage", {enumerable: true, get: function() {
    return missingGeneratorMessage_1.missingGeneratorMessage;
  }});
  var highlight_1 = require_highlight();
  Object.defineProperty(exports2, "highlightDatamodel", {enumerable: true, get: function() {
    return highlight_1.highlightDatamodel;
  }});
  Object.defineProperty(exports2, "highlightSql", {enumerable: true, get: function() {
    return highlight_1.highlightSql;
  }});
  Object.defineProperty(exports2, "highlightTS", {enumerable: true, get: function() {
    return highlight_1.highlightTS;
  }});
  var IntrospectionEngine_1 = require_IntrospectionEngine();
  Object.defineProperty(exports2, "IntrospectionEngine", {enumerable: true, get: function() {
    return IntrospectionEngine_1.IntrospectionEngine;
  }});
  var Generator_1 = require_Generator();
  Object.defineProperty(exports2, "Generator", {enumerable: true, get: function() {
    return Generator_1.Generator;
  }});
  var getGenerators_1 = require_getGenerators();
  Object.defineProperty(exports2, "getGenerators", {enumerable: true, get: function() {
    return getGenerators_1.getGenerators;
  }});
  Object.defineProperty(exports2, "getGenerator", {enumerable: true, get: function() {
    return getGenerators_1.getGenerator;
  }});
  var engineCommands_1 = require_engineCommands();
  Object.defineProperty(exports2, "getDMMF", {enumerable: true, get: function() {
    return engineCommands_1.getDMMF;
  }});
  Object.defineProperty(exports2, "getConfig", {enumerable: true, get: function() {
    return engineCommands_1.getConfig;
  }});
  Object.defineProperty(exports2, "getVersion", {enumerable: true, get: function() {
    return engineCommands_1.getVersion;
  }});
  Object.defineProperty(exports2, "formatSchema", {enumerable: true, get: function() {
    return engineCommands_1.formatSchema;
  }});
  var getPackedPackage_1 = require_getPackedPackage();
  Object.defineProperty(exports2, "getPackedPackage", {enumerable: true, get: function() {
    return getPackedPackage_1.getPackedPackage;
  }});
  var convertCredentials_1 = require_convertCredentials();
  Object.defineProperty(exports2, "credentialsToUri", {enumerable: true, get: function() {
    return convertCredentials_1.credentialsToUri;
  }});
  Object.defineProperty(exports2, "uriToCredentials", {enumerable: true, get: function() {
    return convertCredentials_1.uriToCredentials;
  }});
  var panic_1 = require_panic();
  Object.defineProperty(exports2, "RustPanic", {enumerable: true, get: function() {
    return panic_1.RustPanic;
  }});
  Object.defineProperty(exports2, "ErrorArea", {enumerable: true, get: function() {
    return panic_1.ErrorArea;
  }});
  var link_1 = require_link();
  Object.defineProperty(exports2, "link", {enumerable: true, get: function() {
    return link_1.link;
  }});
  var sendPanic_1 = require_sendPanic();
  Object.defineProperty(exports2, "sendPanic", {enumerable: true, get: function() {
    return sendPanic_1.sendPanic;
  }});
  var maskSchema_1 = require_maskSchema();
  Object.defineProperty(exports2, "maskSchema", {enumerable: true, get: function() {
    return maskSchema_1.maskSchema;
  }});
  var drawBox_1 = require_drawBox();
  Object.defineProperty(exports2, "drawBox", {enumerable: true, get: function() {
    return drawBox_1.drawBox;
  }});
  var isCurrentBinInstalledGlobally_1 = require_isCurrentBinInstalledGlobally();
  Object.defineProperty(exports2, "isCurrentBinInstalledGlobally", {enumerable: true, get: function() {
    return isCurrentBinInstalledGlobally_1.isCurrentBinInstalledGlobally;
  }});
  var getCommandWithExecutor_1 = require_getCommandWithExecutor();
  Object.defineProperty(exports2, "getCommandWithExecutor", {enumerable: true, get: function() {
    return getCommandWithExecutor_1.getCommandWithExecutor;
  }});
  var isCi_1 = require_isCi();
  Object.defineProperty(exports2, "isCi", {enumerable: true, get: function() {
    return isCi_1.isCi;
  }});
  var Help_1 = require_Help();
  Object.defineProperty(exports2, "HelpError", {enumerable: true, get: function() {
    return Help_1.HelpError;
  }});
  Object.defineProperty(exports2, "unknownCommand", {enumerable: true, get: function() {
    return Help_1.unknownCommand;
  }});
  var hashes_1 = require_hashes();
  Object.defineProperty(exports2, "getCLIPathHash", {enumerable: true, get: function() {
    return hashes_1.getCLIPathHash;
  }});
  Object.defineProperty(exports2, "getProjectHash", {enumerable: true, get: function() {
    return hashes_1.getProjectHash;
  }});
  var utils_1 = require_utils5();
  Object.defineProperty(exports2, "arg", {enumerable: true, get: function() {
    return utils_1.arg;
  }});
  Object.defineProperty(exports2, "format", {enumerable: true, get: function() {
    return utils_1.format;
  }});
  Object.defineProperty(exports2, "isError", {enumerable: true, get: function() {
    return utils_1.isError;
  }});
  var getSchema_1 = require_getSchema();
  Object.defineProperty(exports2, "getRelativeSchemaPath", {enumerable: true, get: function() {
    return getSchema_1.getRelativeSchemaPath;
  }});
  Object.defineProperty(exports2, "getSchemaPath", {enumerable: true, get: function() {
    return getSchema_1.getSchemaPath;
  }});
  Object.defineProperty(exports2, "getSchemaDir", {enumerable: true, get: function() {
    return getSchema_1.getSchemaDir;
  }});
  Object.defineProperty(exports2, "getSchema", {enumerable: true, get: function() {
    return getSchema_1.getSchema;
  }});
  Object.defineProperty(exports2, "getSchemaPathSync", {enumerable: true, get: function() {
    return getSchema_1.getSchemaPathSync;
  }});
  Object.defineProperty(exports2, "getSchemaSync", {enumerable: true, get: function() {
    return getSchema_1.getSchemaSync;
  }});
  Object.defineProperty(exports2, "getSchemaDirSync", {enumerable: true, get: function() {
    return getSchema_1.getSchemaDirSync;
  }});
  Object.defineProperty(exports2, "getSchemaPathFromPackageJson", {enumerable: true, get: function() {
    return getSchema_1.getSchemaPathFromPackageJson;
  }});
  Object.defineProperty(exports2, "getSchemaPathFromPackageJsonSync", {enumerable: true, get: function() {
    return getSchema_1.getSchemaPathFromPackageJsonSync;
  }});
  var getEnvPaths_1 = require_getEnvPaths();
  Object.defineProperty(exports2, "getEnvPaths", {enumerable: true, get: function() {
    return getEnvPaths_1.getEnvPaths;
  }});
  var tryLoadEnvs_1 = require_tryLoadEnvs();
  Object.defineProperty(exports2, "tryLoadEnvs", {enumerable: true, get: function() {
    return tryLoadEnvs_1.tryLoadEnvs;
  }});
  var extractPreviewFeatures_1 = require_extractPreviewFeatures();
  Object.defineProperty(exports2, "extractPreviewFeatures", {enumerable: true, get: function() {
    return extractPreviewFeatures_1.extractPreviewFeatures;
  }});
  var mapPreviewFeatures_1 = require_mapPreviewFeatures();
  Object.defineProperty(exports2, "mapPreviewFeatures", {enumerable: true, get: function() {
    return mapPreviewFeatures_1.mapPreviewFeatures;
  }});
  var trimBlocksFromSchema_1 = require_trimBlocksFromSchema();
  Object.defineProperty(exports2, "trimBlocksFromSchema", {enumerable: true, get: function() {
    return trimBlocksFromSchema_1.trimBlocksFromSchema;
  }});
  Object.defineProperty(exports2, "trimNewLine", {enumerable: true, get: function() {
    return trimBlocksFromSchema_1.trimNewLine;
  }});
  var migrateEngineCommands_1 = require_migrateEngineCommands();
  Object.defineProperty(exports2, "canConnectToDatabase", {enumerable: true, get: function() {
    return migrateEngineCommands_1.canConnectToDatabase;
  }});
  Object.defineProperty(exports2, "createDatabase", {enumerable: true, get: function() {
    return migrateEngineCommands_1.createDatabase;
  }});
  Object.defineProperty(exports2, "dropDatabase", {enumerable: true, get: function() {
    return migrateEngineCommands_1.dropDatabase;
  }});
});

// ../migrate/dist/generateInThread.js
var require_generateInThread = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.generateInThread = void 0;
  const child_process_1 = require("child_process");
  const fs_1 = __importDefault(require("fs"));
  const util_1 = require("util");
  const writeFile = util_1.promisify(fs_1.default.writeFile);
  const exists = util_1.promisify(fs_1.default.exists);
  async function generateInThread(options) {
    const workerPath = eval(`require('path').join(__dirname, 'GeneratorWorker.js')`);
    await ensureWorker(workerPath);
    return new Promise((resolve, reject) => {
      const child = child_process_1.fork(workerPath, [], {
        silent: true
      });
      child.send(JSON.stringify(options));
      child.on("error", (e) => {
        reject(e);
      });
      child.on("message", (msg) => {
        const data = JSON.parse(msg);
        if (data.error) {
          reject(data.error);
        }
      });
      child.on("close", (code) => {
        if (code === 0) {
          resolve("");
        } else {
          reject();
        }
      });
    });
  }
  exports2.generateInThread = generateInThread;
  async function ensureWorker(workerPath) {
    if (await exists(workerPath)) {
      return;
    }
    const code = `process.on('message', async message => {
  const job /*: GeneratorWorkerJob*/ = JSON.parse(message)
  try {
    const package = require(job.packagePath)
    const generatorFunction = package.generatorDefinition.generate
    await generatorFunction(job.config)
    process.exit(0)
  } catch (e) {
    process.send(JSON.stringify({ error: e.toString() }))
    process.exit(1)
  }
}`;
    await writeFile(workerPath, code);
  }
});

// ../../node_modules/.pnpm/restore-cursor@3.1.0/node_modules/restore-cursor/index.js
var require_restore_cursor = __commonJS((exports2, module3) => {
  "use strict";
  const onetime = require_onetime();
  const signalExit = require_signal_exit();
  module3.exports = onetime(() => {
    signalExit(() => {
      process.stderr.write("[?25h");
    }, {alwaysLast: true});
  });
});

// ../../node_modules/.pnpm/cli-cursor@3.1.0/node_modules/cli-cursor/index.js
var require_cli_cursor = __commonJS((exports2) => {
  "use strict";
  const restoreCursor = require_restore_cursor();
  let isHidden = false;
  exports2.show = (writableStream = process.stderr) => {
    if (!writableStream.isTTY) {
      return;
    }
    isHidden = false;
    writableStream.write("[?25h");
  };
  exports2.hide = (writableStream = process.stderr) => {
    if (!writableStream.isTTY) {
      return;
    }
    restoreCursor();
    isHidden = true;
    writableStream.write("[?25l");
  };
  exports2.toggle = (force, writableStream) => {
    if (force !== void 0) {
      isHidden = force;
    }
    if (isHidden) {
      exports2.show(writableStream);
    } else {
      exports2.hide(writableStream);
    }
  };
});

// ../../node_modules/.pnpm/dashify@2.0.0/node_modules/dashify/index.js
var require_dashify = __commonJS((exports2, module3) => {
  /*!
   * dashify <https://github.com/jonschlinkert/dashify>
   *
   * Copyright (c) 2015-2017, Jon Schlinkert.
   * Released under the MIT License.
   */
  "use strict";
  module3.exports = (str, options) => {
    if (typeof str !== "string")
      throw new TypeError("expected a string");
    return str.trim().replace(/([a-z])([A-Z])/g, "$1-$2").replace(/\W/g, (m) => /[À-ž]/.test(m) ? m : "-").replace(/^-+|-+$/g, "").replace(/-{2,}/g, (m) => options && options.condense ? "-" : m).toLowerCase();
  };
});

// ../../node_modules/.pnpm/ansi-styles@4.2.1/node_modules/ansi-styles/index.js
var require_ansi_styles3 = __commonJS((exports2, module3) => {
  "use strict";
  const wrapAnsi16 = (fn, offset) => (...args2) => {
    const code = fn(...args2);
    return `[${code + offset}m`;
  };
  const wrapAnsi256 = (fn, offset) => (...args2) => {
    const code = fn(...args2);
    return `[${38 + offset};5;${code}m`;
  };
  const wrapAnsi16m = (fn, offset) => (...args2) => {
    const rgb = fn(...args2);
    return `[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
  };
  const ansi2ansi = (n) => n;
  const rgb2rgb = (r, g, b) => [r, g, b];
  const setLazyProperty = (object, property, get) => {
    Object.defineProperty(object, property, {
      get: () => {
        const value = get();
        Object.defineProperty(object, property, {
          value,
          enumerable: true,
          configurable: true
        });
        return value;
      },
      enumerable: true,
      configurable: true
    });
  };
  let colorConvert;
  const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
    if (colorConvert === void 0) {
      colorConvert = require_color_convert();
    }
    const offset = isBackground ? 10 : 0;
    const styles = {};
    for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
      const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
      if (sourceSpace === targetSpace) {
        styles[name] = wrap(identity, offset);
      } else if (typeof suite === "object") {
        styles[name] = wrap(suite[targetSpace], offset);
      }
    }
    return styles;
  };
  function assembleStyles() {
    const codes = new Map();
    const styles = {
      modifier: {
        reset: [0, 0],
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        blackBright: [90, 39],
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    styles.color.gray = styles.color.blackBright;
    styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
    styles.color.grey = styles.color.blackBright;
    styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
    for (const [groupName, group] of Object.entries(styles)) {
      for (const [styleName, style] of Object.entries(group)) {
        styles[styleName] = {
          open: `[${style[0]}m`,
          close: `[${style[1]}m`
        };
        group[styleName] = styles[styleName];
        codes.set(style[0], style[1]);
      }
      Object.defineProperty(styles, groupName, {
        value: group,
        enumerable: false
      });
    }
    Object.defineProperty(styles, "codes", {
      value: codes,
      enumerable: false
    });
    styles.color.close = "[39m";
    styles.bgColor.close = "[49m";
    setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
    setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
    setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
    setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
    setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
    setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
    return styles;
  }
  Object.defineProperty(module3, "exports", {
    enumerable: true,
    get: assembleStyles
  });
});

// ../../node_modules/.pnpm/wrap-ansi@6.2.0/node_modules/wrap-ansi/index.js
var require_wrap_ansi = __commonJS((exports2, module3) => {
  "use strict";
  const stringWidth = require_string_width();
  const stripAnsi = require_strip_ansi();
  const ansiStyles = require_ansi_styles3();
  const ESCAPES = new Set([
    "",
    ""
  ]);
  const END_CODE = 39;
  const wrapAnsi = (code) => `${ESCAPES.values().next().value}[${code}m`;
  const wordLengths = (string) => string.split(" ").map((character) => stringWidth(character));
  const wrapWord = (rows, word, columns) => {
    const characters = [...word];
    let isInsideEscape = false;
    let visible = stringWidth(stripAnsi(rows[rows.length - 1]));
    for (const [index, character] of characters.entries()) {
      const characterLength = stringWidth(character);
      if (visible + characterLength <= columns) {
        rows[rows.length - 1] += character;
      } else {
        rows.push(character);
        visible = 0;
      }
      if (ESCAPES.has(character)) {
        isInsideEscape = true;
      } else if (isInsideEscape && character === "m") {
        isInsideEscape = false;
        continue;
      }
      if (isInsideEscape) {
        continue;
      }
      visible += characterLength;
      if (visible === columns && index < characters.length - 1) {
        rows.push("");
        visible = 0;
      }
    }
    if (!visible && rows[rows.length - 1].length > 0 && rows.length > 1) {
      rows[rows.length - 2] += rows.pop();
    }
  };
  const stringVisibleTrimSpacesRight = (str) => {
    const words = str.split(" ");
    let last = words.length;
    while (last > 0) {
      if (stringWidth(words[last - 1]) > 0) {
        break;
      }
      last--;
    }
    if (last === words.length) {
      return str;
    }
    return words.slice(0, last).join(" ") + words.slice(last).join("");
  };
  const exec = (string, columns, options = {}) => {
    if (options.trim !== false && string.trim() === "") {
      return "";
    }
    let pre = "";
    let ret = "";
    let escapeCode;
    const lengths = wordLengths(string);
    let rows = [""];
    for (const [index, word] of string.split(" ").entries()) {
      if (options.trim !== false) {
        rows[rows.length - 1] = rows[rows.length - 1].trimLeft();
      }
      let rowLength = stringWidth(rows[rows.length - 1]);
      if (index !== 0) {
        if (rowLength >= columns && (options.wordWrap === false || options.trim === false)) {
          rows.push("");
          rowLength = 0;
        }
        if (rowLength > 0 || options.trim === false) {
          rows[rows.length - 1] += " ";
          rowLength++;
        }
      }
      if (options.hard && lengths[index] > columns) {
        const remainingColumns = columns - rowLength;
        const breaksStartingThisLine = 1 + Math.floor((lengths[index] - remainingColumns - 1) / columns);
        const breaksStartingNextLine = Math.floor((lengths[index] - 1) / columns);
        if (breaksStartingNextLine < breaksStartingThisLine) {
          rows.push("");
        }
        wrapWord(rows, word, columns);
        continue;
      }
      if (rowLength + lengths[index] > columns && rowLength > 0 && lengths[index] > 0) {
        if (options.wordWrap === false && rowLength < columns) {
          wrapWord(rows, word, columns);
          continue;
        }
        rows.push("");
      }
      if (rowLength + lengths[index] > columns && options.wordWrap === false) {
        wrapWord(rows, word, columns);
        continue;
      }
      rows[rows.length - 1] += word;
    }
    if (options.trim !== false) {
      rows = rows.map(stringVisibleTrimSpacesRight);
    }
    pre = rows.join("\n");
    for (const [index, character] of [...pre].entries()) {
      ret += character;
      if (ESCAPES.has(character)) {
        const code2 = parseFloat(/\d[^m]*/.exec(pre.slice(index, index + 4)));
        escapeCode = code2 === END_CODE ? null : code2;
      }
      const code = ansiStyles.codes.get(Number(escapeCode));
      if (escapeCode && code) {
        if (pre[index + 1] === "\n") {
          ret += wrapAnsi(code);
        } else if (character === "\n") {
          ret += wrapAnsi(escapeCode);
        }
      }
    }
    return ret;
  };
  module3.exports = (string, columns, options) => {
    return String(string).normalize().replace(/\r\n/g, "\n").split("\n").map((line) => exec(line, columns, options)).join("\n");
  };
});

// ../../node_modules/.pnpm/slice-ansi@4.0.0/node_modules/slice-ansi/index.js
var require_slice_ansi2 = __commonJS((exports2, module3) => {
  "use strict";
  const isFullwidthCodePoint = require_is_fullwidth_code_point();
  const astralRegex = require_astral_regex();
  const ansiStyles = require_ansi_styles3();
  const ESCAPES = [
    "",
    ""
  ];
  const wrapAnsi = (code) => `${ESCAPES[0]}[${code}m`;
  const checkAnsi = (ansiCodes, isEscapes, endAnsiCode) => {
    let output = [];
    ansiCodes = [...ansiCodes];
    for (let ansiCode of ansiCodes) {
      const ansiCodeOrigin = ansiCode;
      if (ansiCode.includes(";")) {
        ansiCode = ansiCode.split(";")[0][0] + "0";
      }
      const item = ansiStyles.codes.get(Number.parseInt(ansiCode, 10));
      if (item) {
        const indexEscape = ansiCodes.indexOf(item.toString());
        if (indexEscape === -1) {
          output.push(wrapAnsi(isEscapes ? item : ansiCodeOrigin));
        } else {
          ansiCodes.splice(indexEscape, 1);
        }
      } else if (isEscapes) {
        output.push(wrapAnsi(0));
        break;
      } else {
        output.push(wrapAnsi(ansiCodeOrigin));
      }
    }
    if (isEscapes) {
      output = output.filter((element, index) => output.indexOf(element) === index);
      if (endAnsiCode !== void 0) {
        const fistEscapeCode = wrapAnsi(ansiStyles.codes.get(Number.parseInt(endAnsiCode, 10)));
        output = output.reduce((current, next) => next === fistEscapeCode ? [next, ...current] : [...current, next], []);
      }
    }
    return output.join("");
  };
  module3.exports = (string, begin, end) => {
    const characters = [...string];
    const ansiCodes = [];
    let stringEnd = typeof end === "number" ? end : characters.length;
    let isInsideEscape = false;
    let ansiCode;
    let visible = 0;
    let output = "";
    for (const [index, character] of characters.entries()) {
      let leftEscape = false;
      if (ESCAPES.includes(character)) {
        const code = /\d[^m]*/.exec(string.slice(index, index + 18));
        ansiCode = code && code.length > 0 ? code[0] : void 0;
        if (visible < stringEnd) {
          isInsideEscape = true;
          if (ansiCode !== void 0) {
            ansiCodes.push(ansiCode);
          }
        }
      } else if (isInsideEscape && character === "m") {
        isInsideEscape = false;
        leftEscape = true;
      }
      if (!isInsideEscape && !leftEscape) {
        visible++;
      }
      if (!astralRegex({exact: true}).test(character) && isFullwidthCodePoint(character.codePointAt())) {
        visible++;
        if (typeof end !== "number") {
          stringEnd++;
        }
      }
      if (visible > begin && visible <= stringEnd) {
        output += character;
      } else if (visible === begin && !isInsideEscape && ansiCode !== void 0) {
        output = checkAnsi(ansiCodes);
      } else if (visible >= stringEnd) {
        output += checkAnsi(ansiCodes, true, ansiCode);
        break;
      }
    }
    return output;
  };
});

// ../../node_modules/.pnpm/log-update@4.0.0/node_modules/log-update/index.js
var require_log_update = __commonJS((exports2, module3) => {
  "use strict";
  const ansiEscapes = require_ansi_escapes();
  const cliCursor = require_cli_cursor();
  const wrapAnsi = require_wrap_ansi();
  const sliceAnsi = require_slice_ansi2();
  const defaultTerminalHeight = 24;
  const getWidth = (stream) => {
    const {columns} = stream;
    if (!columns) {
      return 80;
    }
    return columns;
  };
  const fitToTerminalHeight = (stream, text) => {
    const terminalHeight = stream.rows || defaultTerminalHeight;
    const lines = text.split("\n");
    const toRemove = lines.length - terminalHeight;
    if (toRemove <= 0) {
      return text;
    }
    return sliceAnsi(text, lines.slice(0, toRemove).join("\n").length + 1, text.length);
  };
  const main2 = (stream, {showCursor = false} = {}) => {
    let previousLineCount = 0;
    let previousWidth = getWidth(stream);
    let previousOutput = "";
    const render = (...args2) => {
      if (!showCursor) {
        cliCursor.hide();
      }
      let output = args2.join(" ") + "\n";
      output = fitToTerminalHeight(stream, output);
      const width = getWidth(stream);
      if (output === previousOutput && previousWidth === width) {
        return;
      }
      previousOutput = output;
      previousWidth = width;
      output = wrapAnsi(output, width, {
        trim: false,
        hard: true,
        wordWrap: false
      });
      stream.write(ansiEscapes.eraseLines(previousLineCount) + output);
      previousLineCount = output.split("\n").length;
    };
    render.clear = () => {
      stream.write(ansiEscapes.eraseLines(previousLineCount));
      previousOutput = "";
      previousWidth = getWidth(stream);
      previousLineCount = 0;
    };
    render.done = () => {
      previousOutput = "";
      previousWidth = getWidth(stream);
      previousLineCount = 0;
      if (!showCursor) {
        cliCursor.show();
      }
    };
    return render;
  };
  module3.exports = main2(process.stdout);
  module3.exports.stderr = main2(process.stderr);
  module3.exports.create = main2;
});

// ../../node_modules/.pnpm/kleur@3.0.3/node_modules/kleur/index.js
var require_kleur = __commonJS((exports2, module3) => {
  "use strict";
  const {FORCE_COLOR, NODE_DISABLE_COLORS, TERM} = process.env;
  const $ = {
    enabled: !NODE_DISABLE_COLORS && TERM !== "dumb" && FORCE_COLOR !== "0",
    reset: init(0, 0),
    bold: init(1, 22),
    dim: init(2, 22),
    italic: init(3, 23),
    underline: init(4, 24),
    inverse: init(7, 27),
    hidden: init(8, 28),
    strikethrough: init(9, 29),
    black: init(30, 39),
    red: init(31, 39),
    green: init(32, 39),
    yellow: init(33, 39),
    blue: init(34, 39),
    magenta: init(35, 39),
    cyan: init(36, 39),
    white: init(37, 39),
    gray: init(90, 39),
    grey: init(90, 39),
    bgBlack: init(40, 49),
    bgRed: init(41, 49),
    bgGreen: init(42, 49),
    bgYellow: init(43, 49),
    bgBlue: init(44, 49),
    bgMagenta: init(45, 49),
    bgCyan: init(46, 49),
    bgWhite: init(47, 49)
  };
  function run(arr, str) {
    let i = 0, tmp, beg = "", end = "";
    for (; i < arr.length; i++) {
      tmp = arr[i];
      beg += tmp.open;
      end += tmp.close;
      if (str.includes(tmp.close)) {
        str = str.replace(tmp.rgx, tmp.close + tmp.open);
      }
    }
    return beg + str + end;
  }
  function chain(has, keys) {
    let ctx = {has, keys};
    ctx.reset = $.reset.bind(ctx);
    ctx.bold = $.bold.bind(ctx);
    ctx.dim = $.dim.bind(ctx);
    ctx.italic = $.italic.bind(ctx);
    ctx.underline = $.underline.bind(ctx);
    ctx.inverse = $.inverse.bind(ctx);
    ctx.hidden = $.hidden.bind(ctx);
    ctx.strikethrough = $.strikethrough.bind(ctx);
    ctx.black = $.black.bind(ctx);
    ctx.red = $.red.bind(ctx);
    ctx.green = $.green.bind(ctx);
    ctx.yellow = $.yellow.bind(ctx);
    ctx.blue = $.blue.bind(ctx);
    ctx.magenta = $.magenta.bind(ctx);
    ctx.cyan = $.cyan.bind(ctx);
    ctx.white = $.white.bind(ctx);
    ctx.gray = $.gray.bind(ctx);
    ctx.grey = $.grey.bind(ctx);
    ctx.bgBlack = $.bgBlack.bind(ctx);
    ctx.bgRed = $.bgRed.bind(ctx);
    ctx.bgGreen = $.bgGreen.bind(ctx);
    ctx.bgYellow = $.bgYellow.bind(ctx);
    ctx.bgBlue = $.bgBlue.bind(ctx);
    ctx.bgMagenta = $.bgMagenta.bind(ctx);
    ctx.bgCyan = $.bgCyan.bind(ctx);
    ctx.bgWhite = $.bgWhite.bind(ctx);
    return ctx;
  }
  function init(open3, close) {
    let blk = {
      open: `[${open3}m`,
      close: `[${close}m`,
      rgx: new RegExp(`\\x1b\\[${close}m`, "g")
    };
    return function(txt) {
      if (this !== void 0 && this.has !== void 0) {
        this.has.includes(open3) || (this.has.push(open3), this.keys.push(blk));
        return txt === void 0 ? this : $.enabled ? run(this.keys, txt + "") : txt + "";
      }
      return txt === void 0 ? chain([open3], [blk]) : $.enabled ? run([blk], txt + "") : txt + "";
    };
  }
  module3.exports = $;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/util/action.js
var require_action = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (key, isSelect) => {
    if (key.meta)
      return;
    if (key.ctrl) {
      if (key.name === "a")
        return "first";
      if (key.name === "c")
        return "abort";
      if (key.name === "d")
        return "abort";
      if (key.name === "e")
        return "last";
      if (key.name === "g")
        return "reset";
    }
    if (isSelect) {
      if (key.name === "j")
        return "down";
      if (key.name === "k")
        return "up";
    }
    if (key.name === "return")
      return "submit";
    if (key.name === "enter")
      return "submit";
    if (key.name === "backspace")
      return "delete";
    if (key.name === "delete")
      return "deleteForward";
    if (key.name === "abort")
      return "abort";
    if (key.name === "escape")
      return "abort";
    if (key.name === "tab")
      return "next";
    if (key.name === "pagedown")
      return "nextPage";
    if (key.name === "pageup")
      return "prevPage";
    if (key.name === "home")
      return "home";
    if (key.name === "end")
      return "end";
    if (key.name === "up")
      return "up";
    if (key.name === "down")
      return "down";
    if (key.name === "right")
      return "right";
    if (key.name === "left")
      return "left";
    return false;
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/util/strip.js
var require_strip = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (str) => {
    const pattern = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"].join("|");
    const RGX = new RegExp(pattern, "g");
    return typeof str === "string" ? str.replace(RGX, "") : str;
  };
});

// ../../node_modules/.pnpm/sisteransi@1.0.5/node_modules/sisteransi/src/index.js
var require_src5 = __commonJS((exports2, module3) => {
  "use strict";
  const ESC = "";
  const CSI = `${ESC}[`;
  const beep = "\x07";
  const cursor = {
    to(x, y) {
      if (!y)
        return `${CSI}${x + 1}G`;
      return `${CSI}${y + 1};${x + 1}H`;
    },
    move(x, y) {
      let ret = "";
      if (x < 0)
        ret += `${CSI}${-x}D`;
      else if (x > 0)
        ret += `${CSI}${x}C`;
      if (y < 0)
        ret += `${CSI}${-y}A`;
      else if (y > 0)
        ret += `${CSI}${y}B`;
      return ret;
    },
    up: (count = 1) => `${CSI}${count}A`,
    down: (count = 1) => `${CSI}${count}B`,
    forward: (count = 1) => `${CSI}${count}C`,
    backward: (count = 1) => `${CSI}${count}D`,
    nextLine: (count = 1) => `${CSI}E`.repeat(count),
    prevLine: (count = 1) => `${CSI}F`.repeat(count),
    left: `${CSI}G`,
    hide: `${CSI}?25l`,
    show: `${CSI}?25h`,
    save: `${ESC}7`,
    restore: `${ESC}8`
  };
  const scroll = {
    up: (count = 1) => `${CSI}S`.repeat(count),
    down: (count = 1) => `${CSI}T`.repeat(count)
  };
  const erase = {
    screen: `${CSI}2J`,
    up: (count = 1) => `${CSI}1J`.repeat(count),
    down: (count = 1) => `${CSI}J`.repeat(count),
    line: `${CSI}2K`,
    lineEnd: `${CSI}K`,
    lineStart: `${CSI}1K`,
    lines(count) {
      let clear = "";
      for (let i = 0; i < count; i++)
        clear += this.line + (i < count - 1 ? cursor.up() : "");
      if (count)
        clear += cursor.left;
      return clear;
    }
  };
  module3.exports = {cursor, scroll, erase, beep};
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/util/clear.js
var require_clear = __commonJS((exports2, module3) => {
  "use strict";
  const strip = require_strip();
  const _require = require_src5();
  const erase = _require.erase;
  const cursor = _require.cursor;
  const width = (str) => [...strip(str)].length;
  module3.exports = function(prompt, perLine = process.stdout.columns) {
    if (!perLine)
      return erase.line + cursor.to(0);
    let rows = 0;
    const lines = prompt.split(/\r?\n/);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = void 0;
    try {
      for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        let line = _step.value;
        rows += 1 + Math.floor(Math.max(width(line) - 1, 0) / perLine);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
    return erase.lines(rows);
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/util/figures.js
var require_figures = __commonJS((exports2, module3) => {
  "use strict";
  const main2 = {
    arrowUp: "↑",
    arrowDown: "↓",
    arrowLeft: "←",
    arrowRight: "→",
    radioOn: "◉",
    radioOff: "◯",
    tick: "✔",
    cross: "✖",
    ellipsis: "…",
    pointerSmall: "›",
    line: "─",
    pointer: "❯"
  };
  const win = {
    arrowUp: main2.arrowUp,
    arrowDown: main2.arrowDown,
    arrowLeft: main2.arrowLeft,
    arrowRight: main2.arrowRight,
    radioOn: "(*)",
    radioOff: "( )",
    tick: "√",
    cross: "×",
    ellipsis: "...",
    pointerSmall: "»",
    line: "─",
    pointer: ">"
  };
  const figures = process.platform === "win32" ? win : main2;
  module3.exports = figures;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/util/style.js
var require_style = __commonJS((exports2, module3) => {
  "use strict";
  const c = require_kleur();
  const figures = require_figures();
  const styles = Object.freeze({
    password: {
      scale: 1,
      render: (input) => "*".repeat(input.length)
    },
    emoji: {
      scale: 2,
      render: (input) => "😃".repeat(input.length)
    },
    invisible: {
      scale: 0,
      render: (input) => ""
    },
    default: {
      scale: 1,
      render: (input) => `${input}`
    }
  });
  const render = (type) => styles[type] || styles.default;
  const symbols = Object.freeze({
    aborted: c.red(figures.cross),
    done: c.green(figures.tick),
    default: c.cyan("?")
  });
  const symbol = (done, aborted) => aborted ? symbols.aborted : done ? symbols.done : symbols.default;
  const delimiter = (completing) => c.gray(completing ? figures.ellipsis : figures.pointerSmall);
  const item = (expandable, expanded) => c.gray(expandable ? expanded ? figures.pointerSmall : "+" : figures.line);
  module3.exports = {
    styles,
    render,
    symbols,
    symbol,
    delimiter,
    item
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/util/lines.js
var require_lines = __commonJS((exports2, module3) => {
  "use strict";
  const strip = require_strip();
  module3.exports = function(msg, perLine = process.stdout.columns) {
    let lines = String(strip(msg) || "").split(/\r?\n/);
    if (!perLine)
      return lines.length;
    return lines.map((l) => Math.ceil(l.length / perLine)).reduce((a, b) => a + b);
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/util/wrap.js
var require_wrap = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (msg, opts = {}) => {
    const tab2 = Number.isSafeInteger(parseInt(opts.margin)) ? new Array(parseInt(opts.margin)).fill(" ").join("") : opts.margin || "";
    const width = opts.width || process.stdout.columns;
    return (msg || "").split(/\r?\n/g).map((line) => line.split(/\s+/g).reduce((arr, w) => {
      if (w.length + tab2.length >= width || arr[arr.length - 1].length + w.length + 1 < width)
        arr[arr.length - 1] += ` ${w}`;
      else
        arr.push(`${tab2}${w}`);
      return arr;
    }, [tab2]).join("\n")).join("\n");
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/util/entriesToDisplay.js
var require_entriesToDisplay = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (cursor, total, maxVisible) => {
    maxVisible = maxVisible || total;
    let startIndex = Math.min(total - maxVisible, cursor - Math.floor(maxVisible / 2));
    if (startIndex < 0)
      startIndex = 0;
    let endIndex = Math.min(startIndex + maxVisible, total);
    return {
      startIndex,
      endIndex
    };
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/util/index.js
var require_util8 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = {
    action: require_action(),
    clear: require_clear(),
    style: require_style(),
    strip: require_strip(),
    figures: require_figures(),
    lines: require_lines(),
    wrap: require_wrap(),
    entriesToDisplay: require_entriesToDisplay()
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/elements/prompt.js
var require_prompt = __commonJS((exports2, module3) => {
  "use strict";
  const readline = require("readline");
  const _require = require_util8();
  const action = _require.action;
  const EventEmitter = require("events");
  const _require2 = require_src5();
  const beep = _require2.beep;
  const cursor = _require2.cursor;
  const color = require_kleur();
  class Prompt extends EventEmitter {
    constructor(opts = {}) {
      super();
      this.firstRender = true;
      this.in = opts.stdin || process.stdin;
      this.out = opts.stdout || process.stdout;
      this.onRender = (opts.onRender || (() => void 0)).bind(this);
      const rl = readline.createInterface(this.in);
      readline.emitKeypressEvents(this.in, rl);
      if (this.in.isTTY)
        this.in.setRawMode(true);
      const isSelect = ["SelectPrompt", "MultiselectPrompt"].indexOf(this.constructor.name) > -1;
      const keypress = (str, key) => {
        let a = action(key, isSelect);
        if (a === false) {
          this._ && this._(str, key);
        } else if (typeof this[a] === "function") {
          this[a](key);
        } else {
          this.bell();
        }
      };
      this.close = () => {
        this.out.write(cursor.show);
        this.in.removeListener("keypress", keypress);
        if (this.in.isTTY)
          this.in.setRawMode(false);
        rl.close();
        this.emit(this.aborted ? "abort" : "submit", this.value);
        this.closed = true;
      };
      this.in.on("keypress", keypress);
    }
    fire() {
      this.emit("state", {
        value: this.value,
        aborted: !!this.aborted
      });
    }
    bell() {
      this.out.write(beep);
    }
    render() {
      this.onRender(color);
      if (this.firstRender)
        this.firstRender = false;
    }
  }
  module3.exports = Prompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/elements/text.js
var require_text = __commonJS((exports2, module3) => {
  "use strict";
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg11) {
    try {
      var info = gen[key](arg11);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function() {
      var self2 = this, args2 = arguments;
      return new Promise(function(resolve, reject) {
        var gen = fn.apply(self2, args2);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(void 0);
      });
    };
  }
  const color = require_kleur();
  const Prompt = require_prompt();
  const _require = require_src5();
  const erase = _require.erase;
  const cursor = _require.cursor;
  const _require2 = require_util8();
  const style = _require2.style;
  const clear = _require2.clear;
  const lines = _require2.lines;
  const figures = _require2.figures;
  class TextPrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.transform = style.render(opts.style);
      this.scale = this.transform.scale;
      this.msg = opts.message;
      this.initial = opts.initial || ``;
      this.validator = opts.validate || (() => true);
      this.value = ``;
      this.errorMsg = opts.error || `Please Enter A Valid Value`;
      this.cursor = Number(!!this.initial);
      this.clear = clear(``);
      this.render();
    }
    set value(v) {
      if (!v && this.initial) {
        this.placeholder = true;
        this.rendered = color.gray(this.transform.render(this.initial));
      } else {
        this.placeholder = false;
        this.rendered = this.transform.render(v);
      }
      this._value = v;
      this.fire();
    }
    get value() {
      return this._value;
    }
    reset() {
      this.value = ``;
      this.cursor = Number(!!this.initial);
      this.fire();
      this.render();
    }
    abort() {
      this.value = this.value || this.initial;
      this.done = this.aborted = true;
      this.error = false;
      this.red = false;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    validate() {
      var _this = this;
      return _asyncToGenerator(function* () {
        let valid = yield _this.validator(_this.value);
        if (typeof valid === `string`) {
          _this.errorMsg = valid;
          valid = false;
        }
        _this.error = !valid;
      })();
    }
    submit() {
      var _this2 = this;
      return _asyncToGenerator(function* () {
        _this2.value = _this2.value || _this2.initial;
        yield _this2.validate();
        if (_this2.error) {
          _this2.red = true;
          _this2.fire();
          _this2.render();
          return;
        }
        _this2.done = true;
        _this2.aborted = false;
        _this2.fire();
        _this2.render();
        _this2.out.write("\n");
        _this2.close();
      })();
    }
    next() {
      if (!this.placeholder)
        return this.bell();
      this.value = this.initial;
      this.cursor = this.rendered.length;
      this.fire();
      this.render();
    }
    moveCursor(n) {
      if (this.placeholder)
        return;
      this.cursor = this.cursor + n;
    }
    _(c, key) {
      let s1 = this.value.slice(0, this.cursor);
      let s2 = this.value.slice(this.cursor);
      this.value = `${s1}${c}${s2}`;
      this.red = false;
      this.cursor = this.placeholder ? 0 : s1.length + 1;
      this.render();
    }
    delete() {
      if (this.cursor === 0)
        return this.bell();
      let s1 = this.value.slice(0, this.cursor - 1);
      let s2 = this.value.slice(this.cursor);
      this.value = `${s1}${s2}`;
      this.red = false;
      this.moveCursor(-1);
      this.render();
    }
    deleteForward() {
      if (this.cursor * this.scale >= this.rendered.length || this.placeholder)
        return this.bell();
      let s1 = this.value.slice(0, this.cursor);
      let s2 = this.value.slice(this.cursor + 1);
      this.value = `${s1}${s2}`;
      this.red = false;
      this.render();
    }
    first() {
      this.cursor = 0;
      this.render();
    }
    last() {
      this.cursor = this.value.length;
      this.render();
    }
    left() {
      if (this.cursor <= 0 || this.placeholder)
        return this.bell();
      this.moveCursor(-1);
      this.render();
    }
    right() {
      if (this.cursor * this.scale >= this.rendered.length || this.placeholder)
        return this.bell();
      this.moveCursor(1);
      this.render();
    }
    render() {
      if (this.closed)
        return;
      if (!this.firstRender) {
        if (this.outputError)
          this.out.write(cursor.down(lines(this.outputError) - 1) + clear(this.outputError));
        this.out.write(clear(this.outputText));
      }
      super.render();
      this.outputError = "";
      this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(this.done), this.red ? color.red(this.rendered) : this.rendered].join(` `);
      if (this.error) {
        this.outputError += this.errorMsg.split(`
`).reduce((a, l, i) => a + `
${i ? " " : figures.pointerSmall} ${color.red().italic(l)}`, ``);
      }
      this.out.write(erase.line + cursor.to(0) + this.outputText + cursor.save + this.outputError + cursor.restore);
    }
  }
  module3.exports = TextPrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/elements/select.js
var require_select = __commonJS((exports2, module3) => {
  "use strict";
  const color = require_kleur();
  const Prompt = require_prompt();
  const _require = require_util8();
  const style = _require.style;
  const clear = _require.clear;
  const figures = _require.figures;
  const wrap = _require.wrap;
  const entriesToDisplay = _require.entriesToDisplay;
  const _require2 = require_src5();
  const cursor = _require2.cursor;
  class SelectPrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.msg = opts.message;
      this.hint = opts.hint || "- Use arrow-keys. Return to submit.";
      this.warn = opts.warn || "- This option is disabled";
      this.cursor = opts.initial || 0;
      this.choices = opts.choices.map((ch, idx) => {
        if (typeof ch === "string")
          ch = {
            title: ch,
            value: idx
          };
        return {
          title: ch && (ch.title || ch.value || ch),
          value: ch && (ch.value === void 0 ? idx : ch.value),
          description: ch && ch.description,
          selected: ch && ch.selected,
          disabled: ch && ch.disabled
        };
      });
      this.optionsPerPage = opts.optionsPerPage || 10;
      this.value = (this.choices[this.cursor] || {}).value;
      this.clear = clear("");
      this.render();
    }
    moveCursor(n) {
      this.cursor = n;
      this.value = this.choices[n].value;
      this.fire();
    }
    reset() {
      this.moveCursor(0);
      this.fire();
      this.render();
    }
    abort() {
      this.done = this.aborted = true;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    submit() {
      if (!this.selection.disabled) {
        this.done = true;
        this.aborted = false;
        this.fire();
        this.render();
        this.out.write("\n");
        this.close();
      } else
        this.bell();
    }
    first() {
      this.moveCursor(0);
      this.render();
    }
    last() {
      this.moveCursor(this.choices.length - 1);
      this.render();
    }
    up() {
      if (this.cursor === 0)
        return this.bell();
      this.moveCursor(this.cursor - 1);
      this.render();
    }
    down() {
      if (this.cursor === this.choices.length - 1)
        return this.bell();
      this.moveCursor(this.cursor + 1);
      this.render();
    }
    next() {
      this.moveCursor((this.cursor + 1) % this.choices.length);
      this.render();
    }
    _(c, key) {
      if (c === " ")
        return this.submit();
    }
    get selection() {
      return this.choices[this.cursor];
    }
    render() {
      if (this.closed)
        return;
      if (this.firstRender)
        this.out.write(cursor.hide);
      else
        this.out.write(clear(this.outputText));
      super.render();
      let _entriesToDisplay = entriesToDisplay(this.cursor, this.choices.length, this.optionsPerPage), startIndex = _entriesToDisplay.startIndex, endIndex = _entriesToDisplay.endIndex;
      this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(false), this.done ? this.selection.title : this.selection.disabled ? color.yellow(this.warn) : color.gray(this.hint)].join(" ");
      if (!this.done) {
        this.outputText += "\n";
        for (let i = startIndex; i < endIndex; i++) {
          let title, prefix, desc = "", v = this.choices[i];
          if (i === startIndex && startIndex > 0) {
            prefix = figures.arrowUp;
          } else if (i === endIndex - 1 && endIndex < this.choices.length) {
            prefix = figures.arrowDown;
          } else {
            prefix = " ";
          }
          if (v.disabled) {
            title = this.cursor === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);
            prefix = (this.cursor === i ? color.bold().gray(figures.pointer) + " " : "  ") + prefix;
          } else {
            title = this.cursor === i ? color.cyan().underline(v.title) : v.title;
            prefix = (this.cursor === i ? color.cyan(figures.pointer) + " " : "  ") + prefix;
            if (v.description && this.cursor === i) {
              desc = ` - ${v.description}`;
              if (prefix.length + title.length + desc.length >= this.out.columns || v.description.split(/\r?\n/).length > 1) {
                desc = "\n" + wrap(v.description, {
                  margin: 3,
                  width: this.out.columns
                });
              }
            }
          }
          this.outputText += `${prefix} ${title}${color.gray(desc)}
`;
        }
      }
      this.out.write(this.outputText);
    }
  }
  module3.exports = SelectPrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/elements/toggle.js
var require_toggle = __commonJS((exports2, module3) => {
  "use strict";
  const color = require_kleur();
  const Prompt = require_prompt();
  const _require = require_util8();
  const style = _require.style;
  const clear = _require.clear;
  const _require2 = require_src5();
  const cursor = _require2.cursor;
  const erase = _require2.erase;
  class TogglePrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.msg = opts.message;
      this.value = !!opts.initial;
      this.active = opts.active || "on";
      this.inactive = opts.inactive || "off";
      this.initialValue = this.value;
      this.render();
    }
    reset() {
      this.value = this.initialValue;
      this.fire();
      this.render();
    }
    abort() {
      this.done = this.aborted = true;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    submit() {
      this.done = true;
      this.aborted = false;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    deactivate() {
      if (this.value === false)
        return this.bell();
      this.value = false;
      this.render();
    }
    activate() {
      if (this.value === true)
        return this.bell();
      this.value = true;
      this.render();
    }
    delete() {
      this.deactivate();
    }
    left() {
      this.deactivate();
    }
    right() {
      this.activate();
    }
    down() {
      this.deactivate();
    }
    up() {
      this.activate();
    }
    next() {
      this.value = !this.value;
      this.fire();
      this.render();
    }
    _(c, key) {
      if (c === " ") {
        this.value = !this.value;
      } else if (c === "1") {
        this.value = true;
      } else if (c === "0") {
        this.value = false;
      } else
        return this.bell();
      this.render();
    }
    render() {
      if (this.closed)
        return;
      if (this.firstRender)
        this.out.write(cursor.hide);
      else
        this.out.write(clear(this.outputText));
      super.render();
      this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(this.done), this.value ? this.inactive : color.cyan().underline(this.inactive), color.gray("/"), this.value ? color.cyan().underline(this.active) : this.active].join(" ");
      this.out.write(erase.line + cursor.to(0) + this.outputText);
    }
  }
  module3.exports = TogglePrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/dateparts/datepart.js
var require_datepart = __commonJS((exports2, module3) => {
  "use strict";
  class DatePart {
    constructor({
      token,
      date,
      parts,
      locales
    }) {
      this.token = token;
      this.date = date || new Date();
      this.parts = parts || [this];
      this.locales = locales || {};
    }
    up() {
    }
    down() {
    }
    next() {
      const currentIdx = this.parts.indexOf(this);
      return this.parts.find((part, idx) => idx > currentIdx && part instanceof DatePart);
    }
    setTo(val) {
    }
    prev() {
      let parts = [].concat(this.parts).reverse();
      const currentIdx = parts.indexOf(this);
      return parts.find((part, idx) => idx > currentIdx && part instanceof DatePart);
    }
    toString() {
      return String(this.date);
    }
  }
  module3.exports = DatePart;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/dateparts/meridiem.js
var require_meridiem = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart();
  class Meridiem extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setHours((this.date.getHours() + 12) % 24);
    }
    down() {
      this.up();
    }
    toString() {
      let meridiem = this.date.getHours() > 12 ? "pm" : "am";
      return /\A/.test(this.token) ? meridiem.toUpperCase() : meridiem;
    }
  }
  module3.exports = Meridiem;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/dateparts/day.js
var require_day = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart();
  const pos = (n) => {
    n = n % 10;
    return n === 1 ? "st" : n === 2 ? "nd" : n === 3 ? "rd" : "th";
  };
  class Day extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setDate(this.date.getDate() + 1);
    }
    down() {
      this.date.setDate(this.date.getDate() - 1);
    }
    setTo(val) {
      this.date.setDate(parseInt(val.substr(-2)));
    }
    toString() {
      let date = this.date.getDate();
      let day = this.date.getDay();
      return this.token === "DD" ? String(date).padStart(2, "0") : this.token === "Do" ? date + pos(date) : this.token === "d" ? day + 1 : this.token === "ddd" ? this.locales.weekdaysShort[day] : this.token === "dddd" ? this.locales.weekdays[day] : date;
    }
  }
  module3.exports = Day;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/dateparts/hours.js
var require_hours = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart();
  class Hours extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setHours(this.date.getHours() + 1);
    }
    down() {
      this.date.setHours(this.date.getHours() - 1);
    }
    setTo(val) {
      this.date.setHours(parseInt(val.substr(-2)));
    }
    toString() {
      let hours = this.date.getHours();
      if (/h/.test(this.token))
        hours = hours % 12 || 12;
      return this.token.length > 1 ? String(hours).padStart(2, "0") : hours;
    }
  }
  module3.exports = Hours;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/dateparts/milliseconds.js
var require_milliseconds = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart();
  class Milliseconds extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setMilliseconds(this.date.getMilliseconds() + 1);
    }
    down() {
      this.date.setMilliseconds(this.date.getMilliseconds() - 1);
    }
    setTo(val) {
      this.date.setMilliseconds(parseInt(val.substr(-this.token.length)));
    }
    toString() {
      return String(this.date.getMilliseconds()).padStart(4, "0").substr(0, this.token.length);
    }
  }
  module3.exports = Milliseconds;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/dateparts/minutes.js
var require_minutes = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart();
  class Minutes extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setMinutes(this.date.getMinutes() + 1);
    }
    down() {
      this.date.setMinutes(this.date.getMinutes() - 1);
    }
    setTo(val) {
      this.date.setMinutes(parseInt(val.substr(-2)));
    }
    toString() {
      let m = this.date.getMinutes();
      return this.token.length > 1 ? String(m).padStart(2, "0") : m;
    }
  }
  module3.exports = Minutes;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/dateparts/month.js
var require_month = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart();
  class Month extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setMonth(this.date.getMonth() + 1);
    }
    down() {
      this.date.setMonth(this.date.getMonth() - 1);
    }
    setTo(val) {
      val = parseInt(val.substr(-2)) - 1;
      this.date.setMonth(val < 0 ? 0 : val);
    }
    toString() {
      let month = this.date.getMonth();
      let tl = this.token.length;
      return tl === 2 ? String(month + 1).padStart(2, "0") : tl === 3 ? this.locales.monthsShort[month] : tl === 4 ? this.locales.months[month] : String(month + 1);
    }
  }
  module3.exports = Month;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/dateparts/seconds.js
var require_seconds = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart();
  class Seconds extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setSeconds(this.date.getSeconds() + 1);
    }
    down() {
      this.date.setSeconds(this.date.getSeconds() - 1);
    }
    setTo(val) {
      this.date.setSeconds(parseInt(val.substr(-2)));
    }
    toString() {
      let s = this.date.getSeconds();
      return this.token.length > 1 ? String(s).padStart(2, "0") : s;
    }
  }
  module3.exports = Seconds;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/dateparts/year.js
var require_year = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart();
  class Year extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setFullYear(this.date.getFullYear() + 1);
    }
    down() {
      this.date.setFullYear(this.date.getFullYear() - 1);
    }
    setTo(val) {
      this.date.setFullYear(val.substr(-4));
    }
    toString() {
      let year = String(this.date.getFullYear()).padStart(4, "0");
      return this.token.length === 2 ? year.substr(-2) : year;
    }
  }
  module3.exports = Year;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/dateparts/index.js
var require_dateparts = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = {
    DatePart: require_datepart(),
    Meridiem: require_meridiem(),
    Day: require_day(),
    Hours: require_hours(),
    Milliseconds: require_milliseconds(),
    Minutes: require_minutes(),
    Month: require_month(),
    Seconds: require_seconds(),
    Year: require_year()
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/elements/date.js
var require_date = __commonJS((exports2, module3) => {
  "use strict";
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg11) {
    try {
      var info = gen[key](arg11);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function() {
      var self2 = this, args2 = arguments;
      return new Promise(function(resolve, reject) {
        var gen = fn.apply(self2, args2);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(void 0);
      });
    };
  }
  const color = require_kleur();
  const Prompt = require_prompt();
  const _require = require_util8();
  const style = _require.style;
  const clear = _require.clear;
  const figures = _require.figures;
  const _require2 = require_src5();
  const erase = _require2.erase;
  const cursor = _require2.cursor;
  const _require3 = require_dateparts();
  const DatePart = _require3.DatePart;
  const Meridiem = _require3.Meridiem;
  const Day = _require3.Day;
  const Hours = _require3.Hours;
  const Milliseconds = _require3.Milliseconds;
  const Minutes = _require3.Minutes;
  const Month = _require3.Month;
  const Seconds = _require3.Seconds;
  const Year = _require3.Year;
  const regex = /\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g;
  const regexGroups = {
    1: ({
      token
    }) => token.replace(/\\(.)/g, "$1"),
    2: (opts) => new Day(opts),
    3: (opts) => new Month(opts),
    4: (opts) => new Year(opts),
    5: (opts) => new Meridiem(opts),
    6: (opts) => new Hours(opts),
    7: (opts) => new Minutes(opts),
    8: (opts) => new Seconds(opts),
    9: (opts) => new Milliseconds(opts)
  };
  const dfltLocales = {
    months: "January,February,March,April,May,June,July,August,September,October,November,December".split(","),
    monthsShort: "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),
    weekdays: "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),
    weekdaysShort: "Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(",")
  };
  class DatePrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.msg = opts.message;
      this.cursor = 0;
      this.typed = "";
      this.locales = Object.assign(dfltLocales, opts.locales);
      this._date = opts.initial || new Date();
      this.errorMsg = opts.error || "Please Enter A Valid Value";
      this.validator = opts.validate || (() => true);
      this.mask = opts.mask || "YYYY-MM-DD HH:mm:ss";
      this.clear = clear("");
      this.render();
    }
    get value() {
      return this.date;
    }
    get date() {
      return this._date;
    }
    set date(date) {
      if (date)
        this._date.setTime(date.getTime());
    }
    set mask(mask) {
      let result;
      this.parts = [];
      while (result = regex.exec(mask)) {
        let match = result.shift();
        let idx = result.findIndex((gr) => gr != null);
        this.parts.push(idx in regexGroups ? regexGroups[idx]({
          token: result[idx] || match,
          date: this.date,
          parts: this.parts,
          locales: this.locales
        }) : result[idx] || match);
      }
      let parts = this.parts.reduce((arr, i) => {
        if (typeof i === "string" && typeof arr[arr.length - 1] === "string")
          arr[arr.length - 1] += i;
        else
          arr.push(i);
        return arr;
      }, []);
      this.parts.splice(0);
      this.parts.push(...parts);
      this.reset();
    }
    moveCursor(n) {
      this.typed = "";
      this.cursor = n;
      this.fire();
    }
    reset() {
      this.moveCursor(this.parts.findIndex((p) => p instanceof DatePart));
      this.fire();
      this.render();
    }
    abort() {
      this.done = this.aborted = true;
      this.error = false;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    validate() {
      var _this = this;
      return _asyncToGenerator(function* () {
        let valid = yield _this.validator(_this.value);
        if (typeof valid === "string") {
          _this.errorMsg = valid;
          valid = false;
        }
        _this.error = !valid;
      })();
    }
    submit() {
      var _this2 = this;
      return _asyncToGenerator(function* () {
        yield _this2.validate();
        if (_this2.error) {
          _this2.color = "red";
          _this2.fire();
          _this2.render();
          return;
        }
        _this2.done = true;
        _this2.aborted = false;
        _this2.fire();
        _this2.render();
        _this2.out.write("\n");
        _this2.close();
      })();
    }
    up() {
      this.typed = "";
      this.parts[this.cursor].up();
      this.render();
    }
    down() {
      this.typed = "";
      this.parts[this.cursor].down();
      this.render();
    }
    left() {
      let prev = this.parts[this.cursor].prev();
      if (prev == null)
        return this.bell();
      this.moveCursor(this.parts.indexOf(prev));
      this.render();
    }
    right() {
      let next = this.parts[this.cursor].next();
      if (next == null)
        return this.bell();
      this.moveCursor(this.parts.indexOf(next));
      this.render();
    }
    next() {
      let next = this.parts[this.cursor].next();
      this.moveCursor(next ? this.parts.indexOf(next) : this.parts.findIndex((part) => part instanceof DatePart));
      this.render();
    }
    _(c) {
      if (/\d/.test(c)) {
        this.typed += c;
        this.parts[this.cursor].setTo(this.typed);
        this.render();
      }
    }
    render() {
      if (this.closed)
        return;
      if (this.firstRender)
        this.out.write(cursor.hide);
      else
        this.out.write(clear(this.outputText));
      super.render();
      this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(false), this.parts.reduce((arr, p, idx) => arr.concat(idx === this.cursor && !this.done ? color.cyan().underline(p.toString()) : p), []).join("")].join(" ");
      if (this.error) {
        this.outputText += this.errorMsg.split("\n").reduce((a, l, i) => a + `
${i ? ` ` : figures.pointerSmall} ${color.red().italic(l)}`, ``);
      }
      this.out.write(erase.line + cursor.to(0) + this.outputText);
    }
  }
  module3.exports = DatePrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/elements/number.js
var require_number = __commonJS((exports2, module3) => {
  "use strict";
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg11) {
    try {
      var info = gen[key](arg11);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function() {
      var self2 = this, args2 = arguments;
      return new Promise(function(resolve, reject) {
        var gen = fn.apply(self2, args2);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(void 0);
      });
    };
  }
  const color = require_kleur();
  const Prompt = require_prompt();
  const _require = require_src5();
  const cursor = _require.cursor;
  const erase = _require.erase;
  const _require2 = require_util8();
  const style = _require2.style;
  const figures = _require2.figures;
  const clear = _require2.clear;
  const lines = _require2.lines;
  const isNumber = /[0-9]/;
  const isDef = (any) => any !== void 0;
  const round = (number, precision) => {
    let factor = Math.pow(10, precision);
    return Math.round(number * factor) / factor;
  };
  class NumberPrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.transform = style.render(opts.style);
      this.msg = opts.message;
      this.initial = isDef(opts.initial) ? opts.initial : "";
      this.float = !!opts.float;
      this.round = opts.round || 2;
      this.inc = opts.increment || 1;
      this.min = isDef(opts.min) ? opts.min : -Infinity;
      this.max = isDef(opts.max) ? opts.max : Infinity;
      this.errorMsg = opts.error || `Please Enter A Valid Value`;
      this.validator = opts.validate || (() => true);
      this.color = `cyan`;
      this.value = ``;
      this.typed = ``;
      this.lastHit = 0;
      this.render();
    }
    set value(v) {
      if (!v && v !== 0) {
        this.placeholder = true;
        this.rendered = color.gray(this.transform.render(`${this.initial}`));
        this._value = ``;
      } else {
        this.placeholder = false;
        this.rendered = this.transform.render(`${round(v, this.round)}`);
        this._value = round(v, this.round);
      }
      this.fire();
    }
    get value() {
      return this._value;
    }
    parse(x) {
      return this.float ? parseFloat(x) : parseInt(x);
    }
    valid(c) {
      return c === `-` || c === `.` && this.float || isNumber.test(c);
    }
    reset() {
      this.typed = ``;
      this.value = ``;
      this.fire();
      this.render();
    }
    abort() {
      let x = this.value;
      this.value = x !== `` ? x : this.initial;
      this.done = this.aborted = true;
      this.error = false;
      this.fire();
      this.render();
      this.out.write(`
`);
      this.close();
    }
    validate() {
      var _this = this;
      return _asyncToGenerator(function* () {
        let valid = yield _this.validator(_this.value);
        if (typeof valid === `string`) {
          _this.errorMsg = valid;
          valid = false;
        }
        _this.error = !valid;
      })();
    }
    submit() {
      var _this2 = this;
      return _asyncToGenerator(function* () {
        yield _this2.validate();
        if (_this2.error) {
          _this2.color = `red`;
          _this2.fire();
          _this2.render();
          return;
        }
        let x = _this2.value;
        _this2.value = x !== `` ? x : _this2.initial;
        _this2.done = true;
        _this2.aborted = false;
        _this2.error = false;
        _this2.fire();
        _this2.render();
        _this2.out.write(`
`);
        _this2.close();
      })();
    }
    up() {
      this.typed = ``;
      if (this.value === "") {
        this.value = this.min - this.inc;
      }
      if (this.value >= this.max)
        return this.bell();
      this.value += this.inc;
      this.color = `cyan`;
      this.fire();
      this.render();
    }
    down() {
      this.typed = ``;
      if (this.value === "") {
        this.value = this.min + this.inc;
      }
      if (this.value <= this.min)
        return this.bell();
      this.value -= this.inc;
      this.color = `cyan`;
      this.fire();
      this.render();
    }
    delete() {
      let val = this.value.toString();
      if (val.length === 0)
        return this.bell();
      this.value = this.parse(val = val.slice(0, -1)) || ``;
      if (this.value !== "" && this.value < this.min) {
        this.value = this.min;
      }
      this.color = `cyan`;
      this.fire();
      this.render();
    }
    next() {
      this.value = this.initial;
      this.fire();
      this.render();
    }
    _(c, key) {
      if (!this.valid(c))
        return this.bell();
      const now = Date.now();
      if (now - this.lastHit > 1e3)
        this.typed = ``;
      this.typed += c;
      this.lastHit = now;
      this.color = `cyan`;
      if (c === `.`)
        return this.fire();
      this.value = Math.min(this.parse(this.typed), this.max);
      if (this.value > this.max)
        this.value = this.max;
      if (this.value < this.min)
        this.value = this.min;
      this.fire();
      this.render();
    }
    render() {
      if (this.closed)
        return;
      if (!this.firstRender) {
        if (this.outputError)
          this.out.write(cursor.down(lines(this.outputError) - 1) + clear(this.outputError));
        this.out.write(clear(this.outputText));
      }
      super.render();
      this.outputError = "";
      this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(this.done), !this.done || !this.done && !this.placeholder ? color[this.color]().underline(this.rendered) : this.rendered].join(` `);
      if (this.error) {
        this.outputError += this.errorMsg.split(`
`).reduce((a, l, i) => a + `
${i ? ` ` : figures.pointerSmall} ${color.red().italic(l)}`, ``);
      }
      this.out.write(erase.line + cursor.to(0) + this.outputText + cursor.save + this.outputError + cursor.restore);
    }
  }
  module3.exports = NumberPrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/elements/multiselect.js
var require_multiselect = __commonJS((exports2, module3) => {
  "use strict";
  const color = require_kleur();
  const _require = require_src5();
  const cursor = _require.cursor;
  const Prompt = require_prompt();
  const _require2 = require_util8();
  const clear = _require2.clear;
  const figures = _require2.figures;
  const style = _require2.style;
  const wrap = _require2.wrap;
  const entriesToDisplay = _require2.entriesToDisplay;
  class MultiselectPrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.msg = opts.message;
      this.cursor = opts.cursor || 0;
      this.scrollIndex = opts.cursor || 0;
      this.hint = opts.hint || "";
      this.warn = opts.warn || "- This option is disabled -";
      this.minSelected = opts.min;
      this.showMinError = false;
      this.maxChoices = opts.max;
      this.instructions = opts.instructions;
      this.optionsPerPage = opts.optionsPerPage || 10;
      this.value = opts.choices.map((ch, idx) => {
        if (typeof ch === "string")
          ch = {
            title: ch,
            value: idx
          };
        return {
          title: ch && (ch.title || ch.value || ch),
          description: ch && ch.description,
          value: ch && (ch.value === void 0 ? idx : ch.value),
          selected: ch && ch.selected,
          disabled: ch && ch.disabled
        };
      });
      this.clear = clear("");
      if (!opts.overrideRender) {
        this.render();
      }
    }
    reset() {
      this.value.map((v) => !v.selected);
      this.cursor = 0;
      this.fire();
      this.render();
    }
    selected() {
      return this.value.filter((v) => v.selected);
    }
    abort() {
      this.done = this.aborted = true;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    submit() {
      const selected = this.value.filter((e) => e.selected);
      if (this.minSelected && selected.length < this.minSelected) {
        this.showMinError = true;
        this.render();
      } else {
        this.done = true;
        this.aborted = false;
        this.fire();
        this.render();
        this.out.write("\n");
        this.close();
      }
    }
    first() {
      this.cursor = 0;
      this.render();
    }
    last() {
      this.cursor = this.value.length - 1;
      this.render();
    }
    next() {
      this.cursor = (this.cursor + 1) % this.value.length;
      this.render();
    }
    up() {
      if (this.cursor === 0) {
        this.cursor = this.value.length - 1;
      } else {
        this.cursor--;
      }
      this.render();
    }
    down() {
      if (this.cursor === this.value.length - 1) {
        this.cursor = 0;
      } else {
        this.cursor++;
      }
      this.render();
    }
    left() {
      this.value[this.cursor].selected = false;
      this.render();
    }
    right() {
      if (this.value.filter((e) => e.selected).length >= this.maxChoices)
        return this.bell();
      this.value[this.cursor].selected = true;
      this.render();
    }
    handleSpaceToggle() {
      const v = this.value[this.cursor];
      if (v.selected) {
        v.selected = false;
        this.render();
      } else if (v.disabled || this.value.filter((e) => e.selected).length >= this.maxChoices) {
        return this.bell();
      } else {
        v.selected = true;
        this.render();
      }
    }
    toggleAll() {
      if (this.maxChoices !== void 0 || this.value[this.cursor].disabled) {
        return this.bell();
      }
      const newSelected = !this.value[this.cursor].selected;
      this.value.filter((v) => !v.disabled).forEach((v) => v.selected = newSelected);
      this.render();
    }
    _(c, key) {
      if (c === " ") {
        this.handleSpaceToggle();
      } else if (c === "a") {
        this.toggleAll();
      } else {
        return this.bell();
      }
    }
    renderInstructions() {
      if (this.instructions === void 0 || this.instructions) {
        if (typeof this.instructions === "string") {
          return this.instructions;
        }
        return `
Instructions:
    ${figures.arrowUp}/${figures.arrowDown}: Highlight option
    ${figures.arrowLeft}/${figures.arrowRight}/[space]: Toggle selection
` + (this.maxChoices === void 0 ? `    a: Toggle all
` : "") + `    enter/return: Complete answer`;
      }
      return "";
    }
    renderOption(cursor2, v, i, arrowIndicator) {
      const prefix = (v.selected ? color.green(figures.radioOn) : figures.radioOff) + " " + arrowIndicator + " ";
      let title, desc;
      if (v.disabled) {
        title = cursor2 === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);
      } else {
        title = cursor2 === i ? color.cyan().underline(v.title) : v.title;
        if (cursor2 === i && v.description) {
          desc = ` - ${v.description}`;
          if (prefix.length + title.length + desc.length >= this.out.columns || v.description.split(/\r?\n/).length > 1) {
            desc = "\n" + wrap(v.description, {
              margin: prefix.length,
              width: this.out.columns
            });
          }
        }
      }
      return prefix + title + color.gray(desc || "");
    }
    paginateOptions(options) {
      if (options.length === 0) {
        return color.red("No matches for this query.");
      }
      let _entriesToDisplay = entriesToDisplay(this.cursor, options.length, this.optionsPerPage), startIndex = _entriesToDisplay.startIndex, endIndex = _entriesToDisplay.endIndex;
      let prefix, styledOptions = [];
      for (let i = startIndex; i < endIndex; i++) {
        if (i === startIndex && startIndex > 0) {
          prefix = figures.arrowUp;
        } else if (i === endIndex - 1 && endIndex < options.length) {
          prefix = figures.arrowDown;
        } else {
          prefix = " ";
        }
        styledOptions.push(this.renderOption(this.cursor, options[i], i, prefix));
      }
      return "\n" + styledOptions.join("\n");
    }
    renderOptions(options) {
      if (!this.done) {
        return this.paginateOptions(options);
      }
      return "";
    }
    renderDoneOrInstructions() {
      if (this.done) {
        return this.value.filter((e) => e.selected).map((v) => v.title).join(", ");
      }
      const output = [color.gray(this.hint), this.renderInstructions()];
      if (this.value[this.cursor].disabled) {
        output.push(color.yellow(this.warn));
      }
      return output.join(" ");
    }
    render() {
      if (this.closed)
        return;
      if (this.firstRender)
        this.out.write(cursor.hide);
      super.render();
      let prompt = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(false), this.renderDoneOrInstructions()].join(" ");
      if (this.showMinError) {
        prompt += color.red(`You must select a minimum of ${this.minSelected} choices.`);
        this.showMinError = false;
      }
      prompt += this.renderOptions(this.value);
      this.out.write(this.clear + prompt);
      this.clear = clear(prompt);
    }
  }
  module3.exports = MultiselectPrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/elements/autocomplete.js
var require_autocomplete = __commonJS((exports2, module3) => {
  "use strict";
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg11) {
    try {
      var info = gen[key](arg11);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function() {
      var self2 = this, args2 = arguments;
      return new Promise(function(resolve, reject) {
        var gen = fn.apply(self2, args2);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(void 0);
      });
    };
  }
  const color = require_kleur();
  const Prompt = require_prompt();
  const _require = require_src5();
  const erase = _require.erase;
  const cursor = _require.cursor;
  const _require2 = require_util8();
  const style = _require2.style;
  const clear = _require2.clear;
  const figures = _require2.figures;
  const wrap = _require2.wrap;
  const entriesToDisplay = _require2.entriesToDisplay;
  const getVal = (arr, i) => arr[i] && (arr[i].value || arr[i].title || arr[i]);
  const getTitle = (arr, i) => arr[i] && (arr[i].title || arr[i].value || arr[i]);
  const getIndex = (arr, valOrTitle) => {
    const index = arr.findIndex((el) => el.value === valOrTitle || el.title === valOrTitle);
    return index > -1 ? index : void 0;
  };
  class AutocompletePrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.msg = opts.message;
      this.suggest = opts.suggest;
      this.choices = opts.choices;
      this.initial = typeof opts.initial === "number" ? opts.initial : getIndex(opts.choices, opts.initial);
      this.select = this.initial || opts.cursor || 0;
      this.i18n = {
        noMatches: opts.noMatches || "no matches found"
      };
      this.fallback = opts.fallback || this.initial;
      this.suggestions = [];
      this.input = "";
      this.limit = opts.limit || 10;
      this.cursor = 0;
      this.transform = style.render(opts.style);
      this.scale = this.transform.scale;
      this.render = this.render.bind(this);
      this.complete = this.complete.bind(this);
      this.clear = clear("");
      this.complete(this.render);
      this.render();
    }
    set fallback(fb) {
      this._fb = Number.isSafeInteger(parseInt(fb)) ? parseInt(fb) : fb;
    }
    get fallback() {
      let choice;
      if (typeof this._fb === "number")
        choice = this.choices[this._fb];
      else if (typeof this._fb === "string")
        choice = {
          title: this._fb
        };
      return choice || this._fb || {
        title: this.i18n.noMatches
      };
    }
    moveSelect(i) {
      this.select = i;
      if (this.suggestions.length > 0)
        this.value = getVal(this.suggestions, i);
      else
        this.value = this.fallback.value;
      this.fire();
    }
    complete(cb) {
      var _this = this;
      return _asyncToGenerator(function* () {
        const p = _this.completing = _this.suggest(_this.input, _this.choices);
        const suggestions = yield p;
        if (_this.completing !== p)
          return;
        _this.suggestions = suggestions.map((s, i, arr) => ({
          title: getTitle(arr, i),
          value: getVal(arr, i),
          description: s.description
        }));
        _this.completing = false;
        const l = Math.max(suggestions.length - 1, 0);
        _this.moveSelect(Math.min(l, _this.select));
        cb && cb();
      })();
    }
    reset() {
      this.input = "";
      this.complete(() => {
        this.moveSelect(this.initial !== void 0 ? this.initial : 0);
        this.render();
      });
      this.render();
    }
    abort() {
      this.done = this.aborted = true;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    submit() {
      this.done = true;
      this.aborted = false;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    _(c, key) {
      let s1 = this.input.slice(0, this.cursor);
      let s2 = this.input.slice(this.cursor);
      this.input = `${s1}${c}${s2}`;
      this.cursor = s1.length + 1;
      this.complete(this.render);
      this.render();
    }
    delete() {
      if (this.cursor === 0)
        return this.bell();
      let s1 = this.input.slice(0, this.cursor - 1);
      let s2 = this.input.slice(this.cursor);
      this.input = `${s1}${s2}`;
      this.complete(this.render);
      this.cursor = this.cursor - 1;
      this.render();
    }
    deleteForward() {
      if (this.cursor * this.scale >= this.rendered.length)
        return this.bell();
      let s1 = this.input.slice(0, this.cursor);
      let s2 = this.input.slice(this.cursor + 1);
      this.input = `${s1}${s2}`;
      this.complete(this.render);
      this.render();
    }
    first() {
      this.moveSelect(0);
      this.render();
    }
    last() {
      this.moveSelect(this.suggestions.length - 1);
      this.render();
    }
    up() {
      if (this.select <= 0)
        return this.bell();
      this.moveSelect(this.select - 1);
      this.render();
    }
    down() {
      if (this.select >= this.suggestions.length - 1)
        return this.bell();
      this.moveSelect(this.select + 1);
      this.render();
    }
    next() {
      if (this.select === this.suggestions.length - 1) {
        this.moveSelect(0);
      } else
        this.moveSelect(this.select + 1);
      this.render();
    }
    nextPage() {
      this.moveSelect(Math.min(this.select + this.limit, this.suggestions.length - 1));
      this.render();
    }
    prevPage() {
      this.moveSelect(Math.max(this.select - this.limit, 0));
      this.render();
    }
    left() {
      if (this.cursor <= 0)
        return this.bell();
      this.cursor = this.cursor - 1;
      this.render();
    }
    right() {
      if (this.cursor * this.scale >= this.rendered.length)
        return this.bell();
      this.cursor = this.cursor + 1;
      this.render();
    }
    renderOption(v, hovered, isStart, isEnd) {
      let desc;
      let prefix = isStart ? figures.arrowUp : isEnd ? figures.arrowDown : " ";
      let title = hovered ? color.cyan().underline(v.title) : v.title;
      prefix = (hovered ? color.cyan(figures.pointer) + " " : "  ") + prefix;
      if (v.description) {
        desc = ` - ${v.description}`;
        if (prefix.length + title.length + desc.length >= this.out.columns || v.description.split(/\r?\n/).length > 1) {
          desc = "\n" + wrap(v.description, {
            margin: 3,
            width: this.out.columns
          });
        }
      }
      return prefix + " " + title + color.gray(desc || "");
    }
    render() {
      if (this.closed)
        return;
      if (this.firstRender)
        this.out.write(cursor.hide);
      else
        this.out.write(clear(this.outputText));
      super.render();
      let _entriesToDisplay = entriesToDisplay(this.select, this.choices.length, this.limit), startIndex = _entriesToDisplay.startIndex, endIndex = _entriesToDisplay.endIndex;
      this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(this.completing), this.done && this.suggestions[this.select] ? this.suggestions[this.select].title : this.rendered = this.transform.render(this.input)].join(" ");
      if (!this.done) {
        const suggestions = this.suggestions.slice(startIndex, endIndex).map((item, i) => this.renderOption(item, this.select === i + startIndex, i === 0 && startIndex > 0, i + startIndex === endIndex - 1 && endIndex < this.choices.length)).join("\n");
        this.outputText += `
` + (suggestions || color.gray(this.fallback.title));
      }
      this.out.write(erase.line + cursor.to(0) + this.outputText);
    }
  }
  module3.exports = AutocompletePrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/elements/autocompleteMultiselect.js
var require_autocompleteMultiselect = __commonJS((exports2, module3) => {
  "use strict";
  const color = require_kleur();
  const _require = require_src5();
  const cursor = _require.cursor;
  const MultiselectPrompt = require_multiselect();
  const _require2 = require_util8();
  const clear = _require2.clear;
  const style = _require2.style;
  const figures = _require2.figures;
  class AutocompleteMultiselectPrompt extends MultiselectPrompt {
    constructor(opts = {}) {
      opts.overrideRender = true;
      super(opts);
      this.inputValue = "";
      this.clear = clear("");
      this.filteredOptions = this.value;
      this.render();
    }
    last() {
      this.cursor = this.filteredOptions.length - 1;
      this.render();
    }
    next() {
      this.cursor = (this.cursor + 1) % this.filteredOptions.length;
      this.render();
    }
    up() {
      if (this.cursor === 0) {
        this.cursor = this.filteredOptions.length - 1;
      } else {
        this.cursor--;
      }
      this.render();
    }
    down() {
      if (this.cursor === this.filteredOptions.length - 1) {
        this.cursor = 0;
      } else {
        this.cursor++;
      }
      this.render();
    }
    left() {
      this.filteredOptions[this.cursor].selected = false;
      this.render();
    }
    right() {
      if (this.value.filter((e) => e.selected).length >= this.maxChoices)
        return this.bell();
      this.filteredOptions[this.cursor].selected = true;
      this.render();
    }
    delete() {
      if (this.inputValue.length) {
        this.inputValue = this.inputValue.substr(0, this.inputValue.length - 1);
        this.updateFilteredOptions();
      }
    }
    updateFilteredOptions() {
      const currentHighlight = this.filteredOptions[this.cursor];
      this.filteredOptions = this.value.filter((v) => {
        if (this.inputValue) {
          if (typeof v.title === "string") {
            if (v.title.toLowerCase().includes(this.inputValue.toLowerCase())) {
              return true;
            }
          }
          if (typeof v.value === "string") {
            if (v.value.toLowerCase().includes(this.inputValue.toLowerCase())) {
              return true;
            }
          }
          return false;
        }
        return true;
      });
      const newHighlightIndex = this.filteredOptions.findIndex((v) => v === currentHighlight);
      this.cursor = newHighlightIndex < 0 ? 0 : newHighlightIndex;
      this.render();
    }
    handleSpaceToggle() {
      const v = this.filteredOptions[this.cursor];
      if (v.selected) {
        v.selected = false;
        this.render();
      } else if (v.disabled || this.value.filter((e) => e.selected).length >= this.maxChoices) {
        return this.bell();
      } else {
        v.selected = true;
        this.render();
      }
    }
    handleInputChange(c) {
      this.inputValue = this.inputValue + c;
      this.updateFilteredOptions();
    }
    _(c, key) {
      if (c === " ") {
        this.handleSpaceToggle();
      } else {
        this.handleInputChange(c);
      }
    }
    renderInstructions() {
      if (this.instructions === void 0 || this.instructions) {
        if (typeof this.instructions === "string") {
          return this.instructions;
        }
        return `
Instructions:
    ${figures.arrowUp}/${figures.arrowDown}: Highlight option
    ${figures.arrowLeft}/${figures.arrowRight}/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer
`;
      }
      return "";
    }
    renderCurrentInput() {
      return `
Filtered results for: ${this.inputValue ? this.inputValue : color.gray("Enter something to filter")}
`;
    }
    renderOption(cursor2, v, i) {
      let title;
      if (v.disabled)
        title = cursor2 === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);
      else
        title = cursor2 === i ? color.cyan().underline(v.title) : v.title;
      return (v.selected ? color.green(figures.radioOn) : figures.radioOff) + "  " + title;
    }
    renderDoneOrInstructions() {
      if (this.done) {
        return this.value.filter((e) => e.selected).map((v) => v.title).join(", ");
      }
      const output = [color.gray(this.hint), this.renderInstructions(), this.renderCurrentInput()];
      if (this.filteredOptions.length && this.filteredOptions[this.cursor].disabled) {
        output.push(color.yellow(this.warn));
      }
      return output.join(" ");
    }
    render() {
      if (this.closed)
        return;
      if (this.firstRender)
        this.out.write(cursor.hide);
      super.render();
      let prompt = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(false), this.renderDoneOrInstructions()].join(" ");
      if (this.showMinError) {
        prompt += color.red(`You must select a minimum of ${this.minSelected} choices.`);
        this.showMinError = false;
      }
      prompt += this.renderOptions(this.filteredOptions);
      this.out.write(this.clear + prompt);
      this.clear = clear(prompt);
    }
  }
  module3.exports = AutocompleteMultiselectPrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/elements/confirm.js
var require_confirm = __commonJS((exports2, module3) => {
  "use strict";
  const color = require_kleur();
  const Prompt = require_prompt();
  const _require = require_util8();
  const style = _require.style;
  const clear = _require.clear;
  const _require2 = require_src5();
  const erase = _require2.erase;
  const cursor = _require2.cursor;
  class ConfirmPrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.msg = opts.message;
      this.value = opts.initial;
      this.initialValue = !!opts.initial;
      this.yesMsg = opts.yes || "yes";
      this.yesOption = opts.yesOption || "(Y/n)";
      this.noMsg = opts.no || "no";
      this.noOption = opts.noOption || "(y/N)";
      this.render();
    }
    reset() {
      this.value = this.initialValue;
      this.fire();
      this.render();
    }
    abort() {
      this.done = this.aborted = true;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    submit() {
      this.value = this.value || false;
      this.done = true;
      this.aborted = false;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    _(c, key) {
      if (c.toLowerCase() === "y") {
        this.value = true;
        return this.submit();
      }
      if (c.toLowerCase() === "n") {
        this.value = false;
        return this.submit();
      }
      return this.bell();
    }
    render() {
      if (this.closed)
        return;
      if (this.firstRender)
        this.out.write(cursor.hide);
      else
        this.out.write(clear(this.outputText));
      super.render();
      this.outputText = [style.symbol(this.done, this.aborted), color.bold(this.msg), style.delimiter(this.done), this.done ? this.value ? this.yesMsg : this.noMsg : color.gray(this.initialValue ? this.yesOption : this.noOption)].join(" ");
      this.out.write(erase.line + cursor.to(0) + this.outputText);
    }
  }
  module3.exports = ConfirmPrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/elements/index.js
var require_elements = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = {
    TextPrompt: require_text(),
    SelectPrompt: require_select(),
    TogglePrompt: require_toggle(),
    DatePrompt: require_date(),
    NumberPrompt: require_number(),
    MultiselectPrompt: require_multiselect(),
    AutocompletePrompt: require_autocomplete(),
    AutocompleteMultiselectPrompt: require_autocompleteMultiselect(),
    ConfirmPrompt: require_confirm()
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/prompts.js
var require_prompts = __commonJS((exports2) => {
  "use strict";
  const $ = exports2;
  const el = require_elements();
  const noop = (v) => v;
  function toPrompt(type, args2, opts = {}) {
    return new Promise((res, rej) => {
      const p = new el[type](args2);
      const onAbort = opts.onAbort || noop;
      const onSubmit = opts.onSubmit || noop;
      p.on("state", args2.onState || noop);
      p.on("submit", (x) => res(onSubmit(x)));
      p.on("abort", (x) => rej(onAbort(x)));
    });
  }
  $.text = (args2) => toPrompt("TextPrompt", args2);
  $.password = (args2) => {
    args2.style = "password";
    return $.text(args2);
  };
  $.invisible = (args2) => {
    args2.style = "invisible";
    return $.text(args2);
  };
  $.number = (args2) => toPrompt("NumberPrompt", args2);
  $.date = (args2) => toPrompt("DatePrompt", args2);
  $.confirm = (args2) => toPrompt("ConfirmPrompt", args2);
  $.list = (args2) => {
    const sep = args2.separator || ",";
    return toPrompt("TextPrompt", args2, {
      onSubmit: (str) => str.split(sep).map((s) => s.trim())
    });
  };
  $.toggle = (args2) => toPrompt("TogglePrompt", args2);
  $.select = (args2) => toPrompt("SelectPrompt", args2);
  $.multiselect = (args2) => {
    args2.choices = [].concat(args2.choices || []);
    const toSelected = (items) => items.filter((item) => item.selected).map((item) => item.value);
    return toPrompt("MultiselectPrompt", args2, {
      onAbort: toSelected,
      onSubmit: toSelected
    });
  };
  $.autocompleteMultiselect = (args2) => {
    args2.choices = [].concat(args2.choices || []);
    const toSelected = (items) => items.filter((item) => item.selected).map((item) => item.value);
    return toPrompt("AutocompleteMultiselectPrompt", args2, {
      onAbort: toSelected,
      onSubmit: toSelected
    });
  };
  const byTitle = (input, choices) => Promise.resolve(choices.filter((item) => item.title.slice(0, input.length).toLowerCase() === input.toLowerCase()));
  $.autocomplete = (args2) => {
    args2.suggest = args2.suggest || byTitle;
    args2.choices = [].concat(args2.choices || []);
    return toPrompt("AutocompletePrompt", args2);
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/dist/index.js
var require_dist12 = __commonJS((exports2, module3) => {
  "use strict";
  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly)
        symbols = symbols.filter(function(sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      if (i % 2) {
        ownKeys(Object(source), true).forEach(function(key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function(key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }
    return target;
  }
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {value, enumerable: true, configurable: true, writable: true});
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg11) {
    try {
      var info = gen[key](arg11);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function() {
      var self2 = this, args2 = arguments;
      return new Promise(function(resolve, reject) {
        var gen = fn.apply(self2, args2);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(void 0);
      });
    };
  }
  const prompts = require_prompts();
  const passOn = ["suggest", "format", "onState", "validate", "onRender", "type"];
  const noop = () => {
  };
  function prompt() {
    return _prompt.apply(this, arguments);
  }
  function _prompt() {
    _prompt = _asyncToGenerator(function* (questions = [], {
      onSubmit = noop,
      onCancel = noop
    } = {}) {
      const answers = {};
      const override2 = prompt._override || {};
      questions = [].concat(questions);
      let answer, question, quit, name, type, lastPrompt;
      const getFormattedAnswer = /* @__PURE__ */ function() {
        var _ref = _asyncToGenerator(function* (question2, answer2, skipValidation = false) {
          if (!skipValidation && question2.validate && question2.validate(answer2) !== true) {
            return;
          }
          return question2.format ? yield question2.format(answer2, answers) : answer2;
        });
        return function getFormattedAnswer2(_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = void 0;
      try {
        for (var _iterator = questions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          question = _step.value;
          var _question = question;
          name = _question.name;
          type = _question.type;
          if (typeof type === "function") {
            type = yield type(answer, _objectSpread({}, answers), question);
            question["type"] = type;
          }
          if (!type)
            continue;
          for (let key in question) {
            if (passOn.includes(key))
              continue;
            let value = question[key];
            question[key] = typeof value === "function" ? yield value(answer, _objectSpread({}, answers), lastPrompt) : value;
          }
          lastPrompt = question;
          if (typeof question.message !== "string") {
            throw new Error("prompt message is required");
          }
          var _question2 = question;
          name = _question2.name;
          type = _question2.type;
          if (prompts[type] === void 0) {
            throw new Error(`prompt type (${type}) is not defined`);
          }
          if (override2[question.name] !== void 0) {
            answer = yield getFormattedAnswer(question, override2[question.name]);
            if (answer !== void 0) {
              answers[name] = answer;
              continue;
            }
          }
          try {
            answer = prompt._injected ? getInjectedAnswer(prompt._injected) : yield prompts[type](question);
            answers[name] = answer = yield getFormattedAnswer(question, answer, true);
            quit = yield onSubmit(question, answer, answers);
          } catch (err) {
            quit = !(yield onCancel(question, answers));
          }
          if (quit)
            return answers;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
      return answers;
    });
    return _prompt.apply(this, arguments);
  }
  function getInjectedAnswer(injected) {
    const answer = injected.shift();
    if (answer instanceof Error) {
      throw answer;
    }
    return answer;
  }
  function inject(answers) {
    prompt._injected = (prompt._injected || []).concat(answers);
  }
  function override(answers) {
    prompt._override = Object.assign({}, answers);
  }
  module3.exports = Object.assign(prompt, {
    prompt,
    prompts,
    inject,
    override
  });
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/util/action.js
var require_action2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (key, isSelect) => {
    if (key.meta)
      return;
    if (key.ctrl) {
      if (key.name === "a")
        return "first";
      if (key.name === "c")
        return "abort";
      if (key.name === "d")
        return "abort";
      if (key.name === "e")
        return "last";
      if (key.name === "g")
        return "reset";
    }
    if (isSelect) {
      if (key.name === "j")
        return "down";
      if (key.name === "k")
        return "up";
    }
    if (key.name === "return")
      return "submit";
    if (key.name === "enter")
      return "submit";
    if (key.name === "backspace")
      return "delete";
    if (key.name === "delete")
      return "deleteForward";
    if (key.name === "abort")
      return "abort";
    if (key.name === "escape")
      return "abort";
    if (key.name === "tab")
      return "next";
    if (key.name === "pagedown")
      return "nextPage";
    if (key.name === "pageup")
      return "prevPage";
    if (key.name === "home")
      return "home";
    if (key.name === "end")
      return "end";
    if (key.name === "up")
      return "up";
    if (key.name === "down")
      return "down";
    if (key.name === "right")
      return "right";
    if (key.name === "left")
      return "left";
    return false;
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/util/strip.js
var require_strip2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (str) => {
    const pattern = [
      "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)",
      "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))"
    ].join("|");
    const RGX = new RegExp(pattern, "g");
    return typeof str === "string" ? str.replace(RGX, "") : str;
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/util/clear.js
var require_clear2 = __commonJS((exports2, module3) => {
  "use strict";
  const strip = require_strip2();
  const {erase, cursor} = require_src5();
  const width = (str) => [...strip(str)].length;
  module3.exports = function(prompt, perLine = process.stdout.columns) {
    if (!perLine)
      return erase.line + cursor.to(0);
    let rows = 0;
    const lines = prompt.split(/\r?\n/);
    for (let line of lines) {
      rows += 1 + Math.floor(Math.max(width(line) - 1, 0) / perLine);
    }
    return erase.lines(rows);
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/util/figures.js
var require_figures2 = __commonJS((exports2, module3) => {
  "use strict";
  const main2 = {
    arrowUp: "↑",
    arrowDown: "↓",
    arrowLeft: "←",
    arrowRight: "→",
    radioOn: "◉",
    radioOff: "◯",
    tick: "✔",
    cross: "✖",
    ellipsis: "…",
    pointerSmall: "›",
    line: "─",
    pointer: "❯"
  };
  const win = {
    arrowUp: main2.arrowUp,
    arrowDown: main2.arrowDown,
    arrowLeft: main2.arrowLeft,
    arrowRight: main2.arrowRight,
    radioOn: "(*)",
    radioOff: "( )",
    tick: "√",
    cross: "×",
    ellipsis: "...",
    pointerSmall: "»",
    line: "─",
    pointer: ">"
  };
  const figures = process.platform === "win32" ? win : main2;
  module3.exports = figures;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/util/style.js
var require_style2 = __commonJS((exports2, module3) => {
  "use strict";
  const c = require_kleur();
  const figures = require_figures2();
  const styles = Object.freeze({
    password: {scale: 1, render: (input) => "*".repeat(input.length)},
    emoji: {scale: 2, render: (input) => "😃".repeat(input.length)},
    invisible: {scale: 0, render: (input) => ""},
    default: {scale: 1, render: (input) => `${input}`}
  });
  const render = (type) => styles[type] || styles.default;
  const symbols = Object.freeze({
    aborted: c.red(figures.cross),
    done: c.green(figures.tick),
    default: c.cyan("?")
  });
  const symbol = (done, aborted) => aborted ? symbols.aborted : done ? symbols.done : symbols.default;
  const delimiter = (completing) => c.gray(completing ? figures.ellipsis : figures.pointerSmall);
  const item = (expandable, expanded) => c.gray(expandable ? expanded ? figures.pointerSmall : "+" : figures.line);
  module3.exports = {
    styles,
    render,
    symbols,
    symbol,
    delimiter,
    item
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/util/lines.js
var require_lines2 = __commonJS((exports2, module3) => {
  "use strict";
  const strip = require_strip2();
  module3.exports = function(msg, perLine = process.stdout.columns) {
    let lines = String(strip(msg) || "").split(/\r?\n/);
    if (!perLine)
      return lines.length;
    return lines.map((l) => Math.ceil(l.length / perLine)).reduce((a, b) => a + b);
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/util/wrap.js
var require_wrap2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (msg, opts = {}) => {
    const tab2 = Number.isSafeInteger(parseInt(opts.margin)) ? new Array(parseInt(opts.margin)).fill(" ").join("") : opts.margin || "";
    const width = opts.width || process.stdout.columns;
    return (msg || "").split(/\r?\n/g).map((line) => line.split(/\s+/g).reduce((arr, w) => {
      if (w.length + tab2.length >= width || arr[arr.length - 1].length + w.length + 1 < width)
        arr[arr.length - 1] += ` ${w}`;
      else
        arr.push(`${tab2}${w}`);
      return arr;
    }, [tab2]).join("\n")).join("\n");
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/util/entriesToDisplay.js
var require_entriesToDisplay2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (cursor, total, maxVisible) => {
    maxVisible = maxVisible || total;
    let startIndex = Math.min(total - maxVisible, cursor - Math.floor(maxVisible / 2));
    if (startIndex < 0)
      startIndex = 0;
    let endIndex = Math.min(startIndex + maxVisible, total);
    return {startIndex, endIndex};
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/util/index.js
var require_util9 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = {
    action: require_action2(),
    clear: require_clear2(),
    style: require_style2(),
    strip: require_strip2(),
    figures: require_figures2(),
    lines: require_lines2(),
    wrap: require_wrap2(),
    entriesToDisplay: require_entriesToDisplay2()
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/elements/prompt.js
var require_prompt2 = __commonJS((exports2, module3) => {
  "use strict";
  const readline = require("readline");
  const {action} = require_util9();
  const EventEmitter = require("events");
  const {beep, cursor} = require_src5();
  const color = require_kleur();
  class Prompt extends EventEmitter {
    constructor(opts = {}) {
      super();
      this.firstRender = true;
      this.in = opts.stdin || process.stdin;
      this.out = opts.stdout || process.stdout;
      this.onRender = (opts.onRender || (() => void 0)).bind(this);
      const rl = readline.createInterface(this.in);
      readline.emitKeypressEvents(this.in, rl);
      if (this.in.isTTY)
        this.in.setRawMode(true);
      const isSelect = ["SelectPrompt", "MultiselectPrompt"].indexOf(this.constructor.name) > -1;
      const keypress = (str, key) => {
        let a = action(key, isSelect);
        if (a === false) {
          this._ && this._(str, key);
        } else if (typeof this[a] === "function") {
          this[a](key);
        } else {
          this.bell();
        }
      };
      this.close = () => {
        this.out.write(cursor.show);
        this.in.removeListener("keypress", keypress);
        if (this.in.isTTY)
          this.in.setRawMode(false);
        rl.close();
        this.emit(this.aborted ? "abort" : "submit", this.value);
        this.closed = true;
      };
      this.in.on("keypress", keypress);
    }
    fire() {
      this.emit("state", {
        value: this.value,
        aborted: !!this.aborted
      });
    }
    bell() {
      this.out.write(beep);
    }
    render() {
      this.onRender(color);
      if (this.firstRender)
        this.firstRender = false;
    }
  }
  module3.exports = Prompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/elements/text.js
var require_text2 = __commonJS((exports2, module3) => {
  const color = require_kleur();
  const Prompt = require_prompt2();
  const {erase, cursor} = require_src5();
  const {style, clear, lines, figures} = require_util9();
  class TextPrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.transform = style.render(opts.style);
      this.scale = this.transform.scale;
      this.msg = opts.message;
      this.initial = opts.initial || ``;
      this.validator = opts.validate || (() => true);
      this.value = ``;
      this.errorMsg = opts.error || `Please Enter A Valid Value`;
      this.cursor = Number(!!this.initial);
      this.clear = clear(``);
      this.render();
    }
    set value(v) {
      if (!v && this.initial) {
        this.placeholder = true;
        this.rendered = color.gray(this.transform.render(this.initial));
      } else {
        this.placeholder = false;
        this.rendered = this.transform.render(v);
      }
      this._value = v;
      this.fire();
    }
    get value() {
      return this._value;
    }
    reset() {
      this.value = ``;
      this.cursor = Number(!!this.initial);
      this.fire();
      this.render();
    }
    abort() {
      this.value = this.value || this.initial;
      this.done = this.aborted = true;
      this.error = false;
      this.red = false;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    async validate() {
      let valid = await this.validator(this.value);
      if (typeof valid === `string`) {
        this.errorMsg = valid;
        valid = false;
      }
      this.error = !valid;
    }
    async submit() {
      this.value = this.value || this.initial;
      await this.validate();
      if (this.error) {
        this.red = true;
        this.fire();
        this.render();
        return;
      }
      this.done = true;
      this.aborted = false;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    next() {
      if (!this.placeholder)
        return this.bell();
      this.value = this.initial;
      this.cursor = this.rendered.length;
      this.fire();
      this.render();
    }
    moveCursor(n) {
      if (this.placeholder)
        return;
      this.cursor = this.cursor + n;
    }
    _(c, key) {
      let s1 = this.value.slice(0, this.cursor);
      let s2 = this.value.slice(this.cursor);
      this.value = `${s1}${c}${s2}`;
      this.red = false;
      this.cursor = this.placeholder ? 0 : s1.length + 1;
      this.render();
    }
    delete() {
      if (this.cursor === 0)
        return this.bell();
      let s1 = this.value.slice(0, this.cursor - 1);
      let s2 = this.value.slice(this.cursor);
      this.value = `${s1}${s2}`;
      this.red = false;
      this.moveCursor(-1);
      this.render();
    }
    deleteForward() {
      if (this.cursor * this.scale >= this.rendered.length || this.placeholder)
        return this.bell();
      let s1 = this.value.slice(0, this.cursor);
      let s2 = this.value.slice(this.cursor + 1);
      this.value = `${s1}${s2}`;
      this.red = false;
      this.render();
    }
    first() {
      this.cursor = 0;
      this.render();
    }
    last() {
      this.cursor = this.value.length;
      this.render();
    }
    left() {
      if (this.cursor <= 0 || this.placeholder)
        return this.bell();
      this.moveCursor(-1);
      this.render();
    }
    right() {
      if (this.cursor * this.scale >= this.rendered.length || this.placeholder)
        return this.bell();
      this.moveCursor(1);
      this.render();
    }
    render() {
      if (this.closed)
        return;
      if (!this.firstRender) {
        if (this.outputError)
          this.out.write(cursor.down(lines(this.outputError) - 1) + clear(this.outputError));
        this.out.write(clear(this.outputText));
      }
      super.render();
      this.outputError = "";
      this.outputText = [
        style.symbol(this.done, this.aborted),
        color.bold(this.msg),
        style.delimiter(this.done),
        this.red ? color.red(this.rendered) : this.rendered
      ].join(` `);
      if (this.error) {
        this.outputError += this.errorMsg.split(`
`).reduce((a, l, i) => a + `
${i ? " " : figures.pointerSmall} ${color.red().italic(l)}`, ``);
      }
      this.out.write(erase.line + cursor.to(0) + this.outputText + cursor.save + this.outputError + cursor.restore);
    }
  }
  module3.exports = TextPrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/elements/select.js
var require_select2 = __commonJS((exports2, module3) => {
  "use strict";
  const color = require_kleur();
  const Prompt = require_prompt2();
  const {style, clear, figures, wrap, entriesToDisplay} = require_util9();
  const {cursor} = require_src5();
  class SelectPrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.msg = opts.message;
      this.hint = opts.hint || "- Use arrow-keys. Return to submit.";
      this.warn = opts.warn || "- This option is disabled";
      this.cursor = opts.initial || 0;
      this.choices = opts.choices.map((ch, idx) => {
        if (typeof ch === "string")
          ch = {title: ch, value: idx};
        return {
          title: ch && (ch.title || ch.value || ch),
          value: ch && (ch.value === void 0 ? idx : ch.value),
          description: ch && ch.description,
          selected: ch && ch.selected,
          disabled: ch && ch.disabled
        };
      });
      this.optionsPerPage = opts.optionsPerPage || 10;
      this.value = (this.choices[this.cursor] || {}).value;
      this.clear = clear("");
      this.render();
    }
    moveCursor(n) {
      this.cursor = n;
      this.value = this.choices[n].value;
      this.fire();
    }
    reset() {
      this.moveCursor(0);
      this.fire();
      this.render();
    }
    abort() {
      this.done = this.aborted = true;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    submit() {
      if (!this.selection.disabled) {
        this.done = true;
        this.aborted = false;
        this.fire();
        this.render();
        this.out.write("\n");
        this.close();
      } else
        this.bell();
    }
    first() {
      this.moveCursor(0);
      this.render();
    }
    last() {
      this.moveCursor(this.choices.length - 1);
      this.render();
    }
    up() {
      if (this.cursor === 0)
        return this.bell();
      this.moveCursor(this.cursor - 1);
      this.render();
    }
    down() {
      if (this.cursor === this.choices.length - 1)
        return this.bell();
      this.moveCursor(this.cursor + 1);
      this.render();
    }
    next() {
      this.moveCursor((this.cursor + 1) % this.choices.length);
      this.render();
    }
    _(c, key) {
      if (c === " ")
        return this.submit();
    }
    get selection() {
      return this.choices[this.cursor];
    }
    render() {
      if (this.closed)
        return;
      if (this.firstRender)
        this.out.write(cursor.hide);
      else
        this.out.write(clear(this.outputText));
      super.render();
      let {startIndex, endIndex} = entriesToDisplay(this.cursor, this.choices.length, this.optionsPerPage);
      this.outputText = [
        style.symbol(this.done, this.aborted),
        color.bold(this.msg),
        style.delimiter(false),
        this.done ? this.selection.title : this.selection.disabled ? color.yellow(this.warn) : color.gray(this.hint)
      ].join(" ");
      if (!this.done) {
        this.outputText += "\n";
        for (let i = startIndex; i < endIndex; i++) {
          let title, prefix, desc = "", v = this.choices[i];
          if (i === startIndex && startIndex > 0) {
            prefix = figures.arrowUp;
          } else if (i === endIndex - 1 && endIndex < this.choices.length) {
            prefix = figures.arrowDown;
          } else {
            prefix = " ";
          }
          if (v.disabled) {
            title = this.cursor === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);
            prefix = (this.cursor === i ? color.bold().gray(figures.pointer) + " " : "  ") + prefix;
          } else {
            title = this.cursor === i ? color.cyan().underline(v.title) : v.title;
            prefix = (this.cursor === i ? color.cyan(figures.pointer) + " " : "  ") + prefix;
            if (v.description && this.cursor === i) {
              desc = ` - ${v.description}`;
              if (prefix.length + title.length + desc.length >= this.out.columns || v.description.split(/\r?\n/).length > 1) {
                desc = "\n" + wrap(v.description, {margin: 3, width: this.out.columns});
              }
            }
          }
          this.outputText += `${prefix} ${title}${color.gray(desc)}
`;
        }
      }
      this.out.write(this.outputText);
    }
  }
  module3.exports = SelectPrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/elements/toggle.js
var require_toggle2 = __commonJS((exports2, module3) => {
  const color = require_kleur();
  const Prompt = require_prompt2();
  const {style, clear} = require_util9();
  const {cursor, erase} = require_src5();
  class TogglePrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.msg = opts.message;
      this.value = !!opts.initial;
      this.active = opts.active || "on";
      this.inactive = opts.inactive || "off";
      this.initialValue = this.value;
      this.render();
    }
    reset() {
      this.value = this.initialValue;
      this.fire();
      this.render();
    }
    abort() {
      this.done = this.aborted = true;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    submit() {
      this.done = true;
      this.aborted = false;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    deactivate() {
      if (this.value === false)
        return this.bell();
      this.value = false;
      this.render();
    }
    activate() {
      if (this.value === true)
        return this.bell();
      this.value = true;
      this.render();
    }
    delete() {
      this.deactivate();
    }
    left() {
      this.deactivate();
    }
    right() {
      this.activate();
    }
    down() {
      this.deactivate();
    }
    up() {
      this.activate();
    }
    next() {
      this.value = !this.value;
      this.fire();
      this.render();
    }
    _(c, key) {
      if (c === " ") {
        this.value = !this.value;
      } else if (c === "1") {
        this.value = true;
      } else if (c === "0") {
        this.value = false;
      } else
        return this.bell();
      this.render();
    }
    render() {
      if (this.closed)
        return;
      if (this.firstRender)
        this.out.write(cursor.hide);
      else
        this.out.write(clear(this.outputText));
      super.render();
      this.outputText = [
        style.symbol(this.done, this.aborted),
        color.bold(this.msg),
        style.delimiter(this.done),
        this.value ? this.inactive : color.cyan().underline(this.inactive),
        color.gray("/"),
        this.value ? color.cyan().underline(this.active) : this.active
      ].join(" ");
      this.out.write(erase.line + cursor.to(0) + this.outputText);
    }
  }
  module3.exports = TogglePrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/dateparts/datepart.js
var require_datepart2 = __commonJS((exports2, module3) => {
  "use strict";
  class DatePart {
    constructor({token, date, parts, locales}) {
      this.token = token;
      this.date = date || new Date();
      this.parts = parts || [this];
      this.locales = locales || {};
    }
    up() {
    }
    down() {
    }
    next() {
      const currentIdx = this.parts.indexOf(this);
      return this.parts.find((part, idx) => idx > currentIdx && part instanceof DatePart);
    }
    setTo(val) {
    }
    prev() {
      let parts = [].concat(this.parts).reverse();
      const currentIdx = parts.indexOf(this);
      return parts.find((part, idx) => idx > currentIdx && part instanceof DatePart);
    }
    toString() {
      return String(this.date);
    }
  }
  module3.exports = DatePart;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/dateparts/meridiem.js
var require_meridiem2 = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart2();
  class Meridiem extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setHours((this.date.getHours() + 12) % 24);
    }
    down() {
      this.up();
    }
    toString() {
      let meridiem = this.date.getHours() > 12 ? "pm" : "am";
      return /\A/.test(this.token) ? meridiem.toUpperCase() : meridiem;
    }
  }
  module3.exports = Meridiem;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/dateparts/day.js
var require_day2 = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart2();
  const pos = (n) => {
    n = n % 10;
    return n === 1 ? "st" : n === 2 ? "nd" : n === 3 ? "rd" : "th";
  };
  class Day extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setDate(this.date.getDate() + 1);
    }
    down() {
      this.date.setDate(this.date.getDate() - 1);
    }
    setTo(val) {
      this.date.setDate(parseInt(val.substr(-2)));
    }
    toString() {
      let date = this.date.getDate();
      let day = this.date.getDay();
      return this.token === "DD" ? String(date).padStart(2, "0") : this.token === "Do" ? date + pos(date) : this.token === "d" ? day + 1 : this.token === "ddd" ? this.locales.weekdaysShort[day] : this.token === "dddd" ? this.locales.weekdays[day] : date;
    }
  }
  module3.exports = Day;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/dateparts/hours.js
var require_hours2 = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart2();
  class Hours extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setHours(this.date.getHours() + 1);
    }
    down() {
      this.date.setHours(this.date.getHours() - 1);
    }
    setTo(val) {
      this.date.setHours(parseInt(val.substr(-2)));
    }
    toString() {
      let hours = this.date.getHours();
      if (/h/.test(this.token))
        hours = hours % 12 || 12;
      return this.token.length > 1 ? String(hours).padStart(2, "0") : hours;
    }
  }
  module3.exports = Hours;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/dateparts/milliseconds.js
var require_milliseconds2 = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart2();
  class Milliseconds extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setMilliseconds(this.date.getMilliseconds() + 1);
    }
    down() {
      this.date.setMilliseconds(this.date.getMilliseconds() - 1);
    }
    setTo(val) {
      this.date.setMilliseconds(parseInt(val.substr(-this.token.length)));
    }
    toString() {
      return String(this.date.getMilliseconds()).padStart(4, "0").substr(0, this.token.length);
    }
  }
  module3.exports = Milliseconds;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/dateparts/minutes.js
var require_minutes2 = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart2();
  class Minutes extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setMinutes(this.date.getMinutes() + 1);
    }
    down() {
      this.date.setMinutes(this.date.getMinutes() - 1);
    }
    setTo(val) {
      this.date.setMinutes(parseInt(val.substr(-2)));
    }
    toString() {
      let m = this.date.getMinutes();
      return this.token.length > 1 ? String(m).padStart(2, "0") : m;
    }
  }
  module3.exports = Minutes;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/dateparts/month.js
var require_month2 = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart2();
  class Month extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setMonth(this.date.getMonth() + 1);
    }
    down() {
      this.date.setMonth(this.date.getMonth() - 1);
    }
    setTo(val) {
      val = parseInt(val.substr(-2)) - 1;
      this.date.setMonth(val < 0 ? 0 : val);
    }
    toString() {
      let month = this.date.getMonth();
      let tl = this.token.length;
      return tl === 2 ? String(month + 1).padStart(2, "0") : tl === 3 ? this.locales.monthsShort[month] : tl === 4 ? this.locales.months[month] : String(month + 1);
    }
  }
  module3.exports = Month;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/dateparts/seconds.js
var require_seconds2 = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart2();
  class Seconds extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setSeconds(this.date.getSeconds() + 1);
    }
    down() {
      this.date.setSeconds(this.date.getSeconds() - 1);
    }
    setTo(val) {
      this.date.setSeconds(parseInt(val.substr(-2)));
    }
    toString() {
      let s = this.date.getSeconds();
      return this.token.length > 1 ? String(s).padStart(2, "0") : s;
    }
  }
  module3.exports = Seconds;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/dateparts/year.js
var require_year2 = __commonJS((exports2, module3) => {
  "use strict";
  const DatePart = require_datepart2();
  class Year extends DatePart {
    constructor(opts = {}) {
      super(opts);
    }
    up() {
      this.date.setFullYear(this.date.getFullYear() + 1);
    }
    down() {
      this.date.setFullYear(this.date.getFullYear() - 1);
    }
    setTo(val) {
      this.date.setFullYear(val.substr(-4));
    }
    toString() {
      let year = String(this.date.getFullYear()).padStart(4, "0");
      return this.token.length === 2 ? year.substr(-2) : year;
    }
  }
  module3.exports = Year;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/dateparts/index.js
var require_dateparts2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = {
    DatePart: require_datepart2(),
    Meridiem: require_meridiem2(),
    Day: require_day2(),
    Hours: require_hours2(),
    Milliseconds: require_milliseconds2(),
    Minutes: require_minutes2(),
    Month: require_month2(),
    Seconds: require_seconds2(),
    Year: require_year2()
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/elements/date.js
var require_date2 = __commonJS((exports2, module3) => {
  "use strict";
  const color = require_kleur();
  const Prompt = require_prompt2();
  const {style, clear, figures} = require_util9();
  const {erase, cursor} = require_src5();
  const {DatePart, Meridiem, Day, Hours, Milliseconds, Minutes, Month, Seconds, Year} = require_dateparts2();
  const regex = /\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g;
  const regexGroups = {
    1: ({token}) => token.replace(/\\(.)/g, "$1"),
    2: (opts) => new Day(opts),
    3: (opts) => new Month(opts),
    4: (opts) => new Year(opts),
    5: (opts) => new Meridiem(opts),
    6: (opts) => new Hours(opts),
    7: (opts) => new Minutes(opts),
    8: (opts) => new Seconds(opts),
    9: (opts) => new Milliseconds(opts)
  };
  const dfltLocales = {
    months: "January,February,March,April,May,June,July,August,September,October,November,December".split(","),
    monthsShort: "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec".split(","),
    weekdays: "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday".split(","),
    weekdaysShort: "Sun,Mon,Tue,Wed,Thu,Fri,Sat".split(",")
  };
  class DatePrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.msg = opts.message;
      this.cursor = 0;
      this.typed = "";
      this.locales = Object.assign(dfltLocales, opts.locales);
      this._date = opts.initial || new Date();
      this.errorMsg = opts.error || "Please Enter A Valid Value";
      this.validator = opts.validate || (() => true);
      this.mask = opts.mask || "YYYY-MM-DD HH:mm:ss";
      this.clear = clear("");
      this.render();
    }
    get value() {
      return this.date;
    }
    get date() {
      return this._date;
    }
    set date(date) {
      if (date)
        this._date.setTime(date.getTime());
    }
    set mask(mask) {
      let result;
      this.parts = [];
      while (result = regex.exec(mask)) {
        let match = result.shift();
        let idx = result.findIndex((gr) => gr != null);
        this.parts.push(idx in regexGroups ? regexGroups[idx]({token: result[idx] || match, date: this.date, parts: this.parts, locales: this.locales}) : result[idx] || match);
      }
      let parts = this.parts.reduce((arr, i) => {
        if (typeof i === "string" && typeof arr[arr.length - 1] === "string")
          arr[arr.length - 1] += i;
        else
          arr.push(i);
        return arr;
      }, []);
      this.parts.splice(0);
      this.parts.push(...parts);
      this.reset();
    }
    moveCursor(n) {
      this.typed = "";
      this.cursor = n;
      this.fire();
    }
    reset() {
      this.moveCursor(this.parts.findIndex((p) => p instanceof DatePart));
      this.fire();
      this.render();
    }
    abort() {
      this.done = this.aborted = true;
      this.error = false;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    async validate() {
      let valid = await this.validator(this.value);
      if (typeof valid === "string") {
        this.errorMsg = valid;
        valid = false;
      }
      this.error = !valid;
    }
    async submit() {
      await this.validate();
      if (this.error) {
        this.color = "red";
        this.fire();
        this.render();
        return;
      }
      this.done = true;
      this.aborted = false;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    up() {
      this.typed = "";
      this.parts[this.cursor].up();
      this.render();
    }
    down() {
      this.typed = "";
      this.parts[this.cursor].down();
      this.render();
    }
    left() {
      let prev = this.parts[this.cursor].prev();
      if (prev == null)
        return this.bell();
      this.moveCursor(this.parts.indexOf(prev));
      this.render();
    }
    right() {
      let next = this.parts[this.cursor].next();
      if (next == null)
        return this.bell();
      this.moveCursor(this.parts.indexOf(next));
      this.render();
    }
    next() {
      let next = this.parts[this.cursor].next();
      this.moveCursor(next ? this.parts.indexOf(next) : this.parts.findIndex((part) => part instanceof DatePart));
      this.render();
    }
    _(c) {
      if (/\d/.test(c)) {
        this.typed += c;
        this.parts[this.cursor].setTo(this.typed);
        this.render();
      }
    }
    render() {
      if (this.closed)
        return;
      if (this.firstRender)
        this.out.write(cursor.hide);
      else
        this.out.write(clear(this.outputText));
      super.render();
      this.outputText = [
        style.symbol(this.done, this.aborted),
        color.bold(this.msg),
        style.delimiter(false),
        this.parts.reduce((arr, p, idx) => arr.concat(idx === this.cursor && !this.done ? color.cyan().underline(p.toString()) : p), []).join("")
      ].join(" ");
      if (this.error) {
        this.outputText += this.errorMsg.split("\n").reduce((a, l, i) => a + `
${i ? ` ` : figures.pointerSmall} ${color.red().italic(l)}`, ``);
      }
      this.out.write(erase.line + cursor.to(0) + this.outputText);
    }
  }
  module3.exports = DatePrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/elements/number.js
var require_number2 = __commonJS((exports2, module3) => {
  const color = require_kleur();
  const Prompt = require_prompt2();
  const {cursor, erase} = require_src5();
  const {style, figures, clear, lines} = require_util9();
  const isNumber = /[0-9]/;
  const isDef = (any) => any !== void 0;
  const round = (number, precision) => {
    let factor = Math.pow(10, precision);
    return Math.round(number * factor) / factor;
  };
  class NumberPrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.transform = style.render(opts.style);
      this.msg = opts.message;
      this.initial = isDef(opts.initial) ? opts.initial : "";
      this.float = !!opts.float;
      this.round = opts.round || 2;
      this.inc = opts.increment || 1;
      this.min = isDef(opts.min) ? opts.min : -Infinity;
      this.max = isDef(opts.max) ? opts.max : Infinity;
      this.errorMsg = opts.error || `Please Enter A Valid Value`;
      this.validator = opts.validate || (() => true);
      this.color = `cyan`;
      this.value = ``;
      this.typed = ``;
      this.lastHit = 0;
      this.render();
    }
    set value(v) {
      if (!v && v !== 0) {
        this.placeholder = true;
        this.rendered = color.gray(this.transform.render(`${this.initial}`));
        this._value = ``;
      } else {
        this.placeholder = false;
        this.rendered = this.transform.render(`${round(v, this.round)}`);
        this._value = round(v, this.round);
      }
      this.fire();
    }
    get value() {
      return this._value;
    }
    parse(x) {
      return this.float ? parseFloat(x) : parseInt(x);
    }
    valid(c) {
      return c === `-` || c === `.` && this.float || isNumber.test(c);
    }
    reset() {
      this.typed = ``;
      this.value = ``;
      this.fire();
      this.render();
    }
    abort() {
      let x = this.value;
      this.value = x !== `` ? x : this.initial;
      this.done = this.aborted = true;
      this.error = false;
      this.fire();
      this.render();
      this.out.write(`
`);
      this.close();
    }
    async validate() {
      let valid = await this.validator(this.value);
      if (typeof valid === `string`) {
        this.errorMsg = valid;
        valid = false;
      }
      this.error = !valid;
    }
    async submit() {
      await this.validate();
      if (this.error) {
        this.color = `red`;
        this.fire();
        this.render();
        return;
      }
      let x = this.value;
      this.value = x !== `` ? x : this.initial;
      this.done = true;
      this.aborted = false;
      this.error = false;
      this.fire();
      this.render();
      this.out.write(`
`);
      this.close();
    }
    up() {
      this.typed = ``;
      if (this.value === "") {
        this.value = this.min - this.inc;
      }
      if (this.value >= this.max)
        return this.bell();
      this.value += this.inc;
      this.color = `cyan`;
      this.fire();
      this.render();
    }
    down() {
      this.typed = ``;
      if (this.value === "") {
        this.value = this.min + this.inc;
      }
      if (this.value <= this.min)
        return this.bell();
      this.value -= this.inc;
      this.color = `cyan`;
      this.fire();
      this.render();
    }
    delete() {
      let val = this.value.toString();
      if (val.length === 0)
        return this.bell();
      this.value = this.parse(val = val.slice(0, -1)) || ``;
      if (this.value !== "" && this.value < this.min) {
        this.value = this.min;
      }
      this.color = `cyan`;
      this.fire();
      this.render();
    }
    next() {
      this.value = this.initial;
      this.fire();
      this.render();
    }
    _(c, key) {
      if (!this.valid(c))
        return this.bell();
      const now = Date.now();
      if (now - this.lastHit > 1e3)
        this.typed = ``;
      this.typed += c;
      this.lastHit = now;
      this.color = `cyan`;
      if (c === `.`)
        return this.fire();
      this.value = Math.min(this.parse(this.typed), this.max);
      if (this.value > this.max)
        this.value = this.max;
      if (this.value < this.min)
        this.value = this.min;
      this.fire();
      this.render();
    }
    render() {
      if (this.closed)
        return;
      if (!this.firstRender) {
        if (this.outputError)
          this.out.write(cursor.down(lines(this.outputError) - 1) + clear(this.outputError));
        this.out.write(clear(this.outputText));
      }
      super.render();
      this.outputError = "";
      this.outputText = [
        style.symbol(this.done, this.aborted),
        color.bold(this.msg),
        style.delimiter(this.done),
        !this.done || !this.done && !this.placeholder ? color[this.color]().underline(this.rendered) : this.rendered
      ].join(` `);
      if (this.error) {
        this.outputError += this.errorMsg.split(`
`).reduce((a, l, i) => a + `
${i ? ` ` : figures.pointerSmall} ${color.red().italic(l)}`, ``);
      }
      this.out.write(erase.line + cursor.to(0) + this.outputText + cursor.save + this.outputError + cursor.restore);
    }
  }
  module3.exports = NumberPrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/elements/multiselect.js
var require_multiselect2 = __commonJS((exports2, module3) => {
  "use strict";
  const color = require_kleur();
  const {cursor} = require_src5();
  const Prompt = require_prompt2();
  const {clear, figures, style, wrap, entriesToDisplay} = require_util9();
  class MultiselectPrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.msg = opts.message;
      this.cursor = opts.cursor || 0;
      this.scrollIndex = opts.cursor || 0;
      this.hint = opts.hint || "";
      this.warn = opts.warn || "- This option is disabled -";
      this.minSelected = opts.min;
      this.showMinError = false;
      this.maxChoices = opts.max;
      this.instructions = opts.instructions;
      this.optionsPerPage = opts.optionsPerPage || 10;
      this.value = opts.choices.map((ch, idx) => {
        if (typeof ch === "string")
          ch = {title: ch, value: idx};
        return {
          title: ch && (ch.title || ch.value || ch),
          description: ch && ch.description,
          value: ch && (ch.value === void 0 ? idx : ch.value),
          selected: ch && ch.selected,
          disabled: ch && ch.disabled
        };
      });
      this.clear = clear("");
      if (!opts.overrideRender) {
        this.render();
      }
    }
    reset() {
      this.value.map((v) => !v.selected);
      this.cursor = 0;
      this.fire();
      this.render();
    }
    selected() {
      return this.value.filter((v) => v.selected);
    }
    abort() {
      this.done = this.aborted = true;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    submit() {
      const selected = this.value.filter((e) => e.selected);
      if (this.minSelected && selected.length < this.minSelected) {
        this.showMinError = true;
        this.render();
      } else {
        this.done = true;
        this.aborted = false;
        this.fire();
        this.render();
        this.out.write("\n");
        this.close();
      }
    }
    first() {
      this.cursor = 0;
      this.render();
    }
    last() {
      this.cursor = this.value.length - 1;
      this.render();
    }
    next() {
      this.cursor = (this.cursor + 1) % this.value.length;
      this.render();
    }
    up() {
      if (this.cursor === 0) {
        this.cursor = this.value.length - 1;
      } else {
        this.cursor--;
      }
      this.render();
    }
    down() {
      if (this.cursor === this.value.length - 1) {
        this.cursor = 0;
      } else {
        this.cursor++;
      }
      this.render();
    }
    left() {
      this.value[this.cursor].selected = false;
      this.render();
    }
    right() {
      if (this.value.filter((e) => e.selected).length >= this.maxChoices)
        return this.bell();
      this.value[this.cursor].selected = true;
      this.render();
    }
    handleSpaceToggle() {
      const v = this.value[this.cursor];
      if (v.selected) {
        v.selected = false;
        this.render();
      } else if (v.disabled || this.value.filter((e) => e.selected).length >= this.maxChoices) {
        return this.bell();
      } else {
        v.selected = true;
        this.render();
      }
    }
    toggleAll() {
      if (this.maxChoices !== void 0 || this.value[this.cursor].disabled) {
        return this.bell();
      }
      const newSelected = !this.value[this.cursor].selected;
      this.value.filter((v) => !v.disabled).forEach((v) => v.selected = newSelected);
      this.render();
    }
    _(c, key) {
      if (c === " ") {
        this.handleSpaceToggle();
      } else if (c === "a") {
        this.toggleAll();
      } else {
        return this.bell();
      }
    }
    renderInstructions() {
      if (this.instructions === void 0 || this.instructions) {
        if (typeof this.instructions === "string") {
          return this.instructions;
        }
        return `
Instructions:
    ${figures.arrowUp}/${figures.arrowDown}: Highlight option
    ${figures.arrowLeft}/${figures.arrowRight}/[space]: Toggle selection
` + (this.maxChoices === void 0 ? `    a: Toggle all
` : "") + `    enter/return: Complete answer`;
      }
      return "";
    }
    renderOption(cursor2, v, i, arrowIndicator) {
      const prefix = (v.selected ? color.green(figures.radioOn) : figures.radioOff) + " " + arrowIndicator + " ";
      let title, desc;
      if (v.disabled) {
        title = cursor2 === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);
      } else {
        title = cursor2 === i ? color.cyan().underline(v.title) : v.title;
        if (cursor2 === i && v.description) {
          desc = ` - ${v.description}`;
          if (prefix.length + title.length + desc.length >= this.out.columns || v.description.split(/\r?\n/).length > 1) {
            desc = "\n" + wrap(v.description, {margin: prefix.length, width: this.out.columns});
          }
        }
      }
      return prefix + title + color.gray(desc || "");
    }
    paginateOptions(options) {
      if (options.length === 0) {
        return color.red("No matches for this query.");
      }
      let {startIndex, endIndex} = entriesToDisplay(this.cursor, options.length, this.optionsPerPage);
      let prefix, styledOptions = [];
      for (let i = startIndex; i < endIndex; i++) {
        if (i === startIndex && startIndex > 0) {
          prefix = figures.arrowUp;
        } else if (i === endIndex - 1 && endIndex < options.length) {
          prefix = figures.arrowDown;
        } else {
          prefix = " ";
        }
        styledOptions.push(this.renderOption(this.cursor, options[i], i, prefix));
      }
      return "\n" + styledOptions.join("\n");
    }
    renderOptions(options) {
      if (!this.done) {
        return this.paginateOptions(options);
      }
      return "";
    }
    renderDoneOrInstructions() {
      if (this.done) {
        return this.value.filter((e) => e.selected).map((v) => v.title).join(", ");
      }
      const output = [color.gray(this.hint), this.renderInstructions()];
      if (this.value[this.cursor].disabled) {
        output.push(color.yellow(this.warn));
      }
      return output.join(" ");
    }
    render() {
      if (this.closed)
        return;
      if (this.firstRender)
        this.out.write(cursor.hide);
      super.render();
      let prompt = [
        style.symbol(this.done, this.aborted),
        color.bold(this.msg),
        style.delimiter(false),
        this.renderDoneOrInstructions()
      ].join(" ");
      if (this.showMinError) {
        prompt += color.red(`You must select a minimum of ${this.minSelected} choices.`);
        this.showMinError = false;
      }
      prompt += this.renderOptions(this.value);
      this.out.write(this.clear + prompt);
      this.clear = clear(prompt);
    }
  }
  module3.exports = MultiselectPrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/elements/autocomplete.js
var require_autocomplete2 = __commonJS((exports2, module3) => {
  "use strict";
  const color = require_kleur();
  const Prompt = require_prompt2();
  const {erase, cursor} = require_src5();
  const {style, clear, figures, wrap, entriesToDisplay} = require_util9();
  const getVal = (arr, i) => arr[i] && (arr[i].value || arr[i].title || arr[i]);
  const getTitle = (arr, i) => arr[i] && (arr[i].title || arr[i].value || arr[i]);
  const getIndex = (arr, valOrTitle) => {
    const index = arr.findIndex((el) => el.value === valOrTitle || el.title === valOrTitle);
    return index > -1 ? index : void 0;
  };
  class AutocompletePrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.msg = opts.message;
      this.suggest = opts.suggest;
      this.choices = opts.choices;
      this.initial = typeof opts.initial === "number" ? opts.initial : getIndex(opts.choices, opts.initial);
      this.select = this.initial || opts.cursor || 0;
      this.i18n = {noMatches: opts.noMatches || "no matches found"};
      this.fallback = opts.fallback || this.initial;
      this.suggestions = [];
      this.input = "";
      this.limit = opts.limit || 10;
      this.cursor = 0;
      this.transform = style.render(opts.style);
      this.scale = this.transform.scale;
      this.render = this.render.bind(this);
      this.complete = this.complete.bind(this);
      this.clear = clear("");
      this.complete(this.render);
      this.render();
    }
    set fallback(fb) {
      this._fb = Number.isSafeInteger(parseInt(fb)) ? parseInt(fb) : fb;
    }
    get fallback() {
      let choice;
      if (typeof this._fb === "number")
        choice = this.choices[this._fb];
      else if (typeof this._fb === "string")
        choice = {title: this._fb};
      return choice || this._fb || {title: this.i18n.noMatches};
    }
    moveSelect(i) {
      this.select = i;
      if (this.suggestions.length > 0)
        this.value = getVal(this.suggestions, i);
      else
        this.value = this.fallback.value;
      this.fire();
    }
    async complete(cb) {
      const p = this.completing = this.suggest(this.input, this.choices);
      const suggestions = await p;
      if (this.completing !== p)
        return;
      this.suggestions = suggestions.map((s, i, arr) => ({title: getTitle(arr, i), value: getVal(arr, i), description: s.description}));
      this.completing = false;
      const l = Math.max(suggestions.length - 1, 0);
      this.moveSelect(Math.min(l, this.select));
      cb && cb();
    }
    reset() {
      this.input = "";
      this.complete(() => {
        this.moveSelect(this.initial !== void 0 ? this.initial : 0);
        this.render();
      });
      this.render();
    }
    abort() {
      this.done = this.aborted = true;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    submit() {
      this.done = true;
      this.aborted = false;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    _(c, key) {
      let s1 = this.input.slice(0, this.cursor);
      let s2 = this.input.slice(this.cursor);
      this.input = `${s1}${c}${s2}`;
      this.cursor = s1.length + 1;
      this.complete(this.render);
      this.render();
    }
    delete() {
      if (this.cursor === 0)
        return this.bell();
      let s1 = this.input.slice(0, this.cursor - 1);
      let s2 = this.input.slice(this.cursor);
      this.input = `${s1}${s2}`;
      this.complete(this.render);
      this.cursor = this.cursor - 1;
      this.render();
    }
    deleteForward() {
      if (this.cursor * this.scale >= this.rendered.length)
        return this.bell();
      let s1 = this.input.slice(0, this.cursor);
      let s2 = this.input.slice(this.cursor + 1);
      this.input = `${s1}${s2}`;
      this.complete(this.render);
      this.render();
    }
    first() {
      this.moveSelect(0);
      this.render();
    }
    last() {
      this.moveSelect(this.suggestions.length - 1);
      this.render();
    }
    up() {
      if (this.select <= 0)
        return this.bell();
      this.moveSelect(this.select - 1);
      this.render();
    }
    down() {
      if (this.select >= this.suggestions.length - 1)
        return this.bell();
      this.moveSelect(this.select + 1);
      this.render();
    }
    next() {
      if (this.select === this.suggestions.length - 1) {
        this.moveSelect(0);
      } else
        this.moveSelect(this.select + 1);
      this.render();
    }
    nextPage() {
      this.moveSelect(Math.min(this.select + this.limit, this.suggestions.length - 1));
      this.render();
    }
    prevPage() {
      this.moveSelect(Math.max(this.select - this.limit, 0));
      this.render();
    }
    left() {
      if (this.cursor <= 0)
        return this.bell();
      this.cursor = this.cursor - 1;
      this.render();
    }
    right() {
      if (this.cursor * this.scale >= this.rendered.length)
        return this.bell();
      this.cursor = this.cursor + 1;
      this.render();
    }
    renderOption(v, hovered, isStart, isEnd) {
      let desc;
      let prefix = isStart ? figures.arrowUp : isEnd ? figures.arrowDown : " ";
      let title = hovered ? color.cyan().underline(v.title) : v.title;
      prefix = (hovered ? color.cyan(figures.pointer) + " " : "  ") + prefix;
      if (v.description) {
        desc = ` - ${v.description}`;
        if (prefix.length + title.length + desc.length >= this.out.columns || v.description.split(/\r?\n/).length > 1) {
          desc = "\n" + wrap(v.description, {margin: 3, width: this.out.columns});
        }
      }
      return prefix + " " + title + color.gray(desc || "");
    }
    render() {
      if (this.closed)
        return;
      if (this.firstRender)
        this.out.write(cursor.hide);
      else
        this.out.write(clear(this.outputText));
      super.render();
      let {startIndex, endIndex} = entriesToDisplay(this.select, this.choices.length, this.limit);
      this.outputText = [
        style.symbol(this.done, this.aborted),
        color.bold(this.msg),
        style.delimiter(this.completing),
        this.done && this.suggestions[this.select] ? this.suggestions[this.select].title : this.rendered = this.transform.render(this.input)
      ].join(" ");
      if (!this.done) {
        const suggestions = this.suggestions.slice(startIndex, endIndex).map((item, i) => this.renderOption(item, this.select === i + startIndex, i === 0 && startIndex > 0, i + startIndex === endIndex - 1 && endIndex < this.choices.length)).join("\n");
        this.outputText += `
` + (suggestions || color.gray(this.fallback.title));
      }
      this.out.write(erase.line + cursor.to(0) + this.outputText);
    }
  }
  module3.exports = AutocompletePrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/elements/autocompleteMultiselect.js
var require_autocompleteMultiselect2 = __commonJS((exports2, module3) => {
  "use strict";
  const color = require_kleur();
  const {cursor} = require_src5();
  const MultiselectPrompt = require_multiselect2();
  const {clear, style, figures} = require_util9();
  class AutocompleteMultiselectPrompt extends MultiselectPrompt {
    constructor(opts = {}) {
      opts.overrideRender = true;
      super(opts);
      this.inputValue = "";
      this.clear = clear("");
      this.filteredOptions = this.value;
      this.render();
    }
    last() {
      this.cursor = this.filteredOptions.length - 1;
      this.render();
    }
    next() {
      this.cursor = (this.cursor + 1) % this.filteredOptions.length;
      this.render();
    }
    up() {
      if (this.cursor === 0) {
        this.cursor = this.filteredOptions.length - 1;
      } else {
        this.cursor--;
      }
      this.render();
    }
    down() {
      if (this.cursor === this.filteredOptions.length - 1) {
        this.cursor = 0;
      } else {
        this.cursor++;
      }
      this.render();
    }
    left() {
      this.filteredOptions[this.cursor].selected = false;
      this.render();
    }
    right() {
      if (this.value.filter((e) => e.selected).length >= this.maxChoices)
        return this.bell();
      this.filteredOptions[this.cursor].selected = true;
      this.render();
    }
    delete() {
      if (this.inputValue.length) {
        this.inputValue = this.inputValue.substr(0, this.inputValue.length - 1);
        this.updateFilteredOptions();
      }
    }
    updateFilteredOptions() {
      const currentHighlight = this.filteredOptions[this.cursor];
      this.filteredOptions = this.value.filter((v) => {
        if (this.inputValue) {
          if (typeof v.title === "string") {
            if (v.title.toLowerCase().includes(this.inputValue.toLowerCase())) {
              return true;
            }
          }
          if (typeof v.value === "string") {
            if (v.value.toLowerCase().includes(this.inputValue.toLowerCase())) {
              return true;
            }
          }
          return false;
        }
        return true;
      });
      const newHighlightIndex = this.filteredOptions.findIndex((v) => v === currentHighlight);
      this.cursor = newHighlightIndex < 0 ? 0 : newHighlightIndex;
      this.render();
    }
    handleSpaceToggle() {
      const v = this.filteredOptions[this.cursor];
      if (v.selected) {
        v.selected = false;
        this.render();
      } else if (v.disabled || this.value.filter((e) => e.selected).length >= this.maxChoices) {
        return this.bell();
      } else {
        v.selected = true;
        this.render();
      }
    }
    handleInputChange(c) {
      this.inputValue = this.inputValue + c;
      this.updateFilteredOptions();
    }
    _(c, key) {
      if (c === " ") {
        this.handleSpaceToggle();
      } else {
        this.handleInputChange(c);
      }
    }
    renderInstructions() {
      if (this.instructions === void 0 || this.instructions) {
        if (typeof this.instructions === "string") {
          return this.instructions;
        }
        return `
Instructions:
    ${figures.arrowUp}/${figures.arrowDown}: Highlight option
    ${figures.arrowLeft}/${figures.arrowRight}/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer
`;
      }
      return "";
    }
    renderCurrentInput() {
      return `
Filtered results for: ${this.inputValue ? this.inputValue : color.gray("Enter something to filter")}
`;
    }
    renderOption(cursor2, v, i) {
      let title;
      if (v.disabled)
        title = cursor2 === i ? color.gray().underline(v.title) : color.strikethrough().gray(v.title);
      else
        title = cursor2 === i ? color.cyan().underline(v.title) : v.title;
      return (v.selected ? color.green(figures.radioOn) : figures.radioOff) + "  " + title;
    }
    renderDoneOrInstructions() {
      if (this.done) {
        return this.value.filter((e) => e.selected).map((v) => v.title).join(", ");
      }
      const output = [color.gray(this.hint), this.renderInstructions(), this.renderCurrentInput()];
      if (this.filteredOptions.length && this.filteredOptions[this.cursor].disabled) {
        output.push(color.yellow(this.warn));
      }
      return output.join(" ");
    }
    render() {
      if (this.closed)
        return;
      if (this.firstRender)
        this.out.write(cursor.hide);
      super.render();
      let prompt = [
        style.symbol(this.done, this.aborted),
        color.bold(this.msg),
        style.delimiter(false),
        this.renderDoneOrInstructions()
      ].join(" ");
      if (this.showMinError) {
        prompt += color.red(`You must select a minimum of ${this.minSelected} choices.`);
        this.showMinError = false;
      }
      prompt += this.renderOptions(this.filteredOptions);
      this.out.write(this.clear + prompt);
      this.clear = clear(prompt);
    }
  }
  module3.exports = AutocompleteMultiselectPrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/elements/confirm.js
var require_confirm2 = __commonJS((exports2, module3) => {
  const color = require_kleur();
  const Prompt = require_prompt2();
  const {style, clear} = require_util9();
  const {erase, cursor} = require_src5();
  class ConfirmPrompt extends Prompt {
    constructor(opts = {}) {
      super(opts);
      this.msg = opts.message;
      this.value = opts.initial;
      this.initialValue = !!opts.initial;
      this.yesMsg = opts.yes || "yes";
      this.yesOption = opts.yesOption || "(Y/n)";
      this.noMsg = opts.no || "no";
      this.noOption = opts.noOption || "(y/N)";
      this.render();
    }
    reset() {
      this.value = this.initialValue;
      this.fire();
      this.render();
    }
    abort() {
      this.done = this.aborted = true;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    submit() {
      this.value = this.value || false;
      this.done = true;
      this.aborted = false;
      this.fire();
      this.render();
      this.out.write("\n");
      this.close();
    }
    _(c, key) {
      if (c.toLowerCase() === "y") {
        this.value = true;
        return this.submit();
      }
      if (c.toLowerCase() === "n") {
        this.value = false;
        return this.submit();
      }
      return this.bell();
    }
    render() {
      if (this.closed)
        return;
      if (this.firstRender)
        this.out.write(cursor.hide);
      else
        this.out.write(clear(this.outputText));
      super.render();
      this.outputText = [
        style.symbol(this.done, this.aborted),
        color.bold(this.msg),
        style.delimiter(this.done),
        this.done ? this.value ? this.yesMsg : this.noMsg : color.gray(this.initialValue ? this.yesOption : this.noOption)
      ].join(" ");
      this.out.write(erase.line + cursor.to(0) + this.outputText);
    }
  }
  module3.exports = ConfirmPrompt;
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/elements/index.js
var require_elements2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = {
    TextPrompt: require_text2(),
    SelectPrompt: require_select2(),
    TogglePrompt: require_toggle2(),
    DatePrompt: require_date2(),
    NumberPrompt: require_number2(),
    MultiselectPrompt: require_multiselect2(),
    AutocompletePrompt: require_autocomplete2(),
    AutocompleteMultiselectPrompt: require_autocompleteMultiselect2(),
    ConfirmPrompt: require_confirm2()
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/prompts.js
var require_prompts2 = __commonJS((exports2) => {
  "use strict";
  const $ = exports2;
  const el = require_elements2();
  const noop = (v) => v;
  function toPrompt(type, args2, opts = {}) {
    return new Promise((res, rej) => {
      const p = new el[type](args2);
      const onAbort = opts.onAbort || noop;
      const onSubmit = opts.onSubmit || noop;
      p.on("state", args2.onState || noop);
      p.on("submit", (x) => res(onSubmit(x)));
      p.on("abort", (x) => rej(onAbort(x)));
    });
  }
  $.text = (args2) => toPrompt("TextPrompt", args2);
  $.password = (args2) => {
    args2.style = "password";
    return $.text(args2);
  };
  $.invisible = (args2) => {
    args2.style = "invisible";
    return $.text(args2);
  };
  $.number = (args2) => toPrompt("NumberPrompt", args2);
  $.date = (args2) => toPrompt("DatePrompt", args2);
  $.confirm = (args2) => toPrompt("ConfirmPrompt", args2);
  $.list = (args2) => {
    const sep = args2.separator || ",";
    return toPrompt("TextPrompt", args2, {
      onSubmit: (str) => str.split(sep).map((s) => s.trim())
    });
  };
  $.toggle = (args2) => toPrompt("TogglePrompt", args2);
  $.select = (args2) => toPrompt("SelectPrompt", args2);
  $.multiselect = (args2) => {
    args2.choices = [].concat(args2.choices || []);
    const toSelected = (items) => items.filter((item) => item.selected).map((item) => item.value);
    return toPrompt("MultiselectPrompt", args2, {
      onAbort: toSelected,
      onSubmit: toSelected
    });
  };
  $.autocompleteMultiselect = (args2) => {
    args2.choices = [].concat(args2.choices || []);
    const toSelected = (items) => items.filter((item) => item.selected).map((item) => item.value);
    return toPrompt("AutocompleteMultiselectPrompt", args2, {
      onAbort: toSelected,
      onSubmit: toSelected
    });
  };
  const byTitle = (input, choices) => Promise.resolve(choices.filter((item) => item.title.slice(0, input.length).toLowerCase() === input.toLowerCase()));
  $.autocomplete = (args2) => {
    args2.suggest = args2.suggest || byTitle;
    args2.choices = [].concat(args2.choices || []);
    return toPrompt("AutocompletePrompt", args2);
  };
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/lib/index.js
var require_lib8 = __commonJS((exports2, module3) => {
  "use strict";
  const prompts = require_prompts2();
  const passOn = ["suggest", "format", "onState", "validate", "onRender", "type"];
  const noop = () => {
  };
  async function prompt(questions = [], {onSubmit = noop, onCancel = noop} = {}) {
    const answers = {};
    const override2 = prompt._override || {};
    questions = [].concat(questions);
    let answer, question, quit, name, type, lastPrompt;
    const getFormattedAnswer = async (question2, answer2, skipValidation = false) => {
      if (!skipValidation && question2.validate && question2.validate(answer2) !== true) {
        return;
      }
      return question2.format ? await question2.format(answer2, answers) : answer2;
    };
    for (question of questions) {
      ({name, type} = question);
      if (typeof type === "function") {
        type = await type(answer, {...answers}, question);
        question["type"] = type;
      }
      if (!type)
        continue;
      for (let key in question) {
        if (passOn.includes(key))
          continue;
        let value = question[key];
        question[key] = typeof value === "function" ? await value(answer, {...answers}, lastPrompt) : value;
      }
      lastPrompt = question;
      if (typeof question.message !== "string") {
        throw new Error("prompt message is required");
      }
      ({name, type} = question);
      if (prompts[type] === void 0) {
        throw new Error(`prompt type (${type}) is not defined`);
      }
      if (override2[question.name] !== void 0) {
        answer = await getFormattedAnswer(question, override2[question.name]);
        if (answer !== void 0) {
          answers[name] = answer;
          continue;
        }
      }
      try {
        answer = prompt._injected ? getInjectedAnswer(prompt._injected) : await prompts[type](question);
        answers[name] = answer = await getFormattedAnswer(question, answer, true);
        quit = await onSubmit(question, answer, answers);
      } catch (err) {
        quit = !await onCancel(question, answers);
      }
      if (quit)
        return answers;
    }
    return answers;
  }
  function getInjectedAnswer(injected) {
    const answer = injected.shift();
    if (answer instanceof Error) {
      throw answer;
    }
    return answer;
  }
  function inject(answers) {
    prompt._injected = (prompt._injected || []).concat(answers);
  }
  function override(answers) {
    prompt._override = Object.assign({}, answers);
  }
  module3.exports = Object.assign(prompt, {prompt, prompts, inject, override});
});

// ../../node_modules/.pnpm/prompts@2.3.2/node_modules/prompts/index.js
var require_prompts3 = __commonJS((exports2, module3) => {
  function isNodeLT(tar) {
    tar = (Array.isArray(tar) ? tar : tar.split(".")).map(Number);
    let i = 0, src = process.versions.node.split(".").map(Number);
    for (; i < tar.length; i++) {
      if (src[i] > tar[i])
        return false;
      if (tar[i] > src[i])
        return true;
    }
    return false;
  }
  module3.exports = isNodeLT("8.6.0") ? require_dist12() : require_lib8();
});

// ../migrate/dist/utils/byline.js
var require_byline4 = __commonJS((exports2, module3) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.createLineStream = void 0;
  var stream = require("stream");
  var util4 = require("util");
  function byline(readStream, options) {
    return module3.exports.createStream(readStream, options);
  }
  exports2.default = byline;
  module3.exports.createStream = function(readStream, options) {
    if (readStream) {
      return createLineStream(readStream, options);
    } else {
      return new LineStream(options);
    }
  };
  function createLineStream(readStream, options) {
    if (!readStream) {
      throw new Error("expected readStream");
    }
    if (!readStream.readable) {
      throw new Error("readStream must be readable");
    }
    var ls = new LineStream(options);
    readStream.pipe(ls);
    return ls;
  }
  exports2.createLineStream = createLineStream;
  module3.exports.LineStream = LineStream;
  function LineStream(options) {
    stream.Transform.call(this, options);
    options = options || {};
    this._readableState.objectMode = true;
    this._lineBuffer = [];
    this._keepEmptyLines = options.keepEmptyLines || false;
    this._lastChunkEndedWithCR = false;
    this.on("pipe", function(src) {
      if (!this.encoding) {
        if (src instanceof stream.Readable) {
          this.encoding = src._readableState.encoding;
        }
      }
    });
  }
  util4.inherits(LineStream, stream.Transform);
  LineStream.prototype._transform = function(chunk, encoding, done) {
    encoding = encoding || "utf8";
    if (Buffer.isBuffer(chunk)) {
      if (encoding == "buffer") {
        chunk = chunk.toString();
        encoding = "utf8";
      } else {
        chunk = chunk.toString(encoding);
      }
    }
    this._chunkEncoding = encoding;
    var lines = chunk.split(/\r\n|\r|\n/g);
    if (this._lastChunkEndedWithCR && chunk[0] == "\n") {
      lines.shift();
    }
    if (this._lineBuffer.length > 0) {
      this._lineBuffer[this._lineBuffer.length - 1] += lines[0];
      lines.shift();
    }
    this._lastChunkEndedWithCR = chunk[chunk.length - 1] == "\r";
    this._lineBuffer = this._lineBuffer.concat(lines);
    this._pushBuffer(encoding, 1, done);
  };
  LineStream.prototype._pushBuffer = function(encoding, keep, done) {
    while (this._lineBuffer.length > keep) {
      var line = this._lineBuffer.shift();
      if (this._keepEmptyLines || line.length > 0) {
        if (!this.push(this._reencode(line, encoding))) {
          var self2 = this;
          setImmediate(function() {
            self2._pushBuffer(encoding, keep, done);
          });
          return;
        }
      }
    }
    done();
  };
  LineStream.prototype._flush = function(done) {
    this._pushBuffer(this._chunkEncoding, 0, done);
  };
  LineStream.prototype._reencode = function(line, chunkEncoding) {
    if (this.encoding && this.encoding != chunkEncoding) {
      return Buffer.from(line, chunkEncoding).toString(this.encoding);
    } else if (this.encoding) {
      return line;
    } else {
      return Buffer.from(line, chunkEncoding);
    }
  };
});

// ../migrate/dist/utils/now.js
var require_now2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.renderDate = exports2.timestampToDate = exports2.now = void 0;
  function now() {
    const now2 = new Date();
    return `${now2.getUTCFullYear()}${prefixZero(now2.getUTCMonth() + 1)}${prefixZero(now2.getUTCDate())}${prefixZero(now2.getUTCHours())}${prefixZero(now2.getUTCMinutes())}${prefixZero(now2.getUTCSeconds())}`;
  }
  exports2.now = now;
  function timestampToDate(timestamp) {
    if (!timestamp || timestamp.length !== 14) {
      return void 0;
    }
    const year = Number(timestamp.slice(0, 4));
    const month = Number(timestamp.slice(4, 6));
    const date = Number(timestamp.slice(6, 8));
    const hours = Number(timestamp.slice(8, 10));
    const minutes = Number(timestamp.slice(10, 12));
    const seconds = Number(timestamp.slice(12, 14));
    return new Date(Date.UTC(year, month - 1, date, hours, minutes, seconds));
  }
  exports2.timestampToDate = timestampToDate;
  const prefixZero = (value) => ("0" + value).slice(-2);
  function renderDate(date) {
    if (date.getDate() !== new Date().getDate()) {
      return date.toLocaleDateString() + " " + date.toLocaleTimeString();
    }
    return date.toLocaleTimeString();
  }
  exports2.renderDate = renderDate;
});

// ../migrate/dist/MigrateEngine.js
var require_MigrateEngine = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.MigrateEngine = exports2.EngineError = void 0;
  const chalk_1 = __importDefault(require_source());
  const child_process_1 = require("child_process");
  const debug_1 = __importDefault(require_dist2());
  const byline_1 = __importDefault(require_byline4());
  const debugRpc = debug_1.default("MigrateEngine:rpc");
  const debugStderr = debug_1.default("MigrateEngine:stderr");
  const debugStdin = debug_1.default("MigrateEngine:stdin");
  const fs_1 = __importDefault(require("fs"));
  const now_1 = require_now2();
  const sdk_1 = require_dist11();
  class EngineError extends Error {
    constructor(message, code) {
      super(message);
      this.code = code;
    }
  }
  exports2.EngineError = EngineError;
  let messageId = 1;
  class MigrateEngine {
    constructor({projectDir, debug: debug3 = false, schemaPath, enabledPreviewFeatures}) {
      this.listeners = {};
      this.messages = [];
      this.projectDir = projectDir;
      this.schemaPath = schemaPath;
      if (debug3) {
        debug_1.default.enable("MigrateEngine*");
      }
      this.debug = debug3;
      this.enabledPreviewFeatures = enabledPreviewFeatures;
    }
    stop() {
      this.child.kill();
    }
    getDatabaseVersion() {
      return this.runCommand(this.getRPCPayload("getDatabaseVersion", void 0));
    }
    schemaPush(args2) {
      return this.runCommand(this.getRPCPayload("schemaPush", args2));
    }
    applyMigration(args2) {
      return this.runCommand(this.getRPCPayload("applyMigration", args2));
    }
    unapplyMigration(args2) {
      return this.runCommand(this.getRPCPayload("unapplyMigration", args2));
    }
    calculateDatamodel(args2) {
      return this.runCommand(this.getRPCPayload("calculateDatamodel", args2));
    }
    calculateDatabaseSteps(args2) {
      return this.runCommand(this.getRPCPayload("calculateDatabaseSteps", args2));
    }
    inferMigrationSteps(args2) {
      return this.runCommand(this.getRPCPayload("inferMigrationSteps", args2));
    }
    async listAppliedMigrations(args2) {
      const migrations = await this.runCommand(this.getRPCPayload("listMigrations", args2));
      return migrations.filter((m) => m.status === "MigrationSuccess");
    }
    migrationProgess(args2) {
      return this.runCommand(this.getRPCPayload("migrationProgress", args2));
    }
    debugPanic() {
      return this.runCommand(this.getRPCPayload("debugPanic", void 0));
    }
    rejectAll(err) {
      Object.entries(this.listeners).map(([id, listener]) => {
        listener(null, err);
        delete this.listeners[id];
      });
    }
    registerCallback(id, callback) {
      this.listeners[id] = callback;
    }
    handleResponse(response) {
      let result;
      try {
        result = JSON.parse(response);
      } catch (e) {
        console.error(`Could not parse migration engine response: ${response.slice(0, 200)}`);
      }
      if (result) {
        if (!result.id) {
          if (result.is_panic) {
            throw new Error(`Response ${JSON.stringify(result.message)}`);
          } else if (result.message) {
            console.error(`Response ${JSON.stringify(result.message)}`);
          } else {
            console.error(`Response ${JSON.stringify(result)}`);
          }
        }
        if (!this.listeners[result.id]) {
          console.error(`Got result for unknown id ${result.id}`);
        }
        if (this.listeners[result.id]) {
          this.listeners[result.id](result);
          delete this.listeners[result.id];
        }
      }
    }
    init() {
      if (!this.initPromise) {
        this.initPromise = this.internalInit();
      }
      return this.initPromise;
    }
    internalInit() {
      return new Promise(async (resolve, reject) => {
        try {
          const {PWD, ...rest} = process.env;
          const binaryPath = await sdk_1.resolveBinary("migration-engine");
          debugRpc("starting migration engine with binary: " + binaryPath);
          const args2 = ["-d", this.schemaPath];
          if (this.enabledPreviewFeatures && Array.isArray(this.enabledPreviewFeatures) && this.enabledPreviewFeatures.length > 0) {
            args2.push(...["--enabled-preview-features", this.enabledPreviewFeatures.join(",")]);
          }
          this.child = child_process_1.spawn(binaryPath, args2, {
            cwd: this.projectDir,
            stdio: ["pipe", "pipe", this.debug ? process.stderr : "pipe"],
            env: {
              ...rest,
              SERVER_ROOT: this.projectDir,
              RUST_LOG: "info",
              RUST_BACKTRACE: "1"
            }
          });
          this.child.on("error", (err) => {
            console.error("[migration-engine] error: %s", err);
            reject(err);
            this.rejectAll(err);
          });
          this.child.on("exit", (code, signal) => {
            const messages = this.messages.join("\n");
            let err;
            if (code !== 0 || messages.includes("panicking")) {
              let errorMessage = chalk_1.default.red.bold("Error in migration engine: ") + messages;
              if (this.lastError && code === 255) {
                errorMessage = serializePanic(this.lastError);
                err = new sdk_1.RustPanic(errorMessage, this.lastError.message, this.lastRequest, sdk_1.ErrorArea.LIFT_CLI, this.schemaPath);
              } else if (messages.includes("panicked at") || code === 255) {
                err = new sdk_1.RustPanic(errorMessage, messages, this.lastRequest, sdk_1.ErrorArea.LIFT_CLI, this.schemaPath);
              }
              err = err || new Error(errorMessage);
              this.rejectAll(err);
              reject(err);
            }
          });
          this.child.stdin.on("error", (err) => {
            debugStdin(err);
          });
          byline_1.default(this.child.stderr).on("data", (data) => {
            const msg = String(data);
            this.messages.push(msg);
            debugStderr(msg);
            try {
              const json = JSON.parse(msg);
              if (json.backtrace) {
                this.lastError = json;
              }
              if (json.level === "ERRO") {
                this.lastError = json;
              }
            } catch (e) {
            }
          });
          byline_1.default(this.child.stdout).on("data", (line) => {
            this.handleResponse(String(line));
          });
          setImmediate(() => {
            resolve();
          });
        } catch (e) {
          reject(e);
        }
      });
    }
    async runCommand(request) {
      var _a;
      if (process.env.FORCE_PANIC_MIGRATION_ENGINE) {
        request = this.getRPCPayload("debugPanic", void 0);
      }
      await this.init();
      if ((_a = this.child) === null || _a === void 0 ? void 0 : _a.killed) {
        throw new Error(`Can't execute ${JSON.stringify(request)} because migration engine already exited.`);
      }
      return new Promise((resolve, reject) => {
        this.registerCallback(request.id, (response, err) => {
          var _a2, _b, _c, _d, _e, _f;
          if (err) {
            return reject(err);
          }
          if (response.result) {
            resolve(response.result);
          } else {
            if (response.error) {
              debugRpc(response);
              if ((_a2 = response.error.data) === null || _a2 === void 0 ? void 0 : _a2.is_panic) {
                const message = (_d = (_c = (_b = response.error.data) === null || _b === void 0 ? void 0 : _b.error) === null || _c === void 0 ? void 0 : _c.message) !== null && _d !== void 0 ? _d : response.error.message;
                reject(new sdk_1.RustPanic(message, response.error.data.message, this.lastRequest, sdk_1.ErrorArea.LIFT_CLI, this.schemaPath));
              } else if ((_e = response.error.data) === null || _e === void 0 ? void 0 : _e.message) {
                let message = `${chalk_1.default.redBright(response.error.data.message)}
`;
                if ((_f = response.error.data) === null || _f === void 0 ? void 0 : _f.error_code) {
                  message = chalk_1.default.redBright(`${response.error.data.error_code}

`) + message;
                  reject(new EngineError(message, response.error.data.error_code));
                } else {
                  reject(new Error(message));
                }
              } else {
                const text = this.persistError(request, this.messages.join("\n"));
                reject(new Error(`${chalk_1.default.redBright("Error in RPC")}
 Request: ${JSON.stringify(request, null, 2)}
Response: ${JSON.stringify(response, null, 2)}
${response.error.message}

${text}
`));
              }
            } else {
              reject(new Error(`Got invalid RPC response without .result property: ${JSON.stringify(response)}`));
            }
          }
        });
        if (this.child.stdin.destroyed) {
          throw new Error(`Can't execute ${JSON.stringify(request)} because migration engine is destroyed.`);
        }
        debugRpc("SENDING RPC CALL", JSON.stringify(request));
        this.child.stdin.write(JSON.stringify(request) + "\n");
        this.lastRequest = request;
      });
    }
    persistError(request, message) {
      const filename = `failed-${request.method}-${now_1.now()}.md`;
      fs_1.default.writeFileSync(filename, `# Failed ${request.method} at ${new Date().toISOString()}
## RPC One-Liner
\`\`\`json
${JSON.stringify(request)}
\`\`\`

## RPC Input Readable
\`\`\`json
${JSON.stringify(request, null, 2)}
\`\`\`

## Stack Trace
\`\`\`bash
${message}
\`\`\`
`);
      return `Wrote ${chalk_1.default.bold(filename)} with debugging information.
Please put that file into a gist and post it in Slack.
1. ${chalk_1.default.greenBright(`cat ${filename} | pbcopy`)}
2. Create a gist ${chalk_1.default.greenBright.underline(`https://gist.github.com/new`)}`;
    }
    getRPCPayload(method, params) {
      return {
        id: messageId++,
        jsonrpc: "2.0",
        method,
        params: {
          projectInfo: "",
          ...params
        }
      };
    }
  }
  exports2.MigrateEngine = MigrateEngine;
  function serializePanic(log) {
    return `${chalk_1.default.red.bold("Error in migration engine.\nReason: ")}${chalk_1.default.red(`${log.message}`)}

Please create an issue in the ${chalk_1.default.bold("migrate")} repo with
your \`schema.prisma\` and the prisma command you tried to use 🙏:
${chalk_1.default.underline("https://github.com/prisma/migrate/issues/new")}
`;
  }
});

// ../../node_modules/.pnpm/through@2.3.8/node_modules/through/index.js
var require_through = __commonJS((exports2, module3) => {
  var Stream = require("stream");
  exports2 = module3.exports = through;
  through.through = through;
  function through(write, end, opts) {
    write = write || function(data) {
      this.queue(data);
    };
    end = end || function() {
      this.queue(null);
    };
    var ended = false, destroyed = false, buffer = [], _ended = false;
    var stream = new Stream();
    stream.readable = stream.writable = true;
    stream.paused = false;
    stream.autoDestroy = !(opts && opts.autoDestroy === false);
    stream.write = function(data) {
      write.call(this, data);
      return !stream.paused;
    };
    function drain() {
      while (buffer.length && !stream.paused) {
        var data = buffer.shift();
        if (data === null)
          return stream.emit("end");
        else
          stream.emit("data", data);
      }
    }
    stream.queue = stream.push = function(data) {
      if (_ended)
        return stream;
      if (data === null)
        _ended = true;
      buffer.push(data);
      drain();
      return stream;
    };
    stream.on("end", function() {
      stream.readable = false;
      if (!stream.writable && stream.autoDestroy)
        process.nextTick(function() {
          stream.destroy();
        });
    });
    function _end() {
      stream.writable = false;
      end.call(stream);
      if (!stream.readable && stream.autoDestroy)
        stream.destroy();
    }
    stream.end = function(data) {
      if (ended)
        return;
      ended = true;
      if (arguments.length)
        stream.write(data);
      _end();
      return stream;
    };
    stream.destroy = function() {
      if (destroyed)
        return;
      destroyed = true;
      ended = true;
      buffer.length = 0;
      stream.writable = stream.readable = false;
      stream.emit("close");
      return stream;
    };
    stream.pause = function() {
      if (stream.paused)
        return;
      stream.paused = true;
      return stream;
    };
    stream.resume = function() {
      if (stream.paused) {
        stream.paused = false;
        stream.emit("resume");
      }
      drain();
      if (!stream.paused)
        stream.emit("drain");
      return stream;
    };
    return stream;
  }
});

// ../../node_modules/.pnpm/from@0.1.7/node_modules/from/index.js
var require_from2 = __commonJS((exports2, module3) => {
  "use strict";
  var Stream = require("stream");
  module3.exports = function from(source) {
    if (Array.isArray(source)) {
      var source_index = 0, source_len = source.length;
      return from(function(i2) {
        if (source_index < source_len)
          this.emit("data", source[source_index++]);
        else
          this.emit("end");
        return true;
      });
    }
    var s = new Stream(), i = 0;
    s.ended = false;
    s.started = false;
    s.readable = true;
    s.writable = false;
    s.paused = false;
    s.ended = false;
    s.pause = function() {
      s.started = true;
      s.paused = true;
    };
    function next() {
      s.started = true;
      if (s.ended)
        return;
      while (!s.ended && !s.paused && source.call(s, i++, function() {
        if (!s.ended && !s.paused)
          process.nextTick(next);
      }))
        ;
    }
    s.resume = function() {
      s.started = true;
      s.paused = false;
      next();
    };
    s.on("end", function() {
      s.ended = true;
      s.readable = false;
      process.nextTick(s.destroy);
    });
    s.destroy = function() {
      s.ended = true;
      s.emit("close");
    };
    process.nextTick(function() {
      if (!s.started)
        s.resume();
    });
    return s;
  };
});

// ../../node_modules/.pnpm/duplexer@0.1.2/node_modules/duplexer/index.js
var require_duplexer = __commonJS((exports2, module3) => {
  var Stream = require("stream");
  var writeMethods = ["write", "end", "destroy"];
  var readMethods = ["resume", "pause"];
  var readEvents = ["data", "close"];
  var slice = Array.prototype.slice;
  module3.exports = duplex;
  function forEach(arr, fn) {
    if (arr.forEach) {
      return arr.forEach(fn);
    }
    for (var i = 0; i < arr.length; i++) {
      fn(arr[i], i);
    }
  }
  function duplex(writer, reader) {
    var stream = new Stream();
    var ended = false;
    forEach(writeMethods, proxyWriter);
    forEach(readMethods, proxyReader);
    forEach(readEvents, proxyStream);
    reader.on("end", handleEnd);
    writer.on("drain", function() {
      stream.emit("drain");
    });
    writer.on("error", reemit);
    reader.on("error", reemit);
    stream.writable = writer.writable;
    stream.readable = reader.readable;
    return stream;
    function proxyWriter(methodName) {
      stream[methodName] = method;
      function method() {
        return writer[methodName].apply(writer, arguments);
      }
    }
    function proxyReader(methodName) {
      stream[methodName] = method;
      function method() {
        stream.emit(methodName);
        var func = reader[methodName];
        if (func) {
          return func.apply(reader, arguments);
        }
        reader.emit(methodName);
      }
    }
    function proxyStream(methodName) {
      reader.on(methodName, reemit2);
      function reemit2() {
        var args2 = slice.call(arguments);
        args2.unshift(methodName);
        stream.emit.apply(stream, args2);
      }
    }
    function handleEnd() {
      if (ended) {
        return;
      }
      ended = true;
      var args2 = slice.call(arguments);
      args2.unshift("end");
      stream.emit.apply(stream, args2);
    }
    function reemit(err) {
      stream.emit("error", err);
    }
  }
});

// ../../node_modules/.pnpm/map-stream@0.1.0/node_modules/map-stream/index.js
var require_map_stream = __commonJS((exports2, module3) => {
  var Stream = require("stream").Stream;
  module3.exports = function(mapper, opts) {
    var stream = new Stream(), self2 = this, inputs = 0, outputs = 0, ended = false, paused = false, destroyed = false, lastWritten = 0, inNext = false;
    this.opts = opts || {};
    var errorEventName = this.opts.failures ? "failure" : "error";
    var writeQueue = {};
    stream.writable = true;
    stream.readable = true;
    function queueData(data, number) {
      var nextToWrite = lastWritten + 1;
      if (number === nextToWrite) {
        if (data !== void 0) {
          stream.emit.apply(stream, ["data", data]);
        }
        lastWritten++;
        nextToWrite++;
      } else {
        writeQueue[number] = data;
      }
      if (writeQueue.hasOwnProperty(nextToWrite)) {
        var dataToWrite = writeQueue[nextToWrite];
        delete writeQueue[nextToWrite];
        return queueData(dataToWrite, nextToWrite);
      }
      outputs++;
      if (inputs === outputs) {
        if (paused)
          paused = false, stream.emit("drain");
        if (ended)
          end();
      }
    }
    function next(err, data, number) {
      if (destroyed)
        return;
      inNext = true;
      if (!err || self2.opts.failures) {
        queueData(data, number);
      }
      if (err) {
        stream.emit.apply(stream, [errorEventName, err]);
      }
      inNext = false;
    }
    function wrappedMapper(input, number, callback) {
      return mapper.call(null, input, function(err, data) {
        callback(err, data, number);
      });
    }
    stream.write = function(data) {
      if (ended)
        throw new Error("map stream is not writable");
      inNext = false;
      inputs++;
      try {
        var written = wrappedMapper(data, inputs, next);
        paused = written === false;
        return !paused;
      } catch (err) {
        if (inNext)
          throw err;
        next(err);
        return !paused;
      }
    };
    function end(data) {
      ended = true;
      stream.writable = false;
      if (data !== void 0) {
        return queueData(data, inputs);
      } else if (inputs == outputs) {
        stream.readable = false, stream.emit("end"), stream.destroy();
      }
    }
    stream.end = function(data) {
      if (ended)
        return;
      end();
    };
    stream.destroy = function() {
      ended = destroyed = true;
      stream.writable = stream.readable = paused = false;
      process.nextTick(function() {
        stream.emit("close");
      });
    };
    stream.pause = function() {
      paused = true;
    };
    stream.resume = function() {
      paused = false;
    };
    return stream;
  };
});

// ../../node_modules/.pnpm/pause-stream@0.0.11/node_modules/pause-stream/index.js
var require_pause_stream = __commonJS((exports2, module3) => {
  module3.exports = require_through();
});

// ../../node_modules/.pnpm/split@0.3.3/node_modules/split/index.js
var require_split = __commonJS((exports2, module3) => {
  var through = require_through();
  var Decoder = require("string_decoder").StringDecoder;
  module3.exports = split;
  function split(matcher, mapper, options) {
    var decoder = new Decoder();
    var soFar = "";
    var maxLength = options && options.maxLength;
    if (typeof matcher === "function")
      mapper = matcher, matcher = null;
    if (!matcher)
      matcher = /\r?\n/;
    function emit(stream, piece) {
      if (mapper) {
        try {
          piece = mapper(piece);
        } catch (err) {
          return stream.emit("error", err);
        }
        if (typeof piece !== "undefined")
          stream.queue(piece);
      } else
        stream.queue(piece);
    }
    function next(stream, buffer) {
      var pieces = ((soFar != null ? soFar : "") + buffer).split(matcher);
      soFar = pieces.pop();
      if (maxLength && soFar.length > maxLength)
        stream.emit("error", new Error("maximum buffer reached"));
      for (var i = 0; i < pieces.length; i++) {
        var piece = pieces[i];
        emit(stream, piece);
      }
    }
    return through(function(b) {
      next(this, decoder.write(b));
    }, function() {
      if (decoder.end)
        next(this, decoder.end());
      if (soFar != null)
        emit(this, soFar);
      this.queue(null);
    });
  }
});

// ../../node_modules/.pnpm/stream-combiner@0.0.4/node_modules/stream-combiner/index.js
var require_stream_combiner = __commonJS((exports2, module3) => {
  var duplexer = require_duplexer();
  module3.exports = function() {
    var streams = [].slice.call(arguments), first = streams[0], last = streams[streams.length - 1], thepipe = duplexer(first, last);
    if (streams.length == 1)
      return streams[0];
    else if (!streams.length)
      throw new Error("connect called with empty args");
    function recurse(streams2) {
      if (streams2.length < 2)
        return;
      streams2[0].pipe(streams2[1]);
      recurse(streams2.slice(1));
    }
    recurse(streams);
    function onerror() {
      var args2 = [].slice.call(arguments);
      args2.unshift("error");
      thepipe.emit.apply(thepipe, args2);
    }
    for (var i = 1; i < streams.length - 1; i++)
      streams[i].on("error", onerror);
    return thepipe;
  };
});

// ../../node_modules/.pnpm/event-stream@3.3.4/node_modules/event-stream/index.js
var require_event_stream = __commonJS((exports2) => {
  var Stream = require("stream").Stream;
  var es = exports2;
  var through = require_through();
  var from = require_from2();
  var duplex = require_duplexer();
  var map = require_map_stream();
  var pause = require_pause_stream();
  var split = require_split();
  var pipeline = require_stream_combiner();
  var immediately = global.setImmediate || process.nextTick;
  es.Stream = Stream;
  es.through = through;
  es.from = from;
  es.duplex = duplex;
  es.map = map;
  es.pause = pause;
  es.split = split;
  es.pipeline = es.connect = es.pipe = pipeline;
  es.concat = es.merge = function() {
    var toMerge = [].slice.call(arguments);
    if (toMerge.length === 1 && toMerge[0] instanceof Array) {
      toMerge = toMerge[0];
    }
    var stream = new Stream();
    stream.setMaxListeners(0);
    var endCount = 0;
    stream.writable = stream.readable = true;
    if (toMerge.length) {
      toMerge.forEach(function(e) {
        e.pipe(stream, {end: false});
        var ended = false;
        e.on("end", function() {
          if (ended)
            return;
          ended = true;
          endCount++;
          if (endCount == toMerge.length)
            stream.emit("end");
        });
      });
    } else {
      process.nextTick(function() {
        stream.emit("end");
      });
    }
    stream.write = function(data) {
      this.emit("data", data);
    };
    stream.destroy = function() {
      toMerge.forEach(function(e) {
        if (e.destroy)
          e.destroy();
      });
    };
    return stream;
  };
  es.writeArray = function(done) {
    if (typeof done !== "function")
      throw new Error("function writeArray (done): done must be function");
    var a = new Stream(), array = [], isDone = false;
    a.write = function(l) {
      array.push(l);
    };
    a.end = function() {
      isDone = true;
      done(null, array);
    };
    a.writable = true;
    a.readable = false;
    a.destroy = function() {
      a.writable = a.readable = false;
      if (isDone)
        return;
      done(new Error("destroyed before end"), array);
    };
    return a;
  };
  es.readArray = function(array) {
    var stream = new Stream(), i = 0, paused = false, ended = false;
    stream.readable = true;
    stream.writable = false;
    if (!Array.isArray(array))
      throw new Error("event-stream.read expects an array");
    stream.resume = function() {
      if (ended)
        return;
      paused = false;
      var l = array.length;
      while (i < l && !paused && !ended) {
        stream.emit("data", array[i++]);
      }
      if (i == l && !ended)
        ended = true, stream.readable = false, stream.emit("end");
    };
    process.nextTick(stream.resume);
    stream.pause = function() {
      paused = true;
    };
    stream.destroy = function() {
      ended = true;
      stream.emit("close");
    };
    return stream;
  };
  es.readable = function(func, continueOnError) {
    var stream = new Stream(), i = 0, paused = false, ended = false, reading = false;
    stream.readable = true;
    stream.writable = false;
    if (typeof func !== "function")
      throw new Error("event-stream.readable expects async function");
    stream.on("end", function() {
      ended = true;
    });
    function get(err, data) {
      if (err) {
        stream.emit("error", err);
        if (!continueOnError)
          stream.emit("end");
      } else if (arguments.length > 1)
        stream.emit("data", data);
      immediately(function() {
        if (ended || paused || reading)
          return;
        try {
          reading = true;
          func.call(stream, i++, function() {
            reading = false;
            get.apply(null, arguments);
          });
        } catch (err2) {
          stream.emit("error", err2);
        }
      });
    }
    stream.resume = function() {
      paused = false;
      get();
    };
    process.nextTick(get);
    stream.pause = function() {
      paused = true;
    };
    stream.destroy = function() {
      stream.emit("end");
      stream.emit("close");
      ended = true;
    };
    return stream;
  };
  es.mapSync = function(sync) {
    return es.through(function write(data) {
      var mappedData;
      try {
        mappedData = sync(data);
      } catch (err) {
        return this.emit("error", err);
      }
      if (mappedData !== void 0)
        this.emit("data", mappedData);
    });
  };
  es.log = function(name) {
    return es.through(function(data) {
      var args2 = [].slice.call(arguments);
      if (name)
        console.error(name, data);
      else
        console.error(data);
      this.emit("data", data);
    });
  };
  es.child = function(child) {
    return es.duplex(child.stdin, child.stdout);
  };
  es.parse = function(options) {
    var emitError = !!(options ? options.error : false);
    return es.through(function(data) {
      var obj;
      try {
        if (data)
          obj = JSON.parse(data.toString());
      } catch (err) {
        if (emitError)
          return this.emit("error", err);
        return console.error(err, "attempting to parse:", data);
      }
      if (obj !== void 0)
        this.emit("data", obj);
    });
  };
  es.stringify = function() {
    var Buffer2 = require("buffer").Buffer;
    return es.mapSync(function(e) {
      return JSON.stringify(Buffer2.isBuffer(e) ? e.toString() : e) + "\n";
    });
  };
  es.replace = function(from2, to) {
    return es.pipeline(es.split(from2), es.join(to));
  };
  es.join = function(str) {
    if (typeof str === "function")
      return es.wait(str);
    var first = true;
    return es.through(function(data) {
      if (!first)
        this.emit("data", str);
      first = false;
      this.emit("data", data);
      return true;
    });
  };
  es.wait = function(callback) {
    var arr = [];
    return es.through(function(data) {
      arr.push(data);
    }, function() {
      var body = Buffer.isBuffer(arr[0]) ? Buffer.concat(arr) : arr.join("");
      this.emit("data", body);
      this.emit("end");
      if (callback)
        callback(null, body);
    });
  };
  es.pipeable = function() {
    throw new Error("[EVENT-STREAM] es.pipeable is deprecated");
  };
});

// ../../node_modules/.pnpm/ps-tree@1.2.0/node_modules/ps-tree/index.js
var require_ps_tree = __commonJS((exports2, module3) => {
  "use strict";
  var spawn = require("child_process").spawn;
  var es = require_event_stream();
  module3.exports = function childrenOfPid(pid, callback) {
    var headers = null;
    if (typeof callback !== "function") {
      throw new Error("childrenOfPid(pid, callback) expects callback");
    }
    if (typeof pid === "number") {
      pid = pid.toString();
    }
    var processLister;
    if (process.platform === "win32") {
      processLister = spawn("wmic.exe", ["PROCESS", "GET", "Name,ProcessId,ParentProcessId,Status"]);
    } else {
      processLister = spawn("ps", ["-A", "-o", "ppid,pid,stat,comm"]);
    }
    es.connect(processLister.stdout, es.split(), es.map(function(line, cb) {
      var columns = line.trim().split(/\s+/);
      if (!headers) {
        headers = columns;
        headers = headers.map(normalizeHeader);
        return cb();
      }
      var row = {};
      var h = headers.slice();
      while (h.length) {
        row[h.shift()] = h.length ? columns.shift() : columns.join(" ");
      }
      return cb(null, row);
    }), es.writeArray(function(err, ps) {
      var parents = {}, children = [];
      parents[pid] = true;
      ps.forEach(function(proc) {
        if (parents[proc.PPID]) {
          parents[proc.PID] = true;
          children.push(proc);
        }
      });
      callback(null, children);
    })).on("error", callback);
  };
  function normalizeHeader(str) {
    if (process.platform !== "win32") {
      return str;
    }
    switch (str) {
      case "Name":
        return "COMMAND";
        break;
      case "ParentProcessId":
        return "PPID";
        break;
      case "ProcessId":
        return "PID";
        break;
      case "Status":
        return "STAT";
        break;
      default:
        throw new Error("Unknown process listing header: " + str);
    }
  }
});

// ../migrate/dist/utils/exit.js
var require_exit = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.exit = void 0;
  const ps_tree_1 = __importDefault(require_ps_tree());
  async function exit() {
    const children = await getChildProcesses();
    children.forEach((child) => {
      process.kill(Number(child.PID));
    });
    process.exit();
  }
  exports2.exit = exit;
  function getChildProcesses() {
    return new Promise((resolve, reject) => {
      ps_tree_1.default(process.pid, (err, children) => {
        if (err) {
          reject(err);
        } else {
          resolve(children);
        }
      });
    });
  }
});

// ../migrate/dist/utils/formatms.js
var require_formatms = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.formatms = void 0;
  function formatms5(ms) {
    if (ms < 1e3) {
      return `${ms}ms`;
    }
    return (ms / 1e3).toFixed(2) + "s";
  }
  exports2.formatms = formatms5;
});

// ../migrate/dist/utils/groupBy.js
var require_groupBy = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.groupBy = void 0;
  function groupBy(arr, iteratee) {
    const dict = {};
    for (const element of arr) {
      const key = iteratee(element);
      if (!dict[key]) {
        dict[key] = [element];
      } else {
        dict[key].push(element);
      }
    }
    return dict;
  }
  exports2.groupBy = groupBy;
});

// ../migrate/dist/utils/isWatchMigrationName.js
var require_isWatchMigrationName = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.isWatchMigrationName = void 0;
  function isWatchMigrationName(name) {
    return name.startsWith("watch");
  }
  exports2.isWatchMigrationName = isWatchMigrationName;
});

// ../migrate/dist/utils/LockFile.js
var require_LockFile = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.initLockFile = exports2.serializeLockFile = exports2.deserializeLockFile = void 0;
  const header = `# Prisma Migrate lockfile v1
`;
  function deserializeLockFile(file) {
    const lines = file.split("\n").filter((line) => {
      const trimmed = line.trim();
      return !trimmed.startsWith("#") && trimmed.length !== 0;
    });
    const localMigrations = [];
    const remoteMigrations = [];
    let localBranch = void 0;
    let remoteBranch = void 0;
    let sawLocalMarker = false;
    let sawRemoteMarker = false;
    let sawDivider = false;
    for (const line of lines) {
      let isMarker = false;
      if (line.startsWith("<<<<<<<")) {
        sawLocalMarker = true;
        localBranch = line.slice("<<<<<<< ".length);
        isMarker = true;
      }
      if (line.startsWith("=======")) {
        sawDivider = true;
        isMarker = true;
      }
      if (line.startsWith(">>>>>>>")) {
        sawRemoteMarker = true;
        remoteBranch = line.slice(">>>>>>> ".length);
        isMarker = true;
      }
      if (!isMarker) {
        if (!sawLocalMarker && !sawRemoteMarker) {
          localMigrations.push(line);
          remoteMigrations.push(line);
        }
        if (sawLocalMarker && !sawDivider) {
          localMigrations.push(line);
        }
        if (sawLocalMarker && sawDivider) {
          remoteMigrations.push(line);
        }
        if (sawLocalMarker && sawDivider && sawRemoteMarker) {
          localMigrations.push(line);
          remoteMigrations.push(line);
        }
      }
    }
    return {
      localMigrations,
      remoteMigrations,
      localBranch,
      remoteBranch
    };
  }
  exports2.deserializeLockFile = deserializeLockFile;
  function serializeLockFile(lockFile) {
    return `${header}
${lockFile.localMigrations.join("\n")}`;
  }
  exports2.serializeLockFile = serializeLockFile;
  function initLockFile() {
    return {
      localMigrations: [],
      remoteMigrations: []
    };
  }
  exports2.initLockFile = initLockFile;
});

// ../migrate/dist/utils/plusX.js
var require_plusX = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  const fs_1 = __importDefault(require("fs"));
  function plusX(file) {
    if (fs_1.default.existsSync(file)) {
      const s = fs_1.default.statSync(file);
      const newMode = s.mode | 64 | 8 | 1;
      if (s.mode === newMode)
        return;
      const base8 = newMode.toString(8).slice(-3);
      fs_1.default.chmodSync(file, base8);
    }
  }
  exports2.default = plusX;
});

// ../migrate/dist/utils/printDatabaseSteps.js
var require_printDatabaseSteps = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.printDetailedDatabaseSteps = exports2.highlightMigrationsSQL = exports2.printDatabaseStepsOverview = void 0;
  const theme_1 = require_theme();
  const sdk_1 = require_dist11();
  function printDatabaseStepsOverview(databaseSteps) {
    if (databaseSteps.length === 0) {
      return `No statements inferrable.`;
    }
    const counts = getStepCounts(databaseSteps);
    const overview = Object.entries(counts).reduce((acc, [key, value]) => {
      if (value > 0) {
        acc.push(`${value} ${theme_1.darkBrightBlue(key)}`);
      }
      return acc;
    }, []).join(", ") + " statements.";
    return overview;
  }
  exports2.printDatabaseStepsOverview = printDatabaseStepsOverview;
  function highlightMigrationsSQL(migrations) {
    return sdk_1.highlightSql("-- Start Migrations\n\n" + migrations.map((migration) => `-- Migration ${migration.id}
` + migration.databaseSteps.map((it) => it.raw).join("\n")).join("\n\n") + "\n\n-- End Migrations");
  }
  exports2.highlightMigrationsSQL = highlightMigrationsSQL;
  function printDetailedDatabaseSteps(databaseSteps) {
    return databaseSteps.map((it) => it.raw).join("\n\n").replace(/"quaint"./g, "");
  }
  exports2.printDetailedDatabaseSteps = printDetailedDatabaseSteps;
  function getStepCounts(databaseSteps) {
    const stepCounts = {
      RawSql: 0,
      DropTable: 0,
      RenameTable: 0,
      CreateTable: 0
    };
    for (const it of databaseSteps) {
      const key = Object.keys(it.step)[0];
      stepCounts[key]++;
    }
    return stepCounts;
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/diff/base.js
var require_base = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.default = Diff;
  function Diff() {
  }
  Diff.prototype = {
    diff: function diff(oldString, newString) {
      var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var callback = options.callback;
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      this.options = options;
      var self2 = this;
      function done(value) {
        if (callback) {
          setTimeout(function() {
            callback(void 0, value);
          }, 0);
          return true;
        } else {
          return value;
        }
      }
      oldString = this.castInput(oldString);
      newString = this.castInput(newString);
      oldString = this.removeEmpty(this.tokenize(oldString));
      newString = this.removeEmpty(this.tokenize(newString));
      var newLen = newString.length, oldLen = oldString.length;
      var editLength = 1;
      var maxEditLength = newLen + oldLen;
      var bestPath = [{
        newPos: -1,
        components: []
      }];
      var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);
      if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
        return done([{
          value: this.join(newString),
          count: newString.length
        }]);
      }
      function execEditLength() {
        for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {
          var basePath = void 0;
          var addPath = bestPath[diagonalPath - 1], removePath = bestPath[diagonalPath + 1], _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;
          if (addPath) {
            bestPath[diagonalPath - 1] = void 0;
          }
          var canAdd = addPath && addPath.newPos + 1 < newLen, canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;
          if (!canAdd && !canRemove) {
            bestPath[diagonalPath] = void 0;
            continue;
          }
          if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {
            basePath = clonePath(removePath);
            self2.pushComponent(basePath.components, void 0, true);
          } else {
            basePath = addPath;
            basePath.newPos++;
            self2.pushComponent(basePath.components, true, void 0);
          }
          _oldPos = self2.extractCommon(basePath, newString, oldString, diagonalPath);
          if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {
            return done(buildValues(self2, basePath.components, newString, oldString, self2.useLongestToken));
          } else {
            bestPath[diagonalPath] = basePath;
          }
        }
        editLength++;
      }
      if (callback) {
        (function exec() {
          setTimeout(function() {
            if (editLength > maxEditLength) {
              return callback();
            }
            if (!execEditLength()) {
              exec();
            }
          }, 0);
        })();
      } else {
        while (editLength <= maxEditLength) {
          var ret = execEditLength();
          if (ret) {
            return ret;
          }
        }
      }
    },
    pushComponent: function pushComponent(components, added, removed) {
      var last = components[components.length - 1];
      if (last && last.added === added && last.removed === removed) {
        components[components.length - 1] = {
          count: last.count + 1,
          added,
          removed
        };
      } else {
        components.push({
          count: 1,
          added,
          removed
        });
      }
    },
    extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {
      var newLen = newString.length, oldLen = oldString.length, newPos = basePath.newPos, oldPos = newPos - diagonalPath, commonCount = 0;
      while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {
        newPos++;
        oldPos++;
        commonCount++;
      }
      if (commonCount) {
        basePath.components.push({
          count: commonCount
        });
      }
      basePath.newPos = newPos;
      return oldPos;
    },
    equals: function equals(left, right) {
      if (this.options.comparator) {
        return this.options.comparator(left, right);
      } else {
        return left === right || this.options.ignoreCase && left.toLowerCase() === right.toLowerCase();
      }
    },
    removeEmpty: function removeEmpty(array) {
      var ret = [];
      for (var i = 0; i < array.length; i++) {
        if (array[i]) {
          ret.push(array[i]);
        }
      }
      return ret;
    },
    castInput: function castInput(value) {
      return value;
    },
    tokenize: function tokenize(value) {
      return value.split("");
    },
    join: function join(chars) {
      return chars.join("");
    }
  };
  function buildValues(diff, components, newString, oldString, useLongestToken) {
    var componentPos = 0, componentLen = components.length, newPos = 0, oldPos = 0;
    for (; componentPos < componentLen; componentPos++) {
      var component = components[componentPos];
      if (!component.removed) {
        if (!component.added && useLongestToken) {
          var value = newString.slice(newPos, newPos + component.count);
          value = value.map(function(value2, i) {
            var oldValue = oldString[oldPos + i];
            return oldValue.length > value2.length ? oldValue : value2;
          });
          component.value = diff.join(value);
        } else {
          component.value = diff.join(newString.slice(newPos, newPos + component.count));
        }
        newPos += component.count;
        if (!component.added) {
          oldPos += component.count;
        }
      } else {
        component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));
        oldPos += component.count;
        if (componentPos && components[componentPos - 1].added) {
          var tmp = components[componentPos - 1];
          components[componentPos - 1] = components[componentPos];
          components[componentPos] = tmp;
        }
      }
    }
    var lastComponent = components[componentLen - 1];
    if (componentLen > 1 && typeof lastComponent.value === "string" && (lastComponent.added || lastComponent.removed) && diff.equals("", lastComponent.value)) {
      components[componentLen - 2].value += lastComponent.value;
      components.pop();
    }
    return components;
  }
  function clonePath(path19) {
    return {
      newPos: path19.newPos,
      components: path19.components.slice(0)
    };
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/diff/character.js
var require_character = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.diffChars = diffChars;
  exports2.characterDiff = void 0;
  var _base = _interopRequireDefault(require_base());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var characterDiff = new _base.default();
  exports2.characterDiff = characterDiff;
  function diffChars(oldStr, newStr, options) {
    return characterDiff.diff(oldStr, newStr, options);
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/util/params.js
var require_params = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.generateOptions = generateOptions;
  function generateOptions(options, defaults) {
    if (typeof options === "function") {
      defaults.callback = options;
    } else if (options) {
      for (var name in options) {
        if (options.hasOwnProperty(name)) {
          defaults[name] = options[name];
        }
      }
    }
    return defaults;
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/diff/word.js
var require_word = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.diffWords = diffWords;
  exports2.diffWordsWithSpace = diffWordsWithSpace;
  exports2.wordDiff = void 0;
  var _base = _interopRequireDefault(require_base());
  var _params = require_params();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var extendedWordChars = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/;
  var reWhitespace = /\S/;
  var wordDiff = new _base.default();
  exports2.wordDiff = wordDiff;
  wordDiff.equals = function(left, right) {
    if (this.options.ignoreCase) {
      left = left.toLowerCase();
      right = right.toLowerCase();
    }
    return left === right || this.options.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right);
  };
  wordDiff.tokenize = function(value) {
    var tokens = value.split(/(\s+|[()[\]{}'"]|\b)/);
    for (var i = 0; i < tokens.length - 1; i++) {
      if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {
        tokens[i] += tokens[i + 2];
        tokens.splice(i + 1, 2);
        i--;
      }
    }
    return tokens;
  };
  function diffWords(oldStr, newStr, options) {
    options = (0, _params.generateOptions)(options, {
      ignoreWhitespace: true
    });
    return wordDiff.diff(oldStr, newStr, options);
  }
  function diffWordsWithSpace(oldStr, newStr, options) {
    return wordDiff.diff(oldStr, newStr, options);
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/diff/line.js
var require_line = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.diffLines = diffLines;
  exports2.diffTrimmedLines = diffTrimmedLines;
  exports2.lineDiff = void 0;
  var _base = _interopRequireDefault(require_base());
  var _params = require_params();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var lineDiff = new _base.default();
  exports2.lineDiff = lineDiff;
  lineDiff.tokenize = function(value) {
    var retLines = [], linesAndNewlines = value.split(/(\n|\r\n)/);
    if (!linesAndNewlines[linesAndNewlines.length - 1]) {
      linesAndNewlines.pop();
    }
    for (var i = 0; i < linesAndNewlines.length; i++) {
      var line = linesAndNewlines[i];
      if (i % 2 && !this.options.newlineIsToken) {
        retLines[retLines.length - 1] += line;
      } else {
        if (this.options.ignoreWhitespace) {
          line = line.trim();
        }
        retLines.push(line);
      }
    }
    return retLines;
  };
  function diffLines(oldStr, newStr, callback) {
    return lineDiff.diff(oldStr, newStr, callback);
  }
  function diffTrimmedLines(oldStr, newStr, callback) {
    var options = (0, _params.generateOptions)(callback, {
      ignoreWhitespace: true
    });
    return lineDiff.diff(oldStr, newStr, options);
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/diff/sentence.js
var require_sentence = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.diffSentences = diffSentences;
  exports2.sentenceDiff = void 0;
  var _base = _interopRequireDefault(require_base());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var sentenceDiff = new _base.default();
  exports2.sentenceDiff = sentenceDiff;
  sentenceDiff.tokenize = function(value) {
    return value.split(/(\S.+?[.!?])(?=\s+|$)/);
  };
  function diffSentences(oldStr, newStr, callback) {
    return sentenceDiff.diff(oldStr, newStr, callback);
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/diff/css.js
var require_css = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.diffCss = diffCss;
  exports2.cssDiff = void 0;
  var _base = _interopRequireDefault(require_base());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var cssDiff = new _base.default();
  exports2.cssDiff = cssDiff;
  cssDiff.tokenize = function(value) {
    return value.split(/([{}:;,]|\s+)/);
  };
  function diffCss(oldStr, newStr, callback) {
    return cssDiff.diff(oldStr, newStr, callback);
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/diff/json.js
var require_json2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.diffJson = diffJson;
  exports2.canonicalize = canonicalize;
  exports2.jsonDiff = void 0;
  var _base = _interopRequireDefault(require_base());
  var _line = require_line();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof2(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof2(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  var objectPrototypeToString = Object.prototype.toString;
  var jsonDiff = new _base.default();
  exports2.jsonDiff = jsonDiff;
  jsonDiff.useLongestToken = true;
  jsonDiff.tokenize = _line.lineDiff.tokenize;
  jsonDiff.castInput = function(value) {
    var _this$options = this.options, undefinedReplacement = _this$options.undefinedReplacement, _this$options$stringi = _this$options.stringifyReplacer, stringifyReplacer = _this$options$stringi === void 0 ? function(k, v) {
      return typeof v === "undefined" ? undefinedReplacement : v;
    } : _this$options$stringi;
    return typeof value === "string" ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, "  ");
  };
  jsonDiff.equals = function(left, right) {
    return _base.default.prototype.equals.call(jsonDiff, left.replace(/,([\r\n])/g, "$1"), right.replace(/,([\r\n])/g, "$1"));
  };
  function diffJson(oldObj, newObj, options) {
    return jsonDiff.diff(oldObj, newObj, options);
  }
  function canonicalize(obj, stack, replacementStack, replacer, key) {
    stack = stack || [];
    replacementStack = replacementStack || [];
    if (replacer) {
      obj = replacer(key, obj);
    }
    var i;
    for (i = 0; i < stack.length; i += 1) {
      if (stack[i] === obj) {
        return replacementStack[i];
      }
    }
    var canonicalizedObj;
    if (objectPrototypeToString.call(obj) === "[object Array]") {
      stack.push(obj);
      canonicalizedObj = new Array(obj.length);
      replacementStack.push(canonicalizedObj);
      for (i = 0; i < obj.length; i += 1) {
        canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
      }
      stack.pop();
      replacementStack.pop();
      return canonicalizedObj;
    }
    if (obj && obj.toJSON) {
      obj = obj.toJSON();
    }
    if (_typeof(obj) === "object" && obj !== null) {
      stack.push(obj);
      canonicalizedObj = {};
      replacementStack.push(canonicalizedObj);
      var sortedKeys = [], _key;
      for (_key in obj) {
        if (obj.hasOwnProperty(_key)) {
          sortedKeys.push(_key);
        }
      }
      sortedKeys.sort();
      for (i = 0; i < sortedKeys.length; i += 1) {
        _key = sortedKeys[i];
        canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);
      }
      stack.pop();
      replacementStack.pop();
    } else {
      canonicalizedObj = obj;
    }
    return canonicalizedObj;
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/diff/array.js
var require_array2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.diffArrays = diffArrays;
  exports2.arrayDiff = void 0;
  var _base = _interopRequireDefault(require_base());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  var arrayDiff = new _base.default();
  exports2.arrayDiff = arrayDiff;
  arrayDiff.tokenize = function(value) {
    return value.slice();
  };
  arrayDiff.join = arrayDiff.removeEmpty = function(value) {
    return value;
  };
  function diffArrays(oldArr, newArr, callback) {
    return arrayDiff.diff(oldArr, newArr, callback);
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/patch/parse.js
var require_parse6 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.parsePatch = parsePatch;
  function parsePatch(uniDiff) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var diffstr = uniDiff.split(/\r\n|[\n\v\f\r\x85]/), delimiters = uniDiff.match(/\r\n|[\n\v\f\r\x85]/g) || [], list = [], i = 0;
    function parseIndex() {
      var index = {};
      list.push(index);
      while (i < diffstr.length) {
        var line = diffstr[i];
        if (/^(\-\-\-|\+\+\+|@@)\s/.test(line)) {
          break;
        }
        var header = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(line);
        if (header) {
          index.index = header[1];
        }
        i++;
      }
      parseFileHeader(index);
      parseFileHeader(index);
      index.hunks = [];
      while (i < diffstr.length) {
        var _line = diffstr[i];
        if (/^(Index:|diff|\-\-\-|\+\+\+)\s/.test(_line)) {
          break;
        } else if (/^@@/.test(_line)) {
          index.hunks.push(parseHunk());
        } else if (_line && options.strict) {
          throw new Error("Unknown line " + (i + 1) + " " + JSON.stringify(_line));
        } else {
          i++;
        }
      }
    }
    function parseFileHeader(index) {
      var fileHeader = /^(---|\+\+\+)\s+(.*)$/.exec(diffstr[i]);
      if (fileHeader) {
        var keyPrefix = fileHeader[1] === "---" ? "old" : "new";
        var data = fileHeader[2].split("	", 2);
        var fileName = data[0].replace(/\\\\/g, "\\");
        if (/^".*"$/.test(fileName)) {
          fileName = fileName.substr(1, fileName.length - 2);
        }
        index[keyPrefix + "FileName"] = fileName;
        index[keyPrefix + "Header"] = (data[1] || "").trim();
        i++;
      }
    }
    function parseHunk() {
      var chunkHeaderIndex = i, chunkHeaderLine = diffstr[i++], chunkHeader = chunkHeaderLine.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/);
      var hunk = {
        oldStart: +chunkHeader[1],
        oldLines: +chunkHeader[2] || 1,
        newStart: +chunkHeader[3],
        newLines: +chunkHeader[4] || 1,
        lines: [],
        linedelimiters: []
      };
      var addCount = 0, removeCount = 0;
      for (; i < diffstr.length; i++) {
        if (diffstr[i].indexOf("--- ") === 0 && i + 2 < diffstr.length && diffstr[i + 1].indexOf("+++ ") === 0 && diffstr[i + 2].indexOf("@@") === 0) {
          break;
        }
        var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? " " : diffstr[i][0];
        if (operation === "+" || operation === "-" || operation === " " || operation === "\\") {
          hunk.lines.push(diffstr[i]);
          hunk.linedelimiters.push(delimiters[i] || "\n");
          if (operation === "+") {
            addCount++;
          } else if (operation === "-") {
            removeCount++;
          } else if (operation === " ") {
            addCount++;
            removeCount++;
          }
        } else {
          break;
        }
      }
      if (!addCount && hunk.newLines === 1) {
        hunk.newLines = 0;
      }
      if (!removeCount && hunk.oldLines === 1) {
        hunk.oldLines = 0;
      }
      if (options.strict) {
        if (addCount !== hunk.newLines) {
          throw new Error("Added line count did not match for hunk at line " + (chunkHeaderIndex + 1));
        }
        if (removeCount !== hunk.oldLines) {
          throw new Error("Removed line count did not match for hunk at line " + (chunkHeaderIndex + 1));
        }
      }
      return hunk;
    }
    while (i < diffstr.length) {
      parseIndex();
    }
    return list;
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/util/distance-iterator.js
var require_distance_iterator = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.default = _default;
  function _default(start, minLine, maxLine) {
    var wantForward = true, backwardExhausted = false, forwardExhausted = false, localOffset = 1;
    return function iterator() {
      if (wantForward && !forwardExhausted) {
        if (backwardExhausted) {
          localOffset++;
        } else {
          wantForward = false;
        }
        if (start + localOffset <= maxLine) {
          return localOffset;
        }
        forwardExhausted = true;
      }
      if (!backwardExhausted) {
        if (!forwardExhausted) {
          wantForward = true;
        }
        if (minLine <= start - localOffset) {
          return -localOffset++;
        }
        backwardExhausted = true;
        return iterator();
      }
    };
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/patch/apply.js
var require_apply = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.applyPatch = applyPatch;
  exports2.applyPatches = applyPatches;
  var _parse = require_parse6();
  var _distanceIterator = _interopRequireDefault(require_distance_iterator());
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
  function applyPatch(source, uniDiff) {
    var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    if (typeof uniDiff === "string") {
      uniDiff = (0, _parse.parsePatch)(uniDiff);
    }
    if (Array.isArray(uniDiff)) {
      if (uniDiff.length > 1) {
        throw new Error("applyPatch only works with a single input.");
      }
      uniDiff = uniDiff[0];
    }
    var lines = source.split(/\r\n|[\n\v\f\r\x85]/), delimiters = source.match(/\r\n|[\n\v\f\r\x85]/g) || [], hunks = uniDiff.hunks, compareLine = options.compareLine || function(lineNumber, line2, operation2, patchContent) {
      return line2 === patchContent;
    }, errorCount = 0, fuzzFactor = options.fuzzFactor || 0, minLine = 0, offset = 0, removeEOFNL, addEOFNL;
    function hunkFits(hunk2, toPos2) {
      for (var j2 = 0; j2 < hunk2.lines.length; j2++) {
        var line2 = hunk2.lines[j2], operation2 = line2.length > 0 ? line2[0] : " ", content2 = line2.length > 0 ? line2.substr(1) : line2;
        if (operation2 === " " || operation2 === "-") {
          if (!compareLine(toPos2 + 1, lines[toPos2], operation2, content2)) {
            errorCount++;
            if (errorCount > fuzzFactor) {
              return false;
            }
          }
          toPos2++;
        }
      }
      return true;
    }
    for (var i = 0; i < hunks.length; i++) {
      var hunk = hunks[i], maxLine = lines.length - hunk.oldLines, localOffset = 0, toPos = offset + hunk.oldStart - 1;
      var iterator = (0, _distanceIterator.default)(toPos, minLine, maxLine);
      for (; localOffset !== void 0; localOffset = iterator()) {
        if (hunkFits(hunk, toPos + localOffset)) {
          hunk.offset = offset += localOffset;
          break;
        }
      }
      if (localOffset === void 0) {
        return false;
      }
      minLine = hunk.offset + hunk.oldStart + hunk.oldLines;
    }
    var diffOffset = 0;
    for (var _i = 0; _i < hunks.length; _i++) {
      var _hunk = hunks[_i], _toPos = _hunk.oldStart + _hunk.offset + diffOffset - 1;
      diffOffset += _hunk.newLines - _hunk.oldLines;
      if (_toPos < 0) {
        _toPos = 0;
      }
      for (var j = 0; j < _hunk.lines.length; j++) {
        var line = _hunk.lines[j], operation = line.length > 0 ? line[0] : " ", content = line.length > 0 ? line.substr(1) : line, delimiter = _hunk.linedelimiters[j];
        if (operation === " ") {
          _toPos++;
        } else if (operation === "-") {
          lines.splice(_toPos, 1);
          delimiters.splice(_toPos, 1);
        } else if (operation === "+") {
          lines.splice(_toPos, 0, content);
          delimiters.splice(_toPos, 0, delimiter);
          _toPos++;
        } else if (operation === "\\") {
          var previousOperation = _hunk.lines[j - 1] ? _hunk.lines[j - 1][0] : null;
          if (previousOperation === "+") {
            removeEOFNL = true;
          } else if (previousOperation === "-") {
            addEOFNL = true;
          }
        }
      }
    }
    if (removeEOFNL) {
      while (!lines[lines.length - 1]) {
        lines.pop();
        delimiters.pop();
      }
    } else if (addEOFNL) {
      lines.push("");
      delimiters.push("\n");
    }
    for (var _k = 0; _k < lines.length - 1; _k++) {
      lines[_k] = lines[_k] + delimiters[_k];
    }
    return lines.join("");
  }
  function applyPatches(uniDiff, options) {
    if (typeof uniDiff === "string") {
      uniDiff = (0, _parse.parsePatch)(uniDiff);
    }
    var currentIndex = 0;
    function processIndex() {
      var index = uniDiff[currentIndex++];
      if (!index) {
        return options.complete();
      }
      options.loadFile(index, function(err, data) {
        if (err) {
          return options.complete(err);
        }
        var updatedContent = applyPatch(data, index, options);
        options.patched(index, updatedContent, function(err2) {
          if (err2) {
            return options.complete(err2);
          }
          processIndex();
        });
      });
    }
    processIndex();
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/patch/create.js
var require_create2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.structuredPatch = structuredPatch;
  exports2.createTwoFilesPatch = createTwoFilesPatch;
  exports2.createPatch = createPatch;
  var _line = require_line();
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }
  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
      return Array.from(iter);
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
  }
  function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
    if (!options) {
      options = {};
    }
    if (typeof options.context === "undefined") {
      options.context = 4;
    }
    var diff = (0, _line.diffLines)(oldStr, newStr, options);
    diff.push({
      value: "",
      lines: []
    });
    function contextLines(lines) {
      return lines.map(function(entry) {
        return " " + entry;
      });
    }
    var hunks = [];
    var oldRangeStart = 0, newRangeStart = 0, curRange = [], oldLine = 1, newLine = 1;
    var _loop = function _loop2(i2) {
      var current = diff[i2], lines = current.lines || current.value.replace(/\n$/, "").split("\n");
      current.lines = lines;
      if (current.added || current.removed) {
        var _curRange;
        if (!oldRangeStart) {
          var prev = diff[i2 - 1];
          oldRangeStart = oldLine;
          newRangeStart = newLine;
          if (prev) {
            curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];
            oldRangeStart -= curRange.length;
            newRangeStart -= curRange.length;
          }
        }
        (_curRange = curRange).push.apply(_curRange, _toConsumableArray(lines.map(function(entry) {
          return (current.added ? "+" : "-") + entry;
        })));
        if (current.added) {
          newLine += lines.length;
        } else {
          oldLine += lines.length;
        }
      } else {
        if (oldRangeStart) {
          if (lines.length <= options.context * 2 && i2 < diff.length - 2) {
            var _curRange2;
            (_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray(contextLines(lines)));
          } else {
            var _curRange3;
            var contextSize = Math.min(lines.length, options.context);
            (_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray(contextLines(lines.slice(0, contextSize))));
            var hunk = {
              oldStart: oldRangeStart,
              oldLines: oldLine - oldRangeStart + contextSize,
              newStart: newRangeStart,
              newLines: newLine - newRangeStart + contextSize,
              lines: curRange
            };
            if (i2 >= diff.length - 2 && lines.length <= options.context) {
              var oldEOFNewline = /\n$/.test(oldStr);
              var newEOFNewline = /\n$/.test(newStr);
              var noNlBeforeAdds = lines.length == 0 && curRange.length > hunk.oldLines;
              if (!oldEOFNewline && noNlBeforeAdds) {
                curRange.splice(hunk.oldLines, 0, "\\ No newline at end of file");
              }
              if (!oldEOFNewline && !noNlBeforeAdds || !newEOFNewline) {
                curRange.push("\\ No newline at end of file");
              }
            }
            hunks.push(hunk);
            oldRangeStart = 0;
            newRangeStart = 0;
            curRange = [];
          }
        }
        oldLine += lines.length;
        newLine += lines.length;
      }
    };
    for (var i = 0; i < diff.length; i++) {
      _loop(i);
    }
    return {
      oldFileName,
      newFileName,
      oldHeader,
      newHeader,
      hunks
    };
  }
  function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
    var diff = structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options);
    var ret = [];
    if (oldFileName == newFileName) {
      ret.push("Index: " + oldFileName);
    }
    ret.push("===================================================================");
    ret.push("--- " + diff.oldFileName + (typeof diff.oldHeader === "undefined" ? "" : "	" + diff.oldHeader));
    ret.push("+++ " + diff.newFileName + (typeof diff.newHeader === "undefined" ? "" : "	" + diff.newHeader));
    for (var i = 0; i < diff.hunks.length; i++) {
      var hunk = diff.hunks[i];
      ret.push("@@ -" + hunk.oldStart + "," + hunk.oldLines + " +" + hunk.newStart + "," + hunk.newLines + " @@");
      ret.push.apply(ret, hunk.lines);
    }
    return ret.join("\n") + "\n";
  }
  function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {
    return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/util/array.js
var require_array3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.arrayEqual = arrayEqual;
  exports2.arrayStartsWith = arrayStartsWith;
  function arrayEqual(a, b) {
    if (a.length !== b.length) {
      return false;
    }
    return arrayStartsWith(a, b);
  }
  function arrayStartsWith(array, start) {
    if (start.length > array.length) {
      return false;
    }
    for (var i = 0; i < start.length; i++) {
      if (start[i] !== array[i]) {
        return false;
      }
    }
    return true;
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/patch/merge.js
var require_merge = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.calcLineCount = calcLineCount;
  exports2.merge = merge;
  var _create = require_create2();
  var _parse = require_parse6();
  var _array = require_array3();
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }
  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]")
      return Array.from(iter);
  }
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
        arr2[i] = arr[i];
      }
      return arr2;
    }
  }
  function calcLineCount(hunk) {
    var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines), oldLines = _calcOldNewLineCount.oldLines, newLines = _calcOldNewLineCount.newLines;
    if (oldLines !== void 0) {
      hunk.oldLines = oldLines;
    } else {
      delete hunk.oldLines;
    }
    if (newLines !== void 0) {
      hunk.newLines = newLines;
    } else {
      delete hunk.newLines;
    }
  }
  function merge(mine, theirs, base) {
    mine = loadPatch(mine, base);
    theirs = loadPatch(theirs, base);
    var ret = {};
    if (mine.index || theirs.index) {
      ret.index = mine.index || theirs.index;
    }
    if (mine.newFileName || theirs.newFileName) {
      if (!fileNameChanged(mine)) {
        ret.oldFileName = theirs.oldFileName || mine.oldFileName;
        ret.newFileName = theirs.newFileName || mine.newFileName;
        ret.oldHeader = theirs.oldHeader || mine.oldHeader;
        ret.newHeader = theirs.newHeader || mine.newHeader;
      } else if (!fileNameChanged(theirs)) {
        ret.oldFileName = mine.oldFileName;
        ret.newFileName = mine.newFileName;
        ret.oldHeader = mine.oldHeader;
        ret.newHeader = mine.newHeader;
      } else {
        ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);
        ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);
        ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);
        ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);
      }
    }
    ret.hunks = [];
    var mineIndex = 0, theirsIndex = 0, mineOffset = 0, theirsOffset = 0;
    while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {
      var mineCurrent = mine.hunks[mineIndex] || {
        oldStart: Infinity
      }, theirsCurrent = theirs.hunks[theirsIndex] || {
        oldStart: Infinity
      };
      if (hunkBefore(mineCurrent, theirsCurrent)) {
        ret.hunks.push(cloneHunk(mineCurrent, mineOffset));
        mineIndex++;
        theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;
      } else if (hunkBefore(theirsCurrent, mineCurrent)) {
        ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));
        theirsIndex++;
        mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;
      } else {
        var mergedHunk = {
          oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),
          oldLines: 0,
          newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),
          newLines: 0,
          lines: []
        };
        mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);
        theirsIndex++;
        mineIndex++;
        ret.hunks.push(mergedHunk);
      }
    }
    return ret;
  }
  function loadPatch(param, base) {
    if (typeof param === "string") {
      if (/^@@/m.test(param) || /^Index:/m.test(param)) {
        return (0, _parse.parsePatch)(param)[0];
      }
      if (!base) {
        throw new Error("Must provide a base reference or pass in a patch");
      }
      return (0, _create.structuredPatch)(void 0, void 0, base, param);
    }
    return param;
  }
  function fileNameChanged(patch) {
    return patch.newFileName && patch.newFileName !== patch.oldFileName;
  }
  function selectField(index, mine, theirs) {
    if (mine === theirs) {
      return mine;
    } else {
      index.conflict = true;
      return {
        mine,
        theirs
      };
    }
  }
  function hunkBefore(test, check2) {
    return test.oldStart < check2.oldStart && test.oldStart + test.oldLines < check2.oldStart;
  }
  function cloneHunk(hunk, offset) {
    return {
      oldStart: hunk.oldStart,
      oldLines: hunk.oldLines,
      newStart: hunk.newStart + offset,
      newLines: hunk.newLines,
      lines: hunk.lines
    };
  }
  function mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {
    var mine = {
      offset: mineOffset,
      lines: mineLines,
      index: 0
    }, their = {
      offset: theirOffset,
      lines: theirLines,
      index: 0
    };
    insertLeading(hunk, mine, their);
    insertLeading(hunk, their, mine);
    while (mine.index < mine.lines.length && their.index < their.lines.length) {
      var mineCurrent = mine.lines[mine.index], theirCurrent = their.lines[their.index];
      if ((mineCurrent[0] === "-" || mineCurrent[0] === "+") && (theirCurrent[0] === "-" || theirCurrent[0] === "+")) {
        mutualChange(hunk, mine, their);
      } else if (mineCurrent[0] === "+" && theirCurrent[0] === " ") {
        var _hunk$lines;
        (_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray(collectChange(mine)));
      } else if (theirCurrent[0] === "+" && mineCurrent[0] === " ") {
        var _hunk$lines2;
        (_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray(collectChange(their)));
      } else if (mineCurrent[0] === "-" && theirCurrent[0] === " ") {
        removal(hunk, mine, their);
      } else if (theirCurrent[0] === "-" && mineCurrent[0] === " ") {
        removal(hunk, their, mine, true);
      } else if (mineCurrent === theirCurrent) {
        hunk.lines.push(mineCurrent);
        mine.index++;
        their.index++;
      } else {
        conflict(hunk, collectChange(mine), collectChange(their));
      }
    }
    insertTrailing(hunk, mine);
    insertTrailing(hunk, their);
    calcLineCount(hunk);
  }
  function mutualChange(hunk, mine, their) {
    var myChanges = collectChange(mine), theirChanges = collectChange(their);
    if (allRemoves(myChanges) && allRemoves(theirChanges)) {
      if ((0, _array.arrayStartsWith)(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {
        var _hunk$lines3;
        (_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray(myChanges));
        return;
      } else if ((0, _array.arrayStartsWith)(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {
        var _hunk$lines4;
        (_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray(theirChanges));
        return;
      }
    } else if ((0, _array.arrayEqual)(myChanges, theirChanges)) {
      var _hunk$lines5;
      (_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray(myChanges));
      return;
    }
    conflict(hunk, myChanges, theirChanges);
  }
  function removal(hunk, mine, their, swap) {
    var myChanges = collectChange(mine), theirChanges = collectContext(their, myChanges);
    if (theirChanges.merged) {
      var _hunk$lines6;
      (_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray(theirChanges.merged));
    } else {
      conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);
    }
  }
  function conflict(hunk, mine, their) {
    hunk.conflict = true;
    hunk.lines.push({
      conflict: true,
      mine,
      theirs: their
    });
  }
  function insertLeading(hunk, insert, their) {
    while (insert.offset < their.offset && insert.index < insert.lines.length) {
      var line = insert.lines[insert.index++];
      hunk.lines.push(line);
      insert.offset++;
    }
  }
  function insertTrailing(hunk, insert) {
    while (insert.index < insert.lines.length) {
      var line = insert.lines[insert.index++];
      hunk.lines.push(line);
    }
  }
  function collectChange(state) {
    var ret = [], operation = state.lines[state.index][0];
    while (state.index < state.lines.length) {
      var line = state.lines[state.index];
      if (operation === "-" && line[0] === "+") {
        operation = "+";
      }
      if (operation === line[0]) {
        ret.push(line);
        state.index++;
      } else {
        break;
      }
    }
    return ret;
  }
  function collectContext(state, matchChanges) {
    var changes = [], merged = [], matchIndex = 0, contextChanges = false, conflicted = false;
    while (matchIndex < matchChanges.length && state.index < state.lines.length) {
      var change = state.lines[state.index], match = matchChanges[matchIndex];
      if (match[0] === "+") {
        break;
      }
      contextChanges = contextChanges || change[0] !== " ";
      merged.push(match);
      matchIndex++;
      if (change[0] === "+") {
        conflicted = true;
        while (change[0] === "+") {
          changes.push(change);
          change = state.lines[++state.index];
        }
      }
      if (match.substr(1) === change.substr(1)) {
        changes.push(change);
        state.index++;
      } else {
        conflicted = true;
      }
    }
    if ((matchChanges[matchIndex] || "")[0] === "+" && contextChanges) {
      conflicted = true;
    }
    if (conflicted) {
      return changes;
    }
    while (matchIndex < matchChanges.length) {
      merged.push(matchChanges[matchIndex++]);
    }
    return {
      merged,
      changes
    };
  }
  function allRemoves(changes) {
    return changes.reduce(function(prev, change) {
      return prev && change[0] === "-";
    }, true);
  }
  function skipRemoveSuperset(state, removeChanges, delta) {
    for (var i = 0; i < delta; i++) {
      var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);
      if (state.lines[state.index + i] !== " " + changeContent) {
        return false;
      }
    }
    state.index += delta;
    return true;
  }
  function calcOldNewLineCount(lines) {
    var oldLines = 0;
    var newLines = 0;
    lines.forEach(function(line) {
      if (typeof line !== "string") {
        var myCount = calcOldNewLineCount(line.mine);
        var theirCount = calcOldNewLineCount(line.theirs);
        if (oldLines !== void 0) {
          if (myCount.oldLines === theirCount.oldLines) {
            oldLines += myCount.oldLines;
          } else {
            oldLines = void 0;
          }
        }
        if (newLines !== void 0) {
          if (myCount.newLines === theirCount.newLines) {
            newLines += myCount.newLines;
          } else {
            newLines = void 0;
          }
        }
      } else {
        if (newLines !== void 0 && (line[0] === "+" || line[0] === " ")) {
          newLines++;
        }
        if (oldLines !== void 0 && (line[0] === "-" || line[0] === " ")) {
          oldLines++;
        }
      }
    });
    return {
      oldLines,
      newLines
    };
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/convert/dmp.js
var require_dmp = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.convertChangesToDMP = convertChangesToDMP;
  function convertChangesToDMP(changes) {
    var ret = [], change, operation;
    for (var i = 0; i < changes.length; i++) {
      change = changes[i];
      if (change.added) {
        operation = 1;
      } else if (change.removed) {
        operation = -1;
      } else {
        operation = 0;
      }
      ret.push([operation, change.value]);
    }
    return ret;
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/convert/xml.js
var require_xml = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  exports2.convertChangesToXML = convertChangesToXML;
  function convertChangesToXML(changes) {
    var ret = [];
    for (var i = 0; i < changes.length; i++) {
      var change = changes[i];
      if (change.added) {
        ret.push("<ins>");
      } else if (change.removed) {
        ret.push("<del>");
      }
      ret.push(escapeHTML(change.value));
      if (change.added) {
        ret.push("</ins>");
      } else if (change.removed) {
        ret.push("</del>");
      }
    }
    return ret.join("");
  }
  function escapeHTML(s) {
    var n = s;
    n = n.replace(/&/g, "&amp;");
    n = n.replace(/</g, "&lt;");
    n = n.replace(/>/g, "&gt;");
    n = n.replace(/"/g, "&quot;");
    return n;
  }
});

// ../../node_modules/.pnpm/diff@4.0.2/node_modules/diff/lib/index.js
var require_lib9 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {
    value: true
  });
  Object.defineProperty(exports2, "Diff", {
    enumerable: true,
    get: function get() {
      return _base.default;
    }
  });
  Object.defineProperty(exports2, "diffChars", {
    enumerable: true,
    get: function get() {
      return _character.diffChars;
    }
  });
  Object.defineProperty(exports2, "diffWords", {
    enumerable: true,
    get: function get() {
      return _word.diffWords;
    }
  });
  Object.defineProperty(exports2, "diffWordsWithSpace", {
    enumerable: true,
    get: function get() {
      return _word.diffWordsWithSpace;
    }
  });
  Object.defineProperty(exports2, "diffLines", {
    enumerable: true,
    get: function get() {
      return _line.diffLines;
    }
  });
  Object.defineProperty(exports2, "diffTrimmedLines", {
    enumerable: true,
    get: function get() {
      return _line.diffTrimmedLines;
    }
  });
  Object.defineProperty(exports2, "diffSentences", {
    enumerable: true,
    get: function get() {
      return _sentence.diffSentences;
    }
  });
  Object.defineProperty(exports2, "diffCss", {
    enumerable: true,
    get: function get() {
      return _css.diffCss;
    }
  });
  Object.defineProperty(exports2, "diffJson", {
    enumerable: true,
    get: function get() {
      return _json.diffJson;
    }
  });
  Object.defineProperty(exports2, "canonicalize", {
    enumerable: true,
    get: function get() {
      return _json.canonicalize;
    }
  });
  Object.defineProperty(exports2, "diffArrays", {
    enumerable: true,
    get: function get() {
      return _array.diffArrays;
    }
  });
  Object.defineProperty(exports2, "applyPatch", {
    enumerable: true,
    get: function get() {
      return _apply.applyPatch;
    }
  });
  Object.defineProperty(exports2, "applyPatches", {
    enumerable: true,
    get: function get() {
      return _apply.applyPatches;
    }
  });
  Object.defineProperty(exports2, "parsePatch", {
    enumerable: true,
    get: function get() {
      return _parse.parsePatch;
    }
  });
  Object.defineProperty(exports2, "merge", {
    enumerable: true,
    get: function get() {
      return _merge.merge;
    }
  });
  Object.defineProperty(exports2, "structuredPatch", {
    enumerable: true,
    get: function get() {
      return _create.structuredPatch;
    }
  });
  Object.defineProperty(exports2, "createTwoFilesPatch", {
    enumerable: true,
    get: function get() {
      return _create.createTwoFilesPatch;
    }
  });
  Object.defineProperty(exports2, "createPatch", {
    enumerable: true,
    get: function get() {
      return _create.createPatch;
    }
  });
  Object.defineProperty(exports2, "convertChangesToDMP", {
    enumerable: true,
    get: function get() {
      return _dmp.convertChangesToDMP;
    }
  });
  Object.defineProperty(exports2, "convertChangesToXML", {
    enumerable: true,
    get: function get() {
      return _xml.convertChangesToXML;
    }
  });
  var _base = _interopRequireDefault(require_base());
  var _character = require_character();
  var _word = require_word();
  var _line = require_line();
  var _sentence = require_sentence();
  var _css = require_css();
  var _json = require_json2();
  var _array = require_array2();
  var _apply = require_apply();
  var _parse = require_parse6();
  var _merge = require_merge();
  var _create = require_create2();
  var _dmp = require_dmp();
  var _xml = require_xml();
  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {default: obj};
  }
});

// ../migrate/dist/utils/customColors.js
var require_customColors = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.strongBlue = exports2.strongRed = exports2.strongGreen = void 0;
  function strongGreen(str) {
    return `[1;32;48;5;22m${str}[m`;
  }
  exports2.strongGreen = strongGreen;
  function strongRed(str) {
    return `[1;31;48;5;52m${str}[m`;
  }
  exports2.strongRed = strongRed;
  function strongBlue(str) {
    return `[1;31;48;5;52m${str}[m`;
  }
  exports2.strongBlue = strongBlue;
});

// ../migrate/dist/utils/printDatamodelDiff.js
var require_printDatamodelDiff = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.printDatamodelDiff = void 0;
  const sdk_1 = require_dist11();
  const diff_1 = require_lib9();
  const chalk_1 = __importDefault(require_source());
  const customColors_1 = require_customColors();
  const strip_ansi_1 = __importDefault(require_strip_ansi());
  function printDatamodelDiff(rawDatamodelA, rawDatamodelB) {
    const datamodelA = sdk_1.trimBlocksFromSchema(rawDatamodelA, [
      "source",
      "datasource",
      "generator"
    ]);
    if (!rawDatamodelB) {
      return sdk_1.highlightDatamodel(datamodelA);
    }
    const datamodelB = sdk_1.trimBlocksFromSchema(rawDatamodelB, [
      "source",
      "datasource",
      "generator"
    ]);
    let result = fixCurly(diff_1.diffLines(normalizeText(datamodelA), normalizeText(datamodelB)));
    result = result.map((diff2) => ({...diff2, value: sdk_1.trimNewLine(diff2.value)}));
    const diff = result.map((change, index, changes) => {
      if (change.added) {
        if (change.value.split("\n").length <= 2 && index > 0 && changes[index - 1] && changes[index - 1].removed) {
          const charChanges = diff_1.diffWords(changes[index - 1].value, change.value);
          if (charChanges.length < change.value.length - 4) {
            return charChanges.map((charChange) => {
              if (charChange.added) {
                return customColors_1.strongGreen(charChange.value);
              }
              if (charChange.removed) {
                return "";
              }
              return chalk_1.default.greenBright(charChange.value);
            }).join("");
          }
        }
        return chalk_1.default.greenBright(change.value);
      }
      if (change.removed) {
        if (change.value.split("\n").length <= 2 && index > 0 && changes[index + 1] && changes[index + 1].added && changes[index + 1].value.split("\n").length <= 2) {
          const charChanges = diff_1.diffWords(change.value, changes[index + 1].value);
          if (charChanges.length < change.value.length - 3) {
            return charChanges.map((charChange) => {
              if (charChange.removed) {
                return customColors_1.strongRed(charChange.value);
              }
              if (charChange.added) {
                return "";
              }
              return chalk_1.default.redBright(charChange.value);
            }).join("");
          }
        }
        return chalk_1.default.redBright(change.value);
      }
      return sdk_1.highlightDatamodel(sdk_1.trimBlocksFromSchema(change.value));
    }).join("\n").trim();
    return trimMultiEmptyLines(diff);
  }
  exports2.printDatamodelDiff = printDatamodelDiff;
  function trimMultiEmptyLines(str) {
    const lines = str.split("\n");
    const newLines = [];
    let i = lines.length;
    while (i--) {
      const line = lines[i];
      const trimmed = line.trim();
      if (trimmed.length > 0) {
        newLines.unshift(line);
        continue;
      }
      if (lines[i - 1] && lines[i - 1].trim().length > 0) {
        newLines.unshift(line);
      }
    }
    return newLines.join("\n");
  }
  function normalizeText(str) {
    return str.split("\n").reduce((acc, line) => {
      const trimmed = line.trim();
      if (trimmed.startsWith("#")) {
        return acc;
      }
      if (trimmed.length <= 1) {
        acc.push(trimmed);
      } else {
        acc.push(removeSpacing(line));
      }
      return acc;
    }, []).join("\n") + "\n";
  }
  function removeSpacing(line) {
    return removeDirectiveSpacing(removeValueSpacing(line));
  }
  function removeValueSpacing(line) {
    const match = /\b(\s+)\w+/g.exec(line);
    if (match && match[1].length > 1) {
      return line.slice(0, match.index) + " " + line.slice(match.index + match[1].length);
    }
    return line;
  }
  function removeDirectiveSpacing(line) {
    const match = /(\s+)@/g.exec(line);
    if (match && match[1].length > 1) {
      return line.slice(0, match.index) + " " + line.slice(match.index + match[1].length);
    }
    return line;
  }
  function fixCurly(changes) {
    return fixCurlyRemoved(fixCurlyRemovedDangling(fixCurlyAdded(changes)));
  }
  function fixCurlyAdded(changes) {
    changes.forEach((change, index) => {
      if (!change.added && !change.removed && change.value.trim() === "}" && index > 0 && changes[index - 1].added) {
        const correspondingIndex = changes.slice(0, index).findIndex((c) => {
          if (!c.added) {
            return false;
          }
          let hasCloseBeforeOpen = false;
          const lines = c.value.split("\n");
          for (const line of lines) {
            if (line.trim() === "}") {
              hasCloseBeforeOpen = true;
              break;
            }
          }
          return hasCloseBeforeOpen;
        });
        if (correspondingIndex > -1) {
          const correspondingChange = changes[correspondingIndex];
          changes[index - 1].value = changes[index - 1].value + change.value;
          changes.splice(index, 1);
          const lines = correspondingChange.value.split("\n");
          const indexOfWrongCurly = lines.findIndex((l) => l.trim() === "}");
          const newChanges = [
            {
              value: lines.slice(0, indexOfWrongCurly).join("\n"),
              added: true
            },
            {
              value: strip_ansi_1.default(lines[indexOfWrongCurly]) + "\n\n"
            },
            {
              value: lines.slice(indexOfWrongCurly + 1).join("\n"),
              added: true
            }
          ];
          changes.splice(correspondingIndex, 1, ...newChanges);
        }
      }
    });
    return changes.filter((change) => change.value !== "");
  }
  function fixCurlyRemoved(changes) {
    changes.forEach((change, index) => {
      if (!change.added && !change.removed && change.value.trim() === "}" && index > 0 && changes[index - 1].removed) {
        const correspondingIndex = changes.slice(0, index).findIndex((c) => {
          if (!c.removed) {
            return false;
          }
          let hasCloseBeforeOpen = false;
          const lines = c.value.split("\n");
          for (const line of lines) {
            if (line.trim() === "}") {
              hasCloseBeforeOpen = true;
              break;
            }
          }
          return hasCloseBeforeOpen;
        });
        if (correspondingIndex > -1) {
          const correspondingChange = changes[correspondingIndex];
          changes[index - 1].value = changes[index - 1].value + change.value;
          changes.splice(index, 1);
          const lines = correspondingChange.value.split("\n");
          const indexOfWrongCurly = lines.findIndex((l) => l.trim() === "}");
          const newChanges = [
            {
              value: lines.slice(0, indexOfWrongCurly).join("\n"),
              removed: true
            },
            {
              value: strip_ansi_1.default(lines[indexOfWrongCurly]) + "\n\n"
            },
            {
              value: lines.slice(indexOfWrongCurly + 1).join("\n"),
              removed: true
            }
          ];
          changes.splice(correspondingIndex, 1, ...newChanges);
        }
      }
    });
    return changes.filter((change) => change.value !== "");
  }
  function fixCurlyRemovedDangling(changes) {
    return changes.reduce((acc, change, index) => {
      if (change.removed && change.value.trim() === "}" && changes[index + 1] && changes[index + 1].value.startsWith("}")) {
        return acc;
      }
      if (change.added && change.value.startsWith("}")) {
        const lastValue = acc.slice(-1)[0];
        if (lastValue) {
          acc[acc.indexOf(lastValue)] = {
            ...lastValue,
            value: lastValue.value + "}"
          };
          acc.push({
            ...change,
            value: change.value.slice(2)
          });
          return acc;
        }
      }
      acc.push(change);
      return acc;
    }, []);
  }
});

// ../../node_modules/.pnpm/fs-exists-sync@0.1.0/node_modules/fs-exists-sync/index.js
var require_fs_exists_sync = __commonJS((exports2, module3) => {
  /*!
   * fs-exists-sync (https://github.com/jonschlinkert/fs-exists-sync)
   *
   * Copyright (c) 2016, Jon Schlinkert.
   * Licensed under the MIT License.
   */
  "use strict";
  var fs17 = require("fs");
  module3.exports = function(filepath) {
    try {
      (fs17.accessSync || fs17.statSync)(filepath);
      return true;
    } catch (err) {
    }
    return false;
  };
});

// ../../node_modules/.pnpm/is-extendable@0.1.1/node_modules/is-extendable/index.js
var require_is_extendable = __commonJS((exports2, module3) => {
  /*!
   * is-extendable <https://github.com/jonschlinkert/is-extendable>
   *
   * Copyright (c) 2015, Jon Schlinkert.
   * Licensed under the MIT License.
   */
  "use strict";
  module3.exports = function isExtendable(val) {
    return typeof val !== "undefined" && val !== null && (typeof val === "object" || typeof val === "function");
  };
});

// ../../node_modules/.pnpm/extend-shallow@2.0.1/node_modules/extend-shallow/index.js
var require_extend_shallow = __commonJS((exports2, module3) => {
  "use strict";
  var isObject = require_is_extendable();
  module3.exports = function extend(o) {
    if (!isObject(o)) {
      o = {};
    }
    var len = arguments.length;
    for (var i = 1; i < len; i++) {
      var obj = arguments[i];
      if (isObject(obj)) {
        assign(o, obj);
      }
    }
    return o;
  };
  function assign(a, b) {
    for (var key in b) {
      if (hasOwn(b, key)) {
        a[key] = b[key];
      }
    }
  }
  function hasOwn(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  }
});

// ../../node_modules/.pnpm/parse-passwd@1.0.0/node_modules/parse-passwd/index.js
var require_parse_passwd = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = function(content) {
    if (typeof content !== "string") {
      throw new Error("expected a string");
    }
    return content.split("\n").map(user).filter(Boolean);
  };
  function user(line, i) {
    if (!line || !line.length || line.charAt(0) === "#") {
      return null;
    }
    var fields = line.split(":");
    return {
      username: fields[0],
      password: fields[1],
      uid: fields[2],
      gid: fields[3],
      gecos: fields[4],
      homedir: fields[5],
      shell: fields[6]
    };
  }
});

// ../../node_modules/.pnpm/homedir-polyfill@1.0.3/node_modules/homedir-polyfill/polyfill.js
var require_polyfill = __commonJS((exports2, module3) => {
  "use strict";
  var fs17 = require("fs");
  var parse = require_parse_passwd();
  function homedir() {
    if (process.platform === "win32") {
      if (process.env.USERPROFILE) {
        return process.env.USERPROFILE;
      }
      if (process.env.HOMEDRIVE && process.env.HOMEPATH) {
        return process.env.HOMEDRIVE + process.env.HOMEPATH;
      }
      if (process.env.HOME) {
        return process.env.HOME;
      }
      return null;
    }
    if (process.env.HOME) {
      return process.env.HOME;
    }
    var passwd = tryReadFileSync("/etc/passwd");
    var home = find(parse(passwd), getuid());
    if (home) {
      return home;
    }
    var user = process.env.LOGNAME || process.env.USER || process.env.LNAME || process.env.USERNAME;
    if (!user) {
      return null;
    }
    if (process.platform === "darwin") {
      return "/Users/" + user;
    }
    return "/home/" + user;
  }
  function find(arr, uid) {
    var len = arr.length;
    for (var i = 0; i < len; i++) {
      if (+arr[i].uid === uid) {
        return arr[i].homedir;
      }
    }
  }
  function getuid() {
    if (typeof process.geteuid === "function") {
      return process.geteuid();
    }
    return process.getuid();
  }
  function tryReadFileSync(fp) {
    try {
      return fs17.readFileSync(fp, "utf8");
    } catch (err) {
      return "";
    }
  }
  module3.exports = homedir;
});

// ../../node_modules/.pnpm/homedir-polyfill@1.0.3/node_modules/homedir-polyfill/index.js
var require_homedir_polyfill = __commonJS((exports2, module3) => {
  "use strict";
  var os3 = require("os");
  if (typeof os3.homedir !== "undefined") {
    module3.exports = os3.homedir;
  } else {
    module3.exports = require_polyfill();
  }
});

// ../../node_modules/.pnpm/git-config-path@1.0.1/node_modules/git-config-path/index.js
var require_git_config_path = __commonJS((exports2, module3) => {
  /*!
   * git-config-path <https://github.com/jonschlinkert/git-config-path>
   *
   * Copyright (c) 2015, Jon Schlinkert.
   * Licensed under the MIT License.
   */
  "use strict";
  var path19 = require("path");
  var exists = require_fs_exists_sync();
  var extend = require_extend_shallow();
  var homedir = require_homedir_polyfill();
  module3.exports = function(type, options) {
    if (typeof type !== "string") {
      options = type;
      type = null;
    }
    var opts = extend({cwd: process.cwd()}, options);
    type = type || opts.type;
    var configPath = path19.resolve(opts.cwd, ".git/config");
    if (type === "global") {
      configPath = path19.join(homedir(), ".gitconfig");
    }
    if (!exists(configPath)) {
      if (typeof type === "string") {
        return null;
      }
      configPath = path19.join(homedir(), ".config/git/config");
    }
    return exists(configPath) ? configPath : null;
  };
});

// ../../node_modules/.pnpm/parse-git-config@1.1.1/node_modules/parse-git-config/index.js
var require_parse_git_config = __commonJS((exports2, module3) => {
  /*!
   * parse-git-config <https://github.com/jonschlinkert/parse-git-config>
   *
   * Copyright (c) 2015 Jon Schlinkert.
   * Licensed under the MIT license.
   */
  "use strict";
  var fs17 = require("fs");
  var path19 = require("path");
  var exists = require_fs_exists_sync();
  var extend = require_extend_shallow();
  var configPath = require_git_config_path();
  var ini = require_ini();
  function parse(options, cb) {
    if (typeof options === "function") {
      cb = options;
      options = {};
    }
    if (typeof cb !== "function") {
      throw new TypeError("parse-git-config async expects a callback function.");
    }
    options = options || {};
    var filepath = parse.resolve(options);
    fs17.stat(filepath, function(err, stat) {
      if (err)
        return cb(err);
      fs17.readFile(filepath, "utf8", function(err2, str) {
        if (err2)
          return cb(err2);
        var parsed = ini.parse(str);
        cb(null, parsed);
      });
    });
  }
  parse.sync = function parseSync(options) {
    options = options || {};
    var filepath = parse.resolve(options);
    if (filepath && exists(filepath)) {
      var str = fs17.readFileSync(filepath, "utf8");
      return ini.parse(str);
    }
    return {};
  };
  parse.resolve = function resolve(options) {
    if (typeof options === "string") {
      options = {type: options};
    }
    var opts = extend({cwd: process.cwd()}, options);
    var fp = opts.path || configPath(opts.type);
    return fp ? path19.resolve(opts.cwd, fp) : null;
  };
  parse.keys = function parseKeys(config) {
    var res = {};
    for (var key in config) {
      var m = /(\S+) "(.*)"/.exec(key);
      if (!m)
        continue;
      var prop = m[1];
      res[prop] = res[prop] || {};
      res[prop][m[2]] = config[key];
    }
    return res;
  };
  module3.exports = parse;
});

// ../../node_modules/.pnpm/git-user-email@0.2.2/node_modules/git-user-email/index.js
var require_git_user_email = __commonJS((exports2, module3) => {
  /*!
   * git-user-email <https://github.com/jonschlinkert/git-user-email>
   *
   * Copyright (c) 2014-2015, Jon Schlinkert.
   * Licensed under the MIT License.
   */
  "use strict";
  var fs17 = require("fs");
  var path19 = require("path");
  var gitconfig = require_git_config_path();
  var parse = require_parse_git_config();
  var extend = require_extend_shallow();
  module3.exports = function gitUserEmail(opts) {
    opts = extend({cwd: "/", path: gitconfig()}, opts);
    var config = parse.sync(opts);
    if (typeof config === "object" && config.hasOwnProperty("user")) {
      return config.user.email;
    }
    return null;
  };
});

// ../../node_modules/.pnpm/git-user-name@2.0.0/node_modules/git-user-name/index.js
var require_git_user_name = __commonJS((exports2, module3) => {
  /*!
   * git-user-name <https://github.com/jonschlinkert/git-user-name>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   */
  var gitconfig = require_git_config_path();
  var parse = require_parse_git_config();
  var extend = require_extend_shallow();
  module3.exports = function(options) {
    var gc = gitconfig(extend({type: "global"}, options && options.gitconfig));
    options = extend({cwd: "/", path: gc}, options);
    var config = parse.sync(options) || {};
    return config.user ? config.user.name : null;
  };
});

// ../migrate/dist/utils/printMigrationReadme.js
var require_printMigrationReadme = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.printMigrationReadme = void 0;
  const diff_1 = require_lib9();
  const git_user_email_1 = __importDefault(require_git_user_email());
  const git_user_name_1 = __importDefault(require_git_user_name());
  const printDatabaseSteps_1 = require_printDatabaseSteps();
  const sdk_1 = require_dist11();
  function printMigrationReadme({migrationId, lastMigrationId, datamodelA, datamodelB, databaseSteps}) {
    const user = git_user_name_1.default();
    const email = git_user_email_1.default();
    let byStr = "";
    if (user) {
      byStr = ` by ${user}`;
      if (email) {
        byStr += ` <${email}>`;
      }
    }
    return `# Migration \`${migrationId}\`

This migration has been generated${byStr} at ${new Date().toLocaleString("en-US")}.
You can check out the [state of the schema](./schema.prisma) after the migration.

## Database Steps

\`\`\`sql
${printDatabaseSteps_1.printDetailedDatabaseSteps(databaseSteps)}
\`\`\`

## Changes

\`\`\`diff
${sdk_1.maskSchema(makePatch({
      migrationId,
      lastMigrationId,
      datamodelA,
      datamodelB,
      databaseSteps
    }))}
\`\`\`

${""}
`;
  }
  exports2.printMigrationReadme = printMigrationReadme;
  function makePatch({datamodelA, datamodelB, migrationId, lastMigrationId}) {
    const patch = diff_1.createPatch("datamodel.dml", datamodelA, datamodelB);
    const header = `diff --git schema.prisma schema.prisma
migration ${lastMigrationId}..${migrationId}
`;
    return header + filterUselessLines(patch);
  }
  function filterUselessLines(patch) {
    return patch.split("\n").slice(2).filter((line) => {
      if (line.startsWith("\\ No newline")) {
        return false;
      }
      if (line.trim() === "") {
        return false;
      }
      return true;
    }).join("\n");
  }
});

// ../migrate/dist/utils/serializeFileMap.js
var require_serializeFileMap = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.serializeFileMap = void 0;
  const fs_1 = __importDefault(require("fs"));
  const util_1 = require("util");
  const path_1 = __importDefault(require("path"));
  const make_dir_1 = __importDefault(require_make_dir());
  const writeFile = util_1.promisify(fs_1.default.writeFile);
  const madeDirs = {};
  async function serializeFileMap(fileMap, dir) {
    await make_dir_1.default(dir);
    await Promise.all(Object.entries(fileMap).map(async ([fileName, file]) => {
      const filePath = path_1.default.join(dir, fileName);
      const fileDir = path_1.default.dirname(filePath);
      if (!madeDirs[fileDir]) {
        await make_dir_1.default(fileDir);
        madeDirs[fileDir];
      }
      await writeFile(filePath, file);
    }));
  }
  exports2.serializeFileMap = serializeFileMap;
});

// ../migrate/dist/utils/simpleDebounce.js
var require_simpleDebounce = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.simpleDebounce = void 0;
  function simpleDebounce3(fn) {
    let executing = false;
    let pendingExecution = null;
    return async (...args2) => {
      if (executing) {
        pendingExecution = args2;
        return null;
      }
      executing = true;
      await fn(...args2).catch((e) => console.error(e));
      if (pendingExecution) {
        await fn(...args2).catch((e) => console.error(e));
        pendingExecution = null;
      }
      executing = false;
    };
  }
  exports2.simpleDebounce = simpleDebounce3;
});

// ../migrate/dist/utils/flatMap.js
var require_flatMap2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.flatMap = void 0;
  function flatten(array) {
    return Array.prototype.concat.apply([], array);
  }
  function flatMap(array, callbackFn, thisArg) {
    return flatten(array.map(callbackFn, thisArg));
  }
  exports2.flatMap = flatMap;
});

// ../../node_modules/.pnpm/@prisma/engines-version@2.10.1-6-7d0087eadc7265e12d4b8d8c3516b02c4c965111/node_modules/@prisma/engines-version/package.json
var require_package = __commonJS((exports2, module3) => {
  module3.exports = {
    name: "@prisma/engines-version",
    version: "2.10.1-6-7d0087eadc7265e12d4b8d8c3516b02c4c965111",
    main: "index.js",
    types: "index.d.ts",
    license: "Apache-2.0",
    author: "Tim Suchanek <suchanek@prisma.io>",
    prisma: {
      enginesVersion: "7d0087eadc7265e12d4b8d8c3516b02c4c965111"
    },
    devDependencies: {
      "@types/node": "^14.11.8",
      typescript: "^4.0.3"
    },
    scripts: {
      build: "tsc -d",
      prepublishOnly: "tsc -d",
      publish: "echo $GITHUB_CONTEXT"
    },
    files: [
      "index.js",
      "index.d.ts"
    ]
  };
});

// ../../node_modules/.pnpm/@prisma/engines-version@2.10.1-6-7d0087eadc7265e12d4b8d8c3516b02c4c965111/node_modules/@prisma/engines-version/index.js
var require_engines_version = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.enginesVersion = void 0;
  exports2.enginesVersion = require_package().prisma.enginesVersion;
});

// ../migrate/dist/Migrate.js
var require_Migrate = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.Migrate = void 0;
  const sdk_1 = require_dist11();
  const chalk_1 = __importDefault(require_source());
  const child_process_1 = require("child_process");
  const cli_cursor_1 = __importDefault(require_cli_cursor());
  const dashify_1 = __importDefault(require_dashify());
  const debug_1 = __importDefault(require_dist2());
  const fs_1 = __importDefault(require("fs"));
  const globby_1 = __importDefault(require_globby());
  const indent_string_1 = __importDefault(require_indent_string());
  const log_update_1 = __importDefault(require_log_update());
  const p_map_1 = __importDefault(require_p_map());
  const path_1 = __importDefault(require("path"));
  const prompts_1 = require_prompts3();
  const rimraf_1 = __importDefault(require_rimraf());
  const strip_ansi_1 = __importDefault(require_strip_ansi());
  const util_1 = require("util");
  const theme_1 = require_theme();
  const MigrateEngine_1 = require_MigrateEngine();
  const exit_1 = require_exit();
  const formatms_1 = require_formatms();
  const groupBy_1 = require_groupBy();
  const isWatchMigrationName_1 = require_isWatchMigrationName();
  const LockFile_1 = require_LockFile();
  const now_1 = require_now2();
  const plusX_1 = __importDefault(require_plusX());
  const printDatabaseSteps_1 = require_printDatabaseSteps();
  const printDatamodelDiff_1 = require_printDatamodelDiff();
  const printMigrationReadme_1 = require_printMigrationReadme();
  const serializeFileMap_1 = require_serializeFileMap();
  const simpleDebounce_1 = require_simpleDebounce();
  const flatMap_1 = require_flatMap2();
  const engines_version_1 = require_engines_version();
  const debug3 = debug_1.default("migrate");
  const packageJson4 = eval(`require('../package.json')`);
  const del = util_1.promisify(rimraf_1.default);
  const readFile2 = util_1.promisify(fs_1.default.readFile);
  const exists = util_1.promisify(fs_1.default.exists);
  const brightGreen = chalk_1.default.rgb(127, 224, 152);
  class Migrate {
    constructor(schemaPath, enabledPreviewFeatures) {
      this.watchUp = simpleDebounce_1.simpleDebounce(async ({onWarnings, autoApprove, skipGenerate} = {
        clear: true,
        providerAliases: {}
      }) => {
        var _a, _b, _c, _d;
        const datamodel = this.getDatamodel();
        try {
          const watchMigrationName = `watch-${now_1.now()}`;
          const migration = await this.createMigration(watchMigrationName);
          const existingWatchMigrations = await this.getLocalWatchMigrations();
          if (migration && migration.warnings && migration.warnings.length > 0 && onWarnings && !autoApprove) {
            const ok = await onWarnings(migration.warnings);
            if (!ok) {
              await exit_1.exit();
            }
          }
          if (migration) {
            debug3("There is a migration we are going to apply now");
            await this.engine.applyMigration({
              force: true,
              migrationId: migration.id,
              steps: migration.datamodelSteps,
              sourceConfig: datamodel
            });
            debug3(`Applied migration`);
            const lastWatchMigration = existingWatchMigrations.length > 0 ? existingWatchMigrations[existingWatchMigrations.length - 1] : void 0;
            await this.persistWatchMigration({
              migration,
              lastMigration: lastWatchMigration
            });
          } else {
            debug3(`No migration to apply`);
          }
          if (!skipGenerate) {
            const generators = await sdk_1.getGenerators({
              schemaPath: this.schemaPath,
              printDownloadProgress: false,
              version: engines_version_1.enginesVersion,
              cliVersion: packageJson4.version
            });
            const version = packageJson4.name === "@prisma/cli" ? packageJson4.version : null;
            for (let i = 0; i < generators.length; i++) {
              const generator = generators[i];
              if (version && ((_a = generator.manifest) === null || _a === void 0 ? void 0 : _a.version) && ((_b = generator.manifest) === null || _b === void 0 ? void 0 : _b.version) !== version && ((_c = generator.options) === null || _c === void 0 ? void 0 : _c.generator.provider) === "prisma-client-js") {
                console.error(`${chalk_1.default.bold(`@prisma/client@${(_d = generator.manifest) === null || _d === void 0 ? void 0 : _d.version}`)} is not compatible with ${chalk_1.default.bold(`@prisma/cli@${version}`)}. Their versions need to be equal.`);
              }
              try {
                debug3(`Generating ${generator.manifest.prettyName}`);
                await generator.generate();
                generator.stop();
              } catch (error) {
              }
            }
          }
        } catch (error) {
        }
      });
      this.datamodelBeforeWatch = "";
      this.schemaPath = this.getSchemaPath(schemaPath);
      this.engine = new MigrateEngine_1.MigrateEngine({
        projectDir: path_1.default.dirname(this.schemaPath),
        schemaPath: this.schemaPath,
        enabledPreviewFeatures
      });
    }
    get devMigrationsDir() {
      return path_1.default.join(path_1.default.dirname(this.schemaPath), "migrations/dev");
    }
    getSchemaPath(schemaPathFromOptions) {
      const schemaPath = sdk_1.getSchemaPathSync(schemaPathFromOptions);
      if (!schemaPath) {
        throw new Error(`Could not find a ${chalk_1.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk_1.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk_1.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
      }
      return schemaPath;
    }
    getDatamodel() {
      return fs_1.default.readFileSync(this.schemaPath, "utf-8");
    }
    getSourceConfig() {
      return this.getDatamodel();
    }
    async getLockFile() {
      const lockFilePath = path_1.default.resolve(path_1.default.dirname(this.schemaPath), "migrations", "migrate.lock");
      if (await exists(lockFilePath)) {
        const file = await readFile2(lockFilePath, "utf-8");
        const lockFile = LockFile_1.deserializeLockFile(file);
        if (lockFile.remoteBranch) {
          throw new Error(`There's a merge conflict in the ${chalk_1.default.bold("migrations/migrate.lock")} file.`);
        }
        return lockFile;
      }
      return LockFile_1.initLockFile();
    }
    async push({force = false}) {
      const datamodel = this.getDatamodel();
      const {warnings, unexecutable, executedSteps} = await this.engine.schemaPush({
        force,
        schema: datamodel
      });
      return {
        executedSteps,
        warnings,
        unexecutable
      };
    }
    async tryToRunGenerate() {
      var _a;
      const message = [];
      console.info();
      log_update_1.default(`Running generate... ${chalk_1.default.dim("(Use --skip-generate to skip the generators)")}`);
      try {
        const generators = await sdk_1.getGenerators({
          schemaPath: this.schemaPath,
          printDownloadProgress: false,
          version: engines_version_1.enginesVersion,
          cliVersion: packageJson4.version
        });
        for (const generator of generators) {
          const toStr = generator.options.generator.output ? chalk_1.default.dim(` to .${path_1.default.sep}${path_1.default.relative(process.cwd(), generator.options.generator.output)}`) : "";
          const name = generator.manifest ? generator.manifest.prettyName : generator.options.generator.provider;
          log_update_1.default(`Running generate... - ${name}`);
          const before = Date.now();
          try {
            await generator.generate();
            const after = Date.now();
            const version = (_a = generator.manifest) === null || _a === void 0 ? void 0 : _a.version;
            message.push(`✔ Generated ${chalk_1.default.bold(name)}${version ? ` (version: ${version})` : ""}${toStr} in ${formatms_1.formatms(after - before)}`);
            generator.stop();
          } catch (err) {
            message.push(`${err.message}`);
            generator.stop();
          }
        }
      } catch (errGetGenerators) {
        throw errGetGenerators;
      }
      log_update_1.default(message.join("\n"));
    }
    async createMigration(migrationId) {
      const {migrationsToApply, sourceConfig} = await this.getMigrationsToApply();
      const assumeToBeApplied = flatMap_1.flatMap(migrationsToApply, (m) => m.datamodelSteps);
      const datamodel = this.getDatamodel();
      const {datamodelSteps, databaseSteps, warnings, unexecutableMigrations} = await this.engine.inferMigrationSteps({
        sourceConfig,
        datamodel,
        migrationId,
        assumeToBeApplied
      });
      if (datamodelSteps.length === 0) {
        return void 0;
      }
      return {
        id: migrationId,
        datamodel,
        datamodelSteps,
        databaseSteps,
        warnings,
        unexecutableMigrations
      };
    }
    getMigrationId(name) {
      const timestamp = now_1.now();
      return timestamp + (name ? `-${dashify_1.default(name)}` : "");
    }
    async save(migration, name, preview) {
      const migrationId = this.getMigrationId(name);
      migration.id = migrationId;
      const lockFile = await this.getLockFile();
      const {datamodel} = migration;
      const localMigrations = await this.getLocalMigrations();
      const lastMigration = localMigrations.length > 0 ? localMigrations[localMigrations.length - 1] : void 0;
      const nameStr = name ? ` --name ${chalk_1.default.bold(name)}` : "";
      const previewStr = preview ? ` --preview` : "";
      console.log(`📼  migrate save${nameStr}${previewStr}`);
      if (lastMigration) {
        const wording = preview ? `Potential datamodel changes:` : "Local datamodel Changes:";
        console.log(chalk_1.default.bold(`
${wording}
`));
      } else {
        console.log(brightGreen.bold("\nNew datamodel:\n"));
      }
      if (lastMigration) {
        console.log(printDatamodelDiff_1.printDatamodelDiff(lastMigration.datamodel, sdk_1.maskSchema(datamodel)));
      } else {
        console.log(sdk_1.highlightDatamodel(sdk_1.maskSchema(datamodel)));
      }
      lockFile.localMigrations.push(migrationId);
      const newLockFile = LockFile_1.serializeLockFile(lockFile);
      await del(this.devMigrationsDir);
      return {
        migrationId,
        files: this.getMigrationFileMap({migration, lastMigration}),
        newLockFile
      };
    }
    async getLocalWatchMigrations() {
      return this.getLocalMigrations(this.devMigrationsDir);
    }
    async down({n}) {
      await this.getLockFile();
      const before = Date.now();
      const localMigrations = await this.getLocalMigrations();
      const localWatchMigrations = await this.getLocalWatchMigrations();
      if (localWatchMigrations.length > 0) {
        throw new Error(`Before running ${chalk_1.default.yellow(sdk_1.getCommandWithExecutor("prisma migrate down --experimental"))}, please save your ${chalk_1.default.bold("dev")} changes using ${chalk_1.default.bold.greenBright(sdk_1.getCommandWithExecutor("prisma migrate save --experimental"))} and ${chalk_1.default.bold.greenBright(sdk_1.getCommandWithExecutor("prisma migrate up --experimental"))}`);
      }
      const datamodel = this.getDatamodel();
      const appliedRemoteMigrations = await this.engine.listAppliedMigrations({
        sourceConfig: datamodel
      });
      let lastAppliedIndex = -1;
      const appliedMigrations = localMigrations.filter((localMigration, index) => {
        const remoteMigration = appliedRemoteMigrations[index];
        if (remoteMigration) {
          if (localMigration.id !== remoteMigration.id && !isWatchMigrationName_1.isWatchMigrationName(remoteMigration.id)) {
            throw new Error(`Local and remote migrations are not in lockstep. We have migration ${localMigration.id} locally and ${remoteMigration.id} remotely at the same position in the history.`);
          }
          lastAppliedIndex = index;
          return true;
        }
        return false;
      });
      if (lastAppliedIndex === -1) {
        return "No migration to roll back";
      }
      if (n && n > appliedMigrations.length) {
        throw new Error(`You provided ${chalk_1.default.redBright(`n = ${chalk_1.default.bold(String(n))}`)}, but there are only ${appliedMigrations.length} applied migrations that can be rolled back. Please provide ${chalk_1.default.green(String(appliedMigrations.length))} or lower.`);
      }
      n = n || 1;
      for (let i = 0; i < n; i++) {
        const lastApplied = localMigrations[lastAppliedIndex];
        console.log(`Rolling back migration ${theme_1.blue(lastApplied.id)}`);
        const result = await this.engine.unapplyMigration({
          sourceConfig: datamodel
        });
        if (result.errors && result.errors.length > 0) {
          throw new Error(`Errors during rollback: ${JSON.stringify(result.errors)}`);
        }
        lastAppliedIndex--;
      }
      return `${process.platform === "win32" ? "" : chalk_1.default.bold.green("🚀  ")} Done with ${chalk_1.default.bold("down")} in ${formatms_1.formatms(Date.now() - before)}`;
    }
    async up({n, preview, short, verbose, autoApprove, onWarnings} = {}) {
      await this.getLockFile();
      const before = Date.now();
      const migrationsToApplyResult = await this.getMigrationsToApply();
      const {lastAppliedIndex, localMigrations, appliedRemoteMigrations, sourceConfig} = migrationsToApplyResult;
      let {migrationsToApply} = migrationsToApplyResult;
      if (typeof n === "number") {
        migrationsToApply = migrationsToApply.slice(0, n);
      }
      if (!short) {
        const previewStr = preview ? ` --preview` : "";
        console.log(`${process.platform === "win32" ? "" : "🏋️‍  "}migrate up${previewStr}
`);
        if (migrationsToApply.length === 0) {
          return "All migrations are already applied";
        }
        const lastAppliedMigration = lastAppliedIndex > -1 ? localMigrations[lastAppliedIndex] : void 0;
        const lastUnappliedMigration = migrationsToApply.slice(-1)[0];
        if (lastUnappliedMigration.datamodel.length < 1e4) {
          if (lastAppliedMigration) {
            console.log(chalk_1.default.bold("Changes to be applied:") + "\n");
            console.log(printDatamodelDiff_1.printDatamodelDiff(lastAppliedMigration.datamodel, lastUnappliedMigration.datamodel));
          } else {
            console.log(brightGreen.bold("Datamodel that will initialize the db:\n"));
            console.log(sdk_1.highlightDatamodel(lastUnappliedMigration.datamodel));
          }
        }
        console.log(`
Checking the datasource for potential data loss...`);
      }
      const firstMigrationToApplyIndex = localMigrations.indexOf(migrationsToApply[0]);
      const migrationsWithDbSteps = await this.getDatabaseSteps(localMigrations, firstMigrationToApplyIndex, sourceConfig);
      const warnings = flatMap_1.flatMap(migrationsWithDbSteps, (m) => m.warnings);
      if (warnings.length > 0 && !autoApprove) {
        if (onWarnings && typeof onWarnings === "function" && !autoApprove) {
          const ok = await onWarnings(warnings);
          if (!ok) {
            await exit_1.exit();
          }
        }
        console.log(chalk_1.default.bold(`

⚠️  There will be data loss:
`));
        for (const warning of warnings) {
          console.log(`  • ${warning.description}`);
        }
        console.log();
        if (!autoApprove && !onWarnings) {
          const response = await prompts_1.prompt({
            type: "confirm",
            name: "value",
            message: `Are you sure you want to apply this change?`
          });
          if (!response.value) {
            await exit_1.exit();
          }
        } else {
          console.log(`As ${chalk_1.default.bold("--auto-approve")} is provided, the destructive changes are accepted.
`);
        }
      }
      const progressRenderer = new ProgressRenderer(migrationsWithDbSteps, short || false);
      progressRenderer.render();
      if (preview) {
        progressRenderer.done();
        return `
To apply the migrations, run ${chalk_1.default.greenBright(sdk_1.getCommandWithExecutor("prisma migrate up --experimental"))}
`;
      }
      for (let i = 0; i < migrationsToApply.length; i++) {
        const migrationToApply = migrationsToApply[i];
        const {id, datamodelSteps} = migrationToApply;
        const result = await this.engine.applyMigration({
          force: true,
          migrationId: id,
          steps: datamodelSteps,
          sourceConfig
        });
        await new Promise((r) => setTimeout(r, 50));
        migrationsWithDbSteps[i].databaseSteps = result.databaseSteps;
        const totalSteps = result.databaseSteps.length;
        let progress;
        progressLoop:
          while (progress = await this.engine.migrationProgess({
            migrationId: id,
            sourceConfig
          })) {
            if (progress.status === "MigrationInProgress") {
              progressRenderer.setProgress(i, progress.applied / totalSteps);
            }
            if (progress.status === "MigrationSuccess") {
              progressRenderer.setProgress(i, 1);
              break progressLoop;
            }
            if (progress.status === "RollbackSuccess") {
              cli_cursor_1.default.show();
              throw new Error(`Rolled back migration. ${JSON.stringify(progress)}`);
            }
            if (progress.status === "RollbackFailure") {
              cli_cursor_1.default.show();
              throw new Error(`Failed to roll back migration. ${JSON.stringify(progress)}`);
            }
            await new Promise((r) => setTimeout(r, 1500));
          }
        if (migrationToApply.afterFilePath) {
          const after = migrationToApply.afterFilePath;
          if (process.platform !== "win32") {
            plusX_1.default(after);
          }
          const child = child_process_1.spawn(after, {
            env: {
              ...process.env,
              FORCE_COLOR: "1"
            }
          });
          child.on("error", (e) => {
            console.error(e);
          });
          child.stderr.on("data", (d) => {
            console.log(`stderr ${d.toString()}`);
          });
          progressRenderer.showLogs(path_1.default.basename(after), child.stdout);
          await new Promise((r) => {
            child.on("close", () => {
              r();
            });
            child.on("exit", () => {
              r();
            });
          });
        }
      }
      progressRenderer.done();
      if (verbose) {
        console.log(chalk_1.default.bold(`
SQL Commands:
`));
        console.log(printDatabaseSteps_1.highlightMigrationsSQL(migrationsWithDbSteps));
        console.log("\n");
      }
      return `
${process.platform === "win32" ? "" : chalk_1.default.bold.green("🚀  ")}  Done with ${migrationsToApply.length} migration${migrationsToApply.length > 1 ? "s" : ""} in ${formatms_1.formatms(Date.now() - before)}.
`;
    }
    stop() {
      this.engine.stop();
    }
    getMigrationFileMap({migration, lastMigration}) {
      const {datamodelSteps, datamodel} = migration;
      return {
        ["steps.json"]: JSON.stringify({version: "0.3.14-fixed", steps: datamodelSteps}, null, 2),
        ["schema.prisma"]: sdk_1.maskSchema(datamodel),
        ["README.md"]: printMigrationReadme_1.printMigrationReadme({
          migrationId: migration.id,
          lastMigrationId: lastMigration ? lastMigration.id : "",
          datamodelA: lastMigration ? lastMigration.datamodel : "",
          datamodelB: datamodel,
          databaseSteps: migration.databaseSteps
        })
      };
    }
    async persistWatchMigration(options) {
      const fileMap = this.getMigrationFileMap(options);
      await serializeFileMap_1.serializeFileMap(fileMap, path_1.default.join(this.devMigrationsDir, options.migration.id));
    }
    async getLocalMigrations(migrationsDir = path_1.default.join(path_1.default.dirname(this.schemaPath), "migrations")) {
      if (!await exists(migrationsDir)) {
        return [];
      }
      const migrationSteps = await globby_1.default([
        "**/steps.json",
        "**/schema.prisma",
        "**/datamodel.prisma",
        "**/after.sh",
        "**/before.sh",
        "**/after.ts",
        "**/before.ts",
        "!dev"
      ], {
        cwd: migrationsDir
      }).then((files) => Promise.all(files.map(async (fileName) => ({
        fileName: fileName.split("/")[1],
        migrationId: fileName.split("/")[0],
        file: await readFile2(path_1.default.join(migrationsDir, fileName), "utf-8")
      }))));
      migrationSteps.sort((a, b) => a.migrationId < b.migrationId ? -1 : 1);
      const groupedByMigration = groupBy_1.groupBy(migrationSteps, (step) => step.migrationId);
      return Object.entries(groupedByMigration).map(([migrationId, files]) => {
        const stepsFile = files.find((f) => f.fileName === "steps.json");
        const datamodelFile = files.find((f) => f.fileName === "datamodel.prisma" || f.fileName === "schema.prisma");
        const afterFile = files.find((f) => f.fileName === "after.sh" || f.fileName === "after.ts");
        const beforeFile = files.find((f) => f.fileName === "before.sh" || f.fileName === "before.ts");
        const stepsFileJson = JSON.parse(stepsFile.file);
        if (Array.isArray(stepsFileJson)) {
          throw new Error(`We changed the steps.json format - please delete your migrations folder and run ${chalk_1.default.greenBright(sdk_1.getCommandWithExecutor("prisma migrate save --experimental"))} again`);
        }
        if (!stepsFileJson.steps) {
          throw new Error(`${stepsFile.fileName} is expected to have a .steps property`);
        }
        return {
          id: migrationId,
          datamodelSteps: stepsFileJson.steps,
          datamodel: datamodelFile.file,
          afterFilePath: afterFile ? path_1.default.resolve(migrationsDir, migrationId, afterFile.fileName) : void 0,
          beforeFilePath: beforeFile ? path_1.default.resolve(migrationsDir, migrationId, beforeFile.fileName) : void 0
        };
      });
    }
    async getDatabaseSteps(localMigrations, fromIndex, sourceConfig) {
      const migrationsWithDatabaseSteps = await p_map_1.default(localMigrations, async (migration, index) => {
        if (index < fromIndex) {
          return {
            ...migration,
            databaseSteps: [],
            warnings: [],
            unexecutableMigrations: []
          };
        }
        const stepsUntilNow = index > 0 ? flatMap_1.flatMap(localMigrations.slice(0, index), (m) => m.datamodelSteps) : [];
        const input = {
          assumeToBeApplied: stepsUntilNow,
          stepsToApply: migration.datamodelSteps,
          sourceConfig
        };
        const {databaseSteps, warnings, unexecutableMigrations} = await this.engine.calculateDatabaseSteps(input);
        return {
          ...migration,
          databaseSteps,
          warnings,
          unexecutableMigrations
        };
      }, {concurrency: 1});
      return migrationsWithDatabaseSteps.slice(fromIndex);
    }
    async getMigrationsToApply() {
      const localMigrations = await this.getLocalMigrations();
      const sourceConfig = this.getSourceConfig();
      const appliedRemoteMigrations = await this.engine.listAppliedMigrations({
        sourceConfig
      });
      const appliedRemoteMigrationsWithoutWatch = appliedRemoteMigrations.filter((m) => !isWatchMigrationName_1.isWatchMigrationName(m.id));
      if (appliedRemoteMigrationsWithoutWatch.length > localMigrations.length) {
        const localMigrationIds = localMigrations.map((m) => m.id);
        const remoteMigrationIds = appliedRemoteMigrationsWithoutWatch.map((m) => m.id);
        throw new Error(`There are more migrations in the database than locally. This must not happen.
Local migration ids: ${localMigrationIds.length > 0 ? localMigrationIds.join(", ") : `(empty)`}.
Remote migration ids: ${remoteMigrationIds.join(", ")}`);
      }
      let lastAppliedIndex = -1;
      const migrationsToApply = localMigrations.filter((localMigration, index) => {
        const remoteMigration = appliedRemoteMigrationsWithoutWatch[index];
        if (remoteMigration) {
          if (localMigration.id !== remoteMigration.id && !isWatchMigrationName_1.isWatchMigrationName(remoteMigration.id)) {
            throw new Error(`Local and remote migrations are not in lockstep. We have migration ${localMigration.id} locally and ${remoteMigration.id} remotely at the same position in the history.`);
          }
          if (!isWatchMigrationName_1.isWatchMigrationName(remoteMigration.id)) {
            lastAppliedIndex = index;
            return false;
          }
        }
        return true;
      });
      return {
        localMigrations,
        lastAppliedIndex,
        migrationsToApply,
        appliedRemoteMigrations,
        sourceConfig
      };
    }
  }
  exports2.Migrate = Migrate;
  class ProgressRenderer {
    constructor(migrations, silent) {
      this.migrations = migrations;
      this.currentIndex = 0;
      this.currentProgress = 0;
      this.statusWidth = 6;
      this.logsString = "";
      cli_cursor_1.default.hide();
      this.silent = silent;
    }
    setMigrations(migrations) {
      this.migrations = migrations;
      this.render();
    }
    setProgress(index, progressPercentage) {
      const progress = Math.min(Math.floor(progressPercentage * this.statusWidth), this.statusWidth);
      this.currentIndex = index;
      this.currentProgress = progress;
      this.render();
    }
    showLogs(name, stream) {
      this.logsName = name;
      this.logsString = "";
      stream.on("data", (data) => {
        this.logsString += data.toString();
        this.render();
      });
    }
    render() {
      if (this.silent) {
        return;
      }
      const maxMigrationLength = this.migrations.reduce((acc, curr) => Math.max(curr.id.length, acc), 0);
      let maxStepLength = 0;
      const rows = this.migrations.map((m) => {
        const steps = printDatabaseSteps_1.printDatabaseStepsOverview(m.databaseSteps);
        maxStepLength = Math.max(strip_ansi_1.default(steps).length, maxStepLength);
        let scripts = "";
        if (m.beforeFilePath || m.afterFilePath) {
          if (m.beforeFilePath && m.afterFilePath) {
            const beforeStr = m.beforeFilePath ? `└─ ${path_1.default.basename(m.beforeFilePath)}
` : "";
            const afterStr = m.afterFilePath ? `
└─ ${path_1.default.basename(m.afterFilePath)}` : "";
            scripts = "\n" + indent_string_1.default(`${beforeStr}└─ ${theme_1.blue("Datamodel migration")}${afterStr}`, 2);
          } else {
            const beforeStr = m.beforeFilePath ? `└─ ${path_1.default.basename(m.beforeFilePath)}
` : "";
            const afterStr = m.afterFilePath ? `└─ ${path_1.default.basename(m.afterFilePath)}` : "";
            scripts = "\n" + indent_string_1.default(`${beforeStr}${afterStr}`, 2);
          }
        }
        return {
          line: `${theme_1.blue(m.id)}${" ".repeat(maxMigrationLength - m.id.length + 2)}${steps}`,
          scripts
        };
      }).map((m, index) => {
        const maxLength = maxStepLength + maxMigrationLength;
        const paddingLeft = maxLength - strip_ansi_1.default(m.line).length + 4;
        const newLine = m.line + " ".repeat(paddingLeft) + "  ";
        if (this.currentIndex > index || this.currentIndex === index && this.currentProgress === this.statusWidth) {
          return newLine + `Done ${process.platform === "win32" ? "" : chalk_1.default.bold.green("🚀  ")}` + m.scripts;
        } else if (this.currentIndex === index) {
          return newLine + "■".repeat(this.currentProgress) + m.scripts;
        }
        return newLine;
      }).join("\n");
      const column1 = "Migration";
      const column2 = "Database actions";
      const column3 = "Status";
      const header = chalk_1.default.underline(column1) + " ".repeat(Math.max(0, maxMigrationLength - column1.length)) + "  " + chalk_1.default.underline(column2) + " ".repeat(Math.max(0, maxStepLength - column2.length + 2)) + "  " + chalk_1.default.underline(column3) + "\n\n";
      const changeOverview = header + rows;
      let str = "";
      str += chalk_1.default.bold("\nDatabase Changes:\n\n");
      str += changeOverview;
      const migrationsIdsPaths = this.migrations.reduce((acc, m) => {
        acc += `
      ${sdk_1.link(`./migrations/${m.id}/README.md`)}
`;
        return acc;
      }, "");
      str += chalk_1.default.dim(`

You can get the detailed db changes with ${chalk_1.default.greenBright(sdk_1.getCommandWithExecutor("prisma migrate up --experimental --verbose"))}
Or read about them here:${migrationsIdsPaths}`);
      if (this.logsName && this.logsString.length > 0) {
        str += "\n\n" + sdk_1.drawBox({
          height: Math.min(15, process.stdout.rows || 15),
          width: process.stdout.columns || 40,
          str: this.logsString,
          title: this.logsName
        }) + "\n";
      }
      log_update_1.default(str);
    }
    done() {
      cli_cursor_1.default.show();
    }
  }
});

// ../migrate/dist/utils/occupyPath.js
var require_occupyPath = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.occupyPath = exports2.getNextFreePort = void 0;
  const chalk_1 = __importDefault(require_source());
  const net_1 = __importDefault(require("net"));
  const p_map_1 = __importDefault(require_p_map());
  const ports = Array.from({length: 20}, (v, k) => k + 8430);
  const portList = [
    10405,
    10119,
    10785,
    8419,
    8420,
    8421,
    8422,
    8423,
    8424,
    8425,
    8426,
    8427,
    8428,
    8429,
    ...ports
  ];
  const isPortFree = (port) => new Promise((resolve) => {
    const server = net_1.default.createServer();
    server.on("error", () => resolve(false));
    server.listen(port, "127.0.0.1", () => {
      server.close(() => {
        resolve(true);
      });
    });
  });
  const fetchPath = (port) => new Promise((resolve) => {
    let resolved = false;
    const client = new net_1.default.Socket();
    client.connect(port);
    client.on("error", () => {
      resolve(null);
    });
    client.on("data", (data) => {
      try {
        const result = JSON.parse(data.toString());
        if (result && result.prismaProjectPath) {
          resolved = true;
          resolve(result.prismaProjectPath);
        }
      } catch (e) {
        resolved = true;
        resolve(null);
      } finally {
        client.destroy();
      }
    });
    setTimeout(() => {
      if (!resolved) {
        client.destroy();
        resolve(null);
      }
    }, 3e3);
  });
  function startServer(projectPath, port) {
    const server = net_1.default.createServer((socket) => {
      socket.write(JSON.stringify({prismaProjectPath: projectPath}));
      socket.pipe(socket);
    });
    server.listen(port);
    return () => {
      server.close();
    };
  }
  async function getNextFreePort(projectPath) {
    const portOccupancy = await p_map_1.default(portList, async (port) => ({port, free: await isPortFree(port)}), {
      concurrency: 15
    });
    const usedPorts = portOccupancy.filter((o) => !o.free);
    const nextFreePort = portOccupancy.find((p) => p.free);
    if (usedPorts.length === portList.length || !nextFreePort) {
      throw new Error(`prisma migrate could not start, as all port of ${portList.join(", ")} are used. Please free one of them.`);
    }
    const potentialPaths = await Promise.all(usedPorts.map((usedPort) => fetchPath(usedPort.port)));
    const paths = potentialPaths.filter((p) => p);
    if (paths.includes(projectPath)) {
      return void 0;
    }
    return nextFreePort.port;
  }
  exports2.getNextFreePort = getNextFreePort;
  async function occupyPath(projectPath) {
    const nextFreePort = await getNextFreePort(projectPath);
    if (typeof nextFreePort !== "number") {
      throw new Error(`There is already another ${chalk_1.default.bold("prisma dev")} command running in ${chalk_1.default.underline(projectPath)}`);
    }
    return startServer(projectPath, nextFreePort);
  }
  exports2.occupyPath = occupyPath;
});

// ../migrate/dist/commands/MigrateCommand.js
var require_MigrateCommand = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.MigrateCommand = void 0;
  const sdk_1 = require_dist11();
  const chalk_1 = __importDefault(require_source());
  const occupyPath_1 = require_occupyPath();
  class MigrateCommand2 {
    constructor(cmds) {
      this.cmds = cmds;
    }
    static new(cmds) {
      return new MigrateCommand2(cmds);
    }
    async parse(argv) {
      const args2 = sdk_1.arg(argv, {
        "--help": Boolean,
        "-h": "--help",
        "--experimental": Boolean,
        "--telemetry-information": String
      });
      if (sdk_1.isError(args2)) {
        return this.help(args2.message);
      }
      if (args2._.length === 0 || args2["--help"]) {
        return this.help();
      }
      const cmd = this.cmds[args2._[0]];
      if (cmd) {
        const nextFreePort = await occupyPath_1.getNextFreePort(process.cwd());
        if (typeof nextFreePort !== "number") {
          const command = `prisma migrate ${argv.join(" ")}`;
          throw new Error(`Cannot run ${chalk_1.default.bold(command)} because there is a ${chalk_1.default.bold("prisma dev")} command running in this directory.
Please ${chalk_1.default.rgb(228, 155, 15)(`stop ${chalk_1.default.bold("prisma dev")} first`)}, then try ${chalk_1.default.greenBright.bold(command)} again`);
        }
        const argsForCmd = args2["--experimental"] ? [...args2._.slice(1), `--experimental=${args2["--experimental"]}`] : args2._.slice(1);
        return cmd.parse(argsForCmd);
      }
      return sdk_1.unknownCommand(MigrateCommand2.help, args2._[0]);
    }
    help(error) {
      if (error) {
        return new sdk_1.HelpError(`
${chalk_1.default.bold.red(`!`)} ${error}
${MigrateCommand2.help}`);
      }
      return MigrateCommand2.help;
    }
  }
  exports2.MigrateCommand = MigrateCommand2;
  MigrateCommand2.help = sdk_1.format(`
    ${process.platform === "win32" ? "" : chalk_1.default.bold("🏋️  ")}Migrate your database with confidence

    ${chalk_1.default.bold.yellow("WARNING")} ${chalk_1.default.bold("Prisma's migration functionality is currently in an experimental state.")}
    ${chalk_1.default.dim("When using any of the commands below you need to explicitly opt-in via the --experimental flag.")}

    ${chalk_1.default.bold("Usage")}

      With an existing schema.prisma:
      ${chalk_1.default.dim("$")} prisma migrate [command] [options] --experimental

      Or specify a schema:
      ${chalk_1.default.dim("$")} prisma migrate [command] [options] --experimental --schema=./schema.prisma

    ${chalk_1.default.bold("Options")}

      -h, --help   Display this help message

    ${chalk_1.default.bold("Commands")}

        save   Create a new migration
          up   Migrate your database up
        down   Migrate your database down

    ${chalk_1.default.bold("Examples")}

      Create new migration
      ${chalk_1.default.dim("$")} prisma migrate save --experimental

      Migrate up to the latest datamodel
      ${chalk_1.default.dim("$")} prisma migrate up --experimental

      Preview the next migration without migrating
      ${chalk_1.default.dim("$")} prisma migrate up --preview --experimental

      Rollback a migration
      ${chalk_1.default.dim("$")} prisma migrate down 1 --experimental

      Get more help on a migrate up
      ${chalk_1.default.dim("$")} prisma migrate up -h --experimental
  `);
});

// ../migrate/dist/utils/ensureDatabaseExists.js
var require_ensureDatabaseExists = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getDbinfoFromCredentials = exports2.getDbLocation = exports2.askToCreateDb = exports2.interactivelyCreateDatabase = exports2.ensureDatabaseExists = void 0;
  const sdk_1 = require_dist11();
  const sdk_2 = require_dist11();
  const chalk_1 = __importDefault(require_source());
  const sdk_3 = require_dist11();
  const prompts_1 = __importDefault(require_prompts3());
  async function ensureDatabaseExists(action, forceCreate = false, schemaPath) {
    const datamodel = await sdk_1.getSchema(schemaPath);
    const config = await sdk_2.getConfig({datamodel});
    const activeDatasource = config.datasources[0];
    if (!activeDatasource) {
      throw new Error(`Couldn't find a datasource in the schema.prisma file`);
    }
    if (activeDatasource.provider[0] === "sqlserver") {
      throw new Error(`sqlserver can't be migrated yet`);
    }
    const schemaDir = await sdk_1.getSchemaDir(schemaPath);
    const canConnect = await sdk_3.canConnectToDatabase(activeDatasource.url.value, schemaDir);
    if (canConnect === true) {
      return;
    }
    const {code, message} = canConnect;
    if (code !== "P1003") {
      throw new Error(`${code}: ${message}`);
    }
    if (!schemaDir) {
      throw new Error(`Could not locate ${schemaPath || "schema.prisma"}`);
    }
    if (forceCreate) {
      await sdk_3.createDatabase(activeDatasource.url.value, schemaDir);
    } else {
      await interactivelyCreateDatabase(activeDatasource.url.value, action, schemaDir);
    }
  }
  exports2.ensureDatabaseExists = ensureDatabaseExists;
  async function interactivelyCreateDatabase(connectionString, action, schemaDir) {
    await askToCreateDb(connectionString, action, schemaDir);
  }
  exports2.interactivelyCreateDatabase = interactivelyCreateDatabase;
  async function askToCreateDb(connectionString, action, schemaDir) {
    const credentials = sdk_3.uriToCredentials(connectionString);
    const dbName = credentials.database;
    const dbType = credentials.type === "mysql" ? "MySQL" : credentials.type === "postgresql" ? "PostgreSQL" : credentials.type === "sqlite" ? "SQLite" : credentials.type;
    const schemaWord = "database";
    const message = `You are trying to ${action} a migration for ${dbType} ${schemaWord} ${chalk_1.default.bold(dbName)}.
A ${schemaWord} with that name doesn't exist at ${chalk_1.default.bold(getDbLocation(credentials))}
`;
    console.log();
    const response = await prompts_1.default({
      type: "select",
      name: "value",
      message,
      initial: 0,
      choices: [
        {
          title: "Yes",
          value: true,
          description: `Create new ${dbType} ${schemaWord} ${chalk_1.default.bold(dbName)}`
        },
        {
          title: "No",
          value: false,
          description: `Don't create the ${schemaWord}`
        }
      ]
    });
    if (response.value) {
      await sdk_3.createDatabase(connectionString, schemaDir);
    } else {
      process.exit(0);
    }
  }
  exports2.askToCreateDb = askToCreateDb;
  function getDbLocation(credentials) {
    if (credentials.type === "sqlite") {
      return credentials.uri;
    }
    return `${credentials.host}:${credentials.port}`;
  }
  exports2.getDbLocation = getDbLocation;
  function getDbinfoFromCredentials(credentials) {
    const dbName = credentials.database;
    let dbType;
    switch (credentials.type) {
      case "mysql":
        dbType = `MySQL`;
        break;
      case "postgresql":
        dbType = `PostgreSQL`;
        break;
      case "sqlite":
        dbType = `SQLite`;
        break;
      case "mssql":
        dbType = `MSSQL`;
        break;
    }
    const schemaWord = "database";
    return {
      dbName,
      dbType,
      schemaWord
    };
  }
  exports2.getDbinfoFromCredentials = getDbinfoFromCredentials;
});

// ../migrate/dist/utils/experimental.js
var require_experimental = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.PreviewFlagError = exports2.ExperimentalFlagError = void 0;
  const chalk_1 = __importDefault(require_source());
  class ExperimentalFlagError extends Error {
    constructor() {
      super(`Please provide the ${chalk_1.default.green("--experimental")} flag to use this command.`);
    }
  }
  exports2.ExperimentalFlagError = ExperimentalFlagError;
  class PreviewFlagError extends Error {
    constructor() {
      super(`This feature is currently in Preview. There may be bugs and it's not recommended to use it in production environments.
      Please provide the ${chalk_1.default.green("--preview-feature")} flag to use this command.`);
    }
  }
  exports2.PreviewFlagError = PreviewFlagError;
});

// ../migrate/dist/utils/printMigrationId.js
var require_printMigrationId = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.printMigrationId = void 0;
  const chalk_1 = __importDefault(require_source());
  function printMigrationId(migrationId) {
    const words = migrationId.split("-");
    if (words.length === 1) {
      return chalk_1.default.cyan.bold(migrationId);
    }
    return `${words[0]}-${chalk_1.default.cyan.bold(words.slice(1).join("-"))}`;
  }
  exports2.printMigrationId = printMigrationId;
});

// ../migrate/dist/utils/printFiles.js
var require_printFiles = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.printFiles = void 0;
  const indent_string_1 = __importDefault(require_indent_string());
  const printMigrationId_1 = require_printMigrationId();
  function printFiles(printPath, files) {
    const fileNames = Object.keys(files);
    const folders = printPath.split("/");
    const deepFolder = folders[1];
    return `${folders[0]}/
  └─ ${`${printMigrationId_1.printMigrationId(deepFolder)}/`}
${indent_string_1.default(fileNames.map((f) => `└─ ${f}`).join("\n"), 4)}`;
  }
  exports2.printFiles = printFiles;
});

// ../migrate/dist/commands/MigrateSave.js
var require_MigrateSave = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.MigrateSave = void 0;
  const sdk_1 = require_dist11();
  const chalk_1 = __importDefault(require_source());
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const prompts_1 = __importDefault(require_prompts3());
  const util_1 = require("util");
  const Migrate_1 = require_Migrate();
  const ensureDatabaseExists_1 = require_ensureDatabaseExists();
  const experimental_1 = require_experimental();
  const printFiles_1 = require_printFiles();
  const printMigrationId_1 = require_printMigrationId();
  const serializeFileMap_1 = require_serializeFileMap();
  const writeFile = util_1.promisify(fs_1.default.writeFile);
  class MigrateSave2 {
    static new() {
      return new MigrateSave2();
    }
    async parse(argv) {
      const args2 = sdk_1.arg(argv, {
        "--help": Boolean,
        "-h": "--help",
        "--name": String,
        "-n": "--name",
        "--preview": Boolean,
        "-p": "--preview",
        "--create-db": Boolean,
        "-c": "--create-db",
        "--experimental": Boolean,
        "--schema": String,
        "--telemetry-information": String
      });
      if (sdk_1.isError(args2)) {
        return this.help(args2.message);
      }
      if (args2["--help"]) {
        return this.help();
      }
      if (!args2["--experimental"]) {
        throw new experimental_1.ExperimentalFlagError();
      }
      const preview = args2["--preview"] || false;
      const schemaPath = await sdk_1.getSchemaPath(args2["--schema"]);
      if (!schemaPath) {
        throw new Error(`Could not find a ${chalk_1.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk_1.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk_1.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
      }
      console.log(chalk_1.default.dim(`Prisma schema loaded from ${path_1.default.relative(process.cwd(), schemaPath)}`));
      await ensureDatabaseExists_1.ensureDatabaseExists("create", args2["--create-db"], schemaPath);
      const migrate2 = new Migrate_1.Migrate(schemaPath);
      const migration = await migrate2.createMigration("DUMMY_NAME");
      if (!migration) {
        migrate2.stop();
        return `Everything up-to-date
`;
      }
      const name = preview ? args2["--name"] : await this.name(args2["--name"]);
      const {files, newLockFile, migrationId} = await migrate2.save(migration, name, preview);
      migrate2.stop();
      if (migration.unexecutableMigrations && migration.unexecutableMigrations.length > 0) {
        const messages = [];
        messages.push(`${chalk_1.default.bold("\n\n⚠️ We found migration(s) that cannot be executed:\n")}`);
        for (const item of migration.unexecutableMigrations) {
          messages.push(`${chalk_1.default(`  • ${item.description}`)}`);
        }
        console.log();
        throw new Error(`${messages.join("\n")}
`);
      }
      if (migration.warnings && migration.warnings.length > 0) {
        console.log(chalk_1.default.bold(`

⚠️  There might be data loss when applying the migration:
`));
        for (const warning of migration.warnings) {
          console.log(chalk_1.default(`  • ${warning.description}`));
        }
        console.log();
      }
      if (preview) {
        return `
Run ${chalk_1.default.greenBright(sdk_1.getCommandWithExecutor("prisma migrate save --name MIGRATION_NAME --experimental"))} to create the migration
`;
      }
      await sdk_1.getSchema(schemaPath);
      const schemaDir = await sdk_1.getSchemaDir(schemaPath);
      const migrationsDir = path_1.default.join(schemaDir, "migrations", migrationId);
      await serializeFileMap_1.serializeFileMap(files, migrationsDir);
      const lockFilePath = path_1.default.join(schemaDir, "migrations", "migrate.lock");
      await writeFile(lockFilePath, newLockFile);
      return `
Prisma Migrate just created your migration ${printMigrationId_1.printMigrationId(migrationId)} in

${chalk_1.default.dim(printFiles_1.printFiles(`migrations/${migrationId}`, files))}

Run ${chalk_1.default.greenBright(sdk_1.getCommandWithExecutor("prisma migrate up --experimental"))} to apply the migration
`;
    }
    async name(name) {
      if (name === "") {
        return void 0;
      }
      if (name) {
        return name;
      }
      const response = await prompts_1.default({
        type: "text",
        name: "name",
        message: `Name of migration`
      });
      return response.name || void 0;
    }
    help(error) {
      if (error) {
        return new sdk_1.HelpError(`
${chalk_1.default.bold.red(`!`)} ${error}
${MigrateSave2.help}`);
      }
      return MigrateSave2.help;
    }
  }
  exports2.MigrateSave = MigrateSave2;
  MigrateSave2.help = sdk_1.format(`
    Save a migration

    ${chalk_1.default.bold.yellow("WARNING")} ${chalk_1.default.bold("Prisma's migration functionality is currently in an experimental state.")}
    ${chalk_1.default.dim("When using any of the commands below you need to explicitly opt-in via the --experimental flag.")}

    ${chalk_1.default.bold("Usage")}

      ${chalk_1.default.dim("$")} prisma migrate save [options] --experimental

    ${chalk_1.default.bold("Options")}

      -h, --help       Displays this help message
      -n, --name       Name the migration
      -c, --create-db  Create the database in case it doesn't exist
      -p, --preview    Get a preview of which migration would be created next

    ${chalk_1.default.bold("Examples")}

      Create a new migration
      ${chalk_1.default.dim("$")} prisma migrate save --experimental

      Create a new migration by name
      ${chalk_1.default.dim("$")} prisma migrate save --name "add unique to email" --experimental

  `);
});

// ../migrate/dist/commands/MigrateUp.js
var require_MigrateUp = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.MigrateUp = void 0;
  const sdk_1 = require_dist11();
  const chalk_1 = __importDefault(require_source());
  const path_1 = __importDefault(require("path"));
  const Migrate_1 = require_Migrate();
  const ensureDatabaseExists_1 = require_ensureDatabaseExists();
  const experimental_1 = require_experimental();
  class MigrateUp2 {
    static new() {
      return new MigrateUp2();
    }
    async parse(argv) {
      const args2 = sdk_1.arg(argv, {
        "--help": Boolean,
        "-h": "--help",
        "--preview": Boolean,
        "-p": "--preview",
        "--verbose": Boolean,
        "-v": "--verbose",
        "--create-db": Boolean,
        "-c": "--create-db",
        "--auto-approve": Boolean,
        "--experimental": Boolean,
        "--schema": String,
        "--telemetry-information": String
      }, false);
      if (sdk_1.isError(args2)) {
        return this.help(args2.message);
      }
      if (args2["--help"]) {
        return this.help();
      }
      if (!args2["--experimental"]) {
        throw new experimental_1.ExperimentalFlagError();
      }
      const schemaPath = await sdk_1.getSchemaPath(args2["--schema"]);
      if (!schemaPath) {
        throw new Error(`Could not find a ${chalk_1.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk_1.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk_1.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
      }
      console.log(chalk_1.default.dim(`Prisma schema loaded from ${path_1.default.relative(process.cwd(), schemaPath)}`));
      const migrate2 = new Migrate_1.Migrate(schemaPath);
      const options = {
        preview: args2["--preview"],
        verbose: args2["--verbose"],
        autoApprove: args2["--auto-approve"]
      };
      if (args2._.length > 0) {
        const thisArg = args2._[0];
        const maybeNumber = parseInt(thisArg, 10);
        if (isNaN(maybeNumber) || typeof maybeNumber !== "number") {
          throw new Error(`"${thisArg}" is not a valid migration step number`);
        } else {
          options.n = maybeNumber;
        }
      }
      await ensureDatabaseExists_1.ensureDatabaseExists("apply", args2["--create-db"], schemaPath);
      const result = await migrate2.up(options);
      migrate2.stop();
      return result;
    }
    help(error) {
      if (error) {
        return new sdk_1.HelpError(`
${chalk_1.default.bold.red(`!`)} ${error}
${MigrateUp2.help}`);
      }
      return MigrateUp2.help;
    }
  }
  exports2.MigrateUp = MigrateUp2;
  MigrateUp2.help = sdk_1.format(`
    Migrate your database up to a specific state.

    ${chalk_1.default.bold.yellow("WARNING")} ${chalk_1.default.bold("Prisma's migration functionality is currently in an experimental state.")}
    ${chalk_1.default.dim("When using any of the commands below you need to explicitly opt-in via the --experimental flag.")}

    ${chalk_1.default.bold("Usage")}

      ${chalk_1.default.dim("$")} prisma migrate up [<inc|name|timestamp>] --experimental

    ${chalk_1.default.bold("Arguments")}

      [<inc>]   go up by an increment [default: latest]

    ${chalk_1.default.bold("Options")}

      --auto-approve    Skip interactive approval before migrating
      -h, --help        Displays this help message
      -p, --preview     Preview the migration changes
      -c, --create-db   Create the database in case it doesn't exist

    ${chalk_1.default.bold("Examples")}

      Create a new migration, then migrate up
      ${chalk_1.default.dim("$")} prisma migrate save --name "add unique to email" --experimental
      ${chalk_1.default.dim("$")} prisma migrate up --experimental

      Preview a migration without migrating
      ${chalk_1.default.dim("$")} prisma migrate up --preview --experimental

      Go up by one migration
      ${chalk_1.default.dim("$")} prisma migrate up 1 --experimental

      Go up to a migration by timestamp
      ${chalk_1.default.dim("$")} prisma migrate up 20190605204907 --experimental

      Go up to a migration by name
      ${chalk_1.default.dim("$")} prisma migrate up "add first_name field" --experimental
  `);
});

// ../migrate/dist/commands/MigrateDown.js
var require_MigrateDown = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.MigrateDown = void 0;
  const sdk_1 = require_dist11();
  const chalk_1 = __importDefault(require_source());
  const path_1 = __importDefault(require("path"));
  const Migrate_1 = require_Migrate();
  const ensureDatabaseExists_1 = require_ensureDatabaseExists();
  const experimental_1 = require_experimental();
  class MigrateDown2 {
    static new() {
      return new MigrateDown2();
    }
    async parse(argv) {
      const args2 = sdk_1.arg(argv, {
        "--help": Boolean,
        "-h": "--help",
        "--preview": Boolean,
        "-p": "--preview",
        "--experimental": Boolean,
        "--schema": String,
        "--telemetry-information": String
      }, false);
      if (sdk_1.isError(args2)) {
        return this.help(args2.message);
      }
      if (args2["--help"]) {
        return this.help();
      }
      if (!args2["--experimental"]) {
        throw new experimental_1.ExperimentalFlagError();
      }
      const migrate2 = new Migrate_1.Migrate(args2["--schema"]);
      const options = {};
      if (args2._.length > 0) {
        const thisArg = args2._[0];
        const maybeNumber = parseInt(thisArg, 10);
        if (isNaN(maybeNumber) || typeof maybeNumber !== "number") {
          throw new Error(`"${thisArg}" is not a valid migration step number`);
        } else {
          options.n = maybeNumber;
        }
      }
      const schemaPath = await sdk_1.getSchemaPath(args2["--schema"]);
      if (!schemaPath) {
        throw new Error(`Could not find a ${chalk_1.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk_1.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk_1.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
      }
      console.log(chalk_1.default.dim(`Prisma schema loaded from ${path_1.default.relative(process.cwd(), schemaPath)}`));
      await ensureDatabaseExists_1.ensureDatabaseExists("unapply", void 0, schemaPath);
      const result = await migrate2.down(options);
      migrate2.stop();
      return result;
    }
    help(error) {
      if (error) {
        return new sdk_1.HelpError(`
${chalk_1.default.bold.red(`!`)} ${error}
${MigrateDown2.help}`);
      }
      return MigrateDown2.help;
    }
  }
  exports2.MigrateDown = MigrateDown2;
  MigrateDown2.help = sdk_1.format(`
    Migrate your database down to a specific state.

    ${chalk_1.default.bold.yellow("WARNING")} ${chalk_1.default.bold("Prisma's migration functionality is currently in an experimental state.")}
    ${chalk_1.default.dim("When using any of the commands below you need to explicitly opt-in via the --experimental flag.")}

    ${chalk_1.default.bold("Usage")}

      ${chalk_1.default.dim("$")} prisma migrate down [<dec|name|timestamp>] --experimental

    ${chalk_1.default.bold("Arguments")}

      [<dec>]   go down by an amount [default: 1]

    ${chalk_1.default.bold("Options")}

      -h, --help       Displays this help message

    ${chalk_1.default.bold("Examples")}

      Rollback a migration
      ${chalk_1.default.dim("$")} prisma migrate down 1 --experimental

      Go down to a migration by timestamp
      ${chalk_1.default.dim("$")} prisma migrate down 20190605204907 --experimental

      Go down to a migration by name
      ${chalk_1.default.dim("$")} prisma migrate down "add first_name field" --experimental
  `);
});

// ../migrate/dist/commands/MigrateTmpPrepare.js
var require_MigrateTmpPrepare = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.MigrateTmpPrepare = void 0;
  const debug_1 = __importDefault(require_dist2());
  const sdk_1 = require_dist11();
  const chalk_1 = __importDefault(require_source());
  const path_1 = __importDefault(require("path"));
  const Migrate_1 = require_Migrate();
  const ensureDatabaseExists_1 = require_ensureDatabaseExists();
  const occupyPath_1 = require_occupyPath();
  const debug3 = debug_1.default("tmp-prepare");
  class MigrateTmpPrepare2 {
    static new() {
      return new MigrateTmpPrepare2();
    }
    async parse(argv) {
      debug3("running tmp-prepare");
      await occupyPath_1.occupyPath(process.cwd());
      debug3("occupied path");
      const schemaPath = await sdk_1.getSchemaPath();
      if (!schemaPath) {
        throw new Error("Could not find a `schema.prisma` file");
      }
      console.log(chalk_1.default.dim(`Prisma schema loaded from ${path_1.default.relative(process.cwd(), schemaPath)}`));
      const migrate2 = new Migrate_1.Migrate(schemaPath);
      debug3("initialized migrate");
      await ensureDatabaseExists_1.ensureDatabaseExists("dev", true, schemaPath);
      await migrate2.up({
        short: true,
        autoApprove: true
      });
      await migrate2.watchUp({
        providerAliases: {},
        autoApprove: true
      });
      migrate2.stop();
      console.log("Done executing tmp prepare");
      process.exit(0);
      return "";
    }
    help(error) {
      if (error) {
        return new sdk_1.HelpError(`
${chalk_1.default.bold.red(`!`)} ${error}
${MigrateTmpPrepare2.help}`);
      }
      return MigrateTmpPrepare2.help;
    }
  }
  exports2.MigrateTmpPrepare = MigrateTmpPrepare2;
  MigrateTmpPrepare2.help = sdk_1.format(`
    Watch local changes and migrate automatically

    ${chalk_1.default.bold("Usage")}

      ${chalk_1.default.dim("$")} prisma migrate tmp-prepare
  `);
});

// ../migrate/dist/commands/DbCommand.js
var require_DbCommand = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DbCommand = void 0;
  const sdk_1 = require_dist11();
  const chalk_1 = __importDefault(require_source());
  class DbCommand2 {
    constructor(cmds) {
      this.cmds = cmds;
    }
    static new(cmds) {
      return new DbCommand2(cmds);
    }
    async parse(argv) {
      const args2 = sdk_1.arg(argv, {
        "--help": Boolean,
        "-h": "--help",
        "--preview-feature": Boolean,
        "--telemetry-information": String
      });
      if (sdk_1.isError(args2)) {
        return this.help(args2.message);
      }
      if (args2._.length === 0 || args2["--help"]) {
        return this.help();
      }
      const cmd = this.cmds[args2._[0]];
      if (cmd) {
        const argsForCmd = args2["--preview-feature"] ? [...args2._.slice(1), `--preview-feature`] : args2._.slice(1);
        return cmd.parse(argsForCmd);
      }
      return sdk_1.unknownCommand(DbCommand2.help, args2._[0]);
    }
    help(error) {
      if (error) {
        return new sdk_1.HelpError(`
${chalk_1.default.bold.red(`!`)} ${error}
${DbCommand2.help}`);
      }
      return DbCommand2.help;
    }
  }
  exports2.DbCommand = DbCommand2;
  DbCommand2.help = sdk_1.format(`
${process.platform === "win32" ? "" : chalk_1.default.bold("🏋️  ")}Manage your database schema and lifecycle during development.

${chalk_1.default.bold.yellow("WARNING")} ${chalk_1.default.bold(`Prisma db is currently in Preview (${sdk_1.link("https://pris.ly/d/preview")}).
There may be bugs and it's not recommended to use it in production environments.`)}
${chalk_1.default.dim("When using any of the subcommands below you need to explicitly opt-in via the --preview-feature flag.")}

${chalk_1.default.bold("Flag")}

  --preview-feature   Run preview Prisma commands

${chalk_1.default.bold("Usage")}

  With an existing schema.prisma:
  ${chalk_1.default.dim("$")} prisma db [command] [options] --preview-feature

  Or specify a schema path:
  ${chalk_1.default.dim("$")} prisma db [command] [options] --preview-feature --schema=./schema.prisma

${chalk_1.default.bold("Options")}

  -h, --help   Display this help message

${chalk_1.default.bold("Commands")}

        push   Push the state from Prisma schema to the database during prototyping ${chalk_1.default.dim("(preview)")}

${chalk_1.default.bold("Examples")}

  Using prisma db push
  ${chalk_1.default.dim("$")} prisma db push --preview-feature
  `);
});

// ../migrate/dist/commands/DbPush.js
var require_DbPush = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DbPush = void 0;
  const sdk_1 = require_dist11();
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const chalk_1 = __importDefault(require_source());
  const prompts_1 = __importDefault(require_prompts3());
  const Migrate_1 = require_Migrate();
  const ensureDatabaseExists_1 = require_ensureDatabaseExists();
  const formatms_1 = require_formatms();
  const experimental_1 = require_experimental();
  class DbPush2 {
    static new() {
      return new DbPush2();
    }
    async parse(argv) {
      const args2 = sdk_1.arg(argv, {
        "--help": Boolean,
        "-h": "--help",
        "--preview-feature": Boolean,
        "--force": Boolean,
        "-f": "--force",
        "--skip-generate": Boolean,
        "--ignore-migrations": Boolean,
        "--schema": String,
        "--telemetry-information": String
      }, false);
      if (sdk_1.isError(args2)) {
        return this.help(args2.message);
      }
      if (args2["--help"]) {
        return this.help();
      }
      if (!args2["--preview-feature"]) {
        throw new experimental_1.PreviewFlagError();
      }
      const schemaPath = await sdk_1.getSchemaPath(args2["--schema"]);
      if (!schemaPath) {
        throw new Error(`Could not find a ${chalk_1.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk_1.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk_1.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
      }
      console.info(chalk_1.default.dim(`Prisma schema loaded from ${path_1.default.relative(process.cwd(), schemaPath)}`));
      const migrationDirPath = path_1.default.join(path_1.default.dirname(schemaPath), "migrations");
      const oldMigrateLockFilePath = path_1.default.join(migrationDirPath, "migrate.lock");
      if (!args2["--ignore-migrations"] && fs_1.default.existsSync(oldMigrateLockFilePath)) {
        if (sdk_1.isCi()) {
          throw Error(`Using db push alongside migrate will interfere with migrations.
The SQL in the README.md file of new migrations will not reflect the actual schema changes executed when running migrate up.
Use the --ignore-migrations flag to ignore this message in an unnattended environment like ${chalk_1.default.bold.greenBright(sdk_1.getCommandWithExecutor("prisma db push --preview-feature --ignore-migrations"))}`);
        }
        const confirmation = await prompts_1.default({
          type: "confirm",
          name: "value",
          message: `${chalk_1.default.yellow("Warning")}: Using db push alongside migrate will interfere with migrations.
The SQL in the README.md file of new migrations will not reflect the actual schema changes executed when running migrate up.
Do you want to continue?`
        });
        if (!confirmation.value) {
          console.info();
          console.info("Push cancelled.");
          process.exit(0);
        }
      }
      const migrate2 = new Migrate_1.Migrate(args2["--schema"]);
      await ensureDatabaseExists_1.ensureDatabaseExists("push", true, args2["--schema"]);
      const before = Date.now();
      const migration = await migrate2.push({
        force: args2["--force"]
      });
      migrate2.stop();
      if (migration.unexecutable && migration.unexecutable.length > 0) {
        const messages = [];
        messages.push(`${chalk_1.default.bold.red("\n⚠️ We found changes that cannot be executed:\n")}`);
        for (const item of migration.unexecutable) {
          messages.push(`${chalk_1.default(`  • ${item}`)}`);
        }
        console.log();
        throw new Error(`${messages.join("\n")}
`);
      }
      if (migration.warnings && migration.warnings.length > 0) {
        console.log(chalk_1.default.bold.yellow(`
⚠️  There might be data loss when applying the changes:
`));
        for (const warning of migration.warnings) {
          console.log(chalk_1.default(`  • ${warning}`));
        }
        console.log();
        if (!args2["--force"]) {
          throw Error(chalk_1.default.bold(`Use the --force flag to ignore these warnings like ${chalk_1.default.bold.greenBright(sdk_1.getCommandWithExecutor("prisma db push --preview-feature --force"))}`));
        }
      }
      if (migration.warnings.length === 0 && migration.executedSteps === 0) {
        console.info(`
The database is already in sync with the Prisma schema.`);
      } else {
        console.info(`
${process.platform === "win32" ? "" : "🚀  "}Your database is now in sync with your schema. Done in ${formatms_1.formatms(Date.now() - before)}`);
        if (!process.env.MIGRATE_SKIP_GENERATE && !args2["--skip-generate"]) {
          await migrate2.tryToRunGenerate();
        }
      }
      return ``;
    }
    help(error) {
      if (error) {
        return new sdk_1.HelpError(`
${chalk_1.default.bold.red(`!`)} ${error}
${DbPush2.help}`);
      }
      return DbPush2.help;
    }
  }
  exports2.DbPush = DbPush2;
  DbPush2.help = sdk_1.format(`
${process.platform === "win32" ? "" : chalk_1.default.bold("🙌  ")}Push the state from your Prisma schema to your database

${chalk_1.default.bold.yellow("WARNING")} ${chalk_1.default.bold(`Prisma db push is currently in Preview (${sdk_1.link("https://pris.ly/d/preview")}).
There may be bugs and it's not recommended to use it in production environments.`)}
${chalk_1.default.dim("When using any of the subcommands below you need to explicitly opt-in via the --preview-feature flag.")}

${chalk_1.default.bold("Usage")}

  ${chalk_1.default.dim("$")} prisma db push [options] --preview-feature

${chalk_1.default.bold("Options")}

           -h, --help   Displays this help message
          -f, --force   Ignore data loss warnings
      --skip-generate   Skip generate
  --ignore-migrations   Ignore migrations files warning

${chalk_1.default.bold("Examples")}

  Push the Prisma schema state to the database
  ${chalk_1.default.dim("$")} prisma db push --preview-feature

  Specify a schema
  ${chalk_1.default.dim("$")} prisma db push --preview-feature --schema=./schema.prisma'

  Use --force to ignore data loss warnings
  ${chalk_1.default.dim("$")} prisma db push --preview-feature --force
  `);
});

// ../migrate/dist/commands/DbDrop.js
var require_DbDrop = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DbDrop = void 0;
  const sdk_1 = require_dist11();
  const path_1 = __importDefault(require("path"));
  const fs_1 = __importDefault(require("fs"));
  const chalk_1 = __importDefault(require_source());
  const prompts_1 = __importDefault(require_prompts3());
  const ensureDatabaseExists_1 = require_ensureDatabaseExists();
  const experimental_1 = require_experimental();
  class DbDrop {
    static new() {
      return new DbDrop();
    }
    async parse(argv) {
      const args2 = sdk_1.arg(argv, {
        "--help": Boolean,
        "-h": "--help",
        "--preview-feature": Boolean,
        "--force": Boolean,
        "-f": "--force",
        "--schema": String,
        "--telemetry-information": String
      });
      if (sdk_1.isError(args2)) {
        return this.help(args2.message);
      }
      if (args2["--help"]) {
        return this.help();
      }
      if (!args2["--preview-feature"]) {
        throw new experimental_1.PreviewFlagError();
      }
      const schemaPath = await sdk_1.getSchemaPath(args2["--schema"]);
      if (!schemaPath) {
        throw new Error(`Could not find a ${chalk_1.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk_1.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk_1.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
      }
      console.info(chalk_1.default.dim(`Prisma schema loaded from ${path_1.default.relative(process.cwd(), schemaPath)}`));
      const datamodel = fs_1.default.readFileSync(schemaPath, "utf-8");
      const config = await sdk_1.getConfig({datamodel});
      const activeDatasource = config.datasources[0];
      const credentials = sdk_1.uriToCredentials(activeDatasource.url.value);
      const {schemaWord, dbType, dbName} = ensureDatabaseExists_1.getDbinfoFromCredentials(credentials);
      const schemaDir = await sdk_1.getSchemaDir(schemaPath);
      console.info();
      if (!args2["--force"]) {
        if (sdk_1.isCi()) {
          throw Error(`Use the --force flag to use the drop command in an unnattended environment like ${chalk_1.default.bold.greenBright(sdk_1.getCommandWithExecutor("prisma db drop --preview-feature --force"))}`);
        }
        const confirmation = await prompts_1.default({
          type: "text",
          name: "value",
          message: `Enter the ${dbType} ${schemaWord} name "${dbName}" to drop it.
Location: "${ensureDatabaseExists_1.getDbLocation(credentials)}".
${chalk_1.default.red("All data will be lost")}.`
        });
        console.info();
        if (!confirmation.value) {
          console.info("Drop cancelled.");
          process.exit(0);
        } else if (confirmation.value !== dbName) {
          throw Error(`The ${schemaWord} name entered "${confirmation.value}" doesn't match "${dbName}".`);
        }
      }
      let result = void 0;
      try {
        result = await sdk_1.dropDatabase(activeDatasource.url.value, schemaDir);
      } catch (e) {
        let json;
        try {
          json = JSON.parse(e.stdout);
        } catch (e2) {
          console.error(`Could not parse database drop engine response: ${e2.stdout.slice(0, 200)}`);
        }
        if (json.message) {
          throw Error(json.message);
        }
        throw Error(e);
      }
      if ((result === null || result === void 0 ? void 0 : result.exitCode) === 0 && result.stderr.includes("The database was successfully dropped")) {
        return `${process.platform === "win32" ? "" : "🚀  "}The ${dbType} ${schemaWord} "${dbName}" from "${ensureDatabaseExists_1.getDbLocation(credentials)}" was successfully dropped.
`;
      } else {
        throw Error(`An error occurred during the drop: ${JSON.stringify(result, void 0, 2)}`);
      }
    }
    help(error) {
      if (error) {
        return new sdk_1.HelpError(`
${chalk_1.default.bold.red(`!`)} ${error}
${DbDrop.help}`);
      }
      return DbDrop.help;
    }
  }
  exports2.DbDrop = DbDrop;
  DbDrop.help = sdk_1.format(`
${process.platform === "win32" ? "" : chalk_1.default.bold("💣  ")}Drop the database

${chalk_1.default.bold.yellow("WARNING")} ${chalk_1.default.bold(`Prisma db drop is currently in Preview (${sdk_1.link("https://pris.ly/d/preview")}).
There may be bugs and it's not recommended to use it in production environments.`)}
${chalk_1.default.dim("When using any of the subcommands below you need to explicitly opt-in via the --preview-feature flag.")}

${chalk_1.default.bold("Usage")}

  ${chalk_1.default.dim("$")} prisma db drop [options] --preview-feature

${chalk_1.default.bold("Options")}

   -h, --help      Displays this help message
  -f, --force      Skip the confirmation prompt

${chalk_1.default.bold("Examples")}

  Drop the database
  ${chalk_1.default.dim("$")} prisma db drop --preview-feature

  Specify a schema
  ${chalk_1.default.dim("$")} prisma db drop --preview-feature --schema=./schema.prisma'

  Use --force to skip the confirmation prompt
  ${chalk_1.default.dim("$")} prisma db drop --preview-feature --force
  `);
});

// ../../node_modules/.pnpm/is-docker@2.0.0/node_modules/is-docker/index.js
var require_is_docker = __commonJS((exports2, module3) => {
  "use strict";
  const fs17 = require("fs");
  let isDocker;
  function hasDockerEnv() {
    try {
      fs17.statSync("/.dockerenv");
      return true;
    } catch (_2) {
      return false;
    }
  }
  function hasDockerCGroup() {
    try {
      return fs17.readFileSync("/proc/self/cgroup", "utf8").includes("docker");
    } catch (_2) {
      return false;
    }
  }
  module3.exports = () => {
    if (isDocker === void 0) {
      isDocker = hasDockerEnv() || hasDockerCGroup();
    }
    return isDocker;
  };
});

// ../../node_modules/.pnpm/is-wsl@2.2.0/node_modules/is-wsl/index.js
var require_is_wsl = __commonJS((exports2, module3) => {
  "use strict";
  const os3 = require("os");
  const fs17 = require("fs");
  const isDocker = require_is_docker();
  const isWsl = () => {
    if (process.platform !== "linux") {
      return false;
    }
    if (os3.release().toLowerCase().includes("microsoft")) {
      if (isDocker()) {
        return false;
      }
      return true;
    }
    try {
      return fs17.readFileSync("/proc/version", "utf8").toLowerCase().includes("microsoft") ? !isDocker() : false;
    } catch (_2) {
      return false;
    }
  };
  if (process.env.__IS_WSL_TEST__) {
    module3.exports = isWsl;
  } else {
    module3.exports = isWsl();
  }
});

// ../../node_modules/.pnpm/open@7.0.4/node_modules/open/index.js
var require_open = __commonJS((exports2, module3) => {
  "use strict";
  const {promisify: promisify3} = require("util");
  const path19 = require("path");
  const childProcess = require("child_process");
  const fs17 = require("fs");
  const url = require("url");
  const isWsl = require_is_wsl();
  const isDocker = require_is_docker();
  const pAccess = promisify3(fs17.access);
  const pExecFile = promisify3(childProcess.execFile);
  const localXdgOpenPath = path19.join(__dirname, "xdg-open");
  const wslToWindowsPath = async (path20) => {
    const {stdout} = await pExecFile("wslpath", ["-w", path20]);
    return stdout.trim();
  };
  module3.exports = async (target, options) => {
    if (typeof target !== "string") {
      throw new TypeError("Expected a `target`");
    }
    options = {
      wait: false,
      background: false,
      url: false,
      ...options
    };
    let command;
    let appArguments = [];
    const cliArguments = [];
    const childProcessOptions = {};
    if (Array.isArray(options.app)) {
      appArguments = options.app.slice(1);
      options.app = options.app[0];
    }
    if (options.url) {
      target = new url.URL(target).href;
      if (isWsl) {
        target = target.replace(/&/g, "^&");
      }
    }
    if (process.platform === "darwin") {
      command = "open";
      if (options.wait) {
        cliArguments.push("--wait-apps");
      }
      if (options.background) {
        cliArguments.push("--background");
      }
      if (options.app) {
        cliArguments.push("-a", options.app);
      }
    } else if (process.platform === "win32" || isWsl && !isDocker()) {
      command = "cmd" + (isWsl ? ".exe" : "");
      cliArguments.push("/s", "/c", "start", '""', "/b");
      if (!isWsl) {
        target = `"${target}"`;
        childProcessOptions.windowsVerbatimArguments = true;
        if (options.app) {
          options.app = `"${options.app}"`;
        }
      }
      if (options.wait) {
        cliArguments.push("/wait");
      }
      if (options.app) {
        if (isWsl && options.app.startsWith("/mnt/")) {
          const windowsPath = await wslToWindowsPath(options.app);
          options.app = windowsPath;
        }
        cliArguments.push(options.app);
      }
      if (appArguments.length > 0) {
        cliArguments.push(...appArguments);
      }
    } else {
      if (options.app) {
        command = options.app;
      } else {
        const isBundled = !__dirname || __dirname === "/";
        let exeLocalXdgOpen = false;
        try {
          await pAccess(localXdgOpenPath, fs17.constants.X_OK);
          exeLocalXdgOpen = true;
        } catch (_2) {
        }
        const useSystemXdgOpen = process.versions.electron || process.platform === "android" || isBundled || !exeLocalXdgOpen;
        command = useSystemXdgOpen ? "xdg-open" : localXdgOpenPath;
      }
      if (appArguments.length > 0) {
        cliArguments.push(...appArguments);
      }
      if (!options.wait) {
        childProcessOptions.stdio = "ignore";
        childProcessOptions.detached = true;
      }
    }
    cliArguments.push(target);
    if (process.platform === "darwin" && appArguments.length > 0) {
      cliArguments.push("--args", ...appArguments);
    }
    const subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);
    if (options.wait) {
      return new Promise((resolve, reject) => {
        subprocess.once("error", reject);
        subprocess.once("close", (exitCode) => {
          if (exitCode > 0) {
            reject(new Error(`Exited with code ${exitCode}`));
            return;
          }
          resolve(subprocess);
        });
      });
    }
    subprocess.unref();
    return subprocess;
  };
});

// ../migrate/dist/utils/getGithubIssueUrl.js
var require_getGithubIssueUrl = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.wouldYouLikeToCreateANewIssue = exports2.getGithubIssueUrl = void 0;
  const new_github_issue_url_1 = __importDefault(require_new_github_issue_url());
  const open_1 = __importDefault(require_open());
  const prompts_1 = __importDefault(require_prompts3());
  const strip_ansi_1 = __importDefault(require_strip_ansi());
  const get_platform_1 = require_dist();
  function getGithubIssueUrl({title, user = "prisma", repo = "migrate", template = "bug_report.md", body}) {
    return new_github_issue_url_1.default({
      user,
      repo,
      template,
      title,
      body
    });
  }
  exports2.getGithubIssueUrl = getGithubIssueUrl;
  async function wouldYouLikeToCreateANewIssue(options) {
    var _a;
    let shouldCreateNewIssue;
    if (options.prompt) {
      shouldCreateNewIssue = await prompts_1.default({
        type: "select",
        name: "value",
        message: "Would you like to create a Github issue?",
        initial: 0,
        choices: [
          {
            title: "Yes",
            value: true,
            description: `Create a new GitHub issue`
          },
          {
            title: "No",
            value: false,
            description: `Don't create a new GitHub issue`
          }
        ]
      });
    } else {
      shouldCreateNewIssue = {value: true};
    }
    if (shouldCreateNewIssue.value) {
      const platform = await get_platform_1.getPlatform();
      const url = getGithubIssueUrl({
        title: (_a = options.title) !== null && _a !== void 0 ? _a : "",
        body: issueTemplate(platform, options)
      });
      await open_1.default(url);
    }
  }
  exports2.wouldYouLikeToCreateANewIssue = wouldYouLikeToCreateANewIssue;
  const issueTemplate = (platform, options) => {
    return strip_ansi_1.default(`
Hi Prisma Team! Prisma Migrate just crashed. ${options.reportId ? `This is the report:
  Report Id: ${options.reportId}` : ""}

## Versions
      
| Name        | Version            |
|-------------|--------------------|
| Platform    | ${platform.padEnd(19)}| 
| Node        | ${process.version.padEnd(19)}| 
| Prisma CLI  | ${options.cliVersion.padEnd(19)}| 
| Binary      | ${options.binaryVersion.padEnd(19)}| 

## Error
\`\`\`
${options.error}
\`\`\`

`);
  };
});

// ../migrate/dist/utils/handlePanic.js
var require_handlePanic = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.handlePanic = void 0;
  const chalk_1 = __importDefault(require_source());
  const sdk_1 = require_dist11();
  const prompts_1 = __importDefault(require_prompts3());
  const getGithubIssueUrl_1 = require_getGithubIssueUrl();
  async function handlePanic2(error, cliVersion, binaryVersion) {
    return new Promise(async function(resolve, reject) {
      if (sdk_1.isCi()) {
        return reject(error);
      }
      await panicDialog(error, cliVersion, binaryVersion);
      return resolve();
    });
  }
  exports2.handlePanic = handlePanic2;
  async function panicDialog(error, cliVersion, binaryVersion) {
    const errorMessage = error.message.split("\n").slice(0, Math.max(20, process.stdout.rows)).join("\n");
    console.log(`${chalk_1.default.red("Oops, an unexpected error occured!")}
${chalk_1.default.red(errorMessage)}

${chalk_1.default.bold("Please help us improve Prisma by submitting an error report.")}
${chalk_1.default.bold("Error reports never contain personal or other sensitive information.")}
${chalk_1.default.dim(`Learn more: ${sdk_1.link("https://pris.ly/d/telemetry")}`)}
`);
    const response = await prompts_1.default({
      type: "select",
      name: "value",
      message: "Submit error report",
      initial: 0,
      choices: [
        {
          title: "Yes",
          value: true,
          description: `Send error report once`
        },
        {
          title: "No",
          value: false,
          description: `Don't send error report`
        }
      ]
    });
    const reportFailedMessage = `${chalk_1.default.bold.red("Oops. We could not send the error report.")}`;
    if (response.value) {
      let reportId;
      try {
        console.log("Submitting...");
        reportId = await sdk_1.sendPanic(error, cliVersion, binaryVersion);
      } catch (error2) {
        console.log(reportFailedMessage);
      }
      if (reportId) {
        console.log(`
${chalk_1.default.bold(`We successfully received the error report id: ${reportId}`)}`);
        console.log(`
${chalk_1.default.bold("Thanks a lot for your help! 🙏")}`);
      }
    }
    await getGithubIssueUrl_1.wouldYouLikeToCreateANewIssue({
      prompt: !response.value,
      error,
      cliVersion,
      binaryVersion
    });
  }
});

// ../migrate/dist/types.js
var require_types3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.EngineResults = exports2.FieldArity = exports2.PrimitiveType = void 0;
  var PrimitiveType;
  (function(PrimitiveType2) {
    PrimitiveType2["String"] = "String";
    PrimitiveType2["Int"] = "Int";
    PrimitiveType2["Float"] = "Float";
    PrimitiveType2["Boolean"] = "Boolean";
  })(PrimitiveType = exports2.PrimitiveType || (exports2.PrimitiveType = {}));
  var FieldArity;
  (function(FieldArity2) {
    FieldArity2["required"] = "required";
    FieldArity2["list"] = "list";
    FieldArity2["optional"] = "optional";
  })(FieldArity = exports2.FieldArity || (exports2.FieldArity = {}));
  var EngineResults;
  (function(EngineResults2) {
    let MigrationStatus;
    (function(MigrationStatus2) {
      MigrationStatus2["MigrationSuccess"] = "MigrationSuccess";
      MigrationStatus2["MigrationInProgress"] = "MigrationInProgress";
      MigrationStatus2["MigrationFailure"] = "MigrationFailure";
      MigrationStatus2["Pending"] = "Pending";
      MigrationStatus2["RollingBack"] = "RollingBack";
      MigrationStatus2["RollbackSuccess"] = "RollbackSuccess";
      MigrationStatus2["RollbackFailure"] = "RollbackFailure";
    })(MigrationStatus = EngineResults2.MigrationStatus || (EngineResults2.MigrationStatus = {}));
  })(EngineResults = exports2.EngineResults || (exports2.EngineResults = {}));
});

// ../migrate/dist/index.js
var require_dist13 = __commonJS((exports2) => {
  "use strict";
  var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, {enumerable: true, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __exportStar2 = exports2 && exports2.__exportStar || function(m, exports3) {
    for (var p in m)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
        __createBinding(exports3, m, p);
  };
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.handlePanic = exports2.byline = exports2.DbDrop = exports2.DbPush = exports2.DbCommand = exports2.MigrateTmpPrepare = exports2.MigrateDown = exports2.MigrateUp = exports2.MigrateSave = exports2.MigrateCommand = exports2.MigrateEngine = exports2.Migrate = exports2.generateInThread = void 0;
  var generateInThread_1 = require_generateInThread();
  Object.defineProperty(exports2, "generateInThread", {enumerable: true, get: function() {
    return generateInThread_1.generateInThread;
  }});
  var Migrate_1 = require_Migrate();
  Object.defineProperty(exports2, "Migrate", {enumerable: true, get: function() {
    return Migrate_1.Migrate;
  }});
  var MigrateEngine_1 = require_MigrateEngine();
  Object.defineProperty(exports2, "MigrateEngine", {enumerable: true, get: function() {
    return MigrateEngine_1.MigrateEngine;
  }});
  var MigrateCommand_1 = require_MigrateCommand();
  Object.defineProperty(exports2, "MigrateCommand", {enumerable: true, get: function() {
    return MigrateCommand_1.MigrateCommand;
  }});
  var MigrateSave_1 = require_MigrateSave();
  Object.defineProperty(exports2, "MigrateSave", {enumerable: true, get: function() {
    return MigrateSave_1.MigrateSave;
  }});
  var MigrateUp_1 = require_MigrateUp();
  Object.defineProperty(exports2, "MigrateUp", {enumerable: true, get: function() {
    return MigrateUp_1.MigrateUp;
  }});
  var MigrateDown_1 = require_MigrateDown();
  Object.defineProperty(exports2, "MigrateDown", {enumerable: true, get: function() {
    return MigrateDown_1.MigrateDown;
  }});
  var MigrateTmpPrepare_1 = require_MigrateTmpPrepare();
  Object.defineProperty(exports2, "MigrateTmpPrepare", {enumerable: true, get: function() {
    return MigrateTmpPrepare_1.MigrateTmpPrepare;
  }});
  var DbCommand_1 = require_DbCommand();
  Object.defineProperty(exports2, "DbCommand", {enumerable: true, get: function() {
    return DbCommand_1.DbCommand;
  }});
  var DbPush_1 = require_DbPush();
  Object.defineProperty(exports2, "DbPush", {enumerable: true, get: function() {
    return DbPush_1.DbPush;
  }});
  var DbDrop_1 = require_DbDrop();
  Object.defineProperty(exports2, "DbDrop", {enumerable: true, get: function() {
    return DbDrop_1.DbDrop;
  }});
  var byline_1 = require_byline4();
  Object.defineProperty(exports2, "byline", {enumerable: true, get: function() {
    return __importDefault(byline_1).default;
  }});
  var handlePanic_1 = require_handlePanic();
  Object.defineProperty(exports2, "handlePanic", {enumerable: true, get: function() {
    return handlePanic_1.handlePanic;
  }});
  __exportStar2(require_types3(), exports2);
});

// ../../node_modules/.pnpm/path-exists@3.0.0/node_modules/path-exists/index.js
var require_path_exists2 = __commonJS((exports2, module3) => {
  "use strict";
  const fs17 = require("fs");
  module3.exports = (fp) => new Promise((resolve) => {
    fs17.access(fp, (err) => {
      resolve(!err);
    });
  });
  module3.exports.sync = (fp) => {
    try {
      fs17.accessSync(fp);
      return true;
    } catch (err) {
      return false;
    }
  };
});

// ../../node_modules/.pnpm/p-locate@3.0.0/node_modules/p-locate/index.js
var require_p_locate3 = __commonJS((exports2, module3) => {
  "use strict";
  const pLimit = require_p_limit();
  class EndError extends Error {
    constructor(value) {
      super();
      this.value = value;
    }
  }
  const testElement = (el, tester) => Promise.resolve(el).then(tester);
  const finder = (el) => Promise.all(el).then((val) => val[1] === true && Promise.reject(new EndError(val[0])));
  module3.exports = (iterable, tester, opts) => {
    opts = Object.assign({
      concurrency: Infinity,
      preserveOrder: true
    }, opts);
    const limit = pLimit(opts.concurrency);
    const items = [...iterable].map((el) => [el, limit(testElement, el, tester)]);
    const checkLimit = pLimit(opts.preserveOrder ? 1 : Infinity);
    return Promise.all(items.map((el) => checkLimit(finder, el))).then(() => {
    }).catch((err) => err instanceof EndError ? err.value : Promise.reject(err));
  };
});

// ../../node_modules/.pnpm/locate-path@3.0.0/node_modules/locate-path/index.js
var require_locate_path3 = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const pathExists = require_path_exists2();
  const pLocate = require_p_locate3();
  module3.exports = (iterable, options) => {
    options = Object.assign({
      cwd: process.cwd()
    }, options);
    return pLocate(iterable, (el) => pathExists(path19.resolve(options.cwd, el)), options);
  };
  module3.exports.sync = (iterable, options) => {
    options = Object.assign({
      cwd: process.cwd()
    }, options);
    for (const el of iterable) {
      if (pathExists.sync(path19.resolve(options.cwd, el))) {
        return el;
      }
    }
  };
});

// ../../node_modules/.pnpm/find-up@3.0.0/node_modules/find-up/index.js
var require_find_up3 = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const locatePath = require_locate_path3();
  module3.exports = (filename, opts = {}) => {
    const startDir = path19.resolve(opts.cwd || "");
    const {root} = path19.parse(startDir);
    const filenames = [].concat(filename);
    return new Promise((resolve) => {
      (function find(dir) {
        locatePath(filenames, {cwd: dir}).then((file) => {
          if (file) {
            resolve(path19.join(dir, file));
          } else if (dir === root) {
            resolve(null);
          } else {
            find(path19.dirname(dir));
          }
        });
      })(startDir);
    });
  };
  module3.exports.sync = (filename, opts = {}) => {
    let dir = path19.resolve(opts.cwd || "");
    const {root} = path19.parse(dir);
    const filenames = [].concat(filename);
    while (true) {
      const file = locatePath.sync(filenames, {cwd: dir});
      if (file) {
        return path19.join(dir, file);
      }
      if (dir === root) {
        return null;
      }
      dir = path19.dirname(dir);
    }
  };
});

// ../../node_modules/.pnpm/pkg-up@3.1.0/node_modules/pkg-up/index.js
var require_pkg_up = __commonJS((exports2, module3) => {
  "use strict";
  const findUp = require_find_up3();
  module3.exports = async ({cwd} = {}) => findUp("package.json", {cwd});
  module3.exports.sync = ({cwd} = {}) => findUp.sync("package.json", {cwd});
});

// package.json
var require_package2 = __commonJS((exports2, module3) => {
  module3.exports = {
    version: "2.10.2",
    name: "@prisma/cli",
    description: "Prisma is an open-source database toolkit. It includes a JavaScript/TypeScript ORM for Node.js, migrations and a modern GUI to view and edit the data in your database. You can use Prisma in new projects or add it to an existing one.",
    keywords: [
      "typescript",
      "orm",
      "prisma2",
      "prisma",
      "cli",
      "database",
      "sql",
      "postgresql",
      "mysql",
      "sqlite",
      "mariadb",
      "query-builder"
    ],
    main: "build/index.js",
    repository: "git@github.com:prisma/prisma.git",
    homepage: "https://www.prisma.io",
    author: "Tim Suchanek <suchanek@prisma.io>",
    maintainers: [
      "Tim Suchanek <suchanek@prisma.io>",
      "Joël Galeran <galeran@prisma.io>"
    ],
    bugs: {
      url: "https://github.com/prisma/prisma/issues",
      email: "suchanek@prisma.io"
    },
    license: "Apache-2.0",
    engines: {
      node: ">=10"
    },
    prisma: {
      prismaCommit: "2f805fc754bfbf6b6d40cfa81f28d968537ae02a"
    },
    files: [
      "build",
      "install",
      "runtime/*.js",
      "runtime/*.d.ts",
      "runtime/utils",
      "runtime/dist",
      "prisma-client",
      "preinstall",
      "scripts/preinstall-entry.js",
      "scripts/install-entry.js"
    ],
    pkg: {
      assets: [
        "build/**/*",
        "runtime/**/*",
        "prisma-client/**/*",
        "download-build/**/*",
        "node_modules/@prisma/engines/**/*",
        "node_modules/@prisma/engines/*"
      ]
    },
    bin: {
      prisma: "build/index.js",
      prisma2: "build/index.js"
    },
    devDependencies: {
      "@prisma/client": "2.10.2",
      "@prisma/debug": "2.10.2",
      "@prisma/generator-helper": "2.10.2",
      "@prisma/get-platform": "2.10.2",
      "@prisma/migrate": "2.10.2",
      "@prisma/sdk": "2.10.2",
      "@prisma/studio": "0.304.0",
      "@prisma/studio-server": "0.304.0",
      "@prisma/tests": "^0.0.0",
      "@sindresorhus/slugify": "1.1.0",
      "@timsuchanek/copy": "1.4.5",
      "@types/debug": "4.1.5",
      "@types/jest": "26.0.14",
      "@types/verror": "1.10.4",
      "@types/ws": "7.2.6",
      "@typescript-eslint/eslint-plugin": "4.2.0",
      "@typescript-eslint/parser": "4.2.0",
      "checkpoint-client": "1.1.14",
      dotenv: "8.2.0",
      esbuild: "0.7.19",
      "escape-string-regexp": "4.0.0",
      eslint: "7.10.0",
      "eslint-config-prettier": "6.12.0",
      "eslint-plugin-eslint-comments": "3.2.0",
      "eslint-plugin-jest": "24.0.2",
      "eslint-plugin-prettier": "3.1.4",
      execa: "4.0.3",
      "fast-deep-equal": "3.1.3",
      "fs-jetpack": "4.0.0",
      "get-port": "5.1.1",
      "global-dirs": "2.0.1",
      husky: "4.3.0",
      "indent-string": "4.0.0",
      "is-installed-globally": "0.3.2",
      jest: "26.4.2",
      "line-replace": "2.0.1",
      "lint-staged": "10.4.0",
      "log-update": "4.0.0",
      "make-dir": "3.1.0",
      mz: "2.7.0",
      open: "7.2.1",
      packwatch: "2.0.0",
      pg: "8.3.3",
      pkg: "4.4.9",
      "pkg-up": "3.1.0",
      prettier: "2.1.2",
      "replace-string": "3.1.0",
      "resolve-pkg": "2.0.0",
      rimraf: "3.0.2",
      "snap-shot-it": "7.9.3",
      "strip-ansi": "6.0.0",
      "strip-indent": "3.0.0",
      tempy: "1.0.0",
      "terminal-link": "2.1.1",
      "ts-jest": "26.4.0",
      typescript: "4.0.3",
      verror: "1.10.0",
      ws: "7.3.1"
    },
    scripts: {
      "test:commands": "./fixtures/test.sh && jest dotenv- format doctor generate && jest tests__/introspect && jest studio --maxConcurrency=1",
      "test-update": "pnpm run test:commands -- -u && pnpm run test:integration -- -u",
      test: "pnpm run test:commands",
      jest: "jest",
      install: "node scripts/install-entry.js",
      format: "prettier --write .",
      lint: "eslint --fix --ext .js,.ts .",
      tsc: "tsc -d -p tsconfig.build.json && bash scripts/copy-runtime-dist.sh",
      build: "node helpers/build.js",
      pkg: "pkg . -o pkg-build",
      prepublishOnly: "pnpm run build",
      preinstall: "node scripts/preinstall-entry.js"
    },
    husky: {
      hooks: {
        "pre-commit": "lint-staged"
      }
    },
    "lint-staged": {
      "*.{js,ts,css,json,md}": [
        "prettier --write",
        "git add"
      ],
      "*.{js,ts}": [
        "eslint"
      ]
    },
    dependencies: {
      "@prisma/bar": "^0.0.0",
      "@prisma/engines": "2.10.1-6-7d0087eadc7265e12d4b8d8c3516b02c4c965111"
    }
  };
});

// ../../node_modules/.pnpm/fast-deep-equal@3.1.3/node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = function equal2(a, b) {
    if (a === b)
      return true;
    if (a && b && typeof a == "object" && typeof b == "object") {
      if (a.constructor !== b.constructor)
        return false;
      var length, i, keys;
      if (Array.isArray(a)) {
        length = a.length;
        if (length != b.length)
          return false;
        for (i = length; i-- !== 0; )
          if (!equal2(a[i], b[i]))
            return false;
        return true;
      }
      if (a.constructor === RegExp)
        return a.source === b.source && a.flags === b.flags;
      if (a.valueOf !== Object.prototype.valueOf)
        return a.valueOf() === b.valueOf();
      if (a.toString !== Object.prototype.toString)
        return a.toString() === b.toString();
      keys = Object.keys(a);
      length = keys.length;
      if (length !== Object.keys(b).length)
        return false;
      for (i = length; i-- !== 0; )
        if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
          return false;
      for (i = length; i-- !== 0; ) {
        var key = keys[i];
        if (!equal2(a[key], b[key]))
          return false;
      }
      return true;
    }
    return a !== a && b !== b;
  };
});

// ../../node_modules/.pnpm/tslib@1.14.1/node_modules/tslib/tslib.js
var require_tslib = __commonJS((exports2, module3) => {
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar2;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
    if (typeof define === "function" && define.amd) {
      define("tslib", ["exports"], function(exports3) {
        factory(createExporter(root, createExporter(exports3)));
      });
    } else if (typeof module3 === "object" && typeof module3.exports === "object") {
      factory(createExporter(root, createExporter(module3.exports)));
    } else {
      factory(createExporter(root));
    }
    function createExporter(exports3, previous) {
      if (exports3 !== root) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports3, "__esModule", {value: true});
        } else {
          exports3.__esModule = true;
        }
      }
      return function(id, v) {
        return exports3[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (b.hasOwnProperty(p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _2 = {label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: []}, f, y, t, g;
      return g = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_2)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _2.label++;
                return {value: op[1], done: false};
              case 5:
                _2.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _2.ops.pop();
                _2.trys.pop();
                continue;
              default:
                if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _2 = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _2.label = op[1];
                  break;
                }
                if (op[0] === 6 && _2.label < t[1]) {
                  _2.label = t[1];
                  t = op;
                  break;
                }
                if (t && _2.label < t[2]) {
                  _2.label = t[2];
                  _2.ops.push(op);
                  break;
                }
                if (t[2])
                  _2.ops.pop();
                _2.trys.pop();
                continue;
            }
            op = body.call(thisArg, _2);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return {value: op[0] ? op[1] : void 0, done: true};
      }
    };
    __createBinding = function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __exportStar2 = function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !exports3.hasOwnProperty(p))
          exports3[p] = m[p];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return {value: o && o[i++], done: !o};
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = {error};
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? {value: __await(o[n](v)), done: n === "return"} : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({value: v2, done: d});
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", {value: raw});
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : {default: mod};
    };
    __classPrivateFieldGet = function(receiver, privateMap) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
      }
      return privateMap.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, privateMap, value) {
      if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
      }
      privateMap.set(receiver, value);
      return value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar2);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
});

// ../../node_modules/.pnpm/@sentry/types@5.15.5/node_modules/@sentry/types/dist/loglevel.js
var require_loglevel = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var LogLevel;
  (function(LogLevel2) {
    LogLevel2[LogLevel2["None"] = 0] = "None";
    LogLevel2[LogLevel2["Error"] = 1] = "Error";
    LogLevel2[LogLevel2["Debug"] = 2] = "Debug";
    LogLevel2[LogLevel2["Verbose"] = 3] = "Verbose";
  })(LogLevel = exports2.LogLevel || (exports2.LogLevel = {}));
});

// ../../node_modules/.pnpm/@sentry/types@5.15.5/node_modules/@sentry/types/dist/severity.js
var require_severity = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var Severity;
  (function(Severity2) {
    Severity2["Fatal"] = "fatal";
    Severity2["Error"] = "error";
    Severity2["Warning"] = "warning";
    Severity2["Log"] = "log";
    Severity2["Info"] = "info";
    Severity2["Debug"] = "debug";
    Severity2["Critical"] = "critical";
  })(Severity = exports2.Severity || (exports2.Severity = {}));
  (function(Severity2) {
    function fromString(level) {
      switch (level) {
        case "debug":
          return Severity2.Debug;
        case "info":
          return Severity2.Info;
        case "warn":
        case "warning":
          return Severity2.Warning;
        case "error":
          return Severity2.Error;
        case "fatal":
          return Severity2.Fatal;
        case "critical":
          return Severity2.Critical;
        case "log":
        default:
          return Severity2.Log;
      }
    }
    Severity2.fromString = fromString;
  })(Severity = exports2.Severity || (exports2.Severity = {}));
});

// ../../node_modules/.pnpm/@sentry/types@5.15.5/node_modules/@sentry/types/dist/span.js
var require_span = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var SpanStatus;
  (function(SpanStatus2) {
    SpanStatus2["Ok"] = "ok";
    SpanStatus2["DeadlineExceeded"] = "deadline_exceeded";
    SpanStatus2["Unauthenticated"] = "unauthenticated";
    SpanStatus2["PermissionDenied"] = "permission_denied";
    SpanStatus2["NotFound"] = "not_found";
    SpanStatus2["ResourceExhausted"] = "resource_exhausted";
    SpanStatus2["InvalidArgument"] = "invalid_argument";
    SpanStatus2["Unimplemented"] = "unimplemented";
    SpanStatus2["Unavailable"] = "unavailable";
    SpanStatus2["InternalError"] = "internal_error";
    SpanStatus2["UnknownError"] = "unknown_error";
    SpanStatus2["Cancelled"] = "cancelled";
    SpanStatus2["AlreadyExists"] = "already_exists";
    SpanStatus2["FailedPrecondition"] = "failed_precondition";
    SpanStatus2["Aborted"] = "aborted";
    SpanStatus2["OutOfRange"] = "out_of_range";
    SpanStatus2["DataLoss"] = "data_loss";
  })(SpanStatus = exports2.SpanStatus || (exports2.SpanStatus = {}));
  (function(SpanStatus2) {
    function fromHttpCode(httpStatus) {
      if (httpStatus < 400) {
        return SpanStatus2.Ok;
      }
      if (httpStatus >= 400 && httpStatus < 500) {
        switch (httpStatus) {
          case 401:
            return SpanStatus2.Unauthenticated;
          case 403:
            return SpanStatus2.PermissionDenied;
          case 404:
            return SpanStatus2.NotFound;
          case 409:
            return SpanStatus2.AlreadyExists;
          case 413:
            return SpanStatus2.FailedPrecondition;
          case 429:
            return SpanStatus2.ResourceExhausted;
          default:
            return SpanStatus2.InvalidArgument;
        }
      }
      if (httpStatus >= 500 && httpStatus < 600) {
        switch (httpStatus) {
          case 501:
            return SpanStatus2.Unimplemented;
          case 503:
            return SpanStatus2.Unavailable;
          case 504:
            return SpanStatus2.DeadlineExceeded;
          default:
            return SpanStatus2.InternalError;
        }
      }
      return SpanStatus2.UnknownError;
    }
    SpanStatus2.fromHttpCode = fromHttpCode;
  })(SpanStatus = exports2.SpanStatus || (exports2.SpanStatus = {}));
});

// ../../node_modules/.pnpm/@sentry/types@5.15.5/node_modules/@sentry/types/dist/status.js
var require_status = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var Status;
  (function(Status2) {
    Status2["Unknown"] = "unknown";
    Status2["Skipped"] = "skipped";
    Status2["Success"] = "success";
    Status2["RateLimit"] = "rate_limit";
    Status2["Invalid"] = "invalid";
    Status2["Failed"] = "failed";
  })(Status = exports2.Status || (exports2.Status = {}));
  (function(Status2) {
    function fromHttpCode(code) {
      if (code >= 200 && code < 300) {
        return Status2.Success;
      }
      if (code === 429) {
        return Status2.RateLimit;
      }
      if (code >= 400 && code < 500) {
        return Status2.Invalid;
      }
      if (code >= 500) {
        return Status2.Failed;
      }
      return Status2.Unknown;
    }
    Status2.fromHttpCode = fromHttpCode;
  })(Status = exports2.Status || (exports2.Status = {}));
});

// ../../node_modules/.pnpm/@sentry/types@5.15.5/node_modules/@sentry/types/dist/index.js
var require_dist14 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var loglevel_1 = require_loglevel();
  exports2.LogLevel = loglevel_1.LogLevel;
  var severity_1 = require_severity();
  exports2.Severity = severity_1.Severity;
  var span_1 = require_span();
  exports2.SpanStatus = span_1.SpanStatus;
  var status_1 = require_status();
  exports2.Status = status_1.Status;
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/async.js
var require_async8 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  function forget(promise) {
    promise.then(null, function(e) {
      console.error(e);
    });
  }
  exports2.forget = forget;
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/polyfill.js
var require_polyfill2 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.setPrototypeOf = Object.setPrototypeOf || ({__proto__: []} instanceof Array ? setProtoOf : mixinProperties);
  function setProtoOf(obj, proto) {
    obj.__proto__ = proto;
    return obj;
  }
  function mixinProperties(obj, proto) {
    for (var prop in proto) {
      if (!obj.hasOwnProperty(prop)) {
        obj[prop] = proto[prop];
      }
    }
    return obj;
  }
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/error.js
var require_error4 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var polyfill_1 = require_polyfill2();
  var SentryError = function(_super) {
    tslib_1.__extends(SentryError2, _super);
    function SentryError2(message) {
      var _newTarget = this.constructor;
      var _this = _super.call(this, message) || this;
      _this.message = message;
      _this.name = _newTarget.prototype.constructor.name;
      polyfill_1.setPrototypeOf(_this, _newTarget.prototype);
      return _this;
    }
    return SentryError2;
  }(Error);
  exports2.SentryError = SentryError;
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/is.js
var require_is = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  function isError7(wat) {
    switch (Object.prototype.toString.call(wat)) {
      case "[object Error]":
        return true;
      case "[object Exception]":
        return true;
      case "[object DOMException]":
        return true;
      default:
        return isInstanceOf(wat, Error);
    }
  }
  exports2.isError = isError7;
  function isErrorEvent(wat) {
    return Object.prototype.toString.call(wat) === "[object ErrorEvent]";
  }
  exports2.isErrorEvent = isErrorEvent;
  function isDOMError(wat) {
    return Object.prototype.toString.call(wat) === "[object DOMError]";
  }
  exports2.isDOMError = isDOMError;
  function isDOMException(wat) {
    return Object.prototype.toString.call(wat) === "[object DOMException]";
  }
  exports2.isDOMException = isDOMException;
  function isString(wat) {
    return Object.prototype.toString.call(wat) === "[object String]";
  }
  exports2.isString = isString;
  function isPrimitive(wat) {
    return wat === null || typeof wat !== "object" && typeof wat !== "function";
  }
  exports2.isPrimitive = isPrimitive;
  function isPlainObject(wat) {
    return Object.prototype.toString.call(wat) === "[object Object]";
  }
  exports2.isPlainObject = isPlainObject;
  function isEvent(wat) {
    return typeof Event !== "undefined" && isInstanceOf(wat, Event);
  }
  exports2.isEvent = isEvent;
  function isElement(wat) {
    return typeof Element !== "undefined" && isInstanceOf(wat, Element);
  }
  exports2.isElement = isElement;
  function isRegExp(wat) {
    return Object.prototype.toString.call(wat) === "[object RegExp]";
  }
  exports2.isRegExp = isRegExp;
  function isThenable(wat) {
    return Boolean(wat && wat.then && typeof wat.then === "function");
  }
  exports2.isThenable = isThenable;
  function isSyntheticEvent(wat) {
    return isPlainObject(wat) && "nativeEvent" in wat && "preventDefault" in wat && "stopPropagation" in wat;
  }
  exports2.isSyntheticEvent = isSyntheticEvent;
  function isInstanceOf(wat, base) {
    try {
      return wat instanceof base;
    } catch (_e) {
      return false;
    }
  }
  exports2.isInstanceOf = isInstanceOf;
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/string.js
var require_string2 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var is_1 = require_is();
  function truncate(str, max) {
    if (max === void 0) {
      max = 0;
    }
    if (typeof str !== "string" || max === 0) {
      return str;
    }
    return str.length <= max ? str : str.substr(0, max) + "...";
  }
  exports2.truncate = truncate;
  function snipLine(line, colno) {
    var newLine = line;
    var ll = newLine.length;
    if (ll <= 150) {
      return newLine;
    }
    if (colno > ll) {
      colno = ll;
    }
    var start = Math.max(colno - 60, 0);
    if (start < 5) {
      start = 0;
    }
    var end = Math.min(start + 140, ll);
    if (end > ll - 5) {
      end = ll;
    }
    if (end === ll) {
      start = Math.max(end - 140, 0);
    }
    newLine = newLine.slice(start, end);
    if (start > 0) {
      newLine = "'{snip} " + newLine;
    }
    if (end < ll) {
      newLine += " {snip}";
    }
    return newLine;
  }
  exports2.snipLine = snipLine;
  function safeJoin(input, delimiter) {
    if (!Array.isArray(input)) {
      return "";
    }
    var output = [];
    for (var i = 0; i < input.length; i++) {
      var value = input[i];
      try {
        output.push(String(value));
      } catch (e) {
        output.push("[value cannot be serialized]");
      }
    }
    return output.join(delimiter);
  }
  exports2.safeJoin = safeJoin;
  function isMatchingPattern(value, pattern) {
    if (!is_1.isString(value)) {
      return false;
    }
    if (is_1.isRegExp(pattern)) {
      return pattern.test(value);
    }
    if (typeof pattern === "string") {
      return value.indexOf(pattern) !== -1;
    }
    return false;
  }
  exports2.isMatchingPattern = isMatchingPattern;
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/misc.js
var require_misc = __commonJS((exports2, module3) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var is_1 = require_is();
  var string_1 = require_string2();
  function dynamicRequire(mod, request) {
    return mod.require(request);
  }
  exports2.dynamicRequire = dynamicRequire;
  function isNodeEnv() {
    return Object.prototype.toString.call(typeof process !== "undefined" ? process : 0) === "[object process]";
  }
  exports2.isNodeEnv = isNodeEnv;
  var fallbackGlobalObject = {};
  function getGlobalObject() {
    return isNodeEnv() ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : fallbackGlobalObject;
  }
  exports2.getGlobalObject = getGlobalObject;
  function uuid4() {
    var global2 = getGlobalObject();
    var crypto = global2.crypto || global2.msCrypto;
    if (!(crypto === void 0) && crypto.getRandomValues) {
      var arr = new Uint16Array(8);
      crypto.getRandomValues(arr);
      arr[3] = arr[3] & 4095 | 16384;
      arr[4] = arr[4] & 16383 | 32768;
      var pad = function(num) {
        var v = num.toString(16);
        while (v.length < 4) {
          v = "0" + v;
        }
        return v;
      };
      return pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7]);
    }
    return "xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g, function(c) {
      var r = Math.random() * 16 | 0;
      var v = c === "x" ? r : r & 3 | 8;
      return v.toString(16);
    });
  }
  exports2.uuid4 = uuid4;
  function parseUrl(url) {
    if (!url) {
      return {};
    }
    var match = url.match(/^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);
    if (!match) {
      return {};
    }
    var query = match[6] || "";
    var fragment = match[8] || "";
    return {
      host: match[4],
      path: match[5],
      protocol: match[2],
      relative: match[5] + query + fragment
    };
  }
  exports2.parseUrl = parseUrl;
  function getEventDescription(event) {
    if (event.message) {
      return event.message;
    }
    if (event.exception && event.exception.values && event.exception.values[0]) {
      var exception = event.exception.values[0];
      if (exception.type && exception.value) {
        return exception.type + ": " + exception.value;
      }
      return exception.type || exception.value || event.event_id || "<unknown>";
    }
    return event.event_id || "<unknown>";
  }
  exports2.getEventDescription = getEventDescription;
  function consoleSandbox(callback) {
    var global2 = getGlobalObject();
    var levels = ["debug", "info", "warn", "error", "log", "assert"];
    if (!("console" in global2)) {
      return callback();
    }
    var originalConsole = global2.console;
    var wrappedLevels = {};
    levels.forEach(function(level) {
      if (level in global2.console && originalConsole[level].__sentry_original__) {
        wrappedLevels[level] = originalConsole[level];
        originalConsole[level] = originalConsole[level].__sentry_original__;
      }
    });
    var result = callback();
    Object.keys(wrappedLevels).forEach(function(level) {
      originalConsole[level] = wrappedLevels[level];
    });
    return result;
  }
  exports2.consoleSandbox = consoleSandbox;
  function addExceptionTypeValue(event, value, type) {
    event.exception = event.exception || {};
    event.exception.values = event.exception.values || [];
    event.exception.values[0] = event.exception.values[0] || {};
    event.exception.values[0].value = event.exception.values[0].value || value || "";
    event.exception.values[0].type = event.exception.values[0].type || type || "Error";
  }
  exports2.addExceptionTypeValue = addExceptionTypeValue;
  function addExceptionMechanism(event, mechanism) {
    if (mechanism === void 0) {
      mechanism = {};
    }
    try {
      event.exception.values[0].mechanism = event.exception.values[0].mechanism || {};
      Object.keys(mechanism).forEach(function(key) {
        event.exception.values[0].mechanism[key] = mechanism[key];
      });
    } catch (_oO) {
    }
  }
  exports2.addExceptionMechanism = addExceptionMechanism;
  function getLocationHref() {
    try {
      return document.location.href;
    } catch (oO) {
      return "";
    }
  }
  exports2.getLocationHref = getLocationHref;
  function htmlTreeAsString(elem) {
    try {
      var currentElem = elem;
      var MAX_TRAVERSE_HEIGHT = 5;
      var MAX_OUTPUT_LEN = 80;
      var out = [];
      var height = 0;
      var len = 0;
      var separator = " > ";
      var sepLength = separator.length;
      var nextStr = void 0;
      while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {
        nextStr = _htmlElementAsString(currentElem);
        if (nextStr === "html" || height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN) {
          break;
        }
        out.push(nextStr);
        len += nextStr.length;
        currentElem = currentElem.parentNode;
      }
      return out.reverse().join(separator);
    } catch (_oO) {
      return "<unknown>";
    }
  }
  exports2.htmlTreeAsString = htmlTreeAsString;
  function _htmlElementAsString(el) {
    var elem = el;
    var out = [];
    var className;
    var classes;
    var key;
    var attr;
    var i;
    if (!elem || !elem.tagName) {
      return "";
    }
    out.push(elem.tagName.toLowerCase());
    if (elem.id) {
      out.push("#" + elem.id);
    }
    className = elem.className;
    if (className && is_1.isString(className)) {
      classes = className.split(/\s+/);
      for (i = 0; i < classes.length; i++) {
        out.push("." + classes[i]);
      }
    }
    var attrWhitelist = ["type", "name", "title", "alt"];
    for (i = 0; i < attrWhitelist.length; i++) {
      key = attrWhitelist[i];
      attr = elem.getAttribute(key);
      if (attr) {
        out.push("[" + key + '="' + attr + '"]');
      }
    }
    return out.join("");
  }
  var INITIAL_TIME = Date.now();
  var prevNow = 0;
  var performanceFallback = {
    now: function() {
      var now = Date.now() - INITIAL_TIME;
      if (now < prevNow) {
        now = prevNow;
      }
      prevNow = now;
      return now;
    },
    timeOrigin: INITIAL_TIME
  };
  exports2.crossPlatformPerformance = function() {
    if (isNodeEnv()) {
      try {
        var perfHooks = dynamicRequire(module3, "perf_hooks");
        return perfHooks.performance;
      } catch (_2) {
        return performanceFallback;
      }
    }
    if (getGlobalObject().performance) {
      if (performance.timeOrigin === void 0) {
        performance.timeOrigin = performance.timing && performance.timing.navigationStart || INITIAL_TIME;
      }
    }
    return getGlobalObject().performance || performanceFallback;
  }();
  function timestampWithMs() {
    return (exports2.crossPlatformPerformance.timeOrigin + exports2.crossPlatformPerformance.now()) / 1e3;
  }
  exports2.timestampWithMs = timestampWithMs;
  var SEMVER_REGEXP = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/;
  function parseSemver(input) {
    var match = input.match(SEMVER_REGEXP) || [];
    var major = parseInt(match[1], 10);
    var minor = parseInt(match[2], 10);
    var patch = parseInt(match[3], 10);
    return {
      buildmetadata: match[5],
      major: isNaN(major) ? void 0 : major,
      minor: isNaN(minor) ? void 0 : minor,
      patch: isNaN(patch) ? void 0 : patch,
      prerelease: match[4]
    };
  }
  exports2.parseSemver = parseSemver;
  var defaultRetryAfter = 60 * 1e3;
  function parseRetryAfterHeader(now, header) {
    if (!header) {
      return defaultRetryAfter;
    }
    var headerDelay = parseInt("" + header, 10);
    if (!isNaN(headerDelay)) {
      return headerDelay * 1e3;
    }
    var headerDate = Date.parse("" + header);
    if (!isNaN(headerDate)) {
      return headerDate - now;
    }
    return defaultRetryAfter;
  }
  exports2.parseRetryAfterHeader = parseRetryAfterHeader;
  var defaultFunctionName = "<anonymous>";
  function getFunctionName(fn) {
    try {
      if (!fn || typeof fn !== "function") {
        return defaultFunctionName;
      }
      return fn.name || defaultFunctionName;
    } catch (e) {
      return defaultFunctionName;
    }
  }
  exports2.getFunctionName = getFunctionName;
  function addContextToFrame(lines, frame, linesOfContext) {
    if (linesOfContext === void 0) {
      linesOfContext = 5;
    }
    var lineno = frame.lineno || 0;
    var maxLines = lines.length;
    var sourceLine = Math.max(Math.min(maxLines, lineno - 1), 0);
    frame.pre_context = lines.slice(Math.max(0, sourceLine - linesOfContext), sourceLine).map(function(line) {
      return string_1.snipLine(line, 0);
    });
    frame.context_line = string_1.snipLine(lines[Math.min(maxLines - 1, sourceLine)], frame.colno || 0);
    frame.post_context = lines.slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext).map(function(line) {
      return string_1.snipLine(line, 0);
    });
  }
  exports2.addContextToFrame = addContextToFrame;
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/logger.js
var require_logger = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var misc_1 = require_misc();
  var global2 = misc_1.getGlobalObject();
  var PREFIX = "Sentry Logger ";
  var Logger = function() {
    function Logger2() {
      this._enabled = false;
    }
    Logger2.prototype.disable = function() {
      this._enabled = false;
    };
    Logger2.prototype.enable = function() {
      this._enabled = true;
    };
    Logger2.prototype.log = function() {
      var args2 = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args2[_i] = arguments[_i];
      }
      if (!this._enabled) {
        return;
      }
      misc_1.consoleSandbox(function() {
        global2.console.log(PREFIX + "[Log]: " + args2.join(" "));
      });
    };
    Logger2.prototype.warn = function() {
      var args2 = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args2[_i] = arguments[_i];
      }
      if (!this._enabled) {
        return;
      }
      misc_1.consoleSandbox(function() {
        global2.console.warn(PREFIX + "[Warn]: " + args2.join(" "));
      });
    };
    Logger2.prototype.error = function() {
      var args2 = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args2[_i] = arguments[_i];
      }
      if (!this._enabled) {
        return;
      }
      misc_1.consoleSandbox(function() {
        global2.console.error(PREFIX + "[Error]: " + args2.join(" "));
      });
    };
    return Logger2;
  }();
  global2.__SENTRY__ = global2.__SENTRY__ || {};
  var logger = global2.__SENTRY__.logger || (global2.__SENTRY__.logger = new Logger());
  exports2.logger = logger;
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/memo.js
var require_memo = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var Memo = function() {
    function Memo2() {
      this._hasWeakSet = typeof WeakSet === "function";
      this._inner = this._hasWeakSet ? new WeakSet() : [];
    }
    Memo2.prototype.memoize = function(obj) {
      if (this._hasWeakSet) {
        if (this._inner.has(obj)) {
          return true;
        }
        this._inner.add(obj);
        return false;
      }
      for (var i = 0; i < this._inner.length; i++) {
        var value = this._inner[i];
        if (value === obj) {
          return true;
        }
      }
      this._inner.push(obj);
      return false;
    };
    Memo2.prototype.unmemoize = function(obj) {
      if (this._hasWeakSet) {
        this._inner.delete(obj);
      } else {
        for (var i = 0; i < this._inner.length; i++) {
          if (this._inner[i] === obj) {
            this._inner.splice(i, 1);
            break;
          }
        }
      }
    };
    return Memo2;
  }();
  exports2.Memo = Memo;
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/object.js
var require_object = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var is_1 = require_is();
  var memo_1 = require_memo();
  var misc_1 = require_misc();
  var string_1 = require_string2();
  function fill(source, name, replacement) {
    if (!(name in source)) {
      return;
    }
    var original = source[name];
    var wrapped = replacement(original);
    if (typeof wrapped === "function") {
      try {
        wrapped.prototype = wrapped.prototype || {};
        Object.defineProperties(wrapped, {
          __sentry_original__: {
            enumerable: false,
            value: original
          }
        });
      } catch (_Oo) {
      }
    }
    source[name] = wrapped;
  }
  exports2.fill = fill;
  function urlEncode(object) {
    return Object.keys(object).map(function(key) {
      return encodeURIComponent(key) + "=" + encodeURIComponent(object[key]);
    }).join("&");
  }
  exports2.urlEncode = urlEncode;
  function getWalkSource(value) {
    if (is_1.isError(value)) {
      var error = value;
      var err = {
        message: error.message,
        name: error.name,
        stack: error.stack
      };
      for (var i in error) {
        if (Object.prototype.hasOwnProperty.call(error, i)) {
          err[i] = error[i];
        }
      }
      return err;
    }
    if (is_1.isEvent(value)) {
      var event_1 = value;
      var source = {};
      source.type = event_1.type;
      try {
        source.target = is_1.isElement(event_1.target) ? misc_1.htmlTreeAsString(event_1.target) : Object.prototype.toString.call(event_1.target);
      } catch (_oO) {
        source.target = "<unknown>";
      }
      try {
        source.currentTarget = is_1.isElement(event_1.currentTarget) ? misc_1.htmlTreeAsString(event_1.currentTarget) : Object.prototype.toString.call(event_1.currentTarget);
      } catch (_oO) {
        source.currentTarget = "<unknown>";
      }
      if (typeof CustomEvent !== "undefined" && is_1.isInstanceOf(value, CustomEvent)) {
        source.detail = event_1.detail;
      }
      for (var i in event_1) {
        if (Object.prototype.hasOwnProperty.call(event_1, i)) {
          source[i] = event_1;
        }
      }
      return source;
    }
    return value;
  }
  function utf8Length(value) {
    return ~-encodeURI(value).split(/%..|./).length;
  }
  function jsonSize(value) {
    return utf8Length(JSON.stringify(value));
  }
  function normalizeToSize(object, depth, maxSize) {
    if (depth === void 0) {
      depth = 3;
    }
    if (maxSize === void 0) {
      maxSize = 100 * 1024;
    }
    var serialized = normalize(object, depth);
    if (jsonSize(serialized) > maxSize) {
      return normalizeToSize(object, depth - 1, maxSize);
    }
    return serialized;
  }
  exports2.normalizeToSize = normalizeToSize;
  function serializeValue(value) {
    var type = Object.prototype.toString.call(value);
    if (typeof value === "string") {
      return value;
    }
    if (type === "[object Object]") {
      return "[Object]";
    }
    if (type === "[object Array]") {
      return "[Array]";
    }
    var normalized = normalizeValue(value);
    return is_1.isPrimitive(normalized) ? normalized : type;
  }
  function normalizeValue(value, key) {
    if (key === "domain" && value && typeof value === "object" && value._events) {
      return "[Domain]";
    }
    if (key === "domainEmitter") {
      return "[DomainEmitter]";
    }
    if (typeof global !== "undefined" && value === global) {
      return "[Global]";
    }
    if (typeof window !== "undefined" && value === window) {
      return "[Window]";
    }
    if (typeof document !== "undefined" && value === document) {
      return "[Document]";
    }
    if (is_1.isSyntheticEvent(value)) {
      return "[SyntheticEvent]";
    }
    if (typeof value === "number" && value !== value) {
      return "[NaN]";
    }
    if (value === void 0) {
      return "[undefined]";
    }
    if (typeof value === "function") {
      return "[Function: " + misc_1.getFunctionName(value) + "]";
    }
    return value;
  }
  function walk(key, value, depth, memo) {
    if (depth === void 0) {
      depth = Infinity;
    }
    if (memo === void 0) {
      memo = new memo_1.Memo();
    }
    if (depth === 0) {
      return serializeValue(value);
    }
    if (value !== null && value !== void 0 && typeof value.toJSON === "function") {
      return value.toJSON();
    }
    var normalized = normalizeValue(value, key);
    if (is_1.isPrimitive(normalized)) {
      return normalized;
    }
    var source = getWalkSource(value);
    var acc = Array.isArray(value) ? [] : {};
    if (memo.memoize(value)) {
      return "[Circular ~]";
    }
    for (var innerKey in source) {
      if (!Object.prototype.hasOwnProperty.call(source, innerKey)) {
        continue;
      }
      acc[innerKey] = walk(innerKey, source[innerKey], depth - 1, memo);
    }
    memo.unmemoize(value);
    return acc;
  }
  exports2.walk = walk;
  function normalize(input, depth) {
    try {
      return JSON.parse(JSON.stringify(input, function(key, value) {
        return walk(key, value, depth);
      }));
    } catch (_oO) {
      return "**non-serializable**";
    }
  }
  exports2.normalize = normalize;
  function extractExceptionKeysForMessage(exception, maxLength) {
    if (maxLength === void 0) {
      maxLength = 40;
    }
    var keys = Object.keys(getWalkSource(exception));
    keys.sort();
    if (!keys.length) {
      return "[object has no keys]";
    }
    if (keys[0].length >= maxLength) {
      return string_1.truncate(keys[0], maxLength);
    }
    for (var includedKeys = keys.length; includedKeys > 0; includedKeys--) {
      var serialized = keys.slice(0, includedKeys).join(", ");
      if (serialized.length > maxLength) {
        continue;
      }
      if (includedKeys === keys.length) {
        return serialized;
      }
      return string_1.truncate(serialized, maxLength);
    }
    return "";
  }
  exports2.extractExceptionKeysForMessage = extractExceptionKeysForMessage;
  function dropUndefinedKeys(val) {
    var e_1, _a;
    if (is_1.isPlainObject(val)) {
      var obj = val;
      var rv = {};
      try {
        for (var _b = tslib_1.__values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
          var key = _c.value;
          if (typeof obj[key] !== "undefined") {
            rv[key] = dropUndefinedKeys(obj[key]);
          }
        }
      } catch (e_1_1) {
        e_1 = {error: e_1_1};
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return rv;
    }
    if (Array.isArray(val)) {
      return val.map(dropUndefinedKeys);
    }
    return val;
  }
  exports2.dropUndefinedKeys = dropUndefinedKeys;
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/path.js
var require_path2 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  function normalizeArray(parts, allowAboveRoot) {
    var up = 0;
    for (var i = parts.length - 1; i >= 0; i--) {
      var last = parts[i];
      if (last === ".") {
        parts.splice(i, 1);
      } else if (last === "..") {
        parts.splice(i, 1);
        up++;
      } else if (up) {
        parts.splice(i, 1);
        up--;
      }
    }
    if (allowAboveRoot) {
      for (; up--; up) {
        parts.unshift("..");
      }
    }
    return parts;
  }
  var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
  function splitPath(filename) {
    var parts = splitPathRe.exec(filename);
    return parts ? parts.slice(1) : [];
  }
  function resolve() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    var resolvedPath = "";
    var resolvedAbsolute = false;
    for (var i = args2.length - 1; i >= -1 && !resolvedAbsolute; i--) {
      var path19 = i >= 0 ? args2[i] : "/";
      if (!path19) {
        continue;
      }
      resolvedPath = path19 + "/" + resolvedPath;
      resolvedAbsolute = path19.charAt(0) === "/";
    }
    resolvedPath = normalizeArray(resolvedPath.split("/").filter(function(p) {
      return !!p;
    }), !resolvedAbsolute).join("/");
    return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
  }
  exports2.resolve = resolve;
  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== "") {
        break;
      }
    }
    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== "") {
        break;
      }
    }
    if (start > end) {
      return [];
    }
    return arr.slice(start, end - start + 1);
  }
  function relative(from, to) {
    from = resolve(from).substr(1);
    to = resolve(to).substr(1);
    var fromParts = trim(from.split("/"));
    var toParts = trim(to.split("/"));
    var length = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length;
    for (var i = 0; i < length; i++) {
      if (fromParts[i] !== toParts[i]) {
        samePartsLength = i;
        break;
      }
    }
    var outputParts = [];
    for (var i = samePartsLength; i < fromParts.length; i++) {
      outputParts.push("..");
    }
    outputParts = outputParts.concat(toParts.slice(samePartsLength));
    return outputParts.join("/");
  }
  exports2.relative = relative;
  function normalizePath(path19) {
    var isPathAbsolute = isAbsolute(path19);
    var trailingSlash = path19.substr(-1) === "/";
    var normalizedPath = normalizeArray(path19.split("/").filter(function(p) {
      return !!p;
    }), !isPathAbsolute).join("/");
    if (!normalizedPath && !isPathAbsolute) {
      normalizedPath = ".";
    }
    if (normalizedPath && trailingSlash) {
      normalizedPath += "/";
    }
    return (isPathAbsolute ? "/" : "") + normalizedPath;
  }
  exports2.normalizePath = normalizePath;
  function isAbsolute(path19) {
    return path19.charAt(0) === "/";
  }
  exports2.isAbsolute = isAbsolute;
  function join() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    return normalizePath(args2.join("/"));
  }
  exports2.join = join;
  function dirname(path19) {
    var result = splitPath(path19);
    var root = result[0];
    var dir = result[1];
    if (!root && !dir) {
      return ".";
    }
    if (dir) {
      dir = dir.substr(0, dir.length - 1);
    }
    return root + dir;
  }
  exports2.dirname = dirname;
  function basename(path19, ext) {
    var f = splitPath(path19)[2];
    if (ext && f.substr(ext.length * -1) === ext) {
      f = f.substr(0, f.length - ext.length);
    }
    return f;
  }
  exports2.basename = basename;
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/syncpromise.js
var require_syncpromise = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var is_1 = require_is();
  var States;
  (function(States2) {
    States2["PENDING"] = "PENDING";
    States2["RESOLVED"] = "RESOLVED";
    States2["REJECTED"] = "REJECTED";
  })(States || (States = {}));
  var SyncPromise = function() {
    function SyncPromise2(executor) {
      var _this = this;
      this._state = States.PENDING;
      this._handlers = [];
      this._resolve = function(value) {
        _this._setResult(States.RESOLVED, value);
      };
      this._reject = function(reason) {
        _this._setResult(States.REJECTED, reason);
      };
      this._setResult = function(state, value) {
        if (_this._state !== States.PENDING) {
          return;
        }
        if (is_1.isThenable(value)) {
          value.then(_this._resolve, _this._reject);
          return;
        }
        _this._state = state;
        _this._value = value;
        _this._executeHandlers();
      };
      this._attachHandler = function(handler) {
        _this._handlers = _this._handlers.concat(handler);
        _this._executeHandlers();
      };
      this._executeHandlers = function() {
        if (_this._state === States.PENDING) {
          return;
        }
        var cachedHandlers = _this._handlers.slice();
        _this._handlers = [];
        cachedHandlers.forEach(function(handler) {
          if (handler.done) {
            return;
          }
          if (_this._state === States.RESOLVED) {
            if (handler.onfulfilled) {
              handler.onfulfilled(_this._value);
            }
          }
          if (_this._state === States.REJECTED) {
            if (handler.onrejected) {
              handler.onrejected(_this._value);
            }
          }
          handler.done = true;
        });
      };
      try {
        executor(this._resolve, this._reject);
      } catch (e) {
        this._reject(e);
      }
    }
    SyncPromise2.prototype.toString = function() {
      return "[object SyncPromise]";
    };
    SyncPromise2.resolve = function(value) {
      return new SyncPromise2(function(resolve) {
        resolve(value);
      });
    };
    SyncPromise2.reject = function(reason) {
      return new SyncPromise2(function(_2, reject) {
        reject(reason);
      });
    };
    SyncPromise2.all = function(collection) {
      return new SyncPromise2(function(resolve, reject) {
        if (!Array.isArray(collection)) {
          reject(new TypeError("Promise.all requires an array as input."));
          return;
        }
        if (collection.length === 0) {
          resolve([]);
          return;
        }
        var counter = collection.length;
        var resolvedCollection = [];
        collection.forEach(function(item, index) {
          SyncPromise2.resolve(item).then(function(value) {
            resolvedCollection[index] = value;
            counter -= 1;
            if (counter !== 0) {
              return;
            }
            resolve(resolvedCollection);
          }).then(null, reject);
        });
      });
    };
    SyncPromise2.prototype.then = function(onfulfilled, onrejected) {
      var _this = this;
      return new SyncPromise2(function(resolve, reject) {
        _this._attachHandler({
          done: false,
          onfulfilled: function(result) {
            if (!onfulfilled) {
              resolve(result);
              return;
            }
            try {
              resolve(onfulfilled(result));
              return;
            } catch (e) {
              reject(e);
              return;
            }
          },
          onrejected: function(reason) {
            if (!onrejected) {
              reject(reason);
              return;
            }
            try {
              resolve(onrejected(reason));
              return;
            } catch (e) {
              reject(e);
              return;
            }
          }
        });
      });
    };
    SyncPromise2.prototype.catch = function(onrejected) {
      return this.then(function(val) {
        return val;
      }, onrejected);
    };
    SyncPromise2.prototype.finally = function(onfinally) {
      var _this = this;
      return new SyncPromise2(function(resolve, reject) {
        var val;
        var isRejected;
        return _this.then(function(value) {
          isRejected = false;
          val = value;
          if (onfinally) {
            onfinally();
          }
        }, function(reason) {
          isRejected = true;
          val = reason;
          if (onfinally) {
            onfinally();
          }
        }).then(function() {
          if (isRejected) {
            reject(val);
            return;
          }
          resolve(val);
        });
      });
    };
    return SyncPromise2;
  }();
  exports2.SyncPromise = SyncPromise;
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/promisebuffer.js
var require_promisebuffer = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var error_1 = require_error4();
  var syncpromise_1 = require_syncpromise();
  var PromiseBuffer = function() {
    function PromiseBuffer2(_limit) {
      this._limit = _limit;
      this._buffer = [];
    }
    PromiseBuffer2.prototype.isReady = function() {
      return this._limit === void 0 || this.length() < this._limit;
    };
    PromiseBuffer2.prototype.add = function(task) {
      var _this = this;
      if (!this.isReady()) {
        return syncpromise_1.SyncPromise.reject(new error_1.SentryError("Not adding Promise due to buffer limit reached."));
      }
      if (this._buffer.indexOf(task) === -1) {
        this._buffer.push(task);
      }
      task.then(function() {
        return _this.remove(task);
      }).then(null, function() {
        return _this.remove(task).then(null, function() {
        });
      });
      return task;
    };
    PromiseBuffer2.prototype.remove = function(task) {
      var removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];
      return removedTask;
    };
    PromiseBuffer2.prototype.length = function() {
      return this._buffer.length;
    };
    PromiseBuffer2.prototype.drain = function(timeout) {
      var _this = this;
      return new syncpromise_1.SyncPromise(function(resolve) {
        var capturedSetTimeout = setTimeout(function() {
          if (timeout && timeout > 0) {
            resolve(false);
          }
        }, timeout);
        syncpromise_1.SyncPromise.all(_this._buffer).then(function() {
          clearTimeout(capturedSetTimeout);
          resolve(true);
        }).then(null, function() {
          resolve(true);
        });
      });
    };
    return PromiseBuffer2;
  }();
  exports2.PromiseBuffer = PromiseBuffer;
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/supports.js
var require_supports = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var logger_1 = require_logger();
  var misc_1 = require_misc();
  function supportsErrorEvent() {
    try {
      new ErrorEvent("");
      return true;
    } catch (e) {
      return false;
    }
  }
  exports2.supportsErrorEvent = supportsErrorEvent;
  function supportsDOMError() {
    try {
      new DOMError("");
      return true;
    } catch (e) {
      return false;
    }
  }
  exports2.supportsDOMError = supportsDOMError;
  function supportsDOMException() {
    try {
      new DOMException("");
      return true;
    } catch (e) {
      return false;
    }
  }
  exports2.supportsDOMException = supportsDOMException;
  function supportsFetch() {
    if (!("fetch" in misc_1.getGlobalObject())) {
      return false;
    }
    try {
      new Headers();
      new Request("");
      new Response();
      return true;
    } catch (e) {
      return false;
    }
  }
  exports2.supportsFetch = supportsFetch;
  function isNativeFetch(func) {
    return func && /^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(func.toString());
  }
  function supportsNativeFetch() {
    if (!supportsFetch()) {
      return false;
    }
    var global2 = misc_1.getGlobalObject();
    if (isNativeFetch(global2.fetch)) {
      return true;
    }
    var result = false;
    var doc = global2.document;
    if (doc && typeof doc.createElement === "function") {
      try {
        var sandbox = doc.createElement("iframe");
        sandbox.hidden = true;
        doc.head.appendChild(sandbox);
        if (sandbox.contentWindow && sandbox.contentWindow.fetch) {
          result = isNativeFetch(sandbox.contentWindow.fetch);
        }
        doc.head.removeChild(sandbox);
      } catch (err) {
        logger_1.logger.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ", err);
      }
    }
    return result;
  }
  exports2.supportsNativeFetch = supportsNativeFetch;
  function supportsReportingObserver() {
    return "ReportingObserver" in misc_1.getGlobalObject();
  }
  exports2.supportsReportingObserver = supportsReportingObserver;
  function supportsReferrerPolicy() {
    if (!supportsFetch()) {
      return false;
    }
    try {
      new Request("_", {
        referrerPolicy: "origin"
      });
      return true;
    } catch (e) {
      return false;
    }
  }
  exports2.supportsReferrerPolicy = supportsReferrerPolicy;
  function supportsHistory() {
    var global2 = misc_1.getGlobalObject();
    var chrome2 = global2.chrome;
    var isChromePackagedApp = chrome2 && chrome2.app && chrome2.app.runtime;
    var hasHistoryApi = "history" in global2 && !!global2.history.pushState && !!global2.history.replaceState;
    return !isChromePackagedApp && hasHistoryApi;
  }
  exports2.supportsHistory = supportsHistory;
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/instrument.js
var require_instrument = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var is_1 = require_is();
  var logger_1 = require_logger();
  var misc_1 = require_misc();
  var object_1 = require_object();
  var supports_1 = require_supports();
  var global2 = misc_1.getGlobalObject();
  var handlers = {};
  var instrumented = {};
  function instrument(type) {
    if (instrumented[type]) {
      return;
    }
    instrumented[type] = true;
    switch (type) {
      case "console":
        instrumentConsole();
        break;
      case "dom":
        instrumentDOM();
        break;
      case "xhr":
        instrumentXHR();
        break;
      case "fetch":
        instrumentFetch();
        break;
      case "history":
        instrumentHistory();
        break;
      case "error":
        instrumentError();
        break;
      case "unhandledrejection":
        instrumentUnhandledRejection();
        break;
      default:
        logger_1.logger.warn("unknown instrumentation type:", type);
    }
  }
  function addInstrumentationHandler(handler) {
    if (!handler || typeof handler.type !== "string" || typeof handler.callback !== "function") {
      return;
    }
    handlers[handler.type] = handlers[handler.type] || [];
    handlers[handler.type].push(handler.callback);
    instrument(handler.type);
  }
  exports2.addInstrumentationHandler = addInstrumentationHandler;
  function triggerHandlers(type, data) {
    var e_1, _a;
    if (!type || !handlers[type]) {
      return;
    }
    try {
      for (var _b = tslib_1.__values(handlers[type] || []), _c = _b.next(); !_c.done; _c = _b.next()) {
        var handler = _c.value;
        try {
          handler(data);
        } catch (e) {
          logger_1.logger.error("Error while triggering instrumentation handler.\nType: " + type + "\nName: " + misc_1.getFunctionName(handler) + "\nError: " + e);
        }
      }
    } catch (e_1_1) {
      e_1 = {error: e_1_1};
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  }
  function instrumentConsole() {
    if (!("console" in global2)) {
      return;
    }
    ["debug", "info", "warn", "error", "log", "assert"].forEach(function(level) {
      if (!(level in global2.console)) {
        return;
      }
      object_1.fill(global2.console, level, function(originalConsoleLevel) {
        return function() {
          var args2 = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args2[_i] = arguments[_i];
          }
          triggerHandlers("console", {args: args2, level});
          if (originalConsoleLevel) {
            Function.prototype.apply.call(originalConsoleLevel, global2.console, args2);
          }
        };
      });
    });
  }
  function instrumentFetch() {
    if (!supports_1.supportsNativeFetch()) {
      return;
    }
    object_1.fill(global2, "fetch", function(originalFetch) {
      return function() {
        var args2 = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args2[_i] = arguments[_i];
        }
        var commonHandlerData = {
          args: args2,
          fetchData: {
            method: getFetchMethod(args2),
            url: getFetchUrl(args2)
          },
          startTimestamp: Date.now()
        };
        triggerHandlers("fetch", tslib_1.__assign({}, commonHandlerData));
        return originalFetch.apply(global2, args2).then(function(response) {
          triggerHandlers("fetch", tslib_1.__assign({}, commonHandlerData, {endTimestamp: Date.now(), response}));
          return response;
        }, function(error) {
          triggerHandlers("fetch", tslib_1.__assign({}, commonHandlerData, {endTimestamp: Date.now(), error}));
          throw error;
        });
      };
    });
  }
  function getFetchMethod(fetchArgs) {
    if (fetchArgs === void 0) {
      fetchArgs = [];
    }
    if ("Request" in global2 && is_1.isInstanceOf(fetchArgs[0], Request) && fetchArgs[0].method) {
      return String(fetchArgs[0].method).toUpperCase();
    }
    if (fetchArgs[1] && fetchArgs[1].method) {
      return String(fetchArgs[1].method).toUpperCase();
    }
    return "GET";
  }
  function getFetchUrl(fetchArgs) {
    if (fetchArgs === void 0) {
      fetchArgs = [];
    }
    if (typeof fetchArgs[0] === "string") {
      return fetchArgs[0];
    }
    if ("Request" in global2 && is_1.isInstanceOf(fetchArgs[0], Request)) {
      return fetchArgs[0].url;
    }
    return String(fetchArgs[0]);
  }
  function instrumentXHR() {
    if (!("XMLHttpRequest" in global2)) {
      return;
    }
    var xhrproto = XMLHttpRequest.prototype;
    object_1.fill(xhrproto, "open", function(originalOpen) {
      return function() {
        var args2 = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args2[_i] = arguments[_i];
        }
        var url = args2[1];
        this.__sentry_xhr__ = {
          method: is_1.isString(args2[0]) ? args2[0].toUpperCase() : args2[0],
          url: args2[1]
        };
        if (is_1.isString(url) && this.__sentry_xhr__.method === "POST" && url.match(/sentry_key/)) {
          this.__sentry_own_request__ = true;
        }
        return originalOpen.apply(this, args2);
      };
    });
    object_1.fill(xhrproto, "send", function(originalSend) {
      return function() {
        var args2 = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args2[_i] = arguments[_i];
        }
        var xhr = this;
        var commonHandlerData = {
          args: args2,
          startTimestamp: Date.now(),
          xhr
        };
        triggerHandlers("xhr", tslib_1.__assign({}, commonHandlerData));
        xhr.addEventListener("readystatechange", function() {
          if (xhr.readyState === 4) {
            try {
              if (xhr.__sentry_xhr__) {
                xhr.__sentry_xhr__.status_code = xhr.status;
              }
            } catch (e) {
            }
            triggerHandlers("xhr", tslib_1.__assign({}, commonHandlerData, {endTimestamp: Date.now()}));
          }
        });
        return originalSend.apply(this, args2);
      };
    });
  }
  var lastHref;
  function instrumentHistory() {
    if (!supports_1.supportsHistory()) {
      return;
    }
    var oldOnPopState = global2.onpopstate;
    global2.onpopstate = function() {
      var args2 = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args2[_i] = arguments[_i];
      }
      var to = global2.location.href;
      var from = lastHref;
      lastHref = to;
      triggerHandlers("history", {
        from,
        to
      });
      if (oldOnPopState) {
        return oldOnPopState.apply(this, args2);
      }
    };
    function historyReplacementFunction(originalHistoryFunction) {
      return function() {
        var args2 = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args2[_i] = arguments[_i];
        }
        var url = args2.length > 2 ? args2[2] : void 0;
        if (url) {
          var from = lastHref;
          var to = String(url);
          lastHref = to;
          triggerHandlers("history", {
            from,
            to
          });
        }
        return originalHistoryFunction.apply(this, args2);
      };
    }
    object_1.fill(global2.history, "pushState", historyReplacementFunction);
    object_1.fill(global2.history, "replaceState", historyReplacementFunction);
  }
  function instrumentDOM() {
    if (!("document" in global2)) {
      return;
    }
    global2.document.addEventListener("click", domEventHandler("click", triggerHandlers.bind(null, "dom")), false);
    global2.document.addEventListener("keypress", keypressEventHandler(triggerHandlers.bind(null, "dom")), false);
    ["EventTarget", "Node"].forEach(function(target) {
      var proto = global2[target] && global2[target].prototype;
      if (!proto || !proto.hasOwnProperty || !proto.hasOwnProperty("addEventListener")) {
        return;
      }
      object_1.fill(proto, "addEventListener", function(original) {
        return function(eventName, fn, options) {
          if (fn && fn.handleEvent) {
            if (eventName === "click") {
              object_1.fill(fn, "handleEvent", function(innerOriginal) {
                return function(event) {
                  domEventHandler("click", triggerHandlers.bind(null, "dom"))(event);
                  return innerOriginal.call(this, event);
                };
              });
            }
            if (eventName === "keypress") {
              object_1.fill(fn, "handleEvent", function(innerOriginal) {
                return function(event) {
                  keypressEventHandler(triggerHandlers.bind(null, "dom"))(event);
                  return innerOriginal.call(this, event);
                };
              });
            }
          } else {
            if (eventName === "click") {
              domEventHandler("click", triggerHandlers.bind(null, "dom"), true)(this);
            }
            if (eventName === "keypress") {
              keypressEventHandler(triggerHandlers.bind(null, "dom"))(this);
            }
          }
          return original.call(this, eventName, fn, options);
        };
      });
      object_1.fill(proto, "removeEventListener", function(original) {
        return function(eventName, fn, options) {
          var callback = fn;
          try {
            callback = callback && (callback.__sentry_wrapped__ || callback);
          } catch (e) {
          }
          return original.call(this, eventName, callback, options);
        };
      });
    });
  }
  var debounceDuration = 1e3;
  var debounceTimer = 0;
  var keypressTimeout;
  var lastCapturedEvent;
  function domEventHandler(name, handler, debounce) {
    if (debounce === void 0) {
      debounce = false;
    }
    return function(event) {
      keypressTimeout = void 0;
      if (!event || lastCapturedEvent === event) {
        return;
      }
      lastCapturedEvent = event;
      if (debounceTimer) {
        clearTimeout(debounceTimer);
      }
      if (debounce) {
        debounceTimer = setTimeout(function() {
          handler({event, name});
        });
      } else {
        handler({event, name});
      }
    };
  }
  function keypressEventHandler(handler) {
    return function(event) {
      var target;
      try {
        target = event.target;
      } catch (e) {
        return;
      }
      var tagName = target && target.tagName;
      if (!tagName || tagName !== "INPUT" && tagName !== "TEXTAREA" && !target.isContentEditable) {
        return;
      }
      if (!keypressTimeout) {
        domEventHandler("input", handler)(event);
      }
      clearTimeout(keypressTimeout);
      keypressTimeout = setTimeout(function() {
        keypressTimeout = void 0;
      }, debounceDuration);
    };
  }
  var _oldOnErrorHandler = null;
  function instrumentError() {
    _oldOnErrorHandler = global2.onerror;
    global2.onerror = function(msg, url, line, column, error) {
      triggerHandlers("error", {
        column,
        error,
        line,
        msg,
        url
      });
      if (_oldOnErrorHandler) {
        return _oldOnErrorHandler.apply(this, arguments);
      }
      return false;
    };
  }
  var _oldOnUnhandledRejectionHandler = null;
  function instrumentUnhandledRejection() {
    _oldOnUnhandledRejectionHandler = global2.onunhandledrejection;
    global2.onunhandledrejection = function(e) {
      triggerHandlers("unhandledrejection", e);
      if (_oldOnUnhandledRejectionHandler) {
        return _oldOnUnhandledRejectionHandler.apply(this, arguments);
      }
      return true;
    };
  }
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/dsn.js
var require_dsn = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var error_1 = require_error4();
  var DSN_REGEX = /^(?:(\w+):)\/\/(?:(\w+)(?::(\w+))?@)([\w\.-]+)(?::(\d+))?\/(.+)/;
  var ERROR_MESSAGE = "Invalid Dsn";
  var Dsn = function() {
    function Dsn2(from) {
      if (typeof from === "string") {
        this._fromString(from);
      } else {
        this._fromComponents(from);
      }
      this._validate();
    }
    Dsn2.prototype.toString = function(withPassword) {
      if (withPassword === void 0) {
        withPassword = false;
      }
      var _a = this, host = _a.host, path19 = _a.path, pass = _a.pass, port = _a.port, projectId = _a.projectId, protocol = _a.protocol, user = _a.user;
      return protocol + "://" + user + (withPassword && pass ? ":" + pass : "") + ("@" + host + (port ? ":" + port : "") + "/" + (path19 ? path19 + "/" : path19) + projectId);
    };
    Dsn2.prototype._fromString = function(str) {
      var match = DSN_REGEX.exec(str);
      if (!match) {
        throw new error_1.SentryError(ERROR_MESSAGE);
      }
      var _a = tslib_1.__read(match.slice(1), 6), protocol = _a[0], user = _a[1], _b = _a[2], pass = _b === void 0 ? "" : _b, host = _a[3], _c = _a[4], port = _c === void 0 ? "" : _c, lastPath = _a[5];
      var path19 = "";
      var projectId = lastPath;
      var split = projectId.split("/");
      if (split.length > 1) {
        path19 = split.slice(0, -1).join("/");
        projectId = split.pop();
      }
      this._fromComponents({host, pass, path: path19, projectId, port, protocol, user});
    };
    Dsn2.prototype._fromComponents = function(components) {
      this.protocol = components.protocol;
      this.user = components.user;
      this.pass = components.pass || "";
      this.host = components.host;
      this.port = components.port || "";
      this.path = components.path || "";
      this.projectId = components.projectId;
    };
    Dsn2.prototype._validate = function() {
      var _this = this;
      ["protocol", "user", "host", "projectId"].forEach(function(component) {
        if (!_this[component]) {
          throw new error_1.SentryError(ERROR_MESSAGE);
        }
      });
      if (this.protocol !== "http" && this.protocol !== "https") {
        throw new error_1.SentryError(ERROR_MESSAGE);
      }
      if (this.port && isNaN(parseInt(this.port, 10))) {
        throw new error_1.SentryError(ERROR_MESSAGE);
      }
    };
    return Dsn2;
  }();
  exports2.Dsn = Dsn;
});

// ../../node_modules/.pnpm/@sentry/utils@5.15.5/node_modules/@sentry/utils/dist/index.js
var require_dist15 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  tslib_1.__exportStar(require_async8(), exports2);
  tslib_1.__exportStar(require_error4(), exports2);
  tslib_1.__exportStar(require_is(), exports2);
  tslib_1.__exportStar(require_logger(), exports2);
  tslib_1.__exportStar(require_memo(), exports2);
  tslib_1.__exportStar(require_misc(), exports2);
  tslib_1.__exportStar(require_object(), exports2);
  tslib_1.__exportStar(require_path2(), exports2);
  tslib_1.__exportStar(require_promisebuffer(), exports2);
  tslib_1.__exportStar(require_string2(), exports2);
  tslib_1.__exportStar(require_supports(), exports2);
  tslib_1.__exportStar(require_syncpromise(), exports2);
  tslib_1.__exportStar(require_instrument(), exports2);
  tslib_1.__exportStar(require_dsn(), exports2);
});

// ../../node_modules/.pnpm/@sentry/hub@5.15.5/node_modules/@sentry/hub/dist/scope.js
var require_scope = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var utils_1 = require_dist15();
  var Scope = function() {
    function Scope2() {
      this._notifyingListeners = false;
      this._scopeListeners = [];
      this._eventProcessors = [];
      this._breadcrumbs = [];
      this._user = {};
      this._tags = {};
      this._extra = {};
      this._context = {};
    }
    Scope2.prototype.addScopeListener = function(callback) {
      this._scopeListeners.push(callback);
    };
    Scope2.prototype.addEventProcessor = function(callback) {
      this._eventProcessors.push(callback);
      return this;
    };
    Scope2.prototype._notifyScopeListeners = function() {
      var _this = this;
      if (!this._notifyingListeners) {
        this._notifyingListeners = true;
        setTimeout(function() {
          _this._scopeListeners.forEach(function(callback) {
            callback(_this);
          });
          _this._notifyingListeners = false;
        });
      }
    };
    Scope2.prototype._notifyEventProcessors = function(processors, event, hint, index) {
      var _this = this;
      if (index === void 0) {
        index = 0;
      }
      return new utils_1.SyncPromise(function(resolve, reject) {
        var processor = processors[index];
        if (event === null || typeof processor !== "function") {
          resolve(event);
        } else {
          var result = processor(tslib_1.__assign({}, event), hint);
          if (utils_1.isThenable(result)) {
            result.then(function(final) {
              return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);
            }).then(null, reject);
          } else {
            _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);
          }
        }
      });
    };
    Scope2.prototype.setUser = function(user) {
      this._user = user || {};
      this._notifyScopeListeners();
      return this;
    };
    Scope2.prototype.setTags = function(tags) {
      this._tags = tslib_1.__assign({}, this._tags, tags);
      this._notifyScopeListeners();
      return this;
    };
    Scope2.prototype.setTag = function(key, value) {
      var _a;
      this._tags = tslib_1.__assign({}, this._tags, (_a = {}, _a[key] = value, _a));
      this._notifyScopeListeners();
      return this;
    };
    Scope2.prototype.setExtras = function(extras) {
      this._extra = tslib_1.__assign({}, this._extra, extras);
      this._notifyScopeListeners();
      return this;
    };
    Scope2.prototype.setExtra = function(key, extra) {
      var _a;
      this._extra = tslib_1.__assign({}, this._extra, (_a = {}, _a[key] = extra, _a));
      this._notifyScopeListeners();
      return this;
    };
    Scope2.prototype.setFingerprint = function(fingerprint) {
      this._fingerprint = fingerprint;
      this._notifyScopeListeners();
      return this;
    };
    Scope2.prototype.setLevel = function(level) {
      this._level = level;
      this._notifyScopeListeners();
      return this;
    };
    Scope2.prototype.setTransaction = function(transaction) {
      this._transaction = transaction;
      if (this._span) {
        this._span.transaction = transaction;
      }
      this._notifyScopeListeners();
      return this;
    };
    Scope2.prototype.setContext = function(key, context) {
      var _a;
      this._context = tslib_1.__assign({}, this._context, (_a = {}, _a[key] = context, _a));
      this._notifyScopeListeners();
      return this;
    };
    Scope2.prototype.setSpan = function(span) {
      this._span = span;
      this._notifyScopeListeners();
      return this;
    };
    Scope2.prototype.getSpan = function() {
      return this._span;
    };
    Scope2.clone = function(scope) {
      var newScope = new Scope2();
      if (scope) {
        newScope._breadcrumbs = tslib_1.__spread(scope._breadcrumbs);
        newScope._tags = tslib_1.__assign({}, scope._tags);
        newScope._extra = tslib_1.__assign({}, scope._extra);
        newScope._context = tslib_1.__assign({}, scope._context);
        newScope._user = scope._user;
        newScope._level = scope._level;
        newScope._span = scope._span;
        newScope._transaction = scope._transaction;
        newScope._fingerprint = scope._fingerprint;
        newScope._eventProcessors = tslib_1.__spread(scope._eventProcessors);
      }
      return newScope;
    };
    Scope2.prototype.clear = function() {
      this._breadcrumbs = [];
      this._tags = {};
      this._extra = {};
      this._user = {};
      this._context = {};
      this._level = void 0;
      this._transaction = void 0;
      this._fingerprint = void 0;
      this._span = void 0;
      this._notifyScopeListeners();
      return this;
    };
    Scope2.prototype.addBreadcrumb = function(breadcrumb, maxBreadcrumbs) {
      var mergedBreadcrumb = tslib_1.__assign({timestamp: utils_1.timestampWithMs()}, breadcrumb);
      this._breadcrumbs = maxBreadcrumbs !== void 0 && maxBreadcrumbs >= 0 ? tslib_1.__spread(this._breadcrumbs, [mergedBreadcrumb]).slice(-maxBreadcrumbs) : tslib_1.__spread(this._breadcrumbs, [mergedBreadcrumb]);
      this._notifyScopeListeners();
      return this;
    };
    Scope2.prototype.clearBreadcrumbs = function() {
      this._breadcrumbs = [];
      this._notifyScopeListeners();
      return this;
    };
    Scope2.prototype._applyFingerprint = function(event) {
      event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : [];
      if (this._fingerprint) {
        event.fingerprint = event.fingerprint.concat(this._fingerprint);
      }
      if (event.fingerprint && !event.fingerprint.length) {
        delete event.fingerprint;
      }
    };
    Scope2.prototype.applyToEvent = function(event, hint) {
      if (this._extra && Object.keys(this._extra).length) {
        event.extra = tslib_1.__assign({}, this._extra, event.extra);
      }
      if (this._tags && Object.keys(this._tags).length) {
        event.tags = tslib_1.__assign({}, this._tags, event.tags);
      }
      if (this._user && Object.keys(this._user).length) {
        event.user = tslib_1.__assign({}, this._user, event.user);
      }
      if (this._context && Object.keys(this._context).length) {
        event.contexts = tslib_1.__assign({}, this._context, event.contexts);
      }
      if (this._level) {
        event.level = this._level;
      }
      if (this._transaction) {
        event.transaction = this._transaction;
      }
      if (this._span) {
        event.contexts = tslib_1.__assign({trace: this._span.getTraceContext()}, event.contexts);
      }
      this._applyFingerprint(event);
      event.breadcrumbs = tslib_1.__spread(event.breadcrumbs || [], this._breadcrumbs);
      event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : void 0;
      return this._notifyEventProcessors(tslib_1.__spread(getGlobalEventProcessors(), this._eventProcessors), event, hint);
    };
    return Scope2;
  }();
  exports2.Scope = Scope;
  function getGlobalEventProcessors() {
    var global2 = utils_1.getGlobalObject();
    global2.__SENTRY__ = global2.__SENTRY__ || {};
    global2.__SENTRY__.globalEventProcessors = global2.__SENTRY__.globalEventProcessors || [];
    return global2.__SENTRY__.globalEventProcessors;
  }
  function addGlobalEventProcessor(callback) {
    getGlobalEventProcessors().push(callback);
  }
  exports2.addGlobalEventProcessor = addGlobalEventProcessor;
});

// ../../node_modules/.pnpm/@sentry/hub@5.15.5/node_modules/@sentry/hub/dist/hub.js
var require_hub = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var utils_1 = require_dist15();
  var scope_1 = require_scope();
  exports2.API_VERSION = 3;
  var DEFAULT_BREADCRUMBS = 100;
  var MAX_BREADCRUMBS = 100;
  var Hub = function() {
    function Hub2(client, scope, _version) {
      if (scope === void 0) {
        scope = new scope_1.Scope();
      }
      if (_version === void 0) {
        _version = exports2.API_VERSION;
      }
      this._version = _version;
      this._stack = [];
      this._stack.push({client, scope});
    }
    Hub2.prototype._invokeClient = function(method) {
      var _a;
      var args2 = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        args2[_i - 1] = arguments[_i];
      }
      var top = this.getStackTop();
      if (top && top.client && top.client[method]) {
        (_a = top.client)[method].apply(_a, tslib_1.__spread(args2, [top.scope]));
      }
    };
    Hub2.prototype.isOlderThan = function(version) {
      return this._version < version;
    };
    Hub2.prototype.bindClient = function(client) {
      var top = this.getStackTop();
      top.client = client;
      if (client && client.setupIntegrations) {
        client.setupIntegrations();
      }
    };
    Hub2.prototype.pushScope = function() {
      var stack = this.getStack();
      var parentScope = stack.length > 0 ? stack[stack.length - 1].scope : void 0;
      var scope = scope_1.Scope.clone(parentScope);
      this.getStack().push({
        client: this.getClient(),
        scope
      });
      return scope;
    };
    Hub2.prototype.popScope = function() {
      return this.getStack().pop() !== void 0;
    };
    Hub2.prototype.withScope = function(callback) {
      var scope = this.pushScope();
      try {
        callback(scope);
      } finally {
        this.popScope();
      }
    };
    Hub2.prototype.getClient = function() {
      return this.getStackTop().client;
    };
    Hub2.prototype.getScope = function() {
      return this.getStackTop().scope;
    };
    Hub2.prototype.getStack = function() {
      return this._stack;
    };
    Hub2.prototype.getStackTop = function() {
      return this._stack[this._stack.length - 1];
    };
    Hub2.prototype.captureException = function(exception, hint) {
      var eventId = this._lastEventId = utils_1.uuid4();
      var finalHint = hint;
      if (!hint) {
        var syntheticException = void 0;
        try {
          throw new Error("Sentry syntheticException");
        } catch (exception2) {
          syntheticException = exception2;
        }
        finalHint = {
          originalException: exception,
          syntheticException
        };
      }
      this._invokeClient("captureException", exception, tslib_1.__assign({}, finalHint, {event_id: eventId}));
      return eventId;
    };
    Hub2.prototype.captureMessage = function(message, level, hint) {
      var eventId = this._lastEventId = utils_1.uuid4();
      var finalHint = hint;
      if (!hint) {
        var syntheticException = void 0;
        try {
          throw new Error(message);
        } catch (exception) {
          syntheticException = exception;
        }
        finalHint = {
          originalException: message,
          syntheticException
        };
      }
      this._invokeClient("captureMessage", message, level, tslib_1.__assign({}, finalHint, {event_id: eventId}));
      return eventId;
    };
    Hub2.prototype.captureEvent = function(event, hint) {
      var eventId = this._lastEventId = utils_1.uuid4();
      this._invokeClient("captureEvent", event, tslib_1.__assign({}, hint, {event_id: eventId}));
      return eventId;
    };
    Hub2.prototype.lastEventId = function() {
      return this._lastEventId;
    };
    Hub2.prototype.addBreadcrumb = function(breadcrumb, hint) {
      var top = this.getStackTop();
      if (!top.scope || !top.client) {
        return;
      }
      var _a = top.client.getOptions && top.client.getOptions() || {}, _b = _a.beforeBreadcrumb, beforeBreadcrumb = _b === void 0 ? null : _b, _c = _a.maxBreadcrumbs, maxBreadcrumbs = _c === void 0 ? DEFAULT_BREADCRUMBS : _c;
      if (maxBreadcrumbs <= 0) {
        return;
      }
      var timestamp = utils_1.timestampWithMs();
      var mergedBreadcrumb = tslib_1.__assign({timestamp}, breadcrumb);
      var finalBreadcrumb = beforeBreadcrumb ? utils_1.consoleSandbox(function() {
        return beforeBreadcrumb(mergedBreadcrumb, hint);
      }) : mergedBreadcrumb;
      if (finalBreadcrumb === null) {
        return;
      }
      top.scope.addBreadcrumb(finalBreadcrumb, Math.min(maxBreadcrumbs, MAX_BREADCRUMBS));
    };
    Hub2.prototype.setUser = function(user) {
      var top = this.getStackTop();
      if (!top.scope) {
        return;
      }
      top.scope.setUser(user);
    };
    Hub2.prototype.setTags = function(tags) {
      var top = this.getStackTop();
      if (!top.scope) {
        return;
      }
      top.scope.setTags(tags);
    };
    Hub2.prototype.setExtras = function(extras) {
      var top = this.getStackTop();
      if (!top.scope) {
        return;
      }
      top.scope.setExtras(extras);
    };
    Hub2.prototype.setTag = function(key, value) {
      var top = this.getStackTop();
      if (!top.scope) {
        return;
      }
      top.scope.setTag(key, value);
    };
    Hub2.prototype.setExtra = function(key, extra) {
      var top = this.getStackTop();
      if (!top.scope) {
        return;
      }
      top.scope.setExtra(key, extra);
    };
    Hub2.prototype.setContext = function(name, context) {
      var top = this.getStackTop();
      if (!top.scope) {
        return;
      }
      top.scope.setContext(name, context);
    };
    Hub2.prototype.configureScope = function(callback) {
      var top = this.getStackTop();
      if (top.scope && top.client) {
        callback(top.scope);
      }
    };
    Hub2.prototype.run = function(callback) {
      var oldHub = makeMain(this);
      try {
        callback(this);
      } finally {
        makeMain(oldHub);
      }
    };
    Hub2.prototype.getIntegration = function(integration) {
      var client = this.getClient();
      if (!client) {
        return null;
      }
      try {
        return client.getIntegration(integration);
      } catch (_oO) {
        utils_1.logger.warn("Cannot retrieve integration " + integration.id + " from the current Hub");
        return null;
      }
    };
    Hub2.prototype.startSpan = function(spanOrSpanContext, forceNoChild) {
      if (forceNoChild === void 0) {
        forceNoChild = false;
      }
      return this._callExtensionMethod("startSpan", spanOrSpanContext, forceNoChild);
    };
    Hub2.prototype.traceHeaders = function() {
      return this._callExtensionMethod("traceHeaders");
    };
    Hub2.prototype._callExtensionMethod = function(method) {
      var args2 = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        args2[_i - 1] = arguments[_i];
      }
      var carrier = getMainCarrier();
      var sentry = carrier.__SENTRY__;
      if (sentry && sentry.extensions && typeof sentry.extensions[method] === "function") {
        return sentry.extensions[method].apply(this, args2);
      }
      utils_1.logger.warn("Extension method " + method + " couldn't be found, doing nothing.");
    };
    return Hub2;
  }();
  exports2.Hub = Hub;
  function getMainCarrier() {
    var carrier = utils_1.getGlobalObject();
    carrier.__SENTRY__ = carrier.__SENTRY__ || {
      extensions: {},
      hub: void 0
    };
    return carrier;
  }
  exports2.getMainCarrier = getMainCarrier;
  function makeMain(hub) {
    var registry = getMainCarrier();
    var oldHub = getHubFromCarrier(registry);
    setHubOnCarrier(registry, hub);
    return oldHub;
  }
  exports2.makeMain = makeMain;
  function getCurrentHub() {
    var registry = getMainCarrier();
    if (!hasHubOnCarrier(registry) || getHubFromCarrier(registry).isOlderThan(exports2.API_VERSION)) {
      setHubOnCarrier(registry, new Hub());
    }
    if (utils_1.isNodeEnv()) {
      return getHubFromActiveDomain(registry);
    }
    return getHubFromCarrier(registry);
  }
  exports2.getCurrentHub = getCurrentHub;
  function getHubFromActiveDomain(registry) {
    try {
      var property = "domain";
      var carrier = getMainCarrier();
      var sentry = carrier.__SENTRY__;
      if (!sentry || !sentry.extensions || !sentry.extensions[property]) {
        return getHubFromCarrier(registry);
      }
      var domain = sentry.extensions[property];
      var activeDomain = domain.active;
      if (!activeDomain) {
        return getHubFromCarrier(registry);
      }
      if (!hasHubOnCarrier(activeDomain) || getHubFromCarrier(activeDomain).isOlderThan(exports2.API_VERSION)) {
        var registryHubTopStack = getHubFromCarrier(registry).getStackTop();
        setHubOnCarrier(activeDomain, new Hub(registryHubTopStack.client, scope_1.Scope.clone(registryHubTopStack.scope)));
      }
      return getHubFromCarrier(activeDomain);
    } catch (_Oo) {
      return getHubFromCarrier(registry);
    }
  }
  function hasHubOnCarrier(carrier) {
    if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {
      return true;
    }
    return false;
  }
  function getHubFromCarrier(carrier) {
    if (carrier && carrier.__SENTRY__ && carrier.__SENTRY__.hub) {
      return carrier.__SENTRY__.hub;
    }
    carrier.__SENTRY__ = carrier.__SENTRY__ || {};
    carrier.__SENTRY__.hub = new Hub();
    return carrier.__SENTRY__.hub;
  }
  exports2.getHubFromCarrier = getHubFromCarrier;
  function setHubOnCarrier(carrier, hub) {
    if (!carrier) {
      return false;
    }
    carrier.__SENTRY__ = carrier.__SENTRY__ || {};
    carrier.__SENTRY__.hub = hub;
    return true;
  }
  exports2.setHubOnCarrier = setHubOnCarrier;
});

// ../../node_modules/.pnpm/@sentry/hub@5.15.5/node_modules/@sentry/hub/dist/index.js
var require_dist16 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var scope_1 = require_scope();
  exports2.addGlobalEventProcessor = scope_1.addGlobalEventProcessor;
  exports2.Scope = scope_1.Scope;
  var hub_1 = require_hub();
  exports2.getCurrentHub = hub_1.getCurrentHub;
  exports2.getHubFromCarrier = hub_1.getHubFromCarrier;
  exports2.getMainCarrier = hub_1.getMainCarrier;
  exports2.Hub = hub_1.Hub;
  exports2.makeMain = hub_1.makeMain;
  exports2.setHubOnCarrier = hub_1.setHubOnCarrier;
});

// ../../node_modules/.pnpm/@sentry/minimal@5.15.5/node_modules/@sentry/minimal/dist/index.js
var require_dist17 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var hub_1 = require_dist16();
  function callOnHub(method) {
    var args2 = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args2[_i - 1] = arguments[_i];
    }
    var hub = hub_1.getCurrentHub();
    if (hub && hub[method]) {
      return hub[method].apply(hub, tslib_1.__spread(args2));
    }
    throw new Error("No hub defined or " + method + " was not found on the hub, please open a bug report.");
  }
  function captureException(exception) {
    var syntheticException;
    try {
      throw new Error("Sentry syntheticException");
    } catch (exception2) {
      syntheticException = exception2;
    }
    return callOnHub("captureException", exception, {
      originalException: exception,
      syntheticException
    });
  }
  exports2.captureException = captureException;
  function captureMessage(message, level) {
    var syntheticException;
    try {
      throw new Error(message);
    } catch (exception) {
      syntheticException = exception;
    }
    return callOnHub("captureMessage", message, level, {
      originalException: message,
      syntheticException
    });
  }
  exports2.captureMessage = captureMessage;
  function captureEvent(event) {
    return callOnHub("captureEvent", event);
  }
  exports2.captureEvent = captureEvent;
  function configureScope(callback) {
    callOnHub("configureScope", callback);
  }
  exports2.configureScope = configureScope;
  function addBreadcrumb(breadcrumb) {
    callOnHub("addBreadcrumb", breadcrumb);
  }
  exports2.addBreadcrumb = addBreadcrumb;
  function setContext(name, context) {
    callOnHub("setContext", name, context);
  }
  exports2.setContext = setContext;
  function setExtras(extras) {
    callOnHub("setExtras", extras);
  }
  exports2.setExtras = setExtras;
  function setTags(tags) {
    callOnHub("setTags", tags);
  }
  exports2.setTags = setTags;
  function setExtra(key, extra) {
    callOnHub("setExtra", key, extra);
  }
  exports2.setExtra = setExtra;
  function setTag(key, value) {
    callOnHub("setTag", key, value);
  }
  exports2.setTag = setTag;
  function setUser(user) {
    callOnHub("setUser", user);
  }
  exports2.setUser = setUser;
  function withScope(callback) {
    callOnHub("withScope", callback);
  }
  exports2.withScope = withScope;
  function _callOnClient(method) {
    var args2 = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args2[_i - 1] = arguments[_i];
    }
    callOnHub.apply(void 0, tslib_1.__spread(["_invokeClient", method], args2));
  }
  exports2._callOnClient = _callOnClient;
});

// ../../node_modules/.pnpm/@sentry/core@5.15.5/node_modules/@sentry/core/dist/api.js
var require_api = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var utils_1 = require_dist15();
  var SENTRY_API_VERSION = "7";
  var API = function() {
    function API2(dsn) {
      this.dsn = dsn;
      this._dsnObject = new utils_1.Dsn(dsn);
    }
    API2.prototype.getDsn = function() {
      return this._dsnObject;
    };
    API2.prototype.getStoreEndpoint = function() {
      return "" + this._getBaseUrl() + this.getStoreEndpointPath();
    };
    API2.prototype.getStoreEndpointWithUrlEncodedAuth = function() {
      var dsn = this._dsnObject;
      var auth = {
        sentry_key: dsn.user,
        sentry_version: SENTRY_API_VERSION
      };
      return this.getStoreEndpoint() + "?" + utils_1.urlEncode(auth);
    };
    API2.prototype._getBaseUrl = function() {
      var dsn = this._dsnObject;
      var protocol = dsn.protocol ? dsn.protocol + ":" : "";
      var port = dsn.port ? ":" + dsn.port : "";
      return protocol + "//" + dsn.host + port;
    };
    API2.prototype.getStoreEndpointPath = function() {
      var dsn = this._dsnObject;
      return (dsn.path ? "/" + dsn.path : "") + "/api/" + dsn.projectId + "/store/";
    };
    API2.prototype.getRequestHeaders = function(clientName, clientVersion) {
      var dsn = this._dsnObject;
      var header = ["Sentry sentry_version=" + SENTRY_API_VERSION];
      header.push("sentry_client=" + clientName + "/" + clientVersion);
      header.push("sentry_key=" + dsn.user);
      if (dsn.pass) {
        header.push("sentry_secret=" + dsn.pass);
      }
      return {
        "Content-Type": "application/json",
        "X-Sentry-Auth": header.join(", ")
      };
    };
    API2.prototype.getReportDialogEndpoint = function(dialogOptions) {
      if (dialogOptions === void 0) {
        dialogOptions = {};
      }
      var dsn = this._dsnObject;
      var endpoint = "" + this._getBaseUrl() + (dsn.path ? "/" + dsn.path : "") + "/api/embed/error-page/";
      var encodedOptions = [];
      encodedOptions.push("dsn=" + dsn.toString());
      for (var key in dialogOptions) {
        if (key === "user") {
          if (!dialogOptions.user) {
            continue;
          }
          if (dialogOptions.user.name) {
            encodedOptions.push("name=" + encodeURIComponent(dialogOptions.user.name));
          }
          if (dialogOptions.user.email) {
            encodedOptions.push("email=" + encodeURIComponent(dialogOptions.user.email));
          }
        } else {
          encodedOptions.push(encodeURIComponent(key) + "=" + encodeURIComponent(dialogOptions[key]));
        }
      }
      if (encodedOptions.length) {
        return endpoint + "?" + encodedOptions.join("&");
      }
      return endpoint;
    };
    return API2;
  }();
  exports2.API = API;
});

// ../../node_modules/.pnpm/@sentry/core@5.15.5/node_modules/@sentry/core/dist/integration.js
var require_integration = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var hub_1 = require_dist16();
  var utils_1 = require_dist15();
  exports2.installedIntegrations = [];
  function getIntegrationsToSetup(options) {
    var defaultIntegrations = options.defaultIntegrations && tslib_1.__spread(options.defaultIntegrations) || [];
    var userIntegrations = options.integrations;
    var integrations = [];
    if (Array.isArray(userIntegrations)) {
      var userIntegrationsNames_1 = userIntegrations.map(function(i) {
        return i.name;
      });
      var pickedIntegrationsNames_1 = [];
      defaultIntegrations.forEach(function(defaultIntegration) {
        if (userIntegrationsNames_1.indexOf(defaultIntegration.name) === -1 && pickedIntegrationsNames_1.indexOf(defaultIntegration.name) === -1) {
          integrations.push(defaultIntegration);
          pickedIntegrationsNames_1.push(defaultIntegration.name);
        }
      });
      userIntegrations.forEach(function(userIntegration) {
        if (pickedIntegrationsNames_1.indexOf(userIntegration.name) === -1) {
          integrations.push(userIntegration);
          pickedIntegrationsNames_1.push(userIntegration.name);
        }
      });
    } else if (typeof userIntegrations === "function") {
      integrations = userIntegrations(defaultIntegrations);
      integrations = Array.isArray(integrations) ? integrations : [integrations];
    } else {
      integrations = tslib_1.__spread(defaultIntegrations);
    }
    var integrationsNames = integrations.map(function(i) {
      return i.name;
    });
    var alwaysLastToRun = "Debug";
    if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {
      integrations.push.apply(integrations, tslib_1.__spread(integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1)));
    }
    return integrations;
  }
  exports2.getIntegrationsToSetup = getIntegrationsToSetup;
  function setupIntegration(integration) {
    if (exports2.installedIntegrations.indexOf(integration.name) !== -1) {
      return;
    }
    integration.setupOnce(hub_1.addGlobalEventProcessor, hub_1.getCurrentHub);
    exports2.installedIntegrations.push(integration.name);
    utils_1.logger.log("Integration installed: " + integration.name);
  }
  exports2.setupIntegration = setupIntegration;
  function setupIntegrations(options) {
    var integrations = {};
    getIntegrationsToSetup(options).forEach(function(integration) {
      integrations[integration.name] = integration;
      setupIntegration(integration);
    });
    return integrations;
  }
  exports2.setupIntegrations = setupIntegrations;
});

// ../../node_modules/.pnpm/@sentry/core@5.15.5/node_modules/@sentry/core/dist/baseclient.js
var require_baseclient = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var utils_1 = require_dist15();
  var integration_1 = require_integration();
  var BaseClient = function() {
    function BaseClient2(backendClass, options) {
      this._integrations = {};
      this._processing = false;
      this._backend = new backendClass(options);
      this._options = options;
      if (options.dsn) {
        this._dsn = new utils_1.Dsn(options.dsn);
      }
    }
    BaseClient2.prototype.captureException = function(exception, hint, scope) {
      var _this = this;
      var eventId = hint && hint.event_id;
      this._processing = true;
      this._getBackend().eventFromException(exception, hint).then(function(event) {
        return _this._processEvent(event, hint, scope);
      }).then(function(finalEvent) {
        eventId = finalEvent && finalEvent.event_id;
        _this._processing = false;
      }).then(null, function(reason) {
        utils_1.logger.error(reason);
        _this._processing = false;
      });
      return eventId;
    };
    BaseClient2.prototype.captureMessage = function(message, level, hint, scope) {
      var _this = this;
      var eventId = hint && hint.event_id;
      this._processing = true;
      var promisedEvent = utils_1.isPrimitive(message) ? this._getBackend().eventFromMessage("" + message, level, hint) : this._getBackend().eventFromException(message, hint);
      promisedEvent.then(function(event) {
        return _this._processEvent(event, hint, scope);
      }).then(function(finalEvent) {
        eventId = finalEvent && finalEvent.event_id;
        _this._processing = false;
      }).then(null, function(reason) {
        utils_1.logger.error(reason);
        _this._processing = false;
      });
      return eventId;
    };
    BaseClient2.prototype.captureEvent = function(event, hint, scope) {
      var _this = this;
      var eventId = hint && hint.event_id;
      this._processing = true;
      this._processEvent(event, hint, scope).then(function(finalEvent) {
        eventId = finalEvent && finalEvent.event_id;
        _this._processing = false;
      }).then(null, function(reason) {
        utils_1.logger.error(reason);
        _this._processing = false;
      });
      return eventId;
    };
    BaseClient2.prototype.getDsn = function() {
      return this._dsn;
    };
    BaseClient2.prototype.getOptions = function() {
      return this._options;
    };
    BaseClient2.prototype.flush = function(timeout) {
      var _this = this;
      return this._isClientProcessing(timeout).then(function(status) {
        clearInterval(status.interval);
        return _this._getBackend().getTransport().close(timeout).then(function(transportFlushed) {
          return status.ready && transportFlushed;
        });
      });
    };
    BaseClient2.prototype.close = function(timeout) {
      var _this = this;
      return this.flush(timeout).then(function(result) {
        _this.getOptions().enabled = false;
        return result;
      });
    };
    BaseClient2.prototype.setupIntegrations = function() {
      if (this._isEnabled()) {
        this._integrations = integration_1.setupIntegrations(this._options);
      }
    };
    BaseClient2.prototype.getIntegration = function(integration) {
      try {
        return this._integrations[integration.id] || null;
      } catch (_oO) {
        utils_1.logger.warn("Cannot retrieve integration " + integration.id + " from the current Client");
        return null;
      }
    };
    BaseClient2.prototype._isClientProcessing = function(timeout) {
      var _this = this;
      return new utils_1.SyncPromise(function(resolve) {
        var ticked = 0;
        var tick = 1;
        var interval = 0;
        clearInterval(interval);
        interval = setInterval(function() {
          if (!_this._processing) {
            resolve({
              interval,
              ready: true
            });
          } else {
            ticked += tick;
            if (timeout && ticked >= timeout) {
              resolve({
                interval,
                ready: false
              });
            }
          }
        }, tick);
      });
    };
    BaseClient2.prototype._getBackend = function() {
      return this._backend;
    };
    BaseClient2.prototype._isEnabled = function() {
      return this.getOptions().enabled !== false && this._dsn !== void 0;
    };
    BaseClient2.prototype._prepareEvent = function(event, scope, hint) {
      var _this = this;
      var _a = this.getOptions(), environment = _a.environment, release = _a.release, dist = _a.dist, _b = _a.maxValueLength, maxValueLength = _b === void 0 ? 250 : _b, _c = _a.normalizeDepth, normalizeDepth = _c === void 0 ? 3 : _c;
      var prepared = tslib_1.__assign({}, event);
      if (prepared.environment === void 0 && environment !== void 0) {
        prepared.environment = environment;
      }
      if (prepared.release === void 0 && release !== void 0) {
        prepared.release = release;
      }
      if (prepared.dist === void 0 && dist !== void 0) {
        prepared.dist = dist;
      }
      if (prepared.message) {
        prepared.message = utils_1.truncate(prepared.message, maxValueLength);
      }
      var exception = prepared.exception && prepared.exception.values && prepared.exception.values[0];
      if (exception && exception.value) {
        exception.value = utils_1.truncate(exception.value, maxValueLength);
      }
      var request = prepared.request;
      if (request && request.url) {
        request.url = utils_1.truncate(request.url, maxValueLength);
      }
      if (prepared.event_id === void 0) {
        prepared.event_id = hint && hint.event_id ? hint.event_id : utils_1.uuid4();
      }
      this._addIntegrations(prepared.sdk);
      var result = utils_1.SyncPromise.resolve(prepared);
      if (scope) {
        result = scope.applyToEvent(prepared, hint);
      }
      return result.then(function(evt) {
        if (typeof normalizeDepth === "number" && normalizeDepth > 0) {
          return _this._normalizeEvent(evt, normalizeDepth);
        }
        return evt;
      });
    };
    BaseClient2.prototype._normalizeEvent = function(event, depth) {
      if (!event) {
        return null;
      }
      return tslib_1.__assign({}, event, event.breadcrumbs && {
        breadcrumbs: event.breadcrumbs.map(function(b) {
          return tslib_1.__assign({}, b, b.data && {
            data: utils_1.normalize(b.data, depth)
          });
        })
      }, event.user && {
        user: utils_1.normalize(event.user, depth)
      }, event.contexts && {
        contexts: utils_1.normalize(event.contexts, depth)
      }, event.extra && {
        extra: utils_1.normalize(event.extra, depth)
      });
    };
    BaseClient2.prototype._addIntegrations = function(sdkInfo) {
      var integrationsArray = Object.keys(this._integrations);
      if (sdkInfo && integrationsArray.length > 0) {
        sdkInfo.integrations = integrationsArray;
      }
    };
    BaseClient2.prototype._processEvent = function(event, hint, scope) {
      var _this = this;
      var _a = this.getOptions(), beforeSend = _a.beforeSend, sampleRate = _a.sampleRate;
      if (!this._isEnabled()) {
        return utils_1.SyncPromise.reject("SDK not enabled, will not send event.");
      }
      if (typeof sampleRate === "number" && Math.random() > sampleRate) {
        return utils_1.SyncPromise.reject("This event has been sampled, will not send event.");
      }
      return new utils_1.SyncPromise(function(resolve, reject) {
        _this._prepareEvent(event, scope, hint).then(function(prepared) {
          if (prepared === null) {
            reject("An event processor returned null, will not send event.");
            return;
          }
          var finalEvent = prepared;
          var isInternalException = hint && hint.data && hint.data.__sentry__ === true;
          if (isInternalException || !beforeSend) {
            _this._getBackend().sendEvent(finalEvent);
            resolve(finalEvent);
            return;
          }
          var beforeSendResult = beforeSend(prepared, hint);
          if (typeof beforeSendResult === "undefined") {
            utils_1.logger.error("`beforeSend` method has to return `null` or a valid event.");
          } else if (utils_1.isThenable(beforeSendResult)) {
            _this._handleAsyncBeforeSend(beforeSendResult, resolve, reject);
          } else {
            finalEvent = beforeSendResult;
            if (finalEvent === null) {
              utils_1.logger.log("`beforeSend` returned `null`, will not send event.");
              resolve(null);
              return;
            }
            _this._getBackend().sendEvent(finalEvent);
            resolve(finalEvent);
          }
        }).then(null, function(reason) {
          _this.captureException(reason, {
            data: {
              __sentry__: true
            },
            originalException: reason
          });
          reject("Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\nReason: " + reason);
        });
      });
    };
    BaseClient2.prototype._handleAsyncBeforeSend = function(beforeSend, resolve, reject) {
      var _this = this;
      beforeSend.then(function(processedEvent) {
        if (processedEvent === null) {
          reject("`beforeSend` returned `null`, will not send event.");
          return;
        }
        _this._getBackend().sendEvent(processedEvent);
        resolve(processedEvent);
      }).then(null, function(e) {
        reject("beforeSend rejected with " + e);
      });
    };
    return BaseClient2;
  }();
  exports2.BaseClient = BaseClient;
});

// ../../node_modules/.pnpm/@sentry/core@5.15.5/node_modules/@sentry/core/dist/transports/noop.js
var require_noop = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var types_1 = require_dist14();
  var utils_1 = require_dist15();
  var NoopTransport = function() {
    function NoopTransport2() {
    }
    NoopTransport2.prototype.sendEvent = function(_2) {
      return utils_1.SyncPromise.resolve({
        reason: "NoopTransport: Event has been skipped because no Dsn is configured.",
        status: types_1.Status.Skipped
      });
    };
    NoopTransport2.prototype.close = function(_2) {
      return utils_1.SyncPromise.resolve(true);
    };
    return NoopTransport2;
  }();
  exports2.NoopTransport = NoopTransport;
});

// ../../node_modules/.pnpm/@sentry/core@5.15.5/node_modules/@sentry/core/dist/basebackend.js
var require_basebackend = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var utils_1 = require_dist15();
  var noop_1 = require_noop();
  var BaseBackend = function() {
    function BaseBackend2(options) {
      this._options = options;
      if (!this._options.dsn) {
        utils_1.logger.warn("No DSN provided, backend will not do anything.");
      }
      this._transport = this._setupTransport();
    }
    BaseBackend2.prototype._setupTransport = function() {
      return new noop_1.NoopTransport();
    };
    BaseBackend2.prototype.eventFromException = function(_exception, _hint) {
      throw new utils_1.SentryError("Backend has to implement `eventFromException` method");
    };
    BaseBackend2.prototype.eventFromMessage = function(_message, _level, _hint) {
      throw new utils_1.SentryError("Backend has to implement `eventFromMessage` method");
    };
    BaseBackend2.prototype.sendEvent = function(event) {
      this._transport.sendEvent(event).then(null, function(reason) {
        utils_1.logger.error("Error while sending event: " + reason);
      });
    };
    BaseBackend2.prototype.getTransport = function() {
      return this._transport;
    };
    return BaseBackend2;
  }();
  exports2.BaseBackend = BaseBackend;
});

// ../../node_modules/.pnpm/@sentry/core@5.15.5/node_modules/@sentry/core/dist/sdk.js
var require_sdk = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var hub_1 = require_dist16();
  var utils_1 = require_dist15();
  function initAndBind(clientClass, options) {
    if (options.debug === true) {
      utils_1.logger.enable();
    }
    var hub = hub_1.getCurrentHub();
    var client = new clientClass(options);
    hub.bindClient(client);
  }
  exports2.initAndBind = initAndBind;
});

// ../../node_modules/.pnpm/@sentry/core@5.15.5/node_modules/@sentry/core/dist/integrations/functiontostring.js
var require_functiontostring = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var originalFunctionToString;
  var FunctionToString = function() {
    function FunctionToString2() {
      this.name = FunctionToString2.id;
    }
    FunctionToString2.prototype.setupOnce = function() {
      originalFunctionToString = Function.prototype.toString;
      Function.prototype.toString = function() {
        var args2 = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args2[_i] = arguments[_i];
        }
        var context = this.__sentry_original__ || this;
        return originalFunctionToString.apply(context, args2);
      };
    };
    FunctionToString2.id = "FunctionToString";
    return FunctionToString2;
  }();
  exports2.FunctionToString = FunctionToString;
});

// ../../node_modules/.pnpm/@sentry/core@5.15.5/node_modules/@sentry/core/dist/integrations/inboundfilters.js
var require_inboundfilters = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var hub_1 = require_dist16();
  var utils_1 = require_dist15();
  var DEFAULT_IGNORE_ERRORS = [/^Script error\.?$/, /^Javascript error: Script error\.? on line 0$/];
  var InboundFilters = function() {
    function InboundFilters2(_options) {
      if (_options === void 0) {
        _options = {};
      }
      this._options = _options;
      this.name = InboundFilters2.id;
    }
    InboundFilters2.prototype.setupOnce = function() {
      hub_1.addGlobalEventProcessor(function(event) {
        var hub = hub_1.getCurrentHub();
        if (!hub) {
          return event;
        }
        var self2 = hub.getIntegration(InboundFilters2);
        if (self2) {
          var client = hub.getClient();
          var clientOptions = client ? client.getOptions() : {};
          var options = self2._mergeOptions(clientOptions);
          if (self2._shouldDropEvent(event, options)) {
            return null;
          }
        }
        return event;
      });
    };
    InboundFilters2.prototype._shouldDropEvent = function(event, options) {
      if (this._isSentryError(event, options)) {
        utils_1.logger.warn("Event dropped due to being internal Sentry Error.\nEvent: " + utils_1.getEventDescription(event));
        return true;
      }
      if (this._isIgnoredError(event, options)) {
        utils_1.logger.warn("Event dropped due to being matched by `ignoreErrors` option.\nEvent: " + utils_1.getEventDescription(event));
        return true;
      }
      if (this._isBlacklistedUrl(event, options)) {
        utils_1.logger.warn("Event dropped due to being matched by `blacklistUrls` option.\nEvent: " + utils_1.getEventDescription(event) + ".\nUrl: " + this._getEventFilterUrl(event));
        return true;
      }
      if (!this._isWhitelistedUrl(event, options)) {
        utils_1.logger.warn("Event dropped due to not being matched by `whitelistUrls` option.\nEvent: " + utils_1.getEventDescription(event) + ".\nUrl: " + this._getEventFilterUrl(event));
        return true;
      }
      return false;
    };
    InboundFilters2.prototype._isSentryError = function(event, options) {
      if (options === void 0) {
        options = {};
      }
      if (!options.ignoreInternal) {
        return false;
      }
      try {
        return event && event.exception && event.exception.values && event.exception.values[0] && event.exception.values[0].type === "SentryError" || false;
      } catch (_oO) {
        return false;
      }
    };
    InboundFilters2.prototype._isIgnoredError = function(event, options) {
      if (options === void 0) {
        options = {};
      }
      if (!options.ignoreErrors || !options.ignoreErrors.length) {
        return false;
      }
      return this._getPossibleEventMessages(event).some(function(message) {
        return options.ignoreErrors.some(function(pattern) {
          return utils_1.isMatchingPattern(message, pattern);
        });
      });
    };
    InboundFilters2.prototype._isBlacklistedUrl = function(event, options) {
      if (options === void 0) {
        options = {};
      }
      if (!options.blacklistUrls || !options.blacklistUrls.length) {
        return false;
      }
      var url = this._getEventFilterUrl(event);
      return !url ? false : options.blacklistUrls.some(function(pattern) {
        return utils_1.isMatchingPattern(url, pattern);
      });
    };
    InboundFilters2.prototype._isWhitelistedUrl = function(event, options) {
      if (options === void 0) {
        options = {};
      }
      if (!options.whitelistUrls || !options.whitelistUrls.length) {
        return true;
      }
      var url = this._getEventFilterUrl(event);
      return !url ? true : options.whitelistUrls.some(function(pattern) {
        return utils_1.isMatchingPattern(url, pattern);
      });
    };
    InboundFilters2.prototype._mergeOptions = function(clientOptions) {
      if (clientOptions === void 0) {
        clientOptions = {};
      }
      return {
        blacklistUrls: tslib_1.__spread(this._options.blacklistUrls || [], clientOptions.blacklistUrls || []),
        ignoreErrors: tslib_1.__spread(this._options.ignoreErrors || [], clientOptions.ignoreErrors || [], DEFAULT_IGNORE_ERRORS),
        ignoreInternal: typeof this._options.ignoreInternal !== "undefined" ? this._options.ignoreInternal : true,
        whitelistUrls: tslib_1.__spread(this._options.whitelistUrls || [], clientOptions.whitelistUrls || [])
      };
    };
    InboundFilters2.prototype._getPossibleEventMessages = function(event) {
      if (event.message) {
        return [event.message];
      }
      if (event.exception) {
        try {
          var _a = event.exception.values && event.exception.values[0] || {}, _b = _a.type, type = _b === void 0 ? "" : _b, _c = _a.value, value = _c === void 0 ? "" : _c;
          return ["" + value, type + ": " + value];
        } catch (oO) {
          utils_1.logger.error("Cannot extract message for event " + utils_1.getEventDescription(event));
          return [];
        }
      }
      return [];
    };
    InboundFilters2.prototype._getEventFilterUrl = function(event) {
      try {
        if (event.stacktrace) {
          var frames_1 = event.stacktrace.frames;
          return frames_1 && frames_1[frames_1.length - 1].filename || null;
        }
        if (event.exception) {
          var frames_2 = event.exception.values && event.exception.values[0].stacktrace && event.exception.values[0].stacktrace.frames;
          return frames_2 && frames_2[frames_2.length - 1].filename || null;
        }
        return null;
      } catch (oO) {
        utils_1.logger.error("Cannot extract url for event " + utils_1.getEventDescription(event));
        return null;
      }
    };
    InboundFilters2.id = "InboundFilters";
    return InboundFilters2;
  }();
  exports2.InboundFilters = InboundFilters;
});

// ../../node_modules/.pnpm/@sentry/core@5.15.5/node_modules/@sentry/core/dist/integrations/index.js
var require_integrations = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var functiontostring_1 = require_functiontostring();
  exports2.FunctionToString = functiontostring_1.FunctionToString;
  var inboundfilters_1 = require_inboundfilters();
  exports2.InboundFilters = inboundfilters_1.InboundFilters;
});

// ../../node_modules/.pnpm/@sentry/core@5.15.5/node_modules/@sentry/core/dist/index.js
var require_dist18 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var minimal_1 = require_dist17();
  exports2.addBreadcrumb = minimal_1.addBreadcrumb;
  exports2.captureException = minimal_1.captureException;
  exports2.captureEvent = minimal_1.captureEvent;
  exports2.captureMessage = minimal_1.captureMessage;
  exports2.configureScope = minimal_1.configureScope;
  exports2.setContext = minimal_1.setContext;
  exports2.setExtra = minimal_1.setExtra;
  exports2.setExtras = minimal_1.setExtras;
  exports2.setTag = minimal_1.setTag;
  exports2.setTags = minimal_1.setTags;
  exports2.setUser = minimal_1.setUser;
  exports2.withScope = minimal_1.withScope;
  var hub_1 = require_dist16();
  exports2.addGlobalEventProcessor = hub_1.addGlobalEventProcessor;
  exports2.getCurrentHub = hub_1.getCurrentHub;
  exports2.getHubFromCarrier = hub_1.getHubFromCarrier;
  exports2.Hub = hub_1.Hub;
  exports2.Scope = hub_1.Scope;
  var api_1 = require_api();
  exports2.API = api_1.API;
  var baseclient_1 = require_baseclient();
  exports2.BaseClient = baseclient_1.BaseClient;
  var basebackend_1 = require_basebackend();
  exports2.BaseBackend = basebackend_1.BaseBackend;
  var sdk_1 = require_sdk();
  exports2.initAndBind = sdk_1.initAndBind;
  var noop_1 = require_noop();
  exports2.NoopTransport = noop_1.NoopTransport;
  var Integrations = require_integrations();
  exports2.Integrations = Integrations;
});

// ../../node_modules/.pnpm/lru_map@0.3.3/node_modules/lru_map/lru.js
var require_lru = __commonJS((exports2) => {
  (function(g, f) {
    const e = typeof exports2 == "object" ? exports2 : typeof g == "object" ? g : {};
    f(e);
    if (typeof define == "function" && define.amd) {
      define("lru", e);
    }
  })(exports2, function(exports3) {
    const NEWER = Symbol("newer");
    const OLDER = Symbol("older");
    function LRUMap(limit, entries) {
      if (typeof limit !== "number") {
        entries = limit;
        limit = 0;
      }
      this.size = 0;
      this.limit = limit;
      this.oldest = this.newest = void 0;
      this._keymap = new Map();
      if (entries) {
        this.assign(entries);
        if (limit < 1) {
          this.limit = this.size;
        }
      }
    }
    exports3.LRUMap = LRUMap;
    function Entry(key, value) {
      this.key = key;
      this.value = value;
      this[NEWER] = void 0;
      this[OLDER] = void 0;
    }
    LRUMap.prototype._markEntryAsUsed = function(entry) {
      if (entry === this.newest) {
        return;
      }
      if (entry[NEWER]) {
        if (entry === this.oldest) {
          this.oldest = entry[NEWER];
        }
        entry[NEWER][OLDER] = entry[OLDER];
      }
      if (entry[OLDER]) {
        entry[OLDER][NEWER] = entry[NEWER];
      }
      entry[NEWER] = void 0;
      entry[OLDER] = this.newest;
      if (this.newest) {
        this.newest[NEWER] = entry;
      }
      this.newest = entry;
    };
    LRUMap.prototype.assign = function(entries) {
      let entry, limit = this.limit || Number.MAX_VALUE;
      this._keymap.clear();
      let it = entries[Symbol.iterator]();
      for (let itv = it.next(); !itv.done; itv = it.next()) {
        let e = new Entry(itv.value[0], itv.value[1]);
        this._keymap.set(e.key, e);
        if (!entry) {
          this.oldest = e;
        } else {
          entry[NEWER] = e;
          e[OLDER] = entry;
        }
        entry = e;
        if (limit-- == 0) {
          throw new Error("overflow");
        }
      }
      this.newest = entry;
      this.size = this._keymap.size;
    };
    LRUMap.prototype.get = function(key) {
      var entry = this._keymap.get(key);
      if (!entry)
        return;
      this._markEntryAsUsed(entry);
      return entry.value;
    };
    LRUMap.prototype.set = function(key, value) {
      var entry = this._keymap.get(key);
      if (entry) {
        entry.value = value;
        this._markEntryAsUsed(entry);
        return this;
      }
      this._keymap.set(key, entry = new Entry(key, value));
      if (this.newest) {
        this.newest[NEWER] = entry;
        entry[OLDER] = this.newest;
      } else {
        this.oldest = entry;
      }
      this.newest = entry;
      ++this.size;
      if (this.size > this.limit) {
        this.shift();
      }
      return this;
    };
    LRUMap.prototype.shift = function() {
      var entry = this.oldest;
      if (entry) {
        if (this.oldest[NEWER]) {
          this.oldest = this.oldest[NEWER];
          this.oldest[OLDER] = void 0;
        } else {
          this.oldest = void 0;
          this.newest = void 0;
        }
        entry[NEWER] = entry[OLDER] = void 0;
        this._keymap.delete(entry.key);
        --this.size;
        return [entry.key, entry.value];
      }
    };
    LRUMap.prototype.find = function(key) {
      let e = this._keymap.get(key);
      return e ? e.value : void 0;
    };
    LRUMap.prototype.has = function(key) {
      return this._keymap.has(key);
    };
    LRUMap.prototype["delete"] = function(key) {
      var entry = this._keymap.get(key);
      if (!entry)
        return;
      this._keymap.delete(entry.key);
      if (entry[NEWER] && entry[OLDER]) {
        entry[OLDER][NEWER] = entry[NEWER];
        entry[NEWER][OLDER] = entry[OLDER];
      } else if (entry[NEWER]) {
        entry[NEWER][OLDER] = void 0;
        this.oldest = entry[NEWER];
      } else if (entry[OLDER]) {
        entry[OLDER][NEWER] = void 0;
        this.newest = entry[OLDER];
      } else {
        this.oldest = this.newest = void 0;
      }
      this.size--;
      return entry.value;
    };
    LRUMap.prototype.clear = function() {
      this.oldest = this.newest = void 0;
      this.size = 0;
      this._keymap.clear();
    };
    function EntryIterator(oldestEntry) {
      this.entry = oldestEntry;
    }
    EntryIterator.prototype[Symbol.iterator] = function() {
      return this;
    };
    EntryIterator.prototype.next = function() {
      let ent = this.entry;
      if (ent) {
        this.entry = ent[NEWER];
        return {done: false, value: [ent.key, ent.value]};
      } else {
        return {done: true, value: void 0};
      }
    };
    function KeyIterator(oldestEntry) {
      this.entry = oldestEntry;
    }
    KeyIterator.prototype[Symbol.iterator] = function() {
      return this;
    };
    KeyIterator.prototype.next = function() {
      let ent = this.entry;
      if (ent) {
        this.entry = ent[NEWER];
        return {done: false, value: ent.key};
      } else {
        return {done: true, value: void 0};
      }
    };
    function ValueIterator(oldestEntry) {
      this.entry = oldestEntry;
    }
    ValueIterator.prototype[Symbol.iterator] = function() {
      return this;
    };
    ValueIterator.prototype.next = function() {
      let ent = this.entry;
      if (ent) {
        this.entry = ent[NEWER];
        return {done: false, value: ent.value};
      } else {
        return {done: true, value: void 0};
      }
    };
    LRUMap.prototype.keys = function() {
      return new KeyIterator(this.oldest);
    };
    LRUMap.prototype.values = function() {
      return new ValueIterator(this.oldest);
    };
    LRUMap.prototype.entries = function() {
      return this;
    };
    LRUMap.prototype[Symbol.iterator] = function() {
      return new EntryIterator(this.oldest);
    };
    LRUMap.prototype.forEach = function(fun, thisObj) {
      if (typeof thisObj !== "object") {
        thisObj = this;
      }
      let entry = this.oldest;
      while (entry) {
        fun.call(thisObj, entry.value, entry.key, this);
        entry = entry[NEWER];
      }
    };
    LRUMap.prototype.toJSON = function() {
      var s = new Array(this.size), i = 0, entry = this.oldest;
      while (entry) {
        s[i++] = {key: entry.key, value: entry.value};
        entry = entry[NEWER];
      }
      return s;
    };
    LRUMap.prototype.toString = function() {
      var s = "", entry = this.oldest;
      while (entry) {
        s += String(entry.key) + ":" + entry.value;
        entry = entry[NEWER];
        if (entry) {
          s += " < ";
        }
      }
      return s;
    };
  });
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/stacktrace.js
var require_stacktrace = __commonJS((exports2) => {
  /**
   * stack-trace - Parses node.js stack traces
   *
   * This was originally forked to fix this issue:
   * https://github.com/felixge/node-stack-trace/issues/31
   *
   * Mar 19,2019 - #4fd379e
   *
   * https://github.com/felixge/node-stack-trace/
   * @license MIT
   */
  Object.defineProperty(exports2, "__esModule", {value: true});
  function parse(err) {
    if (!err.stack) {
      return [];
    }
    var lines = err.stack.split("\n").slice(1);
    return lines.map(function(line) {
      if (line.match(/^\s*[-]{4,}$/)) {
        return {
          columnNumber: null,
          fileName: line,
          functionName: null,
          lineNumber: null,
          methodName: null,
          native: null,
          typeName: null
        };
      }
      var lineMatch = line.match(/at (?:(.+?)\s+\()?(?:(.+?):(\d+)(?::(\d+))?|([^)]+))\)?/);
      if (!lineMatch) {
        return void 0;
      }
      var object = null;
      var method = null;
      var functionName = null;
      var typeName = null;
      var methodName = null;
      var isNative = lineMatch[5] === "native";
      if (lineMatch[1]) {
        functionName = lineMatch[1];
        var methodStart = functionName.lastIndexOf(".");
        if (functionName[methodStart - 1] === ".") {
          methodStart--;
        }
        if (methodStart > 0) {
          object = functionName.substr(0, methodStart);
          method = functionName.substr(methodStart + 1);
          var objectEnd = object.indexOf(".Module");
          if (objectEnd > 0) {
            functionName = functionName.substr(objectEnd + 1);
            object = object.substr(0, objectEnd);
          }
        }
        typeName = null;
      }
      if (method) {
        typeName = object;
        methodName = method;
      }
      if (method === "<anonymous>") {
        methodName = null;
        functionName = null;
      }
      var properties = {
        columnNumber: parseInt(lineMatch[4], 10) || null,
        fileName: lineMatch[2] || null,
        functionName,
        lineNumber: parseInt(lineMatch[3], 10) || null,
        methodName,
        native: isNative,
        typeName
      };
      return properties;
    }).filter(function(callSite) {
      return !!callSite;
    });
  }
  exports2.parse = parse;
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/parsers.js
var require_parsers = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var utils_1 = require_dist15();
  var fs_1 = require("fs");
  var lru_map_1 = require_lru();
  var stacktrace = require_stacktrace();
  var DEFAULT_LINES_OF_CONTEXT = 7;
  var FILE_CONTENT_CACHE = new lru_map_1.LRUMap(100);
  function resetFileContentCache() {
    FILE_CONTENT_CACHE.clear();
  }
  exports2.resetFileContentCache = resetFileContentCache;
  function getFunction(frame) {
    try {
      return frame.functionName || frame.typeName + "." + (frame.methodName || "<anonymous>");
    } catch (e) {
      return "<anonymous>";
    }
  }
  var mainModule = (require.main && require.main.filename && utils_1.dirname(require.main.filename) || global.process.cwd()) + "/";
  function getModule(filename, base) {
    if (!base) {
      base = mainModule;
    }
    var file = utils_1.basename(filename, ".js");
    filename = utils_1.dirname(filename);
    var n = filename.lastIndexOf("/node_modules/");
    if (n > -1) {
      return filename.substr(n + 14).replace(/\//g, ".") + ":" + file;
    }
    n = (filename + "/").lastIndexOf(base, 0);
    if (n === 0) {
      var moduleName = filename.substr(base.length).replace(/\//g, ".");
      if (moduleName) {
        moduleName += ":";
      }
      moduleName += file;
      return moduleName;
    }
    return file;
  }
  function readSourceFiles(filenames) {
    if (filenames.length === 0) {
      return utils_1.SyncPromise.resolve({});
    }
    return new utils_1.SyncPromise(function(resolve) {
      var sourceFiles = {};
      var count = 0;
      var _loop_1 = function(i2) {
        var filename = filenames[i2];
        var cache = FILE_CONTENT_CACHE.get(filename);
        if (cache !== void 0) {
          if (cache !== null) {
            sourceFiles[filename] = cache;
          }
          count++;
          if (count === filenames.length) {
            resolve(sourceFiles);
          }
          return "continue";
        }
        fs_1.readFile(filename, function(err, data) {
          var content = err ? null : data.toString();
          sourceFiles[filename] = content;
          FILE_CONTENT_CACHE.set(filename, content);
          count++;
          if (count === filenames.length) {
            resolve(sourceFiles);
          }
        });
      };
      for (var i = 0; i < filenames.length; i++) {
        _loop_1(i);
      }
    });
  }
  function extractStackFromError(error) {
    var stack = stacktrace.parse(error);
    if (!stack) {
      return [];
    }
    return stack;
  }
  exports2.extractStackFromError = extractStackFromError;
  function parseStack(stack, options) {
    var filesToRead = [];
    var linesOfContext = options && options.frameContextLines !== void 0 ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;
    var frames = stack.map(function(frame) {
      var parsedFrame = {
        colno: frame.columnNumber,
        filename: frame.fileName || "",
        function: getFunction(frame),
        lineno: frame.lineNumber
      };
      var isInternal = frame.native || parsedFrame.filename && !parsedFrame.filename.startsWith("/") && !parsedFrame.filename.startsWith(".") && parsedFrame.filename.indexOf(":\\") !== 1;
      parsedFrame.in_app = !isInternal && parsedFrame.filename !== void 0 && parsedFrame.filename.indexOf("node_modules/") === -1;
      if (parsedFrame.filename) {
        parsedFrame.module = getModule(parsedFrame.filename);
        if (!isInternal && linesOfContext > 0) {
          filesToRead.push(parsedFrame.filename);
        }
      }
      return parsedFrame;
    });
    if (linesOfContext <= 0) {
      return utils_1.SyncPromise.resolve(frames);
    }
    try {
      return addPrePostContext(filesToRead, frames, linesOfContext);
    } catch (_2) {
      return utils_1.SyncPromise.resolve(frames);
    }
  }
  exports2.parseStack = parseStack;
  function addPrePostContext(filesToRead, frames, linesOfContext) {
    return new utils_1.SyncPromise(function(resolve) {
      return readSourceFiles(filesToRead).then(function(sourceFiles) {
        var result = frames.map(function(frame) {
          if (frame.filename && sourceFiles[frame.filename]) {
            try {
              var lines = sourceFiles[frame.filename].split("\n");
              utils_1.addContextToFrame(lines, frame, linesOfContext);
            } catch (e) {
            }
          }
          return frame;
        });
        resolve(result);
      });
    });
  }
  function getExceptionFromError(error, options) {
    var name = error.name || error.constructor.name;
    var stack = extractStackFromError(error);
    return new utils_1.SyncPromise(function(resolve) {
      return parseStack(stack, options).then(function(frames) {
        var result = {
          stacktrace: {
            frames: prepareFramesForEvent(frames)
          },
          type: name,
          value: error.message
        };
        resolve(result);
      });
    });
  }
  exports2.getExceptionFromError = getExceptionFromError;
  function parseError(error, options) {
    return new utils_1.SyncPromise(function(resolve) {
      return getExceptionFromError(error, options).then(function(exception) {
        resolve({
          exception: {
            values: [exception]
          }
        });
      });
    });
  }
  exports2.parseError = parseError;
  function prepareFramesForEvent(stack) {
    if (!stack || !stack.length) {
      return [];
    }
    var localStack = stack;
    var firstFrameFunction = localStack[0].function || "";
    if (firstFrameFunction.indexOf("captureMessage") !== -1 || firstFrameFunction.indexOf("captureException") !== -1) {
      localStack = localStack.slice(1);
    }
    return localStack.reverse();
  }
  exports2.prepareFramesForEvent = prepareFramesForEvent;
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/version.js
var require_version = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.SDK_NAME = "sentry.javascript.node";
  exports2.SDK_VERSION = "5.15.5";
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/transports/base.js
var require_base2 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var core_1 = require_dist18();
  var types_1 = require_dist14();
  var utils_1 = require_dist15();
  var fs17 = require("fs");
  var version_1 = require_version();
  var BaseTransport = function() {
    function BaseTransport2(options) {
      this.options = options;
      this._buffer = new utils_1.PromiseBuffer(30);
      this._disabledUntil = new Date(Date.now());
      this._api = new core_1.API(options.dsn);
    }
    BaseTransport2.prototype._getRequestOptions = function() {
      var headers = tslib_1.__assign({}, this._api.getRequestHeaders(version_1.SDK_NAME, version_1.SDK_VERSION), this.options.headers);
      var dsn = this._api.getDsn();
      var options = {
        agent: this.client,
        headers,
        hostname: dsn.host,
        method: "POST",
        path: this._api.getStoreEndpointPath(),
        port: dsn.port,
        protocol: dsn.protocol + ":"
      };
      if (this.options.caCerts) {
        options.ca = fs17.readFileSync(this.options.caCerts);
      }
      return options;
    };
    BaseTransport2.prototype._sendWithModule = function(httpModule, event) {
      return tslib_1.__awaiter(this, void 0, void 0, function() {
        var _this = this;
        return tslib_1.__generator(this, function(_a) {
          if (new Date(Date.now()) < this._disabledUntil) {
            return [2, Promise.reject(new utils_1.SentryError("Transport locked till " + this._disabledUntil + " due to too many requests."))];
          }
          if (!this._buffer.isReady()) {
            return [2, Promise.reject(new utils_1.SentryError("Not adding Promise due to buffer limit reached."))];
          }
          return [2, this._buffer.add(new Promise(function(resolve, reject) {
            var req = httpModule.request(_this._getRequestOptions(), function(res) {
              var statusCode = res.statusCode || 500;
              var status = types_1.Status.fromHttpCode(statusCode);
              res.setEncoding("utf8");
              if (status === types_1.Status.Success) {
                resolve({status});
              } else {
                if (status === types_1.Status.RateLimit) {
                  var now = Date.now();
                  var header = res.headers ? res.headers["Retry-After"] : "";
                  header = Array.isArray(header) ? header[0] : header;
                  _this._disabledUntil = new Date(now + utils_1.parseRetryAfterHeader(now, header));
                  utils_1.logger.warn("Too many requests, backing off till: " + _this._disabledUntil);
                }
                var rejectionMessage = "HTTP Error (" + statusCode + ")";
                if (res.headers && res.headers["x-sentry-error"]) {
                  rejectionMessage += ": " + res.headers["x-sentry-error"];
                }
                reject(new utils_1.SentryError(rejectionMessage));
              }
              res.on("data", function() {
              });
              res.on("end", function() {
              });
            });
            req.on("error", reject);
            req.end(JSON.stringify(event));
          }))];
        });
      });
    };
    BaseTransport2.prototype.sendEvent = function(_2) {
      throw new utils_1.SentryError("Transport Class has to implement `sendEvent` method.");
    };
    BaseTransport2.prototype.close = function(timeout) {
      return this._buffer.drain(timeout);
    };
    return BaseTransport2;
  }();
  exports2.BaseTransport = BaseTransport;
});

// ../../node_modules/.pnpm/agent-base@5.1.1/node_modules/agent-base/dist/src/promisify.js
var require_promisify2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  function promisify3(fn) {
    return function(req, opts) {
      return new Promise((resolve, reject) => {
        fn.call(this, req, opts, (err, rtn) => {
          if (err) {
            reject(err);
          } else {
            resolve(rtn);
          }
        });
      });
    };
  }
  exports2.default = promisify3;
});

// ../../node_modules/.pnpm/agent-base@5.1.1/node_modules/agent-base/dist/src/index.js
var require_src6 = __commonJS((exports2, module3) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  const events_1 = require("events");
  const promisify_1 = __importDefault(require_promisify2());
  function isAgentBase(v) {
    return Boolean(v) && typeof v.addRequest === "function";
  }
  function isHttpAgent(v) {
    return Boolean(v) && typeof v.addRequest === "function";
  }
  function isSecureEndpoint() {
    const {stack} = new Error();
    if (typeof stack !== "string")
      return false;
    return stack.split("\n").some((l) => l.indexOf("(https.js:") !== -1);
  }
  function createAgent(callback, opts) {
    return new createAgent.Agent(callback, opts);
  }
  (function(createAgent2) {
    class Agent extends events_1.EventEmitter {
      constructor(callback, _opts) {
        super();
        this.promisifiedCallback = void 0;
        let opts = _opts;
        if (typeof callback === "function") {
          this.callback = callback;
        } else if (callback) {
          opts = callback;
        }
        this.timeout = null;
        if (opts && typeof opts.timeout === "number") {
          this.timeout = opts.timeout;
        }
        this.options = opts || {};
        this.maxFreeSockets = 1;
        this.maxSockets = 1;
        this.sockets = [];
        this.requests = [];
      }
      get defaultPort() {
        if (typeof this.explicitDefaultPort === "number") {
          return this.explicitDefaultPort;
        } else {
          return isSecureEndpoint() ? 443 : 80;
        }
      }
      set defaultPort(v) {
        this.explicitDefaultPort = v;
      }
      get protocol() {
        if (typeof this.explicitProtocol === "string") {
          return this.explicitProtocol;
        } else {
          return isSecureEndpoint() ? "https:" : "http:";
        }
      }
      set protocol(v) {
        this.explicitProtocol = v;
      }
      callback(req, opts, fn) {
        throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`');
      }
      addRequest(req, _opts) {
        const ownOpts = Object.assign({}, _opts);
        if (typeof ownOpts.secureEndpoint !== "boolean") {
          ownOpts.secureEndpoint = isSecureEndpoint();
        }
        if (ownOpts.host == null) {
          ownOpts.host = "localhost";
        }
        if (ownOpts.port == null) {
          ownOpts.port = ownOpts.secureEndpoint ? 443 : 80;
        }
        const opts = Object.assign(Object.assign({}, this.options), ownOpts);
        if (opts.host && opts.path) {
          delete opts.path;
        }
        delete opts.agent;
        delete opts.hostname;
        delete opts._defaultAgent;
        delete opts.defaultPort;
        delete opts.createConnection;
        req._last = true;
        req.shouldKeepAlive = false;
        let timedOut = false;
        let timeout = null;
        const timeoutMs = this.timeout;
        const freeSocket = this.freeSocket;
        function onerror(err) {
          if (req._hadError)
            return;
          req.emit("error", err);
          req._hadError = true;
        }
        function ontimeout() {
          timeout = null;
          timedOut = true;
          const err = new Error(`A "socket" was not created for HTTP request before ${timeoutMs}ms`);
          err.code = "ETIMEOUT";
          onerror(err);
        }
        function callbackError(err) {
          if (timedOut)
            return;
          if (timeout !== null) {
            clearTimeout(timeout);
            timeout = null;
          }
          onerror(err);
        }
        function onsocket(socket) {
          let sock;
          function onfree() {
            freeSocket(sock, opts);
          }
          if (timedOut)
            return;
          if (timeout != null) {
            clearTimeout(timeout);
            timeout = null;
          }
          if (isAgentBase(socket) || isHttpAgent(socket)) {
            socket.addRequest(req, opts);
            return;
          }
          if (socket) {
            sock = socket;
            sock.on("free", onfree);
            req.onSocket(sock);
            return;
          }
          const err = new Error(`no Duplex stream was returned to agent-base for \`${req.method} ${req.path}\``);
          onerror(err);
        }
        if (typeof this.callback !== "function") {
          onerror(new Error("`callback` is not defined"));
          return;
        }
        if (!this.promisifiedCallback) {
          if (this.callback.length >= 3) {
            this.promisifiedCallback = promisify_1.default(this.callback);
          } else {
            this.promisifiedCallback = this.callback;
          }
        }
        if (typeof timeoutMs === "number" && timeoutMs > 0) {
          timeout = setTimeout(ontimeout, timeoutMs);
        }
        if ("port" in opts && typeof opts.port !== "number") {
          opts.port = Number(opts.port);
        }
        try {
          Promise.resolve(this.promisifiedCallback(req, opts)).then(onsocket, callbackError);
        } catch (err) {
          Promise.reject(err).catch(callbackError);
        }
      }
      freeSocket(socket, opts) {
        socket.destroy();
      }
      destroy() {
      }
    }
    createAgent2.Agent = Agent;
  })(createAgent || (createAgent = {}));
  createAgent.prototype = createAgent.Agent.prototype;
  module3.exports = createAgent;
});

// ../../node_modules/.pnpm/https-proxy-agent@4.0.0/node_modules/https-proxy-agent/index.js
var require_https_proxy_agent = __commonJS((exports2, module3) => {
  var net = require("net");
  var tls = require("tls");
  var url = require("url");
  var assert = require("assert");
  var Agent = require_src6();
  var inherits = require("util").inherits;
  var debug3 = require_src2()("https-proxy-agent");
  module3.exports = HttpsProxyAgent;
  function HttpsProxyAgent(opts) {
    if (!(this instanceof HttpsProxyAgent))
      return new HttpsProxyAgent(opts);
    if (typeof opts == "string")
      opts = url.parse(opts);
    if (!opts)
      throw new Error("an HTTP(S) proxy server `host` and `port` must be specified!");
    debug3("creating new HttpsProxyAgent instance: %o", opts);
    Agent.call(this, opts);
    var proxy = Object.assign({}, opts);
    this.secureProxy = proxy.protocol ? /^https:?$/i.test(proxy.protocol) : false;
    proxy.host = proxy.hostname || proxy.host;
    proxy.port = +proxy.port || (this.secureProxy ? 443 : 80);
    if (this.secureProxy && !("ALPNProtocols" in proxy)) {
      proxy.ALPNProtocols = ["http 1.1"];
    }
    if (proxy.host && proxy.path) {
      delete proxy.path;
      delete proxy.pathname;
    }
    this.proxy = proxy;
  }
  inherits(HttpsProxyAgent, Agent);
  HttpsProxyAgent.prototype.callback = function connect(req, opts, fn) {
    var proxy = this.proxy;
    var socket;
    if (this.secureProxy) {
      socket = tls.connect(proxy);
    } else {
      socket = net.connect(proxy);
    }
    var buffers = [];
    var buffersLength = 0;
    function read() {
      var b = socket.read();
      if (b)
        ondata(b);
      else
        socket.once("readable", read);
    }
    function cleanup() {
      socket.removeListener("end", onend);
      socket.removeListener("error", onerror);
      socket.removeListener("close", onclose);
      socket.removeListener("readable", read);
    }
    function onclose(err) {
      debug3("onclose had error %o", err);
    }
    function onend() {
      debug3("onend");
    }
    function onerror(err) {
      cleanup();
      fn(err);
    }
    function ondata(b) {
      buffers.push(b);
      buffersLength += b.length;
      var buffered = Buffer.concat(buffers, buffersLength);
      var str = buffered.toString("ascii");
      if (!~str.indexOf("\r\n\r\n")) {
        debug3("have not received end of HTTP headers yet...");
        read();
        return;
      }
      var firstLine = str.substring(0, str.indexOf("\r\n"));
      var statusCode = +firstLine.split(" ")[1];
      debug3("got proxy server response: %o", firstLine);
      if (statusCode == 200) {
        var sock = socket;
        buffers = buffered = null;
        if (opts.secureEndpoint) {
          debug3("upgrading proxy-connected socket to TLS connection: %o", opts.host);
          opts.socket = socket;
          opts.servername = opts.servername || opts.host;
          opts.host = null;
          opts.hostname = null;
          opts.port = null;
          sock = tls.connect(opts);
        }
        cleanup();
        req.once("socket", resume);
        fn(null, sock);
      } else {
        cleanup();
        socket.destroy();
        socket = new net.Socket();
        socket.readable = true;
        buffers = buffered;
        req.once("socket", onsocket);
        fn(null, socket);
      }
    }
    function onsocket(socket2) {
      debug3("replaying proxy buffer for failed request");
      assert(socket2.listenerCount("data") > 0);
      socket2.push(buffers);
      buffers = null;
    }
    socket.on("error", onerror);
    socket.on("close", onclose);
    socket.on("end", onend);
    read();
    var hostname = opts.host + ":" + opts.port;
    var msg = "CONNECT " + hostname + " HTTP/1.1\r\n";
    var headers = Object.assign({}, proxy.headers);
    if (proxy.auth) {
      headers["Proxy-Authorization"] = "Basic " + Buffer.from(proxy.auth).toString("base64");
    }
    var host = opts.host;
    if (!isDefaultPort(opts.port, opts.secureEndpoint)) {
      host += ":" + opts.port;
    }
    headers["Host"] = host;
    headers["Connection"] = "close";
    Object.keys(headers).forEach(function(name) {
      msg += name + ": " + headers[name] + "\r\n";
    });
    socket.write(msg + "\r\n");
  };
  function resume(socket) {
    socket.resume();
  }
  function isDefaultPort(port, secure) {
    return Boolean(!secure && port === 80 || secure && port === 443);
  }
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/transports/http.js
var require_http = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var utils_1 = require_dist15();
  var http = require("http");
  var base_1 = require_base2();
  var HTTPTransport = function(_super) {
    tslib_1.__extends(HTTPTransport2, _super);
    function HTTPTransport2(options) {
      var _this = _super.call(this, options) || this;
      _this.options = options;
      var proxy = options.httpProxy || process.env.http_proxy;
      _this.module = http;
      _this.client = proxy ? new (require_https_proxy_agent())(proxy) : new http.Agent({keepAlive: false, maxSockets: 30, timeout: 2e3});
      return _this;
    }
    HTTPTransport2.prototype.sendEvent = function(event) {
      if (!this.module) {
        throw new utils_1.SentryError("No module available in HTTPTransport");
      }
      return this._sendWithModule(this.module, event);
    };
    return HTTPTransport2;
  }(base_1.BaseTransport);
  exports2.HTTPTransport = HTTPTransport;
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/transports/https.js
var require_https = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var utils_1 = require_dist15();
  var https = require("https");
  var base_1 = require_base2();
  var HTTPSTransport = function(_super) {
    tslib_1.__extends(HTTPSTransport2, _super);
    function HTTPSTransport2(options) {
      var _this = _super.call(this, options) || this;
      _this.options = options;
      var proxy = options.httpsProxy || options.httpProxy || process.env.https_proxy || process.env.http_proxy;
      _this.module = https;
      _this.client = proxy ? new (require_https_proxy_agent())(proxy) : new https.Agent({keepAlive: false, maxSockets: 30, timeout: 2e3});
      return _this;
    }
    HTTPSTransport2.prototype.sendEvent = function(event) {
      if (!this.module) {
        throw new utils_1.SentryError("No module available in HTTPSTransport");
      }
      return this._sendWithModule(this.module, event);
    };
    return HTTPSTransport2;
  }(base_1.BaseTransport);
  exports2.HTTPSTransport = HTTPSTransport;
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/transports/index.js
var require_transports = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var base_1 = require_base2();
  exports2.BaseTransport = base_1.BaseTransport;
  var http_1 = require_http();
  exports2.HTTPTransport = http_1.HTTPTransport;
  var https_1 = require_https();
  exports2.HTTPSTransport = https_1.HTTPSTransport;
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/backend.js
var require_backend = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var core_1 = require_dist18();
  var types_1 = require_dist14();
  var utils_1 = require_dist15();
  var parsers_1 = require_parsers();
  var transports_1 = require_transports();
  var NodeBackend = function(_super) {
    tslib_1.__extends(NodeBackend2, _super);
    function NodeBackend2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    NodeBackend2.prototype._setupTransport = function() {
      if (!this._options.dsn) {
        return _super.prototype._setupTransport.call(this);
      }
      var dsn = new utils_1.Dsn(this._options.dsn);
      var transportOptions = tslib_1.__assign({}, this._options.transportOptions, this._options.httpProxy && {httpProxy: this._options.httpProxy}, this._options.httpsProxy && {httpsProxy: this._options.httpsProxy}, this._options.caCerts && {caCerts: this._options.caCerts}, {dsn: this._options.dsn});
      if (this._options.transport) {
        return new this._options.transport(transportOptions);
      }
      if (dsn.protocol === "http") {
        return new transports_1.HTTPTransport(transportOptions);
      }
      return new transports_1.HTTPSTransport(transportOptions);
    };
    NodeBackend2.prototype.eventFromException = function(exception, hint) {
      var _this = this;
      var ex = exception;
      var mechanism = {
        handled: true,
        type: "generic"
      };
      if (!utils_1.isError(exception)) {
        if (utils_1.isPlainObject(exception)) {
          var message = "Non-Error exception captured with keys: " + utils_1.extractExceptionKeysForMessage(exception);
          core_1.getCurrentHub().configureScope(function(scope) {
            scope.setExtra("__serialized__", utils_1.normalizeToSize(exception));
          });
          ex = hint && hint.syntheticException || new Error(message);
          ex.message = message;
        } else {
          ex = hint && hint.syntheticException || new Error(exception);
        }
        mechanism.synthetic = true;
      }
      return new utils_1.SyncPromise(function(resolve, reject) {
        return parsers_1.parseError(ex, _this._options).then(function(event) {
          utils_1.addExceptionTypeValue(event, void 0, void 0);
          utils_1.addExceptionMechanism(event, mechanism);
          resolve(tslib_1.__assign({}, event, {event_id: hint && hint.event_id}));
        }).then(null, reject);
      });
    };
    NodeBackend2.prototype.eventFromMessage = function(message, level, hint) {
      var _this = this;
      if (level === void 0) {
        level = types_1.Severity.Info;
      }
      var event = {
        event_id: hint && hint.event_id,
        level,
        message
      };
      return new utils_1.SyncPromise(function(resolve) {
        if (_this._options.attachStacktrace && hint && hint.syntheticException) {
          var stack = hint.syntheticException ? parsers_1.extractStackFromError(hint.syntheticException) : [];
          parsers_1.parseStack(stack, _this._options).then(function(frames) {
            event.stacktrace = {
              frames: parsers_1.prepareFramesForEvent(frames)
            };
            resolve(event);
          }).then(null, function() {
            resolve(event);
          });
        } else {
          resolve(event);
        }
      });
    };
    return NodeBackend2;
  }(core_1.BaseBackend);
  exports2.NodeBackend = NodeBackend;
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/client.js
var require_client2 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var core_1 = require_dist18();
  var backend_1 = require_backend();
  var version_1 = require_version();
  var NodeClient = function(_super) {
    tslib_1.__extends(NodeClient2, _super);
    function NodeClient2(options) {
      return _super.call(this, backend_1.NodeBackend, options) || this;
    }
    NodeClient2.prototype._prepareEvent = function(event, scope, hint) {
      event.platform = event.platform || "node";
      event.sdk = tslib_1.__assign({}, event.sdk, {name: version_1.SDK_NAME, packages: tslib_1.__spread(event.sdk && event.sdk.packages || [], [
        {
          name: "npm:@sentry/node",
          version: version_1.SDK_VERSION
        }
      ]), version: version_1.SDK_VERSION});
      if (this.getOptions().serverName) {
        event.server_name = this.getOptions().serverName;
      }
      return _super.prototype._prepareEvent.call(this, event, scope, hint);
    };
    return NodeClient2;
  }(core_1.BaseClient);
  exports2.NodeClient = NodeClient;
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/integrations/console.js
var require_console = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var core_1 = require_dist18();
  var types_1 = require_dist14();
  var utils_1 = require_dist15();
  var util4 = require("util");
  var Console = function() {
    function Console2() {
      this.name = Console2.id;
    }
    Console2.prototype.setupOnce = function() {
      var e_1, _a;
      var consoleModule = require("console");
      try {
        for (var _b = tslib_1.__values(["debug", "info", "warn", "error", "log"]), _c = _b.next(); !_c.done; _c = _b.next()) {
          var level = _c.value;
          utils_1.fill(consoleModule, level, createConsoleWrapper(level));
        }
      } catch (e_1_1) {
        e_1 = {error: e_1_1};
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    };
    Console2.id = "Console";
    return Console2;
  }();
  exports2.Console = Console;
  function createConsoleWrapper(level) {
    return function consoleWrapper(originalConsoleMethod) {
      var sentryLevel;
      switch (level) {
        case "debug":
          sentryLevel = types_1.Severity.Debug;
          break;
        case "error":
          sentryLevel = types_1.Severity.Error;
          break;
        case "info":
          sentryLevel = types_1.Severity.Info;
          break;
        case "warn":
          sentryLevel = types_1.Severity.Warning;
          break;
        default:
          sentryLevel = types_1.Severity.Log;
      }
      return function() {
        if (core_1.getCurrentHub().getIntegration(Console)) {
          core_1.getCurrentHub().addBreadcrumb({
            category: "console",
            level: sentryLevel,
            message: util4.format.apply(void 0, arguments)
          }, {
            input: tslib_1.__spread(arguments),
            level
          });
        }
        originalConsoleMethod.apply(this, arguments);
      };
    };
  }
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/integrations/http.js
var require_http2 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var core_1 = require_dist18();
  var utils_1 = require_dist15();
  var NODE_VERSION = utils_1.parseSemver(process.versions.node);
  var Http = function() {
    function Http2(options) {
      if (options === void 0) {
        options = {};
      }
      this.name = Http2.id;
      this._breadcrumbs = typeof options.breadcrumbs === "undefined" ? true : options.breadcrumbs;
      this._tracing = typeof options.tracing === "undefined" ? false : options.tracing;
    }
    Http2.prototype.setupOnce = function() {
      if (!this._breadcrumbs && !this._tracing) {
        return;
      }
      var handlerWrapper = createHandlerWrapper(this._breadcrumbs, this._tracing);
      var httpModule = require("http");
      utils_1.fill(httpModule, "get", handlerWrapper);
      utils_1.fill(httpModule, "request", handlerWrapper);
      if (NODE_VERSION.major && NODE_VERSION.major > 8) {
        var httpsModule = require("https");
        utils_1.fill(httpsModule, "get", handlerWrapper);
        utils_1.fill(httpsModule, "request", handlerWrapper);
      }
    };
    Http2.id = "Http";
    return Http2;
  }();
  exports2.Http = Http;
  function createHandlerWrapper(breadcrumbsEnabled, tracingEnabled) {
    return function handlerWrapper(originalHandler) {
      return function(options) {
        var requestUrl = extractUrl(options);
        if (isSentryRequest(requestUrl)) {
          return originalHandler.apply(this, arguments);
        }
        var span;
        if (tracingEnabled) {
          span = core_1.getCurrentHub().startSpan({
            description: (typeof options === "string" || !options.method ? "GET" : options.method) + " " + requestUrl,
            op: "request"
          });
        }
        return originalHandler.apply(this, arguments).once("response", function(res) {
          if (breadcrumbsEnabled) {
            addRequestBreadcrumb("response", requestUrl, this, res);
          }
          if (tracingEnabled && span) {
            span.setHttpStatus(res.statusCode);
            span.finish();
          }
        }).once("error", function() {
          if (breadcrumbsEnabled) {
            addRequestBreadcrumb("error", requestUrl, this);
          }
          if (tracingEnabled && span) {
            span.setHttpStatus(500);
            span.finish();
          }
        });
      };
    };
  }
  function addRequestBreadcrumb(event, url, req, res) {
    if (!core_1.getCurrentHub().getIntegration(Http)) {
      return;
    }
    core_1.getCurrentHub().addBreadcrumb({
      category: "http",
      data: {
        method: req.method,
        status_code: res && res.statusCode,
        url
      },
      type: "http"
    }, {
      event,
      request: req,
      response: res
    });
  }
  function extractUrl(options) {
    if (typeof options === "string") {
      return options;
    }
    var protocol = options.protocol || "";
    var hostname = options.hostname || options.host || "";
    var port = !options.port || options.port === 80 || options.port === 443 ? "" : ":" + options.port;
    var path19 = options.path || "/";
    return protocol + "//" + hostname + port + path19;
  }
  function isSentryRequest(url) {
    var client = core_1.getCurrentHub().getClient();
    if (!url || !client) {
      return false;
    }
    var dsn = client.getDsn();
    if (!dsn) {
      return false;
    }
    return url.indexOf(dsn.host) !== -1;
  }
});

// ../../node_modules/.pnpm/@sentry/apm@5.15.5/node_modules/@sentry/apm/dist/span.js
var require_span2 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var hub_1 = require_dist16();
  var types_1 = require_dist14();
  var utils_1 = require_dist15();
  exports2.TRACEPARENT_REGEXP = new RegExp("^[ \\t]*([0-9a-f]{32})?-?([0-9a-f]{16})?-?([01])?[ \\t]*$");
  var SpanRecorder = function() {
    function SpanRecorder2(maxlen) {
      if (maxlen === void 0) {
        maxlen = 1e3;
      }
      this.spans = [];
      this._maxlen = maxlen;
    }
    SpanRecorder2.prototype.add = function(span) {
      if (this.spans.length > this._maxlen) {
        span.spanRecorder = void 0;
      } else {
        this.spans.push(span);
      }
    };
    return SpanRecorder2;
  }();
  var Span = function() {
    function Span2(spanContext, hub) {
      this._hub = hub_1.getCurrentHub();
      this._traceId = utils_1.uuid4();
      this._spanId = utils_1.uuid4().substring(16);
      this.startTimestamp = utils_1.timestampWithMs();
      this.tags = {};
      this.data = {};
      if (utils_1.isInstanceOf(hub, hub_1.Hub)) {
        this._hub = hub;
      }
      if (!spanContext) {
        return this;
      }
      if (spanContext.traceId) {
        this._traceId = spanContext.traceId;
      }
      if (spanContext.spanId) {
        this._spanId = spanContext.spanId;
      }
      if (spanContext.parentSpanId) {
        this._parentSpanId = spanContext.parentSpanId;
      }
      if ("sampled" in spanContext) {
        this.sampled = spanContext.sampled;
      }
      if (spanContext.transaction) {
        this.transaction = spanContext.transaction;
      }
      if (spanContext.op) {
        this.op = spanContext.op;
      }
      if (spanContext.description) {
        this.description = spanContext.description;
      }
      if (spanContext.data) {
        this.data = spanContext.data;
      }
      if (spanContext.tags) {
        this.tags = spanContext.tags;
      }
      if (spanContext.status) {
        this._status = spanContext.status;
      }
    }
    Span2.prototype.initSpanRecorder = function(maxlen) {
      if (maxlen === void 0) {
        maxlen = 1e3;
      }
      if (!this.spanRecorder) {
        this.spanRecorder = new SpanRecorder(maxlen);
      }
      this.spanRecorder.add(this);
    };
    Span2.prototype.child = function(spanContext) {
      var span = new Span2(tslib_1.__assign({}, spanContext, {parentSpanId: this._spanId, sampled: this.sampled, traceId: this._traceId}));
      span.spanRecorder = this.spanRecorder;
      if (span.spanRecorder) {
        span.spanRecorder.add(span);
      }
      return span;
    };
    Span2.prototype.isRootSpan = function() {
      return this._parentSpanId === void 0;
    };
    Span2.fromTraceparent = function(traceparent, spanContext) {
      var matches = traceparent.match(exports2.TRACEPARENT_REGEXP);
      if (matches) {
        var sampled = void 0;
        if (matches[3] === "1") {
          sampled = true;
        } else if (matches[3] === "0") {
          sampled = false;
        }
        return new Span2(tslib_1.__assign({}, spanContext, {parentSpanId: matches[2], sampled, traceId: matches[1]}));
      }
      return void 0;
    };
    Span2.prototype.setTag = function(key, value) {
      var _a;
      this.tags = tslib_1.__assign({}, this.tags, (_a = {}, _a[key] = value, _a));
      return this;
    };
    Span2.prototype.setData = function(key, value) {
      var _a;
      this.data = tslib_1.__assign({}, this.data, (_a = {}, _a[key] = value, _a));
      return this;
    };
    Span2.prototype.setStatus = function(value) {
      this._status = value;
      return this;
    };
    Span2.prototype.setHttpStatus = function(httpStatus) {
      this.setTag("http.status_code", String(httpStatus));
      var spanStatus = types_1.SpanStatus.fromHttpCode(httpStatus);
      if (spanStatus !== types_1.SpanStatus.UnknownError) {
        this.setStatus(spanStatus);
      }
      return this;
    };
    Span2.prototype.isSuccess = function() {
      return this._status === types_1.SpanStatus.Ok;
    };
    Span2.prototype.finish = function(trimEnd) {
      var _this = this;
      if (trimEnd === void 0) {
        trimEnd = false;
      }
      if (this.timestamp !== void 0) {
        return void 0;
      }
      this.timestamp = utils_1.timestampWithMs();
      if (!this.isRootSpan()) {
        return void 0;
      }
      if (this.spanRecorder === void 0) {
        return void 0;
      }
      if (this.sampled !== true) {
        utils_1.logger.warn("Discarding transaction Span because it was span.sampled !== true");
        return void 0;
      }
      var finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(function(s) {
        return s !== _this && s.timestamp;
      }) : [];
      if (trimEnd && finishedSpans.length > 0) {
        this.timestamp = finishedSpans.reduce(function(prev, current) {
          if (prev.timestamp && current.timestamp) {
            return prev.timestamp > current.timestamp ? prev : current;
          }
          return prev;
        }).timestamp;
      }
      return this._hub.captureEvent({
        contexts: {
          trace: this.getTraceContext()
        },
        spans: finishedSpans,
        start_timestamp: this.startTimestamp,
        tags: this.tags,
        timestamp: this.timestamp,
        transaction: this.transaction,
        type: "transaction"
      });
    };
    Span2.prototype.toTraceparent = function() {
      var sampledString = "";
      if (this.sampled !== void 0) {
        sampledString = this.sampled ? "-1" : "-0";
      }
      return this._traceId + "-" + this._spanId + sampledString;
    };
    Span2.prototype.getTraceContext = function() {
      return utils_1.dropUndefinedKeys({
        data: Object.keys(this.data).length > 0 ? this.data : void 0,
        description: this.description,
        op: this.op,
        parent_span_id: this._parentSpanId,
        span_id: this._spanId,
        status: this._status,
        tags: Object.keys(this.tags).length > 0 ? this.tags : void 0,
        trace_id: this._traceId
      });
    };
    Span2.prototype.toJSON = function() {
      return utils_1.dropUndefinedKeys({
        data: Object.keys(this.data).length > 0 ? this.data : void 0,
        description: this.description,
        op: this.op,
        parent_span_id: this._parentSpanId,
        sampled: this.sampled,
        span_id: this._spanId,
        start_timestamp: this.startTimestamp,
        tags: Object.keys(this.tags).length > 0 ? this.tags : void 0,
        timestamp: this.timestamp,
        trace_id: this._traceId,
        transaction: this.transaction
      });
    };
    return Span2;
  }();
  exports2.Span = Span;
});

// ../../node_modules/.pnpm/@sentry/apm@5.15.5/node_modules/@sentry/apm/dist/hubextensions.js
var require_hubextensions = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var hub_1 = require_dist16();
  var span_1 = require_span2();
  function traceHeaders() {
    var that = this;
    var scope = that.getScope();
    if (scope) {
      var span = scope.getSpan();
      if (span) {
        return {
          "sentry-trace": span.toTraceparent()
        };
      }
    }
    return {};
  }
  function startSpan(spanContext) {
    var hub = this;
    var scope = hub.getScope();
    var client = hub.getClient();
    var span;
    var addedAsChild = false;
    if (scope) {
      var parentSpan = scope.getSpan();
      if (parentSpan) {
        span = parentSpan.child(spanContext);
        addedAsChild = true;
      }
    }
    if (!span) {
      span = new span_1.Span(spanContext, hub);
    }
    if (span.sampled === void 0 && span.isRootSpan()) {
      var sampleRate = client && client.getOptions().tracesSampleRate || 0;
      span.sampled = Math.random() < sampleRate;
    }
    if (span.sampled && !addedAsChild) {
      var experimentsOptions = client && client.getOptions()._experiments || {};
      span.initSpanRecorder(experimentsOptions.maxSpans);
    }
    return span;
  }
  function addExtensionMethods() {
    var carrier = hub_1.getMainCarrier();
    if (carrier.__SENTRY__) {
      carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};
      if (!carrier.__SENTRY__.extensions.startSpan) {
        carrier.__SENTRY__.extensions.startSpan = startSpan;
      }
      if (!carrier.__SENTRY__.extensions.traceHeaders) {
        carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;
      }
    }
  }
  exports2.addExtensionMethods = addExtensionMethods;
});

// ../../node_modules/.pnpm/@sentry/apm@5.15.5/node_modules/@sentry/apm/dist/integrations/express.js
var require_express = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var utils_1 = require_dist15();
  var Express = function() {
    function Express2(options) {
      if (options === void 0) {
        options = {};
      }
      this.name = Express2.id;
      this._app = options.app;
    }
    Express2.prototype.setupOnce = function(_addGlobalEventProcessor, getCurrentHub) {
      if (!this._app) {
        utils_1.logger.error("ExpressIntegration is missing an Express instance");
        return;
      }
      instrumentMiddlewares(this._app, getCurrentHub);
    };
    Express2.id = "Express";
    return Express2;
  }();
  exports2.Express = Express;
  function wrap(fn, getCurrentHub) {
    var arrity = fn.length;
    switch (arrity) {
      case 2: {
        return function(_req, res) {
          var span = getCurrentHub().startSpan({
            description: fn.name,
            op: "middleware"
          });
          res.once("finish", function() {
            return span.finish();
          });
          return fn.apply(this, arguments);
        };
      }
      case 3: {
        return function(req, res, next) {
          var span = getCurrentHub().startSpan({
            description: fn.name,
            op: "middleware"
          });
          fn.call(this, req, res, function() {
            span.finish();
            return next.apply(this, arguments);
          });
        };
      }
      case 4: {
        return function(err, req, res, next) {
          var span = getCurrentHub().startSpan({
            description: fn.name,
            op: "middleware"
          });
          fn.call(this, err, req, res, function() {
            span.finish();
            return next.apply(this, arguments);
          });
        };
      }
      default: {
        throw new Error("Express middleware takes 2-4 arguments. Got: " + arrity);
      }
    }
  }
  function wrapUseArgs(args2, getCurrentHub) {
    return Array.from(args2).map(function(arg11) {
      if (typeof arg11 === "function") {
        return wrap(arg11, getCurrentHub);
      }
      if (Array.isArray(arg11)) {
        return arg11.map(function(a) {
          if (typeof a === "function") {
            return wrap(a, getCurrentHub);
          }
          return a;
        });
      }
      return arg11;
    });
  }
  function instrumentMiddlewares(app, getCurrentHub) {
    var originalAppUse = app.use;
    app.use = function() {
      return originalAppUse.apply(this, wrapUseArgs(arguments, getCurrentHub));
    };
    return app;
  }
});

// ../../node_modules/.pnpm/@sentry/apm@5.15.5/node_modules/@sentry/apm/dist/integrations/tracing.js
var require_tracing = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var types_1 = require_dist14();
  var utils_1 = require_dist15();
  var global2 = utils_1.getGlobalObject();
  var defaultTracingOrigins = ["localhost", /^\//];
  var Tracing = function() {
    function Tracing2(_options) {
      this.name = Tracing2.id;
      this._emitOptionsWarning = false;
      if (global2.performance) {
        global2.performance.mark("sentry-tracing-init");
      }
      var defaults = {
        discardBackgroundSpans: true,
        idleTimeout: 500,
        maxTransactionDuration: 600,
        shouldCreateSpanForRequest: function(url) {
          var origins = _options && _options.tracingOrigins || defaultTracingOrigins;
          return origins.some(function(origin) {
            return utils_1.isMatchingPattern(url, origin);
          }) && !utils_1.isMatchingPattern(url, "sentry_key");
        },
        startTransactionOnLocationChange: true,
        traceFetch: true,
        traceXHR: true,
        tracingOrigins: defaultTracingOrigins
      };
      if (!_options || !Array.isArray(_options.tracingOrigins) || _options.tracingOrigins.length === 0) {
        this._emitOptionsWarning = true;
      }
      Tracing2.options = tslib_1.__assign({}, defaults, _options);
    }
    Tracing2.prototype.setupOnce = function(addGlobalEventProcessor, getCurrentHub) {
      Tracing2._getCurrentHub = getCurrentHub;
      if (this._emitOptionsWarning) {
        utils_1.logger.warn("[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.");
        utils_1.logger.warn("[Tracing] We added a reasonable default for you: " + defaultTracingOrigins);
      }
      if (global2.location && global2.location.href) {
        Tracing2.startIdleTransaction(global2.location.href, {
          op: "pageload"
        });
      }
      this._setupXHRTracing();
      this._setupFetchTracing();
      this._setupHistory();
      this._setupErrorHandling();
      this._setupBackgroundTabDetection();
      Tracing2._pingHeartbeat();
      addGlobalEventProcessor(function(event) {
        var self2 = getCurrentHub().getIntegration(Tracing2);
        if (!self2) {
          return event;
        }
        var isOutdatedTransaction = event.timestamp && event.start_timestamp && (event.timestamp - event.start_timestamp > Tracing2.options.maxTransactionDuration || event.timestamp - event.start_timestamp < 0);
        if (Tracing2.options.maxTransactionDuration !== 0 && event.type === "transaction" && isOutdatedTransaction) {
          utils_1.logger.log("[Tracing] Discarded transaction since it maxed out maxTransactionDuration");
          return null;
        }
        return event;
      });
    };
    Tracing2._pingHeartbeat = function() {
      Tracing2._heartbeatTimer = setTimeout(function() {
        Tracing2._beat();
      }, 5e3);
    };
    Tracing2._beat = function() {
      clearTimeout(Tracing2._heartbeatTimer);
      var keys = Object.keys(Tracing2._activities);
      if (keys.length) {
        var heartbeatString = keys.reduce(function(prev, current) {
          return prev + current;
        });
        if (heartbeatString === Tracing2._prevHeartbeatString) {
          Tracing2._heartbeatCounter++;
        } else {
          Tracing2._heartbeatCounter = 0;
        }
        if (Tracing2._heartbeatCounter >= 3) {
          if (Tracing2._activeTransaction) {
            utils_1.logger.log("[Tracing] Heartbeat safeguard kicked in, finishing transaction since activities content hasn't changed for 3 beats");
            Tracing2._activeTransaction.setStatus(types_1.SpanStatus.DeadlineExceeded);
            Tracing2._activeTransaction.setTag("heartbeat", "failed");
            Tracing2.finishIdleTransaction();
          }
        }
        Tracing2._prevHeartbeatString = heartbeatString;
      }
      Tracing2._pingHeartbeat();
    };
    Tracing2.prototype._setupBackgroundTabDetection = function() {
      if (Tracing2.options.discardBackgroundSpans && global2.document) {
        document.addEventListener("visibilitychange", function() {
          if (document.hidden && Tracing2._activeTransaction) {
            utils_1.logger.log("[Tracing] Discarded active transaction incl. activities since tab moved to the background");
            Tracing2._resetActiveTransaction();
          }
        });
      }
    };
    Tracing2._resetActiveTransaction = function() {
      var _getCurrentHub = Tracing2._getCurrentHub;
      if (_getCurrentHub) {
        var hub = _getCurrentHub();
        var scope = hub.getScope();
        if (scope) {
          if (scope.getSpan() === Tracing2._activeTransaction) {
            scope.setSpan(void 0);
          }
        }
      }
      Tracing2._activeTransaction = void 0;
      Tracing2._activities = {};
    };
    Tracing2.prototype._setupHistory = function() {
      if (Tracing2.options.startTransactionOnLocationChange) {
        utils_1.addInstrumentationHandler({
          callback: historyCallback,
          type: "history"
        });
      }
    };
    Tracing2.prototype._setupFetchTracing = function() {
      if (Tracing2.options.traceFetch && utils_1.supportsNativeFetch()) {
        utils_1.addInstrumentationHandler({
          callback: fetchCallback,
          type: "fetch"
        });
      }
    };
    Tracing2.prototype._setupXHRTracing = function() {
      if (Tracing2.options.traceXHR) {
        utils_1.addInstrumentationHandler({
          callback: xhrCallback,
          type: "xhr"
        });
      }
    };
    Tracing2.prototype._setupErrorHandling = function() {
      function errorCallback() {
        if (Tracing2._activeTransaction) {
          utils_1.logger.log("[Tracing] Global error occured, setting status in transaction: " + types_1.SpanStatus.InternalError);
          Tracing2._activeTransaction.setStatus(types_1.SpanStatus.InternalError);
        }
      }
      utils_1.addInstrumentationHandler({
        callback: errorCallback,
        type: "error"
      });
      utils_1.addInstrumentationHandler({
        callback: errorCallback,
        type: "unhandledrejection"
      });
    };
    Tracing2.startIdleTransaction = function(name, spanContext) {
      Tracing2.finishIdleTransaction();
      utils_1.logger.log("[Tracing] startIdleTransaction, name:", name);
      var _getCurrentHub = Tracing2._getCurrentHub;
      if (!_getCurrentHub) {
        return void 0;
      }
      var hub = _getCurrentHub();
      if (!hub) {
        return void 0;
      }
      Tracing2._activeTransaction = hub.startSpan(tslib_1.__assign({}, spanContext, {transaction: name}));
      hub.configureScope(function(scope) {
        scope.setSpan(Tracing2._activeTransaction);
      });
      var id = Tracing2.pushActivity("idleTransactionStarted");
      setTimeout(function() {
        Tracing2.popActivity(id);
      }, Tracing2.options && Tracing2.options.idleTimeout || 100);
      return Tracing2._activeTransaction;
    };
    Tracing2.finishIdleTransaction = function() {
      var active = Tracing2._activeTransaction;
      if (active) {
        Tracing2._addPerformanceEntries(active);
        utils_1.logger.log("[Tracing] finishIdleTransaction", active.transaction);
        active.finish(true);
        Tracing2._resetActiveTransaction();
      }
    };
    Tracing2._addPerformanceEntries = function(transactionSpan) {
      if (!global2.performance) {
        return;
      }
      utils_1.logger.log("[Tracing] Adding & adjusting spans using Performance API");
      var timeOrigin = Tracing2._msToSec(performance.timeOrigin);
      function addPerformanceNavigationTiming(parent, entry, event) {
        var span = parent.child({
          description: event,
          op: "browser"
        });
        span.startTimestamp = timeOrigin + Tracing2._msToSec(entry[event + "Start"]);
        span.timestamp = timeOrigin + Tracing2._msToSec(entry[event + "End"]);
      }
      function addRequest(parent, entry) {
        var request = parent.child({
          description: "request",
          op: "browser"
        });
        request.startTimestamp = timeOrigin + Tracing2._msToSec(entry.requestStart);
        request.timestamp = timeOrigin + Tracing2._msToSec(entry.responseEnd);
        var response = parent.child({
          description: "response",
          op: "browser"
        });
        response.startTimestamp = timeOrigin + Tracing2._msToSec(entry.responseStart);
        response.timestamp = timeOrigin + Tracing2._msToSec(entry.responseEnd);
      }
      var entryScriptSrc;
      if (global2.document) {
        for (var i = 0; i < document.scripts.length; i++) {
          if (document.scripts[i].dataset.entry === "true") {
            entryScriptSrc = document.scripts[i].src;
            break;
          }
        }
      }
      var entryScriptStartEndTime;
      var tracingInitMarkStartTime;
      performance.getEntries().slice(Tracing2._performanceCursor).forEach(function(entry) {
        var startTime = Tracing2._msToSec(entry.startTime);
        var duration = Tracing2._msToSec(entry.duration);
        if (transactionSpan.op === "navigation" && timeOrigin + startTime < transactionSpan.startTimestamp) {
          return;
        }
        switch (entry.entryType) {
          case "navigation":
            addPerformanceNavigationTiming(transactionSpan, entry, "unloadEvent");
            addPerformanceNavigationTiming(transactionSpan, entry, "domContentLoadedEvent");
            addPerformanceNavigationTiming(transactionSpan, entry, "loadEvent");
            addPerformanceNavigationTiming(transactionSpan, entry, "connect");
            addPerformanceNavigationTiming(transactionSpan, entry, "domainLookup");
            addRequest(transactionSpan, entry);
            break;
          case "mark":
          case "paint":
          case "measure":
            var mark = transactionSpan.child({
              description: entry.entryType + " " + entry.name,
              op: "mark"
            });
            mark.startTimestamp = timeOrigin + startTime;
            mark.timestamp = mark.startTimestamp + duration;
            if (tracingInitMarkStartTime === void 0 && entry.name === "sentry-tracing-init") {
              tracingInitMarkStartTime = mark.startTimestamp;
            }
            break;
          case "resource":
            var resourceName_1 = entry.name.replace(window.location.origin, "");
            if (entry.initiatorType === "xmlhttprequest" || entry.initiatorType === "fetch") {
              if (transactionSpan.spanRecorder) {
                transactionSpan.spanRecorder.spans.map(function(finishedSpan) {
                  if (finishedSpan.description && finishedSpan.description.indexOf(resourceName_1) !== -1) {
                    finishedSpan.startTimestamp = timeOrigin + startTime;
                    finishedSpan.timestamp = finishedSpan.startTimestamp + duration;
                  }
                });
              }
            } else {
              var resource = transactionSpan.child({
                description: entry.initiatorType + " " + resourceName_1,
                op: "resource"
              });
              resource.startTimestamp = timeOrigin + startTime;
              resource.timestamp = resource.startTimestamp + duration;
              if (entryScriptStartEndTime === void 0 && (entryScriptSrc || "").includes(resourceName_1)) {
                entryScriptStartEndTime = resource.timestamp;
              }
            }
            break;
          default:
        }
      });
      if (entryScriptStartEndTime !== void 0 && tracingInitMarkStartTime !== void 0) {
        var evaluation = transactionSpan.child({
          description: "evaluation",
          op: "script"
        });
        evaluation.startTimestamp = entryScriptStartEndTime;
        evaluation.timestamp = tracingInitMarkStartTime;
      }
      Tracing2._performanceCursor = Math.max(performance.getEntries().length - 1, 0);
    };
    Tracing2.setTransactionStatus = function(status) {
      var active = Tracing2._activeTransaction;
      if (active) {
        utils_1.logger.log("[Tracing] setTransactionStatus", status);
        active.setStatus(status);
      }
    };
    Tracing2._msToSec = function(time) {
      return time / 1e3;
    };
    Tracing2.pushActivity = function(name, spanContext, options) {
      var activeTransaction = Tracing2._activeTransaction;
      if (!activeTransaction) {
        utils_1.logger.log("[Tracing] Not pushing activity " + name + " since there is no active transaction");
        return 0;
      }
      clearTimeout(Tracing2._debounce);
      var _getCurrentHub = Tracing2._getCurrentHub;
      if (spanContext && _getCurrentHub) {
        var hub = _getCurrentHub();
        if (hub) {
          var span = activeTransaction.child(spanContext);
          Tracing2._activities[Tracing2._currentIndex] = {
            name,
            span
          };
        }
      } else {
        Tracing2._activities[Tracing2._currentIndex] = {
          name
        };
      }
      utils_1.logger.log("[Tracing] pushActivity: " + name + "#" + Tracing2._currentIndex);
      utils_1.logger.log("[Tracing] activies count", Object.keys(Tracing2._activities).length);
      if (options && typeof options.autoPopAfter === "number") {
        utils_1.logger.log("[Tracing] auto pop of: " + name + "#" + Tracing2._currentIndex + " in " + options.autoPopAfter + "ms");
        var index_1 = Tracing2._currentIndex;
        setTimeout(function() {
          Tracing2.popActivity(index_1, {
            autoPop: true,
            status: types_1.SpanStatus.DeadlineExceeded
          });
        }, options.autoPopAfter);
      }
      return Tracing2._currentIndex++;
    };
    Tracing2.popActivity = function(id, spanData) {
      if (!id) {
        return;
      }
      var activity = Tracing2._activities[id];
      if (activity) {
        utils_1.logger.log("[Tracing] popActivity " + activity.name + "#" + id);
        var span_1 = activity.span;
        if (span_1) {
          if (spanData) {
            Object.keys(spanData).forEach(function(key) {
              span_1.setData(key, spanData[key]);
              if (key === "status_code") {
                span_1.setHttpStatus(spanData[key]);
              }
              if (key === "status") {
                span_1.setStatus(spanData[key]);
              }
            });
          }
          span_1.finish();
        }
        delete Tracing2._activities[id];
      }
      var count = Object.keys(Tracing2._activities).length;
      clearTimeout(Tracing2._debounce);
      utils_1.logger.log("[Tracing] activies count", count);
      if (count === 0 && Tracing2._activeTransaction) {
        var timeout = Tracing2.options && Tracing2.options.idleTimeout;
        utils_1.logger.log("[Tracing] Flushing Transaction in " + timeout + "ms");
        Tracing2._debounce = setTimeout(function() {
          Tracing2.finishIdleTransaction();
        }, timeout);
      }
    };
    Tracing2.id = "Tracing";
    Tracing2._currentIndex = 1;
    Tracing2._activities = {};
    Tracing2._debounce = 0;
    Tracing2._performanceCursor = 0;
    Tracing2._heartbeatTimer = 0;
    Tracing2._heartbeatCounter = 0;
    return Tracing2;
  }();
  exports2.Tracing = Tracing;
  function xhrCallback(handlerData) {
    if (!Tracing.options.traceXHR) {
      return;
    }
    if (!handlerData || !handlerData.xhr || !handlerData.xhr.__sentry_xhr__) {
      return;
    }
    var xhr = handlerData.xhr.__sentry_xhr__;
    if (!Tracing.options.shouldCreateSpanForRequest(xhr.url)) {
      return;
    }
    if (handlerData.xhr.__sentry_own_request__) {
      return;
    }
    if (handlerData.endTimestamp && handlerData.xhr.__sentry_xhr_activity_id__) {
      Tracing.popActivity(handlerData.xhr.__sentry_xhr_activity_id__, handlerData.xhr.__sentry_xhr__);
      return;
    }
    handlerData.xhr.__sentry_xhr_activity_id__ = Tracing.pushActivity("xhr", {
      data: tslib_1.__assign({}, xhr.data, {type: "xhr"}),
      description: xhr.method + " " + xhr.url,
      op: "http"
    });
    var activity = Tracing._activities[handlerData.xhr.__sentry_xhr_activity_id__];
    if (activity) {
      var span = activity.span;
      if (span && handlerData.xhr.setRequestHeader) {
        try {
          handlerData.xhr.setRequestHeader("sentry-trace", span.toTraceparent());
        } catch (_2) {
        }
      }
    }
  }
  function fetchCallback(handlerData) {
    if (!Tracing.options.traceFetch) {
      return;
    }
    if (!Tracing.options.shouldCreateSpanForRequest(handlerData.fetchData.url)) {
      return;
    }
    if (handlerData.endTimestamp && handlerData.fetchData.__activity) {
      Tracing.popActivity(handlerData.fetchData.__activity, handlerData.fetchData);
    } else {
      handlerData.fetchData.__activity = Tracing.pushActivity("fetch", {
        data: tslib_1.__assign({}, handlerData.fetchData, {type: "fetch"}),
        description: handlerData.fetchData.method + " " + handlerData.fetchData.url,
        op: "http"
      });
      var activity = Tracing._activities[handlerData.fetchData.__activity];
      if (activity) {
        var span = activity.span;
        if (span) {
          var options = handlerData.args[1] = handlerData.args[1] || {};
          if (options.headers) {
            if (Array.isArray(options.headers)) {
              options.headers = tslib_1.__spread(options.headers, [{"sentry-trace": span.toTraceparent()}]);
            } else {
              options.headers = tslib_1.__assign({}, options.headers, {"sentry-trace": span.toTraceparent()});
            }
          } else {
            options.headers = {"sentry-trace": span.toTraceparent()};
          }
        }
      }
    }
  }
  function historyCallback(_2) {
    if (Tracing.options.startTransactionOnLocationChange && global2 && global2.location) {
      Tracing.startIdleTransaction(global2.location.href, {
        op: "navigation"
      });
    }
  }
});

// ../../node_modules/.pnpm/@sentry/apm@5.15.5/node_modules/@sentry/apm/dist/integrations/index.js
var require_integrations2 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var express_1 = require_express();
  exports2.Express = express_1.Express;
  var tracing_1 = require_tracing();
  exports2.Tracing = tracing_1.Tracing;
});

// ../../node_modules/.pnpm/@sentry/apm@5.15.5/node_modules/@sentry/apm/dist/index.js
var require_dist19 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var hubextensions_1 = require_hubextensions();
  var ApmIntegrations = require_integrations2();
  exports2.Integrations = ApmIntegrations;
  var span_1 = require_span2();
  exports2.Span = span_1.Span;
  exports2.TRACEPARENT_REGEXP = span_1.TRACEPARENT_REGEXP;
  hubextensions_1.addExtensionMethods();
});

// ../../node_modules/.pnpm/cookie@0.3.1/node_modules/cookie/index.js
var require_cookie = __commonJS((exports2) => {
  /*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  exports2.parse = parse;
  exports2.serialize = serialize;
  var decode = decodeURIComponent;
  var encode = encodeURIComponent;
  var pairSplitRegExp = /; */;
  var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
  function parse(str, options) {
    if (typeof str !== "string") {
      throw new TypeError("argument str must be a string");
    }
    var obj = {};
    var opt = options || {};
    var pairs = str.split(pairSplitRegExp);
    var dec = opt.decode || decode;
    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i];
      var eq_idx = pair.indexOf("=");
      if (eq_idx < 0) {
        continue;
      }
      var key = pair.substr(0, eq_idx).trim();
      var val = pair.substr(++eq_idx, pair.length).trim();
      if (val[0] == '"') {
        val = val.slice(1, -1);
      }
      if (obj[key] == void 0) {
        obj[key] = tryDecode(val, dec);
      }
    }
    return obj;
  }
  function serialize(name, val, options) {
    var opt = options || {};
    var enc = opt.encode || encode;
    if (typeof enc !== "function") {
      throw new TypeError("option encode is invalid");
    }
    if (!fieldContentRegExp.test(name)) {
      throw new TypeError("argument name is invalid");
    }
    var value = enc(val);
    if (value && !fieldContentRegExp.test(value)) {
      throw new TypeError("argument val is invalid");
    }
    var str = name + "=" + value;
    if (opt.maxAge != null) {
      var maxAge = opt.maxAge - 0;
      if (isNaN(maxAge))
        throw new Error("maxAge should be a Number");
      str += "; Max-Age=" + Math.floor(maxAge);
    }
    if (opt.domain) {
      if (!fieldContentRegExp.test(opt.domain)) {
        throw new TypeError("option domain is invalid");
      }
      str += "; Domain=" + opt.domain;
    }
    if (opt.path) {
      if (!fieldContentRegExp.test(opt.path)) {
        throw new TypeError("option path is invalid");
      }
      str += "; Path=" + opt.path;
    }
    if (opt.expires) {
      if (typeof opt.expires.toUTCString !== "function") {
        throw new TypeError("option expires is invalid");
      }
      str += "; Expires=" + opt.expires.toUTCString();
    }
    if (opt.httpOnly) {
      str += "; HttpOnly";
    }
    if (opt.secure) {
      str += "; Secure";
    }
    if (opt.sameSite) {
      var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
      switch (sameSite) {
        case true:
          str += "; SameSite=Strict";
          break;
        case "lax":
          str += "; SameSite=Lax";
          break;
        case "strict":
          str += "; SameSite=Strict";
          break;
        default:
          throw new TypeError("option sameSite is invalid");
      }
    }
    return str;
  }
  function tryDecode(str, decode2) {
    try {
      return decode2(str);
    } catch (e) {
      return str;
    }
  }
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/handlers.js
var require_handlers = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var apm_1 = require_dist19();
  var core_1 = require_dist18();
  var utils_1 = require_dist15();
  var cookie = require_cookie();
  var domain = require("domain");
  var os3 = require("os");
  var url = require("url");
  var sdk_1 = require_sdk2();
  var DEFAULT_SHUTDOWN_TIMEOUT = 2e3;
  function tracingHandler() {
    return function sentryTracingMiddleware(req, res, next) {
      var reqMethod = (req.method || "").toUpperCase();
      var reqUrl = req.url;
      var hub = core_1.getCurrentHub();
      var transaction = hub.startSpan({
        op: "http.server",
        transaction: reqMethod + " " + reqUrl
      });
      hub.configureScope(function(scope) {
        scope.setSpan(transaction);
      });
      res.once("finish", function() {
        transaction.setHttpStatus(res.statusCode);
        transaction.finish();
      });
      next();
    };
  }
  exports2.tracingHandler = tracingHandler;
  function extractTransaction(req, type) {
    try {
      var request = req;
      switch (type) {
        case "path": {
          return request.route.path;
        }
        case "handler": {
          return request.route.stack[0].name;
        }
        case "methodPath":
        default: {
          var method = request.method.toUpperCase();
          var path19 = request.route.path;
          return method + "|" + path19;
        }
      }
    } catch (_oO) {
      return void 0;
    }
  }
  var DEFAULT_REQUEST_KEYS = ["cookies", "data", "headers", "method", "query_string", "url"];
  function extractRequestData(req, keys) {
    var request = {};
    var attributes = Array.isArray(keys) ? keys : DEFAULT_REQUEST_KEYS;
    var headers = req.headers || req.header || {};
    var method = req.method;
    var host = req.hostname || req.host || headers.host || "<no host>";
    var protocol = req.protocol === "https" || req.secure || (req.socket || {}).encrypted ? "https" : "http";
    var originalUrl = req.originalUrl || req.url;
    var absoluteUrl = protocol + "://" + host + originalUrl;
    attributes.forEach(function(key) {
      switch (key) {
        case "headers":
          request.headers = headers;
          break;
        case "method":
          request.method = method;
          break;
        case "url":
          request.url = absoluteUrl;
          break;
        case "cookies":
          request.cookies = cookie.parse(headers.cookie || "");
          break;
        case "query_string":
          request.query_string = url.parse(originalUrl || "", false).query;
          break;
        case "data":
          if (method === "GET" || method === "HEAD") {
            break;
          }
          if (req.body !== void 0) {
            request.data = utils_1.isString(req.body) ? req.body : JSON.stringify(utils_1.normalize(req.body));
          }
          break;
        default:
          if ({}.hasOwnProperty.call(req, key)) {
            request[key] = req[key];
          }
      }
    });
    return request;
  }
  var DEFAULT_USER_KEYS = ["id", "username", "email"];
  function extractUserData(user, keys) {
    var extractedUser = {};
    var attributes = Array.isArray(keys) ? keys : DEFAULT_USER_KEYS;
    attributes.forEach(function(key) {
      if (user && key in user) {
        extractedUser[key] = user[key];
      }
    });
    return extractedUser;
  }
  function parseRequest(event, req, options) {
    options = tslib_1.__assign({ip: false, request: true, serverName: true, transaction: true, user: true, version: true}, options);
    if (options.version) {
      event.contexts = tslib_1.__assign({}, event.contexts, {runtime: {
        name: "node",
        version: global.process.version
      }});
    }
    if (options.request) {
      event.request = tslib_1.__assign({}, event.request, extractRequestData(req, options.request));
    }
    if (options.serverName && !event.server_name) {
      event.server_name = global.process.env.SENTRY_NAME || os3.hostname();
    }
    if (options.user) {
      var extractedUser = req.user && utils_1.isPlainObject(req.user) ? extractUserData(req.user, options.user) : {};
      if (Object.keys(extractedUser)) {
        event.user = tslib_1.__assign({}, event.user, extractedUser);
      }
    }
    if (options.ip) {
      var ip = req.ip || req.connection && req.connection.remoteAddress;
      if (ip) {
        event.user = tslib_1.__assign({}, event.user, {ip_address: ip});
      }
    }
    if (options.transaction && !event.transaction) {
      var transaction = extractTransaction(req, options.transaction);
      if (transaction) {
        event.transaction = transaction;
      }
    }
    return event;
  }
  exports2.parseRequest = parseRequest;
  function requestHandler(options) {
    return function sentryRequestMiddleware(req, res, next) {
      if (options && options.flushTimeout && options.flushTimeout > 0) {
        var _end_1 = res.end;
        res.end = function(chunk, encoding, cb) {
          var _this = this;
          sdk_1.flush(options.flushTimeout).then(function() {
            _end_1.call(_this, chunk, encoding, cb);
          }).then(null, function(e) {
            utils_1.logger.error(e);
          });
        };
      }
      var local = domain.create();
      local.add(req);
      local.add(res);
      local.on("error", next);
      local.run(function() {
        core_1.getCurrentHub().configureScope(function(scope) {
          return scope.addEventProcessor(function(event) {
            return parseRequest(event, req, options);
          });
        });
        next();
      });
    };
  }
  exports2.requestHandler = requestHandler;
  function getStatusCodeFromResponse(error) {
    var statusCode = error.status || error.statusCode || error.status_code || error.output && error.output.statusCode;
    return statusCode ? parseInt(statusCode, 10) : 500;
  }
  function defaultShouldHandleError(error) {
    var status = getStatusCodeFromResponse(error);
    return status >= 500;
  }
  function errorHandler(options) {
    return function sentryErrorMiddleware(error, req, res, next) {
      var shouldHandleError = options && options.shouldHandleError || defaultShouldHandleError;
      if (shouldHandleError(error)) {
        core_1.withScope(function(scope) {
          if (req.headers && utils_1.isString(req.headers["sentry-trace"])) {
            var span = apm_1.Span.fromTraceparent(req.headers["sentry-trace"]);
            scope.setSpan(span);
          }
          var eventId = core_1.captureException(error);
          res.sentry = eventId;
          next(error);
        });
        return;
      }
      next(error);
    };
  }
  exports2.errorHandler = errorHandler;
  function logAndExitProcess(error) {
    console.error(error && error.stack ? error.stack : error);
    var client = core_1.getCurrentHub().getClient();
    if (client === void 0) {
      utils_1.logger.warn("No NodeClient was defined, we are exiting the process now.");
      global.process.exit(1);
      return;
    }
    var options = client.getOptions();
    var timeout = options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout || DEFAULT_SHUTDOWN_TIMEOUT;
    utils_1.forget(client.close(timeout).then(function(result) {
      if (!result) {
        utils_1.logger.warn("We reached the timeout for emptying the request buffer, still exiting now!");
      }
      global.process.exit(1);
    }));
  }
  exports2.logAndExitProcess = logAndExitProcess;
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/integrations/onuncaughtexception.js
var require_onuncaughtexception = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var core_1 = require_dist18();
  var types_1 = require_dist14();
  var utils_1 = require_dist15();
  var handlers_1 = require_handlers();
  var OnUncaughtException = function() {
    function OnUncaughtException2(_options) {
      if (_options === void 0) {
        _options = {};
      }
      this._options = _options;
      this.name = OnUncaughtException2.id;
      this.handler = this._makeErrorHandler();
    }
    OnUncaughtException2.prototype.setupOnce = function() {
      global.process.on("uncaughtException", this.handler.bind(this));
    };
    OnUncaughtException2.prototype._makeErrorHandler = function() {
      var _this = this;
      var timeout = 2e3;
      var caughtFirstError = false;
      var caughtSecondError = false;
      var calledFatalError = false;
      var firstError;
      return function(error) {
        var onFatalError = handlers_1.logAndExitProcess;
        var client = core_1.getCurrentHub().getClient();
        if (_this._options.onFatalError) {
          onFatalError = _this._options.onFatalError;
        } else if (client && client.getOptions().onFatalError) {
          onFatalError = client.getOptions().onFatalError;
        }
        if (!caughtFirstError) {
          var hub_1 = core_1.getCurrentHub();
          firstError = error;
          caughtFirstError = true;
          if (hub_1.getIntegration(OnUncaughtException2)) {
            hub_1.withScope(function(scope) {
              scope.setLevel(types_1.Severity.Fatal);
              hub_1.captureException(error, {originalException: error});
              if (!calledFatalError) {
                calledFatalError = true;
                onFatalError(error);
              }
            });
          } else {
            if (!calledFatalError) {
              calledFatalError = true;
              onFatalError(error);
            }
          }
        } else if (calledFatalError) {
          utils_1.logger.warn("uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown");
          handlers_1.logAndExitProcess(error);
        } else if (!caughtSecondError) {
          caughtSecondError = true;
          setTimeout(function() {
            if (!calledFatalError) {
              calledFatalError = true;
              onFatalError(firstError, error);
            } else {
            }
          }, timeout);
        }
      };
    };
    OnUncaughtException2.id = "OnUncaughtException";
    return OnUncaughtException2;
  }();
  exports2.OnUncaughtException = OnUncaughtException;
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/integrations/onunhandledrejection.js
var require_onunhandledrejection = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var core_1 = require_dist18();
  var utils_1 = require_dist15();
  var handlers_1 = require_handlers();
  var OnUnhandledRejection = function() {
    function OnUnhandledRejection2(_options) {
      if (_options === void 0) {
        _options = {mode: "warn"};
      }
      this._options = _options;
      this.name = OnUnhandledRejection2.id;
    }
    OnUnhandledRejection2.prototype.setupOnce = function() {
      global.process.on("unhandledRejection", this.sendUnhandledPromise.bind(this));
    };
    OnUnhandledRejection2.prototype.sendUnhandledPromise = function(reason, promise) {
      var hub = core_1.getCurrentHub();
      if (!hub.getIntegration(OnUnhandledRejection2)) {
        this._handleRejection(reason);
        return;
      }
      var context = promise.domain && promise.domain.sentryContext || {};
      hub.withScope(function(scope) {
        scope.setExtra("unhandledPromiseRejection", true);
        if (context.user) {
          scope.setUser(context.user);
        }
        if (context.tags) {
          scope.setTags(context.tags);
        }
        if (context.extra) {
          scope.setExtras(context.extra);
        }
        hub.captureException(reason, {originalException: promise});
      });
      this._handleRejection(reason);
    };
    OnUnhandledRejection2.prototype._handleRejection = function(reason) {
      var rejectionWarning = "This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). The promise rejected with the reason:";
      if (this._options.mode === "warn") {
        utils_1.consoleSandbox(function() {
          console.warn(rejectionWarning);
          console.error(reason && reason.stack ? reason.stack : reason);
        });
      } else if (this._options.mode === "strict") {
        utils_1.consoleSandbox(function() {
          console.warn(rejectionWarning);
        });
        handlers_1.logAndExitProcess(reason);
      }
    };
    OnUnhandledRejection2.id = "OnUnhandledRejection";
    return OnUnhandledRejection2;
  }();
  exports2.OnUnhandledRejection = OnUnhandledRejection;
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/integrations/linkederrors.js
var require_linkederrors = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var core_1 = require_dist18();
  var utils_1 = require_dist15();
  var parsers_1 = require_parsers();
  var DEFAULT_KEY = "cause";
  var DEFAULT_LIMIT = 5;
  var LinkedErrors = function() {
    function LinkedErrors2(options) {
      if (options === void 0) {
        options = {};
      }
      this.name = LinkedErrors2.id;
      this._key = options.key || DEFAULT_KEY;
      this._limit = options.limit || DEFAULT_LIMIT;
    }
    LinkedErrors2.prototype.setupOnce = function() {
      core_1.addGlobalEventProcessor(function(event, hint) {
        var self2 = core_1.getCurrentHub().getIntegration(LinkedErrors2);
        if (self2) {
          return self2.handler(event, hint);
        }
        return event;
      });
    };
    LinkedErrors2.prototype.handler = function(event, hint) {
      var _this = this;
      if (!event.exception || !event.exception.values || !hint || !utils_1.isInstanceOf(hint.originalException, Error)) {
        return utils_1.SyncPromise.resolve(event);
      }
      return new utils_1.SyncPromise(function(resolve) {
        _this.walkErrorTree(hint.originalException, _this._key).then(function(linkedErrors) {
          if (event && event.exception && event.exception.values) {
            event.exception.values = tslib_1.__spread(linkedErrors, event.exception.values);
          }
          resolve(event);
        }).then(null, function() {
          resolve(event);
        });
      });
    };
    LinkedErrors2.prototype.walkErrorTree = function(error, key, stack) {
      var _this = this;
      if (stack === void 0) {
        stack = [];
      }
      if (!utils_1.isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {
        return utils_1.SyncPromise.resolve(stack);
      }
      return new utils_1.SyncPromise(function(resolve, reject) {
        parsers_1.getExceptionFromError(error[key]).then(function(exception) {
          _this.walkErrorTree(error[key], key, tslib_1.__spread([exception], stack)).then(resolve).then(null, function() {
            reject();
          });
        }).then(null, function() {
          reject();
        });
      });
    };
    LinkedErrors2.id = "LinkedErrors";
    return LinkedErrors2;
  }();
  exports2.LinkedErrors = LinkedErrors;
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/integrations/modules.js
var require_modules = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var fs_1 = require("fs");
  var path_1 = require("path");
  var moduleCache;
  function collectModules() {
    var mainPaths = require.main && require.main.paths || [];
    var paths = require.cache ? Object.keys(require.cache) : [];
    var infos = {};
    var seen = {};
    paths.forEach(function(path19) {
      var dir = path19;
      var updir = function() {
        var orig = dir;
        dir = path_1.dirname(orig);
        if (!dir || orig === dir || seen[orig]) {
          return void 0;
        }
        if (mainPaths.indexOf(dir) < 0) {
          return updir();
        }
        var pkgfile = path_1.join(orig, "package.json");
        seen[orig] = true;
        if (!fs_1.existsSync(pkgfile)) {
          return updir();
        }
        try {
          var info = JSON.parse(fs_1.readFileSync(pkgfile, "utf8"));
          infos[info.name] = info.version;
        } catch (_oO) {
        }
      };
      updir();
    });
    return infos;
  }
  var Modules = function() {
    function Modules2() {
      this.name = Modules2.id;
    }
    Modules2.prototype.setupOnce = function(addGlobalEventProcessor, getCurrentHub) {
      var _this = this;
      addGlobalEventProcessor(function(event) {
        if (!getCurrentHub().getIntegration(Modules2)) {
          return event;
        }
        return tslib_1.__assign({}, event, {modules: _this._getModules()});
      });
    };
    Modules2.prototype._getModules = function() {
      if (!moduleCache) {
        moduleCache = collectModules();
      }
      return moduleCache;
    };
    Modules2.id = "Modules";
    return Modules2;
  }();
  exports2.Modules = Modules;
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/integrations/index.js
var require_integrations3 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var console_1 = require_console();
  exports2.Console = console_1.Console;
  var http_1 = require_http2();
  exports2.Http = http_1.Http;
  var onuncaughtexception_1 = require_onuncaughtexception();
  exports2.OnUncaughtException = onuncaughtexception_1.OnUncaughtException;
  var onunhandledrejection_1 = require_onunhandledrejection();
  exports2.OnUnhandledRejection = onunhandledrejection_1.OnUnhandledRejection;
  var linkederrors_1 = require_linkederrors();
  exports2.LinkedErrors = linkederrors_1.LinkedErrors;
  var modules_1 = require_modules();
  exports2.Modules = modules_1.Modules;
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/sdk.js
var require_sdk2 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var core_1 = require_dist18();
  var hub_1 = require_dist16();
  var utils_1 = require_dist15();
  var domain = require("domain");
  var client_1 = require_client2();
  var integrations_1 = require_integrations3();
  exports2.defaultIntegrations = [
    new core_1.Integrations.InboundFilters(),
    new core_1.Integrations.FunctionToString(),
    new integrations_1.Console(),
    new integrations_1.Http(),
    new integrations_1.OnUncaughtException(),
    new integrations_1.OnUnhandledRejection(),
    new integrations_1.LinkedErrors()
  ];
  function init(options) {
    if (options === void 0) {
      options = {};
    }
    if (options.defaultIntegrations === void 0) {
      options.defaultIntegrations = exports2.defaultIntegrations;
    }
    if (options.dsn === void 0 && process.env.SENTRY_DSN) {
      options.dsn = process.env.SENTRY_DSN;
    }
    if (options.release === void 0) {
      var global_1 = utils_1.getGlobalObject();
      if (process.env.SENTRY_RELEASE) {
        options.release = process.env.SENTRY_RELEASE;
      } else if (global_1.SENTRY_RELEASE && global_1.SENTRY_RELEASE.id) {
        options.release = global_1.SENTRY_RELEASE.id;
      }
    }
    if (options.environment === void 0 && process.env.SENTRY_ENVIRONMENT) {
      options.environment = process.env.SENTRY_ENVIRONMENT;
    }
    if (domain.active) {
      hub_1.setHubOnCarrier(hub_1.getMainCarrier(), core_1.getCurrentHub());
    }
    core_1.initAndBind(client_1.NodeClient, options);
  }
  exports2.init = init;
  function lastEventId() {
    return core_1.getCurrentHub().lastEventId();
  }
  exports2.lastEventId = lastEventId;
  function flush(timeout) {
    return tslib_1.__awaiter(this, void 0, void 0, function() {
      var client;
      return tslib_1.__generator(this, function(_a) {
        client = core_1.getCurrentHub().getClient();
        if (client) {
          return [2, client.flush(timeout)];
        }
        return [2, Promise.reject(false)];
      });
    });
  }
  exports2.flush = flush;
  function close(timeout) {
    return tslib_1.__awaiter(this, void 0, void 0, function() {
      var client;
      return tslib_1.__generator(this, function(_a) {
        client = core_1.getCurrentHub().getClient();
        if (client) {
          return [2, client.close(timeout)];
        }
        return [2, Promise.reject(false)];
      });
    });
  }
  exports2.close = close;
});

// ../../node_modules/.pnpm/@sentry/node@5.15.5/node_modules/@sentry/node/dist/index.js
var require_dist20 = __commonJS((exports2) => {
  Object.defineProperty(exports2, "__esModule", {value: true});
  var tslib_1 = require_tslib();
  var types_1 = require_dist14();
  exports2.Severity = types_1.Severity;
  exports2.Status = types_1.Status;
  var core_1 = require_dist18();
  exports2.addGlobalEventProcessor = core_1.addGlobalEventProcessor;
  exports2.addBreadcrumb = core_1.addBreadcrumb;
  exports2.captureException = core_1.captureException;
  exports2.captureEvent = core_1.captureEvent;
  exports2.captureMessage = core_1.captureMessage;
  exports2.configureScope = core_1.configureScope;
  exports2.getHubFromCarrier = core_1.getHubFromCarrier;
  exports2.getCurrentHub = core_1.getCurrentHub;
  exports2.Hub = core_1.Hub;
  exports2.Scope = core_1.Scope;
  exports2.setContext = core_1.setContext;
  exports2.setExtra = core_1.setExtra;
  exports2.setExtras = core_1.setExtras;
  exports2.setTag = core_1.setTag;
  exports2.setTags = core_1.setTags;
  exports2.setUser = core_1.setUser;
  exports2.withScope = core_1.withScope;
  var client_1 = require_client2();
  exports2.NodeClient = client_1.NodeClient;
  var sdk_1 = require_sdk2();
  exports2.defaultIntegrations = sdk_1.defaultIntegrations;
  exports2.init = sdk_1.init;
  exports2.lastEventId = sdk_1.lastEventId;
  exports2.flush = sdk_1.flush;
  exports2.close = sdk_1.close;
  var version_1 = require_version();
  exports2.SDK_NAME = version_1.SDK_NAME;
  exports2.SDK_VERSION = version_1.SDK_VERSION;
  var core_2 = require_dist18();
  var hub_1 = require_dist16();
  var domain = require("domain");
  var Handlers = require_handlers();
  exports2.Handlers = Handlers;
  var NodeIntegrations = require_integrations3();
  var Transports = require_transports();
  exports2.Transports = Transports;
  var INTEGRATIONS = tslib_1.__assign({}, core_2.Integrations, NodeIntegrations);
  exports2.Integrations = INTEGRATIONS;
  var carrier = hub_1.getMainCarrier();
  if (carrier.__SENTRY__) {
    carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};
    if (!carrier.__SENTRY__.extensions.domain) {
      carrier.__SENTRY__.extensions.domain = domain;
    }
  }
});

// ../../node_modules/.pnpm/@prisma/studio-server@0.304.0/node_modules/@prisma/studio-server/build/services/PingService.js
var require_PingService = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  class PingService {
    respond(action, payload) {
      return Promise.resolve({
        error: null,
        data: null
      });
    }
  }
  exports2.default = new PingService();
});

// ../../node_modules/.pnpm/@prisma/studio-server@0.304.0/node_modules/@prisma/studio-server/build/services/ProjectService.js
var require_ProjectService = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  class ProjectService {
    init(options) {
      this.project = {
        id: options.id,
        name: options.name,
        path: options.path
      };
    }
    get() {
      return this.project;
    }
    getAll() {
      return [this.project];
    }
    respond(action, payload) {
      const responsePayload = {
        error: null,
        data: null
      };
      switch (action) {
        case "get":
          responsePayload.data = this.get();
          break;
        case "get-all":
          responsePayload.data = this.getAll();
          break;
      }
      return Promise.resolve(responsePayload);
    }
  }
  exports2.default = new ProjectService();
});

// ../../node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/callsite-tostring.js
var require_callsite_tostring = __commonJS((exports2, module3) => {
  /*!
   * depd
   * Copyright(c) 2014 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  module3.exports = callSiteToString;
  function callSiteFileLocation(callSite) {
    var fileName;
    var fileLocation = "";
    if (callSite.isNative()) {
      fileLocation = "native";
    } else if (callSite.isEval()) {
      fileName = callSite.getScriptNameOrSourceURL();
      if (!fileName) {
        fileLocation = callSite.getEvalOrigin();
      }
    } else {
      fileName = callSite.getFileName();
    }
    if (fileName) {
      fileLocation += fileName;
      var lineNumber = callSite.getLineNumber();
      if (lineNumber != null) {
        fileLocation += ":" + lineNumber;
        var columnNumber = callSite.getColumnNumber();
        if (columnNumber) {
          fileLocation += ":" + columnNumber;
        }
      }
    }
    return fileLocation || "unknown source";
  }
  function callSiteToString(callSite) {
    var addSuffix = true;
    var fileLocation = callSiteFileLocation(callSite);
    var functionName = callSite.getFunctionName();
    var isConstructor = callSite.isConstructor();
    var isMethodCall = !(callSite.isToplevel() || isConstructor);
    var line = "";
    if (isMethodCall) {
      var methodName = callSite.getMethodName();
      var typeName = getConstructorName(callSite);
      if (functionName) {
        if (typeName && functionName.indexOf(typeName) !== 0) {
          line += typeName + ".";
        }
        line += functionName;
        if (methodName && functionName.lastIndexOf("." + methodName) !== functionName.length - methodName.length - 1) {
          line += " [as " + methodName + "]";
        }
      } else {
        line += typeName + "." + (methodName || "<anonymous>");
      }
    } else if (isConstructor) {
      line += "new " + (functionName || "<anonymous>");
    } else if (functionName) {
      line += functionName;
    } else {
      addSuffix = false;
      line += fileLocation;
    }
    if (addSuffix) {
      line += " (" + fileLocation + ")";
    }
    return line;
  }
  function getConstructorName(obj) {
    var receiver = obj.receiver;
    return receiver.constructor && receiver.constructor.name || null;
  }
});

// ../../node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/event-listener-count.js
var require_event_listener_count = __commonJS((exports2, module3) => {
  /*!
   * depd
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  module3.exports = eventListenerCount;
  function eventListenerCount(emitter, type) {
    return emitter.listeners(type).length;
  }
});

// ../../node_modules/.pnpm/depd@1.1.2/node_modules/depd/lib/compat/index.js
var require_compat = __commonJS((exports2, module3) => {
  /*!
   * depd
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var EventEmitter = require("events").EventEmitter;
  lazyProperty(module3.exports, "callSiteToString", function callSiteToString() {
    var limit = Error.stackTraceLimit;
    var obj = {};
    var prep = Error.prepareStackTrace;
    function prepareObjectStackTrace(obj2, stack2) {
      return stack2;
    }
    Error.prepareStackTrace = prepareObjectStackTrace;
    Error.stackTraceLimit = 2;
    Error.captureStackTrace(obj);
    var stack = obj.stack.slice();
    Error.prepareStackTrace = prep;
    Error.stackTraceLimit = limit;
    return stack[0].toString ? toString : require_callsite_tostring();
  });
  lazyProperty(module3.exports, "eventListenerCount", function eventListenerCount() {
    return EventEmitter.listenerCount || require_event_listener_count();
  });
  function lazyProperty(obj, prop, getter) {
    function get() {
      var val = getter();
      Object.defineProperty(obj, prop, {
        configurable: true,
        enumerable: true,
        value: val
      });
      return val;
    }
    Object.defineProperty(obj, prop, {
      configurable: true,
      enumerable: true,
      get
    });
  }
  function toString(obj) {
    return obj.toString();
  }
});

// ../../node_modules/.pnpm/depd@1.1.2/node_modules/depd/index.js
var require_depd = __commonJS((exports2, module3) => {
  /*!
   * depd
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  var callSiteToString = require_compat().callSiteToString;
  var eventListenerCount = require_compat().eventListenerCount;
  var relative = require("path").relative;
  module3.exports = depd;
  var basePath = process.cwd();
  function containsNamespace(str, namespace) {
    var vals = str.split(/[ ,]+/);
    var ns = String(namespace).toLowerCase();
    for (var i = 0; i < vals.length; i++) {
      var val = vals[i];
      if (val && (val === "*" || val.toLowerCase() === ns)) {
        return true;
      }
    }
    return false;
  }
  function convertDataDescriptorToAccessor(obj, prop, message) {
    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    var value = descriptor.value;
    descriptor.get = function getter() {
      return value;
    };
    if (descriptor.writable) {
      descriptor.set = function setter(val) {
        return value = val;
      };
    }
    delete descriptor.value;
    delete descriptor.writable;
    Object.defineProperty(obj, prop, descriptor);
    return descriptor;
  }
  function createArgumentsString(arity) {
    var str = "";
    for (var i = 0; i < arity; i++) {
      str += ", arg" + i;
    }
    return str.substr(2);
  }
  function createStackString(stack) {
    var str = this.name + ": " + this.namespace;
    if (this.message) {
      str += " deprecated " + this.message;
    }
    for (var i = 0; i < stack.length; i++) {
      str += "\n    at " + callSiteToString(stack[i]);
    }
    return str;
  }
  function depd(namespace) {
    if (!namespace) {
      throw new TypeError("argument namespace is required");
    }
    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    var file = site[0];
    function deprecate(message) {
      log.call(deprecate, message);
    }
    deprecate._file = file;
    deprecate._ignored = isignored(namespace);
    deprecate._namespace = namespace;
    deprecate._traced = istraced(namespace);
    deprecate._warned = Object.create(null);
    deprecate.function = wrapfunction;
    deprecate.property = wrapproperty;
    return deprecate;
  }
  function isignored(namespace) {
    if (process.noDeprecation) {
      return true;
    }
    var str = process.env.NO_DEPRECATION || "";
    return containsNamespace(str, namespace);
  }
  function istraced(namespace) {
    if (process.traceDeprecation) {
      return true;
    }
    var str = process.env.TRACE_DEPRECATION || "";
    return containsNamespace(str, namespace);
  }
  function log(message, site) {
    var haslisteners = eventListenerCount(process, "deprecation") !== 0;
    if (!haslisteners && this._ignored) {
      return;
    }
    var caller;
    var callFile;
    var callSite;
    var depSite;
    var i = 0;
    var seen = false;
    var stack = getStack();
    var file = this._file;
    if (site) {
      depSite = site;
      callSite = callSiteLocation(stack[1]);
      callSite.name = depSite.name;
      file = callSite[0];
    } else {
      i = 2;
      depSite = callSiteLocation(stack[i]);
      callSite = depSite;
    }
    for (; i < stack.length; i++) {
      caller = callSiteLocation(stack[i]);
      callFile = caller[0];
      if (callFile === file) {
        seen = true;
      } else if (callFile === this._file) {
        file = this._file;
      } else if (seen) {
        break;
      }
    }
    var key = caller ? depSite.join(":") + "__" + caller.join(":") : void 0;
    if (key !== void 0 && key in this._warned) {
      return;
    }
    this._warned[key] = true;
    var msg = message;
    if (!msg) {
      msg = callSite === depSite || !callSite.name ? defaultMessage(depSite) : defaultMessage(callSite);
    }
    if (haslisteners) {
      var err = DeprecationError(this._namespace, msg, stack.slice(i));
      process.emit("deprecation", err);
      return;
    }
    var format11 = process.stderr.isTTY ? formatColor : formatPlain;
    var output = format11.call(this, msg, caller, stack.slice(i));
    process.stderr.write(output + "\n", "utf8");
  }
  function callSiteLocation(callSite) {
    var file = callSite.getFileName() || "<anonymous>";
    var line = callSite.getLineNumber();
    var colm = callSite.getColumnNumber();
    if (callSite.isEval()) {
      file = callSite.getEvalOrigin() + ", " + file;
    }
    var site = [file, line, colm];
    site.callSite = callSite;
    site.name = callSite.getFunctionName();
    return site;
  }
  function defaultMessage(site) {
    var callSite = site.callSite;
    var funcName = site.name;
    if (!funcName) {
      funcName = "<anonymous@" + formatLocation(site) + ">";
    }
    var context = callSite.getThis();
    var typeName = context && callSite.getTypeName();
    if (typeName === "Object") {
      typeName = void 0;
    }
    if (typeName === "Function") {
      typeName = context.name || typeName;
    }
    return typeName && callSite.getMethodName() ? typeName + "." + funcName : funcName;
  }
  function formatPlain(msg, caller, stack) {
    var timestamp = new Date().toUTCString();
    var formatted = timestamp + " " + this._namespace + " deprecated " + msg;
    if (this._traced) {
      for (var i = 0; i < stack.length; i++) {
        formatted += "\n    at " + callSiteToString(stack[i]);
      }
      return formatted;
    }
    if (caller) {
      formatted += " at " + formatLocation(caller);
    }
    return formatted;
  }
  function formatColor(msg, caller, stack) {
    var formatted = "[36;1m" + this._namespace + "[22;39m [33;1mdeprecated[22;39m [0m" + msg + "[39m";
    if (this._traced) {
      for (var i = 0; i < stack.length; i++) {
        formatted += "\n    [36mat " + callSiteToString(stack[i]) + "[39m";
      }
      return formatted;
    }
    if (caller) {
      formatted += " [36m" + formatLocation(caller) + "[39m";
    }
    return formatted;
  }
  function formatLocation(callSite) {
    return relative(basePath, callSite[0]) + ":" + callSite[1] + ":" + callSite[2];
  }
  function getStack() {
    var limit = Error.stackTraceLimit;
    var obj = {};
    var prep = Error.prepareStackTrace;
    Error.prepareStackTrace = prepareObjectStackTrace;
    Error.stackTraceLimit = Math.max(10, limit);
    Error.captureStackTrace(obj);
    var stack = obj.stack.slice(1);
    Error.prepareStackTrace = prep;
    Error.stackTraceLimit = limit;
    return stack;
  }
  function prepareObjectStackTrace(obj, stack) {
    return stack;
  }
  function wrapfunction(fn, message) {
    if (typeof fn !== "function") {
      throw new TypeError("argument fn must be a function");
    }
    var args = createArgumentsString(fn.length);
    var deprecate = this;
    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    site.name = fn.name;
    var deprecatedfn = eval("(function (" + args + ') {\n"use strict"\nlog.call(deprecate, message, site)\nreturn fn.apply(this, arguments)\n})');
    return deprecatedfn;
  }
  function wrapproperty(obj, prop, message) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") {
      throw new TypeError("argument obj must be object");
    }
    var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
    if (!descriptor) {
      throw new TypeError("must call property on owner object");
    }
    if (!descriptor.configurable) {
      throw new TypeError("property must be configurable");
    }
    var deprecate = this;
    var stack = getStack();
    var site = callSiteLocation(stack[1]);
    site.name = prop;
    if ("value" in descriptor) {
      descriptor = convertDataDescriptorToAccessor(obj, prop, message);
    }
    var get = descriptor.get;
    var set = descriptor.set;
    if (typeof get === "function") {
      descriptor.get = function getter() {
        log.call(deprecate, message, site);
        return get.apply(this, arguments);
      };
    }
    if (typeof set === "function") {
      descriptor.set = function setter() {
        log.call(deprecate, message, site);
        return set.apply(this, arguments);
      };
    }
    Object.defineProperty(obj, prop, descriptor);
  }
  function DeprecationError(namespace, message, stack) {
    var error = new Error();
    var stackString;
    Object.defineProperty(error, "constructor", {
      value: DeprecationError
    });
    Object.defineProperty(error, "message", {
      configurable: true,
      enumerable: false,
      value: message,
      writable: true
    });
    Object.defineProperty(error, "name", {
      enumerable: false,
      configurable: true,
      value: "DeprecationError",
      writable: true
    });
    Object.defineProperty(error, "namespace", {
      configurable: true,
      enumerable: false,
      value: namespace,
      writable: true
    });
    Object.defineProperty(error, "stack", {
      configurable: true,
      enumerable: false,
      get: function() {
        if (stackString !== void 0) {
          return stackString;
        }
        return stackString = createStackString.call(this, stack);
      },
      set: function setter(val) {
        stackString = val;
      }
    });
    return error;
  }
});

// ../../node_modules/.pnpm/bytes@3.1.0/node_modules/bytes/index.js
var require_bytes = __commonJS((exports2, module3) => {
  /*!
   * bytes
   * Copyright(c) 2012-2014 TJ Holowaychuk
   * Copyright(c) 2015 Jed Watson
   * MIT Licensed
   */
  "use strict";
  module3.exports = bytes;
  module3.exports.format = format11;
  module3.exports.parse = parse;
  var formatThousandsRegExp = /\B(?=(\d{3})+(?!\d))/g;
  var formatDecimalsRegExp = /(?:\.0*|(\.[^0]+)0+)$/;
  var map = {
    b: 1,
    kb: 1 << 10,
    mb: 1 << 20,
    gb: 1 << 30,
    tb: Math.pow(1024, 4),
    pb: Math.pow(1024, 5)
  };
  var parseRegExp = /^((-|\+)?(\d+(?:\.\d+)?)) *(kb|mb|gb|tb|pb)$/i;
  function bytes(value, options) {
    if (typeof value === "string") {
      return parse(value);
    }
    if (typeof value === "number") {
      return format11(value, options);
    }
    return null;
  }
  function format11(value, options) {
    if (!Number.isFinite(value)) {
      return null;
    }
    var mag = Math.abs(value);
    var thousandsSeparator = options && options.thousandsSeparator || "";
    var unitSeparator = options && options.unitSeparator || "";
    var decimalPlaces = options && options.decimalPlaces !== void 0 ? options.decimalPlaces : 2;
    var fixedDecimals = Boolean(options && options.fixedDecimals);
    var unit = options && options.unit || "";
    if (!unit || !map[unit.toLowerCase()]) {
      if (mag >= map.pb) {
        unit = "PB";
      } else if (mag >= map.tb) {
        unit = "TB";
      } else if (mag >= map.gb) {
        unit = "GB";
      } else if (mag >= map.mb) {
        unit = "MB";
      } else if (mag >= map.kb) {
        unit = "KB";
      } else {
        unit = "B";
      }
    }
    var val = value / map[unit.toLowerCase()];
    var str = val.toFixed(decimalPlaces);
    if (!fixedDecimals) {
      str = str.replace(formatDecimalsRegExp, "$1");
    }
    if (thousandsSeparator) {
      str = str.replace(formatThousandsRegExp, thousandsSeparator);
    }
    return str + unitSeparator + unit;
  }
  function parse(val) {
    if (typeof val === "number" && !isNaN(val)) {
      return val;
    }
    if (typeof val !== "string") {
      return null;
    }
    var results = parseRegExp.exec(val);
    var floatValue;
    var unit = "b";
    if (!results) {
      floatValue = parseInt(val, 10);
      unit = "b";
    } else {
      floatValue = parseFloat(results[1]);
      unit = results[4].toLowerCase();
    }
    return Math.floor(map[unit] * floatValue);
  }
});

// ../../node_modules/.pnpm/content-type@1.0.4/node_modules/content-type/index.js
var require_content_type = __commonJS((exports2) => {
  /*!
   * content-type
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g;
  var TEXT_REGEXP = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/;
  var TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;
  var QESC_REGEXP = /\\([\u000b\u0020-\u00ff])/g;
  var QUOTE_REGEXP = /([\\"])/g;
  var TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/;
  exports2.format = format11;
  exports2.parse = parse;
  function format11(obj) {
    if (!obj || typeof obj !== "object") {
      throw new TypeError("argument obj is required");
    }
    var parameters = obj.parameters;
    var type = obj.type;
    if (!type || !TYPE_REGEXP.test(type)) {
      throw new TypeError("invalid type");
    }
    var string = type;
    if (parameters && typeof parameters === "object") {
      var param;
      var params = Object.keys(parameters).sort();
      for (var i = 0; i < params.length; i++) {
        param = params[i];
        if (!TOKEN_REGEXP.test(param)) {
          throw new TypeError("invalid parameter name");
        }
        string += "; " + param + "=" + qstring(parameters[param]);
      }
    }
    return string;
  }
  function parse(string) {
    if (!string) {
      throw new TypeError("argument string is required");
    }
    var header = typeof string === "object" ? getcontenttype(string) : string;
    if (typeof header !== "string") {
      throw new TypeError("argument string is required to be a string");
    }
    var index = header.indexOf(";");
    var type = index !== -1 ? header.substr(0, index).trim() : header.trim();
    if (!TYPE_REGEXP.test(type)) {
      throw new TypeError("invalid media type");
    }
    var obj = new ContentType(type.toLowerCase());
    if (index !== -1) {
      var key;
      var match;
      var value;
      PARAM_REGEXP.lastIndex = index;
      while (match = PARAM_REGEXP.exec(header)) {
        if (match.index !== index) {
          throw new TypeError("invalid parameter format");
        }
        index += match[0].length;
        key = match[1].toLowerCase();
        value = match[2];
        if (value[0] === '"') {
          value = value.substr(1, value.length - 2).replace(QESC_REGEXP, "$1");
        }
        obj.parameters[key] = value;
      }
      if (index !== header.length) {
        throw new TypeError("invalid parameter format");
      }
    }
    return obj;
  }
  function getcontenttype(obj) {
    var header;
    if (typeof obj.getHeader === "function") {
      header = obj.getHeader("content-type");
    } else if (typeof obj.headers === "object") {
      header = obj.headers && obj.headers["content-type"];
    }
    if (typeof header !== "string") {
      throw new TypeError("content-type header is missing from object");
    }
    return header;
  }
  function qstring(val) {
    var str = String(val);
    if (TOKEN_REGEXP.test(str)) {
      return str;
    }
    if (str.length > 0 && !TEXT_REGEXP.test(str)) {
      throw new TypeError("invalid parameter value");
    }
    return '"' + str.replace(QUOTE_REGEXP, "\\$1") + '"';
  }
  function ContentType(type) {
    this.parameters = Object.create(null);
    this.type = type;
  }
});

// ../../node_modules/.pnpm/setprototypeof@1.1.1/node_modules/setprototypeof/index.js
var require_setprototypeof = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = Object.setPrototypeOf || ({__proto__: []} instanceof Array ? setProtoOf : mixinProperties);
  function setProtoOf(obj, proto) {
    obj.__proto__ = proto;
    return obj;
  }
  function mixinProperties(obj, proto) {
    for (var prop in proto) {
      if (!obj.hasOwnProperty(prop)) {
        obj[prop] = proto[prop];
      }
    }
    return obj;
  }
});

// ../../node_modules/.pnpm/statuses@1.5.0/node_modules/statuses/codes.json
var require_codes = __commonJS((exports2, module3) => {
  module3.exports = {
    "100": "Continue",
    "101": "Switching Protocols",
    "102": "Processing",
    "103": "Early Hints",
    "200": "OK",
    "201": "Created",
    "202": "Accepted",
    "203": "Non-Authoritative Information",
    "204": "No Content",
    "205": "Reset Content",
    "206": "Partial Content",
    "207": "Multi-Status",
    "208": "Already Reported",
    "226": "IM Used",
    "300": "Multiple Choices",
    "301": "Moved Permanently",
    "302": "Found",
    "303": "See Other",
    "304": "Not Modified",
    "305": "Use Proxy",
    "306": "(Unused)",
    "307": "Temporary Redirect",
    "308": "Permanent Redirect",
    "400": "Bad Request",
    "401": "Unauthorized",
    "402": "Payment Required",
    "403": "Forbidden",
    "404": "Not Found",
    "405": "Method Not Allowed",
    "406": "Not Acceptable",
    "407": "Proxy Authentication Required",
    "408": "Request Timeout",
    "409": "Conflict",
    "410": "Gone",
    "411": "Length Required",
    "412": "Precondition Failed",
    "413": "Payload Too Large",
    "414": "URI Too Long",
    "415": "Unsupported Media Type",
    "416": "Range Not Satisfiable",
    "417": "Expectation Failed",
    "418": "I'm a teapot",
    "421": "Misdirected Request",
    "422": "Unprocessable Entity",
    "423": "Locked",
    "424": "Failed Dependency",
    "425": "Unordered Collection",
    "426": "Upgrade Required",
    "428": "Precondition Required",
    "429": "Too Many Requests",
    "431": "Request Header Fields Too Large",
    "451": "Unavailable For Legal Reasons",
    "500": "Internal Server Error",
    "501": "Not Implemented",
    "502": "Bad Gateway",
    "503": "Service Unavailable",
    "504": "Gateway Timeout",
    "505": "HTTP Version Not Supported",
    "506": "Variant Also Negotiates",
    "507": "Insufficient Storage",
    "508": "Loop Detected",
    "509": "Bandwidth Limit Exceeded",
    "510": "Not Extended",
    "511": "Network Authentication Required"
  };
});

// ../../node_modules/.pnpm/statuses@1.5.0/node_modules/statuses/index.js
var require_statuses = __commonJS((exports2, module3) => {
  /*!
   * statuses
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var codes = require_codes();
  module3.exports = status;
  status.STATUS_CODES = codes;
  status.codes = populateStatusesMap(status, codes);
  status.redirect = {
    300: true,
    301: true,
    302: true,
    303: true,
    305: true,
    307: true,
    308: true
  };
  status.empty = {
    204: true,
    205: true,
    304: true
  };
  status.retry = {
    502: true,
    503: true,
    504: true
  };
  function populateStatusesMap(statuses, codes2) {
    var arr = [];
    Object.keys(codes2).forEach(function forEachCode(code) {
      var message = codes2[code];
      var status2 = Number(code);
      statuses[status2] = message;
      statuses[message] = status2;
      statuses[message.toLowerCase()] = status2;
      arr.push(status2);
    });
    return arr;
  }
  function status(code) {
    if (typeof code === "number") {
      if (!status[code])
        throw new Error("invalid status code: " + code);
      return code;
    }
    if (typeof code !== "string") {
      throw new TypeError("code must be a number or string");
    }
    var n = parseInt(code, 10);
    if (!isNaN(n)) {
      if (!status[n])
        throw new Error("invalid status code: " + n);
      return n;
    }
    n = status[code.toLowerCase()];
    if (!n)
      throw new Error('invalid status message: "' + code + '"');
    return n;
  }
});

// ../../node_modules/.pnpm/inherits@2.0.3/node_modules/inherits/inherits_browser.js
var require_inherits_browser2 = __commonJS((exports2, module3) => {
  if (typeof Object.create === "function") {
    module3.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
    };
  } else {
    module3.exports = function inherits(ctor, superCtor) {
      ctor.super_ = superCtor;
      var TempCtor = function() {
      };
      TempCtor.prototype = superCtor.prototype;
      ctor.prototype = new TempCtor();
      ctor.prototype.constructor = ctor;
    };
  }
});

// ../../node_modules/.pnpm/inherits@2.0.3/node_modules/inherits/inherits.js
var require_inherits2 = __commonJS((exports2, module3) => {
  try {
    var util4 = require("util");
    if (typeof util4.inherits !== "function")
      throw "";
    module3.exports = util4.inherits;
  } catch (e) {
    module3.exports = require_inherits_browser2();
  }
});

// ../../node_modules/.pnpm/toidentifier@1.0.0/node_modules/toidentifier/index.js
var require_toidentifier = __commonJS((exports2, module3) => {
  /*!
   * toidentifier
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  module3.exports = toIdentifier;
  function toIdentifier(str) {
    return str.split(" ").map(function(token) {
      return token.slice(0, 1).toUpperCase() + token.slice(1);
    }).join("").replace(/[^ _0-9a-z]/gi, "");
  }
});

// ../../node_modules/.pnpm/http-errors@1.7.2/node_modules/http-errors/index.js
var require_http_errors = __commonJS((exports2, module3) => {
  /*!
   * http-errors
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var deprecate = require_depd()("http-errors");
  var setPrototypeOf = require_setprototypeof();
  var statuses = require_statuses();
  var inherits = require_inherits2();
  var toIdentifier = require_toidentifier();
  module3.exports = createError;
  module3.exports.HttpError = createHttpErrorConstructor();
  populateConstructorExports(module3.exports, statuses.codes, module3.exports.HttpError);
  function codeClass(status) {
    return Number(String(status).charAt(0) + "00");
  }
  function createError() {
    var err;
    var msg;
    var status = 500;
    var props = {};
    for (var i = 0; i < arguments.length; i++) {
      var arg11 = arguments[i];
      if (arg11 instanceof Error) {
        err = arg11;
        status = err.status || err.statusCode || status;
        continue;
      }
      switch (typeof arg11) {
        case "string":
          msg = arg11;
          break;
        case "number":
          status = arg11;
          if (i !== 0) {
            deprecate("non-first-argument status code; replace with createError(" + arg11 + ", ...)");
          }
          break;
        case "object":
          props = arg11;
          break;
      }
    }
    if (typeof status === "number" && (status < 400 || status >= 600)) {
      deprecate("non-error status code; use only 4xx or 5xx status codes");
    }
    if (typeof status !== "number" || !statuses[status] && (status < 400 || status >= 600)) {
      status = 500;
    }
    var HttpError = createError[status] || createError[codeClass(status)];
    if (!err) {
      err = HttpError ? new HttpError(msg) : new Error(msg || statuses[status]);
      Error.captureStackTrace(err, createError);
    }
    if (!HttpError || !(err instanceof HttpError) || err.status !== status) {
      err.expose = status < 500;
      err.status = err.statusCode = status;
    }
    for (var key in props) {
      if (key !== "status" && key !== "statusCode") {
        err[key] = props[key];
      }
    }
    return err;
  }
  function createHttpErrorConstructor() {
    function HttpError() {
      throw new TypeError("cannot construct abstract class");
    }
    inherits(HttpError, Error);
    return HttpError;
  }
  function createClientErrorConstructor(HttpError, name, code) {
    var className = name.match(/Error$/) ? name : name + "Error";
    function ClientError(message) {
      var msg = message != null ? message : statuses[code];
      var err = new Error(msg);
      Error.captureStackTrace(err, ClientError);
      setPrototypeOf(err, ClientError.prototype);
      Object.defineProperty(err, "message", {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });
      Object.defineProperty(err, "name", {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });
      return err;
    }
    inherits(ClientError, HttpError);
    nameFunc(ClientError, className);
    ClientError.prototype.status = code;
    ClientError.prototype.statusCode = code;
    ClientError.prototype.expose = true;
    return ClientError;
  }
  function createServerErrorConstructor(HttpError, name, code) {
    var className = name.match(/Error$/) ? name : name + "Error";
    function ServerError(message) {
      var msg = message != null ? message : statuses[code];
      var err = new Error(msg);
      Error.captureStackTrace(err, ServerError);
      setPrototypeOf(err, ServerError.prototype);
      Object.defineProperty(err, "message", {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });
      Object.defineProperty(err, "name", {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });
      return err;
    }
    inherits(ServerError, HttpError);
    nameFunc(ServerError, className);
    ServerError.prototype.status = code;
    ServerError.prototype.statusCode = code;
    ServerError.prototype.expose = false;
    return ServerError;
  }
  function nameFunc(func, name) {
    var desc = Object.getOwnPropertyDescriptor(func, "name");
    if (desc && desc.configurable) {
      desc.value = name;
      Object.defineProperty(func, "name", desc);
    }
  }
  function populateConstructorExports(exports3, codes, HttpError) {
    codes.forEach(function forEachCode(code) {
      var CodeError;
      var name = toIdentifier(statuses[code]);
      switch (codeClass(code)) {
        case 400:
          CodeError = createClientErrorConstructor(HttpError, name, code);
          break;
        case 500:
          CodeError = createServerErrorConstructor(HttpError, name, code);
          break;
      }
      if (CodeError) {
        exports3[code] = CodeError;
        exports3[name] = CodeError;
      }
    });
    exports3["I'mateapot"] = deprecate.function(exports3.ImATeapot, `"I'mateapot"; use "ImATeapot" instead`);
  }
});

// ../../node_modules/.pnpm/ms@2.0.0/node_modules/ms/index.js
var require_ms2 = __commonJS((exports2, module3) => {
  var s = 1e3;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var y = d * 365.25;
  module3.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return void 0;
    }
  }
  function fmtShort(ms) {
    if (ms >= d) {
      return Math.round(ms / d) + "d";
    }
    if (ms >= h) {
      return Math.round(ms / h) + "h";
    }
    if (ms >= m) {
      return Math.round(ms / m) + "m";
    }
    if (ms >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  }
  function fmtLong(ms) {
    return plural(ms, d, "day") || plural(ms, h, "hour") || plural(ms, m, "minute") || plural(ms, s, "second") || ms + " ms";
  }
  function plural(ms, n, name) {
    if (ms < n) {
      return;
    }
    if (ms < n * 1.5) {
      return Math.floor(ms / n) + " " + name;
    }
    return Math.ceil(ms / n) + " " + name + "s";
  }
});

// ../../node_modules/.pnpm/debug@2.6.9/node_modules/debug/src/debug.js
var require_debug = __commonJS((exports2, module3) => {
  exports2 = module3.exports = createDebug.debug = createDebug["default"] = createDebug;
  exports2.coerce = coerce;
  exports2.disable = disable;
  exports2.enable = enable;
  exports2.enabled = enabled;
  exports2.humanize = require_ms2();
  exports2.names = [];
  exports2.skips = [];
  exports2.formatters = {};
  var prevTime;
  function selectColor(namespace) {
    var hash = 0, i;
    for (i in namespace) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0;
    }
    return exports2.colors[Math.abs(hash) % exports2.colors.length];
  }
  function createDebug(namespace) {
    function debug3() {
      if (!debug3.enabled)
        return;
      var self2 = debug3;
      var curr = +new Date();
      var ms = curr - (prevTime || curr);
      self2.diff = ms;
      self2.prev = prevTime;
      self2.curr = curr;
      prevTime = curr;
      var args2 = new Array(arguments.length);
      for (var i = 0; i < args2.length; i++) {
        args2[i] = arguments[i];
      }
      args2[0] = exports2.coerce(args2[0]);
      if (typeof args2[0] !== "string") {
        args2.unshift("%O");
      }
      var index = 0;
      args2[0] = args2[0].replace(/%([a-zA-Z%])/g, function(match, format11) {
        if (match === "%%")
          return match;
        index++;
        var formatter = exports2.formatters[format11];
        if (typeof formatter === "function") {
          var val = args2[index];
          match = formatter.call(self2, val);
          args2.splice(index, 1);
          index--;
        }
        return match;
      });
      exports2.formatArgs.call(self2, args2);
      var logFn = debug3.log || exports2.log || console.log.bind(console);
      logFn.apply(self2, args2);
    }
    debug3.namespace = namespace;
    debug3.enabled = exports2.enabled(namespace);
    debug3.useColors = exports2.useColors();
    debug3.color = selectColor(namespace);
    if (typeof exports2.init === "function") {
      exports2.init(debug3);
    }
    return debug3;
  }
  function enable(namespaces) {
    exports2.save(namespaces);
    exports2.names = [];
    exports2.skips = [];
    var split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
    var len = split.length;
    for (var i = 0; i < len; i++) {
      if (!split[i])
        continue;
      namespaces = split[i].replace(/\*/g, ".*?");
      if (namespaces[0] === "-") {
        exports2.skips.push(new RegExp("^" + namespaces.substr(1) + "$"));
      } else {
        exports2.names.push(new RegExp("^" + namespaces + "$"));
      }
    }
  }
  function disable() {
    exports2.enable("");
  }
  function enabled(name) {
    var i, len;
    for (i = 0, len = exports2.skips.length; i < len; i++) {
      if (exports2.skips[i].test(name)) {
        return false;
      }
    }
    for (i = 0, len = exports2.names.length; i < len; i++) {
      if (exports2.names[i].test(name)) {
        return true;
      }
    }
    return false;
  }
  function coerce(val) {
    if (val instanceof Error)
      return val.stack || val.message;
    return val;
  }
});

// ../../node_modules/.pnpm/debug@2.6.9/node_modules/debug/src/browser.js
var require_browser3 = __commonJS((exports2, module3) => {
  exports2 = module3.exports = require_debug();
  exports2.log = log;
  exports2.formatArgs = formatArgs;
  exports2.save = save;
  exports2.load = load;
  exports2.useColors = useColors;
  exports2.storage = typeof chrome != "undefined" && typeof chrome.storage != "undefined" ? chrome.storage.local : localstorage();
  exports2.colors = [
    "lightseagreen",
    "forestgreen",
    "goldenrod",
    "dodgerblue",
    "darkorchid",
    "crimson"
  ];
  function useColors() {
    if (typeof window !== "undefined" && window.process && window.process.type === "renderer") {
      return true;
    }
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  exports2.formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (err) {
      return "[UnexpectedJSONParseError]: " + err.message;
    }
  };
  function formatArgs(args2) {
    var useColors2 = this.useColors;
    args2[0] = (useColors2 ? "%c" : "") + this.namespace + (useColors2 ? " %c" : " ") + args2[0] + (useColors2 ? "%c " : " ") + "+" + exports2.humanize(this.diff);
    if (!useColors2)
      return;
    var c = "color: " + this.color;
    args2.splice(1, 0, c, "color: inherit");
    var index = 0;
    var lastC = 0;
    args2[0].replace(/%[a-zA-Z%]/g, function(match) {
      if (match === "%%")
        return;
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args2.splice(lastC, 0, c);
  }
  function log() {
    return typeof console === "object" && console.log && Function.prototype.apply.call(console.log, console, arguments);
  }
  function save(namespaces) {
    try {
      if (namespaces == null) {
        exports2.storage.removeItem("debug");
      } else {
        exports2.storage.debug = namespaces;
      }
    } catch (e) {
    }
  }
  function load() {
    var r;
    try {
      r = exports2.storage.debug;
    } catch (e) {
    }
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  }
  exports2.enable(load());
  function localstorage() {
    try {
      return window.localStorage;
    } catch (e) {
    }
  }
});

// ../../node_modules/.pnpm/debug@2.6.9/node_modules/debug/src/node.js
var require_node4 = __commonJS((exports2, module3) => {
  var tty = require("tty");
  var util4 = require("util");
  exports2 = module3.exports = require_debug();
  exports2.init = init;
  exports2.log = log;
  exports2.formatArgs = formatArgs;
  exports2.save = save;
  exports2.load = load;
  exports2.useColors = useColors;
  exports2.colors = [6, 2, 3, 4, 5, 1];
  exports2.inspectOpts = Object.keys(process.env).filter(function(key) {
    return /^debug_/i.test(key);
  }).reduce(function(obj, key) {
    var prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, function(_2, k) {
      return k.toUpperCase();
    });
    var val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val))
      val = true;
    else if (/^(no|off|false|disabled)$/i.test(val))
      val = false;
    else if (val === "null")
      val = null;
    else
      val = Number(val);
    obj[prop] = val;
    return obj;
  }, {});
  var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
  if (fd !== 1 && fd !== 2) {
    util4.deprecate(function() {
    }, "except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)")();
  }
  var stream = fd === 1 ? process.stdout : fd === 2 ? process.stderr : createWritableStdioStream(fd);
  function useColors() {
    return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(fd);
  }
  exports2.formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util4.inspect(v, this.inspectOpts).split("\n").map(function(str) {
      return str.trim();
    }).join(" ");
  };
  exports2.formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util4.inspect(v, this.inspectOpts);
  };
  function formatArgs(args2) {
    var name = this.namespace;
    var useColors2 = this.useColors;
    if (useColors2) {
      var c = this.color;
      var prefix = "  [3" + c + ";1m" + name + " [0m";
      args2[0] = prefix + args2[0].split("\n").join("\n" + prefix);
      args2.push("[3" + c + "m+" + exports2.humanize(this.diff) + "[0m");
    } else {
      args2[0] = new Date().toUTCString() + " " + name + " " + args2[0];
    }
  }
  function log() {
    return stream.write(util4.format.apply(util4, arguments) + "\n");
  }
  function save(namespaces) {
    if (namespaces == null) {
      delete process.env.DEBUG;
    } else {
      process.env.DEBUG = namespaces;
    }
  }
  function load() {
    return process.env.DEBUG;
  }
  function createWritableStdioStream(fd2) {
    var stream2;
    var tty_wrap = process.binding("tty_wrap");
    switch (tty_wrap.guessHandleType(fd2)) {
      case "TTY":
        stream2 = new tty.WriteStream(fd2);
        stream2._type = "tty";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      case "FILE":
        var fs17 = require("fs");
        stream2 = new fs17.SyncWriteStream(fd2, {autoClose: false});
        stream2._type = "fs";
        break;
      case "PIPE":
      case "TCP":
        var net = require("net");
        stream2 = new net.Socket({
          fd: fd2,
          readable: false,
          writable: true
        });
        stream2.readable = false;
        stream2.read = null;
        stream2._type = "pipe";
        if (stream2._handle && stream2._handle.unref) {
          stream2._handle.unref();
        }
        break;
      default:
        throw new Error("Implement me. Unknown stream file type!");
    }
    stream2.fd = fd2;
    stream2._isStdio = true;
    return stream2;
  }
  function init(debug3) {
    debug3.inspectOpts = {};
    var keys = Object.keys(exports2.inspectOpts);
    for (var i = 0; i < keys.length; i++) {
      debug3.inspectOpts[keys[i]] = exports2.inspectOpts[keys[i]];
    }
  }
  exports2.enable(load());
});

// ../../node_modules/.pnpm/debug@2.6.9/node_modules/debug/src/index.js
var require_src7 = __commonJS((exports2, module3) => {
  if (typeof process !== "undefined" && process.type === "renderer") {
    module3.exports = require_browser3();
  } else {
    module3.exports = require_node4();
  }
});

// ../../node_modules/.pnpm/safer-buffer@2.1.2/node_modules/safer-buffer/safer.js
var require_safer = __commonJS((exports2, module3) => {
  "use strict";
  var buffer = require("buffer");
  var Buffer2 = buffer.Buffer;
  var safer = {};
  var key;
  for (key in buffer) {
    if (!buffer.hasOwnProperty(key))
      continue;
    if (key === "SlowBuffer" || key === "Buffer")
      continue;
    safer[key] = buffer[key];
  }
  var Safer = safer.Buffer = {};
  for (key in Buffer2) {
    if (!Buffer2.hasOwnProperty(key))
      continue;
    if (key === "allocUnsafe" || key === "allocUnsafeSlow")
      continue;
    Safer[key] = Buffer2[key];
  }
  safer.Buffer.prototype = Buffer2.prototype;
  if (!Safer.from || Safer.from === Uint8Array.from) {
    Safer.from = function(value, encodingOrOffset, length) {
      if (typeof value === "number") {
        throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
      }
      if (value && typeof value.length === "undefined") {
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
      }
      return Buffer2(value, encodingOrOffset, length);
    };
  }
  if (!Safer.alloc) {
    Safer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
      }
      if (size < 0 || size >= 2 * (1 << 30)) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
      var buf = Buffer2(size);
      if (!fill || fill.length === 0) {
        buf.fill(0);
      } else if (typeof encoding === "string") {
        buf.fill(fill, encoding);
      } else {
        buf.fill(fill);
      }
      return buf;
    };
  }
  if (!safer.kStringMaxLength) {
    try {
      safer.kStringMaxLength = process.binding("buffer").kStringMaxLength;
    } catch (e) {
    }
  }
  if (!safer.constants) {
    safer.constants = {
      MAX_LENGTH: safer.kMaxLength
    };
    if (safer.kStringMaxLength) {
      safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
    }
  }
  module3.exports = safer;
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/lib/bom-handling.js
var require_bom_handling = __commonJS((exports2) => {
  "use strict";
  var BOMChar = "﻿";
  exports2.PrependBOM = PrependBOMWrapper;
  function PrependBOMWrapper(encoder, options) {
    this.encoder = encoder;
    this.addBOM = true;
  }
  PrependBOMWrapper.prototype.write = function(str) {
    if (this.addBOM) {
      str = BOMChar + str;
      this.addBOM = false;
    }
    return this.encoder.write(str);
  };
  PrependBOMWrapper.prototype.end = function() {
    return this.encoder.end();
  };
  exports2.StripBOM = StripBOMWrapper;
  function StripBOMWrapper(decoder, options) {
    this.decoder = decoder;
    this.pass = false;
    this.options = options || {};
  }
  StripBOMWrapper.prototype.write = function(buf) {
    var res = this.decoder.write(buf);
    if (this.pass || !res)
      return res;
    if (res[0] === BOMChar) {
      res = res.slice(1);
      if (typeof this.options.stripBOM === "function")
        this.options.stripBOM();
    }
    this.pass = true;
    return res;
  };
  StripBOMWrapper.prototype.end = function() {
    return this.decoder.end();
  };
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/internal.js
var require_internal = __commonJS((exports2, module3) => {
  "use strict";
  var Buffer2 = require_safer().Buffer;
  module3.exports = {
    utf8: {type: "_internal", bomAware: true},
    cesu8: {type: "_internal", bomAware: true},
    unicode11utf8: "utf8",
    ucs2: {type: "_internal", bomAware: true},
    utf16le: "ucs2",
    binary: {type: "_internal"},
    base64: {type: "_internal"},
    hex: {type: "_internal"},
    _internal: InternalCodec
  };
  function InternalCodec(codecOptions, iconv) {
    this.enc = codecOptions.encodingName;
    this.bomAware = codecOptions.bomAware;
    if (this.enc === "base64")
      this.encoder = InternalEncoderBase64;
    else if (this.enc === "cesu8") {
      this.enc = "utf8";
      this.encoder = InternalEncoderCesu8;
      if (Buffer2.from("eda0bdedb2a9", "hex").toString() !== "💩") {
        this.decoder = InternalDecoderCesu8;
        this.defaultCharUnicode = iconv.defaultCharUnicode;
      }
    }
  }
  InternalCodec.prototype.encoder = InternalEncoder;
  InternalCodec.prototype.decoder = InternalDecoder;
  var StringDecoder = require("string_decoder").StringDecoder;
  if (!StringDecoder.prototype.end)
    StringDecoder.prototype.end = function() {
    };
  function InternalDecoder(options, codec) {
    StringDecoder.call(this, codec.enc);
  }
  InternalDecoder.prototype = StringDecoder.prototype;
  function InternalEncoder(options, codec) {
    this.enc = codec.enc;
  }
  InternalEncoder.prototype.write = function(str) {
    return Buffer2.from(str, this.enc);
  };
  InternalEncoder.prototype.end = function() {
  };
  function InternalEncoderBase64(options, codec) {
    this.prevStr = "";
  }
  InternalEncoderBase64.prototype.write = function(str) {
    str = this.prevStr + str;
    var completeQuads = str.length - str.length % 4;
    this.prevStr = str.slice(completeQuads);
    str = str.slice(0, completeQuads);
    return Buffer2.from(str, "base64");
  };
  InternalEncoderBase64.prototype.end = function() {
    return Buffer2.from(this.prevStr, "base64");
  };
  function InternalEncoderCesu8(options, codec) {
  }
  InternalEncoderCesu8.prototype.write = function(str) {
    var buf = Buffer2.alloc(str.length * 3), bufIdx = 0;
    for (var i = 0; i < str.length; i++) {
      var charCode = str.charCodeAt(i);
      if (charCode < 128)
        buf[bufIdx++] = charCode;
      else if (charCode < 2048) {
        buf[bufIdx++] = 192 + (charCode >>> 6);
        buf[bufIdx++] = 128 + (charCode & 63);
      } else {
        buf[bufIdx++] = 224 + (charCode >>> 12);
        buf[bufIdx++] = 128 + (charCode >>> 6 & 63);
        buf[bufIdx++] = 128 + (charCode & 63);
      }
    }
    return buf.slice(0, bufIdx);
  };
  InternalEncoderCesu8.prototype.end = function() {
  };
  function InternalDecoderCesu8(options, codec) {
    this.acc = 0;
    this.contBytes = 0;
    this.accBytes = 0;
    this.defaultCharUnicode = codec.defaultCharUnicode;
  }
  InternalDecoderCesu8.prototype.write = function(buf) {
    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, res = "";
    for (var i = 0; i < buf.length; i++) {
      var curByte = buf[i];
      if ((curByte & 192) !== 128) {
        if (contBytes > 0) {
          res += this.defaultCharUnicode;
          contBytes = 0;
        }
        if (curByte < 128) {
          res += String.fromCharCode(curByte);
        } else if (curByte < 224) {
          acc = curByte & 31;
          contBytes = 1;
          accBytes = 1;
        } else if (curByte < 240) {
          acc = curByte & 15;
          contBytes = 2;
          accBytes = 1;
        } else {
          res += this.defaultCharUnicode;
        }
      } else {
        if (contBytes > 0) {
          acc = acc << 6 | curByte & 63;
          contBytes--;
          accBytes++;
          if (contBytes === 0) {
            if (accBytes === 2 && acc < 128 && acc > 0)
              res += this.defaultCharUnicode;
            else if (accBytes === 3 && acc < 2048)
              res += this.defaultCharUnicode;
            else
              res += String.fromCharCode(acc);
          }
        } else {
          res += this.defaultCharUnicode;
        }
      }
    }
    this.acc = acc;
    this.contBytes = contBytes;
    this.accBytes = accBytes;
    return res;
  };
  InternalDecoderCesu8.prototype.end = function() {
    var res = 0;
    if (this.contBytes > 0)
      res += this.defaultCharUnicode;
    return res;
  };
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/utf16.js
var require_utf16 = __commonJS((exports2) => {
  "use strict";
  var Buffer2 = require_safer().Buffer;
  exports2.utf16be = Utf16BECodec;
  function Utf16BECodec() {
  }
  Utf16BECodec.prototype.encoder = Utf16BEEncoder;
  Utf16BECodec.prototype.decoder = Utf16BEDecoder;
  Utf16BECodec.prototype.bomAware = true;
  function Utf16BEEncoder() {
  }
  Utf16BEEncoder.prototype.write = function(str) {
    var buf = Buffer2.from(str, "ucs2");
    for (var i = 0; i < buf.length; i += 2) {
      var tmp = buf[i];
      buf[i] = buf[i + 1];
      buf[i + 1] = tmp;
    }
    return buf;
  };
  Utf16BEEncoder.prototype.end = function() {
  };
  function Utf16BEDecoder() {
    this.overflowByte = -1;
  }
  Utf16BEDecoder.prototype.write = function(buf) {
    if (buf.length == 0)
      return "";
    var buf2 = Buffer2.alloc(buf.length + 1), i = 0, j = 0;
    if (this.overflowByte !== -1) {
      buf2[0] = buf[0];
      buf2[1] = this.overflowByte;
      i = 1;
      j = 2;
    }
    for (; i < buf.length - 1; i += 2, j += 2) {
      buf2[j] = buf[i + 1];
      buf2[j + 1] = buf[i];
    }
    this.overflowByte = i == buf.length - 1 ? buf[buf.length - 1] : -1;
    return buf2.slice(0, j).toString("ucs2");
  };
  Utf16BEDecoder.prototype.end = function() {
  };
  exports2.utf16 = Utf16Codec;
  function Utf16Codec(codecOptions, iconv) {
    this.iconv = iconv;
  }
  Utf16Codec.prototype.encoder = Utf16Encoder;
  Utf16Codec.prototype.decoder = Utf16Decoder;
  function Utf16Encoder(options, codec) {
    options = options || {};
    if (options.addBOM === void 0)
      options.addBOM = true;
    this.encoder = codec.iconv.getEncoder("utf-16le", options);
  }
  Utf16Encoder.prototype.write = function(str) {
    return this.encoder.write(str);
  };
  Utf16Encoder.prototype.end = function() {
    return this.encoder.end();
  };
  function Utf16Decoder(options, codec) {
    this.decoder = null;
    this.initialBytes = [];
    this.initialBytesLen = 0;
    this.options = options || {};
    this.iconv = codec.iconv;
  }
  Utf16Decoder.prototype.write = function(buf) {
    if (!this.decoder) {
      this.initialBytes.push(buf);
      this.initialBytesLen += buf.length;
      if (this.initialBytesLen < 16)
        return "";
      var buf = Buffer2.concat(this.initialBytes), encoding = detectEncoding(buf, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      this.initialBytes.length = this.initialBytesLen = 0;
    }
    return this.decoder.write(buf);
  };
  Utf16Decoder.prototype.end = function() {
    if (!this.decoder) {
      var buf = Buffer2.concat(this.initialBytes), encoding = detectEncoding(buf, this.options.defaultEncoding);
      this.decoder = this.iconv.getDecoder(encoding, this.options);
      var res = this.decoder.write(buf), trail = this.decoder.end();
      return trail ? res + trail : res;
    }
    return this.decoder.end();
  };
  function detectEncoding(buf, defaultEncoding) {
    var enc = defaultEncoding || "utf-16le";
    if (buf.length >= 2) {
      if (buf[0] == 254 && buf[1] == 255)
        enc = "utf-16be";
      else if (buf[0] == 255 && buf[1] == 254)
        enc = "utf-16le";
      else {
        var asciiCharsLE = 0, asciiCharsBE = 0, _len = Math.min(buf.length - buf.length % 2, 64);
        for (var i = 0; i < _len; i += 2) {
          if (buf[i] === 0 && buf[i + 1] !== 0)
            asciiCharsBE++;
          if (buf[i] !== 0 && buf[i + 1] === 0)
            asciiCharsLE++;
        }
        if (asciiCharsBE > asciiCharsLE)
          enc = "utf-16be";
        else if (asciiCharsBE < asciiCharsLE)
          enc = "utf-16le";
      }
    }
    return enc;
  }
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/utf7.js
var require_utf7 = __commonJS((exports2) => {
  "use strict";
  var Buffer2 = require_safer().Buffer;
  exports2.utf7 = Utf7Codec;
  exports2.unicode11utf7 = "utf7";
  function Utf7Codec(codecOptions, iconv) {
    this.iconv = iconv;
  }
  Utf7Codec.prototype.encoder = Utf7Encoder;
  Utf7Codec.prototype.decoder = Utf7Decoder;
  Utf7Codec.prototype.bomAware = true;
  var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;
  function Utf7Encoder(options, codec) {
    this.iconv = codec.iconv;
  }
  Utf7Encoder.prototype.write = function(str) {
    return Buffer2.from(str.replace(nonDirectChars, function(chunk) {
      return "+" + (chunk === "+" ? "" : this.iconv.encode(chunk, "utf16-be").toString("base64").replace(/=+$/, "")) + "-";
    }.bind(this)));
  };
  Utf7Encoder.prototype.end = function() {
  };
  function Utf7Decoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = "";
  }
  var base64Regex = /[A-Za-z0-9\/+]/;
  var base64Chars = [];
  for (var i = 0; i < 256; i++)
    base64Chars[i] = base64Regex.test(String.fromCharCode(i));
  var plusChar = "+".charCodeAt(0);
  var minusChar = "-".charCodeAt(0);
  var andChar = "&".charCodeAt(0);
  Utf7Decoder.prototype.write = function(buf) {
    var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
    for (var i2 = 0; i2 < buf.length; i2++) {
      if (!inBase64) {
        if (buf[i2] == plusChar) {
          res += this.iconv.decode(buf.slice(lastI, i2), "ascii");
          lastI = i2 + 1;
          inBase64 = true;
        }
      } else {
        if (!base64Chars[buf[i2]]) {
          if (i2 == lastI && buf[i2] == minusChar) {
            res += "+";
          } else {
            var b64str = base64Accum + buf.slice(lastI, i2).toString();
            res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
          }
          if (buf[i2] != minusChar)
            i2--;
          lastI = i2 + 1;
          inBase64 = false;
          base64Accum = "";
        }
      }
    }
    if (!inBase64) {
      res += this.iconv.decode(buf.slice(lastI), "ascii");
    } else {
      var b64str = base64Accum + buf.slice(lastI).toString();
      var canBeDecoded = b64str.length - b64str.length % 8;
      base64Accum = b64str.slice(canBeDecoded);
      b64str = b64str.slice(0, canBeDecoded);
      res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
    }
    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;
    return res;
  };
  Utf7Decoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
      res = this.iconv.decode(Buffer2.from(this.base64Accum, "base64"), "utf16-be");
    this.inBase64 = false;
    this.base64Accum = "";
    return res;
  };
  exports2.utf7imap = Utf7IMAPCodec;
  function Utf7IMAPCodec(codecOptions, iconv) {
    this.iconv = iconv;
  }
  Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
  Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
  Utf7IMAPCodec.prototype.bomAware = true;
  function Utf7IMAPEncoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = Buffer2.alloc(6);
    this.base64AccumIdx = 0;
  }
  Utf7IMAPEncoder.prototype.write = function(str) {
    var inBase64 = this.inBase64, base64Accum = this.base64Accum, base64AccumIdx = this.base64AccumIdx, buf = Buffer2.alloc(str.length * 5 + 10), bufIdx = 0;
    for (var i2 = 0; i2 < str.length; i2++) {
      var uChar = str.charCodeAt(i2);
      if (32 <= uChar && uChar <= 126) {
        if (inBase64) {
          if (base64AccumIdx > 0) {
            bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
            base64AccumIdx = 0;
          }
          buf[bufIdx++] = minusChar;
          inBase64 = false;
        }
        if (!inBase64) {
          buf[bufIdx++] = uChar;
          if (uChar === andChar)
            buf[bufIdx++] = minusChar;
        }
      } else {
        if (!inBase64) {
          buf[bufIdx++] = andChar;
          inBase64 = true;
        }
        if (inBase64) {
          base64Accum[base64AccumIdx++] = uChar >> 8;
          base64Accum[base64AccumIdx++] = uChar & 255;
          if (base64AccumIdx == base64Accum.length) {
            bufIdx += buf.write(base64Accum.toString("base64").replace(/\//g, ","), bufIdx);
            base64AccumIdx = 0;
          }
        }
      }
    }
    this.inBase64 = inBase64;
    this.base64AccumIdx = base64AccumIdx;
    return buf.slice(0, bufIdx);
  };
  Utf7IMAPEncoder.prototype.end = function() {
    var buf = Buffer2.alloc(10), bufIdx = 0;
    if (this.inBase64) {
      if (this.base64AccumIdx > 0) {
        bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString("base64").replace(/\//g, ",").replace(/=+$/, ""), bufIdx);
        this.base64AccumIdx = 0;
      }
      buf[bufIdx++] = minusChar;
      this.inBase64 = false;
    }
    return buf.slice(0, bufIdx);
  };
  function Utf7IMAPDecoder(options, codec) {
    this.iconv = codec.iconv;
    this.inBase64 = false;
    this.base64Accum = "";
  }
  var base64IMAPChars = base64Chars.slice();
  base64IMAPChars[",".charCodeAt(0)] = true;
  Utf7IMAPDecoder.prototype.write = function(buf) {
    var res = "", lastI = 0, inBase64 = this.inBase64, base64Accum = this.base64Accum;
    for (var i2 = 0; i2 < buf.length; i2++) {
      if (!inBase64) {
        if (buf[i2] == andChar) {
          res += this.iconv.decode(buf.slice(lastI, i2), "ascii");
          lastI = i2 + 1;
          inBase64 = true;
        }
      } else {
        if (!base64IMAPChars[buf[i2]]) {
          if (i2 == lastI && buf[i2] == minusChar) {
            res += "&";
          } else {
            var b64str = base64Accum + buf.slice(lastI, i2).toString().replace(/,/g, "/");
            res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
          }
          if (buf[i2] != minusChar)
            i2--;
          lastI = i2 + 1;
          inBase64 = false;
          base64Accum = "";
        }
      }
    }
    if (!inBase64) {
      res += this.iconv.decode(buf.slice(lastI), "ascii");
    } else {
      var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, "/");
      var canBeDecoded = b64str.length - b64str.length % 8;
      base64Accum = b64str.slice(canBeDecoded);
      b64str = b64str.slice(0, canBeDecoded);
      res += this.iconv.decode(Buffer2.from(b64str, "base64"), "utf16-be");
    }
    this.inBase64 = inBase64;
    this.base64Accum = base64Accum;
    return res;
  };
  Utf7IMAPDecoder.prototype.end = function() {
    var res = "";
    if (this.inBase64 && this.base64Accum.length > 0)
      res = this.iconv.decode(Buffer2.from(this.base64Accum, "base64"), "utf16-be");
    this.inBase64 = false;
    this.base64Accum = "";
    return res;
  };
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/sbcs-codec.js
var require_sbcs_codec = __commonJS((exports2) => {
  "use strict";
  var Buffer2 = require_safer().Buffer;
  exports2._sbcs = SBCSCodec;
  function SBCSCodec(codecOptions, iconv) {
    if (!codecOptions)
      throw new Error("SBCS codec is called without the data.");
    if (!codecOptions.chars || codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256)
      throw new Error("Encoding '" + codecOptions.type + "' has incorrect 'chars' (must be of len 128 or 256)");
    if (codecOptions.chars.length === 128) {
      var asciiString = "";
      for (var i = 0; i < 128; i++)
        asciiString += String.fromCharCode(i);
      codecOptions.chars = asciiString + codecOptions.chars;
    }
    this.decodeBuf = Buffer2.from(codecOptions.chars, "ucs2");
    var encodeBuf = Buffer2.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));
    for (var i = 0; i < codecOptions.chars.length; i++)
      encodeBuf[codecOptions.chars.charCodeAt(i)] = i;
    this.encodeBuf = encodeBuf;
  }
  SBCSCodec.prototype.encoder = SBCSEncoder;
  SBCSCodec.prototype.decoder = SBCSDecoder;
  function SBCSEncoder(options, codec) {
    this.encodeBuf = codec.encodeBuf;
  }
  SBCSEncoder.prototype.write = function(str) {
    var buf = Buffer2.alloc(str.length);
    for (var i = 0; i < str.length; i++)
      buf[i] = this.encodeBuf[str.charCodeAt(i)];
    return buf;
  };
  SBCSEncoder.prototype.end = function() {
  };
  function SBCSDecoder(options, codec) {
    this.decodeBuf = codec.decodeBuf;
  }
  SBCSDecoder.prototype.write = function(buf) {
    var decodeBuf = this.decodeBuf;
    var newBuf = Buffer2.alloc(buf.length * 2);
    var idx1 = 0, idx2 = 0;
    for (var i = 0; i < buf.length; i++) {
      idx1 = buf[i] * 2;
      idx2 = i * 2;
      newBuf[idx2] = decodeBuf[idx1];
      newBuf[idx2 + 1] = decodeBuf[idx1 + 1];
    }
    return newBuf.toString("ucs2");
  };
  SBCSDecoder.prototype.end = function() {
  };
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/sbcs-data.js
var require_sbcs_data = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = {
    "10029": "maccenteuro",
    maccenteuro: {
      type: "_sbcs",
      chars: "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
    },
    "808": "cp808",
    ibm808: "cp808",
    cp808: {
      type: "_sbcs",
      chars: "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
    },
    mik: {
      type: "_sbcs",
      chars: "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    ascii8bit: "ascii",
    usascii: "ascii",
    ansix34: "ascii",
    ansix341968: "ascii",
    ansix341986: "ascii",
    csascii: "ascii",
    cp367: "ascii",
    ibm367: "ascii",
    isoir6: "ascii",
    iso646us: "ascii",
    iso646irv: "ascii",
    us: "ascii",
    latin1: "iso88591",
    latin2: "iso88592",
    latin3: "iso88593",
    latin4: "iso88594",
    latin5: "iso88599",
    latin6: "iso885910",
    latin7: "iso885913",
    latin8: "iso885914",
    latin9: "iso885915",
    latin10: "iso885916",
    csisolatin1: "iso88591",
    csisolatin2: "iso88592",
    csisolatin3: "iso88593",
    csisolatin4: "iso88594",
    csisolatincyrillic: "iso88595",
    csisolatinarabic: "iso88596",
    csisolatingreek: "iso88597",
    csisolatinhebrew: "iso88598",
    csisolatin5: "iso88599",
    csisolatin6: "iso885910",
    l1: "iso88591",
    l2: "iso88592",
    l3: "iso88593",
    l4: "iso88594",
    l5: "iso88599",
    l6: "iso885910",
    l7: "iso885913",
    l8: "iso885914",
    l9: "iso885915",
    l10: "iso885916",
    isoir14: "iso646jp",
    isoir57: "iso646cn",
    isoir100: "iso88591",
    isoir101: "iso88592",
    isoir109: "iso88593",
    isoir110: "iso88594",
    isoir144: "iso88595",
    isoir127: "iso88596",
    isoir126: "iso88597",
    isoir138: "iso88598",
    isoir148: "iso88599",
    isoir157: "iso885910",
    isoir166: "tis620",
    isoir179: "iso885913",
    isoir199: "iso885914",
    isoir203: "iso885915",
    isoir226: "iso885916",
    cp819: "iso88591",
    ibm819: "iso88591",
    cyrillic: "iso88595",
    arabic: "iso88596",
    arabic8: "iso88596",
    ecma114: "iso88596",
    asmo708: "iso88596",
    greek: "iso88597",
    greek8: "iso88597",
    ecma118: "iso88597",
    elot928: "iso88597",
    hebrew: "iso88598",
    hebrew8: "iso88598",
    turkish: "iso88599",
    turkish8: "iso88599",
    thai: "iso885911",
    thai8: "iso885911",
    celtic: "iso885914",
    celtic8: "iso885914",
    isoceltic: "iso885914",
    tis6200: "tis620",
    tis62025291: "tis620",
    tis62025330: "tis620",
    "10000": "macroman",
    "10006": "macgreek",
    "10007": "maccyrillic",
    "10079": "maciceland",
    "10081": "macturkish",
    cspc8codepage437: "cp437",
    cspc775baltic: "cp775",
    cspc850multilingual: "cp850",
    cspcp852: "cp852",
    cspc862latinhebrew: "cp862",
    cpgr: "cp869",
    msee: "cp1250",
    mscyrl: "cp1251",
    msansi: "cp1252",
    msgreek: "cp1253",
    msturk: "cp1254",
    mshebr: "cp1255",
    msarab: "cp1256",
    winbaltrim: "cp1257",
    cp20866: "koi8r",
    "20866": "koi8r",
    ibm878: "koi8r",
    cskoi8r: "koi8r",
    cp21866: "koi8u",
    "21866": "koi8u",
    ibm1168: "koi8u",
    strk10482002: "rk1048",
    tcvn5712: "tcvn",
    tcvn57121: "tcvn",
    gb198880: "iso646cn",
    cn: "iso646cn",
    csiso14jisc6220ro: "iso646jp",
    jisc62201969ro: "iso646jp",
    jp: "iso646jp",
    cshproman8: "hproman8",
    r8: "hproman8",
    roman8: "hproman8",
    xroman8: "hproman8",
    ibm1051: "hproman8",
    mac: "macintosh",
    csmacintosh: "macintosh"
  };
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/sbcs-data-generated.js
var require_sbcs_data_generated = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = {
    "437": "cp437",
    "737": "cp737",
    "775": "cp775",
    "850": "cp850",
    "852": "cp852",
    "855": "cp855",
    "856": "cp856",
    "857": "cp857",
    "858": "cp858",
    "860": "cp860",
    "861": "cp861",
    "862": "cp862",
    "863": "cp863",
    "864": "cp864",
    "865": "cp865",
    "866": "cp866",
    "869": "cp869",
    "874": "windows874",
    "922": "cp922",
    "1046": "cp1046",
    "1124": "cp1124",
    "1125": "cp1125",
    "1129": "cp1129",
    "1133": "cp1133",
    "1161": "cp1161",
    "1162": "cp1162",
    "1163": "cp1163",
    "1250": "windows1250",
    "1251": "windows1251",
    "1252": "windows1252",
    "1253": "windows1253",
    "1254": "windows1254",
    "1255": "windows1255",
    "1256": "windows1256",
    "1257": "windows1257",
    "1258": "windows1258",
    "28591": "iso88591",
    "28592": "iso88592",
    "28593": "iso88593",
    "28594": "iso88594",
    "28595": "iso88595",
    "28596": "iso88596",
    "28597": "iso88597",
    "28598": "iso88598",
    "28599": "iso88599",
    "28600": "iso885910",
    "28601": "iso885911",
    "28603": "iso885913",
    "28604": "iso885914",
    "28605": "iso885915",
    "28606": "iso885916",
    windows874: {
      type: "_sbcs",
      chars: "€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    },
    win874: "windows874",
    cp874: "windows874",
    windows1250: {
      type: "_sbcs",
      chars: "€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
    },
    win1250: "windows1250",
    cp1250: "windows1250",
    windows1251: {
      type: "_sbcs",
      chars: "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
    },
    win1251: "windows1251",
    cp1251: "windows1251",
    windows1252: {
      type: "_sbcs",
      chars: "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    win1252: "windows1252",
    cp1252: "windows1252",
    windows1253: {
      type: "_sbcs",
      chars: "€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
    },
    win1253: "windows1253",
    cp1253: "windows1253",
    windows1254: {
      type: "_sbcs",
      chars: "€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
    },
    win1254: "windows1254",
    cp1254: "windows1254",
    windows1255: {
      type: "_sbcs",
      chars: "€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
    },
    win1255: "windows1255",
    cp1255: "windows1255",
    windows1256: {
      type: "_sbcs",
      chars: "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
    },
    win1256: "windows1256",
    cp1256: "windows1256",
    windows1257: {
      type: "_sbcs",
      chars: "€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
    },
    win1257: "windows1257",
    cp1257: "windows1257",
    windows1258: {
      type: "_sbcs",
      chars: "€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
    },
    win1258: "windows1258",
    cp1258: "windows1258",
    iso88591: {
      type: "_sbcs",
      chars: " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    cp28591: "iso88591",
    iso88592: {
      type: "_sbcs",
      chars: " Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
    },
    cp28592: "iso88592",
    iso88593: {
      type: "_sbcs",
      chars: " Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"
    },
    cp28593: "iso88593",
    iso88594: {
      type: "_sbcs",
      chars: " ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"
    },
    cp28594: "iso88594",
    iso88595: {
      type: "_sbcs",
      chars: " ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"
    },
    cp28595: "iso88595",
    iso88596: {
      type: "_sbcs",
      chars: " ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"
    },
    cp28596: "iso88596",
    iso88597: {
      type: "_sbcs",
      chars: " ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
    },
    cp28597: "iso88597",
    iso88598: {
      type: "_sbcs",
      chars: " �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
    },
    cp28598: "iso88598",
    iso88599: {
      type: "_sbcs",
      chars: " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
    },
    cp28599: "iso88599",
    iso885910: {
      type: "_sbcs",
      chars: " ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"
    },
    cp28600: "iso885910",
    iso885911: {
      type: "_sbcs",
      chars: " กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    },
    cp28601: "iso885911",
    iso885913: {
      type: "_sbcs",
      chars: " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"
    },
    cp28603: "iso885913",
    iso885914: {
      type: "_sbcs",
      chars: " Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"
    },
    cp28604: "iso885914",
    iso885915: {
      type: "_sbcs",
      chars: " ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    cp28605: "iso885915",
    iso885916: {
      type: "_sbcs",
      chars: " ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"
    },
    cp28606: "iso885916",
    cp437: {
      type: "_sbcs",
      chars: "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    ibm437: "cp437",
    csibm437: "cp437",
    cp737: {
      type: "_sbcs",
      chars: "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "
    },
    ibm737: "cp737",
    csibm737: "cp737",
    cp775: {
      type: "_sbcs",
      chars: "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "
    },
    ibm775: "cp775",
    csibm775: "cp775",
    cp850: {
      type: "_sbcs",
      chars: "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
    },
    ibm850: "cp850",
    csibm850: "cp850",
    cp852: {
      type: "_sbcs",
      chars: "ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "
    },
    ibm852: "cp852",
    csibm852: "cp852",
    cp855: {
      type: "_sbcs",
      chars: "ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "
    },
    ibm855: "cp855",
    csibm855: "cp855",
    cp856: {
      type: "_sbcs",
      chars: "אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "
    },
    ibm856: "cp856",
    csibm856: "cp856",
    cp857: {
      type: "_sbcs",
      chars: "ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "
    },
    ibm857: "cp857",
    csibm857: "cp857",
    cp858: {
      type: "_sbcs",
      chars: "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
    },
    ibm858: "cp858",
    csibm858: "cp858",
    cp860: {
      type: "_sbcs",
      chars: "ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    ibm860: "cp860",
    csibm860: "cp860",
    cp861: {
      type: "_sbcs",
      chars: "ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    ibm861: "cp861",
    csibm861: "cp861",
    cp862: {
      type: "_sbcs",
      chars: "אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    ibm862: "cp862",
    csibm862: "cp862",
    cp863: {
      type: "_sbcs",
      chars: "ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    ibm863: "cp863",
    csibm863: "cp863",
    cp864: {
      type: "_sbcs",
      chars: "\0\x07\b	\n\v\f\r !\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�"
    },
    ibm864: "cp864",
    csibm864: "cp864",
    cp865: {
      type: "_sbcs",
      chars: "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
    },
    ibm865: "cp865",
    csibm865: "cp865",
    cp866: {
      type: "_sbcs",
      chars: "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
    },
    ibm866: "cp866",
    csibm866: "cp866",
    cp869: {
      type: "_sbcs",
      chars: "������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
    },
    ibm869: "cp869",
    csibm869: "cp869",
    cp922: {
      type: "_sbcs",
      chars: " ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"
    },
    ibm922: "cp922",
    csibm922: "cp922",
    cp1046: {
      type: "_sbcs",
      chars: "ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"
    },
    ibm1046: "cp1046",
    csibm1046: "cp1046",
    cp1124: {
      type: "_sbcs",
      chars: " ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"
    },
    ibm1124: "cp1124",
    csibm1124: "cp1124",
    cp1125: {
      type: "_sbcs",
      chars: "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "
    },
    ibm1125: "cp1125",
    csibm1125: "cp1125",
    cp1129: {
      type: "_sbcs",
      chars: " ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
    },
    ibm1129: "cp1129",
    csibm1129: "cp1129",
    cp1133: {
      type: "_sbcs",
      chars: " ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"
    },
    ibm1133: "cp1133",
    csibm1133: "cp1133",
    cp1161: {
      type: "_sbcs",
      chars: "��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "
    },
    ibm1161: "cp1161",
    csibm1161: "cp1161",
    cp1162: {
      type: "_sbcs",
      chars: "€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    },
    ibm1162: "cp1162",
    csibm1162: "cp1162",
    cp1163: {
      type: "_sbcs",
      chars: " ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
    },
    ibm1163: "cp1163",
    csibm1163: "cp1163",
    maccroatian: {
      type: "_sbcs",
      chars: "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
    },
    maccyrillic: {
      type: "_sbcs",
      chars: "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
    },
    macgreek: {
      type: "_sbcs",
      chars: "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
    },
    maciceland: {
      type: "_sbcs",
      chars: "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    macroman: {
      type: "_sbcs",
      chars: "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    macromania: {
      type: "_sbcs",
      chars: "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    macthai: {
      type: "_sbcs",
      chars: "«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
    },
    macturkish: {
      type: "_sbcs",
      chars: "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
    },
    macukraine: {
      type: "_sbcs",
      chars: "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
    },
    koi8r: {
      type: "_sbcs",
      chars: "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    koi8u: {
      type: "_sbcs",
      chars: "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    koi8ru: {
      type: "_sbcs",
      chars: "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    koi8t: {
      type: "_sbcs",
      chars: "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
    },
    armscii8: {
      type: "_sbcs",
      chars: " �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"
    },
    rk1048: {
      type: "_sbcs",
      chars: "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
    },
    tcvn: {
      type: "_sbcs",
      chars: "\0ÚỤỪỬỮ\x07\b	\n\v\f\rỨỰỲỶỸÝỴ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ"
    },
    georgianacademy: {
      type: "_sbcs",
      chars: "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    georgianps: {
      type: "_sbcs",
      chars: "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
    },
    pt154: {
      type: "_sbcs",
      chars: "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
    },
    viscii: {
      type: "_sbcs",
      chars: "\0ẲẴẪ\x07\b	\n\v\f\rỶỸỴ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ"
    },
    iso646cn: {
      type: "_sbcs",
      chars: "\0\x07\b	\n\v\f\r !\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
    },
    iso646jp: {
      type: "_sbcs",
      chars: "\0\x07\b	\n\v\f\r !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
    },
    hproman8: {
      type: "_sbcs",
      chars: " ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"
    },
    macintosh: {
      type: "_sbcs",
      chars: "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
    },
    ascii: {
      type: "_sbcs",
      chars: "��������������������������������������������������������������������������������������������������������������������������������"
    },
    tis620: {
      type: "_sbcs",
      chars: "���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
    }
  };
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/dbcs-codec.js
var require_dbcs_codec = __commonJS((exports2) => {
  "use strict";
  var Buffer2 = require_safer().Buffer;
  exports2._dbcs = DBCSCodec;
  var UNASSIGNED = -1;
  var GB18030_CODE = -2;
  var SEQ_START = -10;
  var NODE_START = -1e3;
  var UNASSIGNED_NODE = new Array(256);
  var DEF_CHAR = -1;
  for (var i = 0; i < 256; i++)
    UNASSIGNED_NODE[i] = UNASSIGNED;
  function DBCSCodec(codecOptions, iconv) {
    this.encodingName = codecOptions.encodingName;
    if (!codecOptions)
      throw new Error("DBCS codec is called without the data.");
    if (!codecOptions.table)
      throw new Error("Encoding '" + this.encodingName + "' has no data.");
    var mappingTable = codecOptions.table();
    this.decodeTables = [];
    this.decodeTables[0] = UNASSIGNED_NODE.slice(0);
    this.decodeTableSeq = [];
    for (var i2 = 0; i2 < mappingTable.length; i2++)
      this._addDecodeChunk(mappingTable[i2]);
    this.defaultCharUnicode = iconv.defaultCharUnicode;
    this.encodeTable = [];
    this.encodeTableSeq = [];
    var skipEncodeChars = {};
    if (codecOptions.encodeSkipVals)
      for (var i2 = 0; i2 < codecOptions.encodeSkipVals.length; i2++) {
        var val = codecOptions.encodeSkipVals[i2];
        if (typeof val === "number")
          skipEncodeChars[val] = true;
        else
          for (var j = val.from; j <= val.to; j++)
            skipEncodeChars[j] = true;
      }
    this._fillEncodeTable(0, 0, skipEncodeChars);
    if (codecOptions.encodeAdd) {
      for (var uChar in codecOptions.encodeAdd)
        if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
          this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
    }
    this.defCharSB = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
    if (this.defCharSB === UNASSIGNED)
      this.defCharSB = this.encodeTable[0]["?"];
    if (this.defCharSB === UNASSIGNED)
      this.defCharSB = "?".charCodeAt(0);
    if (typeof codecOptions.gb18030 === "function") {
      this.gb18030 = codecOptions.gb18030();
      var thirdByteNodeIdx = this.decodeTables.length;
      var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);
      var fourthByteNodeIdx = this.decodeTables.length;
      var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);
      for (var i2 = 129; i2 <= 254; i2++) {
        var secondByteNodeIdx = NODE_START - this.decodeTables[0][i2];
        var secondByteNode = this.decodeTables[secondByteNodeIdx];
        for (var j = 48; j <= 57; j++)
          secondByteNode[j] = NODE_START - thirdByteNodeIdx;
      }
      for (var i2 = 129; i2 <= 254; i2++)
        thirdByteNode[i2] = NODE_START - fourthByteNodeIdx;
      for (var i2 = 48; i2 <= 57; i2++)
        fourthByteNode[i2] = GB18030_CODE;
    }
  }
  DBCSCodec.prototype.encoder = DBCSEncoder;
  DBCSCodec.prototype.decoder = DBCSDecoder;
  DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
    var bytes = [];
    for (; addr > 0; addr >>= 8)
      bytes.push(addr & 255);
    if (bytes.length == 0)
      bytes.push(0);
    var node = this.decodeTables[0];
    for (var i2 = bytes.length - 1; i2 > 0; i2--) {
      var val = node[bytes[i2]];
      if (val == UNASSIGNED) {
        node[bytes[i2]] = NODE_START - this.decodeTables.length;
        this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
      } else if (val <= NODE_START) {
        node = this.decodeTables[NODE_START - val];
      } else
        throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
    }
    return node;
  };
  DBCSCodec.prototype._addDecodeChunk = function(chunk) {
    var curAddr = parseInt(chunk[0], 16);
    var writeTable = this._getDecodeTrieNode(curAddr);
    curAddr = curAddr & 255;
    for (var k = 1; k < chunk.length; k++) {
      var part = chunk[k];
      if (typeof part === "string") {
        for (var l = 0; l < part.length; ) {
          var code = part.charCodeAt(l++);
          if (55296 <= code && code < 56320) {
            var codeTrail = part.charCodeAt(l++);
            if (56320 <= codeTrail && codeTrail < 57344)
              writeTable[curAddr++] = 65536 + (code - 55296) * 1024 + (codeTrail - 56320);
            else
              throw new Error("Incorrect surrogate pair in " + this.encodingName + " at chunk " + chunk[0]);
          } else if (4080 < code && code <= 4095) {
            var len = 4095 - code + 2;
            var seq = [];
            for (var m = 0; m < len; m++)
              seq.push(part.charCodeAt(l++));
            writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
            this.decodeTableSeq.push(seq);
          } else
            writeTable[curAddr++] = code;
        }
      } else if (typeof part === "number") {
        var charCode = writeTable[curAddr - 1] + 1;
        for (var l = 0; l < part; l++)
          writeTable[curAddr++] = charCode++;
      } else
        throw new Error("Incorrect type '" + typeof part + "' given in " + this.encodingName + " at chunk " + chunk[0]);
    }
    if (curAddr > 255)
      throw new Error("Incorrect chunk in " + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
  };
  DBCSCodec.prototype._getEncodeBucket = function(uCode) {
    var high = uCode >> 8;
    if (this.encodeTable[high] === void 0)
      this.encodeTable[high] = UNASSIGNED_NODE.slice(0);
    return this.encodeTable[high];
  };
  DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 255;
    if (bucket[low] <= SEQ_START)
      this.encodeTableSeq[SEQ_START - bucket[low]][DEF_CHAR] = dbcsCode;
    else if (bucket[low] == UNASSIGNED)
      bucket[low] = dbcsCode;
  };
  DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {
    var uCode = seq[0];
    var bucket = this._getEncodeBucket(uCode);
    var low = uCode & 255;
    var node;
    if (bucket[low] <= SEQ_START) {
      node = this.encodeTableSeq[SEQ_START - bucket[low]];
    } else {
      node = {};
      if (bucket[low] !== UNASSIGNED)
        node[DEF_CHAR] = bucket[low];
      bucket[low] = SEQ_START - this.encodeTableSeq.length;
      this.encodeTableSeq.push(node);
    }
    for (var j = 1; j < seq.length - 1; j++) {
      var oldVal = node[uCode];
      if (typeof oldVal === "object")
        node = oldVal;
      else {
        node = node[uCode] = {};
        if (oldVal !== void 0)
          node[DEF_CHAR] = oldVal;
      }
    }
    uCode = seq[seq.length - 1];
    node[uCode] = dbcsCode;
  };
  DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
    var node = this.decodeTables[nodeIdx];
    for (var i2 = 0; i2 < 256; i2++) {
      var uCode = node[i2];
      var mbCode = prefix + i2;
      if (skipEncodeChars[mbCode])
        continue;
      if (uCode >= 0)
        this._setEncodeChar(uCode, mbCode);
      else if (uCode <= NODE_START)
        this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);
      else if (uCode <= SEQ_START)
        this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
    }
  };
  function DBCSEncoder(options, codec) {
    this.leadSurrogate = -1;
    this.seqObj = void 0;
    this.encodeTable = codec.encodeTable;
    this.encodeTableSeq = codec.encodeTableSeq;
    this.defaultCharSingleByte = codec.defCharSB;
    this.gb18030 = codec.gb18030;
  }
  DBCSEncoder.prototype.write = function(str) {
    var newBuf = Buffer2.alloc(str.length * (this.gb18030 ? 4 : 3)), leadSurrogate = this.leadSurrogate, seqObj = this.seqObj, nextChar = -1, i2 = 0, j = 0;
    while (true) {
      if (nextChar === -1) {
        if (i2 == str.length)
          break;
        var uCode = str.charCodeAt(i2++);
      } else {
        var uCode = nextChar;
        nextChar = -1;
      }
      if (55296 <= uCode && uCode < 57344) {
        if (uCode < 56320) {
          if (leadSurrogate === -1) {
            leadSurrogate = uCode;
            continue;
          } else {
            leadSurrogate = uCode;
            uCode = UNASSIGNED;
          }
        } else {
          if (leadSurrogate !== -1) {
            uCode = 65536 + (leadSurrogate - 55296) * 1024 + (uCode - 56320);
            leadSurrogate = -1;
          } else {
            uCode = UNASSIGNED;
          }
        }
      } else if (leadSurrogate !== -1) {
        nextChar = uCode;
        uCode = UNASSIGNED;
        leadSurrogate = -1;
      }
      var dbcsCode = UNASSIGNED;
      if (seqObj !== void 0 && uCode != UNASSIGNED) {
        var resCode = seqObj[uCode];
        if (typeof resCode === "object") {
          seqObj = resCode;
          continue;
        } else if (typeof resCode == "number") {
          dbcsCode = resCode;
        } else if (resCode == void 0) {
          resCode = seqObj[DEF_CHAR];
          if (resCode !== void 0) {
            dbcsCode = resCode;
            nextChar = uCode;
          } else {
          }
        }
        seqObj = void 0;
      } else if (uCode >= 0) {
        var subtable = this.encodeTable[uCode >> 8];
        if (subtable !== void 0)
          dbcsCode = subtable[uCode & 255];
        if (dbcsCode <= SEQ_START) {
          seqObj = this.encodeTableSeq[SEQ_START - dbcsCode];
          continue;
        }
        if (dbcsCode == UNASSIGNED && this.gb18030) {
          var idx = findIdx(this.gb18030.uChars, uCode);
          if (idx != -1) {
            var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
            newBuf[j++] = 129 + Math.floor(dbcsCode / 12600);
            dbcsCode = dbcsCode % 12600;
            newBuf[j++] = 48 + Math.floor(dbcsCode / 1260);
            dbcsCode = dbcsCode % 1260;
            newBuf[j++] = 129 + Math.floor(dbcsCode / 10);
            dbcsCode = dbcsCode % 10;
            newBuf[j++] = 48 + dbcsCode;
            continue;
          }
        }
      }
      if (dbcsCode === UNASSIGNED)
        dbcsCode = this.defaultCharSingleByte;
      if (dbcsCode < 256) {
        newBuf[j++] = dbcsCode;
      } else if (dbcsCode < 65536) {
        newBuf[j++] = dbcsCode >> 8;
        newBuf[j++] = dbcsCode & 255;
      } else {
        newBuf[j++] = dbcsCode >> 16;
        newBuf[j++] = dbcsCode >> 8 & 255;
        newBuf[j++] = dbcsCode & 255;
      }
    }
    this.seqObj = seqObj;
    this.leadSurrogate = leadSurrogate;
    return newBuf.slice(0, j);
  };
  DBCSEncoder.prototype.end = function() {
    if (this.leadSurrogate === -1 && this.seqObj === void 0)
      return;
    var newBuf = Buffer2.alloc(10), j = 0;
    if (this.seqObj) {
      var dbcsCode = this.seqObj[DEF_CHAR];
      if (dbcsCode !== void 0) {
        if (dbcsCode < 256) {
          newBuf[j++] = dbcsCode;
        } else {
          newBuf[j++] = dbcsCode >> 8;
          newBuf[j++] = dbcsCode & 255;
        }
      } else {
      }
      this.seqObj = void 0;
    }
    if (this.leadSurrogate !== -1) {
      newBuf[j++] = this.defaultCharSingleByte;
      this.leadSurrogate = -1;
    }
    return newBuf.slice(0, j);
  };
  DBCSEncoder.prototype.findIdx = findIdx;
  function DBCSDecoder(options, codec) {
    this.nodeIdx = 0;
    this.prevBuf = Buffer2.alloc(0);
    this.decodeTables = codec.decodeTables;
    this.decodeTableSeq = codec.decodeTableSeq;
    this.defaultCharUnicode = codec.defaultCharUnicode;
    this.gb18030 = codec.gb18030;
  }
  DBCSDecoder.prototype.write = function(buf) {
    var newBuf = Buffer2.alloc(buf.length * 2), nodeIdx = this.nodeIdx, prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length, seqStart = -this.prevBuf.length, uCode;
    if (prevBufOffset > 0)
      prevBuf = Buffer2.concat([prevBuf, buf.slice(0, 10)]);
    for (var i2 = 0, j = 0; i2 < buf.length; i2++) {
      var curByte = i2 >= 0 ? buf[i2] : prevBuf[i2 + prevBufOffset];
      var uCode = this.decodeTables[nodeIdx][curByte];
      if (uCode >= 0) {
      } else if (uCode === UNASSIGNED) {
        i2 = seqStart;
        uCode = this.defaultCharUnicode.charCodeAt(0);
      } else if (uCode === GB18030_CODE) {
        var curSeq = seqStart >= 0 ? buf.slice(seqStart, i2 + 1) : prevBuf.slice(seqStart + prevBufOffset, i2 + 1 + prevBufOffset);
        var ptr = (curSeq[0] - 129) * 12600 + (curSeq[1] - 48) * 1260 + (curSeq[2] - 129) * 10 + (curSeq[3] - 48);
        var idx = findIdx(this.gb18030.gbChars, ptr);
        uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
      } else if (uCode <= NODE_START) {
        nodeIdx = NODE_START - uCode;
        continue;
      } else if (uCode <= SEQ_START) {
        var seq = this.decodeTableSeq[SEQ_START - uCode];
        for (var k = 0; k < seq.length - 1; k++) {
          uCode = seq[k];
          newBuf[j++] = uCode & 255;
          newBuf[j++] = uCode >> 8;
        }
        uCode = seq[seq.length - 1];
      } else
        throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);
      if (uCode > 65535) {
        uCode -= 65536;
        var uCodeLead = 55296 + Math.floor(uCode / 1024);
        newBuf[j++] = uCodeLead & 255;
        newBuf[j++] = uCodeLead >> 8;
        uCode = 56320 + uCode % 1024;
      }
      newBuf[j++] = uCode & 255;
      newBuf[j++] = uCode >> 8;
      nodeIdx = 0;
      seqStart = i2 + 1;
    }
    this.nodeIdx = nodeIdx;
    this.prevBuf = seqStart >= 0 ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);
    return newBuf.slice(0, j).toString("ucs2");
  };
  DBCSDecoder.prototype.end = function() {
    var ret = "";
    while (this.prevBuf.length > 0) {
      ret += this.defaultCharUnicode;
      var buf = this.prevBuf.slice(1);
      this.prevBuf = Buffer2.alloc(0);
      this.nodeIdx = 0;
      if (buf.length > 0)
        ret += this.write(buf);
    }
    this.nodeIdx = 0;
    return ret;
  };
  function findIdx(table, val) {
    if (table[0] > val)
      return -1;
    var l = 0, r = table.length;
    while (l < r - 1) {
      var mid = l + Math.floor((r - l + 1) / 2);
      if (table[mid] <= val)
        l = mid;
      else
        r = mid;
    }
    return l;
  }
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/tables/shiftjis.json
var require_shiftjis = __commonJS((exports2, module3) => {
  module3.exports = [
    ["0", "\0", 128],
    ["a1", "｡", 62],
    ["8140", "　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈", 9, "＋－±×"],
    ["8180", "÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"],
    ["81b8", "∈∋⊆⊇⊂⊃∪∩"],
    ["81c8", "∧∨￢⇒⇔∀∃"],
    ["81da", "∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],
    ["81f0", "Å‰♯♭♪†‡¶"],
    ["81fc", "◯"],
    ["824f", "０", 9],
    ["8260", "Ａ", 25],
    ["8281", "ａ", 25],
    ["829f", "ぁ", 82],
    ["8340", "ァ", 62],
    ["8380", "ム", 22],
    ["839f", "Α", 16, "Σ", 6],
    ["83bf", "α", 16, "σ", 6],
    ["8440", "А", 5, "ЁЖ", 25],
    ["8470", "а", 5, "ёж", 7],
    ["8480", "о", 17],
    ["849f", "─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],
    ["8740", "①", 19, "Ⅰ", 9],
    ["875f", "㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],
    ["877e", "㍻"],
    ["8780", "〝〟№㏍℡㊤", 4, "㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],
    ["889f", "亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],
    ["8940", "院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"],
    ["8980", "園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],
    ["8a40", "魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"],
    ["8a80", "橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],
    ["8b40", "機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"],
    ["8b80", "朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],
    ["8c40", "掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"],
    ["8c80", "劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],
    ["8d40", "后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"],
    ["8d80", "項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],
    ["8e40", "察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"],
    ["8e80", "死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],
    ["8f40", "宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"],
    ["8f80", "準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],
    ["9040", "拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"],
    ["9080", "逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],
    ["9140", "繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"],
    ["9180", "操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],
    ["9240", "叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"],
    ["9280", "逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],
    ["9340", "邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"],
    ["9380", "凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],
    ["9440", "如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"],
    ["9480", "楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],
    ["9540", "鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"],
    ["9580", "斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],
    ["9640", "法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"],
    ["9680", "摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],
    ["9740", "諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"],
    ["9780", "沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],
    ["9840", "蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],
    ["989f", "弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],
    ["9940", "僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"],
    ["9980", "凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],
    ["9a40", "咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"],
    ["9a80", "噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],
    ["9b40", "奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"],
    ["9b80", "它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],
    ["9c40", "廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"],
    ["9c80", "怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],
    ["9d40", "戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"],
    ["9d80", "捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],
    ["9e40", "曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"],
    ["9e80", "梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],
    ["9f40", "檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"],
    ["9f80", "麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],
    ["e040", "漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"],
    ["e080", "烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],
    ["e140", "瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"],
    ["e180", "痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],
    ["e240", "磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"],
    ["e280", "窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],
    ["e340", "紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"],
    ["e380", "縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],
    ["e440", "隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"],
    ["e480", "艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],
    ["e540", "蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"],
    ["e580", "蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],
    ["e640", "襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"],
    ["e680", "諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],
    ["e740", "蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"],
    ["e780", "轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],
    ["e840", "錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"],
    ["e880", "閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],
    ["e940", "顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"],
    ["e980", "騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],
    ["ea40", "鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"],
    ["ea80", "黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"],
    ["ed40", "纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"],
    ["ed80", "塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],
    ["ee40", "犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"],
    ["ee80", "蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],
    ["eeef", "ⅰ", 9, "￢￤＇＂"],
    ["f040", "", 62],
    ["f080", "", 124],
    ["f140", "", 62],
    ["f180", "", 124],
    ["f240", "", 62],
    ["f280", "", 124],
    ["f340", "", 62],
    ["f380", "", 124],
    ["f440", "", 62],
    ["f480", "", 124],
    ["f540", "", 62],
    ["f580", "", 124],
    ["f640", "", 62],
    ["f680", "", 124],
    ["f740", "", 62],
    ["f780", "", 124],
    ["f840", "", 62],
    ["f880", "", 124],
    ["f940", ""],
    ["fa40", "ⅰ", 9, "Ⅰ", 9, "￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"],
    ["fa80", "兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"],
    ["fb40", "涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"],
    ["fb80", "祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"],
    ["fc40", "髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"]
  ];
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/tables/eucjp.json
var require_eucjp = __commonJS((exports2, module3) => {
  module3.exports = [
    ["0", "\0", 127],
    ["8ea1", "｡", 62],
    ["a1a1", "　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈", 9, "＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"],
    ["a2a1", "◆□■△▲▽▼※〒→←↑↓〓"],
    ["a2ba", "∈∋⊆⊇⊂⊃∪∩"],
    ["a2ca", "∧∨￢⇒⇔∀∃"],
    ["a2dc", "∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"],
    ["a2f2", "Å‰♯♭♪†‡¶"],
    ["a2fe", "◯"],
    ["a3b0", "０", 9],
    ["a3c1", "Ａ", 25],
    ["a3e1", "ａ", 25],
    ["a4a1", "ぁ", 82],
    ["a5a1", "ァ", 85],
    ["a6a1", "Α", 16, "Σ", 6],
    ["a6c1", "α", 16, "σ", 6],
    ["a7a1", "А", 5, "ЁЖ", 25],
    ["a7d1", "а", 5, "ёж", 25],
    ["a8a1", "─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"],
    ["ada1", "①", 19, "Ⅰ", 9],
    ["adc0", "㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"],
    ["addf", "㍻〝〟№㏍℡㊤", 4, "㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"],
    ["b0a1", "亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"],
    ["b1a1", "院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"],
    ["b2a1", "押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"],
    ["b3a1", "魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"],
    ["b4a1", "粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"],
    ["b5a1", "機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"],
    ["b6a1", "供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"],
    ["b7a1", "掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"],
    ["b8a1", "検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"],
    ["b9a1", "后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"],
    ["baa1", "此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"],
    ["bba1", "察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"],
    ["bca1", "次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"],
    ["bda1", "宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"],
    ["bea1", "勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"],
    ["bfa1", "拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"],
    ["c0a1", "澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"],
    ["c1a1", "繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"],
    ["c2a1", "臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"],
    ["c3a1", "叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"],
    ["c4a1", "帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"],
    ["c5a1", "邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"],
    ["c6a1", "董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"],
    ["c7a1", "如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"],
    ["c8a1", "函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"],
    ["c9a1", "鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"],
    ["caa1", "福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"],
    ["cba1", "法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"],
    ["cca1", "漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"],
    ["cda1", "諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"],
    ["cea1", "痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"],
    ["cfa1", "蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"],
    ["d0a1", "弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"],
    ["d1a1", "僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"],
    ["d2a1", "辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"],
    ["d3a1", "咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"],
    ["d4a1", "圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"],
    ["d5a1", "奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"],
    ["d6a1", "屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"],
    ["d7a1", "廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"],
    ["d8a1", "悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"],
    ["d9a1", "戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"],
    ["daa1", "據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"],
    ["dba1", "曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"],
    ["dca1", "棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"],
    ["dda1", "檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"],
    ["dea1", "沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"],
    ["dfa1", "漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"],
    ["e0a1", "燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"],
    ["e1a1", "瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"],
    ["e2a1", "癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"],
    ["e3a1", "磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"],
    ["e4a1", "筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"],
    ["e5a1", "紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"],
    ["e6a1", "罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"],
    ["e7a1", "隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"],
    ["e8a1", "茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"],
    ["e9a1", "蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"],
    ["eaa1", "蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"],
    ["eba1", "襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"],
    ["eca1", "譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"],
    ["eda1", "蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"],
    ["eea1", "遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"],
    ["efa1", "錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"],
    ["f0a1", "陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"],
    ["f1a1", "顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"],
    ["f2a1", "髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"],
    ["f3a1", "鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"],
    ["f4a1", "堯槇遙瑤凜熙"],
    ["f9a1", "纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"],
    ["faa1", "忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"],
    ["fba1", "犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"],
    ["fca1", "釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"],
    ["fcf1", "ⅰ", 9, "￢￤＇＂"],
    ["8fa2af", "˘ˇ¸˙˝¯˛˚～΄΅"],
    ["8fa2c2", "¡¦¿"],
    ["8fa2eb", "ºª©®™¤№"],
    ["8fa6e1", "ΆΈΉΊΪ"],
    ["8fa6e7", "Ό"],
    ["8fa6e9", "ΎΫ"],
    ["8fa6ec", "Ώ"],
    ["8fa6f1", "άέήίϊΐόςύϋΰώ"],
    ["8fa7c2", "Ђ", 10, "ЎЏ"],
    ["8fa7f2", "ђ", 10, "ўџ"],
    ["8fa9a1", "ÆĐ"],
    ["8fa9a4", "Ħ"],
    ["8fa9a6", "Ĳ"],
    ["8fa9a8", "ŁĿ"],
    ["8fa9ab", "ŊØŒ"],
    ["8fa9af", "ŦÞ"],
    ["8fa9c1", "æđðħıĳĸłŀŉŋøœßŧþ"],
    ["8faaa1", "ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"],
    ["8faaba", "ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"],
    ["8faba1", "áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"],
    ["8fabbd", "ġĥíìïîǐ"],
    ["8fabc5", "īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"],
    ["8fb0a1", "丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"],
    ["8fb1a1", "侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"],
    ["8fb2a1", "傒傓傔傖傛傜傞", 4, "傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"],
    ["8fb3a1", "凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"],
    ["8fb4a1", "匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"],
    ["8fb5a1", "咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"],
    ["8fb6a1", "嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍", 5, "嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤", 4, "囱囫园"],
    ["8fb7a1", "囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭", 4, "坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"],
    ["8fb8a1", "堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"],
    ["8fb9a1", "奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"],
    ["8fbaa1", "嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖", 4, "寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"],
    ["8fbba1", "屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"],
    ["8fbca1", "巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪", 4, "幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"],
    ["8fbda1", "彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐", 4, "忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"],
    ["8fbea1", "悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐", 4, "愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"],
    ["8fbfa1", "懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"],
    ["8fc0a1", "捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"],
    ["8fc1a1", "擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"],
    ["8fc2a1", "昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"],
    ["8fc3a1", "杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮", 4, "桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"],
    ["8fc4a1", "棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"],
    ["8fc5a1", "樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"],
    ["8fc6a1", "歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"],
    ["8fc7a1", "泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"],
    ["8fc8a1", "湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"],
    ["8fc9a1", "濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔", 4, "炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃", 4, "焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"],
    ["8fcaa1", "煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"],
    ["8fcba1", "狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"],
    ["8fcca1", "珿琀琁琄琇琊琑琚琛琤琦琨", 9, "琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"],
    ["8fcda1", "甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹", 5, "疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"],
    ["8fcea1", "瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢", 6, "皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"],
    ["8fcfa1", "睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"],
    ["8fd0a1", "碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"],
    ["8fd1a1", "秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"],
    ["8fd2a1", "笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙", 5],
    ["8fd3a1", "籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"],
    ["8fd4a1", "綞綦綧綪綳綶綷綹緂", 4, "緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"],
    ["8fd5a1", "罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"],
    ["8fd6a1", "胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"],
    ["8fd7a1", "艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"],
    ["8fd8a1", "荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"],
    ["8fd9a1", "蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏", 4, "蕖蕙蕜", 6, "蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"],
    ["8fdaa1", "藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠", 4, "虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"],
    ["8fdba1", "蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃", 6, "螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"],
    ["8fdca1", "蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊", 4, "裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"],
    ["8fdda1", "襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔", 4, "觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"],
    ["8fdea1", "誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂", 4, "譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"],
    ["8fdfa1", "貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"],
    ["8fe0a1", "踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"],
    ["8fe1a1", "轃轇轏轑", 4, "轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"],
    ["8fe2a1", "郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"],
    ["8fe3a1", "釂釃釅釓釔釗釙釚釞釤釥釩釪釬", 5, "釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵", 4, "鉻鉼鉽鉿銈銉銊銍銎銒銗"],
    ["8fe4a1", "銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿", 4, "鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"],
    ["8fe5a1", "鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉", 4, "鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"],
    ["8fe6a1", "镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"],
    ["8fe7a1", "霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"],
    ["8fe8a1", "頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱", 4, "餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"],
    ["8fe9a1", "馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿", 4],
    ["8feaa1", "鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪", 4, "魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"],
    ["8feba1", "鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦", 4, "鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"],
    ["8feca1", "鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"],
    ["8feda1", "黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃", 4, "齓齕齖齗齘齚齝齞齨齩齭", 4, "齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"]
  ];
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/tables/cp936.json
var require_cp936 = __commonJS((exports2, module3) => {
  module3.exports = [
    ["0", "\0", 127, "€"],
    ["8140", "丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪", 5, "乲乴", 9, "乿", 6, "亇亊"],
    ["8180", "亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂", 6, "伋伌伒", 4, "伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾", 4, "佄佅佇", 5, "佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"],
    ["8240", "侤侫侭侰", 4, "侶", 8, "俀俁係俆俇俈俉俋俌俍俒", 4, "俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿", 11],
    ["8280", "個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯", 10, "倻倽倿偀偁偂偄偅偆偉偊偋偍偐", 4, "偖偗偘偙偛偝", 7, "偦", 5, "偭", 8, "偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎", 20, "傤傦傪傫傭", 4, "傳", 6, "傼"],
    ["8340", "傽", 17, "僐", 5, "僗僘僙僛", 10, "僨僩僪僫僯僰僱僲僴僶", 4, "僼", 9, "儈"],
    ["8380", "儉儊儌", 5, "儓", 13, "儢", 28, "兂兇兊兌兎兏児兒兓兗兘兙兛兝", 4, "兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦", 4, "冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒", 5],
    ["8440", "凘凙凚凜凞凟凢凣凥", 5, "凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄", 5, "剋剎剏剒剓剕剗剘"],
    ["8480", "剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳", 9, "剾劀劃", 4, "劉", 6, "劑劒劔", 6, "劜劤劥劦劧劮劯劰労", 9, "勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務", 5, "勠勡勢勣勥", 10, "勱", 7, "勻勼勽匁匂匃匄匇匉匊匋匌匎"],
    ["8540", "匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯", 9, "匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"],
    ["8580", "厐", 4, "厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯", 6, "厷厸厹厺厼厽厾叀參", 4, "収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝", 4, "呣呥呧呩", 7, "呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"],
    ["8640", "咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠", 4, "哫哬哯哰哱哴", 5, "哻哾唀唂唃唄唅唈唊", 4, "唒唓唕", 5, "唜唝唞唟唡唥唦"],
    ["8680", "唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋", 4, "啑啒啓啔啗", 4, "啝啞啟啠啢啣啨啩啫啯", 5, "啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠", 6, "喨", 8, "喲喴営喸喺喼喿", 4, "嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗", 4, "嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸", 4, "嗿嘂嘃嘄嘅"],
    ["8740", "嘆嘇嘊嘋嘍嘐", 7, "嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀", 11, "噏", 4, "噕噖噚噛噝", 4],
    ["8780", "噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽", 7, "嚇", 6, "嚐嚑嚒嚔", 14, "嚤", 10, "嚰", 6, "嚸嚹嚺嚻嚽", 12, "囋", 8, "囕囖囘囙囜団囥", 5, "囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國", 6],
    ["8840", "園", 9, "圝圞圠圡圢圤圥圦圧圫圱圲圴", 4, "圼圽圿坁坃坄坅坆坈坉坋坒", 4, "坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"],
    ["8880", "垁垇垈垉垊垍", 4, "垔", 6, "垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹", 8, "埄", 6, "埌埍埐埑埓埖埗埛埜埞埡埢埣埥", 7, "埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥", 4, "堫", 4, "報堲堳場堶", 7],
    ["8940", "堾", 5, "塅", 6, "塎塏塐塒塓塕塖塗塙", 4, "塟", 5, "塦", 4, "塭", 16, "塿墂墄墆墇墈墊墋墌"],
    ["8980", "墍", 4, "墔", 4, "墛墜墝墠", 7, "墪", 17, "墽墾墿壀壂壃壄壆", 10, "壒壓壔壖", 13, "壥", 5, "壭壯壱売壴壵壷壸壺", 7, "夃夅夆夈", 4, "夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"],
    ["8a40", "夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛", 4, "奡奣奤奦", 12, "奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"],
    ["8a80", "妧妬妭妰妱妳", 5, "妺妼妽妿", 6, "姇姈姉姌姍姎姏姕姖姙姛姞", 4, "姤姦姧姩姪姫姭", 11, "姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪", 6, "娳娵娷", 4, "娽娾娿婁", 4, "婇婈婋", 9, "婖婗婘婙婛", 5],
    ["8b40", "婡婣婤婥婦婨婩婫", 8, "婸婹婻婼婽婾媀", 17, "媓", 6, "媜", 13, "媫媬"],
    ["8b80", "媭", 4, "媴媶媷媹", 4, "媿嫀嫃", 5, "嫊嫋嫍", 4, "嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬", 4, "嫲", 22, "嬊", 11, "嬘", 25, "嬳嬵嬶嬸", 7, "孁", 6],
    ["8c40", "孈", 7, "孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"],
    ["8c80", "寑寔", 8, "寠寢寣實寧審", 4, "寯寱", 6, "寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧", 6, "屰屲", 6, "屻屼屽屾岀岃", 4, "岉岊岋岎岏岒岓岕岝", 4, "岤", 4],
    ["8d40", "岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅", 5, "峌", 5, "峓", 5, "峚", 6, "峢峣峧峩峫峬峮峯峱", 9, "峼", 4],
    ["8d80", "崁崄崅崈", 5, "崏", 4, "崕崗崘崙崚崜崝崟", 4, "崥崨崪崫崬崯", 4, "崵", 7, "崿", 7, "嵈嵉嵍", 10, "嵙嵚嵜嵞", 10, "嵪嵭嵮嵰嵱嵲嵳嵵", 12, "嶃", 21, "嶚嶛嶜嶞嶟嶠"],
    ["8e40", "嶡", 21, "嶸", 12, "巆", 6, "巎", 12, "巜巟巠巣巤巪巬巭"],
    ["8e80", "巰巵巶巸", 4, "巿帀帄帇帉帊帋帍帎帒帓帗帞", 7, "帨", 4, "帯帰帲", 4, "帹帺帾帿幀幁幃幆", 5, "幍", 6, "幖", 4, "幜幝幟幠幣", 14, "幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨", 4, "庮", 4, "庴庺庻庼庽庿", 6],
    ["8f40", "廆廇廈廋", 5, "廔廕廗廘廙廚廜", 11, "廩廫", 8, "廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"],
    ["8f80", "弨弫弬弮弰弲", 6, "弻弽弾弿彁", 14, "彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢", 5, "復徫徬徯", 5, "徶徸徹徺徻徾", 4, "忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"],
    ["9040", "怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰", 4, "怶", 4, "怽怾恀恄", 6, "恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"],
    ["9080", "悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽", 7, "惇惈惉惌", 4, "惒惓惔惖惗惙惛惞惡", 4, "惪惱惲惵惷惸惻", 4, "愂愃愄愅愇愊愋愌愐", 4, "愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬", 18, "慀", 6],
    ["9140", "慇慉態慍慏慐慒慓慔慖", 6, "慞慟慠慡慣慤慥慦慩", 6, "慱慲慳慴慶慸", 18, "憌憍憏", 4, "憕"],
    ["9180", "憖", 6, "憞", 8, "憪憫憭", 9, "憸", 5, "憿懀懁懃", 4, "應懌", 4, "懓懕", 16, "懧", 13, "懶", 8, "戀", 5, "戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸", 4, "扂扄扅扆扊"],
    ["9240", "扏扐払扖扗扙扚扜", 6, "扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋", 5, "抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"],
    ["9280", "拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳", 5, "挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖", 7, "捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙", 6, "採掤掦掫掯掱掲掵掶掹掻掽掿揀"],
    ["9340", "揁揂揃揅揇揈揊揋揌揑揓揔揕揗", 6, "揟揢揤", 4, "揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆", 4, "損搎搑搒搕", 5, "搝搟搢搣搤"],
    ["9380", "搥搧搨搩搫搮", 5, "搵", 4, "搻搼搾摀摂摃摉摋", 6, "摓摕摖摗摙", 4, "摟", 7, "摨摪摫摬摮", 9, "摻", 6, "撃撆撈", 8, "撓撔撗撘撚撛撜撝撟", 4, "撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆", 6, "擏擑擓擔擕擖擙據"],
    ["9440", "擛擜擝擟擠擡擣擥擧", 24, "攁", 7, "攊", 7, "攓", 4, "攙", 8],
    ["9480", "攢攣攤攦", 4, "攬攭攰攱攲攳攷攺攼攽敀", 4, "敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數", 14, "斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱", 7, "斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘", 7, "旡旣旤旪旫"],
    ["9540", "旲旳旴旵旸旹旻", 4, "昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷", 4, "昽昿晀時晄", 6, "晍晎晐晑晘"],
    ["9580", "晙晛晜晝晞晠晢晣晥晧晩", 4, "晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘", 4, "暞", 8, "暩", 4, "暯", 4, "暵暶暷暸暺暻暼暽暿", 25, "曚曞", 7, "曧曨曪", 5, "曱曵曶書曺曻曽朁朂會"],
    ["9640", "朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠", 5, "朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗", 4, "杝杢杣杤杦杧杫杬杮東杴杶"],
    ["9680", "杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹", 7, "柂柅", 9, "柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵", 7, "柾栁栂栃栄栆栍栐栒栔栕栘", 4, "栞栟栠栢", 6, "栫", 6, "栴栵栶栺栻栿桇桋桍桏桒桖", 5],
    ["9740", "桜桝桞桟桪桬", 7, "桵桸", 8, "梂梄梇", 7, "梐梑梒梔梕梖梘", 9, "梣梤梥梩梪梫梬梮梱梲梴梶梷梸"],
    ["9780", "梹", 6, "棁棃", 5, "棊棌棎棏棐棑棓棔棖棗棙棛", 4, "棡棢棤", 9, "棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆", 4, "椌椏椑椓", 11, "椡椢椣椥", 7, "椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃", 16, "楕楖楘楙楛楜楟"],
    ["9840", "楡楢楤楥楧楨楩楪楬業楯楰楲", 4, "楺楻楽楾楿榁榃榅榊榋榌榎", 5, "榖榗榙榚榝", 9, "榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"],
    ["9880", "榾榿槀槂", 7, "構槍槏槑槒槓槕", 5, "槜槝槞槡", 11, "槮槯槰槱槳", 9, "槾樀", 9, "樋", 11, "標", 5, "樠樢", 5, "権樫樬樭樮樰樲樳樴樶", 6, "樿", 4, "橅橆橈", 7, "橑", 6, "橚"],
    ["9940", "橜", 4, "橢橣橤橦", 10, "橲", 6, "橺橻橽橾橿檁檂檃檅", 8, "檏檒", 4, "檘", 7, "檡", 5],
    ["9980", "檧檨檪檭", 114, "欥欦欨", 6],
    ["9a40", "欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍", 11, "歚", 7, "歨歩歫", 13, "歺歽歾歿殀殅殈"],
    ["9a80", "殌殎殏殐殑殔殕殗殘殙殜", 4, "殢", 7, "殫", 7, "殶殸", 6, "毀毃毄毆", 4, "毌毎毐毑毘毚毜", 4, "毢", 7, "毬毭毮毰毱毲毴毶毷毸毺毻毼毾", 6, "氈", 4, "氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋", 4, "汑汒汓汖汘"],
    ["9b40", "汙汚汢汣汥汦汧汫", 4, "汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"],
    ["9b80", "泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟", 5, "洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽", 4, "涃涄涆涇涊涋涍涏涐涒涖", 4, "涜涢涥涬涭涰涱涳涴涶涷涹", 5, "淁淂淃淈淉淊"],
    ["9c40", "淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽", 7, "渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"],
    ["9c80", "渶渷渹渻", 7, "湅", 7, "湏湐湑湒湕湗湙湚湜湝湞湠", 10, "湬湭湯", 14, "満溁溂溄溇溈溊", 4, "溑", 6, "溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪", 5],
    ["9d40", "滰滱滲滳滵滶滷滸滺", 7, "漃漄漅漇漈漊", 4, "漐漑漒漖", 9, "漡漢漣漥漦漧漨漬漮漰漲漴漵漷", 6, "漿潀潁潂"],
    ["9d80", "潃潄潅潈潉潊潌潎", 9, "潙潚潛潝潟潠潡潣潤潥潧", 5, "潯潰潱潳潵潶潷潹潻潽", 6, "澅澆澇澊澋澏", 12, "澝澞澟澠澢", 4, "澨", 10, "澴澵澷澸澺", 5, "濁濃", 5, "濊", 6, "濓", 10, "濟濢濣濤濥"],
    ["9e40", "濦", 7, "濰", 32, "瀒", 7, "瀜", 6, "瀤", 6],
    ["9e80", "瀫", 9, "瀶瀷瀸瀺", 17, "灍灎灐", 13, "灟", 11, "灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞", 12, "炰炲炴炵炶為炾炿烄烅烆烇烉烋", 12, "烚"],
    ["9f40", "烜烝烞烠烡烢烣烥烪烮烰", 6, "烸烺烻烼烾", 10, "焋", 4, "焑焒焔焗焛", 10, "焧", 7, "焲焳焴"],
    ["9f80", "焵焷", 13, "煆煇煈煉煋煍煏", 12, "煝煟", 4, "煥煩", 4, "煯煰煱煴煵煶煷煹煻煼煾", 5, "熅", 4, "熋熌熍熎熐熑熒熓熕熖熗熚", 4, "熡", 6, "熩熪熫熭", 5, "熴熶熷熸熺", 8, "燄", 9, "燏", 4],
    ["a040", "燖", 9, "燡燢燣燤燦燨", 5, "燯", 9, "燺", 11, "爇", 19],
    ["a080", "爛爜爞", 9, "爩爫爭爮爯爲爳爴爺爼爾牀", 6, "牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅", 4, "犌犎犐犑犓", 11, "犠", 11, "犮犱犲犳犵犺", 6, "狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"],
    ["a1a1", "　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈", 7, "〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"],
    ["a2a1", "ⅰ", 9],
    ["a2b1", "⒈", 19, "⑴", 19, "①", 9],
    ["a2e5", "㈠", 9],
    ["a2f1", "Ⅰ", 11],
    ["a3a1", "！＂＃￥％", 88, "￣"],
    ["a4a1", "ぁ", 82],
    ["a5a1", "ァ", 85],
    ["a6a1", "Α", 16, "Σ", 6],
    ["a6c1", "α", 16, "σ", 6],
    ["a6e0", "︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"],
    ["a6ee", "︻︼︷︸︱"],
    ["a6f4", "︳︴"],
    ["a7a1", "А", 5, "ЁЖ", 25],
    ["a7d1", "а", 5, "ёж", 25],
    ["a840", "ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═", 35, "▁", 6],
    ["a880", "█", 7, "▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"],
    ["a8a1", "āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"],
    ["a8bd", "ńň"],
    ["a8c0", "ɡ"],
    ["a8c5", "ㄅ", 36],
    ["a940", "〡", 8, "㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"],
    ["a959", "℡㈱"],
    ["a95c", "‐"],
    ["a960", "ー゛゜ヽヾ〆ゝゞ﹉", 9, "﹔﹕﹖﹗﹙", 8],
    ["a980", "﹢", 4, "﹨﹩﹪﹫"],
    ["a996", "〇"],
    ["a9a4", "─", 75],
    ["aa40", "狜狝狟狢", 5, "狪狫狵狶狹狽狾狿猀猂猄", 5, "猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀", 8],
    ["aa80", "獉獊獋獌獎獏獑獓獔獕獖獘", 7, "獡", 10, "獮獰獱"],
    ["ab40", "獲", 11, "獿", 4, "玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣", 5, "玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃", 4],
    ["ab80", "珋珌珎珒", 6, "珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳", 4],
    ["ac40", "珸", 10, "琄琇琈琋琌琍琎琑", 8, "琜", 5, "琣琤琧琩琫琭琯琱琲琷", 4, "琽琾琿瑀瑂", 11],
    ["ac80", "瑎", 6, "瑖瑘瑝瑠", 12, "瑮瑯瑱", 4, "瑸瑹瑺"],
    ["ad40", "瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑", 10, "璝璟", 7, "璪", 15, "璻", 12],
    ["ad80", "瓈", 9, "瓓", 8, "瓝瓟瓡瓥瓧", 6, "瓰瓱瓲"],
    ["ae40", "瓳瓵瓸", 6, "甀甁甂甃甅", 7, "甎甐甒甔甕甖甗甛甝甞甠", 4, "甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"],
    ["ae80", "畝", 7, "畧畨畩畫", 6, "畳畵當畷畺", 4, "疀疁疂疄疅疇"],
    ["af40", "疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦", 4, "疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"],
    ["af80", "瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"],
    ["b040", "癅", 6, "癎", 5, "癕癗", 4, "癝癟癠癡癢癤", 6, "癬癭癮癰", 7, "癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"],
    ["b080", "皜", 7, "皥", 8, "皯皰皳皵", 9, "盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"],
    ["b140", "盄盇盉盋盌盓盕盙盚盜盝盞盠", 4, "盦", 7, "盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎", 10, "眛眜眝眞眡眣眤眥眧眪眫"],
    ["b180", "眬眮眰", 4, "眹眻眽眾眿睂睄睅睆睈", 7, "睒", 7, "睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"],
    ["b240", "睝睞睟睠睤睧睩睪睭", 11, "睺睻睼瞁瞂瞃瞆", 5, "瞏瞐瞓", 11, "瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶", 4],
    ["b280", "瞼瞾矀", 12, "矎", 8, "矘矙矚矝", 4, "矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"],
    ["b340", "矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃", 5, "砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"],
    ["b380", "硛硜硞", 11, "硯", 7, "硸硹硺硻硽", 6, "场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"],
    ["b440", "碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨", 7, "碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚", 9],
    ["b480", "磤磥磦磧磩磪磫磭", 4, "磳磵磶磸磹磻", 5, "礂礃礄礆", 6, "础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"],
    ["b540", "礍", 5, "礔", 9, "礟", 4, "礥", 14, "礵", 4, "礽礿祂祃祄祅祇祊", 8, "祔祕祘祙祡祣"],
    ["b580", "祤祦祩祪祫祬祮祰", 6, "祹祻", 4, "禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"],
    ["b640", "禓", 6, "禛", 11, "禨", 10, "禴", 4, "禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙", 5, "秠秡秢秥秨秪"],
    ["b680", "秬秮秱", 6, "秹秺秼秾秿稁稄稅稇稈稉稊稌稏", 4, "稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"],
    ["b740", "稝稟稡稢稤", 14, "稴稵稶稸稺稾穀", 5, "穇", 9, "穒", 4, "穘", 16],
    ["b780", "穩", 6, "穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"],
    ["b840", "窣窤窧窩窪窫窮", 4, "窴", 10, "竀", 10, "竌", 9, "竗竘竚竛竜竝竡竢竤竧", 5, "竮竰竱竲竳"],
    ["b880", "竴", 4, "竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"],
    ["b940", "笯笰笲笴笵笶笷笹笻笽笿", 5, "筆筈筊筍筎筓筕筗筙筜筞筟筡筣", 10, "筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆", 6, "箎箏"],
    ["b980", "箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹", 7, "篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"],
    ["ba40", "篅篈築篊篋篍篎篏篐篒篔", 4, "篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲", 4, "篸篹篺篻篽篿", 7, "簈簉簊簍簎簐", 5, "簗簘簙"],
    ["ba80", "簚", 4, "簠", 5, "簨簩簫", 12, "簹", 5, "籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"],
    ["bb40", "籃", 9, "籎", 36, "籵", 5, "籾", 9],
    ["bb80", "粈粊", 6, "粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴", 4, "粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"],
    ["bc40", "粿糀糂糃糄糆糉糋糎", 6, "糘糚糛糝糞糡", 6, "糩", 5, "糰", 7, "糹糺糼", 13, "紋", 5],
    ["bc80", "紑", 14, "紡紣紤紥紦紨紩紪紬紭紮細", 6, "肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"],
    ["bd40", "紷", 54, "絯", 7],
    ["bd80", "絸", 32, "健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"],
    ["be40", "継", 12, "綧", 6, "綯", 42],
    ["be80", "線", 32, "尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"],
    ["bf40", "緻", 62],
    ["bf80", "縺縼", 4, "繂", 4, "繈", 21, "俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"],
    ["c040", "繞", 35, "纃", 23, "纜纝纞"],
    ["c080", "纮纴纻纼绖绤绬绹缊缐缞缷缹缻", 6, "罃罆", 9, "罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"],
    ["c140", "罖罙罛罜罝罞罠罣", 4, "罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂", 7, "羋羍羏", 4, "羕", 4, "羛羜羠羢羣羥羦羨", 6, "羱"],
    ["c180", "羳", 4, "羺羻羾翀翂翃翄翆翇翈翉翋翍翏", 4, "翖翗翙", 5, "翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"],
    ["c240", "翤翧翨翪翫翬翭翯翲翴", 6, "翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫", 5, "耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"],
    ["c280", "聙聛", 13, "聫", 5, "聲", 11, "隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"],
    ["c340", "聾肁肂肅肈肊肍", 5, "肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇", 4, "胏", 6, "胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"],
    ["c380", "脌脕脗脙脛脜脝脟", 12, "脭脮脰脳脴脵脷脹", 4, "脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"],
    ["c440", "腀", 5, "腇腉腍腎腏腒腖腗腘腛", 4, "腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃", 4, "膉膋膌膍膎膐膒", 5, "膙膚膞", 4, "膤膥"],
    ["c480", "膧膩膫", 7, "膴", 5, "膼膽膾膿臄臅臇臈臉臋臍", 6, "摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"],
    ["c540", "臔", 14, "臤臥臦臨臩臫臮", 4, "臵", 5, "臽臿舃與", 4, "舎舏舑舓舕", 5, "舝舠舤舥舦舧舩舮舲舺舼舽舿"],
    ["c580", "艀艁艂艃艅艆艈艊艌艍艎艐", 7, "艙艛艜艝艞艠", 7, "艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"],
    ["c640", "艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"],
    ["c680", "苺苼", 4, "茊茋茍茐茒茓茖茘茙茝", 9, "茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"],
    ["c740", "茾茿荁荂荄荅荈荊", 4, "荓荕", 4, "荝荢荰", 6, "荹荺荾", 6, "莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡", 6, "莬莭莮"],
    ["c780", "莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"],
    ["c840", "菮華菳", 4, "菺菻菼菾菿萀萂萅萇萈萉萊萐萒", 5, "萙萚萛萞", 5, "萩", 7, "萲", 5, "萹萺萻萾", 7, "葇葈葉"],
    ["c880", "葊", 6, "葒", 4, "葘葝葞葟葠葢葤", 4, "葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"],
    ["c940", "葽", 4, "蒃蒄蒅蒆蒊蒍蒏", 7, "蒘蒚蒛蒝蒞蒟蒠蒢", 12, "蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"],
    ["c980", "蓘", 4, "蓞蓡蓢蓤蓧", 4, "蓭蓮蓯蓱", 10, "蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"],
    ["ca40", "蔃", 8, "蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢", 8, "蔭", 9, "蔾", 4, "蕄蕅蕆蕇蕋", 10],
    ["ca80", "蕗蕘蕚蕛蕜蕝蕟", 4, "蕥蕦蕧蕩", 8, "蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"],
    ["cb40", "薂薃薆薈", 6, "薐", 10, "薝", 6, "薥薦薧薩薫薬薭薱", 5, "薸薺", 6, "藂", 6, "藊", 4, "藑藒"],
    ["cb80", "藔藖", 5, "藝", 6, "藥藦藧藨藪", 14, "恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"],
    ["cc40", "藹藺藼藽藾蘀", 4, "蘆", 10, "蘒蘓蘔蘕蘗", 15, "蘨蘪", 13, "蘹蘺蘻蘽蘾蘿虀"],
    ["cc80", "虁", 11, "虒虓處", 4, "虛虜虝號虠虡虣", 7, "獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"],
    ["cd40", "虭虯虰虲", 6, "蚃", 6, "蚎", 4, "蚔蚖", 5, "蚞", 4, "蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻", 4, "蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"],
    ["cd80", "蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"],
    ["ce40", "蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀", 6, "蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚", 5, "蝡蝢蝦", 7, "蝯蝱蝲蝳蝵"],
    ["ce80", "蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎", 4, "螔螕螖螘", 6, "螠", 4, "巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"],
    ["cf40", "螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁", 4, "蟇蟈蟉蟌", 4, "蟔", 6, "蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯", 9],
    ["cf80", "蟺蟻蟼蟽蟿蠀蠁蠂蠄", 5, "蠋", 7, "蠔蠗蠘蠙蠚蠜", 4, "蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"],
    ["d040", "蠤", 13, "蠳", 5, "蠺蠻蠽蠾蠿衁衂衃衆", 5, "衎", 5, "衕衖衘衚", 6, "衦衧衪衭衯衱衳衴衵衶衸衹衺"],
    ["d080", "衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗", 4, "袝", 4, "袣袥", 5, "小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"],
    ["d140", "袬袮袯袰袲", 4, "袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚", 4, "裠裡裦裧裩", 6, "裲裵裶裷裺裻製裿褀褁褃", 5],
    ["d180", "褉褋", 4, "褑褔", 4, "褜", 4, "褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"],
    ["d240", "褸", 8, "襂襃襅", 24, "襠", 5, "襧", 19, "襼"],
    ["d280", "襽襾覀覂覄覅覇", 26, "摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"],
    ["d340", "覢", 30, "觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴", 6],
    ["d380", "觻", 4, "訁", 5, "計", 21, "印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"],
    ["d440", "訞", 31, "訿", 8, "詉", 21],
    ["d480", "詟", 25, "詺", 6, "浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"],
    ["d540", "誁", 7, "誋", 7, "誔", 46],
    ["d580", "諃", 32, "铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"],
    ["d640", "諤", 34, "謈", 27],
    ["d680", "謤謥謧", 30, "帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"],
    ["d740", "譆", 31, "譧", 4, "譭", 25],
    ["d780", "讇", 24, "讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"],
    ["d840", "谸", 8, "豂豃豄豅豈豊豋豍", 7, "豖豗豘豙豛", 5, "豣", 6, "豬", 6, "豴豵豶豷豻", 6, "貃貄貆貇"],
    ["d880", "貈貋貍", 6, "貕貖貗貙", 20, "亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"],
    ["d940", "貮", 62],
    ["d980", "賭", 32, "佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"],
    ["da40", "贎", 14, "贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸", 8, "趂趃趆趇趈趉趌", 4, "趒趓趕", 9, "趠趡"],
    ["da80", "趢趤", 12, "趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"],
    ["db40", "跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾", 6, "踆踇踈踋踍踎踐踑踒踓踕", 7, "踠踡踤", 4, "踫踭踰踲踳踴踶踷踸踻踼踾"],
    ["db80", "踿蹃蹅蹆蹌", 4, "蹓", 5, "蹚", 11, "蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"],
    ["dc40", "蹳蹵蹷", 4, "蹽蹾躀躂躃躄躆躈", 6, "躑躒躓躕", 6, "躝躟", 11, "躭躮躰躱躳", 6, "躻", 7],
    ["dc80", "軃", 10, "軏", 21, "堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"],
    ["dd40", "軥", 62],
    ["dd80", "輤", 32, "荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"],
    ["de40", "轅", 32, "轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"],
    ["de80", "迉", 4, "迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"],
    ["df40", "這逜連逤逥逧", 5, "逰", 4, "逷逹逺逽逿遀遃遅遆遈", 4, "過達違遖遙遚遜", 5, "遤遦遧適遪遫遬遯", 4, "遶", 6, "遾邁"],
    ["df80", "還邅邆邇邉邊邌", 4, "邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"],
    ["e040", "郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅", 19, "鄚鄛鄜"],
    ["e080", "鄝鄟鄠鄡鄤", 10, "鄰鄲", 6, "鄺", 8, "酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"],
    ["e140", "酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀", 4, "醆醈醊醎醏醓", 6, "醜", 5, "醤", 5, "醫醬醰醱醲醳醶醷醸醹醻"],
    ["e180", "醼", 10, "釈釋釐釒", 9, "針", 8, "帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"],
    ["e240", "釦", 62],
    ["e280", "鈥", 32, "狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧", 5, "饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"],
    ["e340", "鉆", 45, "鉵", 16],
    ["e380", "銆", 7, "銏", 24, "恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"],
    ["e440", "銨", 5, "銯", 24, "鋉", 31],
    ["e480", "鋩", 32, "洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"],
    ["e540", "錊", 51, "錿", 10],
    ["e580", "鍊", 31, "鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"],
    ["e640", "鍬", 34, "鎐", 27],
    ["e680", "鎬", 29, "鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"],
    ["e740", "鏎", 7, "鏗", 54],
    ["e780", "鐎", 32, "纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡", 6, "缪缫缬缭缯", 4, "缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"],
    ["e840", "鐯", 14, "鐿", 43, "鑬鑭鑮鑯"],
    ["e880", "鑰", 20, "钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"],
    ["e940", "锧锳锽镃镈镋镕镚镠镮镴镵長", 7, "門", 42],
    ["e980", "閫", 32, "椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"],
    ["ea40", "闌", 27, "闬闿阇阓阘阛阞阠阣", 6, "阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"],
    ["ea80", "陘陙陚陜陝陞陠陣陥陦陫陭", 4, "陳陸", 12, "隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"],
    ["eb40", "隌階隑隒隓隕隖隚際隝", 9, "隨", 7, "隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖", 9, "雡", 6, "雫"],
    ["eb80", "雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗", 4, "霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"],
    ["ec40", "霡", 8, "霫霬霮霯霱霳", 4, "霺霻霼霽霿", 18, "靔靕靗靘靚靜靝靟靣靤靦靧靨靪", 7],
    ["ec80", "靲靵靷", 4, "靽", 7, "鞆", 4, "鞌鞎鞏鞐鞓鞕鞖鞗鞙", 4, "臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"],
    ["ed40", "鞞鞟鞡鞢鞤", 6, "鞬鞮鞰鞱鞳鞵", 46],
    ["ed80", "韤韥韨韮", 4, "韴韷", 23, "怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"],
    ["ee40", "頏", 62],
    ["ee80", "顎", 32, "睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶", 4, "钼钽钿铄铈", 6, "铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"],
    ["ef40", "顯", 5, "颋颎颒颕颙颣風", 37, "飏飐飔飖飗飛飜飝飠", 4],
    ["ef80", "飥飦飩", 30, "铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒", 4, "锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤", 8, "镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"],
    ["f040", "餈", 4, "餎餏餑", 28, "餯", 26],
    ["f080", "饊", 9, "饖", 12, "饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨", 4, "鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦", 6, "鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"],
    ["f140", "馌馎馚", 10, "馦馧馩", 47],
    ["f180", "駙", 32, "瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"],
    ["f240", "駺", 62],
    ["f280", "騹", 32, "颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"],
    ["f340", "驚", 17, "驲骃骉骍骎骔骕骙骦骩", 6, "骲骳骴骵骹骻骽骾骿髃髄髆", 4, "髍髎髏髐髒體髕髖髗髙髚髛髜"],
    ["f380", "髝髞髠髢髣髤髥髧髨髩髪髬髮髰", 8, "髺髼", 6, "鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"],
    ["f440", "鬇鬉", 5, "鬐鬑鬒鬔", 10, "鬠鬡鬢鬤", 10, "鬰鬱鬳", 7, "鬽鬾鬿魀魆魊魋魌魎魐魒魓魕", 5],
    ["f480", "魛", 32, "簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"],
    ["f540", "魼", 62],
    ["f580", "鮻", 32, "酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"],
    ["f640", "鯜", 62],
    ["f680", "鰛", 32, "觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅", 5, "龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞", 5, "鲥", 4, "鲫鲭鲮鲰", 7, "鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"],
    ["f740", "鰼", 62],
    ["f780", "鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾", 4, "鳈鳉鳑鳒鳚鳛鳠鳡鳌", 4, "鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"],
    ["f840", "鳣", 62],
    ["f880", "鴢", 32],
    ["f940", "鵃", 62],
    ["f980", "鶂", 32],
    ["fa40", "鶣", 62],
    ["fa80", "鷢", 32],
    ["fb40", "鸃", 27, "鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴", 9, "麀"],
    ["fb80", "麁麃麄麅麆麉麊麌", 5, "麔", 8, "麞麠", 5, "麧麨麩麪"],
    ["fc40", "麫", 8, "麵麶麷麹麺麼麿", 4, "黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰", 8, "黺黽黿", 6],
    ["fc80", "鼆", 4, "鼌鼏鼑鼒鼔鼕鼖鼘鼚", 5, "鼡鼣", 8, "鼭鼮鼰鼱"],
    ["fd40", "鼲", 4, "鼸鼺鼼鼿", 4, "齅", 10, "齒", 38],
    ["fd80", "齹", 5, "龁龂龍", 11, "龜龝龞龡", 4, "郎凉秊裏隣"],
    ["fe40", "兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"]
  ];
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/tables/gbk-added.json
var require_gbk_added = __commonJS((exports2, module3) => {
  module3.exports = [
    ["a140", "", 62],
    ["a180", "", 32],
    ["a240", "", 62],
    ["a280", "", 32],
    ["a2ab", "", 5],
    ["a2e3", "€"],
    ["a2ef", ""],
    ["a2fd", ""],
    ["a340", "", 62],
    ["a380", "", 31, "　"],
    ["a440", "", 62],
    ["a480", "", 32],
    ["a4f4", "", 10],
    ["a540", "", 62],
    ["a580", "", 32],
    ["a5f7", "", 7],
    ["a640", "", 62],
    ["a680", "", 32],
    ["a6b9", "", 7],
    ["a6d9", "", 6],
    ["a6ec", ""],
    ["a6f3", ""],
    ["a6f6", "", 8],
    ["a740", "", 62],
    ["a780", "", 32],
    ["a7c2", "", 14],
    ["a7f2", "", 12],
    ["a896", "", 10],
    ["a8bc", ""],
    ["a8bf", "ǹ"],
    ["a8c1", ""],
    ["a8ea", "", 20],
    ["a958", ""],
    ["a95b", ""],
    ["a95d", ""],
    ["a989", "〾⿰", 11],
    ["a997", "", 12],
    ["a9f0", "", 14],
    ["aaa1", "", 93],
    ["aba1", "", 93],
    ["aca1", "", 93],
    ["ada1", "", 93],
    ["aea1", "", 93],
    ["afa1", "", 93],
    ["d7fa", "", 4],
    ["f8a1", "", 93],
    ["f9a1", "", 93],
    ["faa1", "", 93],
    ["fba1", "", 93],
    ["fca1", "", 93],
    ["fda1", "", 93],
    ["fe50", "⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"],
    ["fe80", "䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓", 6, "䶮", 93]
  ];
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/tables/gb18030-ranges.json
var require_gb18030_ranges = __commonJS((exports2, module3) => {
  module3.exports = {uChars: [128, 165, 169, 178, 184, 216, 226, 235, 238, 244, 248, 251, 253, 258, 276, 284, 300, 325, 329, 334, 364, 463, 465, 467, 469, 471, 473, 475, 477, 506, 594, 610, 712, 716, 730, 930, 938, 962, 970, 1026, 1104, 1106, 8209, 8215, 8218, 8222, 8231, 8241, 8244, 8246, 8252, 8365, 8452, 8454, 8458, 8471, 8482, 8556, 8570, 8596, 8602, 8713, 8720, 8722, 8726, 8731, 8737, 8740, 8742, 8748, 8751, 8760, 8766, 8777, 8781, 8787, 8802, 8808, 8816, 8854, 8858, 8870, 8896, 8979, 9322, 9372, 9548, 9588, 9616, 9622, 9634, 9652, 9662, 9672, 9676, 9680, 9702, 9735, 9738, 9793, 9795, 11906, 11909, 11913, 11917, 11928, 11944, 11947, 11951, 11956, 11960, 11964, 11979, 12284, 12292, 12312, 12319, 12330, 12351, 12436, 12447, 12535, 12543, 12586, 12842, 12850, 12964, 13200, 13215, 13218, 13253, 13263, 13267, 13270, 13384, 13428, 13727, 13839, 13851, 14617, 14703, 14801, 14816, 14964, 15183, 15471, 15585, 16471, 16736, 17208, 17325, 17330, 17374, 17623, 17997, 18018, 18212, 18218, 18301, 18318, 18760, 18811, 18814, 18820, 18823, 18844, 18848, 18872, 19576, 19620, 19738, 19887, 40870, 59244, 59336, 59367, 59413, 59417, 59423, 59431, 59437, 59443, 59452, 59460, 59478, 59493, 63789, 63866, 63894, 63976, 63986, 64016, 64018, 64021, 64025, 64034, 64037, 64042, 65074, 65093, 65107, 65112, 65127, 65132, 65375, 65510, 65536], gbChars: [0, 36, 38, 45, 50, 81, 89, 95, 96, 100, 103, 104, 105, 109, 126, 133, 148, 172, 175, 179, 208, 306, 307, 308, 309, 310, 311, 312, 313, 341, 428, 443, 544, 545, 558, 741, 742, 749, 750, 805, 819, 820, 7922, 7924, 7925, 7927, 7934, 7943, 7944, 7945, 7950, 8062, 8148, 8149, 8152, 8164, 8174, 8236, 8240, 8262, 8264, 8374, 8380, 8381, 8384, 8388, 8390, 8392, 8393, 8394, 8396, 8401, 8406, 8416, 8419, 8424, 8437, 8439, 8445, 8482, 8485, 8496, 8521, 8603, 8936, 8946, 9046, 9050, 9063, 9066, 9076, 9092, 9100, 9108, 9111, 9113, 9131, 9162, 9164, 9218, 9219, 11329, 11331, 11334, 11336, 11346, 11361, 11363, 11366, 11370, 11372, 11375, 11389, 11682, 11686, 11687, 11692, 11694, 11714, 11716, 11723, 11725, 11730, 11736, 11982, 11989, 12102, 12336, 12348, 12350, 12384, 12393, 12395, 12397, 12510, 12553, 12851, 12962, 12973, 13738, 13823, 13919, 13933, 14080, 14298, 14585, 14698, 15583, 15847, 16318, 16434, 16438, 16481, 16729, 17102, 17122, 17315, 17320, 17402, 17418, 17859, 17909, 17911, 17915, 17916, 17936, 17939, 17961, 18664, 18703, 18814, 18962, 19043, 33469, 33470, 33471, 33484, 33485, 33490, 33497, 33501, 33505, 33513, 33520, 33536, 33550, 37845, 37921, 37948, 38029, 38038, 38064, 38065, 38066, 38069, 38075, 38076, 38078, 39108, 39109, 39113, 39114, 39115, 39116, 39265, 39394, 189e3]};
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/tables/cp949.json
var require_cp949 = __commonJS((exports2, module3) => {
  module3.exports = [
    ["0", "\0", 127],
    ["8141", "갂갃갅갆갋", 4, "갘갞갟갡갢갣갥", 6, "갮갲갳갴"],
    ["8161", "갵갶갷갺갻갽갾갿걁", 9, "걌걎", 5, "걕"],
    ["8181", "걖걗걙걚걛걝", 18, "걲걳걵걶걹걻", 4, "겂겇겈겍겎겏겑겒겓겕", 6, "겞겢", 5, "겫겭겮겱", 6, "겺겾겿곀곂곃곅곆곇곉곊곋곍", 7, "곖곘", 7, "곢곣곥곦곩곫곭곮곲곴곷", 4, "곾곿괁괂괃괅괇", 4, "괎괐괒괓"],
    ["8241", "괔괕괖괗괙괚괛괝괞괟괡", 7, "괪괫괮", 5],
    ["8261", "괶괷괹괺괻괽", 6, "굆굈굊", 5, "굑굒굓굕굖굗"],
    ["8281", "굙", 7, "굢굤", 7, "굮굯굱굲굷굸굹굺굾궀궃", 4, "궊궋궍궎궏궑", 10, "궞", 5, "궥", 17, "궸", 7, "귂귃귅귆귇귉", 6, "귒귔", 7, "귝귞귟귡귢귣귥", 18],
    ["8341", "귺귻귽귾긂", 5, "긊긌긎", 5, "긕", 7],
    ["8361", "긝", 18, "긲긳긵긶긹긻긼"],
    ["8381", "긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗", 4, "깞깢깣깤깦깧깪깫깭깮깯깱", 6, "깺깾", 5, "꺆", 5, "꺍", 46, "꺿껁껂껃껅", 6, "껎껒", 5, "껚껛껝", 8],
    ["8441", "껦껧껩껪껬껮", 5, "껵껶껷껹껺껻껽", 8],
    ["8461", "꼆꼉꼊꼋꼌꼎꼏꼑", 18],
    ["8481", "꼤", 7, "꼮꼯꼱꼳꼵", 6, "꼾꽀꽄꽅꽆꽇꽊", 5, "꽑", 10, "꽞", 5, "꽦", 18, "꽺", 5, "꾁꾂꾃꾅꾆꾇꾉", 6, "꾒꾓꾔꾖", 5, "꾝", 26, "꾺꾻꾽꾾"],
    ["8541", "꾿꿁", 5, "꿊꿌꿏", 4, "꿕", 6, "꿝", 4],
    ["8561", "꿢", 5, "꿪", 5, "꿲꿳꿵꿶꿷꿹", 6, "뀂뀃"],
    ["8581", "뀅", 6, "뀍뀎뀏뀑뀒뀓뀕", 6, "뀞", 9, "뀩", 26, "끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞", 29, "끾끿낁낂낃낅", 6, "낎낐낒", 5, "낛낝낞낣낤"],
    ["8641", "낥낦낧낪낰낲낶낷낹낺낻낽", 6, "냆냊", 5, "냒"],
    ["8661", "냓냕냖냗냙", 6, "냡냢냣냤냦", 10],
    ["8681", "냱", 22, "넊넍넎넏넑넔넕넖넗넚넞", 4, "넦넧넩넪넫넭", 6, "넶넺", 5, "녂녃녅녆녇녉", 6, "녒녓녖녗녙녚녛녝녞녟녡", 22, "녺녻녽녾녿놁놃", 4, "놊놌놎놏놐놑놕놖놗놙놚놛놝"],
    ["8741", "놞", 9, "놩", 15],
    ["8761", "놹", 18, "뇍뇎뇏뇑뇒뇓뇕"],
    ["8781", "뇖", 5, "뇞뇠", 7, "뇪뇫뇭뇮뇯뇱", 7, "뇺뇼뇾", 5, "눆눇눉눊눍", 6, "눖눘눚", 5, "눡", 18, "눵", 6, "눽", 26, "뉙뉚뉛뉝뉞뉟뉡", 6, "뉪", 4],
    ["8841", "뉯", 4, "뉶", 5, "뉽", 6, "늆늇늈늊", 4],
    ["8861", "늏늒늓늕늖늗늛", 4, "늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"],
    ["8881", "늸", 15, "닊닋닍닎닏닑닓", 4, "닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉", 6, "댒댖", 5, "댝", 54, "덗덙덚덝덠덡덢덣"],
    ["8941", "덦덨덪덬덭덯덲덳덵덶덷덹", 6, "뎂뎆", 5, "뎍"],
    ["8961", "뎎뎏뎑뎒뎓뎕", 10, "뎢", 5, "뎩뎪뎫뎭"],
    ["8981", "뎮", 21, "돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩", 18, "돽", 18, "됑", 6, "됙됚됛됝됞됟됡", 6, "됪됬", 7, "됵", 15],
    ["8a41", "둅", 10, "둒둓둕둖둗둙", 6, "둢둤둦"],
    ["8a61", "둧", 4, "둭", 18, "뒁뒂"],
    ["8a81", "뒃", 4, "뒉", 19, "뒞", 5, "뒥뒦뒧뒩뒪뒫뒭", 7, "뒶뒸뒺", 5, "듁듂듃듅듆듇듉", 6, "듑듒듓듔듖", 5, "듞듟듡듢듥듧", 4, "듮듰듲", 5, "듹", 26, "딖딗딙딚딝"],
    ["8b41", "딞", 5, "딦딫", 4, "딲딳딵딶딷딹", 6, "땂땆"],
    ["8b61", "땇땈땉땊땎땏땑땒땓땕", 6, "땞땢", 8],
    ["8b81", "땫", 52, "떢떣떥떦떧떩떬떭떮떯떲떶", 4, "떾떿뗁뗂뗃뗅", 6, "뗎뗒", 5, "뗙", 18, "뗭", 18],
    ["8c41", "똀", 15, "똒똓똕똖똗똙", 4],
    ["8c61", "똞", 6, "똦", 5, "똭", 6, "똵", 5],
    ["8c81", "똻", 12, "뙉", 26, "뙥뙦뙧뙩", 50, "뚞뚟뚡뚢뚣뚥", 5, "뚭뚮뚯뚰뚲", 16],
    ["8d41", "뛃", 16, "뛕", 8],
    ["8d61", "뛞", 17, "뛱뛲뛳뛵뛶뛷뛹뛺"],
    ["8d81", "뛻", 4, "뜂뜃뜄뜆", 33, "뜪뜫뜭뜮뜱", 6, "뜺뜼", 7, "띅띆띇띉띊띋띍", 6, "띖", 9, "띡띢띣띥띦띧띩", 6, "띲띴띶", 5, "띾띿랁랂랃랅", 6, "랎랓랔랕랚랛랝랞"],
    ["8e41", "랟랡", 6, "랪랮", 5, "랶랷랹", 8],
    ["8e61", "럂", 4, "럈럊", 19],
    ["8e81", "럞", 13, "럮럯럱럲럳럵", 6, "럾렂", 4, "렊렋렍렎렏렑", 6, "렚렜렞", 5, "렦렧렩렪렫렭", 6, "렶렺", 5, "롁롂롃롅", 11, "롒롔", 7, "롞롟롡롢롣롥", 6, "롮롰롲", 5, "롹롺롻롽", 7],
    ["8f41", "뢅", 7, "뢎", 17],
    ["8f61", "뢠", 7, "뢩", 6, "뢱뢲뢳뢵뢶뢷뢹", 4],
    ["8f81", "뢾뢿룂룄룆", 5, "룍룎룏룑룒룓룕", 7, "룞룠룢", 5, "룪룫룭룮룯룱", 6, "룺룼룾", 5, "뤅", 18, "뤙", 6, "뤡", 26, "뤾뤿륁륂륃륅", 6, "륍륎륐륒", 5],
    ["9041", "륚륛륝륞륟륡", 6, "륪륬륮", 5, "륶륷륹륺륻륽"],
    ["9061", "륾", 5, "릆릈릋릌릏", 15],
    ["9081", "릟", 12, "릮릯릱릲릳릵", 6, "릾맀맂", 5, "맊맋맍맓", 4, "맚맜맟맠맢맦맧맩맪맫맭", 6, "맶맻", 4, "먂", 5, "먉", 11, "먖", 33, "먺먻먽먾먿멁멃멄멅멆"],
    ["9141", "멇멊멌멏멐멑멒멖멗멙멚멛멝", 6, "멦멪", 5],
    ["9161", "멲멳멵멶멷멹", 9, "몆몈몉몊몋몍", 5],
    ["9181", "몓", 20, "몪몭몮몯몱몳", 4, "몺몼몾", 5, "뫅뫆뫇뫉", 14, "뫚", 33, "뫽뫾뫿묁묂묃묅", 7, "묎묐묒", 5, "묙묚묛묝묞묟묡", 6],
    ["9241", "묨묪묬", 7, "묷묹묺묿", 4, "뭆뭈뭊뭋뭌뭎뭑뭒"],
    ["9261", "뭓뭕뭖뭗뭙", 7, "뭢뭤", 7, "뭭", 4],
    ["9281", "뭲", 21, "뮉뮊뮋뮍뮎뮏뮑", 18, "뮥뮦뮧뮩뮪뮫뮭", 6, "뮵뮶뮸", 7, "믁믂믃믅믆믇믉", 6, "믑믒믔", 35, "믺믻믽믾밁"],
    ["9341", "밃", 4, "밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"],
    ["9361", "밶밷밹", 6, "뱂뱆뱇뱈뱊뱋뱎뱏뱑", 8],
    ["9381", "뱚뱛뱜뱞", 37, "벆벇벉벊벍벏", 4, "벖벘벛", 4, "벢벣벥벦벩", 6, "벲벶", 5, "벾벿볁볂볃볅", 7, "볎볒볓볔볖볗볙볚볛볝", 22, "볷볹볺볻볽"],
    ["9441", "볾", 5, "봆봈봊", 5, "봑봒봓봕", 8],
    ["9461", "봞", 5, "봥", 6, "봭", 12],
    ["9481", "봺", 5, "뵁", 6, "뵊뵋뵍뵎뵏뵑", 6, "뵚", 9, "뵥뵦뵧뵩", 22, "붂붃붅붆붋", 4, "붒붔붖붗붘붛붝", 6, "붥", 10, "붱", 6, "붹", 24],
    ["9541", "뷒뷓뷖뷗뷙뷚뷛뷝", 11, "뷪", 5, "뷱"],
    ["9561", "뷲뷳뷵뷶뷷뷹", 6, "븁븂븄븆", 5, "븎븏븑븒븓"],
    ["9581", "븕", 6, "븞븠", 35, "빆빇빉빊빋빍빏", 4, "빖빘빜빝빞빟빢빣빥빦빧빩빫", 4, "빲빶", 4, "빾빿뺁뺂뺃뺅", 6, "뺎뺒", 5, "뺚", 13, "뺩", 14],
    ["9641", "뺸", 23, "뻒뻓"],
    ["9661", "뻕뻖뻙", 6, "뻡뻢뻦", 5, "뻭", 8],
    ["9681", "뻶", 10, "뼂", 5, "뼊", 13, "뼚뼞", 33, "뽂뽃뽅뽆뽇뽉", 6, "뽒뽓뽔뽖", 44],
    ["9741", "뾃", 16, "뾕", 8],
    ["9761", "뾞", 17, "뾱", 7],
    ["9781", "뾹", 11, "뿆", 5, "뿎뿏뿑뿒뿓뿕", 6, "뿝뿞뿠뿢", 89, "쀽쀾쀿"],
    ["9841", "쁀", 16, "쁒", 5, "쁙쁚쁛"],
    ["9861", "쁝쁞쁟쁡", 6, "쁪", 15],
    ["9881", "쁺", 21, "삒삓삕삖삗삙", 6, "삢삤삦", 5, "삮삱삲삷", 4, "삾샂샃샄샆샇샊샋샍샎샏샑", 6, "샚샞", 5, "샦샧샩샪샫샭", 6, "샶샸샺", 5, "섁섂섃섅섆섇섉", 6, "섑섒섓섔섖", 5, "섡섢섥섨섩섪섫섮"],
    ["9941", "섲섳섴섵섷섺섻섽섾섿셁", 6, "셊셎", 5, "셖셗"],
    ["9961", "셙셚셛셝", 6, "셦셪", 5, "셱셲셳셵셶셷셹셺셻"],
    ["9981", "셼", 8, "솆", 5, "솏솑솒솓솕솗", 4, "솞솠솢솣솤솦솧솪솫솭솮솯솱", 11, "솾", 5, "쇅쇆쇇쇉쇊쇋쇍", 6, "쇕쇖쇙", 6, "쇡쇢쇣쇥쇦쇧쇩", 6, "쇲쇴", 7, "쇾쇿숁숂숃숅", 6, "숎숐숒", 5, "숚숛숝숞숡숢숣"],
    ["9a41", "숤숥숦숧숪숬숮숰숳숵", 16],
    ["9a61", "쉆쉇쉉", 6, "쉒쉓쉕쉖쉗쉙", 6, "쉡쉢쉣쉤쉦"],
    ["9a81", "쉧", 4, "쉮쉯쉱쉲쉳쉵", 6, "쉾슀슂", 5, "슊", 5, "슑", 6, "슙슚슜슞", 5, "슦슧슩슪슫슮", 5, "슶슸슺", 33, "싞싟싡싢싥", 5, "싮싰싲싳싴싵싷싺싽싾싿쌁", 6, "쌊쌋쌎쌏"],
    ["9b41", "쌐쌑쌒쌖쌗쌙쌚쌛쌝", 6, "쌦쌧쌪", 8],
    ["9b61", "쌳", 17, "썆", 7],
    ["9b81", "썎", 25, "썪썫썭썮썯썱썳", 4, "썺썻썾", 5, "쎅쎆쎇쎉쎊쎋쎍", 50, "쏁", 22, "쏚"],
    ["9c41", "쏛쏝쏞쏡쏣", 4, "쏪쏫쏬쏮", 5, "쏶쏷쏹", 5],
    ["9c61", "쏿", 8, "쐉", 6, "쐑", 9],
    ["9c81", "쐛", 8, "쐥", 6, "쐭쐮쐯쐱쐲쐳쐵", 6, "쐾", 9, "쑉", 26, "쑦쑧쑩쑪쑫쑭", 6, "쑶쑷쑸쑺", 5, "쒁", 18, "쒕", 6, "쒝", 12],
    ["9d41", "쒪", 13, "쒹쒺쒻쒽", 8],
    ["9d61", "쓆", 25],
    ["9d81", "쓠", 8, "쓪", 5, "쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂", 9, "씍씎씏씑씒씓씕", 6, "씝", 10, "씪씫씭씮씯씱", 6, "씺씼씾", 5, "앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩", 6, "앲앶", 5, "앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"],
    ["9e41", "얖얙얚얛얝얞얟얡", 7, "얪", 9, "얶"],
    ["9e61", "얷얺얿", 4, "엋엍엏엒엓엕엖엗엙", 6, "엢엤엦엧"],
    ["9e81", "엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑", 6, "옚옝", 6, "옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉", 6, "왒왖", 5, "왞왟왡", 10, "왭왮왰왲", 5, "왺왻왽왾왿욁", 6, "욊욌욎", 5, "욖욗욙욚욛욝", 6, "욦"],
    ["9f41", "욨욪", 5, "욲욳욵욶욷욻", 4, "웂웄웆", 5, "웎"],
    ["9f61", "웏웑웒웓웕", 6, "웞웟웢", 5, "웪웫웭웮웯웱웲"],
    ["9f81", "웳", 4, "웺웻웼웾", 5, "윆윇윉윊윋윍", 6, "윖윘윚", 5, "윢윣윥윦윧윩", 6, "윲윴윶윸윹윺윻윾윿읁읂읃읅", 4, "읋읎읐읙읚읛읝읞읟읡", 6, "읩읪읬", 7, "읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛", 4, "잢잧", 4, "잮잯잱잲잳잵잶잷"],
    ["a041", "잸잹잺잻잾쟂", 5, "쟊쟋쟍쟏쟑", 6, "쟙쟚쟛쟜"],
    ["a061", "쟞", 5, "쟥쟦쟧쟩쟪쟫쟭", 13],
    ["a081", "쟻", 4, "젂젃젅젆젇젉젋", 4, "젒젔젗", 4, "젞젟젡젢젣젥", 6, "젮젰젲", 5, "젹젺젻젽젾젿졁", 6, "졊졋졎", 5, "졕", 26, "졲졳졵졶졷졹졻", 4, "좂좄좈좉좊좎", 5, "좕", 7, "좞좠좢좣좤"],
    ["a141", "좥좦좧좩", 18, "좾좿죀죁"],
    ["a161", "죂죃죅죆죇죉죊죋죍", 6, "죖죘죚", 5, "죢죣죥"],
    ["a181", "죦", 14, "죶", 5, "죾죿줁줂줃줇", 4, "줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈", 9, "±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"],
    ["a241", "줐줒", 5, "줙", 18],
    ["a261", "줭", 6, "줵", 18],
    ["a281", "쥈", 7, "쥒쥓쥕쥖쥗쥙", 6, "쥢쥤", 7, "쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"],
    ["a341", "쥱쥲쥳쥵", 6, "쥽", 10, "즊즋즍즎즏"],
    ["a361", "즑", 6, "즚즜즞", 16],
    ["a381", "즯", 16, "짂짃짅짆짉짋", 4, "짒짔짗짘짛！", 58, "￦］", 32, "￣"],
    ["a441", "짞짟짡짣짥짦짨짩짪짫짮짲", 5, "짺짻짽짾짿쨁쨂쨃쨄"],
    ["a461", "쨅쨆쨇쨊쨎", 5, "쨕쨖쨗쨙", 12],
    ["a481", "쨦쨧쨨쨪", 28, "ㄱ", 93],
    ["a541", "쩇", 4, "쩎쩏쩑쩒쩓쩕", 6, "쩞쩢", 5, "쩩쩪"],
    ["a561", "쩫", 17, "쩾", 5, "쪅쪆"],
    ["a581", "쪇", 16, "쪙", 14, "ⅰ", 9],
    ["a5b0", "Ⅰ", 9],
    ["a5c1", "Α", 16, "Σ", 6],
    ["a5e1", "α", 16, "σ", 6],
    ["a641", "쪨", 19, "쪾쪿쫁쫂쫃쫅"],
    ["a661", "쫆", 5, "쫎쫐쫒쫔쫕쫖쫗쫚", 5, "쫡", 6],
    ["a681", "쫨쫩쫪쫫쫭", 6, "쫵", 18, "쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃", 7],
    ["a741", "쬋", 4, "쬑쬒쬓쬕쬖쬗쬙", 6, "쬢", 7],
    ["a761", "쬪", 22, "쭂쭃쭄"],
    ["a781", "쭅쭆쭇쭊쭋쭍쭎쭏쭑", 6, "쭚쭛쭜쭞", 5, "쭥", 7, "㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙", 9, "㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰", 9, "㎀", 4, "㎺", 5, "㎐", 4, "Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"],
    ["a841", "쭭", 10, "쭺", 14],
    ["a861", "쮉", 18, "쮝", 6],
    ["a881", "쮤", 19, "쮹", 11, "ÆÐªĦ"],
    ["a8a6", "Ĳ"],
    ["a8a8", "ĿŁØŒºÞŦŊ"],
    ["a8b1", "㉠", 27, "ⓐ", 25, "①", 14, "½⅓⅔¼¾⅛⅜⅝⅞"],
    ["a941", "쯅", 14, "쯕", 10],
    ["a961", "쯠쯡쯢쯣쯥쯦쯨쯪", 18],
    ["a981", "쯽", 14, "찎찏찑찒찓찕", 6, "찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀", 27, "⒜", 25, "⑴", 14, "¹²³⁴ⁿ₁₂₃₄"],
    ["aa41", "찥찦찪찫찭찯찱", 6, "찺찿", 4, "챆챇챉챊챋챍챎"],
    ["aa61", "챏", 4, "챖챚", 5, "챡챢챣챥챧챩", 6, "챱챲"],
    ["aa81", "챳챴챶", 29, "ぁ", 82],
    ["ab41", "첔첕첖첗첚첛첝첞첟첡", 6, "첪첮", 5, "첶첷첹"],
    ["ab61", "첺첻첽", 6, "쳆쳈쳊", 5, "쳑쳒쳓쳕", 5],
    ["ab81", "쳛", 8, "쳥", 6, "쳭쳮쳯쳱", 12, "ァ", 85],
    ["ac41", "쳾쳿촀촂", 5, "촊촋촍촎촏촑", 6, "촚촜촞촟촠"],
    ["ac61", "촡촢촣촥촦촧촩촪촫촭", 11, "촺", 4],
    ["ac81", "촿", 28, "쵝쵞쵟А", 5, "ЁЖ", 25],
    ["acd1", "а", 5, "ёж", 25],
    ["ad41", "쵡쵢쵣쵥", 6, "쵮쵰쵲", 5, "쵹", 7],
    ["ad61", "춁", 6, "춉", 10, "춖춗춙춚춛춝춞춟"],
    ["ad81", "춠춡춢춣춦춨춪", 5, "춱", 18, "췅"],
    ["ae41", "췆", 5, "췍췎췏췑", 16],
    ["ae61", "췢", 5, "췩췪췫췭췮췯췱", 6, "췺췼췾", 4],
    ["ae81", "츃츅츆츇츉츊츋츍", 6, "츕츖츗츘츚", 5, "츢츣츥츦츧츩츪츫"],
    ["af41", "츬츭츮츯츲츴츶", 19],
    ["af61", "칊", 13, "칚칛칝칞칢", 5, "칪칬"],
    ["af81", "칮", 5, "칶칷칹칺칻칽", 6, "캆캈캊", 5, "캒캓캕캖캗캙"],
    ["b041", "캚", 5, "캢캦", 5, "캮", 12],
    ["b061", "캻", 5, "컂", 19],
    ["b081", "컖", 13, "컦컧컩컪컭", 6, "컶컺", 5, "가각간갇갈갉갊감", 7, "같", 4, "갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"],
    ["b141", "켂켃켅켆켇켉", 6, "켒켔켖", 5, "켝켞켟켡켢켣"],
    ["b161", "켥", 6, "켮켲", 5, "켹", 11],
    ["b181", "콅", 14, "콖콗콙콚콛콝", 6, "콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"],
    ["b241", "콭콮콯콲콳콵콶콷콹", 6, "쾁쾂쾃쾄쾆", 5, "쾍"],
    ["b261", "쾎", 18, "쾢", 5, "쾩"],
    ["b281", "쾪", 5, "쾱", 18, "쿅", 6, "깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"],
    ["b341", "쿌", 19, "쿢쿣쿥쿦쿧쿩"],
    ["b361", "쿪", 5, "쿲쿴쿶", 5, "쿽쿾쿿퀁퀂퀃퀅", 5],
    ["b381", "퀋", 5, "퀒", 5, "퀙", 19, "끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫", 4, "낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"],
    ["b441", "퀮", 5, "퀶퀷퀹퀺퀻퀽", 6, "큆큈큊", 5],
    ["b461", "큑큒큓큕큖큗큙", 6, "큡", 10, "큮큯"],
    ["b481", "큱큲큳큵", 6, "큾큿킀킂", 18, "뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫", 4, "닳담답닷", 4, "닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"],
    ["b541", "킕", 14, "킦킧킩킪킫킭", 5],
    ["b561", "킳킶킸킺", 5, "탂탃탅탆탇탊", 5, "탒탖", 4],
    ["b581", "탛탞탟탡탢탣탥", 6, "탮탲", 5, "탹", 11, "덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"],
    ["b641", "턅", 7, "턎", 17],
    ["b661", "턠", 15, "턲턳턵턶턷턹턻턼턽턾"],
    ["b681", "턿텂텆", 5, "텎텏텑텒텓텕", 6, "텞텠텢", 5, "텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"],
    ["b741", "텮", 13, "텽", 6, "톅톆톇톉톊"],
    ["b761", "톋", 20, "톢톣톥톦톧"],
    ["b781", "톩", 6, "톲톴톶톷톸톹톻톽톾톿퇁", 14, "래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"],
    ["b841", "퇐", 7, "퇙", 17],
    ["b861", "퇫", 8, "퇵퇶퇷퇹", 13],
    ["b881", "툈툊", 5, "툑", 24, "륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많", 4, "맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"],
    ["b941", "툪툫툮툯툱툲툳툵", 6, "툾퉀퉂", 5, "퉉퉊퉋퉌"],
    ["b961", "퉍", 14, "퉝", 6, "퉥퉦퉧퉨"],
    ["b981", "퉩", 22, "튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바", 4, "받", 4, "밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"],
    ["ba41", "튍튎튏튒튓튔튖", 5, "튝튞튟튡튢튣튥", 6, "튭"],
    ["ba61", "튮튯튰튲", 5, "튺튻튽튾틁틃", 4, "틊틌", 5],
    ["ba81", "틒틓틕틖틗틙틚틛틝", 6, "틦", 9, "틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"],
    ["bb41", "틻", 4, "팂팄팆", 5, "팏팑팒팓팕팗", 4, "팞팢팣"],
    ["bb61", "팤팦팧팪팫팭팮팯팱", 6, "팺팾", 5, "퍆퍇퍈퍉"],
    ["bb81", "퍊", 31, "빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"],
    ["bc41", "퍪", 17, "퍾퍿펁펂펃펅펆펇"],
    ["bc61", "펈펉펊펋펎펒", 5, "펚펛펝펞펟펡", 6, "펪펬펮"],
    ["bc81", "펯", 4, "펵펶펷펹펺펻펽", 6, "폆폇폊", 5, "폑", 5, "샥샨샬샴샵샷샹섀섄섈섐섕서", 4, "섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"],
    ["bd41", "폗폙", 7, "폢폤", 7, "폮폯폱폲폳폵폶폷"],
    ["bd61", "폸폹폺폻폾퐀퐂", 5, "퐉", 13],
    ["bd81", "퐗", 5, "퐞", 25, "숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"],
    ["be41", "퐸", 7, "푁푂푃푅", 14],
    ["be61", "푔", 7, "푝푞푟푡푢푣푥", 7, "푮푰푱푲"],
    ["be81", "푳", 4, "푺푻푽푾풁풃", 4, "풊풌풎", 5, "풕", 8, "쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄", 6, "엌엎"],
    ["bf41", "풞", 10, "풪", 14],
    ["bf61", "풹", 18, "퓍퓎퓏퓑퓒퓓퓕"],
    ["bf81", "퓖", 5, "퓝퓞퓠", 7, "퓩퓪퓫퓭퓮퓯퓱", 6, "퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염", 5, "옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"],
    ["c041", "퓾", 5, "픅픆픇픉픊픋픍", 6, "픖픘", 5],
    ["c061", "픞", 25],
    ["c081", "픸픹픺픻픾픿핁핂핃핅", 6, "핎핐핒", 5, "핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응", 7, "읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"],
    ["c141", "핤핦핧핪핬핮", 5, "핶핷핹핺핻핽", 6, "햆햊햋"],
    ["c161", "햌햍햎햏햑", 19, "햦햧"],
    ["c181", "햨", 31, "점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"],
    ["c241", "헊헋헍헎헏헑헓", 4, "헚헜헞", 5, "헦헧헩헪헫헭헮"],
    ["c261", "헯", 4, "헶헸헺", 5, "혂혃혅혆혇혉", 6, "혒"],
    ["c281", "혖", 5, "혝혞혟혡혢혣혥", 7, "혮", 9, "혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"],
    ["c341", "혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝", 4],
    ["c361", "홢", 4, "홨홪", 5, "홲홳홵", 11],
    ["c381", "횁횂횄횆", 5, "횎횏횑횒횓횕", 7, "횞횠횢", 5, "횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"],
    ["c441", "횫횭횮횯횱", 7, "횺횼", 7, "훆훇훉훊훋"],
    ["c461", "훍훎훏훐훒훓훕훖훘훚", 5, "훡훢훣훥훦훧훩", 4],
    ["c481", "훮훯훱훲훳훴훶", 5, "훾훿휁휂휃휅", 11, "휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"],
    ["c541", "휕휖휗휚휛휝휞휟휡", 6, "휪휬휮", 5, "휶휷휹"],
    ["c561", "휺휻휽", 6, "흅흆흈흊", 5, "흒흓흕흚", 4],
    ["c581", "흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵", 6, "흾흿힀힂", 5, "힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"],
    ["c641", "힍힎힏힑", 6, "힚힜힞", 5],
    ["c6a1", "퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"],
    ["c7a1", "퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"],
    ["c8a1", "혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"],
    ["caa1", "伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"],
    ["cba1", "匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"],
    ["cca1", "瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"],
    ["cda1", "棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"],
    ["cea1", "科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"],
    ["cfa1", "區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"],
    ["d0a1", "鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"],
    ["d1a1", "朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩", 5, "那樂", 4, "諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"],
    ["d2a1", "納臘蠟衲囊娘廊", 4, "乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧", 5, "駑魯", 10, "濃籠聾膿農惱牢磊腦賂雷尿壘", 7, "嫩訥杻紐勒", 5, "能菱陵尼泥匿溺多茶"],
    ["d3a1", "丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"],
    ["d4a1", "棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"],
    ["d5a1", "蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"],
    ["d6a1", "煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"],
    ["d7a1", "遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"],
    ["d8a1", "立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"],
    ["d9a1", "蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"],
    ["daa1", "汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"],
    ["dba1", "發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"],
    ["dca1", "碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"],
    ["dda1", "孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"],
    ["dea1", "脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"],
    ["dfa1", "傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"],
    ["e0a1", "胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"],
    ["e1a1", "聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"],
    ["e2a1", "戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"],
    ["e3a1", "嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"],
    ["e4a1", "沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"],
    ["e5a1", "櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"],
    ["e6a1", "旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"],
    ["e7a1", "簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"],
    ["e8a1", "烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"],
    ["e9a1", "窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"],
    ["eaa1", "運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"],
    ["eba1", "濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"],
    ["eca1", "議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"],
    ["eda1", "立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"],
    ["eea1", "障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"],
    ["efa1", "煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"],
    ["f0a1", "靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"],
    ["f1a1", "踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"],
    ["f2a1", "咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"],
    ["f3a1", "鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"],
    ["f4a1", "責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"],
    ["f5a1", "椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"],
    ["f6a1", "贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"],
    ["f7a1", "鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"],
    ["f8a1", "阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"],
    ["f9a1", "品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"],
    ["faa1", "行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"],
    ["fba1", "形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"],
    ["fca1", "禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"],
    ["fda1", "爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"]
  ];
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/tables/cp950.json
var require_cp950 = __commonJS((exports2, module3) => {
  module3.exports = [
    ["0", "\0", 127],
    ["a140", "　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"],
    ["a1a1", "﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢", 4, "～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"],
    ["a240", "＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁", 7, "▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"],
    ["a2a1", "╮╰╯═╞╪╡◢◣◥◤╱╲╳０", 9, "Ⅰ", 9, "〡", 8, "十卄卅Ａ", 25, "ａ", 21],
    ["a340", "ｗｘｙｚΑ", 16, "Σ", 6, "α", 16, "σ", 6, "ㄅ", 10],
    ["a3a1", "ㄐ", 25, "˙ˉˊˇˋ"],
    ["a3e1", "€"],
    ["a440", "一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"],
    ["a4a1", "丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"],
    ["a540", "世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"],
    ["a5a1", "央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"],
    ["a640", "共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"],
    ["a6a1", "式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"],
    ["a740", "作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"],
    ["a7a1", "均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"],
    ["a840", "杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"],
    ["a8a1", "芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"],
    ["a940", "咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"],
    ["a9a1", "屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"],
    ["aa40", "昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"],
    ["aaa1", "炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"],
    ["ab40", "陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"],
    ["aba1", "哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"],
    ["ac40", "拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"],
    ["aca1", "活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"],
    ["ad40", "耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"],
    ["ada1", "迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"],
    ["ae40", "哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"],
    ["aea1", "恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"],
    ["af40", "浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"],
    ["afa1", "砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"],
    ["b040", "虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"],
    ["b0a1", "陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"],
    ["b140", "娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"],
    ["b1a1", "情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"],
    ["b240", "毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"],
    ["b2a1", "瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"],
    ["b340", "莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"],
    ["b3a1", "部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"],
    ["b440", "婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"],
    ["b4a1", "插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"],
    ["b540", "溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"],
    ["b5a1", "窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"],
    ["b640", "詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"],
    ["b6a1", "間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"],
    ["b740", "媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"],
    ["b7a1", "楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"],
    ["b840", "睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"],
    ["b8a1", "腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"],
    ["b940", "辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"],
    ["b9a1", "飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"],
    ["ba40", "愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"],
    ["baa1", "滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"],
    ["bb40", "罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"],
    ["bba1", "說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"],
    ["bc40", "劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"],
    ["bca1", "慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"],
    ["bd40", "瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"],
    ["bda1", "翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"],
    ["be40", "輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"],
    ["bea1", "鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"],
    ["bf40", "濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"],
    ["bfa1", "縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"],
    ["c040", "錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"],
    ["c0a1", "嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"],
    ["c140", "瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"],
    ["c1a1", "薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"],
    ["c240", "駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"],
    ["c2a1", "癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"],
    ["c340", "鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"],
    ["c3a1", "獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"],
    ["c440", "願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"],
    ["c4a1", "纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"],
    ["c540", "護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"],
    ["c5a1", "禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"],
    ["c640", "讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"],
    ["c940", "乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"],
    ["c9a1", "氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"],
    ["ca40", "汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"],
    ["caa1", "吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"],
    ["cb40", "杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"],
    ["cba1", "芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"],
    ["cc40", "坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"],
    ["cca1", "怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"],
    ["cd40", "泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"],
    ["cda1", "矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"],
    ["ce40", "哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"],
    ["cea1", "峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"],
    ["cf40", "柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"],
    ["cfa1", "洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"],
    ["d040", "穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"],
    ["d0a1", "苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"],
    ["d140", "唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"],
    ["d1a1", "恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"],
    ["d240", "毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"],
    ["d2a1", "牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"],
    ["d340", "笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"],
    ["d3a1", "荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"],
    ["d440", "酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"],
    ["d4a1", "唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"],
    ["d540", "崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"],
    ["d5a1", "捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"],
    ["d640", "淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"],
    ["d6a1", "痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"],
    ["d740", "耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"],
    ["d7a1", "蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"],
    ["d840", "釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"],
    ["d8a1", "堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"],
    ["d940", "惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"],
    ["d9a1", "晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"],
    ["da40", "湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"],
    ["daa1", "琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"],
    ["db40", "罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"],
    ["dba1", "菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"],
    ["dc40", "軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"],
    ["dca1", "隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"],
    ["dd40", "媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"],
    ["dda1", "搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"],
    ["de40", "毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"],
    ["dea1", "煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"],
    ["df40", "稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"],
    ["dfa1", "腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"],
    ["e040", "觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"],
    ["e0a1", "遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"],
    ["e140", "凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"],
    ["e1a1", "寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"],
    ["e240", "榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"],
    ["e2a1", "漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"],
    ["e340", "禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"],
    ["e3a1", "耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"],
    ["e440", "裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"],
    ["e4a1", "銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"],
    ["e540", "噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"],
    ["e5a1", "憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"],
    ["e640", "澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"],
    ["e6a1", "獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"],
    ["e740", "膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"],
    ["e7a1", "蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"],
    ["e840", "踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"],
    ["e8a1", "銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"],
    ["e940", "噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"],
    ["e9a1", "憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"],
    ["ea40", "澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"],
    ["eaa1", "瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"],
    ["eb40", "蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"],
    ["eba1", "諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"],
    ["ec40", "錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"],
    ["eca1", "魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"],
    ["ed40", "檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"],
    ["eda1", "瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"],
    ["ee40", "蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"],
    ["eea1", "謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"],
    ["ef40", "鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"],
    ["efa1", "鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"],
    ["f040", "璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"],
    ["f0a1", "臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"],
    ["f140", "蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"],
    ["f1a1", "鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"],
    ["f240", "徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"],
    ["f2a1", "礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"],
    ["f340", "譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"],
    ["f3a1", "鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"],
    ["f440", "嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"],
    ["f4a1", "禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"],
    ["f540", "鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"],
    ["f5a1", "鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"],
    ["f640", "蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"],
    ["f6a1", "騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"],
    ["f740", "糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"],
    ["f7a1", "驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"],
    ["f840", "讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"],
    ["f8a1", "齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"],
    ["f940", "纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"],
    ["f9a1", "龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"]
  ];
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/tables/big5-added.json
var require_big5_added = __commonJS((exports2, module3) => {
  module3.exports = [
    ["8740", "䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"],
    ["8767", "綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"],
    ["87a1", "𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"],
    ["8840", "㇀", 4, "𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"],
    ["88a1", "ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"],
    ["8940", "𪎩𡅅"],
    ["8943", "攊"],
    ["8946", "丽滝鵎釟"],
    ["894c", "𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"],
    ["89a1", "琑糼緍楆竉刧"],
    ["89ab", "醌碸酞肼"],
    ["89b0", "贋胶𠧧"],
    ["89b5", "肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"],
    ["89c1", "溚舾甙"],
    ["89c5", "䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"],
    ["8a40", "𧶄唥"],
    ["8a43", "𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"],
    ["8a64", "𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"],
    ["8a76", "䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"],
    ["8aa1", "𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"],
    ["8aac", "䠋𠆩㿺塳𢶍"],
    ["8ab2", "𤗈𠓼𦂗𠽌𠶖啹䂻䎺"],
    ["8abb", "䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"],
    ["8ac9", "𪘁𠸉𢫏𢳉"],
    ["8ace", "𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"],
    ["8adf", "𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"],
    ["8af6", "𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"],
    ["8b40", "𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"],
    ["8b55", "𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"],
    ["8ba1", "𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"],
    ["8bde", "𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"],
    ["8c40", "倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"],
    ["8ca1", "𣏹椙橃𣱣泿"],
    ["8ca7", "爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"],
    ["8cc9", "顨杫䉶圽"],
    ["8cce", "藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"],
    ["8ce6", "峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"],
    ["8d40", "𠮟"],
    ["8d42", "𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"],
    ["8da1", "㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"],
    ["8e40", "𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"],
    ["8ea1", "繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"],
    ["8f40", "蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"],
    ["8fa1", "𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"],
    ["9040", "趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"],
    ["90a1", "𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"],
    ["9140", "𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"],
    ["91a1", "鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"],
    ["9240", "𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"],
    ["92a1", "働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"],
    ["9340", "媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"],
    ["93a1", "摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"],
    ["9440", "銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"],
    ["94a1", "㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"],
    ["9540", "𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"],
    ["95a1", "衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"],
    ["9640", "桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"],
    ["96a1", "𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"],
    ["9740", "愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"],
    ["97a1", "𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"],
    ["9840", "𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"],
    ["98a1", "咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"],
    ["9940", "䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"],
    ["99a1", "䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"],
    ["9a40", "鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"],
    ["9aa1", "黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"],
    ["9b40", "𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"],
    ["9b62", "𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"],
    ["9ba1", "椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"],
    ["9c40", "嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"],
    ["9ca1", "㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"],
    ["9d40", "𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"],
    ["9da1", "辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"],
    ["9e40", "𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"],
    ["9ea1", "鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"],
    ["9ead", "𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"],
    ["9ec5", "㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"],
    ["9ef5", "噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"],
    ["9f40", "籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"],
    ["9f4f", "凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"],
    ["9fa1", "椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"],
    ["9fae", "酙隁酜"],
    ["9fb2", "酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"],
    ["9fc1", "𤤙盖鮝个𠳔莾衂"],
    ["9fc9", "届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"],
    ["9fdb", "歒酼龥鮗頮颴骺麨麄煺笔"],
    ["9fe7", "毺蠘罸"],
    ["9feb", "嘠𪙊蹷齓"],
    ["9ff0", "跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"],
    ["a040", "𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"],
    ["a055", "𡠻𦸅"],
    ["a058", "詾𢔛"],
    ["a05b", "惽癧髗鵄鍮鮏蟵"],
    ["a063", "蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"],
    ["a073", "坟慯抦戹拎㩜懢厪𣏵捤栂㗒"],
    ["a0a1", "嵗𨯂迚𨸹"],
    ["a0a6", "僙𡵆礆匲阸𠼻䁥"],
    ["a0ae", "矾"],
    ["a0b0", "糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"],
    ["a0d4", "覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"],
    ["a0e2", "罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"],
    ["a3c0", "␀", 31, "␡"],
    ["c6a1", "①", 9, "⑴", 9, "ⅰ", 9, "丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ", 23],
    ["c740", "す", 58, "ァアィイ"],
    ["c7a1", "ゥ", 81, "А", 5, "ЁЖ", 4],
    ["c840", "Л", 26, "ёж", 25, "⇧↸↹㇏𠃌乚𠂊刂䒑"],
    ["c8a1", "龰冈龱𧘇"],
    ["c8cd", "￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"],
    ["c8f5", "ʃɐɛɔɵœøŋʊɪ"],
    ["f9fe", "￭"],
    ["fa40", "𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"],
    ["faa1", "鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"],
    ["fb40", "𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"],
    ["fba1", "𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"],
    ["fc40", "廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"],
    ["fca1", "𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"],
    ["fd40", "𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"],
    ["fda1", "𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"],
    ["fe40", "鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"],
    ["fea1", "𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"]
  ];
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/dbcs-data.js
var require_dbcs_data = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = {
    shiftjis: {
      type: "_dbcs",
      table: function() {
        return require_shiftjis();
      },
      encodeAdd: {"¥": 92, "‾": 126},
      encodeSkipVals: [{from: 60736, to: 63808}]
    },
    csshiftjis: "shiftjis",
    mskanji: "shiftjis",
    sjis: "shiftjis",
    windows31j: "shiftjis",
    ms31j: "shiftjis",
    xsjis: "shiftjis",
    windows932: "shiftjis",
    ms932: "shiftjis",
    "932": "shiftjis",
    cp932: "shiftjis",
    eucjp: {
      type: "_dbcs",
      table: function() {
        return require_eucjp();
      },
      encodeAdd: {"¥": 92, "‾": 126}
    },
    gb2312: "cp936",
    gb231280: "cp936",
    gb23121980: "cp936",
    csgb2312: "cp936",
    csiso58gb231280: "cp936",
    euccn: "cp936",
    windows936: "cp936",
    ms936: "cp936",
    "936": "cp936",
    cp936: {
      type: "_dbcs",
      table: function() {
        return require_cp936();
      }
    },
    gbk: {
      type: "_dbcs",
      table: function() {
        return require_cp936().concat(require_gbk_added());
      }
    },
    xgbk: "gbk",
    isoir58: "gbk",
    gb18030: {
      type: "_dbcs",
      table: function() {
        return require_cp936().concat(require_gbk_added());
      },
      gb18030: function() {
        return require_gb18030_ranges();
      },
      encodeSkipVals: [128],
      encodeAdd: {"€": 41699}
    },
    chinese: "gb18030",
    windows949: "cp949",
    ms949: "cp949",
    "949": "cp949",
    cp949: {
      type: "_dbcs",
      table: function() {
        return require_cp949();
      }
    },
    cseuckr: "cp949",
    csksc56011987: "cp949",
    euckr: "cp949",
    isoir149: "cp949",
    korean: "cp949",
    ksc56011987: "cp949",
    ksc56011989: "cp949",
    ksc5601: "cp949",
    windows950: "cp950",
    ms950: "cp950",
    "950": "cp950",
    cp950: {
      type: "_dbcs",
      table: function() {
        return require_cp950();
      }
    },
    big5: "big5hkscs",
    big5hkscs: {
      type: "_dbcs",
      table: function() {
        return require_cp950().concat(require_big5_added());
      },
      encodeSkipVals: [41676]
    },
    cnbig5: "big5hkscs",
    csbig5: "big5hkscs",
    xxbig5: "big5hkscs"
  };
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/encodings/index.js
var require_encodings = __commonJS((exports2, module3) => {
  "use strict";
  var modules = [
    require_internal(),
    require_utf16(),
    require_utf7(),
    require_sbcs_codec(),
    require_sbcs_data(),
    require_sbcs_data_generated(),
    require_dbcs_codec(),
    require_dbcs_data()
  ];
  for (var i = 0; i < modules.length; i++) {
    var module3 = modules[i];
    for (var enc in module3)
      if (Object.prototype.hasOwnProperty.call(module3, enc))
        exports2[enc] = module3[enc];
  }
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/lib/streams.js
var require_streams = __commonJS((exports2, module3) => {
  "use strict";
  var Buffer2 = require("buffer").Buffer;
  var Transform = require("stream").Transform;
  module3.exports = function(iconv) {
    iconv.encodeStream = function encodeStream(encoding, options) {
      return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
    };
    iconv.decodeStream = function decodeStream(encoding, options) {
      return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
    };
    iconv.supportsStreams = true;
    iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;
    iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;
    iconv._collect = IconvLiteDecoderStream.prototype.collect;
  };
  function IconvLiteEncoderStream(conv, options) {
    this.conv = conv;
    options = options || {};
    options.decodeStrings = false;
    Transform.call(this, options);
  }
  IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
    constructor: {value: IconvLiteEncoderStream}
  });
  IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
    if (typeof chunk != "string")
      return done(new Error("Iconv encoding stream needs strings as its input."));
    try {
      var res = this.conv.write(chunk);
      if (res && res.length)
        this.push(res);
      done();
    } catch (e) {
      done(e);
    }
  };
  IconvLiteEncoderStream.prototype._flush = function(done) {
    try {
      var res = this.conv.end();
      if (res && res.length)
        this.push(res);
      done();
    } catch (e) {
      done(e);
    }
  };
  IconvLiteEncoderStream.prototype.collect = function(cb) {
    var chunks = [];
    this.on("error", cb);
    this.on("data", function(chunk) {
      chunks.push(chunk);
    });
    this.on("end", function() {
      cb(null, Buffer2.concat(chunks));
    });
    return this;
  };
  function IconvLiteDecoderStream(conv, options) {
    this.conv = conv;
    options = options || {};
    options.encoding = this.encoding = "utf8";
    Transform.call(this, options);
  }
  IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
    constructor: {value: IconvLiteDecoderStream}
  });
  IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
    if (!Buffer2.isBuffer(chunk))
      return done(new Error("Iconv decoding stream needs buffers as its input."));
    try {
      var res = this.conv.write(chunk);
      if (res && res.length)
        this.push(res, this.encoding);
      done();
    } catch (e) {
      done(e);
    }
  };
  IconvLiteDecoderStream.prototype._flush = function(done) {
    try {
      var res = this.conv.end();
      if (res && res.length)
        this.push(res, this.encoding);
      done();
    } catch (e) {
      done(e);
    }
  };
  IconvLiteDecoderStream.prototype.collect = function(cb) {
    var res = "";
    this.on("error", cb);
    this.on("data", function(chunk) {
      res += chunk;
    });
    this.on("end", function() {
      cb(null, res);
    });
    return this;
  };
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/lib/extend-node.js
var require_extend_node = __commonJS((exports2, module3) => {
  "use strict";
  var Buffer2 = require("buffer").Buffer;
  module3.exports = function(iconv) {
    var original = void 0;
    iconv.supportsNodeEncodingsExtension = !(Buffer2.from || new Buffer2(0) instanceof Uint8Array);
    iconv.extendNodeEncodings = function extendNodeEncodings() {
      if (original)
        return;
      original = {};
      if (!iconv.supportsNodeEncodingsExtension) {
        console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node");
        console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");
        return;
      }
      var nodeNativeEncodings = {
        hex: true,
        utf8: true,
        "utf-8": true,
        ascii: true,
        binary: true,
        base64: true,
        ucs2: true,
        "ucs-2": true,
        utf16le: true,
        "utf-16le": true
      };
      Buffer2.isNativeEncoding = function(enc) {
        return enc && nodeNativeEncodings[enc.toLowerCase()];
      };
      var SlowBuffer = require("buffer").SlowBuffer;
      original.SlowBufferToString = SlowBuffer.prototype.toString;
      SlowBuffer.prototype.toString = function(encoding, start, end) {
        encoding = String(encoding || "utf8").toLowerCase();
        if (Buffer2.isNativeEncoding(encoding))
          return original.SlowBufferToString.call(this, encoding, start, end);
        if (typeof start == "undefined")
          start = 0;
        if (typeof end == "undefined")
          end = this.length;
        return iconv.decode(this.slice(start, end), encoding);
      };
      original.SlowBufferWrite = SlowBuffer.prototype.write;
      SlowBuffer.prototype.write = function(string, offset, length, encoding) {
        if (isFinite(offset)) {
          if (!isFinite(length)) {
            encoding = length;
            length = void 0;
          }
        } else {
          var swap = encoding;
          encoding = offset;
          offset = length;
          length = swap;
        }
        offset = +offset || 0;
        var remaining = this.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = +length;
          if (length > remaining) {
            length = remaining;
          }
        }
        encoding = String(encoding || "utf8").toLowerCase();
        if (Buffer2.isNativeEncoding(encoding))
          return original.SlowBufferWrite.call(this, string, offset, length, encoding);
        if (string.length > 0 && (length < 0 || offset < 0))
          throw new RangeError("attempt to write beyond buffer bounds");
        var buf = iconv.encode(string, encoding);
        if (buf.length < length)
          length = buf.length;
        buf.copy(this, offset, 0, length);
        return length;
      };
      original.BufferIsEncoding = Buffer2.isEncoding;
      Buffer2.isEncoding = function(encoding) {
        return Buffer2.isNativeEncoding(encoding) || iconv.encodingExists(encoding);
      };
      original.BufferByteLength = Buffer2.byteLength;
      Buffer2.byteLength = SlowBuffer.byteLength = function(str, encoding) {
        encoding = String(encoding || "utf8").toLowerCase();
        if (Buffer2.isNativeEncoding(encoding))
          return original.BufferByteLength.call(this, str, encoding);
        return iconv.encode(str, encoding).length;
      };
      original.BufferToString = Buffer2.prototype.toString;
      Buffer2.prototype.toString = function(encoding, start, end) {
        encoding = String(encoding || "utf8").toLowerCase();
        if (Buffer2.isNativeEncoding(encoding))
          return original.BufferToString.call(this, encoding, start, end);
        if (typeof start == "undefined")
          start = 0;
        if (typeof end == "undefined")
          end = this.length;
        return iconv.decode(this.slice(start, end), encoding);
      };
      original.BufferWrite = Buffer2.prototype.write;
      Buffer2.prototype.write = function(string, offset, length, encoding) {
        var _offset = offset, _length = length, _encoding = encoding;
        if (isFinite(offset)) {
          if (!isFinite(length)) {
            encoding = length;
            length = void 0;
          }
        } else {
          var swap = encoding;
          encoding = offset;
          offset = length;
          length = swap;
        }
        encoding = String(encoding || "utf8").toLowerCase();
        if (Buffer2.isNativeEncoding(encoding))
          return original.BufferWrite.call(this, string, _offset, _length, _encoding);
        offset = +offset || 0;
        var remaining = this.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = +length;
          if (length > remaining) {
            length = remaining;
          }
        }
        if (string.length > 0 && (length < 0 || offset < 0))
          throw new RangeError("attempt to write beyond buffer bounds");
        var buf = iconv.encode(string, encoding);
        if (buf.length < length)
          length = buf.length;
        buf.copy(this, offset, 0, length);
        return length;
      };
      if (iconv.supportsStreams) {
        var Readable = require("stream").Readable;
        original.ReadableSetEncoding = Readable.prototype.setEncoding;
        Readable.prototype.setEncoding = function setEncoding(enc, options) {
          this._readableState.decoder = iconv.getDecoder(enc, options);
          this._readableState.encoding = enc;
        };
        Readable.prototype.collect = iconv._collect;
      }
    };
    iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {
      if (!iconv.supportsNodeEncodingsExtension)
        return;
      if (!original)
        throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.");
      delete Buffer2.isNativeEncoding;
      var SlowBuffer = require("buffer").SlowBuffer;
      SlowBuffer.prototype.toString = original.SlowBufferToString;
      SlowBuffer.prototype.write = original.SlowBufferWrite;
      Buffer2.isEncoding = original.BufferIsEncoding;
      Buffer2.byteLength = original.BufferByteLength;
      Buffer2.prototype.toString = original.BufferToString;
      Buffer2.prototype.write = original.BufferWrite;
      if (iconv.supportsStreams) {
        var Readable = require("stream").Readable;
        Readable.prototype.setEncoding = original.ReadableSetEncoding;
        delete Readable.prototype.collect;
      }
      original = void 0;
    };
  };
});

// ../../node_modules/.pnpm/iconv-lite@0.4.24/node_modules/iconv-lite/lib/index.js
var require_lib10 = __commonJS((exports2, module3) => {
  "use strict";
  var Buffer2 = require_safer().Buffer;
  var bomHandling = require_bom_handling();
  var iconv = module3.exports;
  iconv.encodings = null;
  iconv.defaultCharUnicode = "�";
  iconv.defaultCharSingleByte = "?";
  iconv.encode = function encode(str, encoding, options) {
    str = "" + (str || "");
    var encoder = iconv.getEncoder(encoding, options);
    var res = encoder.write(str);
    var trail = encoder.end();
    return trail && trail.length > 0 ? Buffer2.concat([res, trail]) : res;
  };
  iconv.decode = function decode(buf, encoding, options) {
    if (typeof buf === "string") {
      if (!iconv.skipDecodeWarning) {
        console.error("Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding");
        iconv.skipDecodeWarning = true;
      }
      buf = Buffer2.from("" + (buf || ""), "binary");
    }
    var decoder = iconv.getDecoder(encoding, options);
    var res = decoder.write(buf);
    var trail = decoder.end();
    return trail ? res + trail : res;
  };
  iconv.encodingExists = function encodingExists(enc) {
    try {
      iconv.getCodec(enc);
      return true;
    } catch (e) {
      return false;
    }
  };
  iconv.toEncoding = iconv.encode;
  iconv.fromEncoding = iconv.decode;
  iconv._codecDataCache = {};
  iconv.getCodec = function getCodec(encoding) {
    if (!iconv.encodings)
      iconv.encodings = require_encodings();
    var enc = iconv._canonicalizeEncoding(encoding);
    var codecOptions = {};
    while (true) {
      var codec = iconv._codecDataCache[enc];
      if (codec)
        return codec;
      var codecDef = iconv.encodings[enc];
      switch (typeof codecDef) {
        case "string":
          enc = codecDef;
          break;
        case "object":
          for (var key in codecDef)
            codecOptions[key] = codecDef[key];
          if (!codecOptions.encodingName)
            codecOptions.encodingName = enc;
          enc = codecDef.type;
          break;
        case "function":
          if (!codecOptions.encodingName)
            codecOptions.encodingName = enc;
          codec = new codecDef(codecOptions, iconv);
          iconv._codecDataCache[codecOptions.encodingName] = codec;
          return codec;
        default:
          throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '" + enc + "')");
      }
    }
  };
  iconv._canonicalizeEncoding = function(encoding) {
    return ("" + encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
  };
  iconv.getEncoder = function getEncoder(encoding, options) {
    var codec = iconv.getCodec(encoding), encoder = new codec.encoder(options, codec);
    if (codec.bomAware && options && options.addBOM)
      encoder = new bomHandling.PrependBOM(encoder, options);
    return encoder;
  };
  iconv.getDecoder = function getDecoder(encoding, options) {
    var codec = iconv.getCodec(encoding), decoder = new codec.decoder(options, codec);
    if (codec.bomAware && !(options && options.stripBOM === false))
      decoder = new bomHandling.StripBOM(decoder, options);
    return decoder;
  };
  var nodeVer = typeof process !== "undefined" && process.versions && process.versions.node;
  if (nodeVer) {
    var nodeVerArr = nodeVer.split(".").map(Number);
    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {
      require_streams()(iconv);
    }
    require_extend_node()(iconv);
  }
  if (false) {
    console.error("iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.");
  }
});

// ../../node_modules/.pnpm/unpipe@1.0.0/node_modules/unpipe/index.js
var require_unpipe = __commonJS((exports2, module3) => {
  /*!
   * unpipe
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  module3.exports = unpipe;
  function hasPipeDataListeners(stream) {
    var listeners = stream.listeners("data");
    for (var i = 0; i < listeners.length; i++) {
      if (listeners[i].name === "ondata") {
        return true;
      }
    }
    return false;
  }
  function unpipe(stream) {
    if (!stream) {
      throw new TypeError("argument stream is required");
    }
    if (typeof stream.unpipe === "function") {
      stream.unpipe();
      return;
    }
    if (!hasPipeDataListeners(stream)) {
      return;
    }
    var listener;
    var listeners = stream.listeners("close");
    for (var i = 0; i < listeners.length; i++) {
      listener = listeners[i];
      if (listener.name !== "cleanup" && listener.name !== "onclose") {
        continue;
      }
      listener.call(stream);
    }
  }
});

// ../../node_modules/.pnpm/raw-body@2.4.0/node_modules/raw-body/index.js
var require_raw_body = __commonJS((exports2, module3) => {
  /*!
   * raw-body
   * Copyright(c) 2013-2014 Jonathan Ong
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var bytes = require_bytes();
  var createError = require_http_errors();
  var iconv = require_lib10();
  var unpipe = require_unpipe();
  module3.exports = getRawBody;
  var ICONV_ENCODING_MESSAGE_REGEXP = /^Encoding not recognized: /;
  function getDecoder(encoding) {
    if (!encoding)
      return null;
    try {
      return iconv.getDecoder(encoding);
    } catch (e) {
      if (!ICONV_ENCODING_MESSAGE_REGEXP.test(e.message))
        throw e;
      throw createError(415, "specified encoding unsupported", {
        encoding,
        type: "encoding.unsupported"
      });
    }
  }
  function getRawBody(stream, options, callback) {
    var done = callback;
    var opts = options || {};
    if (options === true || typeof options === "string") {
      opts = {
        encoding: options
      };
    }
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    if (done !== void 0 && typeof done !== "function") {
      throw new TypeError("argument callback must be a function");
    }
    if (!done && !global.Promise) {
      throw new TypeError("argument callback is required");
    }
    var encoding = opts.encoding !== true ? opts.encoding : "utf-8";
    var limit = bytes.parse(opts.limit);
    var length = opts.length != null && !isNaN(opts.length) ? parseInt(opts.length, 10) : null;
    if (done) {
      return readStream(stream, encoding, length, limit, done);
    }
    return new Promise(function executor(resolve, reject) {
      readStream(stream, encoding, length, limit, function onRead(err, buf) {
        if (err)
          return reject(err);
        resolve(buf);
      });
    });
  }
  function halt(stream) {
    unpipe(stream);
    if (typeof stream.pause === "function") {
      stream.pause();
    }
  }
  function readStream(stream, encoding, length, limit, callback) {
    var complete = false;
    var sync = true;
    if (limit !== null && length !== null && length > limit) {
      return done(createError(413, "request entity too large", {
        expected: length,
        length,
        limit,
        type: "entity.too.large"
      }));
    }
    var state = stream._readableState;
    if (stream._decoder || state && (state.encoding || state.decoder)) {
      return done(createError(500, "stream encoding should not be set", {
        type: "stream.encoding.set"
      }));
    }
    var received = 0;
    var decoder;
    try {
      decoder = getDecoder(encoding);
    } catch (err) {
      return done(err);
    }
    var buffer = decoder ? "" : [];
    stream.on("aborted", onAborted);
    stream.on("close", cleanup);
    stream.on("data", onData);
    stream.on("end", onEnd);
    stream.on("error", onEnd);
    sync = false;
    function done() {
      var args2 = new Array(arguments.length);
      for (var i = 0; i < args2.length; i++) {
        args2[i] = arguments[i];
      }
      complete = true;
      if (sync) {
        process.nextTick(invokeCallback);
      } else {
        invokeCallback();
      }
      function invokeCallback() {
        cleanup();
        if (args2[0]) {
          halt(stream);
        }
        callback.apply(null, args2);
      }
    }
    function onAborted() {
      if (complete)
        return;
      done(createError(400, "request aborted", {
        code: "ECONNABORTED",
        expected: length,
        length,
        received,
        type: "request.aborted"
      }));
    }
    function onData(chunk) {
      if (complete)
        return;
      received += chunk.length;
      if (limit !== null && received > limit) {
        done(createError(413, "request entity too large", {
          limit,
          received,
          type: "entity.too.large"
        }));
      } else if (decoder) {
        buffer += decoder.write(chunk);
      } else {
        buffer.push(chunk);
      }
    }
    function onEnd(err) {
      if (complete)
        return;
      if (err)
        return done(err);
      if (length !== null && received !== length) {
        done(createError(400, "request size did not match content length", {
          expected: length,
          length,
          received,
          type: "request.size.invalid"
        }));
      } else {
        var string = decoder ? buffer + (decoder.end() || "") : Buffer.concat(buffer);
        done(null, string);
      }
    }
    function cleanup() {
      buffer = null;
      stream.removeListener("aborted", onAborted);
      stream.removeListener("data", onData);
      stream.removeListener("end", onEnd);
      stream.removeListener("error", onEnd);
      stream.removeListener("close", cleanup);
    }
  }
});

// ../../node_modules/.pnpm/ee-first@1.1.1/node_modules/ee-first/index.js
var require_ee_first = __commonJS((exports2, module3) => {
  /*!
   * ee-first
   * Copyright(c) 2014 Jonathan Ong
   * MIT Licensed
   */
  "use strict";
  module3.exports = first;
  function first(stuff, done) {
    if (!Array.isArray(stuff))
      throw new TypeError("arg must be an array of [ee, events...] arrays");
    var cleanups = [];
    for (var i = 0; i < stuff.length; i++) {
      var arr = stuff[i];
      if (!Array.isArray(arr) || arr.length < 2)
        throw new TypeError("each array member must be [ee, events...]");
      var ee = arr[0];
      for (var j = 1; j < arr.length; j++) {
        var event = arr[j];
        var fn = listener(event, callback);
        ee.on(event, fn);
        cleanups.push({
          ee,
          event,
          fn
        });
      }
    }
    function callback() {
      cleanup();
      done.apply(null, arguments);
    }
    function cleanup() {
      var x;
      for (var i2 = 0; i2 < cleanups.length; i2++) {
        x = cleanups[i2];
        x.ee.removeListener(x.event, x.fn);
      }
    }
    function thunk(fn2) {
      done = fn2;
    }
    thunk.cancel = cleanup;
    return thunk;
  }
  function listener(event, done) {
    return function onevent(arg1) {
      var args2 = new Array(arguments.length);
      var ee = this;
      var err = event === "error" ? arg1 : null;
      for (var i = 0; i < args2.length; i++) {
        args2[i] = arguments[i];
      }
      done(err, ee, event, args2);
    };
  }
});

// ../../node_modules/.pnpm/on-finished@2.3.0/node_modules/on-finished/index.js
var require_on_finished = __commonJS((exports2, module3) => {
  /*!
   * on-finished
   * Copyright(c) 2013 Jonathan Ong
   * Copyright(c) 2014 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  module3.exports = onFinished;
  module3.exports.isFinished = isFinished;
  var first = require_ee_first();
  var defer = typeof setImmediate === "function" ? setImmediate : function(fn) {
    process.nextTick(fn.bind.apply(fn, arguments));
  };
  function onFinished(msg, listener) {
    if (isFinished(msg) !== false) {
      defer(listener, null, msg);
      return msg;
    }
    attachListener(msg, listener);
    return msg;
  }
  function isFinished(msg) {
    var socket = msg.socket;
    if (typeof msg.finished === "boolean") {
      return Boolean(msg.finished || socket && !socket.writable);
    }
    if (typeof msg.complete === "boolean") {
      return Boolean(msg.upgrade || !socket || !socket.readable || msg.complete && !msg.readable);
    }
    return void 0;
  }
  function attachFinishedListener(msg, callback) {
    var eeMsg;
    var eeSocket;
    var finished = false;
    function onFinish(error) {
      eeMsg.cancel();
      eeSocket.cancel();
      finished = true;
      callback(error);
    }
    eeMsg = eeSocket = first([[msg, "end", "finish"]], onFinish);
    function onSocket(socket) {
      msg.removeListener("socket", onSocket);
      if (finished)
        return;
      if (eeMsg !== eeSocket)
        return;
      eeSocket = first([[socket, "error", "close"]], onFinish);
    }
    if (msg.socket) {
      onSocket(msg.socket);
      return;
    }
    msg.on("socket", onSocket);
    if (msg.socket === void 0) {
      patchAssignSocket(msg, onSocket);
    }
  }
  function attachListener(msg, listener) {
    var attached = msg.__onFinished;
    if (!attached || !attached.queue) {
      attached = msg.__onFinished = createListener(msg);
      attachFinishedListener(msg, attached);
    }
    attached.queue.push(listener);
  }
  function createListener(msg) {
    function listener(err) {
      if (msg.__onFinished === listener)
        msg.__onFinished = null;
      if (!listener.queue)
        return;
      var queue = listener.queue;
      listener.queue = null;
      for (var i = 0; i < queue.length; i++) {
        queue[i](err, msg);
      }
    }
    listener.queue = [];
    return listener;
  }
  function patchAssignSocket(res, callback) {
    var assignSocket = res.assignSocket;
    if (typeof assignSocket !== "function")
      return;
    res.assignSocket = function _assignSocket(socket) {
      assignSocket.call(this, socket);
      callback(socket);
    };
  }
});

// ../../node_modules/.pnpm/body-parser@1.19.0/node_modules/body-parser/lib/read.js
var require_read = __commonJS((exports2, module3) => {
  /*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var createError = require_http_errors();
  var getBody = require_raw_body();
  var iconv = require_lib10();
  var onFinished = require_on_finished();
  var zlib = require("zlib");
  module3.exports = read;
  function read(req, res, next, parse, debug3, options) {
    var length;
    var opts = options;
    var stream;
    req._body = true;
    var encoding = opts.encoding !== null ? opts.encoding : null;
    var verify = opts.verify;
    try {
      stream = contentstream(req, debug3, opts.inflate);
      length = stream.length;
      stream.length = void 0;
    } catch (err) {
      return next(err);
    }
    opts.length = length;
    opts.encoding = verify ? null : encoding;
    if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {
      return next(createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
        charset: encoding.toLowerCase(),
        type: "charset.unsupported"
      }));
    }
    debug3("read body");
    getBody(stream, opts, function(error, body) {
      if (error) {
        var _error;
        if (error.type === "encoding.unsupported") {
          _error = createError(415, 'unsupported charset "' + encoding.toUpperCase() + '"', {
            charset: encoding.toLowerCase(),
            type: "charset.unsupported"
          });
        } else {
          _error = createError(400, error);
        }
        stream.resume();
        onFinished(req, function onfinished() {
          next(createError(400, _error));
        });
        return;
      }
      if (verify) {
        try {
          debug3("verify body");
          verify(req, res, body, encoding);
        } catch (err) {
          next(createError(403, err, {
            body,
            type: err.type || "entity.verify.failed"
          }));
          return;
        }
      }
      var str = body;
      try {
        debug3("parse body");
        str = typeof body !== "string" && encoding !== null ? iconv.decode(body, encoding) : body;
        req.body = parse(str);
      } catch (err) {
        next(createError(400, err, {
          body: str,
          type: err.type || "entity.parse.failed"
        }));
        return;
      }
      next();
    });
  }
  function contentstream(req, debug3, inflate) {
    var encoding = (req.headers["content-encoding"] || "identity").toLowerCase();
    var length = req.headers["content-length"];
    var stream;
    debug3('content-encoding "%s"', encoding);
    if (inflate === false && encoding !== "identity") {
      throw createError(415, "content encoding unsupported", {
        encoding,
        type: "encoding.unsupported"
      });
    }
    switch (encoding) {
      case "deflate":
        stream = zlib.createInflate();
        debug3("inflate body");
        req.pipe(stream);
        break;
      case "gzip":
        stream = zlib.createGunzip();
        debug3("gunzip body");
        req.pipe(stream);
        break;
      case "identity":
        stream = req;
        stream.length = length;
        break;
      default:
        throw createError(415, 'unsupported content encoding "' + encoding + '"', {
          encoding,
          type: "encoding.unsupported"
        });
    }
    return stream;
  }
});

// ../../node_modules/.pnpm/media-typer@0.3.0/node_modules/media-typer/index.js
var require_media_typer = __commonJS((exports2) => {
  /*!
   * media-typer
   * Copyright(c) 2014 Douglas Christopher Wilson
   * MIT Licensed
   */
  var paramRegExp = /; *([!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) *= *("(?:[ !\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u0020-\u007e])*"|[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+) */g;
  var textRegExp = /^[\u0020-\u007e\u0080-\u00ff]+$/;
  var tokenRegExp = /^[!#$%&'\*\+\-\.0-9A-Z\^_`a-z\|~]+$/;
  var qescRegExp = /\\([\u0000-\u007f])/g;
  var quoteRegExp = /([\\"])/g;
  var subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/;
  var typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/;
  var typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;
  exports2.format = format11;
  exports2.parse = parse;
  function format11(obj) {
    if (!obj || typeof obj !== "object") {
      throw new TypeError("argument obj is required");
    }
    var parameters = obj.parameters;
    var subtype = obj.subtype;
    var suffix = obj.suffix;
    var type = obj.type;
    if (!type || !typeNameRegExp.test(type)) {
      throw new TypeError("invalid type");
    }
    if (!subtype || !subtypeNameRegExp.test(subtype)) {
      throw new TypeError("invalid subtype");
    }
    var string = type + "/" + subtype;
    if (suffix) {
      if (!typeNameRegExp.test(suffix)) {
        throw new TypeError("invalid suffix");
      }
      string += "+" + suffix;
    }
    if (parameters && typeof parameters === "object") {
      var param;
      var params = Object.keys(parameters).sort();
      for (var i = 0; i < params.length; i++) {
        param = params[i];
        if (!tokenRegExp.test(param)) {
          throw new TypeError("invalid parameter name");
        }
        string += "; " + param + "=" + qstring(parameters[param]);
      }
    }
    return string;
  }
  function parse(string) {
    if (!string) {
      throw new TypeError("argument string is required");
    }
    if (typeof string === "object") {
      string = getcontenttype(string);
    }
    if (typeof string !== "string") {
      throw new TypeError("argument string is required to be a string");
    }
    var index = string.indexOf(";");
    var type = index !== -1 ? string.substr(0, index) : string;
    var key;
    var match;
    var obj = splitType(type);
    var params = {};
    var value;
    paramRegExp.lastIndex = index;
    while (match = paramRegExp.exec(string)) {
      if (match.index !== index) {
        throw new TypeError("invalid parameter format");
      }
      index += match[0].length;
      key = match[1].toLowerCase();
      value = match[2];
      if (value[0] === '"') {
        value = value.substr(1, value.length - 2).replace(qescRegExp, "$1");
      }
      params[key] = value;
    }
    if (index !== -1 && index !== string.length) {
      throw new TypeError("invalid parameter format");
    }
    obj.parameters = params;
    return obj;
  }
  function getcontenttype(obj) {
    if (typeof obj.getHeader === "function") {
      return obj.getHeader("content-type");
    }
    if (typeof obj.headers === "object") {
      return obj.headers && obj.headers["content-type"];
    }
  }
  function qstring(val) {
    var str = String(val);
    if (tokenRegExp.test(str)) {
      return str;
    }
    if (str.length > 0 && !textRegExp.test(str)) {
      throw new TypeError("invalid parameter value");
    }
    return '"' + str.replace(quoteRegExp, "\\$1") + '"';
  }
  function splitType(string) {
    var match = typeRegExp.exec(string.toLowerCase());
    if (!match) {
      throw new TypeError("invalid media type");
    }
    var type = match[1];
    var subtype = match[2];
    var suffix;
    var index = subtype.lastIndexOf("+");
    if (index !== -1) {
      suffix = subtype.substr(index + 1);
      subtype = subtype.substr(0, index);
    }
    var obj = {
      type,
      subtype,
      suffix
    };
    return obj;
  }
});

// ../../node_modules/.pnpm/mime-db@1.44.0/node_modules/mime-db/db.json
var require_db = __commonJS((exports2, module3) => {
  module3.exports = {
    "application/1d-interleaved-parityfec": {
      source: "iana"
    },
    "application/3gpdash-qoe-report+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/3gpp-ims+xml": {
      source: "iana",
      compressible: true
    },
    "application/a2l": {
      source: "iana"
    },
    "application/activemessage": {
      source: "iana"
    },
    "application/activity+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-costmap+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-costmapfilter+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-directory+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointcost+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointcostparams+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointprop+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointpropparams+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-error+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-networkmap+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-networkmapfilter+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-updatestreamcontrol+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-updatestreamparams+json": {
      source: "iana",
      compressible: true
    },
    "application/aml": {
      source: "iana"
    },
    "application/andrew-inset": {
      source: "iana",
      extensions: ["ez"]
    },
    "application/applefile": {
      source: "iana"
    },
    "application/applixware": {
      source: "apache",
      extensions: ["aw"]
    },
    "application/atf": {
      source: "iana"
    },
    "application/atfx": {
      source: "iana"
    },
    "application/atom+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atom"]
    },
    "application/atomcat+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomcat"]
    },
    "application/atomdeleted+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomdeleted"]
    },
    "application/atomicmail": {
      source: "iana"
    },
    "application/atomsvc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomsvc"]
    },
    "application/atsc-dwd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dwd"]
    },
    "application/atsc-dynamic-event-message": {
      source: "iana"
    },
    "application/atsc-held+xml": {
      source: "iana",
      compressible: true,
      extensions: ["held"]
    },
    "application/atsc-rdt+json": {
      source: "iana",
      compressible: true
    },
    "application/atsc-rsat+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rsat"]
    },
    "application/atxml": {
      source: "iana"
    },
    "application/auth-policy+xml": {
      source: "iana",
      compressible: true
    },
    "application/bacnet-xdd+zip": {
      source: "iana",
      compressible: false
    },
    "application/batch-smtp": {
      source: "iana"
    },
    "application/bdoc": {
      compressible: false,
      extensions: ["bdoc"]
    },
    "application/beep+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/calendar+json": {
      source: "iana",
      compressible: true
    },
    "application/calendar+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xcs"]
    },
    "application/call-completion": {
      source: "iana"
    },
    "application/cals-1840": {
      source: "iana"
    },
    "application/cap+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/cbor": {
      source: "iana"
    },
    "application/cbor-seq": {
      source: "iana"
    },
    "application/cccex": {
      source: "iana"
    },
    "application/ccmp+xml": {
      source: "iana",
      compressible: true
    },
    "application/ccxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ccxml"]
    },
    "application/cdfx+xml": {
      source: "iana",
      compressible: true,
      extensions: ["cdfx"]
    },
    "application/cdmi-capability": {
      source: "iana",
      extensions: ["cdmia"]
    },
    "application/cdmi-container": {
      source: "iana",
      extensions: ["cdmic"]
    },
    "application/cdmi-domain": {
      source: "iana",
      extensions: ["cdmid"]
    },
    "application/cdmi-object": {
      source: "iana",
      extensions: ["cdmio"]
    },
    "application/cdmi-queue": {
      source: "iana",
      extensions: ["cdmiq"]
    },
    "application/cdni": {
      source: "iana"
    },
    "application/cea": {
      source: "iana"
    },
    "application/cea-2018+xml": {
      source: "iana",
      compressible: true
    },
    "application/cellml+xml": {
      source: "iana",
      compressible: true
    },
    "application/cfw": {
      source: "iana"
    },
    "application/clue+xml": {
      source: "iana",
      compressible: true
    },
    "application/clue_info+xml": {
      source: "iana",
      compressible: true
    },
    "application/cms": {
      source: "iana"
    },
    "application/cnrp+xml": {
      source: "iana",
      compressible: true
    },
    "application/coap-group+json": {
      source: "iana",
      compressible: true
    },
    "application/coap-payload": {
      source: "iana"
    },
    "application/commonground": {
      source: "iana"
    },
    "application/conference-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/cose": {
      source: "iana"
    },
    "application/cose-key": {
      source: "iana"
    },
    "application/cose-key-set": {
      source: "iana"
    },
    "application/cpl+xml": {
      source: "iana",
      compressible: true
    },
    "application/csrattrs": {
      source: "iana"
    },
    "application/csta+xml": {
      source: "iana",
      compressible: true
    },
    "application/cstadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/csvm+json": {
      source: "iana",
      compressible: true
    },
    "application/cu-seeme": {
      source: "apache",
      extensions: ["cu"]
    },
    "application/cwt": {
      source: "iana"
    },
    "application/cybercash": {
      source: "iana"
    },
    "application/dart": {
      compressible: true
    },
    "application/dash+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpd"]
    },
    "application/dashdelta": {
      source: "iana"
    },
    "application/davmount+xml": {
      source: "iana",
      compressible: true,
      extensions: ["davmount"]
    },
    "application/dca-rft": {
      source: "iana"
    },
    "application/dcd": {
      source: "iana"
    },
    "application/dec-dx": {
      source: "iana"
    },
    "application/dialog-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/dicom": {
      source: "iana"
    },
    "application/dicom+json": {
      source: "iana",
      compressible: true
    },
    "application/dicom+xml": {
      source: "iana",
      compressible: true
    },
    "application/dii": {
      source: "iana"
    },
    "application/dit": {
      source: "iana"
    },
    "application/dns": {
      source: "iana"
    },
    "application/dns+json": {
      source: "iana",
      compressible: true
    },
    "application/dns-message": {
      source: "iana"
    },
    "application/docbook+xml": {
      source: "apache",
      compressible: true,
      extensions: ["dbk"]
    },
    "application/dots+cbor": {
      source: "iana"
    },
    "application/dskpp+xml": {
      source: "iana",
      compressible: true
    },
    "application/dssc+der": {
      source: "iana",
      extensions: ["dssc"]
    },
    "application/dssc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdssc"]
    },
    "application/dvcs": {
      source: "iana"
    },
    "application/ecmascript": {
      source: "iana",
      compressible: true,
      extensions: ["ecma", "es"]
    },
    "application/edi-consent": {
      source: "iana"
    },
    "application/edi-x12": {
      source: "iana",
      compressible: false
    },
    "application/edifact": {
      source: "iana",
      compressible: false
    },
    "application/efi": {
      source: "iana"
    },
    "application/emergencycalldata.comment+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.control+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.deviceinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.ecall.msd": {
      source: "iana"
    },
    "application/emergencycalldata.providerinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.serviceinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.subscriberinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.veds+xml": {
      source: "iana",
      compressible: true
    },
    "application/emma+xml": {
      source: "iana",
      compressible: true,
      extensions: ["emma"]
    },
    "application/emotionml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["emotionml"]
    },
    "application/encaprtp": {
      source: "iana"
    },
    "application/epp+xml": {
      source: "iana",
      compressible: true
    },
    "application/epub+zip": {
      source: "iana",
      compressible: false,
      extensions: ["epub"]
    },
    "application/eshop": {
      source: "iana"
    },
    "application/exi": {
      source: "iana",
      extensions: ["exi"]
    },
    "application/expect-ct-report+json": {
      source: "iana",
      compressible: true
    },
    "application/fastinfoset": {
      source: "iana"
    },
    "application/fastsoap": {
      source: "iana"
    },
    "application/fdt+xml": {
      source: "iana",
      compressible: true,
      extensions: ["fdt"]
    },
    "application/fhir+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/fhir+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/fido.trusted-apps+json": {
      compressible: true
    },
    "application/fits": {
      source: "iana"
    },
    "application/flexfec": {
      source: "iana"
    },
    "application/font-sfnt": {
      source: "iana"
    },
    "application/font-tdpfr": {
      source: "iana",
      extensions: ["pfr"]
    },
    "application/font-woff": {
      source: "iana",
      compressible: false
    },
    "application/framework-attributes+xml": {
      source: "iana",
      compressible: true
    },
    "application/geo+json": {
      source: "iana",
      compressible: true,
      extensions: ["geojson"]
    },
    "application/geo+json-seq": {
      source: "iana"
    },
    "application/geopackage+sqlite3": {
      source: "iana"
    },
    "application/geoxacml+xml": {
      source: "iana",
      compressible: true
    },
    "application/gltf-buffer": {
      source: "iana"
    },
    "application/gml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["gml"]
    },
    "application/gpx+xml": {
      source: "apache",
      compressible: true,
      extensions: ["gpx"]
    },
    "application/gxf": {
      source: "apache",
      extensions: ["gxf"]
    },
    "application/gzip": {
      source: "iana",
      compressible: false,
      extensions: ["gz"]
    },
    "application/h224": {
      source: "iana"
    },
    "application/held+xml": {
      source: "iana",
      compressible: true
    },
    "application/hjson": {
      extensions: ["hjson"]
    },
    "application/http": {
      source: "iana"
    },
    "application/hyperstudio": {
      source: "iana",
      extensions: ["stk"]
    },
    "application/ibe-key-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/ibe-pkg-reply+xml": {
      source: "iana",
      compressible: true
    },
    "application/ibe-pp-data": {
      source: "iana"
    },
    "application/iges": {
      source: "iana"
    },
    "application/im-iscomposing+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/index": {
      source: "iana"
    },
    "application/index.cmd": {
      source: "iana"
    },
    "application/index.obj": {
      source: "iana"
    },
    "application/index.response": {
      source: "iana"
    },
    "application/index.vnd": {
      source: "iana"
    },
    "application/inkml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ink", "inkml"]
    },
    "application/iotp": {
      source: "iana"
    },
    "application/ipfix": {
      source: "iana",
      extensions: ["ipfix"]
    },
    "application/ipp": {
      source: "iana"
    },
    "application/isup": {
      source: "iana"
    },
    "application/its+xml": {
      source: "iana",
      compressible: true,
      extensions: ["its"]
    },
    "application/java-archive": {
      source: "apache",
      compressible: false,
      extensions: ["jar", "war", "ear"]
    },
    "application/java-serialized-object": {
      source: "apache",
      compressible: false,
      extensions: ["ser"]
    },
    "application/java-vm": {
      source: "apache",
      compressible: false,
      extensions: ["class"]
    },
    "application/javascript": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["js", "mjs"]
    },
    "application/jf2feed+json": {
      source: "iana",
      compressible: true
    },
    "application/jose": {
      source: "iana"
    },
    "application/jose+json": {
      source: "iana",
      compressible: true
    },
    "application/jrd+json": {
      source: "iana",
      compressible: true
    },
    "application/json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["json", "map"]
    },
    "application/json-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/json-seq": {
      source: "iana"
    },
    "application/json5": {
      extensions: ["json5"]
    },
    "application/jsonml+json": {
      source: "apache",
      compressible: true,
      extensions: ["jsonml"]
    },
    "application/jwk+json": {
      source: "iana",
      compressible: true
    },
    "application/jwk-set+json": {
      source: "iana",
      compressible: true
    },
    "application/jwt": {
      source: "iana"
    },
    "application/kpml-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/kpml-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/ld+json": {
      source: "iana",
      compressible: true,
      extensions: ["jsonld"]
    },
    "application/lgr+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lgr"]
    },
    "application/link-format": {
      source: "iana"
    },
    "application/load-control+xml": {
      source: "iana",
      compressible: true
    },
    "application/lost+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lostxml"]
    },
    "application/lostsync+xml": {
      source: "iana",
      compressible: true
    },
    "application/lpf+zip": {
      source: "iana",
      compressible: false
    },
    "application/lxf": {
      source: "iana"
    },
    "application/mac-binhex40": {
      source: "iana",
      extensions: ["hqx"]
    },
    "application/mac-compactpro": {
      source: "apache",
      extensions: ["cpt"]
    },
    "application/macwriteii": {
      source: "iana"
    },
    "application/mads+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mads"]
    },
    "application/manifest+json": {
      charset: "UTF-8",
      compressible: true,
      extensions: ["webmanifest"]
    },
    "application/marc": {
      source: "iana",
      extensions: ["mrc"]
    },
    "application/marcxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mrcx"]
    },
    "application/mathematica": {
      source: "iana",
      extensions: ["ma", "nb", "mb"]
    },
    "application/mathml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mathml"]
    },
    "application/mathml-content+xml": {
      source: "iana",
      compressible: true
    },
    "application/mathml-presentation+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-associated-procedure-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-deregister+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-envelope+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-msk+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-msk-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-protection-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-reception-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-register+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-register-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-schedule+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-user-service-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbox": {
      source: "iana",
      extensions: ["mbox"]
    },
    "application/media-policy-dataset+xml": {
      source: "iana",
      compressible: true
    },
    "application/media_control+xml": {
      source: "iana",
      compressible: true
    },
    "application/mediaservercontrol+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mscml"]
    },
    "application/merge-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/metalink+xml": {
      source: "apache",
      compressible: true,
      extensions: ["metalink"]
    },
    "application/metalink4+xml": {
      source: "iana",
      compressible: true,
      extensions: ["meta4"]
    },
    "application/mets+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mets"]
    },
    "application/mf4": {
      source: "iana"
    },
    "application/mikey": {
      source: "iana"
    },
    "application/mipc": {
      source: "iana"
    },
    "application/mmt-aei+xml": {
      source: "iana",
      compressible: true,
      extensions: ["maei"]
    },
    "application/mmt-usd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["musd"]
    },
    "application/mods+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mods"]
    },
    "application/moss-keys": {
      source: "iana"
    },
    "application/moss-signature": {
      source: "iana"
    },
    "application/mosskey-data": {
      source: "iana"
    },
    "application/mosskey-request": {
      source: "iana"
    },
    "application/mp21": {
      source: "iana",
      extensions: ["m21", "mp21"]
    },
    "application/mp4": {
      source: "iana",
      extensions: ["mp4s", "m4p"]
    },
    "application/mpeg4-generic": {
      source: "iana"
    },
    "application/mpeg4-iod": {
      source: "iana"
    },
    "application/mpeg4-iod-xmt": {
      source: "iana"
    },
    "application/mrb-consumer+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdf"]
    },
    "application/mrb-publish+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdf"]
    },
    "application/msc-ivr+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/msc-mixer+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/msword": {
      source: "iana",
      compressible: false,
      extensions: ["doc", "dot"]
    },
    "application/mud+json": {
      source: "iana",
      compressible: true
    },
    "application/multipart-core": {
      source: "iana"
    },
    "application/mxf": {
      source: "iana",
      extensions: ["mxf"]
    },
    "application/n-quads": {
      source: "iana",
      extensions: ["nq"]
    },
    "application/n-triples": {
      source: "iana",
      extensions: ["nt"]
    },
    "application/nasdata": {
      source: "iana"
    },
    "application/news-checkgroups": {
      source: "iana",
      charset: "US-ASCII"
    },
    "application/news-groupinfo": {
      source: "iana",
      charset: "US-ASCII"
    },
    "application/news-transmission": {
      source: "iana"
    },
    "application/nlsml+xml": {
      source: "iana",
      compressible: true
    },
    "application/node": {
      source: "iana",
      extensions: ["cjs"]
    },
    "application/nss": {
      source: "iana"
    },
    "application/ocsp-request": {
      source: "iana"
    },
    "application/ocsp-response": {
      source: "iana"
    },
    "application/octet-stream": {
      source: "iana",
      compressible: false,
      extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
    },
    "application/oda": {
      source: "iana",
      extensions: ["oda"]
    },
    "application/odm+xml": {
      source: "iana",
      compressible: true
    },
    "application/odx": {
      source: "iana"
    },
    "application/oebps-package+xml": {
      source: "iana",
      compressible: true,
      extensions: ["opf"]
    },
    "application/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["ogx"]
    },
    "application/omdoc+xml": {
      source: "apache",
      compressible: true,
      extensions: ["omdoc"]
    },
    "application/onenote": {
      source: "apache",
      extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
    },
    "application/oscore": {
      source: "iana"
    },
    "application/oxps": {
      source: "iana",
      extensions: ["oxps"]
    },
    "application/p2p-overlay+xml": {
      source: "iana",
      compressible: true,
      extensions: ["relo"]
    },
    "application/parityfec": {
      source: "iana"
    },
    "application/passport": {
      source: "iana"
    },
    "application/patch-ops-error+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xer"]
    },
    "application/pdf": {
      source: "iana",
      compressible: false,
      extensions: ["pdf"]
    },
    "application/pdx": {
      source: "iana"
    },
    "application/pem-certificate-chain": {
      source: "iana"
    },
    "application/pgp-encrypted": {
      source: "iana",
      compressible: false,
      extensions: ["pgp"]
    },
    "application/pgp-keys": {
      source: "iana"
    },
    "application/pgp-signature": {
      source: "iana",
      extensions: ["asc", "sig"]
    },
    "application/pics-rules": {
      source: "apache",
      extensions: ["prf"]
    },
    "application/pidf+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/pidf-diff+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/pkcs10": {
      source: "iana",
      extensions: ["p10"]
    },
    "application/pkcs12": {
      source: "iana"
    },
    "application/pkcs7-mime": {
      source: "iana",
      extensions: ["p7m", "p7c"]
    },
    "application/pkcs7-signature": {
      source: "iana",
      extensions: ["p7s"]
    },
    "application/pkcs8": {
      source: "iana",
      extensions: ["p8"]
    },
    "application/pkcs8-encrypted": {
      source: "iana"
    },
    "application/pkix-attr-cert": {
      source: "iana",
      extensions: ["ac"]
    },
    "application/pkix-cert": {
      source: "iana",
      extensions: ["cer"]
    },
    "application/pkix-crl": {
      source: "iana",
      extensions: ["crl"]
    },
    "application/pkix-pkipath": {
      source: "iana",
      extensions: ["pkipath"]
    },
    "application/pkixcmp": {
      source: "iana",
      extensions: ["pki"]
    },
    "application/pls+xml": {
      source: "iana",
      compressible: true,
      extensions: ["pls"]
    },
    "application/poc-settings+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/postscript": {
      source: "iana",
      compressible: true,
      extensions: ["ai", "eps", "ps"]
    },
    "application/ppsp-tracker+json": {
      source: "iana",
      compressible: true
    },
    "application/problem+json": {
      source: "iana",
      compressible: true
    },
    "application/problem+xml": {
      source: "iana",
      compressible: true
    },
    "application/provenance+xml": {
      source: "iana",
      compressible: true,
      extensions: ["provx"]
    },
    "application/prs.alvestrand.titrax-sheet": {
      source: "iana"
    },
    "application/prs.cww": {
      source: "iana",
      extensions: ["cww"]
    },
    "application/prs.hpub+zip": {
      source: "iana",
      compressible: false
    },
    "application/prs.nprend": {
      source: "iana"
    },
    "application/prs.plucker": {
      source: "iana"
    },
    "application/prs.rdf-xml-crypt": {
      source: "iana"
    },
    "application/prs.xsf+xml": {
      source: "iana",
      compressible: true
    },
    "application/pskc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["pskcxml"]
    },
    "application/pvd+json": {
      source: "iana",
      compressible: true
    },
    "application/qsig": {
      source: "iana"
    },
    "application/raml+yaml": {
      compressible: true,
      extensions: ["raml"]
    },
    "application/raptorfec": {
      source: "iana"
    },
    "application/rdap+json": {
      source: "iana",
      compressible: true
    },
    "application/rdf+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rdf", "owl"]
    },
    "application/reginfo+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rif"]
    },
    "application/relax-ng-compact-syntax": {
      source: "iana",
      extensions: ["rnc"]
    },
    "application/remote-printing": {
      source: "iana"
    },
    "application/reputon+json": {
      source: "iana",
      compressible: true
    },
    "application/resource-lists+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rl"]
    },
    "application/resource-lists-diff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rld"]
    },
    "application/rfc+xml": {
      source: "iana",
      compressible: true
    },
    "application/riscos": {
      source: "iana"
    },
    "application/rlmi+xml": {
      source: "iana",
      compressible: true
    },
    "application/rls-services+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rs"]
    },
    "application/route-apd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rapd"]
    },
    "application/route-s-tsid+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sls"]
    },
    "application/route-usd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rusd"]
    },
    "application/rpki-ghostbusters": {
      source: "iana",
      extensions: ["gbr"]
    },
    "application/rpki-manifest": {
      source: "iana",
      extensions: ["mft"]
    },
    "application/rpki-publication": {
      source: "iana"
    },
    "application/rpki-roa": {
      source: "iana",
      extensions: ["roa"]
    },
    "application/rpki-updown": {
      source: "iana"
    },
    "application/rsd+xml": {
      source: "apache",
      compressible: true,
      extensions: ["rsd"]
    },
    "application/rss+xml": {
      source: "apache",
      compressible: true,
      extensions: ["rss"]
    },
    "application/rtf": {
      source: "iana",
      compressible: true,
      extensions: ["rtf"]
    },
    "application/rtploopback": {
      source: "iana"
    },
    "application/rtx": {
      source: "iana"
    },
    "application/samlassertion+xml": {
      source: "iana",
      compressible: true
    },
    "application/samlmetadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/sbe": {
      source: "iana"
    },
    "application/sbml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sbml"]
    },
    "application/scaip+xml": {
      source: "iana",
      compressible: true
    },
    "application/scim+json": {
      source: "iana",
      compressible: true
    },
    "application/scvp-cv-request": {
      source: "iana",
      extensions: ["scq"]
    },
    "application/scvp-cv-response": {
      source: "iana",
      extensions: ["scs"]
    },
    "application/scvp-vp-request": {
      source: "iana",
      extensions: ["spq"]
    },
    "application/scvp-vp-response": {
      source: "iana",
      extensions: ["spp"]
    },
    "application/sdp": {
      source: "iana",
      extensions: ["sdp"]
    },
    "application/secevent+jwt": {
      source: "iana"
    },
    "application/senml+cbor": {
      source: "iana"
    },
    "application/senml+json": {
      source: "iana",
      compressible: true
    },
    "application/senml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["senmlx"]
    },
    "application/senml-etch+cbor": {
      source: "iana"
    },
    "application/senml-etch+json": {
      source: "iana",
      compressible: true
    },
    "application/senml-exi": {
      source: "iana"
    },
    "application/sensml+cbor": {
      source: "iana"
    },
    "application/sensml+json": {
      source: "iana",
      compressible: true
    },
    "application/sensml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sensmlx"]
    },
    "application/sensml-exi": {
      source: "iana"
    },
    "application/sep+xml": {
      source: "iana",
      compressible: true
    },
    "application/sep-exi": {
      source: "iana"
    },
    "application/session-info": {
      source: "iana"
    },
    "application/set-payment": {
      source: "iana"
    },
    "application/set-payment-initiation": {
      source: "iana",
      extensions: ["setpay"]
    },
    "application/set-registration": {
      source: "iana"
    },
    "application/set-registration-initiation": {
      source: "iana",
      extensions: ["setreg"]
    },
    "application/sgml": {
      source: "iana"
    },
    "application/sgml-open-catalog": {
      source: "iana"
    },
    "application/shf+xml": {
      source: "iana",
      compressible: true,
      extensions: ["shf"]
    },
    "application/sieve": {
      source: "iana",
      extensions: ["siv", "sieve"]
    },
    "application/simple-filter+xml": {
      source: "iana",
      compressible: true
    },
    "application/simple-message-summary": {
      source: "iana"
    },
    "application/simplesymbolcontainer": {
      source: "iana"
    },
    "application/sipc": {
      source: "iana"
    },
    "application/slate": {
      source: "iana"
    },
    "application/smil": {
      source: "iana"
    },
    "application/smil+xml": {
      source: "iana",
      compressible: true,
      extensions: ["smi", "smil"]
    },
    "application/smpte336m": {
      source: "iana"
    },
    "application/soap+fastinfoset": {
      source: "iana"
    },
    "application/soap+xml": {
      source: "iana",
      compressible: true
    },
    "application/sparql-query": {
      source: "iana",
      extensions: ["rq"]
    },
    "application/sparql-results+xml": {
      source: "iana",
      compressible: true,
      extensions: ["srx"]
    },
    "application/spirits-event+xml": {
      source: "iana",
      compressible: true
    },
    "application/sql": {
      source: "iana"
    },
    "application/srgs": {
      source: "iana",
      extensions: ["gram"]
    },
    "application/srgs+xml": {
      source: "iana",
      compressible: true,
      extensions: ["grxml"]
    },
    "application/sru+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sru"]
    },
    "application/ssdl+xml": {
      source: "apache",
      compressible: true,
      extensions: ["ssdl"]
    },
    "application/ssml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ssml"]
    },
    "application/stix+json": {
      source: "iana",
      compressible: true
    },
    "application/swid+xml": {
      source: "iana",
      compressible: true,
      extensions: ["swidtag"]
    },
    "application/tamp-apex-update": {
      source: "iana"
    },
    "application/tamp-apex-update-confirm": {
      source: "iana"
    },
    "application/tamp-community-update": {
      source: "iana"
    },
    "application/tamp-community-update-confirm": {
      source: "iana"
    },
    "application/tamp-error": {
      source: "iana"
    },
    "application/tamp-sequence-adjust": {
      source: "iana"
    },
    "application/tamp-sequence-adjust-confirm": {
      source: "iana"
    },
    "application/tamp-status-query": {
      source: "iana"
    },
    "application/tamp-status-response": {
      source: "iana"
    },
    "application/tamp-update": {
      source: "iana"
    },
    "application/tamp-update-confirm": {
      source: "iana"
    },
    "application/tar": {
      compressible: true
    },
    "application/taxii+json": {
      source: "iana",
      compressible: true
    },
    "application/td+json": {
      source: "iana",
      compressible: true
    },
    "application/tei+xml": {
      source: "iana",
      compressible: true,
      extensions: ["tei", "teicorpus"]
    },
    "application/tetra_isi": {
      source: "iana"
    },
    "application/thraud+xml": {
      source: "iana",
      compressible: true,
      extensions: ["tfi"]
    },
    "application/timestamp-query": {
      source: "iana"
    },
    "application/timestamp-reply": {
      source: "iana"
    },
    "application/timestamped-data": {
      source: "iana",
      extensions: ["tsd"]
    },
    "application/tlsrpt+gzip": {
      source: "iana"
    },
    "application/tlsrpt+json": {
      source: "iana",
      compressible: true
    },
    "application/tnauthlist": {
      source: "iana"
    },
    "application/toml": {
      compressible: true,
      extensions: ["toml"]
    },
    "application/trickle-ice-sdpfrag": {
      source: "iana"
    },
    "application/trig": {
      source: "iana"
    },
    "application/ttml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ttml"]
    },
    "application/tve-trigger": {
      source: "iana"
    },
    "application/tzif": {
      source: "iana"
    },
    "application/tzif-leap": {
      source: "iana"
    },
    "application/ulpfec": {
      source: "iana"
    },
    "application/urc-grpsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/urc-ressheet+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rsheet"]
    },
    "application/urc-targetdesc+xml": {
      source: "iana",
      compressible: true
    },
    "application/urc-uisocketdesc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vcard+json": {
      source: "iana",
      compressible: true
    },
    "application/vcard+xml": {
      source: "iana",
      compressible: true
    },
    "application/vemmi": {
      source: "iana"
    },
    "application/vividence.scriptfile": {
      source: "apache"
    },
    "application/vnd.1000minds.decision-model+xml": {
      source: "iana",
      compressible: true,
      extensions: ["1km"]
    },
    "application/vnd.3gpp-prose+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp-prose-pc3ch+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp-v2x-local-service-information": {
      source: "iana"
    },
    "application/vnd.3gpp.access-transfer-events+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.bsf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.gmop+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mc-signalling-ear": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-payload": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-signalling": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-floor-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-location-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-signed+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-ue-init-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-location-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-transmission-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mid-call+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.pic-bw-large": {
      source: "iana",
      extensions: ["plb"]
    },
    "application/vnd.3gpp.pic-bw-small": {
      source: "iana",
      extensions: ["psb"]
    },
    "application/vnd.3gpp.pic-bw-var": {
      source: "iana",
      extensions: ["pvb"]
    },
    "application/vnd.3gpp.sms": {
      source: "iana"
    },
    "application/vnd.3gpp.sms+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.srvcc-ext+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.srvcc-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.state-and-event-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.ussd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp2.bcmcsinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp2.sms": {
      source: "iana"
    },
    "application/vnd.3gpp2.tcap": {
      source: "iana",
      extensions: ["tcap"]
    },
    "application/vnd.3lightssoftware.imagescal": {
      source: "iana"
    },
    "application/vnd.3m.post-it-notes": {
      source: "iana",
      extensions: ["pwn"]
    },
    "application/vnd.accpac.simply.aso": {
      source: "iana",
      extensions: ["aso"]
    },
    "application/vnd.accpac.simply.imp": {
      source: "iana",
      extensions: ["imp"]
    },
    "application/vnd.acucobol": {
      source: "iana",
      extensions: ["acu"]
    },
    "application/vnd.acucorp": {
      source: "iana",
      extensions: ["atc", "acutc"]
    },
    "application/vnd.adobe.air-application-installer-package+zip": {
      source: "apache",
      compressible: false,
      extensions: ["air"]
    },
    "application/vnd.adobe.flash.movie": {
      source: "iana"
    },
    "application/vnd.adobe.formscentral.fcdt": {
      source: "iana",
      extensions: ["fcdt"]
    },
    "application/vnd.adobe.fxp": {
      source: "iana",
      extensions: ["fxp", "fxpl"]
    },
    "application/vnd.adobe.partial-upload": {
      source: "iana"
    },
    "application/vnd.adobe.xdp+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdp"]
    },
    "application/vnd.adobe.xfdf": {
      source: "iana",
      extensions: ["xfdf"]
    },
    "application/vnd.aether.imp": {
      source: "iana"
    },
    "application/vnd.afpc.afplinedata": {
      source: "iana"
    },
    "application/vnd.afpc.afplinedata-pagedef": {
      source: "iana"
    },
    "application/vnd.afpc.foca-charset": {
      source: "iana"
    },
    "application/vnd.afpc.foca-codedfont": {
      source: "iana"
    },
    "application/vnd.afpc.foca-codepage": {
      source: "iana"
    },
    "application/vnd.afpc.modca": {
      source: "iana"
    },
    "application/vnd.afpc.modca-formdef": {
      source: "iana"
    },
    "application/vnd.afpc.modca-mediummap": {
      source: "iana"
    },
    "application/vnd.afpc.modca-objectcontainer": {
      source: "iana"
    },
    "application/vnd.afpc.modca-overlay": {
      source: "iana"
    },
    "application/vnd.afpc.modca-pagesegment": {
      source: "iana"
    },
    "application/vnd.ah-barcode": {
      source: "iana"
    },
    "application/vnd.ahead.space": {
      source: "iana",
      extensions: ["ahead"]
    },
    "application/vnd.airzip.filesecure.azf": {
      source: "iana",
      extensions: ["azf"]
    },
    "application/vnd.airzip.filesecure.azs": {
      source: "iana",
      extensions: ["azs"]
    },
    "application/vnd.amadeus+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.amazon.ebook": {
      source: "apache",
      extensions: ["azw"]
    },
    "application/vnd.amazon.mobi8-ebook": {
      source: "iana"
    },
    "application/vnd.americandynamics.acc": {
      source: "iana",
      extensions: ["acc"]
    },
    "application/vnd.amiga.ami": {
      source: "iana",
      extensions: ["ami"]
    },
    "application/vnd.amundsen.maze+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.android.ota": {
      source: "iana"
    },
    "application/vnd.android.package-archive": {
      source: "apache",
      compressible: false,
      extensions: ["apk"]
    },
    "application/vnd.anki": {
      source: "iana"
    },
    "application/vnd.anser-web-certificate-issue-initiation": {
      source: "iana",
      extensions: ["cii"]
    },
    "application/vnd.anser-web-funds-transfer-initiation": {
      source: "apache",
      extensions: ["fti"]
    },
    "application/vnd.antix.game-component": {
      source: "iana",
      extensions: ["atx"]
    },
    "application/vnd.apache.thrift.binary": {
      source: "iana"
    },
    "application/vnd.apache.thrift.compact": {
      source: "iana"
    },
    "application/vnd.apache.thrift.json": {
      source: "iana"
    },
    "application/vnd.api+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.aplextor.warrp+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.apothekende.reservation+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.apple.installer+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpkg"]
    },
    "application/vnd.apple.keynote": {
      source: "iana",
      extensions: ["keynote"]
    },
    "application/vnd.apple.mpegurl": {
      source: "iana",
      extensions: ["m3u8"]
    },
    "application/vnd.apple.numbers": {
      source: "iana",
      extensions: ["numbers"]
    },
    "application/vnd.apple.pages": {
      source: "iana",
      extensions: ["pages"]
    },
    "application/vnd.apple.pkpass": {
      compressible: false,
      extensions: ["pkpass"]
    },
    "application/vnd.arastra.swi": {
      source: "iana"
    },
    "application/vnd.aristanetworks.swi": {
      source: "iana",
      extensions: ["swi"]
    },
    "application/vnd.artisan+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.artsquare": {
      source: "iana"
    },
    "application/vnd.astraea-software.iota": {
      source: "iana",
      extensions: ["iota"]
    },
    "application/vnd.audiograph": {
      source: "iana",
      extensions: ["aep"]
    },
    "application/vnd.autopackage": {
      source: "iana"
    },
    "application/vnd.avalon+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.avistar+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.balsamiq.bmml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["bmml"]
    },
    "application/vnd.balsamiq.bmpr": {
      source: "iana"
    },
    "application/vnd.banana-accounting": {
      source: "iana"
    },
    "application/vnd.bbf.usp.error": {
      source: "iana"
    },
    "application/vnd.bbf.usp.msg": {
      source: "iana"
    },
    "application/vnd.bbf.usp.msg+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.bekitzur-stech+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.bint.med-content": {
      source: "iana"
    },
    "application/vnd.biopax.rdf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.blink-idb-value-wrapper": {
      source: "iana"
    },
    "application/vnd.blueice.multipass": {
      source: "iana",
      extensions: ["mpm"]
    },
    "application/vnd.bluetooth.ep.oob": {
      source: "iana"
    },
    "application/vnd.bluetooth.le.oob": {
      source: "iana"
    },
    "application/vnd.bmi": {
      source: "iana",
      extensions: ["bmi"]
    },
    "application/vnd.bpf": {
      source: "iana"
    },
    "application/vnd.bpf3": {
      source: "iana"
    },
    "application/vnd.businessobjects": {
      source: "iana",
      extensions: ["rep"]
    },
    "application/vnd.byu.uapi+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cab-jscript": {
      source: "iana"
    },
    "application/vnd.canon-cpdl": {
      source: "iana"
    },
    "application/vnd.canon-lips": {
      source: "iana"
    },
    "application/vnd.capasystems-pg+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cendio.thinlinc.clientconf": {
      source: "iana"
    },
    "application/vnd.century-systems.tcp_stream": {
      source: "iana"
    },
    "application/vnd.chemdraw+xml": {
      source: "iana",
      compressible: true,
      extensions: ["cdxml"]
    },
    "application/vnd.chess-pgn": {
      source: "iana"
    },
    "application/vnd.chipnuts.karaoke-mmd": {
      source: "iana",
      extensions: ["mmd"]
    },
    "application/vnd.ciedi": {
      source: "iana"
    },
    "application/vnd.cinderella": {
      source: "iana",
      extensions: ["cdy"]
    },
    "application/vnd.cirpack.isdn-ext": {
      source: "iana"
    },
    "application/vnd.citationstyles.style+xml": {
      source: "iana",
      compressible: true,
      extensions: ["csl"]
    },
    "application/vnd.claymore": {
      source: "iana",
      extensions: ["cla"]
    },
    "application/vnd.cloanto.rp9": {
      source: "iana",
      extensions: ["rp9"]
    },
    "application/vnd.clonk.c4group": {
      source: "iana",
      extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
    },
    "application/vnd.cluetrust.cartomobile-config": {
      source: "iana",
      extensions: ["c11amc"]
    },
    "application/vnd.cluetrust.cartomobile-config-pkg": {
      source: "iana",
      extensions: ["c11amz"]
    },
    "application/vnd.coffeescript": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.document": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.document-template": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.presentation": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.presentation-template": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.spreadsheet": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.spreadsheet-template": {
      source: "iana"
    },
    "application/vnd.collection+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.collection.doc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.collection.next+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.comicbook+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.comicbook-rar": {
      source: "iana"
    },
    "application/vnd.commerce-battelle": {
      source: "iana"
    },
    "application/vnd.commonspace": {
      source: "iana",
      extensions: ["csp"]
    },
    "application/vnd.contact.cmsg": {
      source: "iana",
      extensions: ["cdbcmsg"]
    },
    "application/vnd.coreos.ignition+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cosmocaller": {
      source: "iana",
      extensions: ["cmc"]
    },
    "application/vnd.crick.clicker": {
      source: "iana",
      extensions: ["clkx"]
    },
    "application/vnd.crick.clicker.keyboard": {
      source: "iana",
      extensions: ["clkk"]
    },
    "application/vnd.crick.clicker.palette": {
      source: "iana",
      extensions: ["clkp"]
    },
    "application/vnd.crick.clicker.template": {
      source: "iana",
      extensions: ["clkt"]
    },
    "application/vnd.crick.clicker.wordbank": {
      source: "iana",
      extensions: ["clkw"]
    },
    "application/vnd.criticaltools.wbs+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wbs"]
    },
    "application/vnd.cryptii.pipe+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.crypto-shade-file": {
      source: "iana"
    },
    "application/vnd.ctc-posml": {
      source: "iana",
      extensions: ["pml"]
    },
    "application/vnd.ctct.ws+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cups-pdf": {
      source: "iana"
    },
    "application/vnd.cups-postscript": {
      source: "iana"
    },
    "application/vnd.cups-ppd": {
      source: "iana",
      extensions: ["ppd"]
    },
    "application/vnd.cups-raster": {
      source: "iana"
    },
    "application/vnd.cups-raw": {
      source: "iana"
    },
    "application/vnd.curl": {
      source: "iana"
    },
    "application/vnd.curl.car": {
      source: "apache",
      extensions: ["car"]
    },
    "application/vnd.curl.pcurl": {
      source: "apache",
      extensions: ["pcurl"]
    },
    "application/vnd.cyan.dean.root+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cybank": {
      source: "iana"
    },
    "application/vnd.d2l.coursepackage1p0+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.dart": {
      source: "iana",
      compressible: true,
      extensions: ["dart"]
    },
    "application/vnd.data-vision.rdz": {
      source: "iana",
      extensions: ["rdz"]
    },
    "application/vnd.datapackage+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dataresource+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dbf": {
      source: "iana"
    },
    "application/vnd.debian.binary-package": {
      source: "iana"
    },
    "application/vnd.dece.data": {
      source: "iana",
      extensions: ["uvf", "uvvf", "uvd", "uvvd"]
    },
    "application/vnd.dece.ttml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["uvt", "uvvt"]
    },
    "application/vnd.dece.unspecified": {
      source: "iana",
      extensions: ["uvx", "uvvx"]
    },
    "application/vnd.dece.zip": {
      source: "iana",
      extensions: ["uvz", "uvvz"]
    },
    "application/vnd.denovo.fcselayout-link": {
      source: "iana",
      extensions: ["fe_launch"]
    },
    "application/vnd.desmume.movie": {
      source: "iana"
    },
    "application/vnd.dir-bi.plate-dl-nosuffix": {
      source: "iana"
    },
    "application/vnd.dm.delegation+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dna": {
      source: "iana",
      extensions: ["dna"]
    },
    "application/vnd.document+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dolby.mlp": {
      source: "apache",
      extensions: ["mlp"]
    },
    "application/vnd.dolby.mobile.1": {
      source: "iana"
    },
    "application/vnd.dolby.mobile.2": {
      source: "iana"
    },
    "application/vnd.doremir.scorecloud-binary-document": {
      source: "iana"
    },
    "application/vnd.dpgraph": {
      source: "iana",
      extensions: ["dpg"]
    },
    "application/vnd.dreamfactory": {
      source: "iana",
      extensions: ["dfac"]
    },
    "application/vnd.drive+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ds-keypoint": {
      source: "apache",
      extensions: ["kpxx"]
    },
    "application/vnd.dtg.local": {
      source: "iana"
    },
    "application/vnd.dtg.local.flash": {
      source: "iana"
    },
    "application/vnd.dtg.local.html": {
      source: "iana"
    },
    "application/vnd.dvb.ait": {
      source: "iana",
      extensions: ["ait"]
    },
    "application/vnd.dvb.dvbisl+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.dvbj": {
      source: "iana"
    },
    "application/vnd.dvb.esgcontainer": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcdftnotifaccess": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgaccess": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgaccess2": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgpdd": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcroaming": {
      source: "iana"
    },
    "application/vnd.dvb.iptv.alfec-base": {
      source: "iana"
    },
    "application/vnd.dvb.iptv.alfec-enhancement": {
      source: "iana"
    },
    "application/vnd.dvb.notif-aggregate-root+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-container+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-generic+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-msglist+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-registration-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-registration-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-init+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.pfr": {
      source: "iana"
    },
    "application/vnd.dvb.service": {
      source: "iana",
      extensions: ["svc"]
    },
    "application/vnd.dxr": {
      source: "iana"
    },
    "application/vnd.dynageo": {
      source: "iana",
      extensions: ["geo"]
    },
    "application/vnd.dzr": {
      source: "iana"
    },
    "application/vnd.easykaraoke.cdgdownload": {
      source: "iana"
    },
    "application/vnd.ecdis-update": {
      source: "iana"
    },
    "application/vnd.ecip.rlp": {
      source: "iana"
    },
    "application/vnd.ecowin.chart": {
      source: "iana",
      extensions: ["mag"]
    },
    "application/vnd.ecowin.filerequest": {
      source: "iana"
    },
    "application/vnd.ecowin.fileupdate": {
      source: "iana"
    },
    "application/vnd.ecowin.series": {
      source: "iana"
    },
    "application/vnd.ecowin.seriesrequest": {
      source: "iana"
    },
    "application/vnd.ecowin.seriesupdate": {
      source: "iana"
    },
    "application/vnd.efi.img": {
      source: "iana"
    },
    "application/vnd.efi.iso": {
      source: "iana"
    },
    "application/vnd.emclient.accessrequest+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.enliven": {
      source: "iana",
      extensions: ["nml"]
    },
    "application/vnd.enphase.envoy": {
      source: "iana"
    },
    "application/vnd.eprints.data+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.epson.esf": {
      source: "iana",
      extensions: ["esf"]
    },
    "application/vnd.epson.msf": {
      source: "iana",
      extensions: ["msf"]
    },
    "application/vnd.epson.quickanime": {
      source: "iana",
      extensions: ["qam"]
    },
    "application/vnd.epson.salt": {
      source: "iana",
      extensions: ["slt"]
    },
    "application/vnd.epson.ssf": {
      source: "iana",
      extensions: ["ssf"]
    },
    "application/vnd.ericsson.quickcall": {
      source: "iana"
    },
    "application/vnd.espass-espass+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.eszigno3+xml": {
      source: "iana",
      compressible: true,
      extensions: ["es3", "et3"]
    },
    "application/vnd.etsi.aoc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.asic-e+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.etsi.asic-s+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.etsi.cug+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvcommand+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvdiscovery+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-bc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-cod+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-npvr+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvservice+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsync+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvueprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.mcid+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.mheg5": {
      source: "iana"
    },
    "application/vnd.etsi.overload-control-policy-dataset+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.pstn+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.sci+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.simservs+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.timestamp-token": {
      source: "iana"
    },
    "application/vnd.etsi.tsl+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.tsl.der": {
      source: "iana"
    },
    "application/vnd.eudora.data": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.profile": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.settings": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.theme": {
      source: "iana"
    },
    "application/vnd.exstream-empower+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.exstream-package": {
      source: "iana"
    },
    "application/vnd.ezpix-album": {
      source: "iana",
      extensions: ["ez2"]
    },
    "application/vnd.ezpix-package": {
      source: "iana",
      extensions: ["ez3"]
    },
    "application/vnd.f-secure.mobile": {
      source: "iana"
    },
    "application/vnd.fastcopy-disk-image": {
      source: "iana"
    },
    "application/vnd.fdf": {
      source: "iana",
      extensions: ["fdf"]
    },
    "application/vnd.fdsn.mseed": {
      source: "iana",
      extensions: ["mseed"]
    },
    "application/vnd.fdsn.seed": {
      source: "iana",
      extensions: ["seed", "dataless"]
    },
    "application/vnd.ffsns": {
      source: "iana"
    },
    "application/vnd.ficlab.flb+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.filmit.zfc": {
      source: "iana"
    },
    "application/vnd.fints": {
      source: "iana"
    },
    "application/vnd.firemonkeys.cloudcell": {
      source: "iana"
    },
    "application/vnd.flographit": {
      source: "iana",
      extensions: ["gph"]
    },
    "application/vnd.fluxtime.clip": {
      source: "iana",
      extensions: ["ftc"]
    },
    "application/vnd.font-fontforge-sfd": {
      source: "iana"
    },
    "application/vnd.framemaker": {
      source: "iana",
      extensions: ["fm", "frame", "maker", "book"]
    },
    "application/vnd.frogans.fnc": {
      source: "iana",
      extensions: ["fnc"]
    },
    "application/vnd.frogans.ltf": {
      source: "iana",
      extensions: ["ltf"]
    },
    "application/vnd.fsc.weblaunch": {
      source: "iana",
      extensions: ["fsc"]
    },
    "application/vnd.fujitsu.oasys": {
      source: "iana",
      extensions: ["oas"]
    },
    "application/vnd.fujitsu.oasys2": {
      source: "iana",
      extensions: ["oa2"]
    },
    "application/vnd.fujitsu.oasys3": {
      source: "iana",
      extensions: ["oa3"]
    },
    "application/vnd.fujitsu.oasysgp": {
      source: "iana",
      extensions: ["fg5"]
    },
    "application/vnd.fujitsu.oasysprs": {
      source: "iana",
      extensions: ["bh2"]
    },
    "application/vnd.fujixerox.art-ex": {
      source: "iana"
    },
    "application/vnd.fujixerox.art4": {
      source: "iana"
    },
    "application/vnd.fujixerox.ddd": {
      source: "iana",
      extensions: ["ddd"]
    },
    "application/vnd.fujixerox.docuworks": {
      source: "iana",
      extensions: ["xdw"]
    },
    "application/vnd.fujixerox.docuworks.binder": {
      source: "iana",
      extensions: ["xbd"]
    },
    "application/vnd.fujixerox.docuworks.container": {
      source: "iana"
    },
    "application/vnd.fujixerox.hbpl": {
      source: "iana"
    },
    "application/vnd.fut-misnet": {
      source: "iana"
    },
    "application/vnd.futoin+cbor": {
      source: "iana"
    },
    "application/vnd.futoin+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.fuzzysheet": {
      source: "iana",
      extensions: ["fzs"]
    },
    "application/vnd.genomatix.tuxedo": {
      source: "iana",
      extensions: ["txd"]
    },
    "application/vnd.gentics.grd+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geo+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geocube+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geogebra.file": {
      source: "iana",
      extensions: ["ggb"]
    },
    "application/vnd.geogebra.tool": {
      source: "iana",
      extensions: ["ggt"]
    },
    "application/vnd.geometry-explorer": {
      source: "iana",
      extensions: ["gex", "gre"]
    },
    "application/vnd.geonext": {
      source: "iana",
      extensions: ["gxt"]
    },
    "application/vnd.geoplan": {
      source: "iana",
      extensions: ["g2w"]
    },
    "application/vnd.geospace": {
      source: "iana",
      extensions: ["g3w"]
    },
    "application/vnd.gerber": {
      source: "iana"
    },
    "application/vnd.globalplatform.card-content-mgt": {
      source: "iana"
    },
    "application/vnd.globalplatform.card-content-mgt-response": {
      source: "iana"
    },
    "application/vnd.gmx": {
      source: "iana",
      extensions: ["gmx"]
    },
    "application/vnd.google-apps.document": {
      compressible: false,
      extensions: ["gdoc"]
    },
    "application/vnd.google-apps.presentation": {
      compressible: false,
      extensions: ["gslides"]
    },
    "application/vnd.google-apps.spreadsheet": {
      compressible: false,
      extensions: ["gsheet"]
    },
    "application/vnd.google-earth.kml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["kml"]
    },
    "application/vnd.google-earth.kmz": {
      source: "iana",
      compressible: false,
      extensions: ["kmz"]
    },
    "application/vnd.gov.sk.e-form+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.gov.sk.e-form+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.gov.sk.xmldatacontainer+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.grafeq": {
      source: "iana",
      extensions: ["gqf", "gqs"]
    },
    "application/vnd.gridmp": {
      source: "iana"
    },
    "application/vnd.groove-account": {
      source: "iana",
      extensions: ["gac"]
    },
    "application/vnd.groove-help": {
      source: "iana",
      extensions: ["ghf"]
    },
    "application/vnd.groove-identity-message": {
      source: "iana",
      extensions: ["gim"]
    },
    "application/vnd.groove-injector": {
      source: "iana",
      extensions: ["grv"]
    },
    "application/vnd.groove-tool-message": {
      source: "iana",
      extensions: ["gtm"]
    },
    "application/vnd.groove-tool-template": {
      source: "iana",
      extensions: ["tpl"]
    },
    "application/vnd.groove-vcard": {
      source: "iana",
      extensions: ["vcg"]
    },
    "application/vnd.hal+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hal+xml": {
      source: "iana",
      compressible: true,
      extensions: ["hal"]
    },
    "application/vnd.handheld-entertainment+xml": {
      source: "iana",
      compressible: true,
      extensions: ["zmm"]
    },
    "application/vnd.hbci": {
      source: "iana",
      extensions: ["hbci"]
    },
    "application/vnd.hc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hcl-bireports": {
      source: "iana"
    },
    "application/vnd.hdt": {
      source: "iana"
    },
    "application/vnd.heroku+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hhe.lesson-player": {
      source: "iana",
      extensions: ["les"]
    },
    "application/vnd.hp-hpgl": {
      source: "iana",
      extensions: ["hpgl"]
    },
    "application/vnd.hp-hpid": {
      source: "iana",
      extensions: ["hpid"]
    },
    "application/vnd.hp-hps": {
      source: "iana",
      extensions: ["hps"]
    },
    "application/vnd.hp-jlyt": {
      source: "iana",
      extensions: ["jlt"]
    },
    "application/vnd.hp-pcl": {
      source: "iana",
      extensions: ["pcl"]
    },
    "application/vnd.hp-pclxl": {
      source: "iana",
      extensions: ["pclxl"]
    },
    "application/vnd.httphone": {
      source: "iana"
    },
    "application/vnd.hydrostatix.sof-data": {
      source: "iana",
      extensions: ["sfd-hdstx"]
    },
    "application/vnd.hyper+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hyper-item+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hyperdrive+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hzn-3d-crossword": {
      source: "iana"
    },
    "application/vnd.ibm.afplinedata": {
      source: "iana"
    },
    "application/vnd.ibm.electronic-media": {
      source: "iana"
    },
    "application/vnd.ibm.minipay": {
      source: "iana",
      extensions: ["mpy"]
    },
    "application/vnd.ibm.modcap": {
      source: "iana",
      extensions: ["afp", "listafp", "list3820"]
    },
    "application/vnd.ibm.rights-management": {
      source: "iana",
      extensions: ["irm"]
    },
    "application/vnd.ibm.secure-container": {
      source: "iana",
      extensions: ["sc"]
    },
    "application/vnd.iccprofile": {
      source: "iana",
      extensions: ["icc", "icm"]
    },
    "application/vnd.ieee.1905": {
      source: "iana"
    },
    "application/vnd.igloader": {
      source: "iana",
      extensions: ["igl"]
    },
    "application/vnd.imagemeter.folder+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.imagemeter.image+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.immervision-ivp": {
      source: "iana",
      extensions: ["ivp"]
    },
    "application/vnd.immervision-ivu": {
      source: "iana",
      extensions: ["ivu"]
    },
    "application/vnd.ims.imsccv1p1": {
      source: "iana"
    },
    "application/vnd.ims.imsccv1p2": {
      source: "iana"
    },
    "application/vnd.ims.imsccv1p3": {
      source: "iana"
    },
    "application/vnd.ims.lis.v2.result+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolproxy+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolproxy.id+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolsettings+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolsettings.simple+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.informedcontrol.rms+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.informix-visionary": {
      source: "iana"
    },
    "application/vnd.infotech.project": {
      source: "iana"
    },
    "application/vnd.infotech.project+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.innopath.wamp.notification": {
      source: "iana"
    },
    "application/vnd.insors.igm": {
      source: "iana",
      extensions: ["igm"]
    },
    "application/vnd.intercon.formnet": {
      source: "iana",
      extensions: ["xpw", "xpx"]
    },
    "application/vnd.intergeo": {
      source: "iana",
      extensions: ["i2g"]
    },
    "application/vnd.intertrust.digibox": {
      source: "iana"
    },
    "application/vnd.intertrust.nncp": {
      source: "iana"
    },
    "application/vnd.intu.qbo": {
      source: "iana",
      extensions: ["qbo"]
    },
    "application/vnd.intu.qfx": {
      source: "iana",
      extensions: ["qfx"]
    },
    "application/vnd.iptc.g2.catalogitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.conceptitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.knowledgeitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.newsitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.newsmessage+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.packageitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.planningitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ipunplugged.rcprofile": {
      source: "iana",
      extensions: ["rcprofile"]
    },
    "application/vnd.irepository.package+xml": {
      source: "iana",
      compressible: true,
      extensions: ["irp"]
    },
    "application/vnd.is-xpr": {
      source: "iana",
      extensions: ["xpr"]
    },
    "application/vnd.isac.fcs": {
      source: "iana",
      extensions: ["fcs"]
    },
    "application/vnd.iso11783-10+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.jam": {
      source: "iana",
      extensions: ["jam"]
    },
    "application/vnd.japannet-directory-service": {
      source: "iana"
    },
    "application/vnd.japannet-jpnstore-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-payment-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-registration": {
      source: "iana"
    },
    "application/vnd.japannet-registration-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-setstore-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-verification": {
      source: "iana"
    },
    "application/vnd.japannet-verification-wakeup": {
      source: "iana"
    },
    "application/vnd.jcp.javame.midlet-rms": {
      source: "iana",
      extensions: ["rms"]
    },
    "application/vnd.jisp": {
      source: "iana",
      extensions: ["jisp"]
    },
    "application/vnd.joost.joda-archive": {
      source: "iana",
      extensions: ["joda"]
    },
    "application/vnd.jsk.isdn-ngn": {
      source: "iana"
    },
    "application/vnd.kahootz": {
      source: "iana",
      extensions: ["ktz", "ktr"]
    },
    "application/vnd.kde.karbon": {
      source: "iana",
      extensions: ["karbon"]
    },
    "application/vnd.kde.kchart": {
      source: "iana",
      extensions: ["chrt"]
    },
    "application/vnd.kde.kformula": {
      source: "iana",
      extensions: ["kfo"]
    },
    "application/vnd.kde.kivio": {
      source: "iana",
      extensions: ["flw"]
    },
    "application/vnd.kde.kontour": {
      source: "iana",
      extensions: ["kon"]
    },
    "application/vnd.kde.kpresenter": {
      source: "iana",
      extensions: ["kpr", "kpt"]
    },
    "application/vnd.kde.kspread": {
      source: "iana",
      extensions: ["ksp"]
    },
    "application/vnd.kde.kword": {
      source: "iana",
      extensions: ["kwd", "kwt"]
    },
    "application/vnd.kenameaapp": {
      source: "iana",
      extensions: ["htke"]
    },
    "application/vnd.kidspiration": {
      source: "iana",
      extensions: ["kia"]
    },
    "application/vnd.kinar": {
      source: "iana",
      extensions: ["kne", "knp"]
    },
    "application/vnd.koan": {
      source: "iana",
      extensions: ["skp", "skd", "skt", "skm"]
    },
    "application/vnd.kodak-descriptor": {
      source: "iana",
      extensions: ["sse"]
    },
    "application/vnd.las": {
      source: "iana"
    },
    "application/vnd.las.las+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.las.las+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lasxml"]
    },
    "application/vnd.laszip": {
      source: "iana"
    },
    "application/vnd.leap+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.liberty-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.llamagraphics.life-balance.desktop": {
      source: "iana",
      extensions: ["lbd"]
    },
    "application/vnd.llamagraphics.life-balance.exchange+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lbe"]
    },
    "application/vnd.logipipe.circuit+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.loom": {
      source: "iana"
    },
    "application/vnd.lotus-1-2-3": {
      source: "iana",
      extensions: ["123"]
    },
    "application/vnd.lotus-approach": {
      source: "iana",
      extensions: ["apr"]
    },
    "application/vnd.lotus-freelance": {
      source: "iana",
      extensions: ["pre"]
    },
    "application/vnd.lotus-notes": {
      source: "iana",
      extensions: ["nsf"]
    },
    "application/vnd.lotus-organizer": {
      source: "iana",
      extensions: ["org"]
    },
    "application/vnd.lotus-screencam": {
      source: "iana",
      extensions: ["scm"]
    },
    "application/vnd.lotus-wordpro": {
      source: "iana",
      extensions: ["lwp"]
    },
    "application/vnd.macports.portpkg": {
      source: "iana",
      extensions: ["portpkg"]
    },
    "application/vnd.mapbox-vector-tile": {
      source: "iana"
    },
    "application/vnd.marlin.drm.actiontoken+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.conftoken+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.license+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.mdcf": {
      source: "iana"
    },
    "application/vnd.mason+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.maxmind.maxmind-db": {
      source: "iana"
    },
    "application/vnd.mcd": {
      source: "iana",
      extensions: ["mcd"]
    },
    "application/vnd.medcalcdata": {
      source: "iana",
      extensions: ["mc1"]
    },
    "application/vnd.mediastation.cdkey": {
      source: "iana",
      extensions: ["cdkey"]
    },
    "application/vnd.meridian-slingshot": {
      source: "iana"
    },
    "application/vnd.mfer": {
      source: "iana",
      extensions: ["mwf"]
    },
    "application/vnd.mfmp": {
      source: "iana",
      extensions: ["mfm"]
    },
    "application/vnd.micro+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.micrografx.flo": {
      source: "iana",
      extensions: ["flo"]
    },
    "application/vnd.micrografx.igx": {
      source: "iana",
      extensions: ["igx"]
    },
    "application/vnd.microsoft.portable-executable": {
      source: "iana"
    },
    "application/vnd.microsoft.windows.thumbnail-cache": {
      source: "iana"
    },
    "application/vnd.miele+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.mif": {
      source: "iana",
      extensions: ["mif"]
    },
    "application/vnd.minisoft-hp3000-save": {
      source: "iana"
    },
    "application/vnd.mitsubishi.misty-guard.trustweb": {
      source: "iana"
    },
    "application/vnd.mobius.daf": {
      source: "iana",
      extensions: ["daf"]
    },
    "application/vnd.mobius.dis": {
      source: "iana",
      extensions: ["dis"]
    },
    "application/vnd.mobius.mbk": {
      source: "iana",
      extensions: ["mbk"]
    },
    "application/vnd.mobius.mqy": {
      source: "iana",
      extensions: ["mqy"]
    },
    "application/vnd.mobius.msl": {
      source: "iana",
      extensions: ["msl"]
    },
    "application/vnd.mobius.plc": {
      source: "iana",
      extensions: ["plc"]
    },
    "application/vnd.mobius.txf": {
      source: "iana",
      extensions: ["txf"]
    },
    "application/vnd.mophun.application": {
      source: "iana",
      extensions: ["mpn"]
    },
    "application/vnd.mophun.certificate": {
      source: "iana",
      extensions: ["mpc"]
    },
    "application/vnd.motorola.flexsuite": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.adsi": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.fis": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.gotap": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.kmr": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.ttc": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.wem": {
      source: "iana"
    },
    "application/vnd.motorola.iprm": {
      source: "iana"
    },
    "application/vnd.mozilla.xul+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xul"]
    },
    "application/vnd.ms-3mfdocument": {
      source: "iana"
    },
    "application/vnd.ms-artgalry": {
      source: "iana",
      extensions: ["cil"]
    },
    "application/vnd.ms-asf": {
      source: "iana"
    },
    "application/vnd.ms-cab-compressed": {
      source: "iana",
      extensions: ["cab"]
    },
    "application/vnd.ms-color.iccprofile": {
      source: "apache"
    },
    "application/vnd.ms-excel": {
      source: "iana",
      compressible: false,
      extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
    },
    "application/vnd.ms-excel.addin.macroenabled.12": {
      source: "iana",
      extensions: ["xlam"]
    },
    "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
      source: "iana",
      extensions: ["xlsb"]
    },
    "application/vnd.ms-excel.sheet.macroenabled.12": {
      source: "iana",
      extensions: ["xlsm"]
    },
    "application/vnd.ms-excel.template.macroenabled.12": {
      source: "iana",
      extensions: ["xltm"]
    },
    "application/vnd.ms-fontobject": {
      source: "iana",
      compressible: true,
      extensions: ["eot"]
    },
    "application/vnd.ms-htmlhelp": {
      source: "iana",
      extensions: ["chm"]
    },
    "application/vnd.ms-ims": {
      source: "iana",
      extensions: ["ims"]
    },
    "application/vnd.ms-lrm": {
      source: "iana",
      extensions: ["lrm"]
    },
    "application/vnd.ms-office.activex+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-officetheme": {
      source: "iana",
      extensions: ["thmx"]
    },
    "application/vnd.ms-opentype": {
      source: "apache",
      compressible: true
    },
    "application/vnd.ms-outlook": {
      compressible: false,
      extensions: ["msg"]
    },
    "application/vnd.ms-package.obfuscated-opentype": {
      source: "apache"
    },
    "application/vnd.ms-pki.seccat": {
      source: "apache",
      extensions: ["cat"]
    },
    "application/vnd.ms-pki.stl": {
      source: "apache",
      extensions: ["stl"]
    },
    "application/vnd.ms-playready.initiator+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-powerpoint": {
      source: "iana",
      compressible: false,
      extensions: ["ppt", "pps", "pot"]
    },
    "application/vnd.ms-powerpoint.addin.macroenabled.12": {
      source: "iana",
      extensions: ["ppam"]
    },
    "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
      source: "iana",
      extensions: ["pptm"]
    },
    "application/vnd.ms-powerpoint.slide.macroenabled.12": {
      source: "iana",
      extensions: ["sldm"]
    },
    "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
      source: "iana",
      extensions: ["ppsm"]
    },
    "application/vnd.ms-powerpoint.template.macroenabled.12": {
      source: "iana",
      extensions: ["potm"]
    },
    "application/vnd.ms-printdevicecapabilities+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-printing.printticket+xml": {
      source: "apache",
      compressible: true
    },
    "application/vnd.ms-printschematicket+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-project": {
      source: "iana",
      extensions: ["mpp", "mpt"]
    },
    "application/vnd.ms-tnef": {
      source: "iana"
    },
    "application/vnd.ms-windows.devicepairing": {
      source: "iana"
    },
    "application/vnd.ms-windows.nwprinting.oob": {
      source: "iana"
    },
    "application/vnd.ms-windows.printerpairing": {
      source: "iana"
    },
    "application/vnd.ms-windows.wsd.oob": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.lic-chlg-req": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.lic-resp": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.meter-chlg-req": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.meter-resp": {
      source: "iana"
    },
    "application/vnd.ms-word.document.macroenabled.12": {
      source: "iana",
      extensions: ["docm"]
    },
    "application/vnd.ms-word.template.macroenabled.12": {
      source: "iana",
      extensions: ["dotm"]
    },
    "application/vnd.ms-works": {
      source: "iana",
      extensions: ["wps", "wks", "wcm", "wdb"]
    },
    "application/vnd.ms-wpl": {
      source: "iana",
      extensions: ["wpl"]
    },
    "application/vnd.ms-xpsdocument": {
      source: "iana",
      compressible: false,
      extensions: ["xps"]
    },
    "application/vnd.msa-disk-image": {
      source: "iana"
    },
    "application/vnd.mseq": {
      source: "iana",
      extensions: ["mseq"]
    },
    "application/vnd.msign": {
      source: "iana"
    },
    "application/vnd.multiad.creator": {
      source: "iana"
    },
    "application/vnd.multiad.creator.cif": {
      source: "iana"
    },
    "application/vnd.music-niff": {
      source: "iana"
    },
    "application/vnd.musician": {
      source: "iana",
      extensions: ["mus"]
    },
    "application/vnd.muvee.style": {
      source: "iana",
      extensions: ["msty"]
    },
    "application/vnd.mynfc": {
      source: "iana",
      extensions: ["taglet"]
    },
    "application/vnd.ncd.control": {
      source: "iana"
    },
    "application/vnd.ncd.reference": {
      source: "iana"
    },
    "application/vnd.nearst.inv+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nervana": {
      source: "iana"
    },
    "application/vnd.netfpx": {
      source: "iana"
    },
    "application/vnd.neurolanguage.nlu": {
      source: "iana",
      extensions: ["nlu"]
    },
    "application/vnd.nimn": {
      source: "iana"
    },
    "application/vnd.nintendo.nitro.rom": {
      source: "iana"
    },
    "application/vnd.nintendo.snes.rom": {
      source: "iana"
    },
    "application/vnd.nitf": {
      source: "iana",
      extensions: ["ntf", "nitf"]
    },
    "application/vnd.noblenet-directory": {
      source: "iana",
      extensions: ["nnd"]
    },
    "application/vnd.noblenet-sealer": {
      source: "iana",
      extensions: ["nns"]
    },
    "application/vnd.noblenet-web": {
      source: "iana",
      extensions: ["nnw"]
    },
    "application/vnd.nokia.catalogs": {
      source: "iana"
    },
    "application/vnd.nokia.conml+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.conml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.iptv.config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.isds-radio-presets": {
      source: "iana"
    },
    "application/vnd.nokia.landmark+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.landmark+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.landmarkcollection+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.n-gage.ac+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ac"]
    },
    "application/vnd.nokia.n-gage.data": {
      source: "iana",
      extensions: ["ngdat"]
    },
    "application/vnd.nokia.n-gage.symbian.install": {
      source: "iana",
      extensions: ["n-gage"]
    },
    "application/vnd.nokia.ncd": {
      source: "iana"
    },
    "application/vnd.nokia.pcd+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.pcd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.radio-preset": {
      source: "iana",
      extensions: ["rpst"]
    },
    "application/vnd.nokia.radio-presets": {
      source: "iana",
      extensions: ["rpss"]
    },
    "application/vnd.novadigm.edm": {
      source: "iana",
      extensions: ["edm"]
    },
    "application/vnd.novadigm.edx": {
      source: "iana",
      extensions: ["edx"]
    },
    "application/vnd.novadigm.ext": {
      source: "iana",
      extensions: ["ext"]
    },
    "application/vnd.ntt-local.content-share": {
      source: "iana"
    },
    "application/vnd.ntt-local.file-transfer": {
      source: "iana"
    },
    "application/vnd.ntt-local.ogw_remote-access": {
      source: "iana"
    },
    "application/vnd.ntt-local.sip-ta_remote": {
      source: "iana"
    },
    "application/vnd.ntt-local.sip-ta_tcp_stream": {
      source: "iana"
    },
    "application/vnd.oasis.opendocument.chart": {
      source: "iana",
      extensions: ["odc"]
    },
    "application/vnd.oasis.opendocument.chart-template": {
      source: "iana",
      extensions: ["otc"]
    },
    "application/vnd.oasis.opendocument.database": {
      source: "iana",
      extensions: ["odb"]
    },
    "application/vnd.oasis.opendocument.formula": {
      source: "iana",
      extensions: ["odf"]
    },
    "application/vnd.oasis.opendocument.formula-template": {
      source: "iana",
      extensions: ["odft"]
    },
    "application/vnd.oasis.opendocument.graphics": {
      source: "iana",
      compressible: false,
      extensions: ["odg"]
    },
    "application/vnd.oasis.opendocument.graphics-template": {
      source: "iana",
      extensions: ["otg"]
    },
    "application/vnd.oasis.opendocument.image": {
      source: "iana",
      extensions: ["odi"]
    },
    "application/vnd.oasis.opendocument.image-template": {
      source: "iana",
      extensions: ["oti"]
    },
    "application/vnd.oasis.opendocument.presentation": {
      source: "iana",
      compressible: false,
      extensions: ["odp"]
    },
    "application/vnd.oasis.opendocument.presentation-template": {
      source: "iana",
      extensions: ["otp"]
    },
    "application/vnd.oasis.opendocument.spreadsheet": {
      source: "iana",
      compressible: false,
      extensions: ["ods"]
    },
    "application/vnd.oasis.opendocument.spreadsheet-template": {
      source: "iana",
      extensions: ["ots"]
    },
    "application/vnd.oasis.opendocument.text": {
      source: "iana",
      compressible: false,
      extensions: ["odt"]
    },
    "application/vnd.oasis.opendocument.text-master": {
      source: "iana",
      extensions: ["odm"]
    },
    "application/vnd.oasis.opendocument.text-template": {
      source: "iana",
      extensions: ["ott"]
    },
    "application/vnd.oasis.opendocument.text-web": {
      source: "iana",
      extensions: ["oth"]
    },
    "application/vnd.obn": {
      source: "iana"
    },
    "application/vnd.ocf+cbor": {
      source: "iana"
    },
    "application/vnd.oci.image.manifest.v1+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oftn.l10n+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.contentaccessdownload+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.contentaccessstreaming+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.cspg-hexbinary": {
      source: "iana"
    },
    "application/vnd.oipf.dae.svg+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.dae.xhtml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.mippvcontrolmessage+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.pae.gem": {
      source: "iana"
    },
    "application/vnd.oipf.spdiscovery+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.spdlist+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.ueprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.userprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.olpc-sugar": {
      source: "iana",
      extensions: ["xo"]
    },
    "application/vnd.oma-scws-config": {
      source: "iana"
    },
    "application/vnd.oma-scws-http-request": {
      source: "iana"
    },
    "application/vnd.oma-scws-http-response": {
      source: "iana"
    },
    "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.drm-trigger+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.imd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.ltkm": {
      source: "iana"
    },
    "application/vnd.oma.bcast.notification+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.provisioningtrigger": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sgboot": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sgdd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.sgdu": {
      source: "iana"
    },
    "application/vnd.oma.bcast.simple-symbol-container": {
      source: "iana"
    },
    "application/vnd.oma.bcast.smartcard-trigger+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.sprov+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.stkm": {
      source: "iana"
    },
    "application/vnd.oma.cab-address-book+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-feature-handler+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-pcc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-subs-invite+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-user-prefs+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.dcd": {
      source: "iana"
    },
    "application/vnd.oma.dcdc": {
      source: "iana"
    },
    "application/vnd.oma.dd2+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dd2"]
    },
    "application/vnd.oma.drm.risd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.group-usage-list+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.lwm2m+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.lwm2m+tlv": {
      source: "iana"
    },
    "application/vnd.oma.pal+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.detailed-progress-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.final-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.groups+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.invocation-descriptor+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.optimized-progress-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.push": {
      source: "iana"
    },
    "application/vnd.oma.scidm.messages+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.xcap-directory+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.omads-email+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omads-file+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omads-folder+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omaloc-supl-init": {
      source: "iana"
    },
    "application/vnd.onepager": {
      source: "iana"
    },
    "application/vnd.onepagertamp": {
      source: "iana"
    },
    "application/vnd.onepagertamx": {
      source: "iana"
    },
    "application/vnd.onepagertat": {
      source: "iana"
    },
    "application/vnd.onepagertatp": {
      source: "iana"
    },
    "application/vnd.onepagertatx": {
      source: "iana"
    },
    "application/vnd.openblox.game+xml": {
      source: "iana",
      compressible: true,
      extensions: ["obgx"]
    },
    "application/vnd.openblox.game-binary": {
      source: "iana"
    },
    "application/vnd.openeye.oeb": {
      source: "iana"
    },
    "application/vnd.openofficeorg.extension": {
      source: "apache",
      extensions: ["oxt"]
    },
    "application/vnd.openstreetmap.data+xml": {
      source: "iana",
      compressible: true,
      extensions: ["osm"]
    },
    "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawing+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
      source: "iana",
      compressible: false,
      extensions: ["pptx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide": {
      source: "iana",
      extensions: ["sldx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
      source: "iana",
      extensions: ["ppsx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template": {
      source: "iana",
      extensions: ["potx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
      source: "iana",
      compressible: false,
      extensions: ["xlsx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
      source: "iana",
      extensions: ["xltx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.theme+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.vmldrawing": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
      source: "iana",
      compressible: false,
      extensions: ["docx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
      source: "iana",
      extensions: ["dotx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.core-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.relationships+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oracle.resource+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.orange.indata": {
      source: "iana"
    },
    "application/vnd.osa.netdeploy": {
      source: "iana"
    },
    "application/vnd.osgeo.mapguide.package": {
      source: "iana",
      extensions: ["mgp"]
    },
    "application/vnd.osgi.bundle": {
      source: "iana"
    },
    "application/vnd.osgi.dp": {
      source: "iana",
      extensions: ["dp"]
    },
    "application/vnd.osgi.subsystem": {
      source: "iana",
      extensions: ["esa"]
    },
    "application/vnd.otps.ct-kip+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oxli.countgraph": {
      source: "iana"
    },
    "application/vnd.pagerduty+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.palm": {
      source: "iana",
      extensions: ["pdb", "pqa", "oprc"]
    },
    "application/vnd.panoply": {
      source: "iana"
    },
    "application/vnd.paos.xml": {
      source: "iana"
    },
    "application/vnd.patentdive": {
      source: "iana"
    },
    "application/vnd.patientecommsdoc": {
      source: "iana"
    },
    "application/vnd.pawaafile": {
      source: "iana",
      extensions: ["paw"]
    },
    "application/vnd.pcos": {
      source: "iana"
    },
    "application/vnd.pg.format": {
      source: "iana",
      extensions: ["str"]
    },
    "application/vnd.pg.osasli": {
      source: "iana",
      extensions: ["ei6"]
    },
    "application/vnd.piaccess.application-licence": {
      source: "iana"
    },
    "application/vnd.picsel": {
      source: "iana",
      extensions: ["efif"]
    },
    "application/vnd.pmi.widget": {
      source: "iana",
      extensions: ["wg"]
    },
    "application/vnd.poc.group-advertisement+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.pocketlearn": {
      source: "iana",
      extensions: ["plf"]
    },
    "application/vnd.powerbuilder6": {
      source: "iana",
      extensions: ["pbd"]
    },
    "application/vnd.powerbuilder6-s": {
      source: "iana"
    },
    "application/vnd.powerbuilder7": {
      source: "iana"
    },
    "application/vnd.powerbuilder7-s": {
      source: "iana"
    },
    "application/vnd.powerbuilder75": {
      source: "iana"
    },
    "application/vnd.powerbuilder75-s": {
      source: "iana"
    },
    "application/vnd.preminet": {
      source: "iana"
    },
    "application/vnd.previewsystems.box": {
      source: "iana",
      extensions: ["box"]
    },
    "application/vnd.proteus.magazine": {
      source: "iana",
      extensions: ["mgz"]
    },
    "application/vnd.psfs": {
      source: "iana"
    },
    "application/vnd.publishare-delta-tree": {
      source: "iana",
      extensions: ["qps"]
    },
    "application/vnd.pvi.ptid1": {
      source: "iana",
      extensions: ["ptid"]
    },
    "application/vnd.pwg-multiplexed": {
      source: "iana"
    },
    "application/vnd.pwg-xhtml-print+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.qualcomm.brew-app-res": {
      source: "iana"
    },
    "application/vnd.quarantainenet": {
      source: "iana"
    },
    "application/vnd.quark.quarkxpress": {
      source: "iana",
      extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
    },
    "application/vnd.quobject-quoxdocument": {
      source: "iana"
    },
    "application/vnd.radisys.moml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-conf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-conn+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-dialog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-stream+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-conf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-base+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-fax-detect+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-group+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-speech+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-transform+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.rainstor.data": {
      source: "iana"
    },
    "application/vnd.rapid": {
      source: "iana"
    },
    "application/vnd.rar": {
      source: "iana"
    },
    "application/vnd.realvnc.bed": {
      source: "iana",
      extensions: ["bed"]
    },
    "application/vnd.recordare.musicxml": {
      source: "iana",
      extensions: ["mxl"]
    },
    "application/vnd.recordare.musicxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["musicxml"]
    },
    "application/vnd.renlearn.rlprint": {
      source: "iana"
    },
    "application/vnd.restful+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.rig.cryptonote": {
      source: "iana",
      extensions: ["cryptonote"]
    },
    "application/vnd.rim.cod": {
      source: "apache",
      extensions: ["cod"]
    },
    "application/vnd.rn-realmedia": {
      source: "apache",
      extensions: ["rm"]
    },
    "application/vnd.rn-realmedia-vbr": {
      source: "apache",
      extensions: ["rmvb"]
    },
    "application/vnd.route66.link66+xml": {
      source: "iana",
      compressible: true,
      extensions: ["link66"]
    },
    "application/vnd.rs-274x": {
      source: "iana"
    },
    "application/vnd.ruckus.download": {
      source: "iana"
    },
    "application/vnd.s3sms": {
      source: "iana"
    },
    "application/vnd.sailingtracker.track": {
      source: "iana",
      extensions: ["st"]
    },
    "application/vnd.sar": {
      source: "iana"
    },
    "application/vnd.sbm.cid": {
      source: "iana"
    },
    "application/vnd.sbm.mid2": {
      source: "iana"
    },
    "application/vnd.scribus": {
      source: "iana"
    },
    "application/vnd.sealed.3df": {
      source: "iana"
    },
    "application/vnd.sealed.csf": {
      source: "iana"
    },
    "application/vnd.sealed.doc": {
      source: "iana"
    },
    "application/vnd.sealed.eml": {
      source: "iana"
    },
    "application/vnd.sealed.mht": {
      source: "iana"
    },
    "application/vnd.sealed.net": {
      source: "iana"
    },
    "application/vnd.sealed.ppt": {
      source: "iana"
    },
    "application/vnd.sealed.tiff": {
      source: "iana"
    },
    "application/vnd.sealed.xls": {
      source: "iana"
    },
    "application/vnd.sealedmedia.softseal.html": {
      source: "iana"
    },
    "application/vnd.sealedmedia.softseal.pdf": {
      source: "iana"
    },
    "application/vnd.seemail": {
      source: "iana",
      extensions: ["see"]
    },
    "application/vnd.sema": {
      source: "iana",
      extensions: ["sema"]
    },
    "application/vnd.semd": {
      source: "iana",
      extensions: ["semd"]
    },
    "application/vnd.semf": {
      source: "iana",
      extensions: ["semf"]
    },
    "application/vnd.shade-save-file": {
      source: "iana"
    },
    "application/vnd.shana.informed.formdata": {
      source: "iana",
      extensions: ["ifm"]
    },
    "application/vnd.shana.informed.formtemplate": {
      source: "iana",
      extensions: ["itp"]
    },
    "application/vnd.shana.informed.interchange": {
      source: "iana",
      extensions: ["iif"]
    },
    "application/vnd.shana.informed.package": {
      source: "iana",
      extensions: ["ipk"]
    },
    "application/vnd.shootproof+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.shopkick+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.shp": {
      source: "iana"
    },
    "application/vnd.shx": {
      source: "iana"
    },
    "application/vnd.sigrok.session": {
      source: "iana"
    },
    "application/vnd.simtech-mindmapper": {
      source: "iana",
      extensions: ["twd", "twds"]
    },
    "application/vnd.siren+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.smaf": {
      source: "iana",
      extensions: ["mmf"]
    },
    "application/vnd.smart.notebook": {
      source: "iana"
    },
    "application/vnd.smart.teacher": {
      source: "iana",
      extensions: ["teacher"]
    },
    "application/vnd.snesdev-page-table": {
      source: "iana"
    },
    "application/vnd.software602.filler.form+xml": {
      source: "iana",
      compressible: true,
      extensions: ["fo"]
    },
    "application/vnd.software602.filler.form-xml-zip": {
      source: "iana"
    },
    "application/vnd.solent.sdkm+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sdkm", "sdkd"]
    },
    "application/vnd.spotfire.dxp": {
      source: "iana",
      extensions: ["dxp"]
    },
    "application/vnd.spotfire.sfs": {
      source: "iana",
      extensions: ["sfs"]
    },
    "application/vnd.sqlite3": {
      source: "iana"
    },
    "application/vnd.sss-cod": {
      source: "iana"
    },
    "application/vnd.sss-dtf": {
      source: "iana"
    },
    "application/vnd.sss-ntf": {
      source: "iana"
    },
    "application/vnd.stardivision.calc": {
      source: "apache",
      extensions: ["sdc"]
    },
    "application/vnd.stardivision.draw": {
      source: "apache",
      extensions: ["sda"]
    },
    "application/vnd.stardivision.impress": {
      source: "apache",
      extensions: ["sdd"]
    },
    "application/vnd.stardivision.math": {
      source: "apache",
      extensions: ["smf"]
    },
    "application/vnd.stardivision.writer": {
      source: "apache",
      extensions: ["sdw", "vor"]
    },
    "application/vnd.stardivision.writer-global": {
      source: "apache",
      extensions: ["sgl"]
    },
    "application/vnd.stepmania.package": {
      source: "iana",
      extensions: ["smzip"]
    },
    "application/vnd.stepmania.stepchart": {
      source: "iana",
      extensions: ["sm"]
    },
    "application/vnd.street-stream": {
      source: "iana"
    },
    "application/vnd.sun.wadl+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wadl"]
    },
    "application/vnd.sun.xml.calc": {
      source: "apache",
      extensions: ["sxc"]
    },
    "application/vnd.sun.xml.calc.template": {
      source: "apache",
      extensions: ["stc"]
    },
    "application/vnd.sun.xml.draw": {
      source: "apache",
      extensions: ["sxd"]
    },
    "application/vnd.sun.xml.draw.template": {
      source: "apache",
      extensions: ["std"]
    },
    "application/vnd.sun.xml.impress": {
      source: "apache",
      extensions: ["sxi"]
    },
    "application/vnd.sun.xml.impress.template": {
      source: "apache",
      extensions: ["sti"]
    },
    "application/vnd.sun.xml.math": {
      source: "apache",
      extensions: ["sxm"]
    },
    "application/vnd.sun.xml.writer": {
      source: "apache",
      extensions: ["sxw"]
    },
    "application/vnd.sun.xml.writer.global": {
      source: "apache",
      extensions: ["sxg"]
    },
    "application/vnd.sun.xml.writer.template": {
      source: "apache",
      extensions: ["stw"]
    },
    "application/vnd.sus-calendar": {
      source: "iana",
      extensions: ["sus", "susp"]
    },
    "application/vnd.svd": {
      source: "iana",
      extensions: ["svd"]
    },
    "application/vnd.swiftview-ics": {
      source: "iana"
    },
    "application/vnd.symbian.install": {
      source: "apache",
      extensions: ["sis", "sisx"]
    },
    "application/vnd.syncml+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["xsm"]
    },
    "application/vnd.syncml.dm+wbxml": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["bdm"]
    },
    "application/vnd.syncml.dm+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["xdm"]
    },
    "application/vnd.syncml.dm.notification": {
      source: "iana"
    },
    "application/vnd.syncml.dmddf+wbxml": {
      source: "iana"
    },
    "application/vnd.syncml.dmddf+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["ddf"]
    },
    "application/vnd.syncml.dmtnds+wbxml": {
      source: "iana"
    },
    "application/vnd.syncml.dmtnds+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.syncml.ds.notification": {
      source: "iana"
    },
    "application/vnd.tableschema+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tao.intent-module-archive": {
      source: "iana",
      extensions: ["tao"]
    },
    "application/vnd.tcpdump.pcap": {
      source: "iana",
      extensions: ["pcap", "cap", "dmp"]
    },
    "application/vnd.think-cell.ppttc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tmd.mediaflex.api+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tml": {
      source: "iana"
    },
    "application/vnd.tmobile-livetv": {
      source: "iana",
      extensions: ["tmo"]
    },
    "application/vnd.tri.onesource": {
      source: "iana"
    },
    "application/vnd.trid.tpt": {
      source: "iana",
      extensions: ["tpt"]
    },
    "application/vnd.triscape.mxs": {
      source: "iana",
      extensions: ["mxs"]
    },
    "application/vnd.trueapp": {
      source: "iana",
      extensions: ["tra"]
    },
    "application/vnd.truedoc": {
      source: "iana"
    },
    "application/vnd.ubisoft.webplayer": {
      source: "iana"
    },
    "application/vnd.ufdl": {
      source: "iana",
      extensions: ["ufd", "ufdl"]
    },
    "application/vnd.uiq.theme": {
      source: "iana",
      extensions: ["utz"]
    },
    "application/vnd.umajin": {
      source: "iana",
      extensions: ["umj"]
    },
    "application/vnd.unity": {
      source: "iana",
      extensions: ["unityweb"]
    },
    "application/vnd.uoml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["uoml"]
    },
    "application/vnd.uplanet.alert": {
      source: "iana"
    },
    "application/vnd.uplanet.alert-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.bearer-choice": {
      source: "iana"
    },
    "application/vnd.uplanet.bearer-choice-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.cacheop": {
      source: "iana"
    },
    "application/vnd.uplanet.cacheop-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.channel": {
      source: "iana"
    },
    "application/vnd.uplanet.channel-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.list": {
      source: "iana"
    },
    "application/vnd.uplanet.list-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.listcmd": {
      source: "iana"
    },
    "application/vnd.uplanet.listcmd-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.signal": {
      source: "iana"
    },
    "application/vnd.uri-map": {
      source: "iana"
    },
    "application/vnd.valve.source.material": {
      source: "iana"
    },
    "application/vnd.vcx": {
      source: "iana",
      extensions: ["vcx"]
    },
    "application/vnd.vd-study": {
      source: "iana"
    },
    "application/vnd.vectorworks": {
      source: "iana"
    },
    "application/vnd.vel+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.verimatrix.vcas": {
      source: "iana"
    },
    "application/vnd.veryant.thin": {
      source: "iana"
    },
    "application/vnd.ves.encrypted": {
      source: "iana"
    },
    "application/vnd.vidsoft.vidconference": {
      source: "iana"
    },
    "application/vnd.visio": {
      source: "iana",
      extensions: ["vsd", "vst", "vss", "vsw"]
    },
    "application/vnd.visionary": {
      source: "iana",
      extensions: ["vis"]
    },
    "application/vnd.vividence.scriptfile": {
      source: "iana"
    },
    "application/vnd.vsf": {
      source: "iana",
      extensions: ["vsf"]
    },
    "application/vnd.wap.sic": {
      source: "iana"
    },
    "application/vnd.wap.slc": {
      source: "iana"
    },
    "application/vnd.wap.wbxml": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["wbxml"]
    },
    "application/vnd.wap.wmlc": {
      source: "iana",
      extensions: ["wmlc"]
    },
    "application/vnd.wap.wmlscriptc": {
      source: "iana",
      extensions: ["wmlsc"]
    },
    "application/vnd.webturbo": {
      source: "iana",
      extensions: ["wtb"]
    },
    "application/vnd.wfa.p2p": {
      source: "iana"
    },
    "application/vnd.wfa.wsc": {
      source: "iana"
    },
    "application/vnd.windows.devicepairing": {
      source: "iana"
    },
    "application/vnd.wmc": {
      source: "iana"
    },
    "application/vnd.wmf.bootstrap": {
      source: "iana"
    },
    "application/vnd.wolfram.mathematica": {
      source: "iana"
    },
    "application/vnd.wolfram.mathematica.package": {
      source: "iana"
    },
    "application/vnd.wolfram.player": {
      source: "iana",
      extensions: ["nbp"]
    },
    "application/vnd.wordperfect": {
      source: "iana",
      extensions: ["wpd"]
    },
    "application/vnd.wqd": {
      source: "iana",
      extensions: ["wqd"]
    },
    "application/vnd.wrq-hp3000-labelled": {
      source: "iana"
    },
    "application/vnd.wt.stf": {
      source: "iana",
      extensions: ["stf"]
    },
    "application/vnd.wv.csp+wbxml": {
      source: "iana"
    },
    "application/vnd.wv.csp+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.wv.ssp+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xacml+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xara": {
      source: "iana",
      extensions: ["xar"]
    },
    "application/vnd.xfdl": {
      source: "iana",
      extensions: ["xfdl"]
    },
    "application/vnd.xfdl.webform": {
      source: "iana"
    },
    "application/vnd.xmi+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xmpie.cpkg": {
      source: "iana"
    },
    "application/vnd.xmpie.dpkg": {
      source: "iana"
    },
    "application/vnd.xmpie.plan": {
      source: "iana"
    },
    "application/vnd.xmpie.ppkg": {
      source: "iana"
    },
    "application/vnd.xmpie.xlim": {
      source: "iana"
    },
    "application/vnd.yamaha.hv-dic": {
      source: "iana",
      extensions: ["hvd"]
    },
    "application/vnd.yamaha.hv-script": {
      source: "iana",
      extensions: ["hvs"]
    },
    "application/vnd.yamaha.hv-voice": {
      source: "iana",
      extensions: ["hvp"]
    },
    "application/vnd.yamaha.openscoreformat": {
      source: "iana",
      extensions: ["osf"]
    },
    "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
      source: "iana",
      compressible: true,
      extensions: ["osfpvg"]
    },
    "application/vnd.yamaha.remote-setup": {
      source: "iana"
    },
    "application/vnd.yamaha.smaf-audio": {
      source: "iana",
      extensions: ["saf"]
    },
    "application/vnd.yamaha.smaf-phrase": {
      source: "iana",
      extensions: ["spf"]
    },
    "application/vnd.yamaha.through-ngn": {
      source: "iana"
    },
    "application/vnd.yamaha.tunnel-udpencap": {
      source: "iana"
    },
    "application/vnd.yaoweme": {
      source: "iana"
    },
    "application/vnd.yellowriver-custom-menu": {
      source: "iana",
      extensions: ["cmp"]
    },
    "application/vnd.youtube.yt": {
      source: "iana"
    },
    "application/vnd.zul": {
      source: "iana",
      extensions: ["zir", "zirz"]
    },
    "application/vnd.zzazz.deck+xml": {
      source: "iana",
      compressible: true,
      extensions: ["zaz"]
    },
    "application/voicexml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["vxml"]
    },
    "application/voucher-cms+json": {
      source: "iana",
      compressible: true
    },
    "application/vq-rtcpxr": {
      source: "iana"
    },
    "application/wasm": {
      compressible: true,
      extensions: ["wasm"]
    },
    "application/watcherinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/webpush-options+json": {
      source: "iana",
      compressible: true
    },
    "application/whoispp-query": {
      source: "iana"
    },
    "application/whoispp-response": {
      source: "iana"
    },
    "application/widget": {
      source: "iana",
      extensions: ["wgt"]
    },
    "application/winhlp": {
      source: "apache",
      extensions: ["hlp"]
    },
    "application/wita": {
      source: "iana"
    },
    "application/wordperfect5.1": {
      source: "iana"
    },
    "application/wsdl+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wsdl"]
    },
    "application/wspolicy+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wspolicy"]
    },
    "application/x-7z-compressed": {
      source: "apache",
      compressible: false,
      extensions: ["7z"]
    },
    "application/x-abiword": {
      source: "apache",
      extensions: ["abw"]
    },
    "application/x-ace-compressed": {
      source: "apache",
      extensions: ["ace"]
    },
    "application/x-amf": {
      source: "apache"
    },
    "application/x-apple-diskimage": {
      source: "apache",
      extensions: ["dmg"]
    },
    "application/x-arj": {
      compressible: false,
      extensions: ["arj"]
    },
    "application/x-authorware-bin": {
      source: "apache",
      extensions: ["aab", "x32", "u32", "vox"]
    },
    "application/x-authorware-map": {
      source: "apache",
      extensions: ["aam"]
    },
    "application/x-authorware-seg": {
      source: "apache",
      extensions: ["aas"]
    },
    "application/x-bcpio": {
      source: "apache",
      extensions: ["bcpio"]
    },
    "application/x-bdoc": {
      compressible: false,
      extensions: ["bdoc"]
    },
    "application/x-bittorrent": {
      source: "apache",
      extensions: ["torrent"]
    },
    "application/x-blorb": {
      source: "apache",
      extensions: ["blb", "blorb"]
    },
    "application/x-bzip": {
      source: "apache",
      compressible: false,
      extensions: ["bz"]
    },
    "application/x-bzip2": {
      source: "apache",
      compressible: false,
      extensions: ["bz2", "boz"]
    },
    "application/x-cbr": {
      source: "apache",
      extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
    },
    "application/x-cdlink": {
      source: "apache",
      extensions: ["vcd"]
    },
    "application/x-cfs-compressed": {
      source: "apache",
      extensions: ["cfs"]
    },
    "application/x-chat": {
      source: "apache",
      extensions: ["chat"]
    },
    "application/x-chess-pgn": {
      source: "apache",
      extensions: ["pgn"]
    },
    "application/x-chrome-extension": {
      extensions: ["crx"]
    },
    "application/x-cocoa": {
      source: "nginx",
      extensions: ["cco"]
    },
    "application/x-compress": {
      source: "apache"
    },
    "application/x-conference": {
      source: "apache",
      extensions: ["nsc"]
    },
    "application/x-cpio": {
      source: "apache",
      extensions: ["cpio"]
    },
    "application/x-csh": {
      source: "apache",
      extensions: ["csh"]
    },
    "application/x-deb": {
      compressible: false
    },
    "application/x-debian-package": {
      source: "apache",
      extensions: ["deb", "udeb"]
    },
    "application/x-dgc-compressed": {
      source: "apache",
      extensions: ["dgc"]
    },
    "application/x-director": {
      source: "apache",
      extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
    },
    "application/x-doom": {
      source: "apache",
      extensions: ["wad"]
    },
    "application/x-dtbncx+xml": {
      source: "apache",
      compressible: true,
      extensions: ["ncx"]
    },
    "application/x-dtbook+xml": {
      source: "apache",
      compressible: true,
      extensions: ["dtb"]
    },
    "application/x-dtbresource+xml": {
      source: "apache",
      compressible: true,
      extensions: ["res"]
    },
    "application/x-dvi": {
      source: "apache",
      compressible: false,
      extensions: ["dvi"]
    },
    "application/x-envoy": {
      source: "apache",
      extensions: ["evy"]
    },
    "application/x-eva": {
      source: "apache",
      extensions: ["eva"]
    },
    "application/x-font-bdf": {
      source: "apache",
      extensions: ["bdf"]
    },
    "application/x-font-dos": {
      source: "apache"
    },
    "application/x-font-framemaker": {
      source: "apache"
    },
    "application/x-font-ghostscript": {
      source: "apache",
      extensions: ["gsf"]
    },
    "application/x-font-libgrx": {
      source: "apache"
    },
    "application/x-font-linux-psf": {
      source: "apache",
      extensions: ["psf"]
    },
    "application/x-font-pcf": {
      source: "apache",
      extensions: ["pcf"]
    },
    "application/x-font-snf": {
      source: "apache",
      extensions: ["snf"]
    },
    "application/x-font-speedo": {
      source: "apache"
    },
    "application/x-font-sunos-news": {
      source: "apache"
    },
    "application/x-font-type1": {
      source: "apache",
      extensions: ["pfa", "pfb", "pfm", "afm"]
    },
    "application/x-font-vfont": {
      source: "apache"
    },
    "application/x-freearc": {
      source: "apache",
      extensions: ["arc"]
    },
    "application/x-futuresplash": {
      source: "apache",
      extensions: ["spl"]
    },
    "application/x-gca-compressed": {
      source: "apache",
      extensions: ["gca"]
    },
    "application/x-glulx": {
      source: "apache",
      extensions: ["ulx"]
    },
    "application/x-gnumeric": {
      source: "apache",
      extensions: ["gnumeric"]
    },
    "application/x-gramps-xml": {
      source: "apache",
      extensions: ["gramps"]
    },
    "application/x-gtar": {
      source: "apache",
      extensions: ["gtar"]
    },
    "application/x-gzip": {
      source: "apache"
    },
    "application/x-hdf": {
      source: "apache",
      extensions: ["hdf"]
    },
    "application/x-httpd-php": {
      compressible: true,
      extensions: ["php"]
    },
    "application/x-install-instructions": {
      source: "apache",
      extensions: ["install"]
    },
    "application/x-iso9660-image": {
      source: "apache",
      extensions: ["iso"]
    },
    "application/x-java-archive-diff": {
      source: "nginx",
      extensions: ["jardiff"]
    },
    "application/x-java-jnlp-file": {
      source: "apache",
      compressible: false,
      extensions: ["jnlp"]
    },
    "application/x-javascript": {
      compressible: true
    },
    "application/x-keepass2": {
      extensions: ["kdbx"]
    },
    "application/x-latex": {
      source: "apache",
      compressible: false,
      extensions: ["latex"]
    },
    "application/x-lua-bytecode": {
      extensions: ["luac"]
    },
    "application/x-lzh-compressed": {
      source: "apache",
      extensions: ["lzh", "lha"]
    },
    "application/x-makeself": {
      source: "nginx",
      extensions: ["run"]
    },
    "application/x-mie": {
      source: "apache",
      extensions: ["mie"]
    },
    "application/x-mobipocket-ebook": {
      source: "apache",
      extensions: ["prc", "mobi"]
    },
    "application/x-mpegurl": {
      compressible: false
    },
    "application/x-ms-application": {
      source: "apache",
      extensions: ["application"]
    },
    "application/x-ms-shortcut": {
      source: "apache",
      extensions: ["lnk"]
    },
    "application/x-ms-wmd": {
      source: "apache",
      extensions: ["wmd"]
    },
    "application/x-ms-wmz": {
      source: "apache",
      extensions: ["wmz"]
    },
    "application/x-ms-xbap": {
      source: "apache",
      extensions: ["xbap"]
    },
    "application/x-msaccess": {
      source: "apache",
      extensions: ["mdb"]
    },
    "application/x-msbinder": {
      source: "apache",
      extensions: ["obd"]
    },
    "application/x-mscardfile": {
      source: "apache",
      extensions: ["crd"]
    },
    "application/x-msclip": {
      source: "apache",
      extensions: ["clp"]
    },
    "application/x-msdos-program": {
      extensions: ["exe"]
    },
    "application/x-msdownload": {
      source: "apache",
      extensions: ["exe", "dll", "com", "bat", "msi"]
    },
    "application/x-msmediaview": {
      source: "apache",
      extensions: ["mvb", "m13", "m14"]
    },
    "application/x-msmetafile": {
      source: "apache",
      extensions: ["wmf", "wmz", "emf", "emz"]
    },
    "application/x-msmoney": {
      source: "apache",
      extensions: ["mny"]
    },
    "application/x-mspublisher": {
      source: "apache",
      extensions: ["pub"]
    },
    "application/x-msschedule": {
      source: "apache",
      extensions: ["scd"]
    },
    "application/x-msterminal": {
      source: "apache",
      extensions: ["trm"]
    },
    "application/x-mswrite": {
      source: "apache",
      extensions: ["wri"]
    },
    "application/x-netcdf": {
      source: "apache",
      extensions: ["nc", "cdf"]
    },
    "application/x-ns-proxy-autoconfig": {
      compressible: true,
      extensions: ["pac"]
    },
    "application/x-nzb": {
      source: "apache",
      extensions: ["nzb"]
    },
    "application/x-perl": {
      source: "nginx",
      extensions: ["pl", "pm"]
    },
    "application/x-pilot": {
      source: "nginx",
      extensions: ["prc", "pdb"]
    },
    "application/x-pkcs12": {
      source: "apache",
      compressible: false,
      extensions: ["p12", "pfx"]
    },
    "application/x-pkcs7-certificates": {
      source: "apache",
      extensions: ["p7b", "spc"]
    },
    "application/x-pkcs7-certreqresp": {
      source: "apache",
      extensions: ["p7r"]
    },
    "application/x-pki-message": {
      source: "iana"
    },
    "application/x-rar-compressed": {
      source: "apache",
      compressible: false,
      extensions: ["rar"]
    },
    "application/x-redhat-package-manager": {
      source: "nginx",
      extensions: ["rpm"]
    },
    "application/x-research-info-systems": {
      source: "apache",
      extensions: ["ris"]
    },
    "application/x-sea": {
      source: "nginx",
      extensions: ["sea"]
    },
    "application/x-sh": {
      source: "apache",
      compressible: true,
      extensions: ["sh"]
    },
    "application/x-shar": {
      source: "apache",
      extensions: ["shar"]
    },
    "application/x-shockwave-flash": {
      source: "apache",
      compressible: false,
      extensions: ["swf"]
    },
    "application/x-silverlight-app": {
      source: "apache",
      extensions: ["xap"]
    },
    "application/x-sql": {
      source: "apache",
      extensions: ["sql"]
    },
    "application/x-stuffit": {
      source: "apache",
      compressible: false,
      extensions: ["sit"]
    },
    "application/x-stuffitx": {
      source: "apache",
      extensions: ["sitx"]
    },
    "application/x-subrip": {
      source: "apache",
      extensions: ["srt"]
    },
    "application/x-sv4cpio": {
      source: "apache",
      extensions: ["sv4cpio"]
    },
    "application/x-sv4crc": {
      source: "apache",
      extensions: ["sv4crc"]
    },
    "application/x-t3vm-image": {
      source: "apache",
      extensions: ["t3"]
    },
    "application/x-tads": {
      source: "apache",
      extensions: ["gam"]
    },
    "application/x-tar": {
      source: "apache",
      compressible: true,
      extensions: ["tar"]
    },
    "application/x-tcl": {
      source: "apache",
      extensions: ["tcl", "tk"]
    },
    "application/x-tex": {
      source: "apache",
      extensions: ["tex"]
    },
    "application/x-tex-tfm": {
      source: "apache",
      extensions: ["tfm"]
    },
    "application/x-texinfo": {
      source: "apache",
      extensions: ["texinfo", "texi"]
    },
    "application/x-tgif": {
      source: "apache",
      extensions: ["obj"]
    },
    "application/x-ustar": {
      source: "apache",
      extensions: ["ustar"]
    },
    "application/x-virtualbox-hdd": {
      compressible: true,
      extensions: ["hdd"]
    },
    "application/x-virtualbox-ova": {
      compressible: true,
      extensions: ["ova"]
    },
    "application/x-virtualbox-ovf": {
      compressible: true,
      extensions: ["ovf"]
    },
    "application/x-virtualbox-vbox": {
      compressible: true,
      extensions: ["vbox"]
    },
    "application/x-virtualbox-vbox-extpack": {
      compressible: false,
      extensions: ["vbox-extpack"]
    },
    "application/x-virtualbox-vdi": {
      compressible: true,
      extensions: ["vdi"]
    },
    "application/x-virtualbox-vhd": {
      compressible: true,
      extensions: ["vhd"]
    },
    "application/x-virtualbox-vmdk": {
      compressible: true,
      extensions: ["vmdk"]
    },
    "application/x-wais-source": {
      source: "apache",
      extensions: ["src"]
    },
    "application/x-web-app-manifest+json": {
      compressible: true,
      extensions: ["webapp"]
    },
    "application/x-www-form-urlencoded": {
      source: "iana",
      compressible: true
    },
    "application/x-x509-ca-cert": {
      source: "iana",
      extensions: ["der", "crt", "pem"]
    },
    "application/x-x509-ca-ra-cert": {
      source: "iana"
    },
    "application/x-x509-next-ca-cert": {
      source: "iana"
    },
    "application/x-xfig": {
      source: "apache",
      extensions: ["fig"]
    },
    "application/x-xliff+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xlf"]
    },
    "application/x-xpinstall": {
      source: "apache",
      compressible: false,
      extensions: ["xpi"]
    },
    "application/x-xz": {
      source: "apache",
      extensions: ["xz"]
    },
    "application/x-zmachine": {
      source: "apache",
      extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
    },
    "application/x400-bp": {
      source: "iana"
    },
    "application/xacml+xml": {
      source: "iana",
      compressible: true
    },
    "application/xaml+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xaml"]
    },
    "application/xcap-att+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xav"]
    },
    "application/xcap-caps+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xca"]
    },
    "application/xcap-diff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdf"]
    },
    "application/xcap-el+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xel"]
    },
    "application/xcap-error+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xer"]
    },
    "application/xcap-ns+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xns"]
    },
    "application/xcon-conference-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/xcon-conference-info-diff+xml": {
      source: "iana",
      compressible: true
    },
    "application/xenc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xenc"]
    },
    "application/xhtml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xhtml", "xht"]
    },
    "application/xhtml-voice+xml": {
      source: "apache",
      compressible: true
    },
    "application/xliff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xlf"]
    },
    "application/xml": {
      source: "iana",
      compressible: true,
      extensions: ["xml", "xsl", "xsd", "rng"]
    },
    "application/xml-dtd": {
      source: "iana",
      compressible: true,
      extensions: ["dtd"]
    },
    "application/xml-external-parsed-entity": {
      source: "iana"
    },
    "application/xml-patch+xml": {
      source: "iana",
      compressible: true
    },
    "application/xmpp+xml": {
      source: "iana",
      compressible: true
    },
    "application/xop+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xop"]
    },
    "application/xproc+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xpl"]
    },
    "application/xslt+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xslt"]
    },
    "application/xspf+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xspf"]
    },
    "application/xv+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mxml", "xhvml", "xvml", "xvm"]
    },
    "application/yang": {
      source: "iana",
      extensions: ["yang"]
    },
    "application/yang-data+json": {
      source: "iana",
      compressible: true
    },
    "application/yang-data+xml": {
      source: "iana",
      compressible: true
    },
    "application/yang-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/yang-patch+xml": {
      source: "iana",
      compressible: true
    },
    "application/yin+xml": {
      source: "iana",
      compressible: true,
      extensions: ["yin"]
    },
    "application/zip": {
      source: "iana",
      compressible: false,
      extensions: ["zip"]
    },
    "application/zlib": {
      source: "iana"
    },
    "application/zstd": {
      source: "iana"
    },
    "audio/1d-interleaved-parityfec": {
      source: "iana"
    },
    "audio/32kadpcm": {
      source: "iana"
    },
    "audio/3gpp": {
      source: "iana",
      compressible: false,
      extensions: ["3gpp"]
    },
    "audio/3gpp2": {
      source: "iana"
    },
    "audio/aac": {
      source: "iana"
    },
    "audio/ac3": {
      source: "iana"
    },
    "audio/adpcm": {
      source: "apache",
      extensions: ["adp"]
    },
    "audio/amr": {
      source: "iana"
    },
    "audio/amr-wb": {
      source: "iana"
    },
    "audio/amr-wb+": {
      source: "iana"
    },
    "audio/aptx": {
      source: "iana"
    },
    "audio/asc": {
      source: "iana"
    },
    "audio/atrac-advanced-lossless": {
      source: "iana"
    },
    "audio/atrac-x": {
      source: "iana"
    },
    "audio/atrac3": {
      source: "iana"
    },
    "audio/basic": {
      source: "iana",
      compressible: false,
      extensions: ["au", "snd"]
    },
    "audio/bv16": {
      source: "iana"
    },
    "audio/bv32": {
      source: "iana"
    },
    "audio/clearmode": {
      source: "iana"
    },
    "audio/cn": {
      source: "iana"
    },
    "audio/dat12": {
      source: "iana"
    },
    "audio/dls": {
      source: "iana"
    },
    "audio/dsr-es201108": {
      source: "iana"
    },
    "audio/dsr-es202050": {
      source: "iana"
    },
    "audio/dsr-es202211": {
      source: "iana"
    },
    "audio/dsr-es202212": {
      source: "iana"
    },
    "audio/dv": {
      source: "iana"
    },
    "audio/dvi4": {
      source: "iana"
    },
    "audio/eac3": {
      source: "iana"
    },
    "audio/encaprtp": {
      source: "iana"
    },
    "audio/evrc": {
      source: "iana"
    },
    "audio/evrc-qcp": {
      source: "iana"
    },
    "audio/evrc0": {
      source: "iana"
    },
    "audio/evrc1": {
      source: "iana"
    },
    "audio/evrcb": {
      source: "iana"
    },
    "audio/evrcb0": {
      source: "iana"
    },
    "audio/evrcb1": {
      source: "iana"
    },
    "audio/evrcnw": {
      source: "iana"
    },
    "audio/evrcnw0": {
      source: "iana"
    },
    "audio/evrcnw1": {
      source: "iana"
    },
    "audio/evrcwb": {
      source: "iana"
    },
    "audio/evrcwb0": {
      source: "iana"
    },
    "audio/evrcwb1": {
      source: "iana"
    },
    "audio/evs": {
      source: "iana"
    },
    "audio/flexfec": {
      source: "iana"
    },
    "audio/fwdred": {
      source: "iana"
    },
    "audio/g711-0": {
      source: "iana"
    },
    "audio/g719": {
      source: "iana"
    },
    "audio/g722": {
      source: "iana"
    },
    "audio/g7221": {
      source: "iana"
    },
    "audio/g723": {
      source: "iana"
    },
    "audio/g726-16": {
      source: "iana"
    },
    "audio/g726-24": {
      source: "iana"
    },
    "audio/g726-32": {
      source: "iana"
    },
    "audio/g726-40": {
      source: "iana"
    },
    "audio/g728": {
      source: "iana"
    },
    "audio/g729": {
      source: "iana"
    },
    "audio/g7291": {
      source: "iana"
    },
    "audio/g729d": {
      source: "iana"
    },
    "audio/g729e": {
      source: "iana"
    },
    "audio/gsm": {
      source: "iana"
    },
    "audio/gsm-efr": {
      source: "iana"
    },
    "audio/gsm-hr-08": {
      source: "iana"
    },
    "audio/ilbc": {
      source: "iana"
    },
    "audio/ip-mr_v2.5": {
      source: "iana"
    },
    "audio/isac": {
      source: "apache"
    },
    "audio/l16": {
      source: "iana"
    },
    "audio/l20": {
      source: "iana"
    },
    "audio/l24": {
      source: "iana",
      compressible: false
    },
    "audio/l8": {
      source: "iana"
    },
    "audio/lpc": {
      source: "iana"
    },
    "audio/melp": {
      source: "iana"
    },
    "audio/melp1200": {
      source: "iana"
    },
    "audio/melp2400": {
      source: "iana"
    },
    "audio/melp600": {
      source: "iana"
    },
    "audio/mhas": {
      source: "iana"
    },
    "audio/midi": {
      source: "apache",
      extensions: ["mid", "midi", "kar", "rmi"]
    },
    "audio/mobile-xmf": {
      source: "iana",
      extensions: ["mxmf"]
    },
    "audio/mp3": {
      compressible: false,
      extensions: ["mp3"]
    },
    "audio/mp4": {
      source: "iana",
      compressible: false,
      extensions: ["m4a", "mp4a"]
    },
    "audio/mp4a-latm": {
      source: "iana"
    },
    "audio/mpa": {
      source: "iana"
    },
    "audio/mpa-robust": {
      source: "iana"
    },
    "audio/mpeg": {
      source: "iana",
      compressible: false,
      extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
    },
    "audio/mpeg4-generic": {
      source: "iana"
    },
    "audio/musepack": {
      source: "apache"
    },
    "audio/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["oga", "ogg", "spx"]
    },
    "audio/opus": {
      source: "iana"
    },
    "audio/parityfec": {
      source: "iana"
    },
    "audio/pcma": {
      source: "iana"
    },
    "audio/pcma-wb": {
      source: "iana"
    },
    "audio/pcmu": {
      source: "iana"
    },
    "audio/pcmu-wb": {
      source: "iana"
    },
    "audio/prs.sid": {
      source: "iana"
    },
    "audio/qcelp": {
      source: "iana"
    },
    "audio/raptorfec": {
      source: "iana"
    },
    "audio/red": {
      source: "iana"
    },
    "audio/rtp-enc-aescm128": {
      source: "iana"
    },
    "audio/rtp-midi": {
      source: "iana"
    },
    "audio/rtploopback": {
      source: "iana"
    },
    "audio/rtx": {
      source: "iana"
    },
    "audio/s3m": {
      source: "apache",
      extensions: ["s3m"]
    },
    "audio/silk": {
      source: "apache",
      extensions: ["sil"]
    },
    "audio/smv": {
      source: "iana"
    },
    "audio/smv-qcp": {
      source: "iana"
    },
    "audio/smv0": {
      source: "iana"
    },
    "audio/sp-midi": {
      source: "iana"
    },
    "audio/speex": {
      source: "iana"
    },
    "audio/t140c": {
      source: "iana"
    },
    "audio/t38": {
      source: "iana"
    },
    "audio/telephone-event": {
      source: "iana"
    },
    "audio/tetra_acelp": {
      source: "iana"
    },
    "audio/tetra_acelp_bb": {
      source: "iana"
    },
    "audio/tone": {
      source: "iana"
    },
    "audio/uemclip": {
      source: "iana"
    },
    "audio/ulpfec": {
      source: "iana"
    },
    "audio/usac": {
      source: "iana"
    },
    "audio/vdvi": {
      source: "iana"
    },
    "audio/vmr-wb": {
      source: "iana"
    },
    "audio/vnd.3gpp.iufp": {
      source: "iana"
    },
    "audio/vnd.4sb": {
      source: "iana"
    },
    "audio/vnd.audiokoz": {
      source: "iana"
    },
    "audio/vnd.celp": {
      source: "iana"
    },
    "audio/vnd.cisco.nse": {
      source: "iana"
    },
    "audio/vnd.cmles.radio-events": {
      source: "iana"
    },
    "audio/vnd.cns.anp1": {
      source: "iana"
    },
    "audio/vnd.cns.inf1": {
      source: "iana"
    },
    "audio/vnd.dece.audio": {
      source: "iana",
      extensions: ["uva", "uvva"]
    },
    "audio/vnd.digital-winds": {
      source: "iana",
      extensions: ["eol"]
    },
    "audio/vnd.dlna.adts": {
      source: "iana"
    },
    "audio/vnd.dolby.heaac.1": {
      source: "iana"
    },
    "audio/vnd.dolby.heaac.2": {
      source: "iana"
    },
    "audio/vnd.dolby.mlp": {
      source: "iana"
    },
    "audio/vnd.dolby.mps": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2x": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2z": {
      source: "iana"
    },
    "audio/vnd.dolby.pulse.1": {
      source: "iana"
    },
    "audio/vnd.dra": {
      source: "iana",
      extensions: ["dra"]
    },
    "audio/vnd.dts": {
      source: "iana",
      extensions: ["dts"]
    },
    "audio/vnd.dts.hd": {
      source: "iana",
      extensions: ["dtshd"]
    },
    "audio/vnd.dts.uhd": {
      source: "iana"
    },
    "audio/vnd.dvb.file": {
      source: "iana"
    },
    "audio/vnd.everad.plj": {
      source: "iana"
    },
    "audio/vnd.hns.audio": {
      source: "iana"
    },
    "audio/vnd.lucent.voice": {
      source: "iana",
      extensions: ["lvp"]
    },
    "audio/vnd.ms-playready.media.pya": {
      source: "iana",
      extensions: ["pya"]
    },
    "audio/vnd.nokia.mobile-xmf": {
      source: "iana"
    },
    "audio/vnd.nortel.vbk": {
      source: "iana"
    },
    "audio/vnd.nuera.ecelp4800": {
      source: "iana",
      extensions: ["ecelp4800"]
    },
    "audio/vnd.nuera.ecelp7470": {
      source: "iana",
      extensions: ["ecelp7470"]
    },
    "audio/vnd.nuera.ecelp9600": {
      source: "iana",
      extensions: ["ecelp9600"]
    },
    "audio/vnd.octel.sbc": {
      source: "iana"
    },
    "audio/vnd.presonus.multitrack": {
      source: "iana"
    },
    "audio/vnd.qcelp": {
      source: "iana"
    },
    "audio/vnd.rhetorex.32kadpcm": {
      source: "iana"
    },
    "audio/vnd.rip": {
      source: "iana",
      extensions: ["rip"]
    },
    "audio/vnd.rn-realaudio": {
      compressible: false
    },
    "audio/vnd.sealedmedia.softseal.mpeg": {
      source: "iana"
    },
    "audio/vnd.vmx.cvsd": {
      source: "iana"
    },
    "audio/vnd.wave": {
      compressible: false
    },
    "audio/vorbis": {
      source: "iana",
      compressible: false
    },
    "audio/vorbis-config": {
      source: "iana"
    },
    "audio/wav": {
      compressible: false,
      extensions: ["wav"]
    },
    "audio/wave": {
      compressible: false,
      extensions: ["wav"]
    },
    "audio/webm": {
      source: "apache",
      compressible: false,
      extensions: ["weba"]
    },
    "audio/x-aac": {
      source: "apache",
      compressible: false,
      extensions: ["aac"]
    },
    "audio/x-aiff": {
      source: "apache",
      extensions: ["aif", "aiff", "aifc"]
    },
    "audio/x-caf": {
      source: "apache",
      compressible: false,
      extensions: ["caf"]
    },
    "audio/x-flac": {
      source: "apache",
      extensions: ["flac"]
    },
    "audio/x-m4a": {
      source: "nginx",
      extensions: ["m4a"]
    },
    "audio/x-matroska": {
      source: "apache",
      extensions: ["mka"]
    },
    "audio/x-mpegurl": {
      source: "apache",
      extensions: ["m3u"]
    },
    "audio/x-ms-wax": {
      source: "apache",
      extensions: ["wax"]
    },
    "audio/x-ms-wma": {
      source: "apache",
      extensions: ["wma"]
    },
    "audio/x-pn-realaudio": {
      source: "apache",
      extensions: ["ram", "ra"]
    },
    "audio/x-pn-realaudio-plugin": {
      source: "apache",
      extensions: ["rmp"]
    },
    "audio/x-realaudio": {
      source: "nginx",
      extensions: ["ra"]
    },
    "audio/x-tta": {
      source: "apache"
    },
    "audio/x-wav": {
      source: "apache",
      extensions: ["wav"]
    },
    "audio/xm": {
      source: "apache",
      extensions: ["xm"]
    },
    "chemical/x-cdx": {
      source: "apache",
      extensions: ["cdx"]
    },
    "chemical/x-cif": {
      source: "apache",
      extensions: ["cif"]
    },
    "chemical/x-cmdf": {
      source: "apache",
      extensions: ["cmdf"]
    },
    "chemical/x-cml": {
      source: "apache",
      extensions: ["cml"]
    },
    "chemical/x-csml": {
      source: "apache",
      extensions: ["csml"]
    },
    "chemical/x-pdb": {
      source: "apache"
    },
    "chemical/x-xyz": {
      source: "apache",
      extensions: ["xyz"]
    },
    "font/collection": {
      source: "iana",
      extensions: ["ttc"]
    },
    "font/otf": {
      source: "iana",
      compressible: true,
      extensions: ["otf"]
    },
    "font/sfnt": {
      source: "iana"
    },
    "font/ttf": {
      source: "iana",
      compressible: true,
      extensions: ["ttf"]
    },
    "font/woff": {
      source: "iana",
      extensions: ["woff"]
    },
    "font/woff2": {
      source: "iana",
      extensions: ["woff2"]
    },
    "image/aces": {
      source: "iana",
      extensions: ["exr"]
    },
    "image/apng": {
      compressible: false,
      extensions: ["apng"]
    },
    "image/avci": {
      source: "iana"
    },
    "image/avcs": {
      source: "iana"
    },
    "image/bmp": {
      source: "iana",
      compressible: true,
      extensions: ["bmp"]
    },
    "image/cgm": {
      source: "iana",
      extensions: ["cgm"]
    },
    "image/dicom-rle": {
      source: "iana",
      extensions: ["drle"]
    },
    "image/emf": {
      source: "iana",
      extensions: ["emf"]
    },
    "image/fits": {
      source: "iana",
      extensions: ["fits"]
    },
    "image/g3fax": {
      source: "iana",
      extensions: ["g3"]
    },
    "image/gif": {
      source: "iana",
      compressible: false,
      extensions: ["gif"]
    },
    "image/heic": {
      source: "iana",
      extensions: ["heic"]
    },
    "image/heic-sequence": {
      source: "iana",
      extensions: ["heics"]
    },
    "image/heif": {
      source: "iana",
      extensions: ["heif"]
    },
    "image/heif-sequence": {
      source: "iana",
      extensions: ["heifs"]
    },
    "image/hej2k": {
      source: "iana",
      extensions: ["hej2"]
    },
    "image/hsj2": {
      source: "iana",
      extensions: ["hsj2"]
    },
    "image/ief": {
      source: "iana",
      extensions: ["ief"]
    },
    "image/jls": {
      source: "iana",
      extensions: ["jls"]
    },
    "image/jp2": {
      source: "iana",
      compressible: false,
      extensions: ["jp2", "jpg2"]
    },
    "image/jpeg": {
      source: "iana",
      compressible: false,
      extensions: ["jpeg", "jpg", "jpe"]
    },
    "image/jph": {
      source: "iana",
      extensions: ["jph"]
    },
    "image/jphc": {
      source: "iana",
      extensions: ["jhc"]
    },
    "image/jpm": {
      source: "iana",
      compressible: false,
      extensions: ["jpm"]
    },
    "image/jpx": {
      source: "iana",
      compressible: false,
      extensions: ["jpx", "jpf"]
    },
    "image/jxr": {
      source: "iana",
      extensions: ["jxr"]
    },
    "image/jxra": {
      source: "iana",
      extensions: ["jxra"]
    },
    "image/jxrs": {
      source: "iana",
      extensions: ["jxrs"]
    },
    "image/jxs": {
      source: "iana",
      extensions: ["jxs"]
    },
    "image/jxsc": {
      source: "iana",
      extensions: ["jxsc"]
    },
    "image/jxsi": {
      source: "iana",
      extensions: ["jxsi"]
    },
    "image/jxss": {
      source: "iana",
      extensions: ["jxss"]
    },
    "image/ktx": {
      source: "iana",
      extensions: ["ktx"]
    },
    "image/naplps": {
      source: "iana"
    },
    "image/pjpeg": {
      compressible: false
    },
    "image/png": {
      source: "iana",
      compressible: false,
      extensions: ["png"]
    },
    "image/prs.btif": {
      source: "iana",
      extensions: ["btif"]
    },
    "image/prs.pti": {
      source: "iana",
      extensions: ["pti"]
    },
    "image/pwg-raster": {
      source: "iana"
    },
    "image/sgi": {
      source: "apache",
      extensions: ["sgi"]
    },
    "image/svg+xml": {
      source: "iana",
      compressible: true,
      extensions: ["svg", "svgz"]
    },
    "image/t38": {
      source: "iana",
      extensions: ["t38"]
    },
    "image/tiff": {
      source: "iana",
      compressible: false,
      extensions: ["tif", "tiff"]
    },
    "image/tiff-fx": {
      source: "iana",
      extensions: ["tfx"]
    },
    "image/vnd.adobe.photoshop": {
      source: "iana",
      compressible: true,
      extensions: ["psd"]
    },
    "image/vnd.airzip.accelerator.azv": {
      source: "iana",
      extensions: ["azv"]
    },
    "image/vnd.cns.inf2": {
      source: "iana"
    },
    "image/vnd.dece.graphic": {
      source: "iana",
      extensions: ["uvi", "uvvi", "uvg", "uvvg"]
    },
    "image/vnd.djvu": {
      source: "iana",
      extensions: ["djvu", "djv"]
    },
    "image/vnd.dvb.subtitle": {
      source: "iana",
      extensions: ["sub"]
    },
    "image/vnd.dwg": {
      source: "iana",
      extensions: ["dwg"]
    },
    "image/vnd.dxf": {
      source: "iana",
      extensions: ["dxf"]
    },
    "image/vnd.fastbidsheet": {
      source: "iana",
      extensions: ["fbs"]
    },
    "image/vnd.fpx": {
      source: "iana",
      extensions: ["fpx"]
    },
    "image/vnd.fst": {
      source: "iana",
      extensions: ["fst"]
    },
    "image/vnd.fujixerox.edmics-mmr": {
      source: "iana",
      extensions: ["mmr"]
    },
    "image/vnd.fujixerox.edmics-rlc": {
      source: "iana",
      extensions: ["rlc"]
    },
    "image/vnd.globalgraphics.pgb": {
      source: "iana"
    },
    "image/vnd.microsoft.icon": {
      source: "iana",
      extensions: ["ico"]
    },
    "image/vnd.mix": {
      source: "iana"
    },
    "image/vnd.mozilla.apng": {
      source: "iana"
    },
    "image/vnd.ms-dds": {
      extensions: ["dds"]
    },
    "image/vnd.ms-modi": {
      source: "iana",
      extensions: ["mdi"]
    },
    "image/vnd.ms-photo": {
      source: "apache",
      extensions: ["wdp"]
    },
    "image/vnd.net-fpx": {
      source: "iana",
      extensions: ["npx"]
    },
    "image/vnd.radiance": {
      source: "iana"
    },
    "image/vnd.sealed.png": {
      source: "iana"
    },
    "image/vnd.sealedmedia.softseal.gif": {
      source: "iana"
    },
    "image/vnd.sealedmedia.softseal.jpg": {
      source: "iana"
    },
    "image/vnd.svf": {
      source: "iana"
    },
    "image/vnd.tencent.tap": {
      source: "iana",
      extensions: ["tap"]
    },
    "image/vnd.valve.source.texture": {
      source: "iana",
      extensions: ["vtf"]
    },
    "image/vnd.wap.wbmp": {
      source: "iana",
      extensions: ["wbmp"]
    },
    "image/vnd.xiff": {
      source: "iana",
      extensions: ["xif"]
    },
    "image/vnd.zbrush.pcx": {
      source: "iana",
      extensions: ["pcx"]
    },
    "image/webp": {
      source: "apache",
      extensions: ["webp"]
    },
    "image/wmf": {
      source: "iana",
      extensions: ["wmf"]
    },
    "image/x-3ds": {
      source: "apache",
      extensions: ["3ds"]
    },
    "image/x-cmu-raster": {
      source: "apache",
      extensions: ["ras"]
    },
    "image/x-cmx": {
      source: "apache",
      extensions: ["cmx"]
    },
    "image/x-freehand": {
      source: "apache",
      extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
    },
    "image/x-icon": {
      source: "apache",
      compressible: true,
      extensions: ["ico"]
    },
    "image/x-jng": {
      source: "nginx",
      extensions: ["jng"]
    },
    "image/x-mrsid-image": {
      source: "apache",
      extensions: ["sid"]
    },
    "image/x-ms-bmp": {
      source: "nginx",
      compressible: true,
      extensions: ["bmp"]
    },
    "image/x-pcx": {
      source: "apache",
      extensions: ["pcx"]
    },
    "image/x-pict": {
      source: "apache",
      extensions: ["pic", "pct"]
    },
    "image/x-portable-anymap": {
      source: "apache",
      extensions: ["pnm"]
    },
    "image/x-portable-bitmap": {
      source: "apache",
      extensions: ["pbm"]
    },
    "image/x-portable-graymap": {
      source: "apache",
      extensions: ["pgm"]
    },
    "image/x-portable-pixmap": {
      source: "apache",
      extensions: ["ppm"]
    },
    "image/x-rgb": {
      source: "apache",
      extensions: ["rgb"]
    },
    "image/x-tga": {
      source: "apache",
      extensions: ["tga"]
    },
    "image/x-xbitmap": {
      source: "apache",
      extensions: ["xbm"]
    },
    "image/x-xcf": {
      compressible: false
    },
    "image/x-xpixmap": {
      source: "apache",
      extensions: ["xpm"]
    },
    "image/x-xwindowdump": {
      source: "apache",
      extensions: ["xwd"]
    },
    "message/cpim": {
      source: "iana"
    },
    "message/delivery-status": {
      source: "iana"
    },
    "message/disposition-notification": {
      source: "iana",
      extensions: [
        "disposition-notification"
      ]
    },
    "message/external-body": {
      source: "iana"
    },
    "message/feedback-report": {
      source: "iana"
    },
    "message/global": {
      source: "iana",
      extensions: ["u8msg"]
    },
    "message/global-delivery-status": {
      source: "iana",
      extensions: ["u8dsn"]
    },
    "message/global-disposition-notification": {
      source: "iana",
      extensions: ["u8mdn"]
    },
    "message/global-headers": {
      source: "iana",
      extensions: ["u8hdr"]
    },
    "message/http": {
      source: "iana",
      compressible: false
    },
    "message/imdn+xml": {
      source: "iana",
      compressible: true
    },
    "message/news": {
      source: "iana"
    },
    "message/partial": {
      source: "iana",
      compressible: false
    },
    "message/rfc822": {
      source: "iana",
      compressible: true,
      extensions: ["eml", "mime"]
    },
    "message/s-http": {
      source: "iana"
    },
    "message/sip": {
      source: "iana"
    },
    "message/sipfrag": {
      source: "iana"
    },
    "message/tracking-status": {
      source: "iana"
    },
    "message/vnd.si.simp": {
      source: "iana"
    },
    "message/vnd.wfa.wsc": {
      source: "iana",
      extensions: ["wsc"]
    },
    "model/3mf": {
      source: "iana",
      extensions: ["3mf"]
    },
    "model/gltf+json": {
      source: "iana",
      compressible: true,
      extensions: ["gltf"]
    },
    "model/gltf-binary": {
      source: "iana",
      compressible: true,
      extensions: ["glb"]
    },
    "model/iges": {
      source: "iana",
      compressible: false,
      extensions: ["igs", "iges"]
    },
    "model/mesh": {
      source: "iana",
      compressible: false,
      extensions: ["msh", "mesh", "silo"]
    },
    "model/mtl": {
      source: "iana",
      extensions: ["mtl"]
    },
    "model/obj": {
      source: "iana",
      extensions: ["obj"]
    },
    "model/stl": {
      source: "iana",
      extensions: ["stl"]
    },
    "model/vnd.collada+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dae"]
    },
    "model/vnd.dwf": {
      source: "iana",
      extensions: ["dwf"]
    },
    "model/vnd.flatland.3dml": {
      source: "iana"
    },
    "model/vnd.gdl": {
      source: "iana",
      extensions: ["gdl"]
    },
    "model/vnd.gs-gdl": {
      source: "apache"
    },
    "model/vnd.gs.gdl": {
      source: "iana"
    },
    "model/vnd.gtw": {
      source: "iana",
      extensions: ["gtw"]
    },
    "model/vnd.moml+xml": {
      source: "iana",
      compressible: true
    },
    "model/vnd.mts": {
      source: "iana",
      extensions: ["mts"]
    },
    "model/vnd.opengex": {
      source: "iana",
      extensions: ["ogex"]
    },
    "model/vnd.parasolid.transmit.binary": {
      source: "iana",
      extensions: ["x_b"]
    },
    "model/vnd.parasolid.transmit.text": {
      source: "iana",
      extensions: ["x_t"]
    },
    "model/vnd.rosette.annotated-data-model": {
      source: "iana"
    },
    "model/vnd.usdz+zip": {
      source: "iana",
      compressible: false,
      extensions: ["usdz"]
    },
    "model/vnd.valve.source.compiled-map": {
      source: "iana",
      extensions: ["bsp"]
    },
    "model/vnd.vtu": {
      source: "iana",
      extensions: ["vtu"]
    },
    "model/vrml": {
      source: "iana",
      compressible: false,
      extensions: ["wrl", "vrml"]
    },
    "model/x3d+binary": {
      source: "apache",
      compressible: false,
      extensions: ["x3db", "x3dbz"]
    },
    "model/x3d+fastinfoset": {
      source: "iana",
      extensions: ["x3db"]
    },
    "model/x3d+vrml": {
      source: "apache",
      compressible: false,
      extensions: ["x3dv", "x3dvz"]
    },
    "model/x3d+xml": {
      source: "iana",
      compressible: true,
      extensions: ["x3d", "x3dz"]
    },
    "model/x3d-vrml": {
      source: "iana",
      extensions: ["x3dv"]
    },
    "multipart/alternative": {
      source: "iana",
      compressible: false
    },
    "multipart/appledouble": {
      source: "iana"
    },
    "multipart/byteranges": {
      source: "iana"
    },
    "multipart/digest": {
      source: "iana"
    },
    "multipart/encrypted": {
      source: "iana",
      compressible: false
    },
    "multipart/form-data": {
      source: "iana",
      compressible: false
    },
    "multipart/header-set": {
      source: "iana"
    },
    "multipart/mixed": {
      source: "iana"
    },
    "multipart/multilingual": {
      source: "iana"
    },
    "multipart/parallel": {
      source: "iana"
    },
    "multipart/related": {
      source: "iana",
      compressible: false
    },
    "multipart/report": {
      source: "iana"
    },
    "multipart/signed": {
      source: "iana",
      compressible: false
    },
    "multipart/vnd.bint.med-plus": {
      source: "iana"
    },
    "multipart/voice-message": {
      source: "iana"
    },
    "multipart/x-mixed-replace": {
      source: "iana"
    },
    "text/1d-interleaved-parityfec": {
      source: "iana"
    },
    "text/cache-manifest": {
      source: "iana",
      compressible: true,
      extensions: ["appcache", "manifest"]
    },
    "text/calendar": {
      source: "iana",
      extensions: ["ics", "ifb"]
    },
    "text/calender": {
      compressible: true
    },
    "text/cmd": {
      compressible: true
    },
    "text/coffeescript": {
      extensions: ["coffee", "litcoffee"]
    },
    "text/css": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["css"]
    },
    "text/csv": {
      source: "iana",
      compressible: true,
      extensions: ["csv"]
    },
    "text/csv-schema": {
      source: "iana"
    },
    "text/directory": {
      source: "iana"
    },
    "text/dns": {
      source: "iana"
    },
    "text/ecmascript": {
      source: "iana"
    },
    "text/encaprtp": {
      source: "iana"
    },
    "text/enriched": {
      source: "iana"
    },
    "text/flexfec": {
      source: "iana"
    },
    "text/fwdred": {
      source: "iana"
    },
    "text/grammar-ref-list": {
      source: "iana"
    },
    "text/html": {
      source: "iana",
      compressible: true,
      extensions: ["html", "htm", "shtml"]
    },
    "text/jade": {
      extensions: ["jade"]
    },
    "text/javascript": {
      source: "iana",
      compressible: true
    },
    "text/jcr-cnd": {
      source: "iana"
    },
    "text/jsx": {
      compressible: true,
      extensions: ["jsx"]
    },
    "text/less": {
      compressible: true,
      extensions: ["less"]
    },
    "text/markdown": {
      source: "iana",
      compressible: true,
      extensions: ["markdown", "md"]
    },
    "text/mathml": {
      source: "nginx",
      extensions: ["mml"]
    },
    "text/mdx": {
      compressible: true,
      extensions: ["mdx"]
    },
    "text/mizar": {
      source: "iana"
    },
    "text/n3": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["n3"]
    },
    "text/parameters": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/parityfec": {
      source: "iana"
    },
    "text/plain": {
      source: "iana",
      compressible: true,
      extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
    },
    "text/provenance-notation": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/prs.fallenstein.rst": {
      source: "iana"
    },
    "text/prs.lines.tag": {
      source: "iana",
      extensions: ["dsc"]
    },
    "text/prs.prop.logic": {
      source: "iana"
    },
    "text/raptorfec": {
      source: "iana"
    },
    "text/red": {
      source: "iana"
    },
    "text/rfc822-headers": {
      source: "iana"
    },
    "text/richtext": {
      source: "iana",
      compressible: true,
      extensions: ["rtx"]
    },
    "text/rtf": {
      source: "iana",
      compressible: true,
      extensions: ["rtf"]
    },
    "text/rtp-enc-aescm128": {
      source: "iana"
    },
    "text/rtploopback": {
      source: "iana"
    },
    "text/rtx": {
      source: "iana"
    },
    "text/sgml": {
      source: "iana",
      extensions: ["sgml", "sgm"]
    },
    "text/shex": {
      extensions: ["shex"]
    },
    "text/slim": {
      extensions: ["slim", "slm"]
    },
    "text/strings": {
      source: "iana"
    },
    "text/stylus": {
      extensions: ["stylus", "styl"]
    },
    "text/t140": {
      source: "iana"
    },
    "text/tab-separated-values": {
      source: "iana",
      compressible: true,
      extensions: ["tsv"]
    },
    "text/troff": {
      source: "iana",
      extensions: ["t", "tr", "roff", "man", "me", "ms"]
    },
    "text/turtle": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["ttl"]
    },
    "text/ulpfec": {
      source: "iana"
    },
    "text/uri-list": {
      source: "iana",
      compressible: true,
      extensions: ["uri", "uris", "urls"]
    },
    "text/vcard": {
      source: "iana",
      compressible: true,
      extensions: ["vcard"]
    },
    "text/vnd.a": {
      source: "iana"
    },
    "text/vnd.abc": {
      source: "iana"
    },
    "text/vnd.ascii-art": {
      source: "iana"
    },
    "text/vnd.curl": {
      source: "iana",
      extensions: ["curl"]
    },
    "text/vnd.curl.dcurl": {
      source: "apache",
      extensions: ["dcurl"]
    },
    "text/vnd.curl.mcurl": {
      source: "apache",
      extensions: ["mcurl"]
    },
    "text/vnd.curl.scurl": {
      source: "apache",
      extensions: ["scurl"]
    },
    "text/vnd.debian.copyright": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.dmclientscript": {
      source: "iana"
    },
    "text/vnd.dvb.subtitle": {
      source: "iana",
      extensions: ["sub"]
    },
    "text/vnd.esmertec.theme-descriptor": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.ficlab.flt": {
      source: "iana"
    },
    "text/vnd.fly": {
      source: "iana",
      extensions: ["fly"]
    },
    "text/vnd.fmi.flexstor": {
      source: "iana",
      extensions: ["flx"]
    },
    "text/vnd.gml": {
      source: "iana"
    },
    "text/vnd.graphviz": {
      source: "iana",
      extensions: ["gv"]
    },
    "text/vnd.hgl": {
      source: "iana"
    },
    "text/vnd.in3d.3dml": {
      source: "iana",
      extensions: ["3dml"]
    },
    "text/vnd.in3d.spot": {
      source: "iana",
      extensions: ["spot"]
    },
    "text/vnd.iptc.newsml": {
      source: "iana"
    },
    "text/vnd.iptc.nitf": {
      source: "iana"
    },
    "text/vnd.latex-z": {
      source: "iana"
    },
    "text/vnd.motorola.reflex": {
      source: "iana"
    },
    "text/vnd.ms-mediapackage": {
      source: "iana"
    },
    "text/vnd.net2phone.commcenter.command": {
      source: "iana"
    },
    "text/vnd.radisys.msml-basic-layout": {
      source: "iana"
    },
    "text/vnd.senx.warpscript": {
      source: "iana"
    },
    "text/vnd.si.uricatalogue": {
      source: "iana"
    },
    "text/vnd.sosi": {
      source: "iana"
    },
    "text/vnd.sun.j2me.app-descriptor": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["jad"]
    },
    "text/vnd.trolltech.linguist": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.wap.si": {
      source: "iana"
    },
    "text/vnd.wap.sl": {
      source: "iana"
    },
    "text/vnd.wap.wml": {
      source: "iana",
      extensions: ["wml"]
    },
    "text/vnd.wap.wmlscript": {
      source: "iana",
      extensions: ["wmls"]
    },
    "text/vtt": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["vtt"]
    },
    "text/x-asm": {
      source: "apache",
      extensions: ["s", "asm"]
    },
    "text/x-c": {
      source: "apache",
      extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
    },
    "text/x-component": {
      source: "nginx",
      extensions: ["htc"]
    },
    "text/x-fortran": {
      source: "apache",
      extensions: ["f", "for", "f77", "f90"]
    },
    "text/x-gwt-rpc": {
      compressible: true
    },
    "text/x-handlebars-template": {
      extensions: ["hbs"]
    },
    "text/x-java-source": {
      source: "apache",
      extensions: ["java"]
    },
    "text/x-jquery-tmpl": {
      compressible: true
    },
    "text/x-lua": {
      extensions: ["lua"]
    },
    "text/x-markdown": {
      compressible: true,
      extensions: ["mkd"]
    },
    "text/x-nfo": {
      source: "apache",
      extensions: ["nfo"]
    },
    "text/x-opml": {
      source: "apache",
      extensions: ["opml"]
    },
    "text/x-org": {
      compressible: true,
      extensions: ["org"]
    },
    "text/x-pascal": {
      source: "apache",
      extensions: ["p", "pas"]
    },
    "text/x-processing": {
      compressible: true,
      extensions: ["pde"]
    },
    "text/x-sass": {
      extensions: ["sass"]
    },
    "text/x-scss": {
      extensions: ["scss"]
    },
    "text/x-setext": {
      source: "apache",
      extensions: ["etx"]
    },
    "text/x-sfv": {
      source: "apache",
      extensions: ["sfv"]
    },
    "text/x-suse-ymp": {
      compressible: true,
      extensions: ["ymp"]
    },
    "text/x-uuencode": {
      source: "apache",
      extensions: ["uu"]
    },
    "text/x-vcalendar": {
      source: "apache",
      extensions: ["vcs"]
    },
    "text/x-vcard": {
      source: "apache",
      extensions: ["vcf"]
    },
    "text/xml": {
      source: "iana",
      compressible: true,
      extensions: ["xml"]
    },
    "text/xml-external-parsed-entity": {
      source: "iana"
    },
    "text/yaml": {
      extensions: ["yaml", "yml"]
    },
    "video/1d-interleaved-parityfec": {
      source: "iana"
    },
    "video/3gpp": {
      source: "iana",
      extensions: ["3gp", "3gpp"]
    },
    "video/3gpp-tt": {
      source: "iana"
    },
    "video/3gpp2": {
      source: "iana",
      extensions: ["3g2"]
    },
    "video/bmpeg": {
      source: "iana"
    },
    "video/bt656": {
      source: "iana"
    },
    "video/celb": {
      source: "iana"
    },
    "video/dv": {
      source: "iana"
    },
    "video/encaprtp": {
      source: "iana"
    },
    "video/flexfec": {
      source: "iana"
    },
    "video/h261": {
      source: "iana",
      extensions: ["h261"]
    },
    "video/h263": {
      source: "iana",
      extensions: ["h263"]
    },
    "video/h263-1998": {
      source: "iana"
    },
    "video/h263-2000": {
      source: "iana"
    },
    "video/h264": {
      source: "iana",
      extensions: ["h264"]
    },
    "video/h264-rcdo": {
      source: "iana"
    },
    "video/h264-svc": {
      source: "iana"
    },
    "video/h265": {
      source: "iana"
    },
    "video/iso.segment": {
      source: "iana"
    },
    "video/jpeg": {
      source: "iana",
      extensions: ["jpgv"]
    },
    "video/jpeg2000": {
      source: "iana"
    },
    "video/jpm": {
      source: "apache",
      extensions: ["jpm", "jpgm"]
    },
    "video/mj2": {
      source: "iana",
      extensions: ["mj2", "mjp2"]
    },
    "video/mp1s": {
      source: "iana"
    },
    "video/mp2p": {
      source: "iana"
    },
    "video/mp2t": {
      source: "iana",
      extensions: ["ts"]
    },
    "video/mp4": {
      source: "iana",
      compressible: false,
      extensions: ["mp4", "mp4v", "mpg4"]
    },
    "video/mp4v-es": {
      source: "iana"
    },
    "video/mpeg": {
      source: "iana",
      compressible: false,
      extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
    },
    "video/mpeg4-generic": {
      source: "iana"
    },
    "video/mpv": {
      source: "iana"
    },
    "video/nv": {
      source: "iana"
    },
    "video/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["ogv"]
    },
    "video/parityfec": {
      source: "iana"
    },
    "video/pointer": {
      source: "iana"
    },
    "video/quicktime": {
      source: "iana",
      compressible: false,
      extensions: ["qt", "mov"]
    },
    "video/raptorfec": {
      source: "iana"
    },
    "video/raw": {
      source: "iana"
    },
    "video/rtp-enc-aescm128": {
      source: "iana"
    },
    "video/rtploopback": {
      source: "iana"
    },
    "video/rtx": {
      source: "iana"
    },
    "video/smpte291": {
      source: "iana"
    },
    "video/smpte292m": {
      source: "iana"
    },
    "video/ulpfec": {
      source: "iana"
    },
    "video/vc1": {
      source: "iana"
    },
    "video/vc2": {
      source: "iana"
    },
    "video/vnd.cctv": {
      source: "iana"
    },
    "video/vnd.dece.hd": {
      source: "iana",
      extensions: ["uvh", "uvvh"]
    },
    "video/vnd.dece.mobile": {
      source: "iana",
      extensions: ["uvm", "uvvm"]
    },
    "video/vnd.dece.mp4": {
      source: "iana"
    },
    "video/vnd.dece.pd": {
      source: "iana",
      extensions: ["uvp", "uvvp"]
    },
    "video/vnd.dece.sd": {
      source: "iana",
      extensions: ["uvs", "uvvs"]
    },
    "video/vnd.dece.video": {
      source: "iana",
      extensions: ["uvv", "uvvv"]
    },
    "video/vnd.directv.mpeg": {
      source: "iana"
    },
    "video/vnd.directv.mpeg-tts": {
      source: "iana"
    },
    "video/vnd.dlna.mpeg-tts": {
      source: "iana"
    },
    "video/vnd.dvb.file": {
      source: "iana",
      extensions: ["dvb"]
    },
    "video/vnd.fvt": {
      source: "iana",
      extensions: ["fvt"]
    },
    "video/vnd.hns.video": {
      source: "iana"
    },
    "video/vnd.iptvforum.1dparityfec-1010": {
      source: "iana"
    },
    "video/vnd.iptvforum.1dparityfec-2005": {
      source: "iana"
    },
    "video/vnd.iptvforum.2dparityfec-1010": {
      source: "iana"
    },
    "video/vnd.iptvforum.2dparityfec-2005": {
      source: "iana"
    },
    "video/vnd.iptvforum.ttsavc": {
      source: "iana"
    },
    "video/vnd.iptvforum.ttsmpeg2": {
      source: "iana"
    },
    "video/vnd.motorola.video": {
      source: "iana"
    },
    "video/vnd.motorola.videop": {
      source: "iana"
    },
    "video/vnd.mpegurl": {
      source: "iana",
      extensions: ["mxu", "m4u"]
    },
    "video/vnd.ms-playready.media.pyv": {
      source: "iana",
      extensions: ["pyv"]
    },
    "video/vnd.nokia.interleaved-multimedia": {
      source: "iana"
    },
    "video/vnd.nokia.mp4vr": {
      source: "iana"
    },
    "video/vnd.nokia.videovoip": {
      source: "iana"
    },
    "video/vnd.objectvideo": {
      source: "iana"
    },
    "video/vnd.radgamettools.bink": {
      source: "iana"
    },
    "video/vnd.radgamettools.smacker": {
      source: "iana"
    },
    "video/vnd.sealed.mpeg1": {
      source: "iana"
    },
    "video/vnd.sealed.mpeg4": {
      source: "iana"
    },
    "video/vnd.sealed.swf": {
      source: "iana"
    },
    "video/vnd.sealedmedia.softseal.mov": {
      source: "iana"
    },
    "video/vnd.uvvu.mp4": {
      source: "iana",
      extensions: ["uvu", "uvvu"]
    },
    "video/vnd.vivo": {
      source: "iana",
      extensions: ["viv"]
    },
    "video/vnd.youtube.yt": {
      source: "iana"
    },
    "video/vp8": {
      source: "iana"
    },
    "video/webm": {
      source: "apache",
      compressible: false,
      extensions: ["webm"]
    },
    "video/x-f4v": {
      source: "apache",
      extensions: ["f4v"]
    },
    "video/x-fli": {
      source: "apache",
      extensions: ["fli"]
    },
    "video/x-flv": {
      source: "apache",
      compressible: false,
      extensions: ["flv"]
    },
    "video/x-m4v": {
      source: "apache",
      extensions: ["m4v"]
    },
    "video/x-matroska": {
      source: "apache",
      compressible: false,
      extensions: ["mkv", "mk3d", "mks"]
    },
    "video/x-mng": {
      source: "apache",
      extensions: ["mng"]
    },
    "video/x-ms-asf": {
      source: "apache",
      extensions: ["asf", "asx"]
    },
    "video/x-ms-vob": {
      source: "apache",
      extensions: ["vob"]
    },
    "video/x-ms-wm": {
      source: "apache",
      extensions: ["wm"]
    },
    "video/x-ms-wmv": {
      source: "apache",
      compressible: false,
      extensions: ["wmv"]
    },
    "video/x-ms-wmx": {
      source: "apache",
      extensions: ["wmx"]
    },
    "video/x-ms-wvx": {
      source: "apache",
      extensions: ["wvx"]
    },
    "video/x-msvideo": {
      source: "apache",
      extensions: ["avi"]
    },
    "video/x-sgi-movie": {
      source: "apache",
      extensions: ["movie"]
    },
    "video/x-smv": {
      source: "apache",
      extensions: ["smv"]
    },
    "x-conference/x-cooltalk": {
      source: "apache",
      extensions: ["ice"]
    },
    "x-shader/x-fragment": {
      compressible: true
    },
    "x-shader/x-vertex": {
      compressible: true
    }
  };
});

// ../../node_modules/.pnpm/mime-db@1.44.0/node_modules/mime-db/index.js
var require_mime_db = __commonJS((exports2, module3) => {
  /*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * MIT Licensed
   */
  module3.exports = require_db();
});

// ../../node_modules/.pnpm/mime-types@2.1.27/node_modules/mime-types/index.js
var require_mime_types = __commonJS((exports2) => {
  /*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var db = require_mime_db();
  var extname = require("path").extname;
  var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
  var TEXT_TYPE_REGEXP = /^text\//i;
  exports2.charset = charset;
  exports2.charsets = {lookup: charset};
  exports2.contentType = contentType;
  exports2.extension = extension;
  exports2.extensions = Object.create(null);
  exports2.lookup = lookup;
  exports2.types = Object.create(null);
  populateMaps(exports2.extensions, exports2.types);
  function charset(type) {
    if (!type || typeof type !== "string") {
      return false;
    }
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var mime = match && db[match[1].toLowerCase()];
    if (mime && mime.charset) {
      return mime.charset;
    }
    if (match && TEXT_TYPE_REGEXP.test(match[1])) {
      return "UTF-8";
    }
    return false;
  }
  function contentType(str) {
    if (!str || typeof str !== "string") {
      return false;
    }
    var mime = str.indexOf("/") === -1 ? exports2.lookup(str) : str;
    if (!mime) {
      return false;
    }
    if (mime.indexOf("charset") === -1) {
      var charset2 = exports2.charset(mime);
      if (charset2)
        mime += "; charset=" + charset2.toLowerCase();
    }
    return mime;
  }
  function extension(type) {
    if (!type || typeof type !== "string") {
      return false;
    }
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var exts = match && exports2.extensions[match[1].toLowerCase()];
    if (!exts || !exts.length) {
      return false;
    }
    return exts[0];
  }
  function lookup(path19) {
    if (!path19 || typeof path19 !== "string") {
      return false;
    }
    var extension2 = extname("x." + path19).toLowerCase().substr(1);
    if (!extension2) {
      return false;
    }
    return exports2.types[extension2] || false;
  }
  function populateMaps(extensions, types) {
    var preference = ["nginx", "apache", void 0, "iana"];
    Object.keys(db).forEach(function forEachMimeType(type) {
      var mime = db[type];
      var exts = mime.extensions;
      if (!exts || !exts.length) {
        return;
      }
      extensions[type] = exts;
      for (var i = 0; i < exts.length; i++) {
        var extension2 = exts[i];
        if (types[extension2]) {
          var from = preference.indexOf(db[types[extension2]].source);
          var to = preference.indexOf(mime.source);
          if (types[extension2] !== "application/octet-stream" && (from > to || from === to && types[extension2].substr(0, 12) === "application/")) {
            continue;
          }
        }
        types[extension2] = type;
      }
    });
  }
});

// ../../node_modules/.pnpm/type-is@1.6.18/node_modules/type-is/index.js
var require_type_is = __commonJS((exports2, module3) => {
  /*!
   * type-is
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var typer = require_media_typer();
  var mime = require_mime_types();
  module3.exports = typeofrequest;
  module3.exports.is = typeis;
  module3.exports.hasBody = hasbody;
  module3.exports.normalize = normalize;
  module3.exports.match = mimeMatch;
  function typeis(value, types_) {
    var i;
    var types = types_;
    var val = tryNormalizeType(value);
    if (!val) {
      return false;
    }
    if (types && !Array.isArray(types)) {
      types = new Array(arguments.length - 1);
      for (i = 0; i < types.length; i++) {
        types[i] = arguments[i + 1];
      }
    }
    if (!types || !types.length) {
      return val;
    }
    var type;
    for (i = 0; i < types.length; i++) {
      if (mimeMatch(normalize(type = types[i]), val)) {
        return type[0] === "+" || type.indexOf("*") !== -1 ? val : type;
      }
    }
    return false;
  }
  function hasbody(req) {
    return req.headers["transfer-encoding"] !== void 0 || !isNaN(req.headers["content-length"]);
  }
  function typeofrequest(req, types_) {
    var types = types_;
    if (!hasbody(req)) {
      return null;
    }
    if (arguments.length > 2) {
      types = new Array(arguments.length - 1);
      for (var i = 0; i < types.length; i++) {
        types[i] = arguments[i + 1];
      }
    }
    var value = req.headers["content-type"];
    return typeis(value, types);
  }
  function normalize(type) {
    if (typeof type !== "string") {
      return false;
    }
    switch (type) {
      case "urlencoded":
        return "application/x-www-form-urlencoded";
      case "multipart":
        return "multipart/*";
    }
    if (type[0] === "+") {
      return "*/*" + type;
    }
    return type.indexOf("/") === -1 ? mime.lookup(type) : type;
  }
  function mimeMatch(expected, actual) {
    if (expected === false) {
      return false;
    }
    var actualParts = actual.split("/");
    var expectedParts = expected.split("/");
    if (actualParts.length !== 2 || expectedParts.length !== 2) {
      return false;
    }
    if (expectedParts[0] !== "*" && expectedParts[0] !== actualParts[0]) {
      return false;
    }
    if (expectedParts[1].substr(0, 2) === "*+") {
      return expectedParts[1].length <= actualParts[1].length + 1 && expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length);
    }
    if (expectedParts[1] !== "*" && expectedParts[1] !== actualParts[1]) {
      return false;
    }
    return true;
  }
  function normalizeType(value) {
    var type = typer.parse(value);
    type.parameters = void 0;
    return typer.format(type);
  }
  function tryNormalizeType(value) {
    if (!value) {
      return null;
    }
    try {
      return normalizeType(value);
    } catch (err) {
      return null;
    }
  }
});

// ../../node_modules/.pnpm/body-parser@1.19.0/node_modules/body-parser/lib/types/json.js
var require_json3 = __commonJS((exports2, module3) => {
  /*!
   * body-parser
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var bytes = require_bytes();
  var contentType = require_content_type();
  var createError = require_http_errors();
  var debug3 = require_src7()("body-parser:json");
  var read = require_read();
  var typeis = require_type_is();
  module3.exports = json;
  var FIRST_CHAR_REGEXP = /^[\x20\x09\x0a\x0d]*(.)/;
  function json(options) {
    var opts = options || {};
    var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
    var inflate = opts.inflate !== false;
    var reviver = opts.reviver;
    var strict = opts.strict !== false;
    var type = opts.type || "application/json";
    var verify = opts.verify || false;
    if (verify !== false && typeof verify !== "function") {
      throw new TypeError("option verify must be function");
    }
    var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
    function parse(body) {
      if (body.length === 0) {
        return {};
      }
      if (strict) {
        var first = firstchar(body);
        if (first !== "{" && first !== "[") {
          debug3("strict violation");
          throw createStrictSyntaxError(body, first);
        }
      }
      try {
        debug3("parse json");
        return JSON.parse(body, reviver);
      } catch (e) {
        throw normalizeJsonSyntaxError(e, {
          message: e.message,
          stack: e.stack
        });
      }
    }
    return function jsonParser(req, res, next) {
      if (req._body) {
        debug3("body already parsed");
        next();
        return;
      }
      req.body = req.body || {};
      if (!typeis.hasBody(req)) {
        debug3("skip empty body");
        next();
        return;
      }
      debug3("content-type %j", req.headers["content-type"]);
      if (!shouldParse(req)) {
        debug3("skip parsing");
        next();
        return;
      }
      var charset = getCharset(req) || "utf-8";
      if (charset.substr(0, 4) !== "utf-") {
        debug3("invalid charset");
        next(createError(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
          charset,
          type: "charset.unsupported"
        }));
        return;
      }
      read(req, res, next, parse, debug3, {
        encoding: charset,
        inflate,
        limit,
        verify
      });
    };
  }
  function createStrictSyntaxError(str, char) {
    var index = str.indexOf(char);
    var partial = str.substring(0, index) + "#";
    try {
      JSON.parse(partial);
      throw new SyntaxError("strict violation");
    } catch (e) {
      return normalizeJsonSyntaxError(e, {
        message: e.message.replace("#", char),
        stack: e.stack
      });
    }
  }
  function firstchar(str) {
    return FIRST_CHAR_REGEXP.exec(str)[1];
  }
  function getCharset(req) {
    try {
      return (contentType.parse(req).parameters.charset || "").toLowerCase();
    } catch (e) {
      return void 0;
    }
  }
  function normalizeJsonSyntaxError(error, obj) {
    var keys = Object.getOwnPropertyNames(error);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (key !== "stack" && key !== "message") {
        delete error[key];
      }
    }
    error.stack = obj.stack.replace(error.message, obj.message);
    error.message = obj.message;
    return error;
  }
  function typeChecker(type) {
    return function checkType(req) {
      return Boolean(typeis(req, type));
    };
  }
});

// ../../node_modules/.pnpm/body-parser@1.19.0/node_modules/body-parser/lib/types/raw.js
var require_raw = __commonJS((exports2, module3) => {
  /*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var bytes = require_bytes();
  var debug3 = require_src7()("body-parser:raw");
  var read = require_read();
  var typeis = require_type_is();
  module3.exports = raw;
  function raw(options) {
    var opts = options || {};
    var inflate = opts.inflate !== false;
    var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
    var type = opts.type || "application/octet-stream";
    var verify = opts.verify || false;
    if (verify !== false && typeof verify !== "function") {
      throw new TypeError("option verify must be function");
    }
    var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
    function parse(buf) {
      return buf;
    }
    return function rawParser(req, res, next) {
      if (req._body) {
        debug3("body already parsed");
        next();
        return;
      }
      req.body = req.body || {};
      if (!typeis.hasBody(req)) {
        debug3("skip empty body");
        next();
        return;
      }
      debug3("content-type %j", req.headers["content-type"]);
      if (!shouldParse(req)) {
        debug3("skip parsing");
        next();
        return;
      }
      read(req, res, next, parse, debug3, {
        encoding: null,
        inflate,
        limit,
        verify
      });
    };
  }
  function typeChecker(type) {
    return function checkType(req) {
      return Boolean(typeis(req, type));
    };
  }
});

// ../../node_modules/.pnpm/body-parser@1.19.0/node_modules/body-parser/lib/types/text.js
var require_text3 = __commonJS((exports2, module3) => {
  /*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var bytes = require_bytes();
  var contentType = require_content_type();
  var debug3 = require_src7()("body-parser:text");
  var read = require_read();
  var typeis = require_type_is();
  module3.exports = text;
  function text(options) {
    var opts = options || {};
    var defaultCharset = opts.defaultCharset || "utf-8";
    var inflate = opts.inflate !== false;
    var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
    var type = opts.type || "text/plain";
    var verify = opts.verify || false;
    if (verify !== false && typeof verify !== "function") {
      throw new TypeError("option verify must be function");
    }
    var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
    function parse(buf) {
      return buf;
    }
    return function textParser(req, res, next) {
      if (req._body) {
        debug3("body already parsed");
        next();
        return;
      }
      req.body = req.body || {};
      if (!typeis.hasBody(req)) {
        debug3("skip empty body");
        next();
        return;
      }
      debug3("content-type %j", req.headers["content-type"]);
      if (!shouldParse(req)) {
        debug3("skip parsing");
        next();
        return;
      }
      var charset = getCharset(req) || defaultCharset;
      read(req, res, next, parse, debug3, {
        encoding: charset,
        inflate,
        limit,
        verify
      });
    };
  }
  function getCharset(req) {
    try {
      return (contentType.parse(req).parameters.charset || "").toLowerCase();
    } catch (e) {
      return void 0;
    }
  }
  function typeChecker(type) {
    return function checkType(req) {
      return Boolean(typeis(req, type));
    };
  }
});

// ../../node_modules/.pnpm/qs@6.7.0/node_modules/qs/lib/utils.js
var require_utils6 = __commonJS((exports2, module3) => {
  "use strict";
  var has = Object.prototype.hasOwnProperty;
  var isArray = Array.isArray;
  var hexTable = function() {
    var array = [];
    for (var i = 0; i < 256; ++i) {
      array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
    }
    return array;
  }();
  var compactQueue = function compactQueue2(queue) {
    while (queue.length > 1) {
      var item = queue.pop();
      var obj = item.obj[item.prop];
      if (isArray(obj)) {
        var compacted = [];
        for (var j = 0; j < obj.length; ++j) {
          if (typeof obj[j] !== "undefined") {
            compacted.push(obj[j]);
          }
        }
        item.obj[item.prop] = compacted;
      }
    }
  };
  var arrayToObject = function arrayToObject2(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for (var i = 0; i < source.length; ++i) {
      if (typeof source[i] !== "undefined") {
        obj[i] = source[i];
      }
    }
    return obj;
  };
  var merge = function merge2(target, source, options) {
    if (!source) {
      return target;
    }
    if (typeof source !== "object") {
      if (isArray(target)) {
        target.push(source);
      } else if (target && typeof target === "object") {
        if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) {
          target[source] = true;
        }
      } else {
        return [target, source];
      }
      return target;
    }
    if (!target || typeof target !== "object") {
      return [target].concat(source);
    }
    var mergeTarget = target;
    if (isArray(target) && !isArray(source)) {
      mergeTarget = arrayToObject(target, options);
    }
    if (isArray(target) && isArray(source)) {
      source.forEach(function(item, i) {
        if (has.call(target, i)) {
          var targetItem = target[i];
          if (targetItem && typeof targetItem === "object" && item && typeof item === "object") {
            target[i] = merge2(targetItem, item, options);
          } else {
            target.push(item);
          }
        } else {
          target[i] = item;
        }
      });
      return target;
    }
    return Object.keys(source).reduce(function(acc, key) {
      var value = source[key];
      if (has.call(acc, key)) {
        acc[key] = merge2(acc[key], value, options);
      } else {
        acc[key] = value;
      }
      return acc;
    }, mergeTarget);
  };
  var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function(acc, key) {
      acc[key] = source[key];
      return acc;
    }, target);
  };
  var decode = function(str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, " ");
    if (charset === "iso-8859-1") {
      return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    }
    try {
      return decodeURIComponent(strWithoutPlus);
    } catch (e) {
      return strWithoutPlus;
    }
  };
  var encode = function encode2(str, defaultEncoder, charset) {
    if (str.length === 0) {
      return str;
    }
    var string = typeof str === "string" ? str : String(str);
    if (charset === "iso-8859-1") {
      return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
        return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
      });
    }
    var out = "";
    for (var i = 0; i < string.length; ++i) {
      var c = string.charCodeAt(i);
      if (c === 45 || c === 46 || c === 95 || c === 126 || c >= 48 && c <= 57 || c >= 65 && c <= 90 || c >= 97 && c <= 122) {
        out += string.charAt(i);
        continue;
      }
      if (c < 128) {
        out = out + hexTable[c];
        continue;
      }
      if (c < 2048) {
        out = out + (hexTable[192 | c >> 6] + hexTable[128 | c & 63]);
        continue;
      }
      if (c < 55296 || c >= 57344) {
        out = out + (hexTable[224 | c >> 12] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63]);
        continue;
      }
      i += 1;
      c = 65536 + ((c & 1023) << 10 | string.charCodeAt(i) & 1023);
      out += hexTable[240 | c >> 18] + hexTable[128 | c >> 12 & 63] + hexTable[128 | c >> 6 & 63] + hexTable[128 | c & 63];
    }
    return out;
  };
  var compact = function compact2(value) {
    var queue = [{obj: {o: value}, prop: "o"}];
    var refs = [];
    for (var i = 0; i < queue.length; ++i) {
      var item = queue[i];
      var obj = item.obj[item.prop];
      var keys = Object.keys(obj);
      for (var j = 0; j < keys.length; ++j) {
        var key = keys[j];
        var val = obj[key];
        if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
          queue.push({obj, prop: key});
          refs.push(val);
        }
      }
    }
    compactQueue(queue);
    return value;
  };
  var isRegExp = function isRegExp2(obj) {
    return Object.prototype.toString.call(obj) === "[object RegExp]";
  };
  var isBuffer = function isBuffer2(obj) {
    if (!obj || typeof obj !== "object") {
      return false;
    }
    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
  };
  var combine = function combine2(a, b) {
    return [].concat(a, b);
  };
  module3.exports = {
    arrayToObject,
    assign,
    combine,
    compact,
    decode,
    encode,
    isBuffer,
    isRegExp,
    merge
  };
});

// ../../node_modules/.pnpm/qs@6.7.0/node_modules/qs/lib/formats.js
var require_formats = __commonJS((exports2, module3) => {
  "use strict";
  var replace = String.prototype.replace;
  var percentTwenties = /%20/g;
  module3.exports = {
    default: "RFC3986",
    formatters: {
      RFC1738: function(value) {
        return replace.call(value, percentTwenties, "+");
      },
      RFC3986: function(value) {
        return value;
      }
    },
    RFC1738: "RFC1738",
    RFC3986: "RFC3986"
  };
});

// ../../node_modules/.pnpm/qs@6.7.0/node_modules/qs/lib/stringify.js
var require_stringify2 = __commonJS((exports2, module3) => {
  "use strict";
  var utils = require_utils6();
  var formats = require_formats();
  var has = Object.prototype.hasOwnProperty;
  var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
      return prefix + "[]";
    },
    comma: "comma",
    indices: function indices(prefix, key) {
      return prefix + "[" + key + "]";
    },
    repeat: function repeat(prefix) {
      return prefix;
    }
  };
  var isArray = Array.isArray;
  var push = Array.prototype.push;
  var pushToArray = function(arr, valueOrArray) {
    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [valueOrArray]);
  };
  var toISO = Date.prototype.toISOString;
  var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    charset: "utf-8",
    charsetSentinel: false,
    delimiter: "&",
    encode: true,
    encoder: utils.encode,
    encodeValuesOnly: false,
    formatter: formats.formatters[formats["default"]],
    indices: false,
    serializeDate: function serializeDate(date) {
      return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
  };
  var stringify = function stringify2(object, prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly, charset) {
    var obj = object;
    if (typeof filter === "function") {
      obj = filter(prefix, obj);
    } else if (obj instanceof Date) {
      obj = serializeDate(obj);
    } else if (generateArrayPrefix === "comma" && isArray(obj)) {
      obj = obj.join(",");
    }
    if (obj === null) {
      if (strictNullHandling) {
        return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset) : prefix;
      }
      obj = "";
    }
    if (typeof obj === "string" || typeof obj === "number" || typeof obj === "boolean" || utils.isBuffer(obj)) {
      if (encoder) {
        var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset);
        return [formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset))];
      }
      return [formatter(prefix) + "=" + formatter(String(obj))];
    }
    var values = [];
    if (typeof obj === "undefined") {
      return values;
    }
    var objKeys;
    if (isArray(filter)) {
      objKeys = filter;
    } else {
      var keys = Object.keys(obj);
      objKeys = sort ? keys.sort(sort) : keys;
    }
    for (var i = 0; i < objKeys.length; ++i) {
      var key = objKeys[i];
      if (skipNulls && obj[key] === null) {
        continue;
      }
      if (isArray(obj)) {
        pushToArray(values, stringify2(obj[key], typeof generateArrayPrefix === "function" ? generateArrayPrefix(prefix, key) : prefix, generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly, charset));
      } else {
        pushToArray(values, stringify2(obj[key], prefix + (allowDots ? "." + key : "[" + key + "]"), generateArrayPrefix, strictNullHandling, skipNulls, encoder, filter, sort, allowDots, serializeDate, formatter, encodeValuesOnly, charset));
      }
    }
    return values;
  };
  var normalizeStringifyOptions = function normalizeStringifyOptions2(opts) {
    if (!opts) {
      return defaults;
    }
    if (opts.encoder !== null && opts.encoder !== void 0 && typeof opts.encoder !== "function") {
      throw new TypeError("Encoder has to be a function.");
    }
    var charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    var format11 = formats["default"];
    if (typeof opts.format !== "undefined") {
      if (!has.call(formats.formatters, opts.format)) {
        throw new TypeError("Unknown format option provided.");
      }
      format11 = opts.format;
    }
    var formatter = formats.formatters[format11];
    var filter = defaults.filter;
    if (typeof opts.filter === "function" || isArray(opts.filter)) {
      filter = opts.filter;
    }
    return {
      addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
      allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
      delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
      encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
      encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
      encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
      filter,
      formatter,
      serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
      skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
      sort: typeof opts.sort === "function" ? opts.sort : null,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
    };
  };
  module3.exports = function(object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);
    var objKeys;
    var filter;
    if (typeof options.filter === "function") {
      filter = options.filter;
      obj = filter("", obj);
    } else if (isArray(options.filter)) {
      filter = options.filter;
      objKeys = filter;
    }
    var keys = [];
    if (typeof obj !== "object" || obj === null) {
      return "";
    }
    var arrayFormat;
    if (opts && opts.arrayFormat in arrayPrefixGenerators) {
      arrayFormat = opts.arrayFormat;
    } else if (opts && "indices" in opts) {
      arrayFormat = opts.indices ? "indices" : "repeat";
    } else {
      arrayFormat = "indices";
    }
    var generateArrayPrefix = arrayPrefixGenerators[arrayFormat];
    if (!objKeys) {
      objKeys = Object.keys(obj);
    }
    if (options.sort) {
      objKeys.sort(options.sort);
    }
    for (var i = 0; i < objKeys.length; ++i) {
      var key = objKeys[i];
      if (options.skipNulls && obj[key] === null) {
        continue;
      }
      pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, options.strictNullHandling, options.skipNulls, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.formatter, options.encodeValuesOnly, options.charset));
    }
    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? "?" : "";
    if (options.charsetSentinel) {
      if (options.charset === "iso-8859-1") {
        prefix += "utf8=%26%2310003%3B&";
      } else {
        prefix += "utf8=%E2%9C%93&";
      }
    }
    return joined.length > 0 ? prefix + joined : "";
  };
});

// ../../node_modules/.pnpm/qs@6.7.0/node_modules/qs/lib/parse.js
var require_parse7 = __commonJS((exports2, module3) => {
  "use strict";
  var utils = require_utils6();
  var has = Object.prototype.hasOwnProperty;
  var defaults = {
    allowDots: false,
    allowPrototypes: false,
    arrayLimit: 20,
    charset: "utf-8",
    charsetSentinel: false,
    comma: false,
    decoder: utils.decode,
    delimiter: "&",
    depth: 5,
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1e3,
    parseArrays: true,
    plainObjects: false,
    strictNullHandling: false
  };
  var interpretNumericEntities = function(str) {
    return str.replace(/&#(\d+);/g, function($0, numberStr) {
      return String.fromCharCode(parseInt(numberStr, 10));
    });
  };
  var isoSentinel = "utf8=%26%2310003%3B";
  var charsetSentinel = "utf8=%E2%9C%93";
  var parseValues = function parseQueryStringValues(str, options) {
    var obj = {};
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
    var limit = options.parameterLimit === Infinity ? void 0 : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1;
    var i;
    var charset = options.charset;
    if (options.charsetSentinel) {
      for (i = 0; i < parts.length; ++i) {
        if (parts[i].indexOf("utf8=") === 0) {
          if (parts[i] === charsetSentinel) {
            charset = "utf-8";
          } else if (parts[i] === isoSentinel) {
            charset = "iso-8859-1";
          }
          skipIndex = i;
          i = parts.length;
        }
      }
    }
    for (i = 0; i < parts.length; ++i) {
      if (i === skipIndex) {
        continue;
      }
      var part = parts[i];
      var bracketEqualsPos = part.indexOf("]=");
      var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
      var key, val;
      if (pos === -1) {
        key = options.decoder(part, defaults.decoder, charset);
        val = options.strictNullHandling ? null : "";
      } else {
        key = options.decoder(part.slice(0, pos), defaults.decoder, charset);
        val = options.decoder(part.slice(pos + 1), defaults.decoder, charset);
      }
      if (val && options.interpretNumericEntities && charset === "iso-8859-1") {
        val = interpretNumericEntities(val);
      }
      if (val && options.comma && val.indexOf(",") > -1) {
        val = val.split(",");
      }
      if (has.call(obj, key)) {
        obj[key] = utils.combine(obj[key], val);
      } else {
        obj[key] = val;
      }
    }
    return obj;
  };
  var parseObject = function(chain, val, options) {
    var leaf = val;
    for (var i = chain.length - 1; i >= 0; --i) {
      var obj;
      var root = chain[i];
      if (root === "[]" && options.parseArrays) {
        obj = [].concat(leaf);
      } else {
        obj = options.plainObjects ? Object.create(null) : {};
        var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
        var index = parseInt(cleanRoot, 10);
        if (!options.parseArrays && cleanRoot === "") {
          obj = {0: leaf};
        } else if (!isNaN(index) && root !== cleanRoot && String(index) === cleanRoot && index >= 0 && (options.parseArrays && index <= options.arrayLimit)) {
          obj = [];
          obj[index] = leaf;
        } else {
          obj[cleanRoot] = leaf;
        }
      }
      leaf = obj;
    }
    return leaf;
  };
  var parseKeys = function parseQueryStringKeys(givenKey, val, options) {
    if (!givenKey) {
      return;
    }
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;
    var segment = brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;
    var keys = [];
    if (parent) {
      if (!options.plainObjects && has.call(Object.prototype, parent)) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys.push(parent);
    }
    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {
      i += 1;
      if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
        if (!options.allowPrototypes) {
          return;
        }
      }
      keys.push(segment[1]);
    }
    if (segment) {
      keys.push("[" + key.slice(segment.index) + "]");
    }
    return parseObject(keys, val, options);
  };
  var normalizeParseOptions = function normalizeParseOptions2(opts) {
    if (!opts) {
      return defaults;
    }
    if (opts.decoder !== null && opts.decoder !== void 0 && typeof opts.decoder !== "function") {
      throw new TypeError("Decoder has to be a function.");
    }
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") {
      throw new Error("The charset option must be either utf-8, iso-8859-1, or undefined");
    }
    var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
    return {
      allowDots: typeof opts.allowDots === "undefined" ? defaults.allowDots : !!opts.allowDots,
      allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
      arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
      charset,
      charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
      comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
      decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
      delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
      depth: typeof opts.depth === "number" ? opts.depth : defaults.depth,
      ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
      interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
      parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
      parseArrays: opts.parseArrays !== false,
      plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
      strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
    };
  };
  module3.exports = function(str, opts) {
    var options = normalizeParseOptions(opts);
    if (str === "" || str === null || typeof str === "undefined") {
      return options.plainObjects ? Object.create(null) : {};
    }
    var tempObj = typeof str === "string" ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};
    var keys = Object.keys(tempObj);
    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];
      var newObj = parseKeys(key, tempObj[key], options);
      obj = utils.merge(obj, newObj, options);
    }
    return utils.compact(obj);
  };
});

// ../../node_modules/.pnpm/qs@6.7.0/node_modules/qs/lib/index.js
var require_lib11 = __commonJS((exports2, module3) => {
  "use strict";
  var stringify = require_stringify2();
  var parse = require_parse7();
  var formats = require_formats();
  module3.exports = {
    formats,
    parse,
    stringify
  };
});

// ../../node_modules/.pnpm/body-parser@1.19.0/node_modules/body-parser/lib/types/urlencoded.js
var require_urlencoded = __commonJS((exports2, module3) => {
  /*!
   * body-parser
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var bytes = require_bytes();
  var contentType = require_content_type();
  var createError = require_http_errors();
  var debug3 = require_src7()("body-parser:urlencoded");
  var deprecate = require_depd()("body-parser");
  var read = require_read();
  var typeis = require_type_is();
  module3.exports = urlencoded;
  var parsers = Object.create(null);
  function urlencoded(options) {
    var opts = options || {};
    if (opts.extended === void 0) {
      deprecate("undefined extended: provide extended option");
    }
    var extended = opts.extended !== false;
    var inflate = opts.inflate !== false;
    var limit = typeof opts.limit !== "number" ? bytes.parse(opts.limit || "100kb") : opts.limit;
    var type = opts.type || "application/x-www-form-urlencoded";
    var verify = opts.verify || false;
    if (verify !== false && typeof verify !== "function") {
      throw new TypeError("option verify must be function");
    }
    var queryparse = extended ? extendedparser(opts) : simpleparser(opts);
    var shouldParse = typeof type !== "function" ? typeChecker(type) : type;
    function parse(body) {
      return body.length ? queryparse(body) : {};
    }
    return function urlencodedParser(req, res, next) {
      if (req._body) {
        debug3("body already parsed");
        next();
        return;
      }
      req.body = req.body || {};
      if (!typeis.hasBody(req)) {
        debug3("skip empty body");
        next();
        return;
      }
      debug3("content-type %j", req.headers["content-type"]);
      if (!shouldParse(req)) {
        debug3("skip parsing");
        next();
        return;
      }
      var charset = getCharset(req) || "utf-8";
      if (charset !== "utf-8") {
        debug3("invalid charset");
        next(createError(415, 'unsupported charset "' + charset.toUpperCase() + '"', {
          charset,
          type: "charset.unsupported"
        }));
        return;
      }
      read(req, res, next, parse, debug3, {
        debug: debug3,
        encoding: charset,
        inflate,
        limit,
        verify
      });
    };
  }
  function extendedparser(options) {
    var parameterLimit = options.parameterLimit !== void 0 ? options.parameterLimit : 1e3;
    var parse = parser("qs");
    if (isNaN(parameterLimit) || parameterLimit < 1) {
      throw new TypeError("option parameterLimit must be a positive number");
    }
    if (isFinite(parameterLimit)) {
      parameterLimit = parameterLimit | 0;
    }
    return function queryparse(body) {
      var paramCount = parameterCount(body, parameterLimit);
      if (paramCount === void 0) {
        debug3("too many parameters");
        throw createError(413, "too many parameters", {
          type: "parameters.too.many"
        });
      }
      var arrayLimit = Math.max(100, paramCount);
      debug3("parse extended urlencoding");
      return parse(body, {
        allowPrototypes: true,
        arrayLimit,
        depth: Infinity,
        parameterLimit
      });
    };
  }
  function getCharset(req) {
    try {
      return (contentType.parse(req).parameters.charset || "").toLowerCase();
    } catch (e) {
      return void 0;
    }
  }
  function parameterCount(body, limit) {
    var count = 0;
    var index = 0;
    while ((index = body.indexOf("&", index)) !== -1) {
      count++;
      index++;
      if (count === limit) {
        return void 0;
      }
    }
    return count;
  }
  function parser(name) {
    var mod = parsers[name];
    if (mod !== void 0) {
      return mod.parse;
    }
    switch (name) {
      case "qs":
        mod = require_lib11();
        break;
      case "querystring":
        mod = require("querystring");
        break;
    }
    parsers[name] = mod;
    return mod.parse;
  }
  function simpleparser(options) {
    var parameterLimit = options.parameterLimit !== void 0 ? options.parameterLimit : 1e3;
    var parse = parser("querystring");
    if (isNaN(parameterLimit) || parameterLimit < 1) {
      throw new TypeError("option parameterLimit must be a positive number");
    }
    if (isFinite(parameterLimit)) {
      parameterLimit = parameterLimit | 0;
    }
    return function queryparse(body) {
      var paramCount = parameterCount(body, parameterLimit);
      if (paramCount === void 0) {
        debug3("too many parameters");
        throw createError(413, "too many parameters", {
          type: "parameters.too.many"
        });
      }
      debug3("parse urlencoding");
      return parse(body, void 0, void 0, {maxKeys: parameterLimit});
    };
  }
  function typeChecker(type) {
    return function checkType(req) {
      return Boolean(typeis(req, type));
    };
  }
});

// ../../node_modules/.pnpm/body-parser@1.19.0/node_modules/body-parser/index.js
var require_body_parser = __commonJS((exports2, module3) => {
  /*!
   * body-parser
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var deprecate = require_depd()("body-parser");
  var parsers = Object.create(null);
  exports2 = module3.exports = deprecate.function(bodyParser, "bodyParser: use individual json/urlencoded middlewares");
  Object.defineProperty(exports2, "json", {
    configurable: true,
    enumerable: true,
    get: createParserGetter("json")
  });
  Object.defineProperty(exports2, "raw", {
    configurable: true,
    enumerable: true,
    get: createParserGetter("raw")
  });
  Object.defineProperty(exports2, "text", {
    configurable: true,
    enumerable: true,
    get: createParserGetter("text")
  });
  Object.defineProperty(exports2, "urlencoded", {
    configurable: true,
    enumerable: true,
    get: createParserGetter("urlencoded")
  });
  function bodyParser(options) {
    var opts = {};
    if (options) {
      for (var prop in options) {
        if (prop !== "type") {
          opts[prop] = options[prop];
        }
      }
    }
    var _urlencoded = exports2.urlencoded(opts);
    var _json = exports2.json(opts);
    return function bodyParser2(req, res, next) {
      _json(req, res, function(err) {
        if (err)
          return next(err);
        _urlencoded(req, res, next);
      });
    };
  }
  function createParserGetter(name) {
    return function get() {
      return loadParser(name);
    };
  }
  function loadParser(parserName) {
    var parser = parsers[parserName];
    if (parser !== void 0) {
      return parser;
    }
    switch (parserName) {
      case "json":
        parser = require_json3();
        break;
      case "raw":
        parser = require_raw();
        break;
      case "text":
        parser = require_text3();
        break;
      case "urlencoded":
        parser = require_urlencoded();
        break;
    }
    return parsers[parserName] = parser;
  }
});

// ../../node_modules/.pnpm/merge-descriptors@1.0.1/node_modules/merge-descriptors/index.js
var require_merge_descriptors = __commonJS((exports2, module3) => {
  /*!
   * merge-descriptors
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  module3.exports = merge;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function merge(dest, src, redefine) {
    if (!dest) {
      throw new TypeError("argument dest is required");
    }
    if (!src) {
      throw new TypeError("argument src is required");
    }
    if (redefine === void 0) {
      redefine = true;
    }
    Object.getOwnPropertyNames(src).forEach(function forEachOwnPropertyName(name) {
      if (!redefine && hasOwnProperty.call(dest, name)) {
        return;
      }
      var descriptor = Object.getOwnPropertyDescriptor(src, name);
      Object.defineProperty(dest, name, descriptor);
    });
    return dest;
  }
});

// ../../node_modules/.pnpm/encodeurl@1.0.2/node_modules/encodeurl/index.js
var require_encodeurl = __commonJS((exports2, module3) => {
  /*!
   * encodeurl
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  module3.exports = encodeUrl;
  var ENCODE_CHARS_REGEXP = /(?:[^\x21\x25\x26-\x3B\x3D\x3F-\x5B\x5D\x5F\x61-\x7A\x7E]|%(?:[^0-9A-Fa-f]|[0-9A-Fa-f][^0-9A-Fa-f]|$))+/g;
  var UNMATCHED_SURROGATE_PAIR_REGEXP = /(^|[^\uD800-\uDBFF])[\uDC00-\uDFFF]|[\uD800-\uDBFF]([^\uDC00-\uDFFF]|$)/g;
  var UNMATCHED_SURROGATE_PAIR_REPLACE = "$1�$2";
  function encodeUrl(url) {
    return String(url).replace(UNMATCHED_SURROGATE_PAIR_REGEXP, UNMATCHED_SURROGATE_PAIR_REPLACE).replace(ENCODE_CHARS_REGEXP, encodeURI);
  }
});

// ../../node_modules/.pnpm/escape-html@1.0.3/node_modules/escape-html/index.js
var require_escape_html = __commonJS((exports2, module3) => {
  /*!
   * escape-html
   * Copyright(c) 2012-2013 TJ Holowaychuk
   * Copyright(c) 2015 Andreas Lubbe
   * Copyright(c) 2015 Tiancheng "Timothy" Gu
   * MIT Licensed
   */
  "use strict";
  var matchHtmlRegExp = /["'&<>]/;
  module3.exports = escapeHtml;
  function escapeHtml(string) {
    var str = "" + string;
    var match = matchHtmlRegExp.exec(str);
    if (!match) {
      return str;
    }
    var escape2;
    var html = "";
    var index = 0;
    var lastIndex = 0;
    for (index = match.index; index < str.length; index++) {
      switch (str.charCodeAt(index)) {
        case 34:
          escape2 = "&quot;";
          break;
        case 38:
          escape2 = "&amp;";
          break;
        case 39:
          escape2 = "&#39;";
          break;
        case 60:
          escape2 = "&lt;";
          break;
        case 62:
          escape2 = "&gt;";
          break;
        default:
          continue;
      }
      if (lastIndex !== index) {
        html += str.substring(lastIndex, index);
      }
      lastIndex = index + 1;
      html += escape2;
    }
    return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
  }
});

// ../../node_modules/.pnpm/parseurl@1.3.3/node_modules/parseurl/index.js
var require_parseurl = __commonJS((exports2, module3) => {
  /*!
   * parseurl
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var url = require("url");
  var parse = url.parse;
  var Url = url.Url;
  module3.exports = parseurl;
  module3.exports.original = originalurl;
  function parseurl(req) {
    var url2 = req.url;
    if (url2 === void 0) {
      return void 0;
    }
    var parsed = req._parsedUrl;
    if (fresh(url2, parsed)) {
      return parsed;
    }
    parsed = fastparse(url2);
    parsed._raw = url2;
    return req._parsedUrl = parsed;
  }
  function originalurl(req) {
    var url2 = req.originalUrl;
    if (typeof url2 !== "string") {
      return parseurl(req);
    }
    var parsed = req._parsedOriginalUrl;
    if (fresh(url2, parsed)) {
      return parsed;
    }
    parsed = fastparse(url2);
    parsed._raw = url2;
    return req._parsedOriginalUrl = parsed;
  }
  function fastparse(str) {
    if (typeof str !== "string" || str.charCodeAt(0) !== 47) {
      return parse(str);
    }
    var pathname = str;
    var query = null;
    var search = null;
    for (var i = 1; i < str.length; i++) {
      switch (str.charCodeAt(i)) {
        case 63:
          if (search === null) {
            pathname = str.substring(0, i);
            query = str.substring(i + 1);
            search = str.substring(i);
          }
          break;
        case 9:
        case 10:
        case 12:
        case 13:
        case 32:
        case 35:
        case 160:
        case 65279:
          return parse(str);
      }
    }
    var url2 = Url !== void 0 ? new Url() : {};
    url2.path = str;
    url2.href = str;
    url2.pathname = pathname;
    if (search !== null) {
      url2.query = query;
      url2.search = search;
    }
    return url2;
  }
  function fresh(url2, parsedUrl) {
    return typeof parsedUrl === "object" && parsedUrl !== null && (Url === void 0 || parsedUrl instanceof Url) && parsedUrl._raw === url2;
  }
});

// ../../node_modules/.pnpm/finalhandler@1.1.2/node_modules/finalhandler/index.js
var require_finalhandler = __commonJS((exports2, module3) => {
  /*!
   * finalhandler
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var debug3 = require_src7()("finalhandler");
  var encodeUrl = require_encodeurl();
  var escapeHtml = require_escape_html();
  var onFinished = require_on_finished();
  var parseUrl = require_parseurl();
  var statuses = require_statuses();
  var unpipe = require_unpipe();
  var DOUBLE_SPACE_REGEXP = /\x20{2}/g;
  var NEWLINE_REGEXP = /\n/g;
  var defer = typeof setImmediate === "function" ? setImmediate : function(fn) {
    process.nextTick(fn.bind.apply(fn, arguments));
  };
  var isFinished = onFinished.isFinished;
  function createHtmlDocument(message) {
    var body = escapeHtml(message).replace(NEWLINE_REGEXP, "<br>").replace(DOUBLE_SPACE_REGEXP, " &nbsp;");
    return '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>Error</title>\n</head>\n<body>\n<pre>' + body + "</pre>\n</body>\n</html>\n";
  }
  module3.exports = finalhandler;
  function finalhandler(req, res, options) {
    var opts = options || {};
    var env = opts.env || process.env.NODE_ENV || "development";
    var onerror = opts.onerror;
    return function(err) {
      var headers;
      var msg;
      var status;
      if (!err && headersSent(res)) {
        debug3("cannot 404 after headers sent");
        return;
      }
      if (err) {
        status = getErrorStatusCode(err);
        if (status === void 0) {
          status = getResponseStatusCode(res);
        } else {
          headers = getErrorHeaders(err);
        }
        msg = getErrorMessage(err, status, env);
      } else {
        status = 404;
        msg = "Cannot " + req.method + " " + encodeUrl(getResourceName(req));
      }
      debug3("default %s", status);
      if (err && onerror) {
        defer(onerror, err, req, res);
      }
      if (headersSent(res)) {
        debug3("cannot %d after headers sent", status);
        req.socket.destroy();
        return;
      }
      send(req, res, status, headers, msg);
    };
  }
  function getErrorHeaders(err) {
    if (!err.headers || typeof err.headers !== "object") {
      return void 0;
    }
    var headers = Object.create(null);
    var keys = Object.keys(err.headers);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      headers[key] = err.headers[key];
    }
    return headers;
  }
  function getErrorMessage(err, status, env) {
    var msg;
    if (env !== "production") {
      msg = err.stack;
      if (!msg && typeof err.toString === "function") {
        msg = err.toString();
      }
    }
    return msg || statuses[status];
  }
  function getErrorStatusCode(err) {
    if (typeof err.status === "number" && err.status >= 400 && err.status < 600) {
      return err.status;
    }
    if (typeof err.statusCode === "number" && err.statusCode >= 400 && err.statusCode < 600) {
      return err.statusCode;
    }
    return void 0;
  }
  function getResourceName(req) {
    try {
      return parseUrl.original(req).pathname;
    } catch (e) {
      return "resource";
    }
  }
  function getResponseStatusCode(res) {
    var status = res.statusCode;
    if (typeof status !== "number" || status < 400 || status > 599) {
      status = 500;
    }
    return status;
  }
  function headersSent(res) {
    return typeof res.headersSent !== "boolean" ? Boolean(res._header) : res.headersSent;
  }
  function send(req, res, status, headers, message) {
    function write() {
      var body = createHtmlDocument(message);
      res.statusCode = status;
      res.statusMessage = statuses[status];
      setHeaders(res, headers);
      res.setHeader("Content-Security-Policy", "default-src 'none'");
      res.setHeader("X-Content-Type-Options", "nosniff");
      res.setHeader("Content-Type", "text/html; charset=utf-8");
      res.setHeader("Content-Length", Buffer.byteLength(body, "utf8"));
      if (req.method === "HEAD") {
        res.end();
        return;
      }
      res.end(body, "utf8");
    }
    if (isFinished(req)) {
      write();
      return;
    }
    unpipe(req);
    onFinished(req, write);
    req.resume();
  }
  function setHeaders(res, headers) {
    if (!headers) {
      return;
    }
    var keys = Object.keys(headers);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      res.setHeader(key, headers[key]);
    }
  }
});

// ../../node_modules/.pnpm/array-flatten@1.1.1/node_modules/array-flatten/array-flatten.js
var require_array_flatten = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = arrayFlatten;
  function flattenWithDepth(array, result, depth) {
    for (var i = 0; i < array.length; i++) {
      var value = array[i];
      if (depth > 0 && Array.isArray(value)) {
        flattenWithDepth(value, result, depth - 1);
      } else {
        result.push(value);
      }
    }
    return result;
  }
  function flattenForever(array, result) {
    for (var i = 0; i < array.length; i++) {
      var value = array[i];
      if (Array.isArray(value)) {
        flattenForever(value, result);
      } else {
        result.push(value);
      }
    }
    return result;
  }
  function arrayFlatten(array, depth) {
    if (depth == null) {
      return flattenForever(array, []);
    }
    return flattenWithDepth(array, [], depth);
  }
});

// ../../node_modules/.pnpm/path-to-regexp@0.1.7/node_modules/path-to-regexp/index.js
var require_path_to_regexp = __commonJS((exports2, module3) => {
  module3.exports = pathtoRegexp;
  var MATCHING_GROUP_REGEXP = /\((?!\?)/g;
  function pathtoRegexp(path19, keys, options) {
    options = options || {};
    keys = keys || [];
    var strict = options.strict;
    var end = options.end !== false;
    var flags = options.sensitive ? "" : "i";
    var extraOffset = 0;
    var keysOffset = keys.length;
    var i = 0;
    var name = 0;
    var m;
    if (path19 instanceof RegExp) {
      while (m = MATCHING_GROUP_REGEXP.exec(path19.source)) {
        keys.push({
          name: name++,
          optional: false,
          offset: m.index
        });
      }
      return path19;
    }
    if (Array.isArray(path19)) {
      path19 = path19.map(function(value) {
        return pathtoRegexp(value, keys, options).source;
      });
      return new RegExp("(?:" + path19.join("|") + ")", flags);
    }
    path19 = ("^" + path19 + (strict ? "" : path19[path19.length - 1] === "/" ? "?" : "/?")).replace(/\/\(/g, "/(?:").replace(/([\/\.])/g, "\\$1").replace(/(\\\/)?(\\\.)?:(\w+)(\(.*?\))?(\*)?(\?)?/g, function(match, slash, format11, key, capture, star, optional, offset) {
      slash = slash || "";
      format11 = format11 || "";
      capture = capture || "([^\\/" + format11 + "]+?)";
      optional = optional || "";
      keys.push({
        name: key,
        optional: !!optional,
        offset: offset + extraOffset
      });
      var result = "" + (optional ? "" : slash) + "(?:" + format11 + (optional ? slash : "") + capture + (star ? "((?:[\\/" + format11 + "].+?)?)" : "") + ")" + optional;
      extraOffset += result.length - match.length;
      return result;
    }).replace(/\*/g, function(star, index2) {
      var len = keys.length;
      while (len-- > keysOffset && keys[len].offset > index2) {
        keys[len].offset += 3;
      }
      return "(.*)";
    });
    while (m = MATCHING_GROUP_REGEXP.exec(path19)) {
      var escapeCount = 0;
      var index = m.index;
      while (path19.charAt(--index) === "\\") {
        escapeCount++;
      }
      if (escapeCount % 2 === 1) {
        continue;
      }
      if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {
        keys.splice(keysOffset + i, 0, {
          name: name++,
          optional: false,
          offset: m.index
        });
      }
      i++;
    }
    path19 += end ? "$" : path19[path19.length - 1] === "/" ? "" : "(?=\\/|$)";
    return new RegExp(path19, flags);
  }
});

// ../../node_modules/.pnpm/express@4.17.1/node_modules/express/lib/router/layer.js
var require_layer = __commonJS((exports2, module3) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var pathRegexp = require_path_to_regexp();
  var debug3 = require_src7()("express:router:layer");
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  module3.exports = Layer;
  function Layer(path19, options, fn) {
    if (!(this instanceof Layer)) {
      return new Layer(path19, options, fn);
    }
    debug3("new %o", path19);
    var opts = options || {};
    this.handle = fn;
    this.name = fn.name || "<anonymous>";
    this.params = void 0;
    this.path = void 0;
    this.regexp = pathRegexp(path19, this.keys = [], opts);
    this.regexp.fast_star = path19 === "*";
    this.regexp.fast_slash = path19 === "/" && opts.end === false;
  }
  Layer.prototype.handle_error = function handle_error(error, req, res, next) {
    var fn = this.handle;
    if (fn.length !== 4) {
      return next(error);
    }
    try {
      fn(error, req, res, next);
    } catch (err) {
      next(err);
    }
  };
  Layer.prototype.handle_request = function handle(req, res, next) {
    var fn = this.handle;
    if (fn.length > 3) {
      return next();
    }
    try {
      fn(req, res, next);
    } catch (err) {
      next(err);
    }
  };
  Layer.prototype.match = function match(path19) {
    var match2;
    if (path19 != null) {
      if (this.regexp.fast_slash) {
        this.params = {};
        this.path = "";
        return true;
      }
      if (this.regexp.fast_star) {
        this.params = {"0": decode_param(path19)};
        this.path = path19;
        return true;
      }
      match2 = this.regexp.exec(path19);
    }
    if (!match2) {
      this.params = void 0;
      this.path = void 0;
      return false;
    }
    this.params = {};
    this.path = match2[0];
    var keys = this.keys;
    var params = this.params;
    for (var i = 1; i < match2.length; i++) {
      var key = keys[i - 1];
      var prop = key.name;
      var val = decode_param(match2[i]);
      if (val !== void 0 || !hasOwnProperty.call(params, prop)) {
        params[prop] = val;
      }
    }
    return true;
  };
  function decode_param(val) {
    if (typeof val !== "string" || val.length === 0) {
      return val;
    }
    try {
      return decodeURIComponent(val);
    } catch (err) {
      if (err instanceof URIError) {
        err.message = "Failed to decode param '" + val + "'";
        err.status = err.statusCode = 400;
      }
      throw err;
    }
  }
});

// ../../node_modules/.pnpm/methods@1.1.2/node_modules/methods/index.js
var require_methods = __commonJS((exports2, module3) => {
  /*!
   * methods
   * Copyright(c) 2013-2014 TJ Holowaychuk
   * Copyright(c) 2015-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var http = require("http");
  module3.exports = getCurrentNodeMethods() || getBasicNodeMethods();
  function getCurrentNodeMethods() {
    return http.METHODS && http.METHODS.map(function lowerCaseMethod(method) {
      return method.toLowerCase();
    });
  }
  function getBasicNodeMethods() {
    return [
      "get",
      "post",
      "put",
      "head",
      "delete",
      "options",
      "trace",
      "copy",
      "lock",
      "mkcol",
      "move",
      "purge",
      "propfind",
      "proppatch",
      "unlock",
      "report",
      "mkactivity",
      "checkout",
      "merge",
      "m-search",
      "notify",
      "subscribe",
      "unsubscribe",
      "patch",
      "search",
      "connect"
    ];
  }
});

// ../../node_modules/.pnpm/express@4.17.1/node_modules/express/lib/router/route.js
var require_route3 = __commonJS((exports2, module3) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var debug3 = require_src7()("express:router:route");
  var flatten = require_array_flatten();
  var Layer = require_layer();
  var methods = require_methods();
  var slice = Array.prototype.slice;
  var toString = Object.prototype.toString;
  module3.exports = Route;
  function Route(path19) {
    this.path = path19;
    this.stack = [];
    debug3("new %o", path19);
    this.methods = {};
  }
  Route.prototype._handles_method = function _handles_method(method) {
    if (this.methods._all) {
      return true;
    }
    var name = method.toLowerCase();
    if (name === "head" && !this.methods["head"]) {
      name = "get";
    }
    return Boolean(this.methods[name]);
  };
  Route.prototype._options = function _options() {
    var methods2 = Object.keys(this.methods);
    if (this.methods.get && !this.methods.head) {
      methods2.push("head");
    }
    for (var i = 0; i < methods2.length; i++) {
      methods2[i] = methods2[i].toUpperCase();
    }
    return methods2;
  };
  Route.prototype.dispatch = function dispatch(req, res, done) {
    var idx = 0;
    var stack = this.stack;
    if (stack.length === 0) {
      return done();
    }
    var method = req.method.toLowerCase();
    if (method === "head" && !this.methods["head"]) {
      method = "get";
    }
    req.route = this;
    next();
    function next(err) {
      if (err && err === "route") {
        return done();
      }
      if (err && err === "router") {
        return done(err);
      }
      var layer = stack[idx++];
      if (!layer) {
        return done(err);
      }
      if (layer.method && layer.method !== method) {
        return next(err);
      }
      if (err) {
        layer.handle_error(err, req, res, next);
      } else {
        layer.handle_request(req, res, next);
      }
    }
  };
  Route.prototype.all = function all() {
    var handles = flatten(slice.call(arguments));
    for (var i = 0; i < handles.length; i++) {
      var handle = handles[i];
      if (typeof handle !== "function") {
        var type = toString.call(handle);
        var msg = "Route.all() requires a callback function but got a " + type;
        throw new TypeError(msg);
      }
      var layer = Layer("/", {}, handle);
      layer.method = void 0;
      this.methods._all = true;
      this.stack.push(layer);
    }
    return this;
  };
  methods.forEach(function(method) {
    Route.prototype[method] = function() {
      var handles = flatten(slice.call(arguments));
      for (var i = 0; i < handles.length; i++) {
        var handle = handles[i];
        if (typeof handle !== "function") {
          var type = toString.call(handle);
          var msg = "Route." + method + "() requires a callback function but got a " + type;
          throw new Error(msg);
        }
        debug3("%s %o", method, this.path);
        var layer = Layer("/", {}, handle);
        layer.method = method;
        this.methods[method] = true;
        this.stack.push(layer);
      }
      return this;
    };
  });
});

// ../../node_modules/.pnpm/utils-merge@1.0.1/node_modules/utils-merge/index.js
var require_utils_merge = __commonJS((exports2, module3) => {
  exports2 = module3.exports = function(a, b) {
    if (a && b) {
      for (var key in b) {
        a[key] = b[key];
      }
    }
    return a;
  };
});

// ../../node_modules/.pnpm/express@4.17.1/node_modules/express/lib/router/index.js
var require_router = __commonJS((exports2, module3) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var Route = require_route3();
  var Layer = require_layer();
  var methods = require_methods();
  var mixin = require_utils_merge();
  var debug3 = require_src7()("express:router");
  var deprecate = require_depd()("express");
  var flatten = require_array_flatten();
  var parseUrl = require_parseurl();
  var setPrototypeOf = require_setprototypeof();
  var objectRegExp = /^\[object (\S+)\]$/;
  var slice = Array.prototype.slice;
  var toString = Object.prototype.toString;
  var proto = module3.exports = function(options) {
    var opts = options || {};
    function router(req, res, next) {
      router.handle(req, res, next);
    }
    setPrototypeOf(router, proto);
    router.params = {};
    router._params = [];
    router.caseSensitive = opts.caseSensitive;
    router.mergeParams = opts.mergeParams;
    router.strict = opts.strict;
    router.stack = [];
    return router;
  };
  proto.param = function param(name, fn) {
    if (typeof name === "function") {
      deprecate("router.param(fn): Refactor to use path params");
      this._params.push(name);
      return;
    }
    var params = this._params;
    var len = params.length;
    var ret;
    if (name[0] === ":") {
      deprecate("router.param(" + JSON.stringify(name) + ", fn): Use router.param(" + JSON.stringify(name.substr(1)) + ", fn) instead");
      name = name.substr(1);
    }
    for (var i = 0; i < len; ++i) {
      if (ret = params[i](name, fn)) {
        fn = ret;
      }
    }
    if (typeof fn !== "function") {
      throw new Error("invalid param() call for " + name + ", got " + fn);
    }
    (this.params[name] = this.params[name] || []).push(fn);
    return this;
  };
  proto.handle = function handle(req, res, out) {
    var self2 = this;
    debug3("dispatching %s %s", req.method, req.url);
    var idx = 0;
    var protohost = getProtohost(req.url) || "";
    var removed = "";
    var slashAdded = false;
    var paramcalled = {};
    var options = [];
    var stack = self2.stack;
    var parentParams = req.params;
    var parentUrl = req.baseUrl || "";
    var done = restore(out, req, "baseUrl", "next", "params");
    req.next = next;
    if (req.method === "OPTIONS") {
      done = wrap(done, function(old, err) {
        if (err || options.length === 0)
          return old(err);
        sendOptionsResponse(res, options, old);
      });
    }
    req.baseUrl = parentUrl;
    req.originalUrl = req.originalUrl || req.url;
    next();
    function next(err) {
      var layerError = err === "route" ? null : err;
      if (slashAdded) {
        req.url = req.url.substr(1);
        slashAdded = false;
      }
      if (removed.length !== 0) {
        req.baseUrl = parentUrl;
        req.url = protohost + removed + req.url.substr(protohost.length);
        removed = "";
      }
      if (layerError === "router") {
        setImmediate(done, null);
        return;
      }
      if (idx >= stack.length) {
        setImmediate(done, layerError);
        return;
      }
      var path19 = getPathname(req);
      if (path19 == null) {
        return done(layerError);
      }
      var layer;
      var match;
      var route;
      while (match !== true && idx < stack.length) {
        layer = stack[idx++];
        match = matchLayer(layer, path19);
        route = layer.route;
        if (typeof match !== "boolean") {
          layerError = layerError || match;
        }
        if (match !== true) {
          continue;
        }
        if (!route) {
          continue;
        }
        if (layerError) {
          match = false;
          continue;
        }
        var method = req.method;
        var has_method = route._handles_method(method);
        if (!has_method && method === "OPTIONS") {
          appendMethods(options, route._options());
        }
        if (!has_method && method !== "HEAD") {
          match = false;
          continue;
        }
      }
      if (match !== true) {
        return done(layerError);
      }
      if (route) {
        req.route = route;
      }
      req.params = self2.mergeParams ? mergeParams(layer.params, parentParams) : layer.params;
      var layerPath = layer.path;
      self2.process_params(layer, paramcalled, req, res, function(err2) {
        if (err2) {
          return next(layerError || err2);
        }
        if (route) {
          return layer.handle_request(req, res, next);
        }
        trim_prefix(layer, layerError, layerPath, path19);
      });
    }
    function trim_prefix(layer, layerError, layerPath, path19) {
      if (layerPath.length !== 0) {
        var c = path19[layerPath.length];
        if (c && c !== "/" && c !== ".")
          return next(layerError);
        debug3("trim prefix (%s) from url %s", layerPath, req.url);
        removed = layerPath;
        req.url = protohost + req.url.substr(protohost.length + removed.length);
        if (!protohost && req.url[0] !== "/") {
          req.url = "/" + req.url;
          slashAdded = true;
        }
        req.baseUrl = parentUrl + (removed[removed.length - 1] === "/" ? removed.substring(0, removed.length - 1) : removed);
      }
      debug3("%s %s : %s", layer.name, layerPath, req.originalUrl);
      if (layerError) {
        layer.handle_error(layerError, req, res, next);
      } else {
        layer.handle_request(req, res, next);
      }
    }
  };
  proto.process_params = function process_params(layer, called, req, res, done) {
    var params = this.params;
    var keys = layer.keys;
    if (!keys || keys.length === 0) {
      return done();
    }
    var i = 0;
    var name;
    var paramIndex = 0;
    var key;
    var paramVal;
    var paramCallbacks;
    var paramCalled;
    function param(err) {
      if (err) {
        return done(err);
      }
      if (i >= keys.length) {
        return done();
      }
      paramIndex = 0;
      key = keys[i++];
      name = key.name;
      paramVal = req.params[name];
      paramCallbacks = params[name];
      paramCalled = called[name];
      if (paramVal === void 0 || !paramCallbacks) {
        return param();
      }
      if (paramCalled && (paramCalled.match === paramVal || paramCalled.error && paramCalled.error !== "route")) {
        req.params[name] = paramCalled.value;
        return param(paramCalled.error);
      }
      called[name] = paramCalled = {
        error: null,
        match: paramVal,
        value: paramVal
      };
      paramCallback();
    }
    function paramCallback(err) {
      var fn = paramCallbacks[paramIndex++];
      paramCalled.value = req.params[key.name];
      if (err) {
        paramCalled.error = err;
        param(err);
        return;
      }
      if (!fn)
        return param();
      try {
        fn(req, res, paramCallback, paramVal, key.name);
      } catch (e) {
        paramCallback(e);
      }
    }
    param();
  };
  proto.use = function use(fn) {
    var offset = 0;
    var path19 = "/";
    if (typeof fn !== "function") {
      var arg11 = fn;
      while (Array.isArray(arg11) && arg11.length !== 0) {
        arg11 = arg11[0];
      }
      if (typeof arg11 !== "function") {
        offset = 1;
        path19 = fn;
      }
    }
    var callbacks = flatten(slice.call(arguments, offset));
    if (callbacks.length === 0) {
      throw new TypeError("Router.use() requires a middleware function");
    }
    for (var i = 0; i < callbacks.length; i++) {
      var fn = callbacks[i];
      if (typeof fn !== "function") {
        throw new TypeError("Router.use() requires a middleware function but got a " + gettype(fn));
      }
      debug3("use %o %s", path19, fn.name || "<anonymous>");
      var layer = new Layer(path19, {
        sensitive: this.caseSensitive,
        strict: false,
        end: false
      }, fn);
      layer.route = void 0;
      this.stack.push(layer);
    }
    return this;
  };
  proto.route = function route(path19) {
    var route2 = new Route(path19);
    var layer = new Layer(path19, {
      sensitive: this.caseSensitive,
      strict: this.strict,
      end: true
    }, route2.dispatch.bind(route2));
    layer.route = route2;
    this.stack.push(layer);
    return route2;
  };
  methods.concat("all").forEach(function(method) {
    proto[method] = function(path19) {
      var route = this.route(path19);
      route[method].apply(route, slice.call(arguments, 1));
      return this;
    };
  });
  function appendMethods(list, addition) {
    for (var i = 0; i < addition.length; i++) {
      var method = addition[i];
      if (list.indexOf(method) === -1) {
        list.push(method);
      }
    }
  }
  function getPathname(req) {
    try {
      return parseUrl(req).pathname;
    } catch (err) {
      return void 0;
    }
  }
  function getProtohost(url) {
    if (typeof url !== "string" || url.length === 0 || url[0] === "/") {
      return void 0;
    }
    var searchIndex = url.indexOf("?");
    var pathLength = searchIndex !== -1 ? searchIndex : url.length;
    var fqdnIndex = url.substr(0, pathLength).indexOf("://");
    return fqdnIndex !== -1 ? url.substr(0, url.indexOf("/", 3 + fqdnIndex)) : void 0;
  }
  function gettype(obj) {
    var type = typeof obj;
    if (type !== "object") {
      return type;
    }
    return toString.call(obj).replace(objectRegExp, "$1");
  }
  function matchLayer(layer, path19) {
    try {
      return layer.match(path19);
    } catch (err) {
      return err;
    }
  }
  function mergeParams(params, parent) {
    if (typeof parent !== "object" || !parent) {
      return params;
    }
    var obj = mixin({}, parent);
    if (!(0 in params) || !(0 in parent)) {
      return mixin(obj, params);
    }
    var i = 0;
    var o = 0;
    while (i in params) {
      i++;
    }
    while (o in parent) {
      o++;
    }
    for (i--; i >= 0; i--) {
      params[i + o] = params[i];
      if (i < o) {
        delete params[i];
      }
    }
    return mixin(obj, params);
  }
  function restore(fn, obj) {
    var props = new Array(arguments.length - 2);
    var vals = new Array(arguments.length - 2);
    for (var i = 0; i < props.length; i++) {
      props[i] = arguments[i + 2];
      vals[i] = obj[props[i]];
    }
    return function() {
      for (var i2 = 0; i2 < props.length; i2++) {
        obj[props[i2]] = vals[i2];
      }
      return fn.apply(this, arguments);
    };
  }
  function sendOptionsResponse(res, options, next) {
    try {
      var body = options.join(",");
      res.set("Allow", body);
      res.send(body);
    } catch (err) {
      next(err);
    }
  }
  function wrap(old, fn) {
    return function proxy() {
      var args2 = new Array(arguments.length + 1);
      args2[0] = old;
      for (var i = 0, len = arguments.length; i < len; i++) {
        args2[i + 1] = arguments[i];
      }
      fn.apply(this, args2);
    };
  }
});

// ../../node_modules/.pnpm/express@4.17.1/node_modules/express/lib/middleware/init.js
var require_init = __commonJS((exports2) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var setPrototypeOf = require_setprototypeof();
  exports2.init = function(app) {
    return function expressInit(req, res, next) {
      if (app.enabled("x-powered-by"))
        res.setHeader("X-Powered-By", "Express");
      req.res = res;
      res.req = req;
      req.next = next;
      setPrototypeOf(req, app.request);
      setPrototypeOf(res, app.response);
      res.locals = res.locals || Object.create(null);
      next();
    };
  };
});

// ../../node_modules/.pnpm/express@4.17.1/node_modules/express/lib/middleware/query.js
var require_query = __commonJS((exports2, module3) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var merge = require_utils_merge();
  var parseUrl = require_parseurl();
  var qs = require_lib11();
  module3.exports = function query(options) {
    var opts = merge({}, options);
    var queryparse = qs.parse;
    if (typeof options === "function") {
      queryparse = options;
      opts = void 0;
    }
    if (opts !== void 0 && opts.allowPrototypes === void 0) {
      opts.allowPrototypes = true;
    }
    return function query2(req, res, next) {
      if (!req.query) {
        var val = parseUrl(req).query;
        req.query = queryparse(val, opts);
      }
      next();
    };
  };
});

// ../../node_modules/.pnpm/express@4.17.1/node_modules/express/lib/view.js
var require_view = __commonJS((exports2, module3) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var debug3 = require_src7()("express:view");
  var path19 = require("path");
  var fs17 = require("fs");
  var dirname = path19.dirname;
  var basename = path19.basename;
  var extname = path19.extname;
  var join = path19.join;
  var resolve = path19.resolve;
  module3.exports = View;
  function View(name, options) {
    var opts = options || {};
    this.defaultEngine = opts.defaultEngine;
    this.ext = extname(name);
    this.name = name;
    this.root = opts.root;
    if (!this.ext && !this.defaultEngine) {
      throw new Error("No default engine was specified and no extension was provided.");
    }
    var fileName = name;
    if (!this.ext) {
      this.ext = this.defaultEngine[0] !== "." ? "." + this.defaultEngine : this.defaultEngine;
      fileName += this.ext;
    }
    if (!opts.engines[this.ext]) {
      var mod = this.ext.substr(1);
      debug3('require "%s"', mod);
      var fn = require(mod).__express;
      if (typeof fn !== "function") {
        throw new Error('Module "' + mod + '" does not provide a view engine.');
      }
      opts.engines[this.ext] = fn;
    }
    this.engine = opts.engines[this.ext];
    this.path = this.lookup(fileName);
  }
  View.prototype.lookup = function lookup(name) {
    var path20;
    var roots = [].concat(this.root);
    debug3('lookup "%s"', name);
    for (var i = 0; i < roots.length && !path20; i++) {
      var root = roots[i];
      var loc = resolve(root, name);
      var dir = dirname(loc);
      var file = basename(loc);
      path20 = this.resolve(dir, file);
    }
    return path20;
  };
  View.prototype.render = function render(options, callback) {
    debug3('render "%s"', this.path);
    this.engine(this.path, options, callback);
  };
  View.prototype.resolve = function resolve2(dir, file) {
    var ext = this.ext;
    var path20 = join(dir, file);
    var stat = tryStat(path20);
    if (stat && stat.isFile()) {
      return path20;
    }
    path20 = join(dir, basename(file, ext), "index" + ext);
    stat = tryStat(path20);
    if (stat && stat.isFile()) {
      return path20;
    }
  };
  function tryStat(path20) {
    debug3('stat "%s"', path20);
    try {
      return fs17.statSync(path20);
    } catch (e) {
      return void 0;
    }
  }
});

// ../../node_modules/.pnpm/content-disposition@0.5.3/node_modules/content-disposition/index.js
var require_content_disposition = __commonJS((exports2, module3) => {
  /*!
   * content-disposition
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  module3.exports = contentDisposition;
  module3.exports.parse = parse;
  var basename = require("path").basename;
  var Buffer2 = require_safe_buffer().Buffer;
  var ENCODE_URL_ATTR_CHAR_REGEXP = /[\x00-\x20"'()*,/:;<=>?@[\\\]{}\x7f]/g;
  var HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/;
  var HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g;
  var NON_LATIN1_REGEXP = /[^\x20-\x7e\xa0-\xff]/g;
  var QESC_REGEXP = /\\([\u0000-\u007f])/g;
  var QUOTE_REGEXP = /([\\"])/g;
  var PARAM_REGEXP = /;[\x09\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*=[\x09\x20]*("(?:[\x20!\x23-\x5b\x5d-\x7e\x80-\xff]|\\[\x20-\x7e])*"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*/g;
  var TEXT_REGEXP = /^[\x20-\x7e\x80-\xff]+$/;
  var TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/;
  var EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/;
  var DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\x09\x20]*(?:$|;)/;
  function contentDisposition(filename, options) {
    var opts = options || {};
    var type = opts.type || "attachment";
    var params = createparams(filename, opts.fallback);
    return format11(new ContentDisposition(type, params));
  }
  function createparams(filename, fallback) {
    if (filename === void 0) {
      return;
    }
    var params = {};
    if (typeof filename !== "string") {
      throw new TypeError("filename must be a string");
    }
    if (fallback === void 0) {
      fallback = true;
    }
    if (typeof fallback !== "string" && typeof fallback !== "boolean") {
      throw new TypeError("fallback must be a string or boolean");
    }
    if (typeof fallback === "string" && NON_LATIN1_REGEXP.test(fallback)) {
      throw new TypeError("fallback must be ISO-8859-1 string");
    }
    var name = basename(filename);
    var isQuotedString = TEXT_REGEXP.test(name);
    var fallbackName = typeof fallback !== "string" ? fallback && getlatin1(name) : basename(fallback);
    var hasFallback = typeof fallbackName === "string" && fallbackName !== name;
    if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {
      params["filename*"] = name;
    }
    if (isQuotedString || hasFallback) {
      params.filename = hasFallback ? fallbackName : name;
    }
    return params;
  }
  function format11(obj) {
    var parameters = obj.parameters;
    var type = obj.type;
    if (!type || typeof type !== "string" || !TOKEN_REGEXP.test(type)) {
      throw new TypeError("invalid type");
    }
    var string = String(type).toLowerCase();
    if (parameters && typeof parameters === "object") {
      var param;
      var params = Object.keys(parameters).sort();
      for (var i = 0; i < params.length; i++) {
        param = params[i];
        var val = param.substr(-1) === "*" ? ustring(parameters[param]) : qstring(parameters[param]);
        string += "; " + param + "=" + val;
      }
    }
    return string;
  }
  function decodefield(str) {
    var match = EXT_VALUE_REGEXP.exec(str);
    if (!match) {
      throw new TypeError("invalid extended field value");
    }
    var charset = match[1].toLowerCase();
    var encoded = match[2];
    var value;
    var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode);
    switch (charset) {
      case "iso-8859-1":
        value = getlatin1(binary);
        break;
      case "utf-8":
        value = Buffer2.from(binary, "binary").toString("utf8");
        break;
      default:
        throw new TypeError("unsupported charset in extended field");
    }
    return value;
  }
  function getlatin1(val) {
    return String(val).replace(NON_LATIN1_REGEXP, "?");
  }
  function parse(string) {
    if (!string || typeof string !== "string") {
      throw new TypeError("argument string is required");
    }
    var match = DISPOSITION_TYPE_REGEXP.exec(string);
    if (!match) {
      throw new TypeError("invalid type format");
    }
    var index = match[0].length;
    var type = match[1].toLowerCase();
    var key;
    var names = [];
    var params = {};
    var value;
    index = PARAM_REGEXP.lastIndex = match[0].substr(-1) === ";" ? index - 1 : index;
    while (match = PARAM_REGEXP.exec(string)) {
      if (match.index !== index) {
        throw new TypeError("invalid parameter format");
      }
      index += match[0].length;
      key = match[1].toLowerCase();
      value = match[2];
      if (names.indexOf(key) !== -1) {
        throw new TypeError("invalid duplicate parameter");
      }
      names.push(key);
      if (key.indexOf("*") + 1 === key.length) {
        key = key.slice(0, -1);
        value = decodefield(value);
        params[key] = value;
        continue;
      }
      if (typeof params[key] === "string") {
        continue;
      }
      if (value[0] === '"') {
        value = value.substr(1, value.length - 2).replace(QESC_REGEXP, "$1");
      }
      params[key] = value;
    }
    if (index !== -1 && index !== string.length) {
      throw new TypeError("invalid parameter format");
    }
    return new ContentDisposition(type, params);
  }
  function pdecode(str, hex) {
    return String.fromCharCode(parseInt(hex, 16));
  }
  function pencode(char) {
    return "%" + String(char).charCodeAt(0).toString(16).toUpperCase();
  }
  function qstring(val) {
    var str = String(val);
    return '"' + str.replace(QUOTE_REGEXP, "\\$1") + '"';
  }
  function ustring(val) {
    var str = String(val);
    var encoded = encodeURIComponent(str).replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode);
    return "UTF-8''" + encoded;
  }
  function ContentDisposition(type, parameters) {
    this.type = type;
    this.parameters = parameters;
  }
});

// ../../node_modules/.pnpm/http-errors@1.7.3/node_modules/http-errors/index.js
var require_http_errors2 = __commonJS((exports2, module3) => {
  /*!
   * http-errors
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var deprecate = require_depd()("http-errors");
  var setPrototypeOf = require_setprototypeof();
  var statuses = require_statuses();
  var inherits = require_inherits();
  var toIdentifier = require_toidentifier();
  module3.exports = createError;
  module3.exports.HttpError = createHttpErrorConstructor();
  populateConstructorExports(module3.exports, statuses.codes, module3.exports.HttpError);
  function codeClass(status) {
    return Number(String(status).charAt(0) + "00");
  }
  function createError() {
    var err;
    var msg;
    var status = 500;
    var props = {};
    for (var i = 0; i < arguments.length; i++) {
      var arg11 = arguments[i];
      if (arg11 instanceof Error) {
        err = arg11;
        status = err.status || err.statusCode || status;
        continue;
      }
      switch (typeof arg11) {
        case "string":
          msg = arg11;
          break;
        case "number":
          status = arg11;
          if (i !== 0) {
            deprecate("non-first-argument status code; replace with createError(" + arg11 + ", ...)");
          }
          break;
        case "object":
          props = arg11;
          break;
      }
    }
    if (typeof status === "number" && (status < 400 || status >= 600)) {
      deprecate("non-error status code; use only 4xx or 5xx status codes");
    }
    if (typeof status !== "number" || !statuses[status] && (status < 400 || status >= 600)) {
      status = 500;
    }
    var HttpError = createError[status] || createError[codeClass(status)];
    if (!err) {
      err = HttpError ? new HttpError(msg) : new Error(msg || statuses[status]);
      Error.captureStackTrace(err, createError);
    }
    if (!HttpError || !(err instanceof HttpError) || err.status !== status) {
      err.expose = status < 500;
      err.status = err.statusCode = status;
    }
    for (var key in props) {
      if (key !== "status" && key !== "statusCode") {
        err[key] = props[key];
      }
    }
    return err;
  }
  function createHttpErrorConstructor() {
    function HttpError() {
      throw new TypeError("cannot construct abstract class");
    }
    inherits(HttpError, Error);
    return HttpError;
  }
  function createClientErrorConstructor(HttpError, name, code) {
    var className = name.match(/Error$/) ? name : name + "Error";
    function ClientError(message) {
      var msg = message != null ? message : statuses[code];
      var err = new Error(msg);
      Error.captureStackTrace(err, ClientError);
      setPrototypeOf(err, ClientError.prototype);
      Object.defineProperty(err, "message", {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });
      Object.defineProperty(err, "name", {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });
      return err;
    }
    inherits(ClientError, HttpError);
    nameFunc(ClientError, className);
    ClientError.prototype.status = code;
    ClientError.prototype.statusCode = code;
    ClientError.prototype.expose = true;
    return ClientError;
  }
  function createServerErrorConstructor(HttpError, name, code) {
    var className = name.match(/Error$/) ? name : name + "Error";
    function ServerError(message) {
      var msg = message != null ? message : statuses[code];
      var err = new Error(msg);
      Error.captureStackTrace(err, ServerError);
      setPrototypeOf(err, ServerError.prototype);
      Object.defineProperty(err, "message", {
        enumerable: true,
        configurable: true,
        value: msg,
        writable: true
      });
      Object.defineProperty(err, "name", {
        enumerable: false,
        configurable: true,
        value: className,
        writable: true
      });
      return err;
    }
    inherits(ServerError, HttpError);
    nameFunc(ServerError, className);
    ServerError.prototype.status = code;
    ServerError.prototype.statusCode = code;
    ServerError.prototype.expose = false;
    return ServerError;
  }
  function nameFunc(func, name) {
    var desc = Object.getOwnPropertyDescriptor(func, "name");
    if (desc && desc.configurable) {
      desc.value = name;
      Object.defineProperty(func, "name", desc);
    }
  }
  function populateConstructorExports(exports3, codes, HttpError) {
    codes.forEach(function forEachCode(code) {
      var CodeError;
      var name = toIdentifier(statuses[code]);
      switch (codeClass(code)) {
        case 400:
          CodeError = createClientErrorConstructor(HttpError, name, code);
          break;
        case 500:
          CodeError = createServerErrorConstructor(HttpError, name, code);
          break;
      }
      if (CodeError) {
        exports3[code] = CodeError;
        exports3[name] = CodeError;
      }
    });
    exports3["I'mateapot"] = deprecate.function(exports3.ImATeapot, `"I'mateapot"; use "ImATeapot" instead`);
  }
});

// ../../node_modules/.pnpm/destroy@1.0.4/node_modules/destroy/index.js
var require_destroy3 = __commonJS((exports2, module3) => {
  /*!
   * destroy
   * Copyright(c) 2014 Jonathan Ong
   * MIT Licensed
   */
  "use strict";
  var ReadStream = require("fs").ReadStream;
  var Stream = require("stream");
  module3.exports = destroy;
  function destroy(stream) {
    if (stream instanceof ReadStream) {
      return destroyReadStream(stream);
    }
    if (!(stream instanceof Stream)) {
      return stream;
    }
    if (typeof stream.destroy === "function") {
      stream.destroy();
    }
    return stream;
  }
  function destroyReadStream(stream) {
    stream.destroy();
    if (typeof stream.close === "function") {
      stream.on("open", onOpenClose);
    }
    return stream;
  }
  function onOpenClose() {
    if (typeof this.fd === "number") {
      this.close();
    }
  }
});

// ../../node_modules/.pnpm/etag@1.8.1/node_modules/etag/index.js
var require_etag = __commonJS((exports2, module3) => {
  /*!
   * etag
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  module3.exports = etag;
  var crypto = require("crypto");
  var Stats = require("fs").Stats;
  var toString = Object.prototype.toString;
  function entitytag(entity) {
    if (entity.length === 0) {
      return '"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk"';
    }
    var hash = crypto.createHash("sha1").update(entity, "utf8").digest("base64").substring(0, 27);
    var len = typeof entity === "string" ? Buffer.byteLength(entity, "utf8") : entity.length;
    return '"' + len.toString(16) + "-" + hash + '"';
  }
  function etag(entity, options) {
    if (entity == null) {
      throw new TypeError("argument entity is required");
    }
    var isStats = isstats(entity);
    var weak = options && typeof options.weak === "boolean" ? options.weak : isStats;
    if (!isStats && typeof entity !== "string" && !Buffer.isBuffer(entity)) {
      throw new TypeError("argument entity must be string, Buffer, or fs.Stats");
    }
    var tag = isStats ? stattag(entity) : entitytag(entity);
    return weak ? "W/" + tag : tag;
  }
  function isstats(obj) {
    if (typeof Stats === "function" && obj instanceof Stats) {
      return true;
    }
    return obj && typeof obj === "object" && "ctime" in obj && toString.call(obj.ctime) === "[object Date]" && "mtime" in obj && toString.call(obj.mtime) === "[object Date]" && "ino" in obj && typeof obj.ino === "number" && "size" in obj && typeof obj.size === "number";
  }
  function stattag(stat) {
    var mtime = stat.mtime.getTime().toString(16);
    var size = stat.size.toString(16);
    return '"' + size + "-" + mtime + '"';
  }
});

// ../../node_modules/.pnpm/fresh@0.5.2/node_modules/fresh/index.js
var require_fresh = __commonJS((exports2, module3) => {
  /*!
   * fresh
   * Copyright(c) 2012 TJ Holowaychuk
   * Copyright(c) 2016-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var CACHE_CONTROL_NO_CACHE_REGEXP = /(?:^|,)\s*?no-cache\s*?(?:,|$)/;
  module3.exports = fresh;
  function fresh(reqHeaders, resHeaders) {
    var modifiedSince = reqHeaders["if-modified-since"];
    var noneMatch = reqHeaders["if-none-match"];
    if (!modifiedSince && !noneMatch) {
      return false;
    }
    var cacheControl = reqHeaders["cache-control"];
    if (cacheControl && CACHE_CONTROL_NO_CACHE_REGEXP.test(cacheControl)) {
      return false;
    }
    if (noneMatch && noneMatch !== "*") {
      var etag = resHeaders["etag"];
      if (!etag) {
        return false;
      }
      var etagStale = true;
      var matches = parseTokenList(noneMatch);
      for (var i = 0; i < matches.length; i++) {
        var match = matches[i];
        if (match === etag || match === "W/" + etag || "W/" + match === etag) {
          etagStale = false;
          break;
        }
      }
      if (etagStale) {
        return false;
      }
    }
    if (modifiedSince) {
      var lastModified = resHeaders["last-modified"];
      var modifiedStale = !lastModified || !(parseHttpDate(lastModified) <= parseHttpDate(modifiedSince));
      if (modifiedStale) {
        return false;
      }
    }
    return true;
  }
  function parseHttpDate(date) {
    var timestamp = date && Date.parse(date);
    return typeof timestamp === "number" ? timestamp : NaN;
  }
  function parseTokenList(str) {
    var end = 0;
    var list = [];
    var start = 0;
    for (var i = 0, len = str.length; i < len; i++) {
      switch (str.charCodeAt(i)) {
        case 32:
          if (start === end) {
            start = end = i + 1;
          }
          break;
        case 44:
          list.push(str.substring(start, end));
          start = end = i + 1;
          break;
        default:
          end = i + 1;
          break;
      }
    }
    list.push(str.substring(start, end));
    return list;
  }
});

// ../../node_modules/.pnpm/mime@1.6.0/node_modules/mime/types.json
var require_types4 = __commonJS((exports2, module3) => {
  module3.exports = {"application/andrew-inset": ["ez"], "application/applixware": ["aw"], "application/atom+xml": ["atom"], "application/atomcat+xml": ["atomcat"], "application/atomsvc+xml": ["atomsvc"], "application/bdoc": ["bdoc"], "application/ccxml+xml": ["ccxml"], "application/cdmi-capability": ["cdmia"], "application/cdmi-container": ["cdmic"], "application/cdmi-domain": ["cdmid"], "application/cdmi-object": ["cdmio"], "application/cdmi-queue": ["cdmiq"], "application/cu-seeme": ["cu"], "application/dash+xml": ["mpd"], "application/davmount+xml": ["davmount"], "application/docbook+xml": ["dbk"], "application/dssc+der": ["dssc"], "application/dssc+xml": ["xdssc"], "application/ecmascript": ["ecma"], "application/emma+xml": ["emma"], "application/epub+zip": ["epub"], "application/exi": ["exi"], "application/font-tdpfr": ["pfr"], "application/font-woff": [], "application/font-woff2": [], "application/geo+json": ["geojson"], "application/gml+xml": ["gml"], "application/gpx+xml": ["gpx"], "application/gxf": ["gxf"], "application/gzip": ["gz"], "application/hyperstudio": ["stk"], "application/inkml+xml": ["ink", "inkml"], "application/ipfix": ["ipfix"], "application/java-archive": ["jar", "war", "ear"], "application/java-serialized-object": ["ser"], "application/java-vm": ["class"], "application/javascript": ["js", "mjs"], "application/json": ["json", "map"], "application/json5": ["json5"], "application/jsonml+json": ["jsonml"], "application/ld+json": ["jsonld"], "application/lost+xml": ["lostxml"], "application/mac-binhex40": ["hqx"], "application/mac-compactpro": ["cpt"], "application/mads+xml": ["mads"], "application/manifest+json": ["webmanifest"], "application/marc": ["mrc"], "application/marcxml+xml": ["mrcx"], "application/mathematica": ["ma", "nb", "mb"], "application/mathml+xml": ["mathml"], "application/mbox": ["mbox"], "application/mediaservercontrol+xml": ["mscml"], "application/metalink+xml": ["metalink"], "application/metalink4+xml": ["meta4"], "application/mets+xml": ["mets"], "application/mods+xml": ["mods"], "application/mp21": ["m21", "mp21"], "application/mp4": ["mp4s", "m4p"], "application/msword": ["doc", "dot"], "application/mxf": ["mxf"], "application/octet-stream": ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"], "application/oda": ["oda"], "application/oebps-package+xml": ["opf"], "application/ogg": ["ogx"], "application/omdoc+xml": ["omdoc"], "application/onenote": ["onetoc", "onetoc2", "onetmp", "onepkg"], "application/oxps": ["oxps"], "application/patch-ops-error+xml": ["xer"], "application/pdf": ["pdf"], "application/pgp-encrypted": ["pgp"], "application/pgp-signature": ["asc", "sig"], "application/pics-rules": ["prf"], "application/pkcs10": ["p10"], "application/pkcs7-mime": ["p7m", "p7c"], "application/pkcs7-signature": ["p7s"], "application/pkcs8": ["p8"], "application/pkix-attr-cert": ["ac"], "application/pkix-cert": ["cer"], "application/pkix-crl": ["crl"], "application/pkix-pkipath": ["pkipath"], "application/pkixcmp": ["pki"], "application/pls+xml": ["pls"], "application/postscript": ["ai", "eps", "ps"], "application/prs.cww": ["cww"], "application/pskc+xml": ["pskcxml"], "application/raml+yaml": ["raml"], "application/rdf+xml": ["rdf"], "application/reginfo+xml": ["rif"], "application/relax-ng-compact-syntax": ["rnc"], "application/resource-lists+xml": ["rl"], "application/resource-lists-diff+xml": ["rld"], "application/rls-services+xml": ["rs"], "application/rpki-ghostbusters": ["gbr"], "application/rpki-manifest": ["mft"], "application/rpki-roa": ["roa"], "application/rsd+xml": ["rsd"], "application/rss+xml": ["rss"], "application/rtf": ["rtf"], "application/sbml+xml": ["sbml"], "application/scvp-cv-request": ["scq"], "application/scvp-cv-response": ["scs"], "application/scvp-vp-request": ["spq"], "application/scvp-vp-response": ["spp"], "application/sdp": ["sdp"], "application/set-payment-initiation": ["setpay"], "application/set-registration-initiation": ["setreg"], "application/shf+xml": ["shf"], "application/smil+xml": ["smi", "smil"], "application/sparql-query": ["rq"], "application/sparql-results+xml": ["srx"], "application/srgs": ["gram"], "application/srgs+xml": ["grxml"], "application/sru+xml": ["sru"], "application/ssdl+xml": ["ssdl"], "application/ssml+xml": ["ssml"], "application/tei+xml": ["tei", "teicorpus"], "application/thraud+xml": ["tfi"], "application/timestamped-data": ["tsd"], "application/vnd.3gpp.pic-bw-large": ["plb"], "application/vnd.3gpp.pic-bw-small": ["psb"], "application/vnd.3gpp.pic-bw-var": ["pvb"], "application/vnd.3gpp2.tcap": ["tcap"], "application/vnd.3m.post-it-notes": ["pwn"], "application/vnd.accpac.simply.aso": ["aso"], "application/vnd.accpac.simply.imp": ["imp"], "application/vnd.acucobol": ["acu"], "application/vnd.acucorp": ["atc", "acutc"], "application/vnd.adobe.air-application-installer-package+zip": ["air"], "application/vnd.adobe.formscentral.fcdt": ["fcdt"], "application/vnd.adobe.fxp": ["fxp", "fxpl"], "application/vnd.adobe.xdp+xml": ["xdp"], "application/vnd.adobe.xfdf": ["xfdf"], "application/vnd.ahead.space": ["ahead"], "application/vnd.airzip.filesecure.azf": ["azf"], "application/vnd.airzip.filesecure.azs": ["azs"], "application/vnd.amazon.ebook": ["azw"], "application/vnd.americandynamics.acc": ["acc"], "application/vnd.amiga.ami": ["ami"], "application/vnd.android.package-archive": ["apk"], "application/vnd.anser-web-certificate-issue-initiation": ["cii"], "application/vnd.anser-web-funds-transfer-initiation": ["fti"], "application/vnd.antix.game-component": ["atx"], "application/vnd.apple.installer+xml": ["mpkg"], "application/vnd.apple.mpegurl": ["m3u8"], "application/vnd.apple.pkpass": ["pkpass"], "application/vnd.aristanetworks.swi": ["swi"], "application/vnd.astraea-software.iota": ["iota"], "application/vnd.audiograph": ["aep"], "application/vnd.blueice.multipass": ["mpm"], "application/vnd.bmi": ["bmi"], "application/vnd.businessobjects": ["rep"], "application/vnd.chemdraw+xml": ["cdxml"], "application/vnd.chipnuts.karaoke-mmd": ["mmd"], "application/vnd.cinderella": ["cdy"], "application/vnd.claymore": ["cla"], "application/vnd.cloanto.rp9": ["rp9"], "application/vnd.clonk.c4group": ["c4g", "c4d", "c4f", "c4p", "c4u"], "application/vnd.cluetrust.cartomobile-config": ["c11amc"], "application/vnd.cluetrust.cartomobile-config-pkg": ["c11amz"], "application/vnd.commonspace": ["csp"], "application/vnd.contact.cmsg": ["cdbcmsg"], "application/vnd.cosmocaller": ["cmc"], "application/vnd.crick.clicker": ["clkx"], "application/vnd.crick.clicker.keyboard": ["clkk"], "application/vnd.crick.clicker.palette": ["clkp"], "application/vnd.crick.clicker.template": ["clkt"], "application/vnd.crick.clicker.wordbank": ["clkw"], "application/vnd.criticaltools.wbs+xml": ["wbs"], "application/vnd.ctc-posml": ["pml"], "application/vnd.cups-ppd": ["ppd"], "application/vnd.curl.car": ["car"], "application/vnd.curl.pcurl": ["pcurl"], "application/vnd.dart": ["dart"], "application/vnd.data-vision.rdz": ["rdz"], "application/vnd.dece.data": ["uvf", "uvvf", "uvd", "uvvd"], "application/vnd.dece.ttml+xml": ["uvt", "uvvt"], "application/vnd.dece.unspecified": ["uvx", "uvvx"], "application/vnd.dece.zip": ["uvz", "uvvz"], "application/vnd.denovo.fcselayout-link": ["fe_launch"], "application/vnd.dna": ["dna"], "application/vnd.dolby.mlp": ["mlp"], "application/vnd.dpgraph": ["dpg"], "application/vnd.dreamfactory": ["dfac"], "application/vnd.ds-keypoint": ["kpxx"], "application/vnd.dvb.ait": ["ait"], "application/vnd.dvb.service": ["svc"], "application/vnd.dynageo": ["geo"], "application/vnd.ecowin.chart": ["mag"], "application/vnd.enliven": ["nml"], "application/vnd.epson.esf": ["esf"], "application/vnd.epson.msf": ["msf"], "application/vnd.epson.quickanime": ["qam"], "application/vnd.epson.salt": ["slt"], "application/vnd.epson.ssf": ["ssf"], "application/vnd.eszigno3+xml": ["es3", "et3"], "application/vnd.ezpix-album": ["ez2"], "application/vnd.ezpix-package": ["ez3"], "application/vnd.fdf": ["fdf"], "application/vnd.fdsn.mseed": ["mseed"], "application/vnd.fdsn.seed": ["seed", "dataless"], "application/vnd.flographit": ["gph"], "application/vnd.fluxtime.clip": ["ftc"], "application/vnd.framemaker": ["fm", "frame", "maker", "book"], "application/vnd.frogans.fnc": ["fnc"], "application/vnd.frogans.ltf": ["ltf"], "application/vnd.fsc.weblaunch": ["fsc"], "application/vnd.fujitsu.oasys": ["oas"], "application/vnd.fujitsu.oasys2": ["oa2"], "application/vnd.fujitsu.oasys3": ["oa3"], "application/vnd.fujitsu.oasysgp": ["fg5"], "application/vnd.fujitsu.oasysprs": ["bh2"], "application/vnd.fujixerox.ddd": ["ddd"], "application/vnd.fujixerox.docuworks": ["xdw"], "application/vnd.fujixerox.docuworks.binder": ["xbd"], "application/vnd.fuzzysheet": ["fzs"], "application/vnd.genomatix.tuxedo": ["txd"], "application/vnd.geogebra.file": ["ggb"], "application/vnd.geogebra.tool": ["ggt"], "application/vnd.geometry-explorer": ["gex", "gre"], "application/vnd.geonext": ["gxt"], "application/vnd.geoplan": ["g2w"], "application/vnd.geospace": ["g3w"], "application/vnd.gmx": ["gmx"], "application/vnd.google-apps.document": ["gdoc"], "application/vnd.google-apps.presentation": ["gslides"], "application/vnd.google-apps.spreadsheet": ["gsheet"], "application/vnd.google-earth.kml+xml": ["kml"], "application/vnd.google-earth.kmz": ["kmz"], "application/vnd.grafeq": ["gqf", "gqs"], "application/vnd.groove-account": ["gac"], "application/vnd.groove-help": ["ghf"], "application/vnd.groove-identity-message": ["gim"], "application/vnd.groove-injector": ["grv"], "application/vnd.groove-tool-message": ["gtm"], "application/vnd.groove-tool-template": ["tpl"], "application/vnd.groove-vcard": ["vcg"], "application/vnd.hal+xml": ["hal"], "application/vnd.handheld-entertainment+xml": ["zmm"], "application/vnd.hbci": ["hbci"], "application/vnd.hhe.lesson-player": ["les"], "application/vnd.hp-hpgl": ["hpgl"], "application/vnd.hp-hpid": ["hpid"], "application/vnd.hp-hps": ["hps"], "application/vnd.hp-jlyt": ["jlt"], "application/vnd.hp-pcl": ["pcl"], "application/vnd.hp-pclxl": ["pclxl"], "application/vnd.hydrostatix.sof-data": ["sfd-hdstx"], "application/vnd.ibm.minipay": ["mpy"], "application/vnd.ibm.modcap": ["afp", "listafp", "list3820"], "application/vnd.ibm.rights-management": ["irm"], "application/vnd.ibm.secure-container": ["sc"], "application/vnd.iccprofile": ["icc", "icm"], "application/vnd.igloader": ["igl"], "application/vnd.immervision-ivp": ["ivp"], "application/vnd.immervision-ivu": ["ivu"], "application/vnd.insors.igm": ["igm"], "application/vnd.intercon.formnet": ["xpw", "xpx"], "application/vnd.intergeo": ["i2g"], "application/vnd.intu.qbo": ["qbo"], "application/vnd.intu.qfx": ["qfx"], "application/vnd.ipunplugged.rcprofile": ["rcprofile"], "application/vnd.irepository.package+xml": ["irp"], "application/vnd.is-xpr": ["xpr"], "application/vnd.isac.fcs": ["fcs"], "application/vnd.jam": ["jam"], "application/vnd.jcp.javame.midlet-rms": ["rms"], "application/vnd.jisp": ["jisp"], "application/vnd.joost.joda-archive": ["joda"], "application/vnd.kahootz": ["ktz", "ktr"], "application/vnd.kde.karbon": ["karbon"], "application/vnd.kde.kchart": ["chrt"], "application/vnd.kde.kformula": ["kfo"], "application/vnd.kde.kivio": ["flw"], "application/vnd.kde.kontour": ["kon"], "application/vnd.kde.kpresenter": ["kpr", "kpt"], "application/vnd.kde.kspread": ["ksp"], "application/vnd.kde.kword": ["kwd", "kwt"], "application/vnd.kenameaapp": ["htke"], "application/vnd.kidspiration": ["kia"], "application/vnd.kinar": ["kne", "knp"], "application/vnd.koan": ["skp", "skd", "skt", "skm"], "application/vnd.kodak-descriptor": ["sse"], "application/vnd.las.las+xml": ["lasxml"], "application/vnd.llamagraphics.life-balance.desktop": ["lbd"], "application/vnd.llamagraphics.life-balance.exchange+xml": ["lbe"], "application/vnd.lotus-1-2-3": ["123"], "application/vnd.lotus-approach": ["apr"], "application/vnd.lotus-freelance": ["pre"], "application/vnd.lotus-notes": ["nsf"], "application/vnd.lotus-organizer": ["org"], "application/vnd.lotus-screencam": ["scm"], "application/vnd.lotus-wordpro": ["lwp"], "application/vnd.macports.portpkg": ["portpkg"], "application/vnd.mcd": ["mcd"], "application/vnd.medcalcdata": ["mc1"], "application/vnd.mediastation.cdkey": ["cdkey"], "application/vnd.mfer": ["mwf"], "application/vnd.mfmp": ["mfm"], "application/vnd.micrografx.flo": ["flo"], "application/vnd.micrografx.igx": ["igx"], "application/vnd.mif": ["mif"], "application/vnd.mobius.daf": ["daf"], "application/vnd.mobius.dis": ["dis"], "application/vnd.mobius.mbk": ["mbk"], "application/vnd.mobius.mqy": ["mqy"], "application/vnd.mobius.msl": ["msl"], "application/vnd.mobius.plc": ["plc"], "application/vnd.mobius.txf": ["txf"], "application/vnd.mophun.application": ["mpn"], "application/vnd.mophun.certificate": ["mpc"], "application/vnd.mozilla.xul+xml": ["xul"], "application/vnd.ms-artgalry": ["cil"], "application/vnd.ms-cab-compressed": ["cab"], "application/vnd.ms-excel": ["xls", "xlm", "xla", "xlc", "xlt", "xlw"], "application/vnd.ms-excel.addin.macroenabled.12": ["xlam"], "application/vnd.ms-excel.sheet.binary.macroenabled.12": ["xlsb"], "application/vnd.ms-excel.sheet.macroenabled.12": ["xlsm"], "application/vnd.ms-excel.template.macroenabled.12": ["xltm"], "application/vnd.ms-fontobject": ["eot"], "application/vnd.ms-htmlhelp": ["chm"], "application/vnd.ms-ims": ["ims"], "application/vnd.ms-lrm": ["lrm"], "application/vnd.ms-officetheme": ["thmx"], "application/vnd.ms-outlook": ["msg"], "application/vnd.ms-pki.seccat": ["cat"], "application/vnd.ms-pki.stl": ["stl"], "application/vnd.ms-powerpoint": ["ppt", "pps", "pot"], "application/vnd.ms-powerpoint.addin.macroenabled.12": ["ppam"], "application/vnd.ms-powerpoint.presentation.macroenabled.12": ["pptm"], "application/vnd.ms-powerpoint.slide.macroenabled.12": ["sldm"], "application/vnd.ms-powerpoint.slideshow.macroenabled.12": ["ppsm"], "application/vnd.ms-powerpoint.template.macroenabled.12": ["potm"], "application/vnd.ms-project": ["mpp", "mpt"], "application/vnd.ms-word.document.macroenabled.12": ["docm"], "application/vnd.ms-word.template.macroenabled.12": ["dotm"], "application/vnd.ms-works": ["wps", "wks", "wcm", "wdb"], "application/vnd.ms-wpl": ["wpl"], "application/vnd.ms-xpsdocument": ["xps"], "application/vnd.mseq": ["mseq"], "application/vnd.musician": ["mus"], "application/vnd.muvee.style": ["msty"], "application/vnd.mynfc": ["taglet"], "application/vnd.neurolanguage.nlu": ["nlu"], "application/vnd.nitf": ["ntf", "nitf"], "application/vnd.noblenet-directory": ["nnd"], "application/vnd.noblenet-sealer": ["nns"], "application/vnd.noblenet-web": ["nnw"], "application/vnd.nokia.n-gage.data": ["ngdat"], "application/vnd.nokia.n-gage.symbian.install": ["n-gage"], "application/vnd.nokia.radio-preset": ["rpst"], "application/vnd.nokia.radio-presets": ["rpss"], "application/vnd.novadigm.edm": ["edm"], "application/vnd.novadigm.edx": ["edx"], "application/vnd.novadigm.ext": ["ext"], "application/vnd.oasis.opendocument.chart": ["odc"], "application/vnd.oasis.opendocument.chart-template": ["otc"], "application/vnd.oasis.opendocument.database": ["odb"], "application/vnd.oasis.opendocument.formula": ["odf"], "application/vnd.oasis.opendocument.formula-template": ["odft"], "application/vnd.oasis.opendocument.graphics": ["odg"], "application/vnd.oasis.opendocument.graphics-template": ["otg"], "application/vnd.oasis.opendocument.image": ["odi"], "application/vnd.oasis.opendocument.image-template": ["oti"], "application/vnd.oasis.opendocument.presentation": ["odp"], "application/vnd.oasis.opendocument.presentation-template": ["otp"], "application/vnd.oasis.opendocument.spreadsheet": ["ods"], "application/vnd.oasis.opendocument.spreadsheet-template": ["ots"], "application/vnd.oasis.opendocument.text": ["odt"], "application/vnd.oasis.opendocument.text-master": ["odm"], "application/vnd.oasis.opendocument.text-template": ["ott"], "application/vnd.oasis.opendocument.text-web": ["oth"], "application/vnd.olpc-sugar": ["xo"], "application/vnd.oma.dd2+xml": ["dd2"], "application/vnd.openofficeorg.extension": ["oxt"], "application/vnd.openxmlformats-officedocument.presentationml.presentation": ["pptx"], "application/vnd.openxmlformats-officedocument.presentationml.slide": ["sldx"], "application/vnd.openxmlformats-officedocument.presentationml.slideshow": ["ppsx"], "application/vnd.openxmlformats-officedocument.presentationml.template": ["potx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": ["xlsx"], "application/vnd.openxmlformats-officedocument.spreadsheetml.template": ["xltx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.document": ["docx"], "application/vnd.openxmlformats-officedocument.wordprocessingml.template": ["dotx"], "application/vnd.osgeo.mapguide.package": ["mgp"], "application/vnd.osgi.dp": ["dp"], "application/vnd.osgi.subsystem": ["esa"], "application/vnd.palm": ["pdb", "pqa", "oprc"], "application/vnd.pawaafile": ["paw"], "application/vnd.pg.format": ["str"], "application/vnd.pg.osasli": ["ei6"], "application/vnd.picsel": ["efif"], "application/vnd.pmi.widget": ["wg"], "application/vnd.pocketlearn": ["plf"], "application/vnd.powerbuilder6": ["pbd"], "application/vnd.previewsystems.box": ["box"], "application/vnd.proteus.magazine": ["mgz"], "application/vnd.publishare-delta-tree": ["qps"], "application/vnd.pvi.ptid1": ["ptid"], "application/vnd.quark.quarkxpress": ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"], "application/vnd.realvnc.bed": ["bed"], "application/vnd.recordare.musicxml": ["mxl"], "application/vnd.recordare.musicxml+xml": ["musicxml"], "application/vnd.rig.cryptonote": ["cryptonote"], "application/vnd.rim.cod": ["cod"], "application/vnd.rn-realmedia": ["rm"], "application/vnd.rn-realmedia-vbr": ["rmvb"], "application/vnd.route66.link66+xml": ["link66"], "application/vnd.sailingtracker.track": ["st"], "application/vnd.seemail": ["see"], "application/vnd.sema": ["sema"], "application/vnd.semd": ["semd"], "application/vnd.semf": ["semf"], "application/vnd.shana.informed.formdata": ["ifm"], "application/vnd.shana.informed.formtemplate": ["itp"], "application/vnd.shana.informed.interchange": ["iif"], "application/vnd.shana.informed.package": ["ipk"], "application/vnd.simtech-mindmapper": ["twd", "twds"], "application/vnd.smaf": ["mmf"], "application/vnd.smart.teacher": ["teacher"], "application/vnd.solent.sdkm+xml": ["sdkm", "sdkd"], "application/vnd.spotfire.dxp": ["dxp"], "application/vnd.spotfire.sfs": ["sfs"], "application/vnd.stardivision.calc": ["sdc"], "application/vnd.stardivision.draw": ["sda"], "application/vnd.stardivision.impress": ["sdd"], "application/vnd.stardivision.math": ["smf"], "application/vnd.stardivision.writer": ["sdw", "vor"], "application/vnd.stardivision.writer-global": ["sgl"], "application/vnd.stepmania.package": ["smzip"], "application/vnd.stepmania.stepchart": ["sm"], "application/vnd.sun.wadl+xml": ["wadl"], "application/vnd.sun.xml.calc": ["sxc"], "application/vnd.sun.xml.calc.template": ["stc"], "application/vnd.sun.xml.draw": ["sxd"], "application/vnd.sun.xml.draw.template": ["std"], "application/vnd.sun.xml.impress": ["sxi"], "application/vnd.sun.xml.impress.template": ["sti"], "application/vnd.sun.xml.math": ["sxm"], "application/vnd.sun.xml.writer": ["sxw"], "application/vnd.sun.xml.writer.global": ["sxg"], "application/vnd.sun.xml.writer.template": ["stw"], "application/vnd.sus-calendar": ["sus", "susp"], "application/vnd.svd": ["svd"], "application/vnd.symbian.install": ["sis", "sisx"], "application/vnd.syncml+xml": ["xsm"], "application/vnd.syncml.dm+wbxml": ["bdm"], "application/vnd.syncml.dm+xml": ["xdm"], "application/vnd.tao.intent-module-archive": ["tao"], "application/vnd.tcpdump.pcap": ["pcap", "cap", "dmp"], "application/vnd.tmobile-livetv": ["tmo"], "application/vnd.trid.tpt": ["tpt"], "application/vnd.triscape.mxs": ["mxs"], "application/vnd.trueapp": ["tra"], "application/vnd.ufdl": ["ufd", "ufdl"], "application/vnd.uiq.theme": ["utz"], "application/vnd.umajin": ["umj"], "application/vnd.unity": ["unityweb"], "application/vnd.uoml+xml": ["uoml"], "application/vnd.vcx": ["vcx"], "application/vnd.visio": ["vsd", "vst", "vss", "vsw"], "application/vnd.visionary": ["vis"], "application/vnd.vsf": ["vsf"], "application/vnd.wap.wbxml": ["wbxml"], "application/vnd.wap.wmlc": ["wmlc"], "application/vnd.wap.wmlscriptc": ["wmlsc"], "application/vnd.webturbo": ["wtb"], "application/vnd.wolfram.player": ["nbp"], "application/vnd.wordperfect": ["wpd"], "application/vnd.wqd": ["wqd"], "application/vnd.wt.stf": ["stf"], "application/vnd.xara": ["xar"], "application/vnd.xfdl": ["xfdl"], "application/vnd.yamaha.hv-dic": ["hvd"], "application/vnd.yamaha.hv-script": ["hvs"], "application/vnd.yamaha.hv-voice": ["hvp"], "application/vnd.yamaha.openscoreformat": ["osf"], "application/vnd.yamaha.openscoreformat.osfpvg+xml": ["osfpvg"], "application/vnd.yamaha.smaf-audio": ["saf"], "application/vnd.yamaha.smaf-phrase": ["spf"], "application/vnd.yellowriver-custom-menu": ["cmp"], "application/vnd.zul": ["zir", "zirz"], "application/vnd.zzazz.deck+xml": ["zaz"], "application/voicexml+xml": ["vxml"], "application/wasm": ["wasm"], "application/widget": ["wgt"], "application/winhlp": ["hlp"], "application/wsdl+xml": ["wsdl"], "application/wspolicy+xml": ["wspolicy"], "application/x-7z-compressed": ["7z"], "application/x-abiword": ["abw"], "application/x-ace-compressed": ["ace"], "application/x-apple-diskimage": [], "application/x-arj": ["arj"], "application/x-authorware-bin": ["aab", "x32", "u32", "vox"], "application/x-authorware-map": ["aam"], "application/x-authorware-seg": ["aas"], "application/x-bcpio": ["bcpio"], "application/x-bdoc": [], "application/x-bittorrent": ["torrent"], "application/x-blorb": ["blb", "blorb"], "application/x-bzip": ["bz"], "application/x-bzip2": ["bz2", "boz"], "application/x-cbr": ["cbr", "cba", "cbt", "cbz", "cb7"], "application/x-cdlink": ["vcd"], "application/x-cfs-compressed": ["cfs"], "application/x-chat": ["chat"], "application/x-chess-pgn": ["pgn"], "application/x-chrome-extension": ["crx"], "application/x-cocoa": ["cco"], "application/x-conference": ["nsc"], "application/x-cpio": ["cpio"], "application/x-csh": ["csh"], "application/x-debian-package": ["udeb"], "application/x-dgc-compressed": ["dgc"], "application/x-director": ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"], "application/x-doom": ["wad"], "application/x-dtbncx+xml": ["ncx"], "application/x-dtbook+xml": ["dtb"], "application/x-dtbresource+xml": ["res"], "application/x-dvi": ["dvi"], "application/x-envoy": ["evy"], "application/x-eva": ["eva"], "application/x-font-bdf": ["bdf"], "application/x-font-ghostscript": ["gsf"], "application/x-font-linux-psf": ["psf"], "application/x-font-pcf": ["pcf"], "application/x-font-snf": ["snf"], "application/x-font-type1": ["pfa", "pfb", "pfm", "afm"], "application/x-freearc": ["arc"], "application/x-futuresplash": ["spl"], "application/x-gca-compressed": ["gca"], "application/x-glulx": ["ulx"], "application/x-gnumeric": ["gnumeric"], "application/x-gramps-xml": ["gramps"], "application/x-gtar": ["gtar"], "application/x-hdf": ["hdf"], "application/x-httpd-php": ["php"], "application/x-install-instructions": ["install"], "application/x-iso9660-image": [], "application/x-java-archive-diff": ["jardiff"], "application/x-java-jnlp-file": ["jnlp"], "application/x-latex": ["latex"], "application/x-lua-bytecode": ["luac"], "application/x-lzh-compressed": ["lzh", "lha"], "application/x-makeself": ["run"], "application/x-mie": ["mie"], "application/x-mobipocket-ebook": ["prc", "mobi"], "application/x-ms-application": ["application"], "application/x-ms-shortcut": ["lnk"], "application/x-ms-wmd": ["wmd"], "application/x-ms-wmz": ["wmz"], "application/x-ms-xbap": ["xbap"], "application/x-msaccess": ["mdb"], "application/x-msbinder": ["obd"], "application/x-mscardfile": ["crd"], "application/x-msclip": ["clp"], "application/x-msdos-program": [], "application/x-msdownload": ["com", "bat"], "application/x-msmediaview": ["mvb", "m13", "m14"], "application/x-msmetafile": ["wmf", "emf", "emz"], "application/x-msmoney": ["mny"], "application/x-mspublisher": ["pub"], "application/x-msschedule": ["scd"], "application/x-msterminal": ["trm"], "application/x-mswrite": ["wri"], "application/x-netcdf": ["nc", "cdf"], "application/x-ns-proxy-autoconfig": ["pac"], "application/x-nzb": ["nzb"], "application/x-perl": ["pl", "pm"], "application/x-pilot": [], "application/x-pkcs12": ["p12", "pfx"], "application/x-pkcs7-certificates": ["p7b", "spc"], "application/x-pkcs7-certreqresp": ["p7r"], "application/x-rar-compressed": ["rar"], "application/x-redhat-package-manager": ["rpm"], "application/x-research-info-systems": ["ris"], "application/x-sea": ["sea"], "application/x-sh": ["sh"], "application/x-shar": ["shar"], "application/x-shockwave-flash": ["swf"], "application/x-silverlight-app": ["xap"], "application/x-sql": ["sql"], "application/x-stuffit": ["sit"], "application/x-stuffitx": ["sitx"], "application/x-subrip": ["srt"], "application/x-sv4cpio": ["sv4cpio"], "application/x-sv4crc": ["sv4crc"], "application/x-t3vm-image": ["t3"], "application/x-tads": ["gam"], "application/x-tar": ["tar"], "application/x-tcl": ["tcl", "tk"], "application/x-tex": ["tex"], "application/x-tex-tfm": ["tfm"], "application/x-texinfo": ["texinfo", "texi"], "application/x-tgif": ["obj"], "application/x-ustar": ["ustar"], "application/x-virtualbox-hdd": ["hdd"], "application/x-virtualbox-ova": ["ova"], "application/x-virtualbox-ovf": ["ovf"], "application/x-virtualbox-vbox": ["vbox"], "application/x-virtualbox-vbox-extpack": ["vbox-extpack"], "application/x-virtualbox-vdi": ["vdi"], "application/x-virtualbox-vhd": ["vhd"], "application/x-virtualbox-vmdk": ["vmdk"], "application/x-wais-source": ["src"], "application/x-web-app-manifest+json": ["webapp"], "application/x-x509-ca-cert": ["der", "crt", "pem"], "application/x-xfig": ["fig"], "application/x-xliff+xml": ["xlf"], "application/x-xpinstall": ["xpi"], "application/x-xz": ["xz"], "application/x-zmachine": ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"], "application/xaml+xml": ["xaml"], "application/xcap-diff+xml": ["xdf"], "application/xenc+xml": ["xenc"], "application/xhtml+xml": ["xhtml", "xht"], "application/xml": ["xml", "xsl", "xsd", "rng"], "application/xml-dtd": ["dtd"], "application/xop+xml": ["xop"], "application/xproc+xml": ["xpl"], "application/xslt+xml": ["xslt"], "application/xspf+xml": ["xspf"], "application/xv+xml": ["mxml", "xhvml", "xvml", "xvm"], "application/yang": ["yang"], "application/yin+xml": ["yin"], "application/zip": ["zip"], "audio/3gpp": [], "audio/adpcm": ["adp"], "audio/basic": ["au", "snd"], "audio/midi": ["mid", "midi", "kar", "rmi"], "audio/mp3": [], "audio/mp4": ["m4a", "mp4a"], "audio/mpeg": ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"], "audio/ogg": ["oga", "ogg", "spx"], "audio/s3m": ["s3m"], "audio/silk": ["sil"], "audio/vnd.dece.audio": ["uva", "uvva"], "audio/vnd.digital-winds": ["eol"], "audio/vnd.dra": ["dra"], "audio/vnd.dts": ["dts"], "audio/vnd.dts.hd": ["dtshd"], "audio/vnd.lucent.voice": ["lvp"], "audio/vnd.ms-playready.media.pya": ["pya"], "audio/vnd.nuera.ecelp4800": ["ecelp4800"], "audio/vnd.nuera.ecelp7470": ["ecelp7470"], "audio/vnd.nuera.ecelp9600": ["ecelp9600"], "audio/vnd.rip": ["rip"], "audio/wav": ["wav"], "audio/wave": [], "audio/webm": ["weba"], "audio/x-aac": ["aac"], "audio/x-aiff": ["aif", "aiff", "aifc"], "audio/x-caf": ["caf"], "audio/x-flac": ["flac"], "audio/x-m4a": [], "audio/x-matroska": ["mka"], "audio/x-mpegurl": ["m3u"], "audio/x-ms-wax": ["wax"], "audio/x-ms-wma": ["wma"], "audio/x-pn-realaudio": ["ram", "ra"], "audio/x-pn-realaudio-plugin": ["rmp"], "audio/x-realaudio": [], "audio/x-wav": [], "audio/xm": ["xm"], "chemical/x-cdx": ["cdx"], "chemical/x-cif": ["cif"], "chemical/x-cmdf": ["cmdf"], "chemical/x-cml": ["cml"], "chemical/x-csml": ["csml"], "chemical/x-xyz": ["xyz"], "font/collection": ["ttc"], "font/otf": ["otf"], "font/ttf": ["ttf"], "font/woff": ["woff"], "font/woff2": ["woff2"], "image/apng": ["apng"], "image/bmp": ["bmp"], "image/cgm": ["cgm"], "image/g3fax": ["g3"], "image/gif": ["gif"], "image/ief": ["ief"], "image/jp2": ["jp2", "jpg2"], "image/jpeg": ["jpeg", "jpg", "jpe"], "image/jpm": ["jpm"], "image/jpx": ["jpx", "jpf"], "image/ktx": ["ktx"], "image/png": ["png"], "image/prs.btif": ["btif"], "image/sgi": ["sgi"], "image/svg+xml": ["svg", "svgz"], "image/tiff": ["tiff", "tif"], "image/vnd.adobe.photoshop": ["psd"], "image/vnd.dece.graphic": ["uvi", "uvvi", "uvg", "uvvg"], "image/vnd.djvu": ["djvu", "djv"], "image/vnd.dvb.subtitle": [], "image/vnd.dwg": ["dwg"], "image/vnd.dxf": ["dxf"], "image/vnd.fastbidsheet": ["fbs"], "image/vnd.fpx": ["fpx"], "image/vnd.fst": ["fst"], "image/vnd.fujixerox.edmics-mmr": ["mmr"], "image/vnd.fujixerox.edmics-rlc": ["rlc"], "image/vnd.ms-modi": ["mdi"], "image/vnd.ms-photo": ["wdp"], "image/vnd.net-fpx": ["npx"], "image/vnd.wap.wbmp": ["wbmp"], "image/vnd.xiff": ["xif"], "image/webp": ["webp"], "image/x-3ds": ["3ds"], "image/x-cmu-raster": ["ras"], "image/x-cmx": ["cmx"], "image/x-freehand": ["fh", "fhc", "fh4", "fh5", "fh7"], "image/x-icon": ["ico"], "image/x-jng": ["jng"], "image/x-mrsid-image": ["sid"], "image/x-ms-bmp": [], "image/x-pcx": ["pcx"], "image/x-pict": ["pic", "pct"], "image/x-portable-anymap": ["pnm"], "image/x-portable-bitmap": ["pbm"], "image/x-portable-graymap": ["pgm"], "image/x-portable-pixmap": ["ppm"], "image/x-rgb": ["rgb"], "image/x-tga": ["tga"], "image/x-xbitmap": ["xbm"], "image/x-xpixmap": ["xpm"], "image/x-xwindowdump": ["xwd"], "message/rfc822": ["eml", "mime"], "model/gltf+json": ["gltf"], "model/gltf-binary": ["glb"], "model/iges": ["igs", "iges"], "model/mesh": ["msh", "mesh", "silo"], "model/vnd.collada+xml": ["dae"], "model/vnd.dwf": ["dwf"], "model/vnd.gdl": ["gdl"], "model/vnd.gtw": ["gtw"], "model/vnd.mts": ["mts"], "model/vnd.vtu": ["vtu"], "model/vrml": ["wrl", "vrml"], "model/x3d+binary": ["x3db", "x3dbz"], "model/x3d+vrml": ["x3dv", "x3dvz"], "model/x3d+xml": ["x3d", "x3dz"], "text/cache-manifest": ["appcache", "manifest"], "text/calendar": ["ics", "ifb"], "text/coffeescript": ["coffee", "litcoffee"], "text/css": ["css"], "text/csv": ["csv"], "text/hjson": ["hjson"], "text/html": ["html", "htm", "shtml"], "text/jade": ["jade"], "text/jsx": ["jsx"], "text/less": ["less"], "text/markdown": ["markdown", "md"], "text/mathml": ["mml"], "text/n3": ["n3"], "text/plain": ["txt", "text", "conf", "def", "list", "log", "in", "ini"], "text/prs.lines.tag": ["dsc"], "text/richtext": ["rtx"], "text/rtf": [], "text/sgml": ["sgml", "sgm"], "text/slim": ["slim", "slm"], "text/stylus": ["stylus", "styl"], "text/tab-separated-values": ["tsv"], "text/troff": ["t", "tr", "roff", "man", "me", "ms"], "text/turtle": ["ttl"], "text/uri-list": ["uri", "uris", "urls"], "text/vcard": ["vcard"], "text/vnd.curl": ["curl"], "text/vnd.curl.dcurl": ["dcurl"], "text/vnd.curl.mcurl": ["mcurl"], "text/vnd.curl.scurl": ["scurl"], "text/vnd.dvb.subtitle": ["sub"], "text/vnd.fly": ["fly"], "text/vnd.fmi.flexstor": ["flx"], "text/vnd.graphviz": ["gv"], "text/vnd.in3d.3dml": ["3dml"], "text/vnd.in3d.spot": ["spot"], "text/vnd.sun.j2me.app-descriptor": ["jad"], "text/vnd.wap.wml": ["wml"], "text/vnd.wap.wmlscript": ["wmls"], "text/vtt": ["vtt"], "text/x-asm": ["s", "asm"], "text/x-c": ["c", "cc", "cxx", "cpp", "h", "hh", "dic"], "text/x-component": ["htc"], "text/x-fortran": ["f", "for", "f77", "f90"], "text/x-handlebars-template": ["hbs"], "text/x-java-source": ["java"], "text/x-lua": ["lua"], "text/x-markdown": ["mkd"], "text/x-nfo": ["nfo"], "text/x-opml": ["opml"], "text/x-org": [], "text/x-pascal": ["p", "pas"], "text/x-processing": ["pde"], "text/x-sass": ["sass"], "text/x-scss": ["scss"], "text/x-setext": ["etx"], "text/x-sfv": ["sfv"], "text/x-suse-ymp": ["ymp"], "text/x-uuencode": ["uu"], "text/x-vcalendar": ["vcs"], "text/x-vcard": ["vcf"], "text/xml": [], "text/yaml": ["yaml", "yml"], "video/3gpp": ["3gp", "3gpp"], "video/3gpp2": ["3g2"], "video/h261": ["h261"], "video/h263": ["h263"], "video/h264": ["h264"], "video/jpeg": ["jpgv"], "video/jpm": ["jpgm"], "video/mj2": ["mj2", "mjp2"], "video/mp2t": ["ts"], "video/mp4": ["mp4", "mp4v", "mpg4"], "video/mpeg": ["mpeg", "mpg", "mpe", "m1v", "m2v"], "video/ogg": ["ogv"], "video/quicktime": ["qt", "mov"], "video/vnd.dece.hd": ["uvh", "uvvh"], "video/vnd.dece.mobile": ["uvm", "uvvm"], "video/vnd.dece.pd": ["uvp", "uvvp"], "video/vnd.dece.sd": ["uvs", "uvvs"], "video/vnd.dece.video": ["uvv", "uvvv"], "video/vnd.dvb.file": ["dvb"], "video/vnd.fvt": ["fvt"], "video/vnd.mpegurl": ["mxu", "m4u"], "video/vnd.ms-playready.media.pyv": ["pyv"], "video/vnd.uvvu.mp4": ["uvu", "uvvu"], "video/vnd.vivo": ["viv"], "video/webm": ["webm"], "video/x-f4v": ["f4v"], "video/x-fli": ["fli"], "video/x-flv": ["flv"], "video/x-m4v": ["m4v"], "video/x-matroska": ["mkv", "mk3d", "mks"], "video/x-mng": ["mng"], "video/x-ms-asf": ["asf", "asx"], "video/x-ms-vob": ["vob"], "video/x-ms-wm": ["wm"], "video/x-ms-wmv": ["wmv"], "video/x-ms-wmx": ["wmx"], "video/x-ms-wvx": ["wvx"], "video/x-msvideo": ["avi"], "video/x-sgi-movie": ["movie"], "video/x-smv": ["smv"], "x-conference/x-cooltalk": ["ice"]};
});

// ../../node_modules/.pnpm/mime@1.6.0/node_modules/mime/mime.js
var require_mime = __commonJS((exports2, module3) => {
  var path19 = require("path");
  var fs17 = require("fs");
  function Mime() {
    this.types = Object.create(null);
    this.extensions = Object.create(null);
  }
  Mime.prototype.define = function(map) {
    for (var type in map) {
      var exts = map[type];
      for (var i = 0; i < exts.length; i++) {
        if (process.env.DEBUG_MIME && this.types[exts[i]]) {
          console.warn((this._loading || "define()").replace(/.*\//, ""), 'changes "' + exts[i] + '" extension type from ' + this.types[exts[i]] + " to " + type);
        }
        this.types[exts[i]] = type;
      }
      if (!this.extensions[type]) {
        this.extensions[type] = exts[0];
      }
    }
  };
  Mime.prototype.load = function(file) {
    this._loading = file;
    var map = {}, content = fs17.readFileSync(file, "ascii"), lines = content.split(/[\r\n]+/);
    lines.forEach(function(line) {
      var fields = line.replace(/\s*#.*|^\s*|\s*$/g, "").split(/\s+/);
      map[fields.shift()] = fields;
    });
    this.define(map);
    this._loading = null;
  };
  Mime.prototype.lookup = function(path20, fallback) {
    var ext = path20.replace(/^.*[\.\/\\]/, "").toLowerCase();
    return this.types[ext] || fallback || this.default_type;
  };
  Mime.prototype.extension = function(mimeType) {
    var type = mimeType.match(/^\s*([^;\s]*)(?:;|\s|$)/)[1].toLowerCase();
    return this.extensions[type];
  };
  var mime = new Mime();
  mime.define(require_types4());
  mime.default_type = mime.lookup("bin");
  mime.Mime = Mime;
  mime.charsets = {
    lookup: function(mimeType, fallback) {
      return /^text\/|^application\/(javascript|json)/.test(mimeType) ? "UTF-8" : fallback;
    }
  };
  module3.exports = mime;
});

// ../../node_modules/.pnpm/ms@2.1.1/node_modules/ms/index.js
var require_ms3 = __commonJS((exports2, module3) => {
  var s = 1e3;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;
  module3.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isNaN(val) === false) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "weeks":
      case "week":
      case "w":
        return n * w;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return void 0;
    }
  }
  function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return Math.round(ms / d) + "d";
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + "h";
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + "m";
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  }
  function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return plural(ms, msAbs, d, "day");
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, "hour");
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, "minute");
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, "second");
    }
    return ms + " ms";
  }
  function plural(ms, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
  }
});

// ../../node_modules/.pnpm/range-parser@1.2.1/node_modules/range-parser/index.js
var require_range_parser = __commonJS((exports2, module3) => {
  /*!
   * range-parser
   * Copyright(c) 2012-2014 TJ Holowaychuk
   * Copyright(c) 2015-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  module3.exports = rangeParser;
  function rangeParser(size, str, options) {
    if (typeof str !== "string") {
      throw new TypeError("argument str must be a string");
    }
    var index = str.indexOf("=");
    if (index === -1) {
      return -2;
    }
    var arr = str.slice(index + 1).split(",");
    var ranges = [];
    ranges.type = str.slice(0, index);
    for (var i = 0; i < arr.length; i++) {
      var range = arr[i].split("-");
      var start = parseInt(range[0], 10);
      var end = parseInt(range[1], 10);
      if (isNaN(start)) {
        start = size - end;
        end = size - 1;
      } else if (isNaN(end)) {
        end = size - 1;
      }
      if (end > size - 1) {
        end = size - 1;
      }
      if (isNaN(start) || isNaN(end) || start > end || start < 0) {
        continue;
      }
      ranges.push({
        start,
        end
      });
    }
    if (ranges.length < 1) {
      return -1;
    }
    return options && options.combine ? combineRanges(ranges) : ranges;
  }
  function combineRanges(ranges) {
    var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart);
    for (var j = 0, i = 1; i < ordered.length; i++) {
      var range = ordered[i];
      var current = ordered[j];
      if (range.start > current.end + 1) {
        ordered[++j] = range;
      } else if (range.end > current.end) {
        current.end = range.end;
        current.index = Math.min(current.index, range.index);
      }
    }
    ordered.length = j + 1;
    var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex);
    combined.type = ranges.type;
    return combined;
  }
  function mapWithIndex(range, index) {
    return {
      start: range.start,
      end: range.end,
      index
    };
  }
  function mapWithoutIndex(range) {
    return {
      start: range.start,
      end: range.end
    };
  }
  function sortByRangeIndex(a, b) {
    return a.index - b.index;
  }
  function sortByRangeStart(a, b) {
    return a.start - b.start;
  }
});

// ../../node_modules/.pnpm/send@0.17.1/node_modules/send/index.js
var require_send = __commonJS((exports2, module3) => {
  /*!
   * send
   * Copyright(c) 2012 TJ Holowaychuk
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var createError = require_http_errors2();
  var debug3 = require_src7()("send");
  var deprecate = require_depd()("send");
  var destroy = require_destroy3();
  var encodeUrl = require_encodeurl();
  var escapeHtml = require_escape_html();
  var etag = require_etag();
  var fresh = require_fresh();
  var fs17 = require("fs");
  var mime = require_mime();
  var ms = require_ms3();
  var onFinished = require_on_finished();
  var parseRange = require_range_parser();
  var path19 = require("path");
  var statuses = require_statuses();
  var Stream = require("stream");
  var util4 = require("util");
  var extname = path19.extname;
  var join = path19.join;
  var normalize = path19.normalize;
  var resolve = path19.resolve;
  var sep = path19.sep;
  var BYTES_RANGE_REGEXP = /^ *bytes=/;
  var MAX_MAXAGE = 60 * 60 * 24 * 365 * 1e3;
  var UP_PATH_REGEXP = /(?:^|[\\/])\.\.(?:[\\/]|$)/;
  module3.exports = send;
  module3.exports.mime = mime;
  function send(req, path20, options) {
    return new SendStream(req, path20, options);
  }
  function SendStream(req, path20, options) {
    Stream.call(this);
    var opts = options || {};
    this.options = opts;
    this.path = path20;
    this.req = req;
    this._acceptRanges = opts.acceptRanges !== void 0 ? Boolean(opts.acceptRanges) : true;
    this._cacheControl = opts.cacheControl !== void 0 ? Boolean(opts.cacheControl) : true;
    this._etag = opts.etag !== void 0 ? Boolean(opts.etag) : true;
    this._dotfiles = opts.dotfiles !== void 0 ? opts.dotfiles : "ignore";
    if (this._dotfiles !== "ignore" && this._dotfiles !== "allow" && this._dotfiles !== "deny") {
      throw new TypeError('dotfiles option must be "allow", "deny", or "ignore"');
    }
    this._hidden = Boolean(opts.hidden);
    if (opts.hidden !== void 0) {
      deprecate("hidden: use dotfiles: '" + (this._hidden ? "allow" : "ignore") + "' instead");
    }
    if (opts.dotfiles === void 0) {
      this._dotfiles = void 0;
    }
    this._extensions = opts.extensions !== void 0 ? normalizeList(opts.extensions, "extensions option") : [];
    this._immutable = opts.immutable !== void 0 ? Boolean(opts.immutable) : false;
    this._index = opts.index !== void 0 ? normalizeList(opts.index, "index option") : ["index.html"];
    this._lastModified = opts.lastModified !== void 0 ? Boolean(opts.lastModified) : true;
    this._maxage = opts.maxAge || opts.maxage;
    this._maxage = typeof this._maxage === "string" ? ms(this._maxage) : Number(this._maxage);
    this._maxage = !isNaN(this._maxage) ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE) : 0;
    this._root = opts.root ? resolve(opts.root) : null;
    if (!this._root && opts.from) {
      this.from(opts.from);
    }
  }
  util4.inherits(SendStream, Stream);
  SendStream.prototype.etag = deprecate.function(function etag2(val) {
    this._etag = Boolean(val);
    debug3("etag %s", this._etag);
    return this;
  }, "send.etag: pass etag as option");
  SendStream.prototype.hidden = deprecate.function(function hidden(val) {
    this._hidden = Boolean(val);
    this._dotfiles = void 0;
    debug3("hidden %s", this._hidden);
    return this;
  }, "send.hidden: use dotfiles option");
  SendStream.prototype.index = deprecate.function(function index(paths) {
    var index2 = !paths ? [] : normalizeList(paths, "paths argument");
    debug3("index %o", paths);
    this._index = index2;
    return this;
  }, "send.index: pass index as option");
  SendStream.prototype.root = function root(path20) {
    this._root = resolve(String(path20));
    debug3("root %s", this._root);
    return this;
  };
  SendStream.prototype.from = deprecate.function(SendStream.prototype.root, "send.from: pass root as option");
  SendStream.prototype.root = deprecate.function(SendStream.prototype.root, "send.root: pass root as option");
  SendStream.prototype.maxage = deprecate.function(function maxage(maxAge) {
    this._maxage = typeof maxAge === "string" ? ms(maxAge) : Number(maxAge);
    this._maxage = !isNaN(this._maxage) ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE) : 0;
    debug3("max-age %d", this._maxage);
    return this;
  }, "send.maxage: pass maxAge as option");
  SendStream.prototype.error = function error(status, err) {
    if (hasListeners(this, "error")) {
      return this.emit("error", createError(status, err, {
        expose: false
      }));
    }
    var res = this.res;
    var msg = statuses[status] || String(status);
    var doc = createHtmlDocument("Error", escapeHtml(msg));
    clearHeaders(res);
    if (err && err.headers) {
      setHeaders(res, err.headers);
    }
    res.statusCode = status;
    res.setHeader("Content-Type", "text/html; charset=UTF-8");
    res.setHeader("Content-Length", Buffer.byteLength(doc));
    res.setHeader("Content-Security-Policy", "default-src 'none'");
    res.setHeader("X-Content-Type-Options", "nosniff");
    res.end(doc);
  };
  SendStream.prototype.hasTrailingSlash = function hasTrailingSlash() {
    return this.path[this.path.length - 1] === "/";
  };
  SendStream.prototype.isConditionalGET = function isConditionalGET() {
    return this.req.headers["if-match"] || this.req.headers["if-unmodified-since"] || this.req.headers["if-none-match"] || this.req.headers["if-modified-since"];
  };
  SendStream.prototype.isPreconditionFailure = function isPreconditionFailure() {
    var req = this.req;
    var res = this.res;
    var match = req.headers["if-match"];
    if (match) {
      var etag2 = res.getHeader("ETag");
      return !etag2 || match !== "*" && parseTokenList(match).every(function(match2) {
        return match2 !== etag2 && match2 !== "W/" + etag2 && "W/" + match2 !== etag2;
      });
    }
    var unmodifiedSince = parseHttpDate(req.headers["if-unmodified-since"]);
    if (!isNaN(unmodifiedSince)) {
      var lastModified = parseHttpDate(res.getHeader("Last-Modified"));
      return isNaN(lastModified) || lastModified > unmodifiedSince;
    }
    return false;
  };
  SendStream.prototype.removeContentHeaderFields = function removeContentHeaderFields() {
    var res = this.res;
    var headers = getHeaderNames(res);
    for (var i = 0; i < headers.length; i++) {
      var header = headers[i];
      if (header.substr(0, 8) === "content-" && header !== "content-location") {
        res.removeHeader(header);
      }
    }
  };
  SendStream.prototype.notModified = function notModified() {
    var res = this.res;
    debug3("not modified");
    this.removeContentHeaderFields();
    res.statusCode = 304;
    res.end();
  };
  SendStream.prototype.headersAlreadySent = function headersAlreadySent() {
    var err = new Error("Can't set headers after they are sent.");
    debug3("headers already sent");
    this.error(500, err);
  };
  SendStream.prototype.isCachable = function isCachable() {
    var statusCode = this.res.statusCode;
    return statusCode >= 200 && statusCode < 300 || statusCode === 304;
  };
  SendStream.prototype.onStatError = function onStatError(error) {
    switch (error.code) {
      case "ENAMETOOLONG":
      case "ENOENT":
      case "ENOTDIR":
        this.error(404, error);
        break;
      default:
        this.error(500, error);
        break;
    }
  };
  SendStream.prototype.isFresh = function isFresh() {
    return fresh(this.req.headers, {
      etag: this.res.getHeader("ETag"),
      "last-modified": this.res.getHeader("Last-Modified")
    });
  };
  SendStream.prototype.isRangeFresh = function isRangeFresh() {
    var ifRange = this.req.headers["if-range"];
    if (!ifRange) {
      return true;
    }
    if (ifRange.indexOf('"') !== -1) {
      var etag2 = this.res.getHeader("ETag");
      return Boolean(etag2 && ifRange.indexOf(etag2) !== -1);
    }
    var lastModified = this.res.getHeader("Last-Modified");
    return parseHttpDate(lastModified) <= parseHttpDate(ifRange);
  };
  SendStream.prototype.redirect = function redirect(path20) {
    var res = this.res;
    if (hasListeners(this, "directory")) {
      this.emit("directory", res, path20);
      return;
    }
    if (this.hasTrailingSlash()) {
      this.error(403);
      return;
    }
    var loc = encodeUrl(collapseLeadingSlashes(this.path + "/"));
    var doc = createHtmlDocument("Redirecting", 'Redirecting to <a href="' + escapeHtml(loc) + '">' + escapeHtml(loc) + "</a>");
    res.statusCode = 301;
    res.setHeader("Content-Type", "text/html; charset=UTF-8");
    res.setHeader("Content-Length", Buffer.byteLength(doc));
    res.setHeader("Content-Security-Policy", "default-src 'none'");
    res.setHeader("X-Content-Type-Options", "nosniff");
    res.setHeader("Location", loc);
    res.end(doc);
  };
  SendStream.prototype.pipe = function pipe(res) {
    var root = this._root;
    this.res = res;
    var path20 = decode(this.path);
    if (path20 === -1) {
      this.error(400);
      return res;
    }
    if (~path20.indexOf("\0")) {
      this.error(400);
      return res;
    }
    var parts;
    if (root !== null) {
      if (path20) {
        path20 = normalize("." + sep + path20);
      }
      if (UP_PATH_REGEXP.test(path20)) {
        debug3('malicious path "%s"', path20);
        this.error(403);
        return res;
      }
      parts = path20.split(sep);
      path20 = normalize(join(root, path20));
    } else {
      if (UP_PATH_REGEXP.test(path20)) {
        debug3('malicious path "%s"', path20);
        this.error(403);
        return res;
      }
      parts = normalize(path20).split(sep);
      path20 = resolve(path20);
    }
    if (containsDotFile(parts)) {
      var access = this._dotfiles;
      if (access === void 0) {
        access = parts[parts.length - 1][0] === "." ? this._hidden ? "allow" : "ignore" : "allow";
      }
      debug3('%s dotfile "%s"', access, path20);
      switch (access) {
        case "allow":
          break;
        case "deny":
          this.error(403);
          return res;
        case "ignore":
        default:
          this.error(404);
          return res;
      }
    }
    if (this._index.length && this.hasTrailingSlash()) {
      this.sendIndex(path20);
      return res;
    }
    this.sendFile(path20);
    return res;
  };
  SendStream.prototype.send = function send2(path20, stat) {
    var len = stat.size;
    var options = this.options;
    var opts = {};
    var res = this.res;
    var req = this.req;
    var ranges = req.headers.range;
    var offset = options.start || 0;
    if (headersSent(res)) {
      this.headersAlreadySent();
      return;
    }
    debug3('pipe "%s"', path20);
    this.setHeader(path20, stat);
    this.type(path20);
    if (this.isConditionalGET()) {
      if (this.isPreconditionFailure()) {
        this.error(412);
        return;
      }
      if (this.isCachable() && this.isFresh()) {
        this.notModified();
        return;
      }
    }
    len = Math.max(0, len - offset);
    if (options.end !== void 0) {
      var bytes = options.end - offset + 1;
      if (len > bytes)
        len = bytes;
    }
    if (this._acceptRanges && BYTES_RANGE_REGEXP.test(ranges)) {
      ranges = parseRange(len, ranges, {
        combine: true
      });
      if (!this.isRangeFresh()) {
        debug3("range stale");
        ranges = -2;
      }
      if (ranges === -1) {
        debug3("range unsatisfiable");
        res.setHeader("Content-Range", contentRange("bytes", len));
        return this.error(416, {
          headers: {"Content-Range": res.getHeader("Content-Range")}
        });
      }
      if (ranges !== -2 && ranges.length === 1) {
        debug3("range %j", ranges);
        res.statusCode = 206;
        res.setHeader("Content-Range", contentRange("bytes", len, ranges[0]));
        offset += ranges[0].start;
        len = ranges[0].end - ranges[0].start + 1;
      }
    }
    for (var prop in options) {
      opts[prop] = options[prop];
    }
    opts.start = offset;
    opts.end = Math.max(offset, offset + len - 1);
    res.setHeader("Content-Length", len);
    if (req.method === "HEAD") {
      res.end();
      return;
    }
    this.stream(path20, opts);
  };
  SendStream.prototype.sendFile = function sendFile(path20) {
    var i = 0;
    var self2 = this;
    debug3('stat "%s"', path20);
    fs17.stat(path20, function onstat(err, stat) {
      if (err && err.code === "ENOENT" && !extname(path20) && path20[path20.length - 1] !== sep) {
        return next(err);
      }
      if (err)
        return self2.onStatError(err);
      if (stat.isDirectory())
        return self2.redirect(path20);
      self2.emit("file", path20, stat);
      self2.send(path20, stat);
    });
    function next(err) {
      if (self2._extensions.length <= i) {
        return err ? self2.onStatError(err) : self2.error(404);
      }
      var p = path20 + "." + self2._extensions[i++];
      debug3('stat "%s"', p);
      fs17.stat(p, function(err2, stat) {
        if (err2)
          return next(err2);
        if (stat.isDirectory())
          return next();
        self2.emit("file", p, stat);
        self2.send(p, stat);
      });
    }
  };
  SendStream.prototype.sendIndex = function sendIndex(path20) {
    var i = -1;
    var self2 = this;
    function next(err) {
      if (++i >= self2._index.length) {
        if (err)
          return self2.onStatError(err);
        return self2.error(404);
      }
      var p = join(path20, self2._index[i]);
      debug3('stat "%s"', p);
      fs17.stat(p, function(err2, stat) {
        if (err2)
          return next(err2);
        if (stat.isDirectory())
          return next();
        self2.emit("file", p, stat);
        self2.send(p, stat);
      });
    }
    next();
  };
  SendStream.prototype.stream = function stream(path20, options) {
    var finished = false;
    var self2 = this;
    var res = this.res;
    var stream2 = fs17.createReadStream(path20, options);
    this.emit("stream", stream2);
    stream2.pipe(res);
    onFinished(res, function onfinished() {
      finished = true;
      destroy(stream2);
    });
    stream2.on("error", function onerror(err) {
      if (finished)
        return;
      finished = true;
      destroy(stream2);
      self2.onStatError(err);
    });
    stream2.on("end", function onend() {
      self2.emit("end");
    });
  };
  SendStream.prototype.type = function type(path20) {
    var res = this.res;
    if (res.getHeader("Content-Type"))
      return;
    var type2 = mime.lookup(path20);
    if (!type2) {
      debug3("no content-type");
      return;
    }
    var charset = mime.charsets.lookup(type2);
    debug3("content-type %s", type2);
    res.setHeader("Content-Type", type2 + (charset ? "; charset=" + charset : ""));
  };
  SendStream.prototype.setHeader = function setHeader(path20, stat) {
    var res = this.res;
    this.emit("headers", res, path20, stat);
    if (this._acceptRanges && !res.getHeader("Accept-Ranges")) {
      debug3("accept ranges");
      res.setHeader("Accept-Ranges", "bytes");
    }
    if (this._cacheControl && !res.getHeader("Cache-Control")) {
      var cacheControl = "public, max-age=" + Math.floor(this._maxage / 1e3);
      if (this._immutable) {
        cacheControl += ", immutable";
      }
      debug3("cache-control %s", cacheControl);
      res.setHeader("Cache-Control", cacheControl);
    }
    if (this._lastModified && !res.getHeader("Last-Modified")) {
      var modified = stat.mtime.toUTCString();
      debug3("modified %s", modified);
      res.setHeader("Last-Modified", modified);
    }
    if (this._etag && !res.getHeader("ETag")) {
      var val = etag(stat);
      debug3("etag %s", val);
      res.setHeader("ETag", val);
    }
  };
  function clearHeaders(res) {
    var headers = getHeaderNames(res);
    for (var i = 0; i < headers.length; i++) {
      res.removeHeader(headers[i]);
    }
  }
  function collapseLeadingSlashes(str) {
    for (var i = 0; i < str.length; i++) {
      if (str[i] !== "/") {
        break;
      }
    }
    return i > 1 ? "/" + str.substr(i) : str;
  }
  function containsDotFile(parts) {
    for (var i = 0; i < parts.length; i++) {
      var part = parts[i];
      if (part.length > 1 && part[0] === ".") {
        return true;
      }
    }
    return false;
  }
  function contentRange(type, size, range) {
    return type + " " + (range ? range.start + "-" + range.end : "*") + "/" + size;
  }
  function createHtmlDocument(title, body) {
    return '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>' + title + "</title>\n</head>\n<body>\n<pre>" + body + "</pre>\n</body>\n</html>\n";
  }
  function decode(path20) {
    try {
      return decodeURIComponent(path20);
    } catch (err) {
      return -1;
    }
  }
  function getHeaderNames(res) {
    return typeof res.getHeaderNames !== "function" ? Object.keys(res._headers || {}) : res.getHeaderNames();
  }
  function hasListeners(emitter, type) {
    var count = typeof emitter.listenerCount !== "function" ? emitter.listeners(type).length : emitter.listenerCount(type);
    return count > 0;
  }
  function headersSent(res) {
    return typeof res.headersSent !== "boolean" ? Boolean(res._header) : res.headersSent;
  }
  function normalizeList(val, name) {
    var list = [].concat(val || []);
    for (var i = 0; i < list.length; i++) {
      if (typeof list[i] !== "string") {
        throw new TypeError(name + " must be array of strings or false");
      }
    }
    return list;
  }
  function parseHttpDate(date) {
    var timestamp = date && Date.parse(date);
    return typeof timestamp === "number" ? timestamp : NaN;
  }
  function parseTokenList(str) {
    var end = 0;
    var list = [];
    var start = 0;
    for (var i = 0, len = str.length; i < len; i++) {
      switch (str.charCodeAt(i)) {
        case 32:
          if (start === end) {
            start = end = i + 1;
          }
          break;
        case 44:
          list.push(str.substring(start, end));
          start = end = i + 1;
          break;
        default:
          end = i + 1;
          break;
      }
    }
    list.push(str.substring(start, end));
    return list;
  }
  function setHeaders(res, headers) {
    var keys = Object.keys(headers);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      res.setHeader(key, headers[key]);
    }
  }
});

// ../../node_modules/.pnpm/forwarded@0.1.2/node_modules/forwarded/index.js
var require_forwarded = __commonJS((exports2, module3) => {
  /*!
   * forwarded
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  module3.exports = forwarded;
  function forwarded(req) {
    if (!req) {
      throw new TypeError("argument req is required");
    }
    var proxyAddrs = parse(req.headers["x-forwarded-for"] || "");
    var socketAddr = req.connection.remoteAddress;
    var addrs = [socketAddr].concat(proxyAddrs);
    return addrs;
  }
  function parse(header) {
    var end = header.length;
    var list = [];
    var start = header.length;
    for (var i = header.length - 1; i >= 0; i--) {
      switch (header.charCodeAt(i)) {
        case 32:
          if (start === end) {
            start = end = i;
          }
          break;
        case 44:
          if (start !== end) {
            list.push(header.substring(start, end));
          }
          start = end = i;
          break;
        default:
          start = i;
          break;
      }
    }
    if (start !== end) {
      list.push(header.substring(start, end));
    }
    return list;
  }
});

// ../../node_modules/.pnpm/ipaddr.js@1.9.1/node_modules/ipaddr.js/lib/ipaddr.js
var require_ipaddr = __commonJS((exports2, module3) => {
  (function() {
    var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;
    ipaddr = {};
    root = this;
    if (typeof module3 !== "undefined" && module3 !== null && module3.exports) {
      module3.exports = ipaddr;
    } else {
      root["ipaddr"] = ipaddr;
    }
    matchCIDR = function(first, second, partSize, cidrBits) {
      var part, shift;
      if (first.length !== second.length) {
        throw new Error("ipaddr: cannot match CIDR for objects with different lengths");
      }
      part = 0;
      while (cidrBits > 0) {
        shift = partSize - cidrBits;
        if (shift < 0) {
          shift = 0;
        }
        if (first[part] >> shift !== second[part] >> shift) {
          return false;
        }
        cidrBits -= partSize;
        part += 1;
      }
      return true;
    };
    ipaddr.subnetMatch = function(address, rangeList, defaultName) {
      var k, len, rangeName, rangeSubnets, subnet;
      if (defaultName == null) {
        defaultName = "unicast";
      }
      for (rangeName in rangeList) {
        rangeSubnets = rangeList[rangeName];
        if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {
          rangeSubnets = [rangeSubnets];
        }
        for (k = 0, len = rangeSubnets.length; k < len; k++) {
          subnet = rangeSubnets[k];
          if (address.kind() === subnet[0].kind()) {
            if (address.match.apply(address, subnet)) {
              return rangeName;
            }
          }
        }
      }
      return defaultName;
    };
    ipaddr.IPv4 = function() {
      function IPv4(octets) {
        var k, len, octet;
        if (octets.length !== 4) {
          throw new Error("ipaddr: ipv4 octet count should be 4");
        }
        for (k = 0, len = octets.length; k < len; k++) {
          octet = octets[k];
          if (!(0 <= octet && octet <= 255)) {
            throw new Error("ipaddr: ipv4 octet should fit in 8 bits");
          }
        }
        this.octets = octets;
      }
      IPv4.prototype.kind = function() {
        return "ipv4";
      };
      IPv4.prototype.toString = function() {
        return this.octets.join(".");
      };
      IPv4.prototype.toNormalizedString = function() {
        return this.toString();
      };
      IPv4.prototype.toByteArray = function() {
        return this.octets.slice(0);
      };
      IPv4.prototype.match = function(other, cidrRange) {
        var ref;
        if (cidrRange === void 0) {
          ref = other, other = ref[0], cidrRange = ref[1];
        }
        if (other.kind() !== "ipv4") {
          throw new Error("ipaddr: cannot match ipv4 address with non-ipv4 one");
        }
        return matchCIDR(this.octets, other.octets, 8, cidrRange);
      };
      IPv4.prototype.SpecialRanges = {
        unspecified: [[new IPv4([0, 0, 0, 0]), 8]],
        broadcast: [[new IPv4([255, 255, 255, 255]), 32]],
        multicast: [[new IPv4([224, 0, 0, 0]), 4]],
        linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],
        loopback: [[new IPv4([127, 0, 0, 0]), 8]],
        carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],
        private: [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],
        reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]
      };
      IPv4.prototype.range = function() {
        return ipaddr.subnetMatch(this, this.SpecialRanges);
      };
      IPv4.prototype.toIPv4MappedAddress = function() {
        return ipaddr.IPv6.parse("::ffff:" + this.toString());
      };
      IPv4.prototype.prefixLengthFromSubnetMask = function() {
        var cidr, i, k, octet, stop, zeros, zerotable;
        zerotable = {
          0: 8,
          128: 7,
          192: 6,
          224: 5,
          240: 4,
          248: 3,
          252: 2,
          254: 1,
          255: 0
        };
        cidr = 0;
        stop = false;
        for (i = k = 3; k >= 0; i = k += -1) {
          octet = this.octets[i];
          if (octet in zerotable) {
            zeros = zerotable[octet];
            if (stop && zeros !== 0) {
              return null;
            }
            if (zeros !== 8) {
              stop = true;
            }
            cidr += zeros;
          } else {
            return null;
          }
        }
        return 32 - cidr;
      };
      return IPv4;
    }();
    ipv4Part = "(0?\\d+|0x[a-f0-9]+)";
    ipv4Regexes = {
      fourOctet: new RegExp("^" + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "$", "i"),
      longValue: new RegExp("^" + ipv4Part + "$", "i")
    };
    ipaddr.IPv4.parser = function(string) {
      var match, parseIntAuto, part, shift, value;
      parseIntAuto = function(string2) {
        if (string2[0] === "0" && string2[1] !== "x") {
          return parseInt(string2, 8);
        } else {
          return parseInt(string2);
        }
      };
      if (match = string.match(ipv4Regexes.fourOctet)) {
        return function() {
          var k, len, ref, results;
          ref = match.slice(1, 6);
          results = [];
          for (k = 0, len = ref.length; k < len; k++) {
            part = ref[k];
            results.push(parseIntAuto(part));
          }
          return results;
        }();
      } else if (match = string.match(ipv4Regexes.longValue)) {
        value = parseIntAuto(match[1]);
        if (value > 4294967295 || value < 0) {
          throw new Error("ipaddr: address outside defined range");
        }
        return function() {
          var k, results;
          results = [];
          for (shift = k = 0; k <= 24; shift = k += 8) {
            results.push(value >> shift & 255);
          }
          return results;
        }().reverse();
      } else {
        return null;
      }
    };
    ipaddr.IPv6 = function() {
      function IPv6(parts, zoneId) {
        var i, k, l, len, part, ref;
        if (parts.length === 16) {
          this.parts = [];
          for (i = k = 0; k <= 14; i = k += 2) {
            this.parts.push(parts[i] << 8 | parts[i + 1]);
          }
        } else if (parts.length === 8) {
          this.parts = parts;
        } else {
          throw new Error("ipaddr: ipv6 part count should be 8 or 16");
        }
        ref = this.parts;
        for (l = 0, len = ref.length; l < len; l++) {
          part = ref[l];
          if (!(0 <= part && part <= 65535)) {
            throw new Error("ipaddr: ipv6 part should fit in 16 bits");
          }
        }
        if (zoneId) {
          this.zoneId = zoneId;
        }
      }
      IPv6.prototype.kind = function() {
        return "ipv6";
      };
      IPv6.prototype.toString = function() {
        return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, "::");
      };
      IPv6.prototype.toRFC5952String = function() {
        var bestMatchIndex, bestMatchLength, match, regex, string;
        regex = /((^|:)(0(:|$)){2,})/g;
        string = this.toNormalizedString();
        bestMatchIndex = 0;
        bestMatchLength = -1;
        while (match = regex.exec(string)) {
          if (match[0].length > bestMatchLength) {
            bestMatchIndex = match.index;
            bestMatchLength = match[0].length;
          }
        }
        if (bestMatchLength < 0) {
          return string;
        }
        return string.substring(0, bestMatchIndex) + "::" + string.substring(bestMatchIndex + bestMatchLength);
      };
      IPv6.prototype.toByteArray = function() {
        var bytes, k, len, part, ref;
        bytes = [];
        ref = this.parts;
        for (k = 0, len = ref.length; k < len; k++) {
          part = ref[k];
          bytes.push(part >> 8);
          bytes.push(part & 255);
        }
        return bytes;
      };
      IPv6.prototype.toNormalizedString = function() {
        var addr, part, suffix;
        addr = function() {
          var k, len, ref, results;
          ref = this.parts;
          results = [];
          for (k = 0, len = ref.length; k < len; k++) {
            part = ref[k];
            results.push(part.toString(16));
          }
          return results;
        }.call(this).join(":");
        suffix = "";
        if (this.zoneId) {
          suffix = "%" + this.zoneId;
        }
        return addr + suffix;
      };
      IPv6.prototype.toFixedLengthString = function() {
        var addr, part, suffix;
        addr = function() {
          var k, len, ref, results;
          ref = this.parts;
          results = [];
          for (k = 0, len = ref.length; k < len; k++) {
            part = ref[k];
            results.push(part.toString(16).padStart(4, "0"));
          }
          return results;
        }.call(this).join(":");
        suffix = "";
        if (this.zoneId) {
          suffix = "%" + this.zoneId;
        }
        return addr + suffix;
      };
      IPv6.prototype.match = function(other, cidrRange) {
        var ref;
        if (cidrRange === void 0) {
          ref = other, other = ref[0], cidrRange = ref[1];
        }
        if (other.kind() !== "ipv6") {
          throw new Error("ipaddr: cannot match ipv6 address with non-ipv6 one");
        }
        return matchCIDR(this.parts, other.parts, 16, cidrRange);
      };
      IPv6.prototype.SpecialRanges = {
        unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],
        linkLocal: [new IPv6([65152, 0, 0, 0, 0, 0, 0, 0]), 10],
        multicast: [new IPv6([65280, 0, 0, 0, 0, 0, 0, 0]), 8],
        loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],
        uniqueLocal: [new IPv6([64512, 0, 0, 0, 0, 0, 0, 0]), 7],
        ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 65535, 0, 0]), 96],
        rfc6145: [new IPv6([0, 0, 0, 0, 65535, 0, 0, 0]), 96],
        rfc6052: [new IPv6([100, 65435, 0, 0, 0, 0, 0, 0]), 96],
        "6to4": [new IPv6([8194, 0, 0, 0, 0, 0, 0, 0]), 16],
        teredo: [new IPv6([8193, 0, 0, 0, 0, 0, 0, 0]), 32],
        reserved: [[new IPv6([8193, 3512, 0, 0, 0, 0, 0, 0]), 32]]
      };
      IPv6.prototype.range = function() {
        return ipaddr.subnetMatch(this, this.SpecialRanges);
      };
      IPv6.prototype.isIPv4MappedAddress = function() {
        return this.range() === "ipv4Mapped";
      };
      IPv6.prototype.toIPv4Address = function() {
        var high, low, ref;
        if (!this.isIPv4MappedAddress()) {
          throw new Error("ipaddr: trying to convert a generic ipv6 address to ipv4");
        }
        ref = this.parts.slice(-2), high = ref[0], low = ref[1];
        return new ipaddr.IPv4([high >> 8, high & 255, low >> 8, low & 255]);
      };
      IPv6.prototype.prefixLengthFromSubnetMask = function() {
        var cidr, i, k, part, stop, zeros, zerotable;
        zerotable = {
          0: 16,
          32768: 15,
          49152: 14,
          57344: 13,
          61440: 12,
          63488: 11,
          64512: 10,
          65024: 9,
          65280: 8,
          65408: 7,
          65472: 6,
          65504: 5,
          65520: 4,
          65528: 3,
          65532: 2,
          65534: 1,
          65535: 0
        };
        cidr = 0;
        stop = false;
        for (i = k = 7; k >= 0; i = k += -1) {
          part = this.parts[i];
          if (part in zerotable) {
            zeros = zerotable[part];
            if (stop && zeros !== 0) {
              return null;
            }
            if (zeros !== 16) {
              stop = true;
            }
            cidr += zeros;
          } else {
            return null;
          }
        }
        return 128 - cidr;
      };
      return IPv6;
    }();
    ipv6Part = "(?:[0-9a-f]+::?)+";
    zoneIndex = "%[0-9a-z]{1,}";
    ipv6Regexes = {
      zoneIndex: new RegExp(zoneIndex, "i"),
      native: new RegExp("^(::)?(" + ipv6Part + ")?([0-9a-f]+)?(::)?(" + zoneIndex + ")?$", "i"),
      transitional: new RegExp("^((?:" + ipv6Part + ")|(?:::)(?:" + ipv6Part + ")?)" + (ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part + "\\." + ipv4Part) + ("(" + zoneIndex + ")?$"), "i")
    };
    expandIPv6 = function(string, parts) {
      var colonCount, lastColon, part, replacement, replacementCount, zoneId;
      if (string.indexOf("::") !== string.lastIndexOf("::")) {
        return null;
      }
      zoneId = (string.match(ipv6Regexes["zoneIndex"]) || [])[0];
      if (zoneId) {
        zoneId = zoneId.substring(1);
        string = string.replace(/%.+$/, "");
      }
      colonCount = 0;
      lastColon = -1;
      while ((lastColon = string.indexOf(":", lastColon + 1)) >= 0) {
        colonCount++;
      }
      if (string.substr(0, 2) === "::") {
        colonCount--;
      }
      if (string.substr(-2, 2) === "::") {
        colonCount--;
      }
      if (colonCount > parts) {
        return null;
      }
      replacementCount = parts - colonCount;
      replacement = ":";
      while (replacementCount--) {
        replacement += "0:";
      }
      string = string.replace("::", replacement);
      if (string[0] === ":") {
        string = string.slice(1);
      }
      if (string[string.length - 1] === ":") {
        string = string.slice(0, -1);
      }
      parts = function() {
        var k, len, ref, results;
        ref = string.split(":");
        results = [];
        for (k = 0, len = ref.length; k < len; k++) {
          part = ref[k];
          results.push(parseInt(part, 16));
        }
        return results;
      }();
      return {
        parts,
        zoneId
      };
    };
    ipaddr.IPv6.parser = function(string) {
      var addr, k, len, match, octet, octets, zoneId;
      if (ipv6Regexes["native"].test(string)) {
        return expandIPv6(string, 8);
      } else if (match = string.match(ipv6Regexes["transitional"])) {
        zoneId = match[6] || "";
        addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);
        if (addr.parts) {
          octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];
          for (k = 0, len = octets.length; k < len; k++) {
            octet = octets[k];
            if (!(0 <= octet && octet <= 255)) {
              return null;
            }
          }
          addr.parts.push(octets[0] << 8 | octets[1]);
          addr.parts.push(octets[2] << 8 | octets[3]);
          return {
            parts: addr.parts,
            zoneId: addr.zoneId
          };
        }
      }
      return null;
    };
    ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {
      return this.parser(string) !== null;
    };
    ipaddr.IPv4.isValid = function(string) {
      var e;
      try {
        new this(this.parser(string));
        return true;
      } catch (error1) {
        e = error1;
        return false;
      }
    };
    ipaddr.IPv4.isValidFourPartDecimal = function(string) {
      if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\d*)(\.(0|[1-9]\d*)){3}$/)) {
        return true;
      } else {
        return false;
      }
    };
    ipaddr.IPv6.isValid = function(string) {
      var addr, e;
      if (typeof string === "string" && string.indexOf(":") === -1) {
        return false;
      }
      try {
        addr = this.parser(string);
        new this(addr.parts, addr.zoneId);
        return true;
      } catch (error1) {
        e = error1;
        return false;
      }
    };
    ipaddr.IPv4.parse = function(string) {
      var parts;
      parts = this.parser(string);
      if (parts === null) {
        throw new Error("ipaddr: string is not formatted like ip address");
      }
      return new this(parts);
    };
    ipaddr.IPv6.parse = function(string) {
      var addr;
      addr = this.parser(string);
      if (addr.parts === null) {
        throw new Error("ipaddr: string is not formatted like ip address");
      }
      return new this(addr.parts, addr.zoneId);
    };
    ipaddr.IPv4.parseCIDR = function(string) {
      var maskLength, match, parsed;
      if (match = string.match(/^(.+)\/(\d+)$/)) {
        maskLength = parseInt(match[2]);
        if (maskLength >= 0 && maskLength <= 32) {
          parsed = [this.parse(match[1]), maskLength];
          Object.defineProperty(parsed, "toString", {
            value: function() {
              return this.join("/");
            }
          });
          return parsed;
        }
      }
      throw new Error("ipaddr: string is not formatted like an IPv4 CIDR range");
    };
    ipaddr.IPv4.subnetMaskFromPrefixLength = function(prefix) {
      var filledOctetCount, j, octets;
      prefix = parseInt(prefix);
      if (prefix < 0 || prefix > 32) {
        throw new Error("ipaddr: invalid IPv4 prefix length");
      }
      octets = [0, 0, 0, 0];
      j = 0;
      filledOctetCount = Math.floor(prefix / 8);
      while (j < filledOctetCount) {
        octets[j] = 255;
        j++;
      }
      if (filledOctetCount < 4) {
        octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - prefix % 8;
      }
      return new this(octets);
    };
    ipaddr.IPv4.broadcastAddressFromCIDR = function(string) {
      var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;
      try {
        cidr = this.parseCIDR(string);
        ipInterfaceOctets = cidr[0].toByteArray();
        subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
        octets = [];
        i = 0;
        while (i < 4) {
          octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);
          i++;
        }
        return new this(octets);
      } catch (error1) {
        error = error1;
        throw new Error("ipaddr: the address does not have IPv4 CIDR format");
      }
    };
    ipaddr.IPv4.networkAddressFromCIDR = function(string) {
      var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;
      try {
        cidr = this.parseCIDR(string);
        ipInterfaceOctets = cidr[0].toByteArray();
        subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();
        octets = [];
        i = 0;
        while (i < 4) {
          octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));
          i++;
        }
        return new this(octets);
      } catch (error1) {
        error = error1;
        throw new Error("ipaddr: the address does not have IPv4 CIDR format");
      }
    };
    ipaddr.IPv6.parseCIDR = function(string) {
      var maskLength, match, parsed;
      if (match = string.match(/^(.+)\/(\d+)$/)) {
        maskLength = parseInt(match[2]);
        if (maskLength >= 0 && maskLength <= 128) {
          parsed = [this.parse(match[1]), maskLength];
          Object.defineProperty(parsed, "toString", {
            value: function() {
              return this.join("/");
            }
          });
          return parsed;
        }
      }
      throw new Error("ipaddr: string is not formatted like an IPv6 CIDR range");
    };
    ipaddr.isValid = function(string) {
      return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);
    };
    ipaddr.parse = function(string) {
      if (ipaddr.IPv6.isValid(string)) {
        return ipaddr.IPv6.parse(string);
      } else if (ipaddr.IPv4.isValid(string)) {
        return ipaddr.IPv4.parse(string);
      } else {
        throw new Error("ipaddr: the address has neither IPv6 nor IPv4 format");
      }
    };
    ipaddr.parseCIDR = function(string) {
      var e;
      try {
        return ipaddr.IPv6.parseCIDR(string);
      } catch (error1) {
        e = error1;
        try {
          return ipaddr.IPv4.parseCIDR(string);
        } catch (error12) {
          e = error12;
          throw new Error("ipaddr: the address has neither IPv6 nor IPv4 CIDR format");
        }
      }
    };
    ipaddr.fromByteArray = function(bytes) {
      var length;
      length = bytes.length;
      if (length === 4) {
        return new ipaddr.IPv4(bytes);
      } else if (length === 16) {
        return new ipaddr.IPv6(bytes);
      } else {
        throw new Error("ipaddr: the binary input is neither an IPv6 nor IPv4 address");
      }
    };
    ipaddr.process = function(string) {
      var addr;
      addr = this.parse(string);
      if (addr.kind() === "ipv6" && addr.isIPv4MappedAddress()) {
        return addr.toIPv4Address();
      } else {
        return addr;
      }
    };
  }).call(exports2);
});

// ../../node_modules/.pnpm/proxy-addr@2.0.6/node_modules/proxy-addr/index.js
var require_proxy_addr = __commonJS((exports2, module3) => {
  /*!
   * proxy-addr
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  module3.exports = proxyaddr;
  module3.exports.all = alladdrs;
  module3.exports.compile = compile;
  var forwarded = require_forwarded();
  var ipaddr = require_ipaddr();
  var DIGIT_REGEXP = /^[0-9]+$/;
  var isip = ipaddr.isValid;
  var parseip = ipaddr.parse;
  var IP_RANGES = {
    linklocal: ["169.254.0.0/16", "fe80::/10"],
    loopback: ["127.0.0.1/8", "::1/128"],
    uniquelocal: ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16", "fc00::/7"]
  };
  function alladdrs(req, trust) {
    var addrs = forwarded(req);
    if (!trust) {
      return addrs;
    }
    if (typeof trust !== "function") {
      trust = compile(trust);
    }
    for (var i = 0; i < addrs.length - 1; i++) {
      if (trust(addrs[i], i))
        continue;
      addrs.length = i + 1;
    }
    return addrs;
  }
  function compile(val) {
    if (!val) {
      throw new TypeError("argument is required");
    }
    var trust;
    if (typeof val === "string") {
      trust = [val];
    } else if (Array.isArray(val)) {
      trust = val.slice();
    } else {
      throw new TypeError("unsupported trust argument");
    }
    for (var i = 0; i < trust.length; i++) {
      val = trust[i];
      if (!Object.prototype.hasOwnProperty.call(IP_RANGES, val)) {
        continue;
      }
      val = IP_RANGES[val];
      trust.splice.apply(trust, [i, 1].concat(val));
      i += val.length - 1;
    }
    return compileTrust(compileRangeSubnets(trust));
  }
  function compileRangeSubnets(arr) {
    var rangeSubnets = new Array(arr.length);
    for (var i = 0; i < arr.length; i++) {
      rangeSubnets[i] = parseipNotation(arr[i]);
    }
    return rangeSubnets;
  }
  function compileTrust(rangeSubnets) {
    var len = rangeSubnets.length;
    return len === 0 ? trustNone : len === 1 ? trustSingle(rangeSubnets[0]) : trustMulti(rangeSubnets);
  }
  function parseipNotation(note) {
    var pos = note.lastIndexOf("/");
    var str = pos !== -1 ? note.substring(0, pos) : note;
    if (!isip(str)) {
      throw new TypeError("invalid IP address: " + str);
    }
    var ip = parseip(str);
    if (pos === -1 && ip.kind() === "ipv6" && ip.isIPv4MappedAddress()) {
      ip = ip.toIPv4Address();
    }
    var max = ip.kind() === "ipv6" ? 128 : 32;
    var range = pos !== -1 ? note.substring(pos + 1, note.length) : null;
    if (range === null) {
      range = max;
    } else if (DIGIT_REGEXP.test(range)) {
      range = parseInt(range, 10);
    } else if (ip.kind() === "ipv4" && isip(range)) {
      range = parseNetmask(range);
    } else {
      range = null;
    }
    if (range <= 0 || range > max) {
      throw new TypeError("invalid range on address: " + note);
    }
    return [ip, range];
  }
  function parseNetmask(netmask) {
    var ip = parseip(netmask);
    var kind = ip.kind();
    return kind === "ipv4" ? ip.prefixLengthFromSubnetMask() : null;
  }
  function proxyaddr(req, trust) {
    if (!req) {
      throw new TypeError("req argument is required");
    }
    if (!trust) {
      throw new TypeError("trust argument is required");
    }
    var addrs = alladdrs(req, trust);
    var addr = addrs[addrs.length - 1];
    return addr;
  }
  function trustNone() {
    return false;
  }
  function trustMulti(subnets) {
    return function trust(addr) {
      if (!isip(addr))
        return false;
      var ip = parseip(addr);
      var ipconv;
      var kind = ip.kind();
      for (var i = 0; i < subnets.length; i++) {
        var subnet = subnets[i];
        var subnetip = subnet[0];
        var subnetkind = subnetip.kind();
        var subnetrange = subnet[1];
        var trusted = ip;
        if (kind !== subnetkind) {
          if (subnetkind === "ipv4" && !ip.isIPv4MappedAddress()) {
            continue;
          }
          if (!ipconv) {
            ipconv = subnetkind === "ipv4" ? ip.toIPv4Address() : ip.toIPv4MappedAddress();
          }
          trusted = ipconv;
        }
        if (trusted.match(subnetip, subnetrange)) {
          return true;
        }
      }
      return false;
    };
  }
  function trustSingle(subnet) {
    var subnetip = subnet[0];
    var subnetkind = subnetip.kind();
    var subnetisipv4 = subnetkind === "ipv4";
    var subnetrange = subnet[1];
    return function trust(addr) {
      if (!isip(addr))
        return false;
      var ip = parseip(addr);
      var kind = ip.kind();
      if (kind !== subnetkind) {
        if (subnetisipv4 && !ip.isIPv4MappedAddress()) {
          return false;
        }
        ip = subnetisipv4 ? ip.toIPv4Address() : ip.toIPv4MappedAddress();
      }
      return ip.match(subnetip, subnetrange);
    };
  }
});

// ../../node_modules/.pnpm/express@4.17.1/node_modules/express/lib/utils.js
var require_utils7 = __commonJS((exports2) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var Buffer2 = require_safe_buffer().Buffer;
  var contentDisposition = require_content_disposition();
  var contentType = require_content_type();
  var deprecate = require_depd()("express");
  var flatten = require_array_flatten();
  var mime = require_send().mime;
  var etag = require_etag();
  var proxyaddr = require_proxy_addr();
  var qs = require_lib11();
  var querystring = require("querystring");
  exports2.etag = createETagGenerator({weak: false});
  exports2.wetag = createETagGenerator({weak: true});
  exports2.isAbsolute = function(path19) {
    if (path19[0] === "/")
      return true;
    if (path19[1] === ":" && (path19[2] === "\\" || path19[2] === "/"))
      return true;
    if (path19.substring(0, 2) === "\\\\")
      return true;
  };
  exports2.flatten = deprecate.function(flatten, "utils.flatten: use array-flatten npm module instead");
  exports2.normalizeType = function(type) {
    return ~type.indexOf("/") ? acceptParams(type) : {value: mime.lookup(type), params: {}};
  };
  exports2.normalizeTypes = function(types) {
    var ret = [];
    for (var i = 0; i < types.length; ++i) {
      ret.push(exports2.normalizeType(types[i]));
    }
    return ret;
  };
  exports2.contentDisposition = deprecate.function(contentDisposition, "utils.contentDisposition: use content-disposition npm module instead");
  function acceptParams(str, index) {
    var parts = str.split(/ *; */);
    var ret = {value: parts[0], quality: 1, params: {}, originalIndex: index};
    for (var i = 1; i < parts.length; ++i) {
      var pms = parts[i].split(/ *= */);
      if (pms[0] === "q") {
        ret.quality = parseFloat(pms[1]);
      } else {
        ret.params[pms[0]] = pms[1];
      }
    }
    return ret;
  }
  exports2.compileETag = function(val) {
    var fn;
    if (typeof val === "function") {
      return val;
    }
    switch (val) {
      case true:
        fn = exports2.wetag;
        break;
      case false:
        break;
      case "strong":
        fn = exports2.etag;
        break;
      case "weak":
        fn = exports2.wetag;
        break;
      default:
        throw new TypeError("unknown value for etag function: " + val);
    }
    return fn;
  };
  exports2.compileQueryParser = function compileQueryParser(val) {
    var fn;
    if (typeof val === "function") {
      return val;
    }
    switch (val) {
      case true:
        fn = querystring.parse;
        break;
      case false:
        fn = newObject;
        break;
      case "extended":
        fn = parseExtendedQueryString;
        break;
      case "simple":
        fn = querystring.parse;
        break;
      default:
        throw new TypeError("unknown value for query parser function: " + val);
    }
    return fn;
  };
  exports2.compileTrust = function(val) {
    if (typeof val === "function")
      return val;
    if (val === true) {
      return function() {
        return true;
      };
    }
    if (typeof val === "number") {
      return function(a, i) {
        return i < val;
      };
    }
    if (typeof val === "string") {
      val = val.split(/ *, */);
    }
    return proxyaddr.compile(val || []);
  };
  exports2.setCharset = function setCharset(type, charset) {
    if (!type || !charset) {
      return type;
    }
    var parsed = contentType.parse(type);
    parsed.parameters.charset = charset;
    return contentType.format(parsed);
  };
  function createETagGenerator(options) {
    return function generateETag(body, encoding) {
      var buf = !Buffer2.isBuffer(body) ? Buffer2.from(body, encoding) : body;
      return etag(buf, options);
    };
  }
  function parseExtendedQueryString(str) {
    return qs.parse(str, {
      allowPrototypes: true
    });
  }
  function newObject() {
    return {};
  }
});

// ../../node_modules/.pnpm/express@4.17.1/node_modules/express/lib/application.js
var require_application = __commonJS((exports2, module3) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var finalhandler = require_finalhandler();
  var Router = require_router();
  var methods = require_methods();
  var middleware = require_init();
  var query = require_query();
  var debug3 = require_src7()("express:application");
  var View = require_view();
  var http = require("http");
  var compileETag = require_utils7().compileETag;
  var compileQueryParser = require_utils7().compileQueryParser;
  var compileTrust = require_utils7().compileTrust;
  var deprecate = require_depd()("express");
  var flatten = require_array_flatten();
  var merge = require_utils_merge();
  var resolve = require("path").resolve;
  var setPrototypeOf = require_setprototypeof();
  var slice = Array.prototype.slice;
  var app = exports2 = module3.exports = {};
  var trustProxyDefaultSymbol = "@@symbol:trust_proxy_default";
  app.init = function init() {
    this.cache = {};
    this.engines = {};
    this.settings = {};
    this.defaultConfiguration();
  };
  app.defaultConfiguration = function defaultConfiguration() {
    var env = process.env.NODE_ENV || "development";
    this.enable("x-powered-by");
    this.set("etag", "weak");
    this.set("env", env);
    this.set("query parser", "extended");
    this.set("subdomain offset", 2);
    this.set("trust proxy", false);
    Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
      configurable: true,
      value: true
    });
    debug3("booting in %s mode", env);
    this.on("mount", function onmount(parent) {
      if (this.settings[trustProxyDefaultSymbol] === true && typeof parent.settings["trust proxy fn"] === "function") {
        delete this.settings["trust proxy"];
        delete this.settings["trust proxy fn"];
      }
      setPrototypeOf(this.request, parent.request);
      setPrototypeOf(this.response, parent.response);
      setPrototypeOf(this.engines, parent.engines);
      setPrototypeOf(this.settings, parent.settings);
    });
    this.locals = Object.create(null);
    this.mountpath = "/";
    this.locals.settings = this.settings;
    this.set("view", View);
    this.set("views", resolve("views"));
    this.set("jsonp callback name", "callback");
    if (env === "production") {
      this.enable("view cache");
    }
    Object.defineProperty(this, "router", {
      get: function() {
        throw new Error("'app.router' is deprecated!\nPlease see the 3.x to 4.x migration guide for details on how to update your app.");
      }
    });
  };
  app.lazyrouter = function lazyrouter() {
    if (!this._router) {
      this._router = new Router({
        caseSensitive: this.enabled("case sensitive routing"),
        strict: this.enabled("strict routing")
      });
      this._router.use(query(this.get("query parser fn")));
      this._router.use(middleware.init(this));
    }
  };
  app.handle = function handle(req, res, callback) {
    var router = this._router;
    var done = callback || finalhandler(req, res, {
      env: this.get("env"),
      onerror: logerror.bind(this)
    });
    if (!router) {
      debug3("no routes defined on app");
      done();
      return;
    }
    router.handle(req, res, done);
  };
  app.use = function use(fn) {
    var offset = 0;
    var path19 = "/";
    if (typeof fn !== "function") {
      var arg11 = fn;
      while (Array.isArray(arg11) && arg11.length !== 0) {
        arg11 = arg11[0];
      }
      if (typeof arg11 !== "function") {
        offset = 1;
        path19 = fn;
      }
    }
    var fns = flatten(slice.call(arguments, offset));
    if (fns.length === 0) {
      throw new TypeError("app.use() requires a middleware function");
    }
    this.lazyrouter();
    var router = this._router;
    fns.forEach(function(fn2) {
      if (!fn2 || !fn2.handle || !fn2.set) {
        return router.use(path19, fn2);
      }
      debug3(".use app under %s", path19);
      fn2.mountpath = path19;
      fn2.parent = this;
      router.use(path19, function mounted_app(req, res, next) {
        var orig = req.app;
        fn2.handle(req, res, function(err) {
          setPrototypeOf(req, orig.request);
          setPrototypeOf(res, orig.response);
          next(err);
        });
      });
      fn2.emit("mount", this);
    }, this);
    return this;
  };
  app.route = function route(path19) {
    this.lazyrouter();
    return this._router.route(path19);
  };
  app.engine = function engine(ext, fn) {
    if (typeof fn !== "function") {
      throw new Error("callback function required");
    }
    var extension = ext[0] !== "." ? "." + ext : ext;
    this.engines[extension] = fn;
    return this;
  };
  app.param = function param(name, fn) {
    this.lazyrouter();
    if (Array.isArray(name)) {
      for (var i = 0; i < name.length; i++) {
        this.param(name[i], fn);
      }
      return this;
    }
    this._router.param(name, fn);
    return this;
  };
  app.set = function set(setting, val) {
    if (arguments.length === 1) {
      return this.settings[setting];
    }
    debug3('set "%s" to %o', setting, val);
    this.settings[setting] = val;
    switch (setting) {
      case "etag":
        this.set("etag fn", compileETag(val));
        break;
      case "query parser":
        this.set("query parser fn", compileQueryParser(val));
        break;
      case "trust proxy":
        this.set("trust proxy fn", compileTrust(val));
        Object.defineProperty(this.settings, trustProxyDefaultSymbol, {
          configurable: true,
          value: false
        });
        break;
    }
    return this;
  };
  app.path = function path19() {
    return this.parent ? this.parent.path() + this.mountpath : "";
  };
  app.enabled = function enabled(setting) {
    return Boolean(this.set(setting));
  };
  app.disabled = function disabled(setting) {
    return !this.set(setting);
  };
  app.enable = function enable(setting) {
    return this.set(setting, true);
  };
  app.disable = function disable(setting) {
    return this.set(setting, false);
  };
  methods.forEach(function(method) {
    app[method] = function(path19) {
      if (method === "get" && arguments.length === 1) {
        return this.set(path19);
      }
      this.lazyrouter();
      var route = this._router.route(path19);
      route[method].apply(route, slice.call(arguments, 1));
      return this;
    };
  });
  app.all = function all(path19) {
    this.lazyrouter();
    var route = this._router.route(path19);
    var args2 = slice.call(arguments, 1);
    for (var i = 0; i < methods.length; i++) {
      route[methods[i]].apply(route, args2);
    }
    return this;
  };
  app.del = deprecate.function(app.delete, "app.del: Use app.delete instead");
  app.render = function render(name, options, callback) {
    var cache = this.cache;
    var done = callback;
    var engines5 = this.engines;
    var opts = options;
    var renderOptions = {};
    var view;
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    merge(renderOptions, this.locals);
    if (opts._locals) {
      merge(renderOptions, opts._locals);
    }
    merge(renderOptions, opts);
    if (renderOptions.cache == null) {
      renderOptions.cache = this.enabled("view cache");
    }
    if (renderOptions.cache) {
      view = cache[name];
    }
    if (!view) {
      var View2 = this.get("view");
      view = new View2(name, {
        defaultEngine: this.get("view engine"),
        root: this.get("views"),
        engines: engines5
      });
      if (!view.path) {
        var dirs = Array.isArray(view.root) && view.root.length > 1 ? 'directories "' + view.root.slice(0, -1).join('", "') + '" or "' + view.root[view.root.length - 1] + '"' : 'directory "' + view.root + '"';
        var err = new Error('Failed to lookup view "' + name + '" in views ' + dirs);
        err.view = view;
        return done(err);
      }
      if (renderOptions.cache) {
        cache[name] = view;
      }
    }
    tryRender(view, renderOptions, done);
  };
  app.listen = function listen() {
    var server = http.createServer(this);
    return server.listen.apply(server, arguments);
  };
  function logerror(err) {
    if (this.get("env") !== "test")
      console.error(err.stack || err.toString());
  }
  function tryRender(view, options, callback) {
    try {
      view.render(options, callback);
    } catch (err) {
      callback(err);
    }
  }
});

// ../../node_modules/.pnpm/negotiator@0.6.2/node_modules/negotiator/lib/charset.js
var require_charset = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = preferredCharsets;
  module3.exports.preferredCharsets = preferredCharsets;
  var simpleCharsetRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;
  function parseAcceptCharset(accept) {
    var accepts = accept.split(",");
    for (var i = 0, j = 0; i < accepts.length; i++) {
      var charset = parseCharset(accepts[i].trim(), i);
      if (charset) {
        accepts[j++] = charset;
      }
    }
    accepts.length = j;
    return accepts;
  }
  function parseCharset(str, i) {
    var match = simpleCharsetRegExp.exec(str);
    if (!match)
      return null;
    var charset = match[1];
    var q = 1;
    if (match[2]) {
      var params = match[2].split(";");
      for (var j = 0; j < params.length; j++) {
        var p = params[j].trim().split("=");
        if (p[0] === "q") {
          q = parseFloat(p[1]);
          break;
        }
      }
    }
    return {
      charset,
      q,
      i
    };
  }
  function getCharsetPriority(charset, accepted, index) {
    var priority = {o: -1, q: 0, s: 0};
    for (var i = 0; i < accepted.length; i++) {
      var spec = specify(charset, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  }
  function specify(charset, spec, index) {
    var s = 0;
    if (spec.charset.toLowerCase() === charset.toLowerCase()) {
      s |= 1;
    } else if (spec.charset !== "*") {
      return null;
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s
    };
  }
  function preferredCharsets(accept, provided) {
    var accepts = parseAcceptCharset(accept === void 0 ? "*" : accept || "");
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(getFullCharset);
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getCharsetPriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {
      return provided[priorities.indexOf(priority)];
    });
  }
  function compareSpecs(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
  }
  function getFullCharset(spec) {
    return spec.charset;
  }
  function isQuality(spec) {
    return spec.q > 0;
  }
});

// ../../node_modules/.pnpm/negotiator@0.6.2/node_modules/negotiator/lib/encoding.js
var require_encoding = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = preferredEncodings;
  module3.exports.preferredEncodings = preferredEncodings;
  var simpleEncodingRegExp = /^\s*([^\s;]+)\s*(?:;(.*))?$/;
  function parseAcceptEncoding(accept) {
    var accepts = accept.split(",");
    var hasIdentity = false;
    var minQuality = 1;
    for (var i = 0, j = 0; i < accepts.length; i++) {
      var encoding = parseEncoding(accepts[i].trim(), i);
      if (encoding) {
        accepts[j++] = encoding;
        hasIdentity = hasIdentity || specify("identity", encoding);
        minQuality = Math.min(minQuality, encoding.q || 1);
      }
    }
    if (!hasIdentity) {
      accepts[j++] = {
        encoding: "identity",
        q: minQuality,
        i
      };
    }
    accepts.length = j;
    return accepts;
  }
  function parseEncoding(str, i) {
    var match = simpleEncodingRegExp.exec(str);
    if (!match)
      return null;
    var encoding = match[1];
    var q = 1;
    if (match[2]) {
      var params = match[2].split(";");
      for (var j = 0; j < params.length; j++) {
        var p = params[j].trim().split("=");
        if (p[0] === "q") {
          q = parseFloat(p[1]);
          break;
        }
      }
    }
    return {
      encoding,
      q,
      i
    };
  }
  function getEncodingPriority(encoding, accepted, index) {
    var priority = {o: -1, q: 0, s: 0};
    for (var i = 0; i < accepted.length; i++) {
      var spec = specify(encoding, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  }
  function specify(encoding, spec, index) {
    var s = 0;
    if (spec.encoding.toLowerCase() === encoding.toLowerCase()) {
      s |= 1;
    } else if (spec.encoding !== "*") {
      return null;
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s
    };
  }
  function preferredEncodings(accept, provided) {
    var accepts = parseAcceptEncoding(accept || "");
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(getFullEncoding);
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getEncodingPriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {
      return provided[priorities.indexOf(priority)];
    });
  }
  function compareSpecs(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
  }
  function getFullEncoding(spec) {
    return spec.encoding;
  }
  function isQuality(spec) {
    return spec.q > 0;
  }
});

// ../../node_modules/.pnpm/negotiator@0.6.2/node_modules/negotiator/lib/language.js
var require_language = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = preferredLanguages;
  module3.exports.preferredLanguages = preferredLanguages;
  var simpleLanguageRegExp = /^\s*([^\s\-;]+)(?:-([^\s;]+))?\s*(?:;(.*))?$/;
  function parseAcceptLanguage(accept) {
    var accepts = accept.split(",");
    for (var i = 0, j = 0; i < accepts.length; i++) {
      var language = parseLanguage(accepts[i].trim(), i);
      if (language) {
        accepts[j++] = language;
      }
    }
    accepts.length = j;
    return accepts;
  }
  function parseLanguage(str, i) {
    var match = simpleLanguageRegExp.exec(str);
    if (!match)
      return null;
    var prefix = match[1], suffix = match[2], full = prefix;
    if (suffix)
      full += "-" + suffix;
    var q = 1;
    if (match[3]) {
      var params = match[3].split(";");
      for (var j = 0; j < params.length; j++) {
        var p = params[j].split("=");
        if (p[0] === "q")
          q = parseFloat(p[1]);
      }
    }
    return {
      prefix,
      suffix,
      q,
      i,
      full
    };
  }
  function getLanguagePriority(language, accepted, index) {
    var priority = {o: -1, q: 0, s: 0};
    for (var i = 0; i < accepted.length; i++) {
      var spec = specify(language, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  }
  function specify(language, spec, index) {
    var p = parseLanguage(language);
    if (!p)
      return null;
    var s = 0;
    if (spec.full.toLowerCase() === p.full.toLowerCase()) {
      s |= 4;
    } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {
      s |= 2;
    } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {
      s |= 1;
    } else if (spec.full !== "*") {
      return null;
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s
    };
  }
  function preferredLanguages(accept, provided) {
    var accepts = parseAcceptLanguage(accept === void 0 ? "*" : accept || "");
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(getFullLanguage);
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getLanguagePriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {
      return provided[priorities.indexOf(priority)];
    });
  }
  function compareSpecs(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
  }
  function getFullLanguage(spec) {
    return spec.full;
  }
  function isQuality(spec) {
    return spec.q > 0;
  }
});

// ../../node_modules/.pnpm/negotiator@0.6.2/node_modules/negotiator/lib/mediaType.js
var require_mediaType = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = preferredMediaTypes;
  module3.exports.preferredMediaTypes = preferredMediaTypes;
  var simpleMediaTypeRegExp = /^\s*([^\s\/;]+)\/([^;\s]+)\s*(?:;(.*))?$/;
  function parseAccept(accept) {
    var accepts = splitMediaTypes(accept);
    for (var i = 0, j = 0; i < accepts.length; i++) {
      var mediaType = parseMediaType(accepts[i].trim(), i);
      if (mediaType) {
        accepts[j++] = mediaType;
      }
    }
    accepts.length = j;
    return accepts;
  }
  function parseMediaType(str, i) {
    var match = simpleMediaTypeRegExp.exec(str);
    if (!match)
      return null;
    var params = Object.create(null);
    var q = 1;
    var subtype = match[2];
    var type = match[1];
    if (match[3]) {
      var kvps = splitParameters(match[3]).map(splitKeyValuePair);
      for (var j = 0; j < kvps.length; j++) {
        var pair = kvps[j];
        var key = pair[0].toLowerCase();
        var val = pair[1];
        var value = val && val[0] === '"' && val[val.length - 1] === '"' ? val.substr(1, val.length - 2) : val;
        if (key === "q") {
          q = parseFloat(value);
          break;
        }
        params[key] = value;
      }
    }
    return {
      type,
      subtype,
      params,
      q,
      i
    };
  }
  function getMediaTypePriority(type, accepted, index) {
    var priority = {o: -1, q: 0, s: 0};
    for (var i = 0; i < accepted.length; i++) {
      var spec = specify(type, accepted[i], index);
      if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {
        priority = spec;
      }
    }
    return priority;
  }
  function specify(type, spec, index) {
    var p = parseMediaType(type);
    var s = 0;
    if (!p) {
      return null;
    }
    if (spec.type.toLowerCase() == p.type.toLowerCase()) {
      s |= 4;
    } else if (spec.type != "*") {
      return null;
    }
    if (spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {
      s |= 2;
    } else if (spec.subtype != "*") {
      return null;
    }
    var keys = Object.keys(spec.params);
    if (keys.length > 0) {
      if (keys.every(function(k) {
        return spec.params[k] == "*" || (spec.params[k] || "").toLowerCase() == (p.params[k] || "").toLowerCase();
      })) {
        s |= 1;
      } else {
        return null;
      }
    }
    return {
      i: index,
      o: spec.i,
      q: spec.q,
      s
    };
  }
  function preferredMediaTypes(accept, provided) {
    var accepts = parseAccept(accept === void 0 ? "*/*" : accept || "");
    if (!provided) {
      return accepts.filter(isQuality).sort(compareSpecs).map(getFullType);
    }
    var priorities = provided.map(function getPriority(type, index) {
      return getMediaTypePriority(type, accepts, index);
    });
    return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {
      return provided[priorities.indexOf(priority)];
    });
  }
  function compareSpecs(a, b) {
    return b.q - a.q || b.s - a.s || a.o - b.o || a.i - b.i || 0;
  }
  function getFullType(spec) {
    return spec.type + "/" + spec.subtype;
  }
  function isQuality(spec) {
    return spec.q > 0;
  }
  function quoteCount(string) {
    var count = 0;
    var index = 0;
    while ((index = string.indexOf('"', index)) !== -1) {
      count++;
      index++;
    }
    return count;
  }
  function splitKeyValuePair(str) {
    var index = str.indexOf("=");
    var key;
    var val;
    if (index === -1) {
      key = str;
    } else {
      key = str.substr(0, index);
      val = str.substr(index + 1);
    }
    return [key, val];
  }
  function splitMediaTypes(accept) {
    var accepts = accept.split(",");
    for (var i = 1, j = 0; i < accepts.length; i++) {
      if (quoteCount(accepts[j]) % 2 == 0) {
        accepts[++j] = accepts[i];
      } else {
        accepts[j] += "," + accepts[i];
      }
    }
    accepts.length = j + 1;
    return accepts;
  }
  function splitParameters(str) {
    var parameters = str.split(";");
    for (var i = 1, j = 0; i < parameters.length; i++) {
      if (quoteCount(parameters[j]) % 2 == 0) {
        parameters[++j] = parameters[i];
      } else {
        parameters[j] += ";" + parameters[i];
      }
    }
    parameters.length = j + 1;
    for (var i = 0; i < parameters.length; i++) {
      parameters[i] = parameters[i].trim();
    }
    return parameters;
  }
});

// ../../node_modules/.pnpm/negotiator@0.6.2/node_modules/negotiator/index.js
var require_negotiator = __commonJS((exports2, module3) => {
  /*!
   * negotiator
   * Copyright(c) 2012 Federico Romero
   * Copyright(c) 2012-2014 Isaac Z. Schlueter
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var modules = Object.create(null);
  module3.exports = Negotiator;
  module3.exports.Negotiator = Negotiator;
  function Negotiator(request) {
    if (!(this instanceof Negotiator)) {
      return new Negotiator(request);
    }
    this.request = request;
  }
  Negotiator.prototype.charset = function charset(available) {
    var set = this.charsets(available);
    return set && set[0];
  };
  Negotiator.prototype.charsets = function charsets(available) {
    var preferredCharsets = loadModule("charset").preferredCharsets;
    return preferredCharsets(this.request.headers["accept-charset"], available);
  };
  Negotiator.prototype.encoding = function encoding(available) {
    var set = this.encodings(available);
    return set && set[0];
  };
  Negotiator.prototype.encodings = function encodings(available) {
    var preferredEncodings = loadModule("encoding").preferredEncodings;
    return preferredEncodings(this.request.headers["accept-encoding"], available);
  };
  Negotiator.prototype.language = function language(available) {
    var set = this.languages(available);
    return set && set[0];
  };
  Negotiator.prototype.languages = function languages(available) {
    var preferredLanguages = loadModule("language").preferredLanguages;
    return preferredLanguages(this.request.headers["accept-language"], available);
  };
  Negotiator.prototype.mediaType = function mediaType(available) {
    var set = this.mediaTypes(available);
    return set && set[0];
  };
  Negotiator.prototype.mediaTypes = function mediaTypes(available) {
    var preferredMediaTypes = loadModule("mediaType").preferredMediaTypes;
    return preferredMediaTypes(this.request.headers.accept, available);
  };
  Negotiator.prototype.preferredCharset = Negotiator.prototype.charset;
  Negotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;
  Negotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;
  Negotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;
  Negotiator.prototype.preferredLanguage = Negotiator.prototype.language;
  Negotiator.prototype.preferredLanguages = Negotiator.prototype.languages;
  Negotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;
  Negotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;
  function loadModule(moduleName) {
    var module4 = modules[moduleName];
    if (module4 !== void 0) {
      return module4;
    }
    switch (moduleName) {
      case "charset":
        module4 = require_charset();
        break;
      case "encoding":
        module4 = require_encoding();
        break;
      case "language":
        module4 = require_language();
        break;
      case "mediaType":
        module4 = require_mediaType();
        break;
      default:
        throw new Error("Cannot find module '" + moduleName + "'");
    }
    modules[moduleName] = module4;
    return module4;
  }
});

// ../../node_modules/.pnpm/accepts@1.3.7/node_modules/accepts/index.js
var require_accepts = __commonJS((exports2, module3) => {
  /*!
   * accepts
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var Negotiator = require_negotiator();
  var mime = require_mime_types();
  module3.exports = Accepts;
  function Accepts(req) {
    if (!(this instanceof Accepts)) {
      return new Accepts(req);
    }
    this.headers = req.headers;
    this.negotiator = new Negotiator(req);
  }
  Accepts.prototype.type = Accepts.prototype.types = function(types_) {
    var types = types_;
    if (types && !Array.isArray(types)) {
      types = new Array(arguments.length);
      for (var i = 0; i < types.length; i++) {
        types[i] = arguments[i];
      }
    }
    if (!types || types.length === 0) {
      return this.negotiator.mediaTypes();
    }
    if (!this.headers.accept) {
      return types[0];
    }
    var mimes = types.map(extToMime);
    var accepts = this.negotiator.mediaTypes(mimes.filter(validMime));
    var first = accepts[0];
    return first ? types[mimes.indexOf(first)] : false;
  };
  Accepts.prototype.encoding = Accepts.prototype.encodings = function(encodings_) {
    var encodings = encodings_;
    if (encodings && !Array.isArray(encodings)) {
      encodings = new Array(arguments.length);
      for (var i = 0; i < encodings.length; i++) {
        encodings[i] = arguments[i];
      }
    }
    if (!encodings || encodings.length === 0) {
      return this.negotiator.encodings();
    }
    return this.negotiator.encodings(encodings)[0] || false;
  };
  Accepts.prototype.charset = Accepts.prototype.charsets = function(charsets_) {
    var charsets = charsets_;
    if (charsets && !Array.isArray(charsets)) {
      charsets = new Array(arguments.length);
      for (var i = 0; i < charsets.length; i++) {
        charsets[i] = arguments[i];
      }
    }
    if (!charsets || charsets.length === 0) {
      return this.negotiator.charsets();
    }
    return this.negotiator.charsets(charsets)[0] || false;
  };
  Accepts.prototype.lang = Accepts.prototype.langs = Accepts.prototype.language = Accepts.prototype.languages = function(languages_) {
    var languages = languages_;
    if (languages && !Array.isArray(languages)) {
      languages = new Array(arguments.length);
      for (var i = 0; i < languages.length; i++) {
        languages[i] = arguments[i];
      }
    }
    if (!languages || languages.length === 0) {
      return this.negotiator.languages();
    }
    return this.negotiator.languages(languages)[0] || false;
  };
  function extToMime(type) {
    return type.indexOf("/") === -1 ? mime.lookup(type) : type;
  }
  function validMime(type) {
    return typeof type === "string";
  }
});

// ../../node_modules/.pnpm/express@4.17.1/node_modules/express/lib/request.js
var require_request2 = __commonJS((exports2, module3) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var accepts = require_accepts();
  var deprecate = require_depd()("express");
  var isIP = require("net").isIP;
  var typeis = require_type_is();
  var http = require("http");
  var fresh = require_fresh();
  var parseRange = require_range_parser();
  var parse = require_parseurl();
  var proxyaddr = require_proxy_addr();
  var req = Object.create(http.IncomingMessage.prototype);
  module3.exports = req;
  req.get = req.header = function header(name) {
    if (!name) {
      throw new TypeError("name argument is required to req.get");
    }
    if (typeof name !== "string") {
      throw new TypeError("name must be a string to req.get");
    }
    var lc = name.toLowerCase();
    switch (lc) {
      case "referer":
      case "referrer":
        return this.headers.referrer || this.headers.referer;
      default:
        return this.headers[lc];
    }
  };
  req.accepts = function() {
    var accept = accepts(this);
    return accept.types.apply(accept, arguments);
  };
  req.acceptsEncodings = function() {
    var accept = accepts(this);
    return accept.encodings.apply(accept, arguments);
  };
  req.acceptsEncoding = deprecate.function(req.acceptsEncodings, "req.acceptsEncoding: Use acceptsEncodings instead");
  req.acceptsCharsets = function() {
    var accept = accepts(this);
    return accept.charsets.apply(accept, arguments);
  };
  req.acceptsCharset = deprecate.function(req.acceptsCharsets, "req.acceptsCharset: Use acceptsCharsets instead");
  req.acceptsLanguages = function() {
    var accept = accepts(this);
    return accept.languages.apply(accept, arguments);
  };
  req.acceptsLanguage = deprecate.function(req.acceptsLanguages, "req.acceptsLanguage: Use acceptsLanguages instead");
  req.range = function range(size, options) {
    var range2 = this.get("Range");
    if (!range2)
      return;
    return parseRange(size, range2, options);
  };
  req.param = function param(name, defaultValue) {
    var params = this.params || {};
    var body = this.body || {};
    var query = this.query || {};
    var args2 = arguments.length === 1 ? "name" : "name, default";
    deprecate("req.param(" + args2 + "): Use req.params, req.body, or req.query instead");
    if (params[name] != null && params.hasOwnProperty(name))
      return params[name];
    if (body[name] != null)
      return body[name];
    if (query[name] != null)
      return query[name];
    return defaultValue;
  };
  req.is = function is(types) {
    var arr = types;
    if (!Array.isArray(types)) {
      arr = new Array(arguments.length);
      for (var i = 0; i < arr.length; i++) {
        arr[i] = arguments[i];
      }
    }
    return typeis(this, arr);
  };
  defineGetter(req, "protocol", function protocol() {
    var proto = this.connection.encrypted ? "https" : "http";
    var trust = this.app.get("trust proxy fn");
    if (!trust(this.connection.remoteAddress, 0)) {
      return proto;
    }
    var header = this.get("X-Forwarded-Proto") || proto;
    var index = header.indexOf(",");
    return index !== -1 ? header.substring(0, index).trim() : header.trim();
  });
  defineGetter(req, "secure", function secure() {
    return this.protocol === "https";
  });
  defineGetter(req, "ip", function ip() {
    var trust = this.app.get("trust proxy fn");
    return proxyaddr(this, trust);
  });
  defineGetter(req, "ips", function ips() {
    var trust = this.app.get("trust proxy fn");
    var addrs = proxyaddr.all(this, trust);
    addrs.reverse().pop();
    return addrs;
  });
  defineGetter(req, "subdomains", function subdomains() {
    var hostname = this.hostname;
    if (!hostname)
      return [];
    var offset = this.app.get("subdomain offset");
    var subdomains2 = !isIP(hostname) ? hostname.split(".").reverse() : [hostname];
    return subdomains2.slice(offset);
  });
  defineGetter(req, "path", function path19() {
    return parse(this).pathname;
  });
  defineGetter(req, "hostname", function hostname() {
    var trust = this.app.get("trust proxy fn");
    var host = this.get("X-Forwarded-Host");
    if (!host || !trust(this.connection.remoteAddress, 0)) {
      host = this.get("Host");
    } else if (host.indexOf(",") !== -1) {
      host = host.substring(0, host.indexOf(",")).trimRight();
    }
    if (!host)
      return;
    var offset = host[0] === "[" ? host.indexOf("]") + 1 : 0;
    var index = host.indexOf(":", offset);
    return index !== -1 ? host.substring(0, index) : host;
  });
  defineGetter(req, "host", deprecate.function(function host() {
    return this.hostname;
  }, "req.host: Use req.hostname instead"));
  defineGetter(req, "fresh", function() {
    var method = this.method;
    var res = this.res;
    var status = res.statusCode;
    if (method !== "GET" && method !== "HEAD")
      return false;
    if (status >= 200 && status < 300 || status === 304) {
      return fresh(this.headers, {
        etag: res.get("ETag"),
        "last-modified": res.get("Last-Modified")
      });
    }
    return false;
  });
  defineGetter(req, "stale", function stale() {
    return !this.fresh;
  });
  defineGetter(req, "xhr", function xhr() {
    var val = this.get("X-Requested-With") || "";
    return val.toLowerCase() === "xmlhttprequest";
  });
  function defineGetter(obj, name, getter) {
    Object.defineProperty(obj, name, {
      configurable: true,
      enumerable: true,
      get: getter
    });
  }
});

// ../../node_modules/.pnpm/cookie-signature@1.0.6/node_modules/cookie-signature/index.js
var require_cookie_signature = __commonJS((exports2) => {
  var crypto = require("crypto");
  exports2.sign = function(val, secret) {
    if (typeof val != "string")
      throw new TypeError("Cookie value must be provided as a string.");
    if (typeof secret != "string")
      throw new TypeError("Secret string must be provided.");
    return val + "." + crypto.createHmac("sha256", secret).update(val).digest("base64").replace(/\=+$/, "");
  };
  exports2.unsign = function(val, secret) {
    if (typeof val != "string")
      throw new TypeError("Signed cookie string must be provided.");
    if (typeof secret != "string")
      throw new TypeError("Secret string must be provided.");
    var str = val.slice(0, val.lastIndexOf(".")), mac = exports2.sign(str, secret);
    return sha1(mac) == sha1(val) ? str : false;
  };
  function sha1(str) {
    return crypto.createHash("sha1").update(str).digest("hex");
  }
});

// ../../node_modules/.pnpm/cookie@0.4.0/node_modules/cookie/index.js
var require_cookie2 = __commonJS((exports2) => {
  /*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  exports2.parse = parse;
  exports2.serialize = serialize;
  var decode = decodeURIComponent;
  var encode = encodeURIComponent;
  var pairSplitRegExp = /; */;
  var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
  function parse(str, options) {
    if (typeof str !== "string") {
      throw new TypeError("argument str must be a string");
    }
    var obj = {};
    var opt = options || {};
    var pairs = str.split(pairSplitRegExp);
    var dec = opt.decode || decode;
    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i];
      var eq_idx = pair.indexOf("=");
      if (eq_idx < 0) {
        continue;
      }
      var key = pair.substr(0, eq_idx).trim();
      var val = pair.substr(++eq_idx, pair.length).trim();
      if (val[0] == '"') {
        val = val.slice(1, -1);
      }
      if (obj[key] == void 0) {
        obj[key] = tryDecode(val, dec);
      }
    }
    return obj;
  }
  function serialize(name, val, options) {
    var opt = options || {};
    var enc = opt.encode || encode;
    if (typeof enc !== "function") {
      throw new TypeError("option encode is invalid");
    }
    if (!fieldContentRegExp.test(name)) {
      throw new TypeError("argument name is invalid");
    }
    var value = enc(val);
    if (value && !fieldContentRegExp.test(value)) {
      throw new TypeError("argument val is invalid");
    }
    var str = name + "=" + value;
    if (opt.maxAge != null) {
      var maxAge = opt.maxAge - 0;
      if (isNaN(maxAge))
        throw new Error("maxAge should be a Number");
      str += "; Max-Age=" + Math.floor(maxAge);
    }
    if (opt.domain) {
      if (!fieldContentRegExp.test(opt.domain)) {
        throw new TypeError("option domain is invalid");
      }
      str += "; Domain=" + opt.domain;
    }
    if (opt.path) {
      if (!fieldContentRegExp.test(opt.path)) {
        throw new TypeError("option path is invalid");
      }
      str += "; Path=" + opt.path;
    }
    if (opt.expires) {
      if (typeof opt.expires.toUTCString !== "function") {
        throw new TypeError("option expires is invalid");
      }
      str += "; Expires=" + opt.expires.toUTCString();
    }
    if (opt.httpOnly) {
      str += "; HttpOnly";
    }
    if (opt.secure) {
      str += "; Secure";
    }
    if (opt.sameSite) {
      var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
      switch (sameSite) {
        case true:
          str += "; SameSite=Strict";
          break;
        case "lax":
          str += "; SameSite=Lax";
          break;
        case "strict":
          str += "; SameSite=Strict";
          break;
        case "none":
          str += "; SameSite=None";
          break;
        default:
          throw new TypeError("option sameSite is invalid");
      }
    }
    return str;
  }
  function tryDecode(str, decode2) {
    try {
      return decode2(str);
    } catch (e) {
      return str;
    }
  }
});

// ../../node_modules/.pnpm/vary@1.1.2/node_modules/vary/index.js
var require_vary = __commonJS((exports2, module3) => {
  /*!
   * vary
   * Copyright(c) 2014-2017 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  module3.exports = vary;
  module3.exports.append = append;
  var FIELD_NAME_REGEXP = /^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/;
  function append(header, field) {
    if (typeof header !== "string") {
      throw new TypeError("header argument is required");
    }
    if (!field) {
      throw new TypeError("field argument is required");
    }
    var fields = !Array.isArray(field) ? parse(String(field)) : field;
    for (var j = 0; j < fields.length; j++) {
      if (!FIELD_NAME_REGEXP.test(fields[j])) {
        throw new TypeError("field argument contains an invalid header name");
      }
    }
    if (header === "*") {
      return header;
    }
    var val = header;
    var vals = parse(header.toLowerCase());
    if (fields.indexOf("*") !== -1 || vals.indexOf("*") !== -1) {
      return "*";
    }
    for (var i = 0; i < fields.length; i++) {
      var fld = fields[i].toLowerCase();
      if (vals.indexOf(fld) === -1) {
        vals.push(fld);
        val = val ? val + ", " + fields[i] : fields[i];
      }
    }
    return val;
  }
  function parse(header) {
    var end = 0;
    var list = [];
    var start = 0;
    for (var i = 0, len = header.length; i < len; i++) {
      switch (header.charCodeAt(i)) {
        case 32:
          if (start === end) {
            start = end = i + 1;
          }
          break;
        case 44:
          list.push(header.substring(start, end));
          start = end = i + 1;
          break;
        default:
          end = i + 1;
          break;
      }
    }
    list.push(header.substring(start, end));
    return list;
  }
  function vary(res, field) {
    if (!res || !res.getHeader || !res.setHeader) {
      throw new TypeError("res argument is required");
    }
    var val = res.getHeader("Vary") || "";
    var header = Array.isArray(val) ? val.join(", ") : String(val);
    if (val = append(header, field)) {
      res.setHeader("Vary", val);
    }
  }
});

// ../../node_modules/.pnpm/express@4.17.1/node_modules/express/lib/response.js
var require_response = __commonJS((exports2, module3) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var Buffer2 = require_safe_buffer().Buffer;
  var contentDisposition = require_content_disposition();
  var deprecate = require_depd()("express");
  var encodeUrl = require_encodeurl();
  var escapeHtml = require_escape_html();
  var http = require("http");
  var isAbsolute = require_utils7().isAbsolute;
  var onFinished = require_on_finished();
  var path19 = require("path");
  var statuses = require_statuses();
  var merge = require_utils_merge();
  var sign = require_cookie_signature().sign;
  var normalizeType = require_utils7().normalizeType;
  var normalizeTypes = require_utils7().normalizeTypes;
  var setCharset = require_utils7().setCharset;
  var cookie = require_cookie2();
  var send = require_send();
  var extname = path19.extname;
  var mime = send.mime;
  var resolve = path19.resolve;
  var vary = require_vary();
  var res = Object.create(http.ServerResponse.prototype);
  module3.exports = res;
  var charsetRegExp = /;\s*charset\s*=/;
  res.status = function status(code) {
    this.statusCode = code;
    return this;
  };
  res.links = function(links) {
    var link5 = this.get("Link") || "";
    if (link5)
      link5 += ", ";
    return this.set("Link", link5 + Object.keys(links).map(function(rel) {
      return "<" + links[rel] + '>; rel="' + rel + '"';
    }).join(", "));
  };
  res.send = function send2(body) {
    var chunk = body;
    var encoding;
    var req = this.req;
    var type;
    var app = this.app;
    if (arguments.length === 2) {
      if (typeof arguments[0] !== "number" && typeof arguments[1] === "number") {
        deprecate("res.send(body, status): Use res.status(status).send(body) instead");
        this.statusCode = arguments[1];
      } else {
        deprecate("res.send(status, body): Use res.status(status).send(body) instead");
        this.statusCode = arguments[0];
        chunk = arguments[1];
      }
    }
    if (typeof chunk === "number" && arguments.length === 1) {
      if (!this.get("Content-Type")) {
        this.type("txt");
      }
      deprecate("res.send(status): Use res.sendStatus(status) instead");
      this.statusCode = chunk;
      chunk = statuses[chunk];
    }
    switch (typeof chunk) {
      case "string":
        if (!this.get("Content-Type")) {
          this.type("html");
        }
        break;
      case "boolean":
      case "number":
      case "object":
        if (chunk === null) {
          chunk = "";
        } else if (Buffer2.isBuffer(chunk)) {
          if (!this.get("Content-Type")) {
            this.type("bin");
          }
        } else {
          return this.json(chunk);
        }
        break;
    }
    if (typeof chunk === "string") {
      encoding = "utf8";
      type = this.get("Content-Type");
      if (typeof type === "string") {
        this.set("Content-Type", setCharset(type, "utf-8"));
      }
    }
    var etagFn = app.get("etag fn");
    var generateETag = !this.get("ETag") && typeof etagFn === "function";
    var len;
    if (chunk !== void 0) {
      if (Buffer2.isBuffer(chunk)) {
        len = chunk.length;
      } else if (!generateETag && chunk.length < 1e3) {
        len = Buffer2.byteLength(chunk, encoding);
      } else {
        chunk = Buffer2.from(chunk, encoding);
        encoding = void 0;
        len = chunk.length;
      }
      this.set("Content-Length", len);
    }
    var etag;
    if (generateETag && len !== void 0) {
      if (etag = etagFn(chunk, encoding)) {
        this.set("ETag", etag);
      }
    }
    if (req.fresh)
      this.statusCode = 304;
    if (this.statusCode === 204 || this.statusCode === 304) {
      this.removeHeader("Content-Type");
      this.removeHeader("Content-Length");
      this.removeHeader("Transfer-Encoding");
      chunk = "";
    }
    if (req.method === "HEAD") {
      this.end();
    } else {
      this.end(chunk, encoding);
    }
    return this;
  };
  res.json = function json(obj) {
    var val = obj;
    if (arguments.length === 2) {
      if (typeof arguments[1] === "number") {
        deprecate("res.json(obj, status): Use res.status(status).json(obj) instead");
        this.statusCode = arguments[1];
      } else {
        deprecate("res.json(status, obj): Use res.status(status).json(obj) instead");
        this.statusCode = arguments[0];
        val = arguments[1];
      }
    }
    var app = this.app;
    var escape2 = app.get("json escape");
    var replacer = app.get("json replacer");
    var spaces = app.get("json spaces");
    var body = stringify(val, replacer, spaces, escape2);
    if (!this.get("Content-Type")) {
      this.set("Content-Type", "application/json");
    }
    return this.send(body);
  };
  res.jsonp = function jsonp(obj) {
    var val = obj;
    if (arguments.length === 2) {
      if (typeof arguments[1] === "number") {
        deprecate("res.jsonp(obj, status): Use res.status(status).json(obj) instead");
        this.statusCode = arguments[1];
      } else {
        deprecate("res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead");
        this.statusCode = arguments[0];
        val = arguments[1];
      }
    }
    var app = this.app;
    var escape2 = app.get("json escape");
    var replacer = app.get("json replacer");
    var spaces = app.get("json spaces");
    var body = stringify(val, replacer, spaces, escape2);
    var callback = this.req.query[app.get("jsonp callback name")];
    if (!this.get("Content-Type")) {
      this.set("X-Content-Type-Options", "nosniff");
      this.set("Content-Type", "application/json");
    }
    if (Array.isArray(callback)) {
      callback = callback[0];
    }
    if (typeof callback === "string" && callback.length !== 0) {
      this.set("X-Content-Type-Options", "nosniff");
      this.set("Content-Type", "text/javascript");
      callback = callback.replace(/[^\[\]\w$.]/g, "");
      body = body.replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
      body = "/**/ typeof " + callback + " === 'function' && " + callback + "(" + body + ");";
    }
    return this.send(body);
  };
  res.sendStatus = function sendStatus(statusCode) {
    var body = statuses[statusCode] || String(statusCode);
    this.statusCode = statusCode;
    this.type("txt");
    return this.send(body);
  };
  res.sendFile = function sendFile(path20, options, callback) {
    var done = callback;
    var req = this.req;
    var res2 = this;
    var next = req.next;
    var opts = options || {};
    if (!path20) {
      throw new TypeError("path argument is required to res.sendFile");
    }
    if (typeof path20 !== "string") {
      throw new TypeError("path must be a string to res.sendFile");
    }
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    if (!opts.root && !isAbsolute(path20)) {
      throw new TypeError("path must be absolute or specify root to res.sendFile");
    }
    var pathname = encodeURI(path20);
    var file = send(req, pathname, opts);
    sendfile(res2, file, opts, function(err) {
      if (done)
        return done(err);
      if (err && err.code === "EISDIR")
        return next();
      if (err && err.code !== "ECONNABORTED" && err.syscall !== "write") {
        next(err);
      }
    });
  };
  res.sendfile = function(path20, options, callback) {
    var done = callback;
    var req = this.req;
    var res2 = this;
    var next = req.next;
    var opts = options || {};
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    var file = send(req, path20, opts);
    sendfile(res2, file, opts, function(err) {
      if (done)
        return done(err);
      if (err && err.code === "EISDIR")
        return next();
      if (err && err.code !== "ECONNABORTED" && err.syscall !== "write") {
        next(err);
      }
    });
  };
  res.sendfile = deprecate.function(res.sendfile, "res.sendfile: Use res.sendFile instead");
  res.download = function download(path20, filename, options, callback) {
    var done = callback;
    var name = filename;
    var opts = options || null;
    if (typeof filename === "function") {
      done = filename;
      name = null;
      opts = null;
    } else if (typeof options === "function") {
      done = options;
      opts = null;
    }
    var headers = {
      "Content-Disposition": contentDisposition(name || path20)
    };
    if (opts && opts.headers) {
      var keys = Object.keys(opts.headers);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key.toLowerCase() !== "content-disposition") {
          headers[key] = opts.headers[key];
        }
      }
    }
    opts = Object.create(opts);
    opts.headers = headers;
    var fullPath = resolve(path20);
    return this.sendFile(fullPath, opts, done);
  };
  res.contentType = res.type = function contentType(type) {
    var ct = type.indexOf("/") === -1 ? mime.lookup(type) : type;
    return this.set("Content-Type", ct);
  };
  res.format = function(obj) {
    var req = this.req;
    var next = req.next;
    var fn = obj.default;
    if (fn)
      delete obj.default;
    var keys = Object.keys(obj);
    var key = keys.length > 0 ? req.accepts(keys) : false;
    this.vary("Accept");
    if (key) {
      this.set("Content-Type", normalizeType(key).value);
      obj[key](req, this, next);
    } else if (fn) {
      fn();
    } else {
      var err = new Error("Not Acceptable");
      err.status = err.statusCode = 406;
      err.types = normalizeTypes(keys).map(function(o) {
        return o.value;
      });
      next(err);
    }
    return this;
  };
  res.attachment = function attachment(filename) {
    if (filename) {
      this.type(extname(filename));
    }
    this.set("Content-Disposition", contentDisposition(filename));
    return this;
  };
  res.append = function append(field, val) {
    var prev = this.get(field);
    var value = val;
    if (prev) {
      value = Array.isArray(prev) ? prev.concat(val) : Array.isArray(val) ? [prev].concat(val) : [prev, val];
    }
    return this.set(field, value);
  };
  res.set = res.header = function header(field, val) {
    if (arguments.length === 2) {
      var value = Array.isArray(val) ? val.map(String) : String(val);
      if (field.toLowerCase() === "content-type") {
        if (Array.isArray(value)) {
          throw new TypeError("Content-Type cannot be set to an Array");
        }
        if (!charsetRegExp.test(value)) {
          var charset = mime.charsets.lookup(value.split(";")[0]);
          if (charset)
            value += "; charset=" + charset.toLowerCase();
        }
      }
      this.setHeader(field, value);
    } else {
      for (var key in field) {
        this.set(key, field[key]);
      }
    }
    return this;
  };
  res.get = function(field) {
    return this.getHeader(field);
  };
  res.clearCookie = function clearCookie(name, options) {
    var opts = merge({expires: new Date(1), path: "/"}, options);
    return this.cookie(name, "", opts);
  };
  res.cookie = function(name, value, options) {
    var opts = merge({}, options);
    var secret = this.req.secret;
    var signed = opts.signed;
    if (signed && !secret) {
      throw new Error('cookieParser("secret") required for signed cookies');
    }
    var val = typeof value === "object" ? "j:" + JSON.stringify(value) : String(value);
    if (signed) {
      val = "s:" + sign(val, secret);
    }
    if ("maxAge" in opts) {
      opts.expires = new Date(Date.now() + opts.maxAge);
      opts.maxAge /= 1e3;
    }
    if (opts.path == null) {
      opts.path = "/";
    }
    this.append("Set-Cookie", cookie.serialize(name, String(val), opts));
    return this;
  };
  res.location = function location(url) {
    var loc = url;
    if (url === "back") {
      loc = this.req.get("Referrer") || "/";
    }
    return this.set("Location", encodeUrl(loc));
  };
  res.redirect = function redirect(url) {
    var address = url;
    var body;
    var status = 302;
    if (arguments.length === 2) {
      if (typeof arguments[0] === "number") {
        status = arguments[0];
        address = arguments[1];
      } else {
        deprecate("res.redirect(url, status): Use res.redirect(status, url) instead");
        status = arguments[1];
      }
    }
    address = this.location(address).get("Location");
    this.format({
      text: function() {
        body = statuses[status] + ". Redirecting to " + address;
      },
      html: function() {
        var u = escapeHtml(address);
        body = "<p>" + statuses[status] + '. Redirecting to <a href="' + u + '">' + u + "</a></p>";
      },
      default: function() {
        body = "";
      }
    });
    this.statusCode = status;
    this.set("Content-Length", Buffer2.byteLength(body));
    if (this.req.method === "HEAD") {
      this.end();
    } else {
      this.end(body);
    }
  };
  res.vary = function(field) {
    if (!field || Array.isArray(field) && !field.length) {
      deprecate("res.vary(): Provide a field name");
      return this;
    }
    vary(this, field);
    return this;
  };
  res.render = function render(view, options, callback) {
    var app = this.req.app;
    var done = callback;
    var opts = options || {};
    var req = this.req;
    var self2 = this;
    if (typeof options === "function") {
      done = options;
      opts = {};
    }
    opts._locals = self2.locals;
    done = done || function(err, str) {
      if (err)
        return req.next(err);
      self2.send(str);
    };
    app.render(view, opts, done);
  };
  function sendfile(res2, file, options, callback) {
    var done = false;
    var streaming;
    function onaborted() {
      if (done)
        return;
      done = true;
      var err = new Error("Request aborted");
      err.code = "ECONNABORTED";
      callback(err);
    }
    function ondirectory() {
      if (done)
        return;
      done = true;
      var err = new Error("EISDIR, read");
      err.code = "EISDIR";
      callback(err);
    }
    function onerror(err) {
      if (done)
        return;
      done = true;
      callback(err);
    }
    function onend() {
      if (done)
        return;
      done = true;
      callback();
    }
    function onfile() {
      streaming = false;
    }
    function onfinish(err) {
      if (err && err.code === "ECONNRESET")
        return onaborted();
      if (err)
        return onerror(err);
      if (done)
        return;
      setImmediate(function() {
        if (streaming !== false && !done) {
          onaborted();
          return;
        }
        if (done)
          return;
        done = true;
        callback();
      });
    }
    function onstream() {
      streaming = true;
    }
    file.on("directory", ondirectory);
    file.on("end", onend);
    file.on("error", onerror);
    file.on("file", onfile);
    file.on("stream", onstream);
    onFinished(res2, onfinish);
    if (options.headers) {
      file.on("headers", function headers(res3) {
        var obj = options.headers;
        var keys = Object.keys(obj);
        for (var i = 0; i < keys.length; i++) {
          var k = keys[i];
          res3.setHeader(k, obj[k]);
        }
      });
    }
    file.pipe(res2);
  }
  function stringify(value, replacer, spaces, escape2) {
    var json = replacer || spaces ? JSON.stringify(value, replacer, spaces) : JSON.stringify(value);
    if (escape2) {
      json = json.replace(/[<>&]/g, function(c) {
        switch (c.charCodeAt(0)) {
          case 60:
            return "\\u003c";
          case 62:
            return "\\u003e";
          case 38:
            return "\\u0026";
          default:
            return c;
        }
      });
    }
    return json;
  }
});

// ../../node_modules/.pnpm/serve-static@1.14.1/node_modules/serve-static/index.js
var require_serve_static = __commonJS((exports2, module3) => {
  /*!
   * serve-static
   * Copyright(c) 2010 Sencha Inc.
   * Copyright(c) 2011 TJ Holowaychuk
   * Copyright(c) 2014-2016 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var encodeUrl = require_encodeurl();
  var escapeHtml = require_escape_html();
  var parseUrl = require_parseurl();
  var resolve = require("path").resolve;
  var send = require_send();
  var url = require("url");
  module3.exports = serveStatic;
  module3.exports.mime = send.mime;
  function serveStatic(root, options) {
    if (!root) {
      throw new TypeError("root path required");
    }
    if (typeof root !== "string") {
      throw new TypeError("root path must be a string");
    }
    var opts = Object.create(options || null);
    var fallthrough = opts.fallthrough !== false;
    var redirect = opts.redirect !== false;
    var setHeaders = opts.setHeaders;
    if (setHeaders && typeof setHeaders !== "function") {
      throw new TypeError("option setHeaders must be function");
    }
    opts.maxage = opts.maxage || opts.maxAge || 0;
    opts.root = resolve(root);
    var onDirectory = redirect ? createRedirectDirectoryListener() : createNotFoundDirectoryListener();
    return function serveStatic2(req, res, next) {
      if (req.method !== "GET" && req.method !== "HEAD") {
        if (fallthrough) {
          return next();
        }
        res.statusCode = 405;
        res.setHeader("Allow", "GET, HEAD");
        res.setHeader("Content-Length", "0");
        res.end();
        return;
      }
      var forwardError = !fallthrough;
      var originalUrl = parseUrl.original(req);
      var path19 = parseUrl(req).pathname;
      if (path19 === "/" && originalUrl.pathname.substr(-1) !== "/") {
        path19 = "";
      }
      var stream = send(req, path19, opts);
      stream.on("directory", onDirectory);
      if (setHeaders) {
        stream.on("headers", setHeaders);
      }
      if (fallthrough) {
        stream.on("file", function onFile() {
          forwardError = true;
        });
      }
      stream.on("error", function error(err) {
        if (forwardError || !(err.statusCode < 500)) {
          next(err);
          return;
        }
        next();
      });
      stream.pipe(res);
    };
  }
  function collapseLeadingSlashes(str) {
    for (var i = 0; i < str.length; i++) {
      if (str.charCodeAt(i) !== 47) {
        break;
      }
    }
    return i > 1 ? "/" + str.substr(i) : str;
  }
  function createHtmlDocument(title, body) {
    return '<!DOCTYPE html>\n<html lang="en">\n<head>\n<meta charset="utf-8">\n<title>' + title + "</title>\n</head>\n<body>\n<pre>" + body + "</pre>\n</body>\n</html>\n";
  }
  function createNotFoundDirectoryListener() {
    return function notFound() {
      this.error(404);
    };
  }
  function createRedirectDirectoryListener() {
    return function redirect(res) {
      if (this.hasTrailingSlash()) {
        this.error(404);
        return;
      }
      var originalUrl = parseUrl.original(this.req);
      originalUrl.path = null;
      originalUrl.pathname = collapseLeadingSlashes(originalUrl.pathname + "/");
      var loc = encodeUrl(url.format(originalUrl));
      var doc = createHtmlDocument("Redirecting", 'Redirecting to <a href="' + escapeHtml(loc) + '">' + escapeHtml(loc) + "</a>");
      res.statusCode = 301;
      res.setHeader("Content-Type", "text/html; charset=UTF-8");
      res.setHeader("Content-Length", Buffer.byteLength(doc));
      res.setHeader("Content-Security-Policy", "default-src 'none'");
      res.setHeader("X-Content-Type-Options", "nosniff");
      res.setHeader("Location", loc);
      res.end(doc);
    };
  }
});

// ../../node_modules/.pnpm/express@4.17.1/node_modules/express/lib/express.js
var require_express2 = __commonJS((exports2, module3) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  var bodyParser = require_body_parser();
  var EventEmitter = require("events").EventEmitter;
  var mixin = require_merge_descriptors();
  var proto = require_application();
  var Route = require_route3();
  var Router = require_router();
  var req = require_request2();
  var res = require_response();
  exports2 = module3.exports = createApplication;
  function createApplication() {
    var app = function(req2, res2, next) {
      app.handle(req2, res2, next);
    };
    mixin(app, EventEmitter.prototype, false);
    mixin(app, proto, false);
    app.request = Object.create(req, {
      app: {configurable: true, enumerable: true, writable: true, value: app}
    });
    app.response = Object.create(res, {
      app: {configurable: true, enumerable: true, writable: true, value: app}
    });
    app.init();
    return app;
  }
  exports2.application = proto;
  exports2.request = req;
  exports2.response = res;
  exports2.Route = Route;
  exports2.Router = Router;
  exports2.json = bodyParser.json;
  exports2.query = require_query();
  exports2.raw = bodyParser.raw;
  exports2.static = require_serve_static();
  exports2.text = bodyParser.text;
  exports2.urlencoded = bodyParser.urlencoded;
  var removedMiddlewares = [
    "bodyParser",
    "compress",
    "cookieSession",
    "session",
    "logger",
    "cookieParser",
    "favicon",
    "responseTime",
    "errorHandler",
    "timeout",
    "methodOverride",
    "vhost",
    "csrf",
    "directory",
    "limit",
    "multipart",
    "staticCache"
  ];
  removedMiddlewares.forEach(function(name) {
    Object.defineProperty(exports2, name, {
      get: function() {
        throw new Error("Most middleware (like " + name + ") is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.");
      },
      configurable: true
    });
  });
});

// ../../node_modules/.pnpm/express@4.17.1/node_modules/express/index.js
var require_express3 = __commonJS((exports2, module3) => {
  /*!
   * express
   * Copyright(c) 2009-2013 TJ Holowaychuk
   * Copyright(c) 2013 Roman Shtylman
   * Copyright(c) 2014-2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  "use strict";
  module3.exports = require_express2();
});

// ../../node_modules/.pnpm/ws@7.3.1/node_modules/ws/lib/constants.js
var require_constants6 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = {
    BINARY_TYPES: ["nodebuffer", "arraybuffer", "fragments"],
    GUID: "258EAFA5-E914-47DA-95CA-C5AB0DC85B11",
    kStatusCode: Symbol("status-code"),
    kWebSocket: Symbol("websocket"),
    EMPTY_BUFFER: Buffer.alloc(0),
    NOOP: () => {
    }
  };
});

// ../../node_modules/.pnpm/ws@7.3.1/node_modules/ws/lib/buffer-util.js
var require_buffer_util = __commonJS((exports2, module3) => {
  "use strict";
  const {EMPTY_BUFFER} = require_constants6();
  function concat(list, totalLength) {
    if (list.length === 0)
      return EMPTY_BUFFER;
    if (list.length === 1)
      return list[0];
    const target = Buffer.allocUnsafe(totalLength);
    let offset = 0;
    for (let i = 0; i < list.length; i++) {
      const buf = list[i];
      target.set(buf, offset);
      offset += buf.length;
    }
    if (offset < totalLength)
      return target.slice(0, offset);
    return target;
  }
  function _mask(source, mask, output, offset, length) {
    for (let i = 0; i < length; i++) {
      output[offset + i] = source[i] ^ mask[i & 3];
    }
  }
  function _unmask(buffer, mask) {
    const length = buffer.length;
    for (let i = 0; i < length; i++) {
      buffer[i] ^= mask[i & 3];
    }
  }
  function toArrayBuffer(buf) {
    if (buf.byteLength === buf.buffer.byteLength) {
      return buf.buffer;
    }
    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
  }
  function toBuffer(data) {
    toBuffer.readOnly = true;
    if (Buffer.isBuffer(data))
      return data;
    let buf;
    if (data instanceof ArrayBuffer) {
      buf = Buffer.from(data);
    } else if (ArrayBuffer.isView(data)) {
      buf = Buffer.from(data.buffer, data.byteOffset, data.byteLength);
    } else {
      buf = Buffer.from(data);
      toBuffer.readOnly = false;
    }
    return buf;
  }
  try {
    const bufferUtil = require("bufferutil");
    const bu = bufferUtil.BufferUtil || bufferUtil;
    module3.exports = {
      concat,
      mask(source, mask, output, offset, length) {
        if (length < 48)
          _mask(source, mask, output, offset, length);
        else
          bu.mask(source, mask, output, offset, length);
      },
      toArrayBuffer,
      toBuffer,
      unmask(buffer, mask) {
        if (buffer.length < 32)
          _unmask(buffer, mask);
        else
          bu.unmask(buffer, mask);
      }
    };
  } catch (e) {
    module3.exports = {
      concat,
      mask: _mask,
      toArrayBuffer,
      toBuffer,
      unmask: _unmask
    };
  }
});

// ../../node_modules/.pnpm/ws@7.3.1/node_modules/ws/lib/limiter.js
var require_limiter = __commonJS((exports2, module3) => {
  "use strict";
  const kDone = Symbol("kDone");
  const kRun = Symbol("kRun");
  class Limiter {
    constructor(concurrency) {
      this[kDone] = () => {
        this.pending--;
        this[kRun]();
      };
      this.concurrency = concurrency || Infinity;
      this.jobs = [];
      this.pending = 0;
    }
    add(job) {
      this.jobs.push(job);
      this[kRun]();
    }
    [kRun]() {
      if (this.pending === this.concurrency)
        return;
      if (this.jobs.length) {
        const job = this.jobs.shift();
        this.pending++;
        job(this[kDone]);
      }
    }
  }
  module3.exports = Limiter;
});

// ../../node_modules/.pnpm/ws@7.3.1/node_modules/ws/lib/permessage-deflate.js
var require_permessage_deflate = __commonJS((exports2, module3) => {
  "use strict";
  const zlib = require("zlib");
  const bufferUtil = require_buffer_util();
  const Limiter = require_limiter();
  const {kStatusCode, NOOP} = require_constants6();
  const TRAILER = Buffer.from([0, 0, 255, 255]);
  const kPerMessageDeflate = Symbol("permessage-deflate");
  const kTotalLength = Symbol("total-length");
  const kCallback = Symbol("callback");
  const kBuffers = Symbol("buffers");
  const kError = Symbol("error");
  let zlibLimiter;
  class PerMessageDeflate {
    constructor(options, isServer, maxPayload) {
      this._maxPayload = maxPayload | 0;
      this._options = options || {};
      this._threshold = this._options.threshold !== void 0 ? this._options.threshold : 1024;
      this._isServer = !!isServer;
      this._deflate = null;
      this._inflate = null;
      this.params = null;
      if (!zlibLimiter) {
        const concurrency = this._options.concurrencyLimit !== void 0 ? this._options.concurrencyLimit : 10;
        zlibLimiter = new Limiter(concurrency);
      }
    }
    static get extensionName() {
      return "permessage-deflate";
    }
    offer() {
      const params = {};
      if (this._options.serverNoContextTakeover) {
        params.server_no_context_takeover = true;
      }
      if (this._options.clientNoContextTakeover) {
        params.client_no_context_takeover = true;
      }
      if (this._options.serverMaxWindowBits) {
        params.server_max_window_bits = this._options.serverMaxWindowBits;
      }
      if (this._options.clientMaxWindowBits) {
        params.client_max_window_bits = this._options.clientMaxWindowBits;
      } else if (this._options.clientMaxWindowBits == null) {
        params.client_max_window_bits = true;
      }
      return params;
    }
    accept(configurations) {
      configurations = this.normalizeParams(configurations);
      this.params = this._isServer ? this.acceptAsServer(configurations) : this.acceptAsClient(configurations);
      return this.params;
    }
    cleanup() {
      if (this._inflate) {
        this._inflate.close();
        this._inflate = null;
      }
      if (this._deflate) {
        const callback = this._deflate[kCallback];
        this._deflate.close();
        this._deflate = null;
        if (callback) {
          callback(new Error("The deflate stream was closed while data was being processed"));
        }
      }
    }
    acceptAsServer(offers) {
      const opts = this._options;
      const accepted = offers.find((params) => {
        if (opts.serverNoContextTakeover === false && params.server_no_context_takeover || params.server_max_window_bits && (opts.serverMaxWindowBits === false || typeof opts.serverMaxWindowBits === "number" && opts.serverMaxWindowBits > params.server_max_window_bits) || typeof opts.clientMaxWindowBits === "number" && !params.client_max_window_bits) {
          return false;
        }
        return true;
      });
      if (!accepted) {
        throw new Error("None of the extension offers can be accepted");
      }
      if (opts.serverNoContextTakeover) {
        accepted.server_no_context_takeover = true;
      }
      if (opts.clientNoContextTakeover) {
        accepted.client_no_context_takeover = true;
      }
      if (typeof opts.serverMaxWindowBits === "number") {
        accepted.server_max_window_bits = opts.serverMaxWindowBits;
      }
      if (typeof opts.clientMaxWindowBits === "number") {
        accepted.client_max_window_bits = opts.clientMaxWindowBits;
      } else if (accepted.client_max_window_bits === true || opts.clientMaxWindowBits === false) {
        delete accepted.client_max_window_bits;
      }
      return accepted;
    }
    acceptAsClient(response) {
      const params = response[0];
      if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {
        throw new Error('Unexpected parameter "client_no_context_takeover"');
      }
      if (!params.client_max_window_bits) {
        if (typeof this._options.clientMaxWindowBits === "number") {
          params.client_max_window_bits = this._options.clientMaxWindowBits;
        }
      } else if (this._options.clientMaxWindowBits === false || typeof this._options.clientMaxWindowBits === "number" && params.client_max_window_bits > this._options.clientMaxWindowBits) {
        throw new Error('Unexpected or invalid parameter "client_max_window_bits"');
      }
      return params;
    }
    normalizeParams(configurations) {
      configurations.forEach((params) => {
        Object.keys(params).forEach((key) => {
          let value = params[key];
          if (value.length > 1) {
            throw new Error(`Parameter "${key}" must have only a single value`);
          }
          value = value[0];
          if (key === "client_max_window_bits") {
            if (value !== true) {
              const num = +value;
              if (!Number.isInteger(num) || num < 8 || num > 15) {
                throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
              }
              value = num;
            } else if (!this._isServer) {
              throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
            }
          } else if (key === "server_max_window_bits") {
            const num = +value;
            if (!Number.isInteger(num) || num < 8 || num > 15) {
              throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
            }
            value = num;
          } else if (key === "client_no_context_takeover" || key === "server_no_context_takeover") {
            if (value !== true) {
              throw new TypeError(`Invalid value for parameter "${key}": ${value}`);
            }
          } else {
            throw new Error(`Unknown parameter "${key}"`);
          }
          params[key] = value;
        });
      });
      return configurations;
    }
    decompress(data, fin, callback) {
      zlibLimiter.add((done) => {
        this._decompress(data, fin, (err, result) => {
          done();
          callback(err, result);
        });
      });
    }
    compress(data, fin, callback) {
      zlibLimiter.add((done) => {
        this._compress(data, fin, (err, result) => {
          done();
          callback(err, result);
        });
      });
    }
    _decompress(data, fin, callback) {
      const endpoint = this._isServer ? "client" : "server";
      if (!this._inflate) {
        const key = `${endpoint}_max_window_bits`;
        const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
        this._inflate = zlib.createInflateRaw({
          ...this._options.zlibInflateOptions,
          windowBits
        });
        this._inflate[kPerMessageDeflate] = this;
        this._inflate[kTotalLength] = 0;
        this._inflate[kBuffers] = [];
        this._inflate.on("error", inflateOnError);
        this._inflate.on("data", inflateOnData);
      }
      this._inflate[kCallback] = callback;
      this._inflate.write(data);
      if (fin)
        this._inflate.write(TRAILER);
      this._inflate.flush(() => {
        const err = this._inflate[kError];
        if (err) {
          this._inflate.close();
          this._inflate = null;
          callback(err);
          return;
        }
        const data2 = bufferUtil.concat(this._inflate[kBuffers], this._inflate[kTotalLength]);
        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
          this._inflate.close();
          this._inflate = null;
        } else {
          this._inflate[kTotalLength] = 0;
          this._inflate[kBuffers] = [];
        }
        callback(null, data2);
      });
    }
    _compress(data, fin, callback) {
      const endpoint = this._isServer ? "server" : "client";
      if (!this._deflate) {
        const key = `${endpoint}_max_window_bits`;
        const windowBits = typeof this.params[key] !== "number" ? zlib.Z_DEFAULT_WINDOWBITS : this.params[key];
        this._deflate = zlib.createDeflateRaw({
          ...this._options.zlibDeflateOptions,
          windowBits
        });
        this._deflate[kTotalLength] = 0;
        this._deflate[kBuffers] = [];
        this._deflate.on("error", NOOP);
        this._deflate.on("data", deflateOnData);
      }
      this._deflate[kCallback] = callback;
      this._deflate.write(data);
      this._deflate.flush(zlib.Z_SYNC_FLUSH, () => {
        if (!this._deflate) {
          return;
        }
        let data2 = bufferUtil.concat(this._deflate[kBuffers], this._deflate[kTotalLength]);
        if (fin)
          data2 = data2.slice(0, data2.length - 4);
        this._deflate[kCallback] = null;
        if (fin && this.params[`${endpoint}_no_context_takeover`]) {
          this._deflate.close();
          this._deflate = null;
        } else {
          this._deflate[kTotalLength] = 0;
          this._deflate[kBuffers] = [];
        }
        callback(null, data2);
      });
    }
  }
  module3.exports = PerMessageDeflate;
  function deflateOnData(chunk) {
    this[kBuffers].push(chunk);
    this[kTotalLength] += chunk.length;
  }
  function inflateOnData(chunk) {
    this[kTotalLength] += chunk.length;
    if (this[kPerMessageDeflate]._maxPayload < 1 || this[kTotalLength] <= this[kPerMessageDeflate]._maxPayload) {
      this[kBuffers].push(chunk);
      return;
    }
    this[kError] = new RangeError("Max payload size exceeded");
    this[kError][kStatusCode] = 1009;
    this.removeListener("data", inflateOnData);
    this.reset();
  }
  function inflateOnError(err) {
    this[kPerMessageDeflate]._inflate = null;
    err[kStatusCode] = 1007;
    this[kCallback](err);
  }
});

// ../../node_modules/.pnpm/ws@7.3.1/node_modules/ws/lib/validation.js
var require_validation = __commonJS((exports2) => {
  "use strict";
  try {
    const isValidUTF8 = require("utf-8-validate");
    exports2.isValidUTF8 = typeof isValidUTF8 === "object" ? isValidUTF8.Validation.isValidUTF8 : isValidUTF8;
  } catch (e) {
    exports2.isValidUTF8 = () => true;
  }
  exports2.isValidStatusCode = (code) => {
    return code >= 1e3 && code <= 1014 && code !== 1004 && code !== 1005 && code !== 1006 || code >= 3e3 && code <= 4999;
  };
});

// ../../node_modules/.pnpm/ws@7.3.1/node_modules/ws/lib/receiver.js
var require_receiver = __commonJS((exports2, module3) => {
  "use strict";
  const {Writable} = require("stream");
  const PerMessageDeflate = require_permessage_deflate();
  const {
    BINARY_TYPES,
    EMPTY_BUFFER,
    kStatusCode,
    kWebSocket
  } = require_constants6();
  const {concat, toArrayBuffer, unmask} = require_buffer_util();
  const {isValidStatusCode, isValidUTF8} = require_validation();
  const GET_INFO = 0;
  const GET_PAYLOAD_LENGTH_16 = 1;
  const GET_PAYLOAD_LENGTH_64 = 2;
  const GET_MASK = 3;
  const GET_DATA = 4;
  const INFLATING = 5;
  class Receiver extends Writable {
    constructor(binaryType, extensions, isServer, maxPayload) {
      super();
      this._binaryType = binaryType || BINARY_TYPES[0];
      this[kWebSocket] = void 0;
      this._extensions = extensions || {};
      this._isServer = !!isServer;
      this._maxPayload = maxPayload | 0;
      this._bufferedBytes = 0;
      this._buffers = [];
      this._compressed = false;
      this._payloadLength = 0;
      this._mask = void 0;
      this._fragmented = 0;
      this._masked = false;
      this._fin = false;
      this._opcode = 0;
      this._totalPayloadLength = 0;
      this._messageLength = 0;
      this._fragments = [];
      this._state = GET_INFO;
      this._loop = false;
    }
    _write(chunk, encoding, cb) {
      if (this._opcode === 8 && this._state == GET_INFO)
        return cb();
      this._bufferedBytes += chunk.length;
      this._buffers.push(chunk);
      this.startLoop(cb);
    }
    consume(n) {
      this._bufferedBytes -= n;
      if (n === this._buffers[0].length)
        return this._buffers.shift();
      if (n < this._buffers[0].length) {
        const buf = this._buffers[0];
        this._buffers[0] = buf.slice(n);
        return buf.slice(0, n);
      }
      const dst = Buffer.allocUnsafe(n);
      do {
        const buf = this._buffers[0];
        const offset = dst.length - n;
        if (n >= buf.length) {
          dst.set(this._buffers.shift(), offset);
        } else {
          dst.set(new Uint8Array(buf.buffer, buf.byteOffset, n), offset);
          this._buffers[0] = buf.slice(n);
        }
        n -= buf.length;
      } while (n > 0);
      return dst;
    }
    startLoop(cb) {
      let err;
      this._loop = true;
      do {
        switch (this._state) {
          case GET_INFO:
            err = this.getInfo();
            break;
          case GET_PAYLOAD_LENGTH_16:
            err = this.getPayloadLength16();
            break;
          case GET_PAYLOAD_LENGTH_64:
            err = this.getPayloadLength64();
            break;
          case GET_MASK:
            this.getMask();
            break;
          case GET_DATA:
            err = this.getData(cb);
            break;
          default:
            this._loop = false;
            return;
        }
      } while (this._loop);
      cb(err);
    }
    getInfo() {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }
      const buf = this.consume(2);
      if ((buf[0] & 48) !== 0) {
        this._loop = false;
        return error(RangeError, "RSV2 and RSV3 must be clear", true, 1002);
      }
      const compressed = (buf[0] & 64) === 64;
      if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {
        this._loop = false;
        return error(RangeError, "RSV1 must be clear", true, 1002);
      }
      this._fin = (buf[0] & 128) === 128;
      this._opcode = buf[0] & 15;
      this._payloadLength = buf[1] & 127;
      if (this._opcode === 0) {
        if (compressed) {
          this._loop = false;
          return error(RangeError, "RSV1 must be clear", true, 1002);
        }
        if (!this._fragmented) {
          this._loop = false;
          return error(RangeError, "invalid opcode 0", true, 1002);
        }
        this._opcode = this._fragmented;
      } else if (this._opcode === 1 || this._opcode === 2) {
        if (this._fragmented) {
          this._loop = false;
          return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
        }
        this._compressed = compressed;
      } else if (this._opcode > 7 && this._opcode < 11) {
        if (!this._fin) {
          this._loop = false;
          return error(RangeError, "FIN must be set", true, 1002);
        }
        if (compressed) {
          this._loop = false;
          return error(RangeError, "RSV1 must be clear", true, 1002);
        }
        if (this._payloadLength > 125) {
          this._loop = false;
          return error(RangeError, `invalid payload length ${this._payloadLength}`, true, 1002);
        }
      } else {
        this._loop = false;
        return error(RangeError, `invalid opcode ${this._opcode}`, true, 1002);
      }
      if (!this._fin && !this._fragmented)
        this._fragmented = this._opcode;
      this._masked = (buf[1] & 128) === 128;
      if (this._isServer) {
        if (!this._masked) {
          this._loop = false;
          return error(RangeError, "MASK must be set", true, 1002);
        }
      } else if (this._masked) {
        this._loop = false;
        return error(RangeError, "MASK must be clear", true, 1002);
      }
      if (this._payloadLength === 126)
        this._state = GET_PAYLOAD_LENGTH_16;
      else if (this._payloadLength === 127)
        this._state = GET_PAYLOAD_LENGTH_64;
      else
        return this.haveLength();
    }
    getPayloadLength16() {
      if (this._bufferedBytes < 2) {
        this._loop = false;
        return;
      }
      this._payloadLength = this.consume(2).readUInt16BE(0);
      return this.haveLength();
    }
    getPayloadLength64() {
      if (this._bufferedBytes < 8) {
        this._loop = false;
        return;
      }
      const buf = this.consume(8);
      const num = buf.readUInt32BE(0);
      if (num > Math.pow(2, 53 - 32) - 1) {
        this._loop = false;
        return error(RangeError, "Unsupported WebSocket frame: payload length > 2^53 - 1", false, 1009);
      }
      this._payloadLength = num * Math.pow(2, 32) + buf.readUInt32BE(4);
      return this.haveLength();
    }
    haveLength() {
      if (this._payloadLength && this._opcode < 8) {
        this._totalPayloadLength += this._payloadLength;
        if (this._totalPayloadLength > this._maxPayload && this._maxPayload > 0) {
          this._loop = false;
          return error(RangeError, "Max payload size exceeded", false, 1009);
        }
      }
      if (this._masked)
        this._state = GET_MASK;
      else
        this._state = GET_DATA;
    }
    getMask() {
      if (this._bufferedBytes < 4) {
        this._loop = false;
        return;
      }
      this._mask = this.consume(4);
      this._state = GET_DATA;
    }
    getData(cb) {
      let data = EMPTY_BUFFER;
      if (this._payloadLength) {
        if (this._bufferedBytes < this._payloadLength) {
          this._loop = false;
          return;
        }
        data = this.consume(this._payloadLength);
        if (this._masked)
          unmask(data, this._mask);
      }
      if (this._opcode > 7)
        return this.controlMessage(data);
      if (this._compressed) {
        this._state = INFLATING;
        this.decompress(data, cb);
        return;
      }
      if (data.length) {
        this._messageLength = this._totalPayloadLength;
        this._fragments.push(data);
      }
      return this.dataMessage();
    }
    decompress(data, cb) {
      const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
      perMessageDeflate.decompress(data, this._fin, (err, buf) => {
        if (err)
          return cb(err);
        if (buf.length) {
          this._messageLength += buf.length;
          if (this._messageLength > this._maxPayload && this._maxPayload > 0) {
            return cb(error(RangeError, "Max payload size exceeded", false, 1009));
          }
          this._fragments.push(buf);
        }
        const er = this.dataMessage();
        if (er)
          return cb(er);
        this.startLoop(cb);
      });
    }
    dataMessage() {
      if (this._fin) {
        const messageLength = this._messageLength;
        const fragments = this._fragments;
        this._totalPayloadLength = 0;
        this._messageLength = 0;
        this._fragmented = 0;
        this._fragments = [];
        if (this._opcode === 2) {
          let data;
          if (this._binaryType === "nodebuffer") {
            data = concat(fragments, messageLength);
          } else if (this._binaryType === "arraybuffer") {
            data = toArrayBuffer(concat(fragments, messageLength));
          } else {
            data = fragments;
          }
          this.emit("message", data);
        } else {
          const buf = concat(fragments, messageLength);
          if (!isValidUTF8(buf)) {
            this._loop = false;
            return error(Error, "invalid UTF-8 sequence", true, 1007);
          }
          this.emit("message", buf.toString());
        }
      }
      this._state = GET_INFO;
    }
    controlMessage(data) {
      if (this._opcode === 8) {
        this._loop = false;
        if (data.length === 0) {
          this.emit("conclude", 1005, "");
          this.end();
        } else if (data.length === 1) {
          return error(RangeError, "invalid payload length 1", true, 1002);
        } else {
          const code = data.readUInt16BE(0);
          if (!isValidStatusCode(code)) {
            return error(RangeError, `invalid status code ${code}`, true, 1002);
          }
          const buf = data.slice(2);
          if (!isValidUTF8(buf)) {
            return error(Error, "invalid UTF-8 sequence", true, 1007);
          }
          this.emit("conclude", code, buf.toString());
          this.end();
        }
      } else if (this._opcode === 9) {
        this.emit("ping", data);
      } else {
        this.emit("pong", data);
      }
      this._state = GET_INFO;
    }
  }
  module3.exports = Receiver;
  function error(ErrorCtor, message, prefix, statusCode) {
    const err = new ErrorCtor(prefix ? `Invalid WebSocket frame: ${message}` : message);
    Error.captureStackTrace(err, error);
    err[kStatusCode] = statusCode;
    return err;
  }
});

// ../../node_modules/.pnpm/ws@7.3.1/node_modules/ws/lib/sender.js
var require_sender = __commonJS((exports2, module3) => {
  "use strict";
  const {randomFillSync} = require("crypto");
  const PerMessageDeflate = require_permessage_deflate();
  const {EMPTY_BUFFER} = require_constants6();
  const {isValidStatusCode} = require_validation();
  const {mask: applyMask, toBuffer} = require_buffer_util();
  const mask = Buffer.alloc(4);
  class Sender {
    constructor(socket, extensions) {
      this._extensions = extensions || {};
      this._socket = socket;
      this._firstFragment = true;
      this._compress = false;
      this._bufferedBytes = 0;
      this._deflating = false;
      this._queue = [];
    }
    static frame(data, options) {
      const merge = options.mask && options.readOnly;
      let offset = options.mask ? 6 : 2;
      let payloadLength = data.length;
      if (data.length >= 65536) {
        offset += 8;
        payloadLength = 127;
      } else if (data.length > 125) {
        offset += 2;
        payloadLength = 126;
      }
      const target = Buffer.allocUnsafe(merge ? data.length + offset : offset);
      target[0] = options.fin ? options.opcode | 128 : options.opcode;
      if (options.rsv1)
        target[0] |= 64;
      target[1] = payloadLength;
      if (payloadLength === 126) {
        target.writeUInt16BE(data.length, 2);
      } else if (payloadLength === 127) {
        target.writeUInt32BE(0, 2);
        target.writeUInt32BE(data.length, 6);
      }
      if (!options.mask)
        return [target, data];
      randomFillSync(mask, 0, 4);
      target[1] |= 128;
      target[offset - 4] = mask[0];
      target[offset - 3] = mask[1];
      target[offset - 2] = mask[2];
      target[offset - 1] = mask[3];
      if (merge) {
        applyMask(data, mask, target, offset, data.length);
        return [target];
      }
      applyMask(data, mask, data, 0, data.length);
      return [target, data];
    }
    close(code, data, mask2, cb) {
      let buf;
      if (code === void 0) {
        buf = EMPTY_BUFFER;
      } else if (typeof code !== "number" || !isValidStatusCode(code)) {
        throw new TypeError("First argument must be a valid error code number");
      } else if (data === void 0 || data === "") {
        buf = Buffer.allocUnsafe(2);
        buf.writeUInt16BE(code, 0);
      } else {
        const length = Buffer.byteLength(data);
        if (length > 123) {
          throw new RangeError("The message must not be greater than 123 bytes");
        }
        buf = Buffer.allocUnsafe(2 + length);
        buf.writeUInt16BE(code, 0);
        buf.write(data, 2);
      }
      if (this._deflating) {
        this.enqueue([this.doClose, buf, mask2, cb]);
      } else {
        this.doClose(buf, mask2, cb);
      }
    }
    doClose(data, mask2, cb) {
      this.sendFrame(Sender.frame(data, {
        fin: true,
        rsv1: false,
        opcode: 8,
        mask: mask2,
        readOnly: false
      }), cb);
    }
    ping(data, mask2, cb) {
      const buf = toBuffer(data);
      if (buf.length > 125) {
        throw new RangeError("The data size must not be greater than 125 bytes");
      }
      if (this._deflating) {
        this.enqueue([this.doPing, buf, mask2, toBuffer.readOnly, cb]);
      } else {
        this.doPing(buf, mask2, toBuffer.readOnly, cb);
      }
    }
    doPing(data, mask2, readOnly, cb) {
      this.sendFrame(Sender.frame(data, {
        fin: true,
        rsv1: false,
        opcode: 9,
        mask: mask2,
        readOnly
      }), cb);
    }
    pong(data, mask2, cb) {
      const buf = toBuffer(data);
      if (buf.length > 125) {
        throw new RangeError("The data size must not be greater than 125 bytes");
      }
      if (this._deflating) {
        this.enqueue([this.doPong, buf, mask2, toBuffer.readOnly, cb]);
      } else {
        this.doPong(buf, mask2, toBuffer.readOnly, cb);
      }
    }
    doPong(data, mask2, readOnly, cb) {
      this.sendFrame(Sender.frame(data, {
        fin: true,
        rsv1: false,
        opcode: 10,
        mask: mask2,
        readOnly
      }), cb);
    }
    send(data, options, cb) {
      const buf = toBuffer(data);
      const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
      let opcode = options.binary ? 2 : 1;
      let rsv1 = options.compress;
      if (this._firstFragment) {
        this._firstFragment = false;
        if (rsv1 && perMessageDeflate) {
          rsv1 = buf.length >= perMessageDeflate._threshold;
        }
        this._compress = rsv1;
      } else {
        rsv1 = false;
        opcode = 0;
      }
      if (options.fin)
        this._firstFragment = true;
      if (perMessageDeflate) {
        const opts = {
          fin: options.fin,
          rsv1,
          opcode,
          mask: options.mask,
          readOnly: toBuffer.readOnly
        };
        if (this._deflating) {
          this.enqueue([this.dispatch, buf, this._compress, opts, cb]);
        } else {
          this.dispatch(buf, this._compress, opts, cb);
        }
      } else {
        this.sendFrame(Sender.frame(buf, {
          fin: options.fin,
          rsv1: false,
          opcode,
          mask: options.mask,
          readOnly: toBuffer.readOnly
        }), cb);
      }
    }
    dispatch(data, compress, options, cb) {
      if (!compress) {
        this.sendFrame(Sender.frame(data, options), cb);
        return;
      }
      const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];
      this._bufferedBytes += data.length;
      this._deflating = true;
      perMessageDeflate.compress(data, options.fin, (_2, buf) => {
        if (this._socket.destroyed) {
          const err = new Error("The socket was closed while data was being compressed");
          if (typeof cb === "function")
            cb(err);
          for (let i = 0; i < this._queue.length; i++) {
            const callback = this._queue[i][4];
            if (typeof callback === "function")
              callback(err);
          }
          return;
        }
        this._bufferedBytes -= data.length;
        this._deflating = false;
        options.readOnly = false;
        this.sendFrame(Sender.frame(buf, options), cb);
        this.dequeue();
      });
    }
    dequeue() {
      while (!this._deflating && this._queue.length) {
        const params = this._queue.shift();
        this._bufferedBytes -= params[1].length;
        Reflect.apply(params[0], this, params.slice(1));
      }
    }
    enqueue(params) {
      this._bufferedBytes += params[1].length;
      this._queue.push(params);
    }
    sendFrame(list, cb) {
      if (list.length === 2) {
        this._socket.cork();
        this._socket.write(list[0]);
        this._socket.write(list[1], cb);
        this._socket.uncork();
      } else {
        this._socket.write(list[0], cb);
      }
    }
  }
  module3.exports = Sender;
});

// ../../node_modules/.pnpm/ws@7.3.1/node_modules/ws/lib/event-target.js
var require_event_target = __commonJS((exports2, module3) => {
  "use strict";
  class Event2 {
    constructor(type, target) {
      this.target = target;
      this.type = type;
    }
  }
  class MessageEvent extends Event2 {
    constructor(data, target) {
      super("message", target);
      this.data = data;
    }
  }
  class CloseEvent extends Event2 {
    constructor(code, reason, target) {
      super("close", target);
      this.wasClean = target._closeFrameReceived && target._closeFrameSent;
      this.reason = reason;
      this.code = code;
    }
  }
  class OpenEvent extends Event2 {
    constructor(target) {
      super("open", target);
    }
  }
  class ErrorEvent2 extends Event2 {
    constructor(error, target) {
      super("error", target);
      this.message = error.message;
      this.error = error;
    }
  }
  const EventTarget = {
    addEventListener(type, listener, options) {
      if (typeof listener !== "function")
        return;
      function onMessage(data) {
        listener.call(this, new MessageEvent(data, this));
      }
      function onClose(code, message) {
        listener.call(this, new CloseEvent(code, message, this));
      }
      function onError(error) {
        listener.call(this, new ErrorEvent2(error, this));
      }
      function onOpen() {
        listener.call(this, new OpenEvent(this));
      }
      const method = options && options.once ? "once" : "on";
      if (type === "message") {
        onMessage._listener = listener;
        this[method](type, onMessage);
      } else if (type === "close") {
        onClose._listener = listener;
        this[method](type, onClose);
      } else if (type === "error") {
        onError._listener = listener;
        this[method](type, onError);
      } else if (type === "open") {
        onOpen._listener = listener;
        this[method](type, onOpen);
      } else {
        this[method](type, listener);
      }
    },
    removeEventListener(type, listener) {
      const listeners = this.listeners(type);
      for (let i = 0; i < listeners.length; i++) {
        if (listeners[i] === listener || listeners[i]._listener === listener) {
          this.removeListener(type, listeners[i]);
        }
      }
    }
  };
  module3.exports = EventTarget;
});

// ../../node_modules/.pnpm/ws@7.3.1/node_modules/ws/lib/extension.js
var require_extension = __commonJS((exports2, module3) => {
  "use strict";
  const tokenChars = [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    1,
    1,
    0,
    1,
    1,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    1,
    0,
    1,
    0
  ];
  function push(dest, name, elem) {
    if (dest[name] === void 0)
      dest[name] = [elem];
    else
      dest[name].push(elem);
  }
  function parse(header) {
    const offers = Object.create(null);
    if (header === void 0 || header === "")
      return offers;
    let params = Object.create(null);
    let mustUnescape = false;
    let isEscaping = false;
    let inQuotes = false;
    let extensionName;
    let paramName;
    let start = -1;
    let end = -1;
    let i = 0;
    for (; i < header.length; i++) {
      const code = header.charCodeAt(i);
      if (extensionName === void 0) {
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1)
            start = i;
        } else if (code === 32 || code === 9) {
          if (end === -1 && start !== -1)
            end = i;
        } else if (code === 59 || code === 44) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
          if (end === -1)
            end = i;
          const name = header.slice(start, end);
          if (code === 44) {
            push(offers, name, params);
            params = Object.create(null);
          } else {
            extensionName = name;
          }
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else if (paramName === void 0) {
        if (end === -1 && tokenChars[code] === 1) {
          if (start === -1)
            start = i;
        } else if (code === 32 || code === 9) {
          if (end === -1 && start !== -1)
            end = i;
        } else if (code === 59 || code === 44) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
          if (end === -1)
            end = i;
          push(params, header.slice(start, end), true);
          if (code === 44) {
            push(offers, extensionName, params);
            params = Object.create(null);
            extensionName = void 0;
          }
          start = end = -1;
        } else if (code === 61 && start !== -1 && end === -1) {
          paramName = header.slice(start, i);
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      } else {
        if (isEscaping) {
          if (tokenChars[code] !== 1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
          if (start === -1)
            start = i;
          else if (!mustUnescape)
            mustUnescape = true;
          isEscaping = false;
        } else if (inQuotes) {
          if (tokenChars[code] === 1) {
            if (start === -1)
              start = i;
          } else if (code === 34 && start !== -1) {
            inQuotes = false;
            end = i;
          } else if (code === 92) {
            isEscaping = true;
          } else {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
        } else if (code === 34 && header.charCodeAt(i - 1) === 61) {
          inQuotes = true;
        } else if (end === -1 && tokenChars[code] === 1) {
          if (start === -1)
            start = i;
        } else if (start !== -1 && (code === 32 || code === 9)) {
          if (end === -1)
            end = i;
        } else if (code === 59 || code === 44) {
          if (start === -1) {
            throw new SyntaxError(`Unexpected character at index ${i}`);
          }
          if (end === -1)
            end = i;
          let value = header.slice(start, end);
          if (mustUnescape) {
            value = value.replace(/\\/g, "");
            mustUnescape = false;
          }
          push(params, paramName, value);
          if (code === 44) {
            push(offers, extensionName, params);
            params = Object.create(null);
            extensionName = void 0;
          }
          paramName = void 0;
          start = end = -1;
        } else {
          throw new SyntaxError(`Unexpected character at index ${i}`);
        }
      }
    }
    if (start === -1 || inQuotes) {
      throw new SyntaxError("Unexpected end of input");
    }
    if (end === -1)
      end = i;
    const token = header.slice(start, end);
    if (extensionName === void 0) {
      push(offers, token, params);
    } else {
      if (paramName === void 0) {
        push(params, token, true);
      } else if (mustUnescape) {
        push(params, paramName, token.replace(/\\/g, ""));
      } else {
        push(params, paramName, token);
      }
      push(offers, extensionName, params);
    }
    return offers;
  }
  function format11(extensions) {
    return Object.keys(extensions).map((extension) => {
      let configurations = extensions[extension];
      if (!Array.isArray(configurations))
        configurations = [configurations];
      return configurations.map((params) => {
        return [extension].concat(Object.keys(params).map((k) => {
          let values = params[k];
          if (!Array.isArray(values))
            values = [values];
          return values.map((v) => v === true ? k : `${k}=${v}`).join("; ");
        })).join("; ");
      }).join(", ");
    }).join(", ");
  }
  module3.exports = {format: format11, parse};
});

// ../../node_modules/.pnpm/ws@7.3.1/node_modules/ws/lib/websocket.js
var require_websocket = __commonJS((exports2, module3) => {
  "use strict";
  const EventEmitter = require("events");
  const https = require("https");
  const http = require("http");
  const net = require("net");
  const tls = require("tls");
  const {randomBytes, createHash} = require("crypto");
  const {URL: URL2} = require("url");
  const PerMessageDeflate = require_permessage_deflate();
  const Receiver = require_receiver();
  const Sender = require_sender();
  const {
    BINARY_TYPES,
    EMPTY_BUFFER,
    GUID,
    kStatusCode,
    kWebSocket,
    NOOP
  } = require_constants6();
  const {addEventListener, removeEventListener} = require_event_target();
  const {format: format11, parse} = require_extension();
  const {toBuffer} = require_buffer_util();
  const readyStates = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"];
  const protocolVersions = [8, 13];
  const closeTimeout = 30 * 1e3;
  class WebSocket extends EventEmitter {
    constructor(address, protocols, options) {
      super();
      this.readyState = WebSocket.CONNECTING;
      this.protocol = "";
      this._binaryType = BINARY_TYPES[0];
      this._closeFrameReceived = false;
      this._closeFrameSent = false;
      this._closeMessage = "";
      this._closeTimer = null;
      this._closeCode = 1006;
      this._extensions = {};
      this._receiver = null;
      this._sender = null;
      this._socket = null;
      if (address !== null) {
        this._bufferedAmount = 0;
        this._isServer = false;
        this._redirects = 0;
        if (Array.isArray(protocols)) {
          protocols = protocols.join(", ");
        } else if (typeof protocols === "object" && protocols !== null) {
          options = protocols;
          protocols = void 0;
        }
        initAsClient(this, address, protocols, options);
      } else {
        this._isServer = true;
      }
    }
    get CONNECTING() {
      return WebSocket.CONNECTING;
    }
    get CLOSING() {
      return WebSocket.CLOSING;
    }
    get CLOSED() {
      return WebSocket.CLOSED;
    }
    get OPEN() {
      return WebSocket.OPEN;
    }
    get binaryType() {
      return this._binaryType;
    }
    set binaryType(type) {
      if (!BINARY_TYPES.includes(type))
        return;
      this._binaryType = type;
      if (this._receiver)
        this._receiver._binaryType = type;
    }
    get bufferedAmount() {
      if (!this._socket)
        return this._bufferedAmount;
      return this._socket._writableState.length + this._sender._bufferedBytes;
    }
    get extensions() {
      return Object.keys(this._extensions).join();
    }
    setSocket(socket, head, maxPayload) {
      const receiver = new Receiver(this._binaryType, this._extensions, this._isServer, maxPayload);
      this._sender = new Sender(socket, this._extensions);
      this._receiver = receiver;
      this._socket = socket;
      receiver[kWebSocket] = this;
      socket[kWebSocket] = this;
      receiver.on("conclude", receiverOnConclude);
      receiver.on("drain", receiverOnDrain);
      receiver.on("error", receiverOnError);
      receiver.on("message", receiverOnMessage);
      receiver.on("ping", receiverOnPing);
      receiver.on("pong", receiverOnPong);
      socket.setTimeout(0);
      socket.setNoDelay();
      if (head.length > 0)
        socket.unshift(head);
      socket.on("close", socketOnClose);
      socket.on("data", socketOnData);
      socket.on("end", socketOnEnd);
      socket.on("error", socketOnError);
      this.readyState = WebSocket.OPEN;
      this.emit("open");
    }
    emitClose() {
      if (!this._socket) {
        this.readyState = WebSocket.CLOSED;
        this.emit("close", this._closeCode, this._closeMessage);
        return;
      }
      if (this._extensions[PerMessageDeflate.extensionName]) {
        this._extensions[PerMessageDeflate.extensionName].cleanup();
      }
      this._receiver.removeAllListeners();
      this.readyState = WebSocket.CLOSED;
      this.emit("close", this._closeCode, this._closeMessage);
    }
    close(code, data) {
      if (this.readyState === WebSocket.CLOSED)
        return;
      if (this.readyState === WebSocket.CONNECTING) {
        const msg = "WebSocket was closed before the connection was established";
        return abortHandshake(this, this._req, msg);
      }
      if (this.readyState === WebSocket.CLOSING) {
        if (this._closeFrameSent && this._closeFrameReceived)
          this._socket.end();
        return;
      }
      this.readyState = WebSocket.CLOSING;
      this._sender.close(code, data, !this._isServer, (err) => {
        if (err)
          return;
        this._closeFrameSent = true;
        if (this._closeFrameReceived)
          this._socket.end();
      });
      this._closeTimer = setTimeout(this._socket.destroy.bind(this._socket), closeTimeout);
    }
    ping(data, mask, cb) {
      if (this.readyState === WebSocket.CONNECTING) {
        throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
      }
      if (typeof data === "function") {
        cb = data;
        data = mask = void 0;
      } else if (typeof mask === "function") {
        cb = mask;
        mask = void 0;
      }
      if (typeof data === "number")
        data = data.toString();
      if (this.readyState !== WebSocket.OPEN) {
        sendAfterClose(this, data, cb);
        return;
      }
      if (mask === void 0)
        mask = !this._isServer;
      this._sender.ping(data || EMPTY_BUFFER, mask, cb);
    }
    pong(data, mask, cb) {
      if (this.readyState === WebSocket.CONNECTING) {
        throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
      }
      if (typeof data === "function") {
        cb = data;
        data = mask = void 0;
      } else if (typeof mask === "function") {
        cb = mask;
        mask = void 0;
      }
      if (typeof data === "number")
        data = data.toString();
      if (this.readyState !== WebSocket.OPEN) {
        sendAfterClose(this, data, cb);
        return;
      }
      if (mask === void 0)
        mask = !this._isServer;
      this._sender.pong(data || EMPTY_BUFFER, mask, cb);
    }
    send(data, options, cb) {
      if (this.readyState === WebSocket.CONNECTING) {
        throw new Error("WebSocket is not open: readyState 0 (CONNECTING)");
      }
      if (typeof options === "function") {
        cb = options;
        options = {};
      }
      if (typeof data === "number")
        data = data.toString();
      if (this.readyState !== WebSocket.OPEN) {
        sendAfterClose(this, data, cb);
        return;
      }
      const opts = {
        binary: typeof data !== "string",
        mask: !this._isServer,
        compress: true,
        fin: true,
        ...options
      };
      if (!this._extensions[PerMessageDeflate.extensionName]) {
        opts.compress = false;
      }
      this._sender.send(data || EMPTY_BUFFER, opts, cb);
    }
    terminate() {
      if (this.readyState === WebSocket.CLOSED)
        return;
      if (this.readyState === WebSocket.CONNECTING) {
        const msg = "WebSocket was closed before the connection was established";
        return abortHandshake(this, this._req, msg);
      }
      if (this._socket) {
        this.readyState = WebSocket.CLOSING;
        this._socket.destroy();
      }
    }
  }
  readyStates.forEach((readyState, i) => {
    WebSocket[readyState] = i;
  });
  ["open", "error", "close", "message"].forEach((method) => {
    Object.defineProperty(WebSocket.prototype, `on${method}`, {
      get() {
        const listeners = this.listeners(method);
        for (let i = 0; i < listeners.length; i++) {
          if (listeners[i]._listener)
            return listeners[i]._listener;
        }
        return void 0;
      },
      set(listener) {
        const listeners = this.listeners(method);
        for (let i = 0; i < listeners.length; i++) {
          if (listeners[i]._listener)
            this.removeListener(method, listeners[i]);
        }
        this.addEventListener(method, listener);
      }
    });
  });
  WebSocket.prototype.addEventListener = addEventListener;
  WebSocket.prototype.removeEventListener = removeEventListener;
  module3.exports = WebSocket;
  function initAsClient(websocket, address, protocols, options) {
    const opts = {
      protocolVersion: protocolVersions[1],
      maxPayload: 100 * 1024 * 1024,
      perMessageDeflate: true,
      followRedirects: false,
      maxRedirects: 10,
      ...options,
      createConnection: void 0,
      socketPath: void 0,
      hostname: void 0,
      protocol: void 0,
      timeout: void 0,
      method: void 0,
      host: void 0,
      path: void 0,
      port: void 0
    };
    if (!protocolVersions.includes(opts.protocolVersion)) {
      throw new RangeError(`Unsupported protocol version: ${opts.protocolVersion} (supported versions: ${protocolVersions.join(", ")})`);
    }
    let parsedUrl;
    if (address instanceof URL2) {
      parsedUrl = address;
      websocket.url = address.href;
    } else {
      parsedUrl = new URL2(address);
      websocket.url = address;
    }
    const isUnixSocket = parsedUrl.protocol === "ws+unix:";
    if (!parsedUrl.host && (!isUnixSocket || !parsedUrl.pathname)) {
      throw new Error(`Invalid URL: ${websocket.url}`);
    }
    const isSecure = parsedUrl.protocol === "wss:" || parsedUrl.protocol === "https:";
    const defaultPort = isSecure ? 443 : 80;
    const key = randomBytes(16).toString("base64");
    const get = isSecure ? https.get : http.get;
    let perMessageDeflate;
    opts.createConnection = isSecure ? tlsConnect : netConnect;
    opts.defaultPort = opts.defaultPort || defaultPort;
    opts.port = parsedUrl.port || defaultPort;
    opts.host = parsedUrl.hostname.startsWith("[") ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;
    opts.headers = {
      "Sec-WebSocket-Version": opts.protocolVersion,
      "Sec-WebSocket-Key": key,
      Connection: "Upgrade",
      Upgrade: "websocket",
      ...opts.headers
    };
    opts.path = parsedUrl.pathname + parsedUrl.search;
    opts.timeout = opts.handshakeTimeout;
    if (opts.perMessageDeflate) {
      perMessageDeflate = new PerMessageDeflate(opts.perMessageDeflate !== true ? opts.perMessageDeflate : {}, false, opts.maxPayload);
      opts.headers["Sec-WebSocket-Extensions"] = format11({
        [PerMessageDeflate.extensionName]: perMessageDeflate.offer()
      });
    }
    if (protocols) {
      opts.headers["Sec-WebSocket-Protocol"] = protocols;
    }
    if (opts.origin) {
      if (opts.protocolVersion < 13) {
        opts.headers["Sec-WebSocket-Origin"] = opts.origin;
      } else {
        opts.headers.Origin = opts.origin;
      }
    }
    if (parsedUrl.username || parsedUrl.password) {
      opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;
    }
    if (isUnixSocket) {
      const parts = opts.path.split(":");
      opts.socketPath = parts[0];
      opts.path = parts[1];
    }
    let req = websocket._req = get(opts);
    if (opts.timeout) {
      req.on("timeout", () => {
        abortHandshake(websocket, req, "Opening handshake has timed out");
      });
    }
    req.on("error", (err) => {
      if (websocket._req.aborted)
        return;
      req = websocket._req = null;
      websocket.readyState = WebSocket.CLOSING;
      websocket.emit("error", err);
      websocket.emitClose();
    });
    req.on("response", (res) => {
      const location = res.headers.location;
      const statusCode = res.statusCode;
      if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {
        if (++websocket._redirects > opts.maxRedirects) {
          abortHandshake(websocket, req, "Maximum redirects exceeded");
          return;
        }
        req.abort();
        const addr = new URL2(location, address);
        initAsClient(websocket, addr, protocols, options);
      } else if (!websocket.emit("unexpected-response", req, res)) {
        abortHandshake(websocket, req, `Unexpected server response: ${res.statusCode}`);
      }
    });
    req.on("upgrade", (res, socket, head) => {
      websocket.emit("upgrade", res);
      if (websocket.readyState !== WebSocket.CONNECTING)
        return;
      req = websocket._req = null;
      const digest = createHash("sha1").update(key + GUID).digest("base64");
      if (res.headers["sec-websocket-accept"] !== digest) {
        abortHandshake(websocket, socket, "Invalid Sec-WebSocket-Accept header");
        return;
      }
      const serverProt = res.headers["sec-websocket-protocol"];
      const protList = (protocols || "").split(/, */);
      let protError;
      if (!protocols && serverProt) {
        protError = "Server sent a subprotocol but none was requested";
      } else if (protocols && !serverProt) {
        protError = "Server sent no subprotocol";
      } else if (serverProt && !protList.includes(serverProt)) {
        protError = "Server sent an invalid subprotocol";
      }
      if (protError) {
        abortHandshake(websocket, socket, protError);
        return;
      }
      if (serverProt)
        websocket.protocol = serverProt;
      if (perMessageDeflate) {
        try {
          const extensions = parse(res.headers["sec-websocket-extensions"]);
          if (extensions[PerMessageDeflate.extensionName]) {
            perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);
            websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
          }
        } catch (err) {
          abortHandshake(websocket, socket, "Invalid Sec-WebSocket-Extensions header");
          return;
        }
      }
      websocket.setSocket(socket, head, opts.maxPayload);
    });
  }
  function netConnect(options) {
    options.path = options.socketPath;
    return net.connect(options);
  }
  function tlsConnect(options) {
    options.path = void 0;
    if (!options.servername && options.servername !== "") {
      options.servername = options.host;
    }
    return tls.connect(options);
  }
  function abortHandshake(websocket, stream, message) {
    websocket.readyState = WebSocket.CLOSING;
    const err = new Error(message);
    Error.captureStackTrace(err, abortHandshake);
    if (stream.setHeader) {
      stream.abort();
      stream.once("abort", websocket.emitClose.bind(websocket));
      websocket.emit("error", err);
    } else {
      stream.destroy(err);
      stream.once("error", websocket.emit.bind(websocket, "error"));
      stream.once("close", websocket.emitClose.bind(websocket));
    }
  }
  function sendAfterClose(websocket, data, cb) {
    if (data) {
      const length = toBuffer(data).length;
      if (websocket._socket)
        websocket._sender._bufferedBytes += length;
      else
        websocket._bufferedAmount += length;
    }
    if (cb) {
      const err = new Error(`WebSocket is not open: readyState ${websocket.readyState} (${readyStates[websocket.readyState]})`);
      cb(err);
    }
  }
  function receiverOnConclude(code, reason) {
    const websocket = this[kWebSocket];
    websocket._socket.removeListener("data", socketOnData);
    websocket._socket.resume();
    websocket._closeFrameReceived = true;
    websocket._closeMessage = reason;
    websocket._closeCode = code;
    if (code === 1005)
      websocket.close();
    else
      websocket.close(code, reason);
  }
  function receiverOnDrain() {
    this[kWebSocket]._socket.resume();
  }
  function receiverOnError(err) {
    const websocket = this[kWebSocket];
    websocket._socket.removeListener("data", socketOnData);
    websocket.readyState = WebSocket.CLOSING;
    websocket._closeCode = err[kStatusCode];
    websocket.emit("error", err);
    websocket._socket.destroy();
  }
  function receiverOnFinish() {
    this[kWebSocket].emitClose();
  }
  function receiverOnMessage(data) {
    this[kWebSocket].emit("message", data);
  }
  function receiverOnPing(data) {
    const websocket = this[kWebSocket];
    websocket.pong(data, !websocket._isServer, NOOP);
    websocket.emit("ping", data);
  }
  function receiverOnPong(data) {
    this[kWebSocket].emit("pong", data);
  }
  function socketOnClose() {
    const websocket = this[kWebSocket];
    this.removeListener("close", socketOnClose);
    this.removeListener("end", socketOnEnd);
    websocket.readyState = WebSocket.CLOSING;
    websocket._socket.read();
    websocket._receiver.end();
    this.removeListener("data", socketOnData);
    this[kWebSocket] = void 0;
    clearTimeout(websocket._closeTimer);
    if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {
      websocket.emitClose();
    } else {
      websocket._receiver.on("error", receiverOnFinish);
      websocket._receiver.on("finish", receiverOnFinish);
    }
  }
  function socketOnData(chunk) {
    if (!this[kWebSocket]._receiver.write(chunk)) {
      this.pause();
    }
  }
  function socketOnEnd() {
    const websocket = this[kWebSocket];
    websocket.readyState = WebSocket.CLOSING;
    websocket._receiver.end();
    this.end();
  }
  function socketOnError() {
    const websocket = this[kWebSocket];
    this.removeListener("error", socketOnError);
    this.on("error", NOOP);
    if (websocket) {
      websocket.readyState = WebSocket.CLOSING;
      this.destroy();
    }
  }
});

// ../../node_modules/.pnpm/ws@7.3.1/node_modules/ws/lib/stream.js
var require_stream8 = __commonJS((exports2, module3) => {
  "use strict";
  const {Duplex} = require("stream");
  function emitClose(stream) {
    stream.emit("close");
  }
  function duplexOnEnd() {
    if (!this.destroyed && this._writableState.finished) {
      this.destroy();
    }
  }
  function duplexOnError(err) {
    this.removeListener("error", duplexOnError);
    this.destroy();
    if (this.listenerCount("error") === 0) {
      this.emit("error", err);
    }
  }
  function createWebSocketStream(ws, options) {
    let resumeOnReceiverDrain = true;
    function receiverOnDrain() {
      if (resumeOnReceiverDrain)
        ws._socket.resume();
    }
    if (ws.readyState === ws.CONNECTING) {
      ws.once("open", function open3() {
        ws._receiver.removeAllListeners("drain");
        ws._receiver.on("drain", receiverOnDrain);
      });
    } else {
      ws._receiver.removeAllListeners("drain");
      ws._receiver.on("drain", receiverOnDrain);
    }
    const duplex = new Duplex({
      ...options,
      autoDestroy: false,
      emitClose: false,
      objectMode: false,
      writableObjectMode: false
    });
    ws.on("message", function message(msg) {
      if (!duplex.push(msg)) {
        resumeOnReceiverDrain = false;
        ws._socket.pause();
      }
    });
    ws.once("error", function error(err) {
      if (duplex.destroyed)
        return;
      duplex.destroy(err);
    });
    ws.once("close", function close() {
      if (duplex.destroyed)
        return;
      duplex.push(null);
    });
    duplex._destroy = function(err, callback) {
      if (ws.readyState === ws.CLOSED) {
        callback(err);
        process.nextTick(emitClose, duplex);
        return;
      }
      let called = false;
      ws.once("error", function error(err2) {
        called = true;
        callback(err2);
      });
      ws.once("close", function close() {
        if (!called)
          callback(err);
        process.nextTick(emitClose, duplex);
      });
      ws.terminate();
    };
    duplex._final = function(callback) {
      if (ws.readyState === ws.CONNECTING) {
        ws.once("open", function open3() {
          duplex._final(callback);
        });
        return;
      }
      if (ws._socket === null)
        return;
      if (ws._socket._writableState.finished) {
        callback();
        if (duplex._readableState.endEmitted)
          duplex.destroy();
      } else {
        ws._socket.once("finish", function finish() {
          callback();
        });
        ws.close();
      }
    };
    duplex._read = function() {
      if (ws.readyState === ws.OPEN && !resumeOnReceiverDrain) {
        resumeOnReceiverDrain = true;
        if (!ws._receiver._writableState.needDrain)
          ws._socket.resume();
      }
    };
    duplex._write = function(chunk, encoding, callback) {
      if (ws.readyState === ws.CONNECTING) {
        ws.once("open", function open3() {
          duplex._write(chunk, encoding, callback);
        });
        return;
      }
      ws.send(chunk, callback);
    };
    duplex.on("end", duplexOnEnd);
    duplex.on("error", duplexOnError);
    return duplex;
  }
  module3.exports = createWebSocketStream;
});

// ../../node_modules/.pnpm/ws@7.3.1/node_modules/ws/lib/websocket-server.js
var require_websocket_server = __commonJS((exports2, module3) => {
  "use strict";
  const EventEmitter = require("events");
  const {createHash} = require("crypto");
  const {createServer, STATUS_CODES} = require("http");
  const PerMessageDeflate = require_permessage_deflate();
  const WebSocket = require_websocket();
  const {format: format11, parse} = require_extension();
  const {GUID, kWebSocket} = require_constants6();
  const keyRegex = /^[+/0-9A-Za-z]{22}==$/;
  class WebSocketServer extends EventEmitter {
    constructor(options, callback) {
      super();
      options = {
        maxPayload: 100 * 1024 * 1024,
        perMessageDeflate: false,
        handleProtocols: null,
        clientTracking: true,
        verifyClient: null,
        noServer: false,
        backlog: null,
        server: null,
        host: null,
        path: null,
        port: null,
        ...options
      };
      if (options.port == null && !options.server && !options.noServer) {
        throw new TypeError('One of the "port", "server", or "noServer" options must be specified');
      }
      if (options.port != null) {
        this._server = createServer((req, res) => {
          const body = STATUS_CODES[426];
          res.writeHead(426, {
            "Content-Length": body.length,
            "Content-Type": "text/plain"
          });
          res.end(body);
        });
        this._server.listen(options.port, options.host, options.backlog, callback);
      } else if (options.server) {
        this._server = options.server;
      }
      if (this._server) {
        this._removeListeners = addListeners(this._server, {
          listening: this.emit.bind(this, "listening"),
          error: this.emit.bind(this, "error"),
          upgrade: (req, socket, head) => {
            this.handleUpgrade(req, socket, head, (ws) => {
              this.emit("connection", ws, req);
            });
          }
        });
      }
      if (options.perMessageDeflate === true)
        options.perMessageDeflate = {};
      if (options.clientTracking)
        this.clients = new Set();
      this.options = options;
    }
    address() {
      if (this.options.noServer) {
        throw new Error('The server is operating in "noServer" mode');
      }
      if (!this._server)
        return null;
      return this._server.address();
    }
    close(cb) {
      if (cb)
        this.once("close", cb);
      if (this.clients) {
        for (const client of this.clients)
          client.terminate();
      }
      const server = this._server;
      if (server) {
        this._removeListeners();
        this._removeListeners = this._server = null;
        if (this.options.port != null) {
          server.close(() => this.emit("close"));
          return;
        }
      }
      process.nextTick(emitClose, this);
    }
    shouldHandle(req) {
      if (this.options.path) {
        const index = req.url.indexOf("?");
        const pathname = index !== -1 ? req.url.slice(0, index) : req.url;
        if (pathname !== this.options.path)
          return false;
      }
      return true;
    }
    handleUpgrade(req, socket, head, cb) {
      socket.on("error", socketOnError);
      const key = req.headers["sec-websocket-key"] !== void 0 ? req.headers["sec-websocket-key"].trim() : false;
      const version = +req.headers["sec-websocket-version"];
      const extensions = {};
      if (req.method !== "GET" || req.headers.upgrade.toLowerCase() !== "websocket" || !key || !keyRegex.test(key) || version !== 8 && version !== 13 || !this.shouldHandle(req)) {
        return abortHandshake(socket, 400);
      }
      if (this.options.perMessageDeflate) {
        const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);
        try {
          const offers = parse(req.headers["sec-websocket-extensions"]);
          if (offers[PerMessageDeflate.extensionName]) {
            perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);
            extensions[PerMessageDeflate.extensionName] = perMessageDeflate;
          }
        } catch (err) {
          return abortHandshake(socket, 400);
        }
      }
      if (this.options.verifyClient) {
        const info = {
          origin: req.headers[`${version === 8 ? "sec-websocket-origin" : "origin"}`],
          secure: !!(req.connection.authorized || req.connection.encrypted),
          req
        };
        if (this.options.verifyClient.length === 2) {
          this.options.verifyClient(info, (verified, code, message, headers) => {
            if (!verified) {
              return abortHandshake(socket, code || 401, message, headers);
            }
            this.completeUpgrade(key, extensions, req, socket, head, cb);
          });
          return;
        }
        if (!this.options.verifyClient(info))
          return abortHandshake(socket, 401);
      }
      this.completeUpgrade(key, extensions, req, socket, head, cb);
    }
    completeUpgrade(key, extensions, req, socket, head, cb) {
      if (!socket.readable || !socket.writable)
        return socket.destroy();
      if (socket[kWebSocket]) {
        throw new Error("server.handleUpgrade() was called more than once with the same socket, possibly due to a misconfiguration");
      }
      const digest = createHash("sha1").update(key + GUID).digest("base64");
      const headers = [
        "HTTP/1.1 101 Switching Protocols",
        "Upgrade: websocket",
        "Connection: Upgrade",
        `Sec-WebSocket-Accept: ${digest}`
      ];
      const ws = new WebSocket(null);
      let protocol = req.headers["sec-websocket-protocol"];
      if (protocol) {
        protocol = protocol.trim().split(/ *, */);
        if (this.options.handleProtocols) {
          protocol = this.options.handleProtocols(protocol, req);
        } else {
          protocol = protocol[0];
        }
        if (protocol) {
          headers.push(`Sec-WebSocket-Protocol: ${protocol}`);
          ws.protocol = protocol;
        }
      }
      if (extensions[PerMessageDeflate.extensionName]) {
        const params = extensions[PerMessageDeflate.extensionName].params;
        const value = format11({
          [PerMessageDeflate.extensionName]: [params]
        });
        headers.push(`Sec-WebSocket-Extensions: ${value}`);
        ws._extensions = extensions;
      }
      this.emit("headers", headers, req);
      socket.write(headers.concat("\r\n").join("\r\n"));
      socket.removeListener("error", socketOnError);
      ws.setSocket(socket, head, this.options.maxPayload);
      if (this.clients) {
        this.clients.add(ws);
        ws.on("close", () => this.clients.delete(ws));
      }
      cb(ws);
    }
  }
  module3.exports = WebSocketServer;
  function addListeners(server, map) {
    for (const event of Object.keys(map))
      server.on(event, map[event]);
    return function removeListeners() {
      for (const event of Object.keys(map)) {
        server.removeListener(event, map[event]);
      }
    };
  }
  function emitClose(server) {
    server.emit("close");
  }
  function socketOnError() {
    this.destroy();
  }
  function abortHandshake(socket, code, message, headers) {
    if (socket.writable) {
      message = message || STATUS_CODES[code];
      headers = {
        Connection: "close",
        "Content-Type": "text/html",
        "Content-Length": Buffer.byteLength(message),
        ...headers
      };
      socket.write(`HTTP/1.1 ${code} ${STATUS_CODES[code]}\r
` + Object.keys(headers).map((h) => `${h}: ${headers[h]}`).join("\r\n") + "\r\n\r\n" + message);
    }
    socket.removeListener("error", socketOnError);
    socket.destroy();
  }
});

// ../../node_modules/.pnpm/ws@7.3.1/node_modules/ws/index.js
var require_ws = __commonJS((exports2, module3) => {
  "use strict";
  const WebSocket = require_websocket();
  WebSocket.createWebSocketStream = require_stream8();
  WebSocket.Server = require_websocket_server();
  WebSocket.Receiver = require_receiver();
  WebSocket.Sender = require_sender();
  module3.exports = WebSocket;
});

// ../../node_modules/.pnpm/@prisma/studio-server@0.304.0/node_modules/@prisma/studio-server/build/utils/debug.js
var require_debug2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const debug_1 = require_src2();
  const debug3 = debug_1.default("@prisma/studio-server");
  exports2.default = debug3;
});

// ../../node_modules/.pnpm/@prisma/studio-server@0.304.0/node_modules/@prisma/studio-server/build/services/ExpressService.js
var require_ExpressService = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const express = require_express3();
  const WebSocket = require_ws();
  const Sentry = require_dist20();
  const debug_1 = require_debug2();
  class ExpressService {
    constructor() {
      this.init = (options) => {
        return new Promise(async (resolve, reject) => {
          const expressApp = express();
          expressApp.use(function(req, res, next) {
            if (req.url === "/") {
              req.url = "/server.html";
            }
            res.setHeader("Connection", "close");
            next();
          });
          let staticAssetDir = options.staticAssetDir;
          if (!staticAssetDir) {
            try {
              staticAssetDir = eval(`require('path').dirname(require.resolve('@prisma/studio/build/index.html'))`);
            } catch (e) {
              reject(new Error("Could not resolve `staticAssetDir` for Studio Server"));
            }
          }
          expressApp.use(express.static(staticAssetDir, {
            etag: false,
            setHeaders: (res) => {
              res.set("Cache-Control", "no-cache");
              res.set("Last-Modified", new Date().toUTCString());
            }
          }));
          this.httpServer = await new Promise((r) => r(expressApp.listen(options.port)));
          debug_1.default(`Studio server is up at http://localhost:${options.port}/`);
          this.wsServer = new WebSocket.Server({server: this.httpServer});
          this.wsServer.on("connection", function connection(ws) {
            ws.on("message", (msg) => options.callback(ws, msg));
          });
          resolve();
        });
      };
      this.send = (ws, response) => {
        if (ws.readyState === ws.OPEN) {
          return ws.send(JSON.stringify(response));
        }
        debug_1.default(`Failed to respond to Websocket request: Websocket readyState is ${this.ws.readyState}`);
      };
      this.destroy = async () => {
        try {
          if (this.httpServer) {
            this.httpServer.close();
          }
          if (this.wsServer) {
            this.wsServer.close();
          }
          this.ws = null;
          this.httpServer = null;
          this.wsServer = null;
        } catch (e) {
          Sentry.captureException(e);
        }
      };
    }
  }
  exports2.default = new ExpressService();
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/pick.js
var require_pick2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.pick = void 0;
  function pick2(obj, keys) {
    return Object.entries(obj).reduce((acc, [key, value]) => {
      if (keys.includes(key)) {
        acc[key] = value;
      }
      return acc;
    }, {});
  }
  exports2.pick = pick2;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/keyBy.js
var require_keyBy2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.keyBy = void 0;
  exports2.keyBy = (collection, iteratee) => {
    return collection.reduce((acc, curr) => {
      acc[iteratee(curr)] = curr;
      return acc;
    }, {});
  };
});

// ../../node_modules/.pnpm/@prisma/get-platform@2.11.0-dev.28/node_modules/@prisma/get-platform/dist/getPlatform.js
var require_getPlatform2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getPlatform = exports2.getOpenSSLVersion = exports2.parseOpenSSLVersion = exports2.resolveDistro = exports2.parseDistro = exports2.getos = void 0;
  const os_1 = __importDefault(require("os"));
  const fs_1 = __importDefault(require("fs"));
  const util_1 = require("util");
  const child_process_1 = require("child_process");
  const readFile2 = util_1.promisify(fs_1.default.readFile);
  const exists = util_1.promisify(fs_1.default.exists);
  async function getos() {
    const platform = os_1.default.platform();
    if (platform === "freebsd") {
      const version = await gracefulExec(`freebsd-version`);
      if (version && version.trim().length > 0) {
        const regex = /^(\d+)\.?/;
        const match = regex.exec(version);
        if (match) {
          return {
            platform: "freebsd",
            distro: `freebsd${match[1]}`
          };
        }
      }
    }
    if (platform !== "linux") {
      return {
        platform
      };
    }
    return {
      platform: "linux",
      libssl: await getOpenSSLVersion(),
      distro: await resolveDistro()
    };
  }
  exports2.getos = getos;
  function parseDistro(input) {
    const idRegex = /^ID="?([^"\n]*)"?$/im;
    const idLikeRegex = /^ID_LIKE="?([^"\n]*)"?$/im;
    const idMatch = idRegex.exec(input);
    const id = idMatch && idMatch[1] && idMatch[1].toLowerCase() || "";
    const idLikeMatch = idLikeRegex.exec(input);
    const idLike = idLikeMatch && idLikeMatch[1] && idLikeMatch[1].toLowerCase() || "";
    if (id === "raspbian") {
      return "arm";
    }
    if (id === "nixos") {
      return "nixos";
    }
    if (idLike.includes("centos") || idLike.includes("fedora") || idLike.includes("rhel") || id === "fedora") {
      return "rhel";
    }
    if (idLike.includes("debian") || idLike.includes("ubuntu") || id === "debian") {
      return "debian";
    }
    return;
  }
  exports2.parseDistro = parseDistro;
  async function resolveDistro() {
    const osReleaseFile = "/etc/os-release";
    const alpineReleaseFile = "/etc/alpine-release";
    if (await exists(alpineReleaseFile)) {
      return "musl";
    } else if (await exists(osReleaseFile)) {
      return parseDistro(await readFile2(osReleaseFile, "utf-8"));
    } else {
      return;
    }
  }
  exports2.resolveDistro = resolveDistro;
  function parseOpenSSLVersion(input) {
    const match = /^OpenSSL\s(\d+\.\d+)\.\d+/.exec(input);
    if (match) {
      return match[1] + ".x";
    }
    return;
  }
  exports2.parseOpenSSLVersion = parseOpenSSLVersion;
  async function getOpenSSLVersion() {
    const [version, ls] = await Promise.all([
      gracefulExec(`openssl version -v`),
      gracefulExec(`
      ls -l /lib64 | grep ssl;
      ls -l /usr/lib64 | grep ssl;
    `)
    ]);
    if (version) {
      const v = parseOpenSSLVersion(version);
      if (v) {
        return v;
      }
    }
    if (ls) {
      const match = /libssl\.so\.(\d+\.\d+)\.\d+/.exec(ls);
      if (match) {
        return match[1] + ".x";
      }
    }
    return void 0;
  }
  exports2.getOpenSSLVersion = getOpenSSLVersion;
  async function gracefulExec(cmd) {
    return new Promise((resolve) => {
      try {
        child_process_1.exec(cmd, (err, stdout) => {
          resolve(String(stdout));
        });
      } catch (e) {
        resolve(void 0);
        return void 0;
      }
    });
  }
  async function getPlatform3() {
    const {platform, libssl, distro} = await getos();
    if (platform === "darwin") {
      return "darwin";
    }
    if (platform === "win32") {
      return "windows";
    }
    if (platform === "freebsd") {
      return distro;
    }
    if (platform === "openbsd") {
      return "openbsd";
    }
    if (platform === "netbsd") {
      return "netbsd";
    }
    if (platform === "linux" && distro === "nixos") {
      return "linux-nixos";
    }
    if (platform === "linux" && distro === "musl") {
      return "linux-musl";
    }
    if (platform === "linux" && distro && libssl) {
      return distro + "-openssl-" + libssl;
    }
    if (libssl) {
      return "debian-openssl-" + libssl;
    }
    if (distro) {
      return distro + "-openssl-1.1.x";
    }
    return "debian-openssl-1.1.x";
  }
  exports2.getPlatform = getPlatform3;
});

// ../../node_modules/.pnpm/@prisma/get-platform@2.11.0-dev.28/node_modules/@prisma/get-platform/dist/platforms.js
var require_platforms2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.mayBeCompatible = exports2.platforms = void 0;
  exports2.platforms = [
    "darwin",
    "debian-openssl-1.0.x",
    "debian-openssl-1.1.x",
    "rhel-openssl-1.0.x",
    "rhel-openssl-1.1.x",
    "linux-musl",
    "linux-nixos",
    "windows",
    "freebsd11",
    "freebsd12",
    "openbsd",
    "netbsd",
    "arm"
  ];
  function mayBeCompatible(platformA, platformB) {
    if (platformA.startsWith("freebsd") || platformB.startsWith("freebsd")) {
      return false;
    }
    if (platformA === "native" || platformB === "native") {
      return true;
    }
    if (platformA === "darwin" || platformB === "darwin") {
      return false;
    }
    if (platformA === "windows" || platformB === "windows") {
      return false;
    }
    return true;
  }
  exports2.mayBeCompatible = mayBeCompatible;
});

// ../../node_modules/.pnpm/@prisma/get-platform@2.11.0-dev.28/node_modules/@prisma/get-platform/dist/index.js
var require_dist21 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.platforms = exports2.mayBeCompatible = exports2.getos = exports2.getPlatform = void 0;
  var getPlatform_1 = require_getPlatform2();
  Object.defineProperty(exports2, "getPlatform", {enumerable: true, get: function() {
    return getPlatform_1.getPlatform;
  }});
  Object.defineProperty(exports2, "getos", {enumerable: true, get: function() {
    return getPlatform_1.getos;
  }});
  var platforms_1 = require_platforms2();
  Object.defineProperty(exports2, "mayBeCompatible", {enumerable: true, get: function() {
    return platforms_1.mayBeCompatible;
  }});
  var platforms_2 = require_platforms2();
  Object.defineProperty(exports2, "platforms", {enumerable: true, get: function() {
    return platforms_2.platforms;
  }});
});

// ../../node_modules/.pnpm/@prisma/debug@2.11.0-dev.28/node_modules/@prisma/debug/dist/index.js
var require_dist22 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getLogs = void 0;
  const debug_1 = __importDefault(require_src2());
  const cache = [];
  const MAX_LOGS = 100;
  const namespaces = [];
  const enabledNamespaces = new Map();
  const envDebug = process.env.DEBUG ? process.env.DEBUG + "," : "";
  const skips = debug_1.default.skips.slice();
  const names = debug_1.default.names.slice();
  function isEnabledByEnvVar(name) {
    if (name[name.length - 1] === "*") {
      return true;
    }
    for (const skip of skips) {
      if (skip.test(name)) {
        return false;
      }
    }
    for (const nameRegex of names) {
      if (nameRegex.test(name)) {
        return true;
      }
    }
    return false;
  }
  function Debug(namespace) {
    const debug3 = debug_1.default(namespace);
    namespaces.push(namespace);
    debug_1.default.enable(envDebug + namespaces.join(","));
    process.env.DEBUG = envDebug;
    if (isEnabledByEnvVar(namespace)) {
      enabledNamespaces.set(namespace, true);
    }
    const newDebug = (formatter, ...args2) => {
      return debug3(formatter, ...args2);
    };
    newDebug.log = console.error.bind(console);
    newDebug.color = debug3.color;
    newDebug.namespace = debug3.namespace;
    newDebug.enabled = debug3.enabled;
    newDebug.destroy = debug3.destroy;
    newDebug.extend = debug3.extend;
    debug3.log = (...args2) => {
      cache.push(args2);
      if (cache.length > MAX_LOGS) {
        cache.shift();
      }
      if (enabledNamespaces.has(namespace)) {
        newDebug.log(...args2);
      }
    };
    return newDebug;
  }
  exports2.default = Debug;
  Debug.enable = (namespace) => {
    enabledNamespaces.set(namespace, true);
  };
  Debug.enabled = (namespace) => enabledNamespaces.has(namespace);
  function getLogs(numChars = 7500) {
    let output = cache.map((c) => c.join("  ")).join("\n");
    if (output.length < numChars) {
      return output;
    }
    return output.slice(-numChars);
  }
  exports2.getLogs = getLogs;
});

// ../../node_modules/.pnpm/@prisma/engine-core@2.11.0-dev.28/node_modules/@prisma/engine-core/dist/util.js
var require_util10 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getRandomString = exports2.getGithubIssueUrl = exports2.link = exports2.fixBinaryTargets = exports2.plusX = void 0;
  const fs_1 = __importDefault(require("fs"));
  const terminal_link_1 = __importDefault(require_terminal_link());
  const new_github_issue_url_1 = __importDefault(require_new_github_issue_url());
  const chalk_1 = __importDefault(require_source());
  const debug_1 = __importDefault(require_dist22());
  const crypto_1 = __importDefault(require("crypto"));
  const debug3 = debug_1.default("plusX");
  function plusX(file) {
    const s = fs_1.default.statSync(file);
    const newMode = s.mode | 64 | 8 | 1;
    if (s.mode === newMode) {
      debug3(`Execution permissions of ${file} are fine`);
      return;
    }
    const base8 = newMode.toString(8).slice(-3);
    debug3(`Have to call plusX on ${file}`);
    fs_1.default.chmodSync(file, base8);
  }
  exports2.plusX = plusX;
  function fixBinaryTargets(platforms, platform) {
    platforms = platforms || [];
    if (!platforms.includes("native")) {
      return ["native", ...platforms];
    }
    return [...platforms, platform];
  }
  exports2.fixBinaryTargets = fixBinaryTargets;
  function link5(url) {
    return terminal_link_1.default(url, url, {
      fallback: (url2) => chalk_1.default.underline(url2)
    });
  }
  exports2.link = link5;
  function getGithubIssueUrl({title, user = "prisma", repo = "prisma-client-js", template = "bug_report.md", body}) {
    return new_github_issue_url_1.default({
      user,
      repo,
      template,
      title,
      body
    });
  }
  exports2.getGithubIssueUrl = getGithubIssueUrl;
  function getRandomString() {
    return crypto_1.default.randomBytes(12).toString("hex");
  }
  exports2.getRandomString = getRandomString;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/resolveBinary.js
var require_resolveBinary2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.maybeCopyToTmp = exports2.resolveBinary = void 0;
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const temp_dir_1 = __importDefault(require_temp_dir());
  const make_dir_1 = __importDefault(require_make_dir());
  const util_1 = require("util");
  const get_platform_1 = require_dist21();
  const util_2 = require_util10();
  const engines_1 = require("@prisma/engines");
  const readFile2 = util_1.promisify(fs_1.default.readFile);
  const writeFile = util_1.promisify(fs_1.default.writeFile);
  const engineEnvVarMap = {
    "query-engine": "PRISMA_QUERY_ENGINE_BINARY",
    "migration-engine": "PRISMA_MIGRATION_ENGINE_BINARY",
    "introspection-engine": "PRISMA_INTROSPECTION_ENGINE_BINARY",
    "prisma-fmt": "PRISMA_FMT_BINARY"
  };
  async function resolveBinary2(name, proposedPath) {
    if (proposedPath && !proposedPath.startsWith("/snapshot/") && fs_1.default.existsSync(proposedPath)) {
      return proposedPath;
    }
    const envVar = engineEnvVarMap[name];
    if (process.env[envVar]) {
      if (!fs_1.default.existsSync(process.env[envVar])) {
        throw new Error(`Env var ${envVar} is provided, but provided path ${process.env[envVar]} can't be resolved.`);
      }
      return process.env[envVar];
    }
    const dir = eval("__dirname");
    const platform = await get_platform_1.getPlatform();
    const extension = platform === "windows" ? ".exe" : "";
    const binaryName = `${name}-${platform}${extension}`;
    let prismaPath = path_1.default.join(engines_1.getEnginesPath(), binaryName);
    if (fs_1.default.existsSync(prismaPath)) {
      return maybeCopyToTmp(prismaPath);
    }
    prismaPath = path_1.default.join(__dirname, "..", binaryName);
    if (fs_1.default.existsSync(prismaPath)) {
      return maybeCopyToTmp(prismaPath);
    }
    prismaPath = path_1.default.join(__dirname, "../..", binaryName);
    if (fs_1.default.existsSync(prismaPath)) {
      return maybeCopyToTmp(prismaPath);
    }
    prismaPath = path_1.default.join(__dirname, "../runtime", binaryName);
    if (fs_1.default.existsSync(prismaPath)) {
      return maybeCopyToTmp(prismaPath);
    }
    throw new Error(`Could not find ${name} binary. Searched in ${path_1.default.join(dir, "..", binaryName)} and ${path_1.default.join(dir, "../..", binaryName)}`);
  }
  exports2.resolveBinary = resolveBinary2;
  async function maybeCopyToTmp(file) {
    const dir = eval("__dirname");
    if (dir.startsWith("/snapshot/")) {
      const targetDir = path_1.default.join(temp_dir_1.default, "prisma-binaries");
      await make_dir_1.default(targetDir);
      const target = path_1.default.join(targetDir, path_1.default.basename(file));
      const data = await readFile2(file);
      await writeFile(target, data);
      util_2.plusX(target);
      return target;
    }
    return file;
  }
  exports2.maybeCopyToTmp = maybeCopyToTmp;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/highlight/theme.js
var require_theme2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.theme = exports2.identity = exports2.brightBlue = exports2.blue = exports2.darkBrightBlue = exports2.gamboge = void 0;
  const chalk_1 = __importDefault(require_source());
  exports2.gamboge = chalk_1.default.rgb(228, 155, 15);
  exports2.darkBrightBlue = chalk_1.default.rgb(107, 139, 140);
  exports2.blue = chalk_1.default.cyan;
  exports2.brightBlue = chalk_1.default.rgb(127, 155, 175);
  exports2.identity = (str) => str || "";
  exports2.theme = {
    keyword: exports2.blue,
    entity: exports2.blue,
    value: exports2.brightBlue,
    punctuation: exports2.darkBrightBlue,
    directive: exports2.blue,
    function: exports2.blue,
    variable: exports2.brightBlue,
    string: exports2.brightBlue,
    boolean: exports2.gamboge,
    comment: chalk_1.default.dim
  };
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/highlight/prism.js
var require_prism2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.Token = exports2.Prism = void 0;
  const theme_1 = require_theme2();
  const _self = {};
  let uniqueId = 0;
  exports2.Prism = {
    manual: _self.Prism && _self.Prism.manual,
    disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,
    util: {
      encode: function(tokens) {
        if (tokens instanceof Token) {
          const anyTokens = tokens;
          return new Token(anyTokens.type, exports2.Prism.util.encode(anyTokens.content), anyTokens.alias);
        } else if (Array.isArray(tokens)) {
          return tokens.map(exports2.Prism.util.encode);
        } else {
          return tokens.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
        }
      },
      type: function(o) {
        return Object.prototype.toString.call(o).slice(8, -1);
      },
      objId: function(obj) {
        if (!obj["__id"]) {
          Object.defineProperty(obj, "__id", {value: ++uniqueId});
        }
        return obj["__id"];
      },
      clone: function deepClone(o, visited) {
        visited = visited || {};
        let clone, id;
        const type = exports2.Prism.util.type(o);
        switch (type) {
          case "Object":
            id = exports2.Prism.util.objId(o);
            if (visited[id]) {
              return visited[id];
            }
            clone = {};
            visited[id] = clone;
            for (const key in o) {
              if (o.hasOwnProperty(key)) {
                clone[key] = deepClone(o[key], visited);
              }
            }
            return clone;
          case "Array":
            id = exports2.Prism.util.objId(o);
            if (visited[id]) {
              return visited[id];
            }
            clone = [];
            visited[id] = clone;
            o.forEach(function(v, i) {
              clone[i] = deepClone(v, visited);
            });
            return clone;
          default:
            return o;
        }
      }
    },
    languages: {
      extend: function(id, redef) {
        const lang = exports2.Prism.util.clone(exports2.Prism.languages[id]);
        for (const key in redef) {
          lang[key] = redef[key];
        }
        return lang;
      },
      insertBefore: function(inside, before, insert, root) {
        root = root || exports2.Prism.languages;
        const grammar = root[inside];
        const ret = {};
        for (const token in grammar) {
          if (grammar.hasOwnProperty(token)) {
            if (token == before) {
              for (const newToken in insert) {
                if (insert.hasOwnProperty(newToken)) {
                  ret[newToken] = insert[newToken];
                }
              }
            }
            if (!insert.hasOwnProperty(token)) {
              ret[token] = grammar[token];
            }
          }
        }
        const old = root[inside];
        root[inside] = ret;
        exports2.Prism.languages.DFS(exports2.Prism.languages, function(key, value) {
          if (value === old && key != inside) {
            this[key] = ret;
          }
        });
        return ret;
      },
      DFS: function DFS(o, callback, type, visited) {
        visited = visited || {};
        const objId = exports2.Prism.util.objId;
        for (const i in o) {
          if (o.hasOwnProperty(i)) {
            callback.call(o, i, o[i], type || i);
            const property = o[i], propertyType = exports2.Prism.util.type(property);
            if (propertyType === "Object" && !visited[objId(property)]) {
              visited[objId(property)] = true;
              DFS(property, callback, null, visited);
            } else if (propertyType === "Array" && !visited[objId(property)]) {
              visited[objId(property)] = true;
              DFS(property, callback, i, visited);
            }
          }
        }
      }
    },
    plugins: {},
    highlight: function(text, grammar, language) {
      const env = {
        code: text,
        grammar,
        language
      };
      exports2.Prism.hooks.run("before-tokenize", env);
      env.tokens = exports2.Prism.tokenize(env.code, env.grammar);
      exports2.Prism.hooks.run("after-tokenize", env);
      return Token.stringify(exports2.Prism.util.encode(env.tokens), env.language);
    },
    matchGrammar: function(text, strarr, grammar, index, startPos, oneshot, target) {
      for (const token in grammar) {
        if (!grammar.hasOwnProperty(token) || !grammar[token]) {
          continue;
        }
        if (token == target) {
          return;
        }
        let patterns = grammar[token];
        patterns = exports2.Prism.util.type(patterns) === "Array" ? patterns : [patterns];
        for (let j = 0; j < patterns.length; ++j) {
          let pattern = patterns[j], inside = pattern.inside, lookbehind = !!pattern.lookbehind, greedy = !!pattern.greedy, lookbehindLength = 0, alias = pattern.alias;
          if (greedy && !pattern.pattern.global) {
            const flags = pattern.pattern.toString().match(/[imuy]*$/)[0];
            pattern.pattern = RegExp(pattern.pattern.source, flags + "g");
          }
          pattern = pattern.pattern || pattern;
          for (let i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {
            let str = strarr[i];
            if (strarr.length > text.length) {
              return;
            }
            if (str instanceof Token) {
              continue;
            }
            if (greedy && i != strarr.length - 1) {
              pattern.lastIndex = pos;
              const match2 = pattern.exec(text);
              if (!match2) {
                break;
              }
              var from = match2.index + (lookbehind ? match2[1].length : 0), to = match2.index + match2[0].length, k = i, p = pos;
              for (let len = strarr.length; k < len && (p < to || !strarr[k].type && !strarr[k - 1].greedy); ++k) {
                p += strarr[k].length;
                if (from >= p) {
                  ++i;
                  pos = p;
                }
              }
              if (strarr[i] instanceof Token) {
                continue;
              }
              delNum = k - i;
              str = text.slice(pos, p);
              match2.index -= pos;
            } else {
              pattern.lastIndex = 0;
              var match = pattern.exec(str), delNum = 1;
            }
            if (!match) {
              if (oneshot) {
                break;
              }
              continue;
            }
            if (lookbehind) {
              lookbehindLength = match[1] ? match[1].length : 0;
            }
            var from = match.index + lookbehindLength, match = match[0].slice(lookbehindLength), to = from + match.length, before = str.slice(0, from), after = str.slice(to);
            const args2 = [i, delNum];
            if (before) {
              ++i;
              pos += before.length;
              args2.push(before);
            }
            const wrapped = new Token(token, inside ? exports2.Prism.tokenize(match, inside) : match, alias, match, greedy);
            args2.push(wrapped);
            if (after) {
              args2.push(after);
            }
            Array.prototype.splice.apply(strarr, args2);
            if (delNum != 1)
              exports2.Prism.matchGrammar(text, strarr, grammar, i, pos, true, token);
            if (oneshot)
              break;
          }
        }
      }
    },
    tokenize: function(text, grammar) {
      const strarr = [text];
      const rest = grammar.rest;
      if (rest) {
        for (const token in rest) {
          grammar[token] = rest[token];
        }
        delete grammar.rest;
      }
      exports2.Prism.matchGrammar(text, strarr, grammar, 0, 0, false);
      return strarr;
    },
    hooks: {
      all: {},
      add: function(name, callback) {
        const hooks = exports2.Prism.hooks.all;
        hooks[name] = hooks[name] || [];
        hooks[name].push(callback);
      },
      run: function(name, env) {
        const callbacks = exports2.Prism.hooks.all[name];
        if (!callbacks || !callbacks.length) {
          return;
        }
        for (var i = 0, callback; callback = callbacks[i++]; ) {
          callback(env);
        }
      }
    },
    Token
  };
  exports2.Prism.languages.clike = {
    comment: [
      {
        pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
        lookbehind: true
      },
      {
        pattern: /(^|[^\\:])\/\/.*/,
        lookbehind: true,
        greedy: true
      }
    ],
    string: {
      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    "class-name": {
      pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,
      lookbehind: true,
      inside: {
        punctuation: /[.\\]/
      }
    },
    keyword: /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
    boolean: /\b(?:true|false)\b/,
    function: /\w+(?=\()/,
    number: /\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,
    operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,
    punctuation: /[{}[\];(),.:]/
  };
  exports2.Prism.languages.javascript = exports2.Prism.languages.extend("clike", {
    "class-name": [
      exports2.Prism.languages.clike["class-name"],
      {
        pattern: /(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/,
        lookbehind: true
      }
    ],
    keyword: [
      {
        pattern: /((?:^|})\s*)(?:catch|finally)\b/,
        lookbehind: true
      },
      {
        pattern: /(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
        lookbehind: true
      }
    ],
    number: /\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,
    function: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
    operator: /-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/
  });
  exports2.Prism.languages.javascript["class-name"][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/;
  exports2.Prism.languages.insertBefore("javascript", "keyword", {
    regex: {
      pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=\s*($|[\r\n,.;})\]]))/,
      lookbehind: true,
      greedy: true
    },
    "function-variable": {
      pattern: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/,
      alias: "function"
    },
    parameter: [
      {
        pattern: /(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/,
        lookbehind: true,
        inside: exports2.Prism.languages.javascript
      },
      {
        pattern: /[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i,
        inside: exports2.Prism.languages.javascript
      },
      {
        pattern: /(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/,
        lookbehind: true,
        inside: exports2.Prism.languages.javascript
      },
      {
        pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/,
        lookbehind: true,
        inside: exports2.Prism.languages.javascript
      }
    ],
    constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/
  });
  exports2.Prism.languages.insertBefore("javascript", "string", {
    "template-string": {
      pattern: /`(?:\\[\s\S]|\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|[^\\`])*`/,
      greedy: true,
      inside: {
        interpolation: {
          pattern: /\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,
          inside: {
            "interpolation-punctuation": {
              pattern: /^\${|}$/,
              alias: "punctuation"
            },
            rest: exports2.Prism.languages.javascript
          }
        },
        string: /[\s\S]+/
      }
    }
  });
  if (exports2.Prism.languages.markup) {
    exports2.Prism.languages.markup.tag.addInlined("script", "javascript");
  }
  exports2.Prism.languages.js = exports2.Prism.languages.javascript;
  exports2.Prism.languages.typescript = exports2.Prism.languages.extend("javascript", {
    keyword: /\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\b/,
    builtin: /\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\b/
  });
  exports2.Prism.languages.ts = exports2.Prism.languages.typescript;
  function Token(type, content, alias, matchedStr, greedy) {
    this.type = type;
    this.content = content;
    this.alias = alias;
    this.length = (matchedStr || "").length | 0;
    this.greedy = !!greedy;
  }
  exports2.Token = Token;
  Token.stringify = function(o, language) {
    if (typeof o == "string") {
      return o;
    }
    if (Array.isArray(o)) {
      return o.map(function(element) {
        return Token.stringify(element, language);
      }).join("");
    }
    return getColorForSyntaxKind(o.type)(o.content);
  };
  function getColorForSyntaxKind(syntaxKind) {
    return theme_1.theme[syntaxKind] || theme_1.identity;
  }
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/highlight/languages/dml.js
var require_dml2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.dml = void 0;
  exports2.dml = {
    string: [/\"(.*)\"/g, /\'(.*)\'/g],
    directive: {pattern: /(@.*)/g},
    entity: [
      /model\s+\w+/g,
      /enum\s+\w+/g,
      /datasource\s+\w+/g,
      /source\s+\w+/g,
      /generator\s+\w+/g
    ],
    comment: /#.*/g,
    value: [/\b\s+(\w+)/g],
    punctuation: /(\:|}|{|"|=)/g,
    boolean: /(true|false)/g
  };
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/highlight/languages/sql.js
var require_sql2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.sql = void 0;
  exports2.sql = {
    comment: {
      pattern: /(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,
      lookbehind: true
    },
    variable: [
      {
        pattern: /@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,
        greedy: true
      },
      /@[\w.$]+/
    ],
    string: {
      pattern: /(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,
      greedy: true,
      lookbehind: true
    },
    function: /\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,
    keyword: /\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,
    boolean: /\b(?:TRUE|FALSE|NULL)\b/i,
    number: /\b0x[\da-f]+\b|\b\d+\.?\d*|\B\.\d+\b/i,
    operator: /[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,
    punctuation: /[;[\]()`,.]/
  };
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/highlight/highlight.js
var require_highlight2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.highlightTS = exports2.highlightSql = exports2.highlightDatamodel = void 0;
  const prism_1 = require_prism2();
  const dml_1 = require_dml2();
  const sql_1 = require_sql2();
  function highlightDatamodel(str) {
    return highlight(str, dml_1.dml);
  }
  exports2.highlightDatamodel = highlightDatamodel;
  function highlightSql(str) {
    return highlight(str, sql_1.sql);
  }
  exports2.highlightSql = highlightSql;
  function highlightTS2(str) {
    return highlight(str, prism_1.Prism.languages.javascript);
  }
  exports2.highlightTS = highlightTS2;
  function highlight(str, grammar) {
    const tokens = prism_1.Prism.tokenize(str, grammar);
    return tokens.map((t) => prism_1.Token.stringify(t)).join("");
  }
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/link.js
var require_link2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.link = void 0;
  const terminal_link_1 = __importDefault(require_terminal_link());
  const chalk_1 = __importDefault(require_source());
  function link5(url) {
    return terminal_link_1.default(url, url, {
      fallback: (url2) => chalk_1.default.underline(url2)
    });
  }
  exports2.link = link5;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/utils/missingGeneratorMessage.js
var require_missingGeneratorMessage2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.missingModelMessage = exports2.missingGeneratorMessage = void 0;
  const chalk_1 = __importDefault(require_source());
  const highlight_1 = require_highlight2();
  const link_1 = require_link2();
  exports2.missingGeneratorMessage = `
${chalk_1.default.blue("info")} You don't have any generators defined in your ${chalk_1.default.bold("schema.prisma")}, so nothing will be generated.
You can define them like this:

${chalk_1.default.bold(highlight_1.highlightDatamodel(`generator client {
  provider = "prisma-client-js"
}`))}`;
  exports2.missingModelMessage = `
You don't have any ${chalk_1.default.bold("models")} defined in your ${chalk_1.default.bold("schema.prisma")}, so nothing will be generated.
You can define a model like this:

${chalk_1.default.bold(highlight_1.highlightDatamodel(`model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}`))}

More information in our documentation:
${link_1.link("https://pris.ly/d/prisma-schema")}
`;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/utils/byline.js
var require_byline5 = __commonJS((exports2, module3) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.createLineStream = void 0;
  const stream = require("stream");
  const util4 = require("util");
  function byline(readStream, options) {
    return module3.exports.createStream(readStream, options);
  }
  exports2.default = byline;
  module3.exports.createStream = function(readStream, options) {
    if (readStream) {
      return createLineStream(readStream, options);
    } else {
      return new LineStream(options);
    }
  };
  function createLineStream(readStream, options) {
    if (!readStream) {
      throw new Error("expected readStream");
    }
    if (!readStream.readable) {
      throw new Error("readStream must be readable");
    }
    const ls = new LineStream(options);
    readStream.pipe(ls);
    return ls;
  }
  exports2.createLineStream = createLineStream;
  module3.exports.LineStream = LineStream;
  function LineStream(options) {
    stream.Transform.call(this, options);
    options = options || {};
    this._readableState.objectMode = true;
    this._lineBuffer = [];
    this._keepEmptyLines = options.keepEmptyLines || false;
    this._lastChunkEndedWithCR = false;
    this.on("pipe", function(src) {
      if (!this.encoding) {
        if (src instanceof stream.Readable) {
          this.encoding = src._readableState.encoding;
        }
      }
    });
  }
  util4.inherits(LineStream, stream.Transform);
  LineStream.prototype._transform = function(chunk, encoding, done) {
    encoding = encoding || "utf8";
    if (Buffer.isBuffer(chunk)) {
      if (encoding == "buffer") {
        chunk = chunk.toString();
        encoding = "utf8";
      } else {
        chunk = chunk.toString(encoding);
      }
    }
    this._chunkEncoding = encoding;
    const lines = chunk.split(/\r\n|\r|\n/g);
    if (this._lastChunkEndedWithCR && chunk[0] == "\n") {
      lines.shift();
    }
    if (this._lineBuffer.length > 0) {
      this._lineBuffer[this._lineBuffer.length - 1] += lines[0];
      lines.shift();
    }
    this._lastChunkEndedWithCR = chunk[chunk.length - 1] == "\r";
    this._lineBuffer = this._lineBuffer.concat(lines);
    this._pushBuffer(encoding, 1, done);
  };
  LineStream.prototype._pushBuffer = function(encoding, keep, done) {
    while (this._lineBuffer.length > keep) {
      const line = this._lineBuffer.shift();
      if (this._keepEmptyLines || line.length > 0) {
        if (!this.push(this._reencode(line, encoding))) {
          const self2 = this;
          setImmediate(function() {
            self2._pushBuffer(encoding, keep, done);
          });
          return;
        }
      }
    }
    done();
  };
  LineStream.prototype._flush = function(done) {
    this._pushBuffer(this._chunkEncoding, 0, done);
  };
  LineStream.prototype._reencode = function(line, chunkEncoding) {
    if (this.encoding && this.encoding != chunkEncoding) {
      return Buffer.from(line, chunkEncoding).toString(this.encoding);
    } else if (this.encoding) {
      return line;
    } else {
      return Buffer.from(line, chunkEncoding);
    }
  };
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/utils/now.js
var require_now3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.renderDate = exports2.timestampToDate = exports2.now = void 0;
  const prefixZero = (value) => ("0" + value).slice(-2);
  function now() {
    const now2 = new Date();
    return `${now2.getFullYear()}${prefixZero(now2.getMonth() + 1)}${prefixZero(now2.getDate())}${prefixZero(now2.getHours())}${prefixZero(now2.getMinutes())}${prefixZero(now2.getSeconds())}`;
  }
  exports2.now = now;
  function timestampToDate(timestamp) {
    if (!timestamp || timestamp.length !== 14) {
      return void 0;
    }
    const year = Number(timestamp.slice(0, 4));
    const month = Number(timestamp.slice(4, 6));
    const date = Number(timestamp.slice(6, 8));
    const hours = Number(timestamp.slice(8, 10));
    const minutes = Number(timestamp.slice(10, 12));
    const seconds = Number(timestamp.slice(12, 14));
    return new Date(year, month - 1, date, hours, minutes, seconds);
  }
  exports2.timestampToDate = timestampToDate;
  function renderDate(date) {
    if (date.getDate() !== new Date().getDate()) {
      return date.toLocaleDateString() + " " + date.toLocaleTimeString();
    }
    return date.toLocaleTimeString();
  }
  exports2.renderDate = renderDate;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/panic.js
var require_panic2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.ErrorArea = exports2.RustPanic = void 0;
  class RustPanic extends Error {
    constructor(message, rustStack, request, area, schemaPath, schema, introspectionUrl) {
      super(message);
      this.rustStack = rustStack;
      this.request = request;
      this.area = area;
      this.schemaPath = schemaPath;
      this.schema = schema;
      this.introspectionUrl = introspectionUrl;
    }
  }
  exports2.RustPanic = RustPanic;
  var ErrorArea;
  (function(ErrorArea2) {
    ErrorArea2["LIFT_CLI"] = "LIFT_CLI";
    ErrorArea2["PHOTON_STUDIO"] = "PHOTON_STUDIO";
    ErrorArea2["INTROSPECTION_CLI"] = "INTROSPECTION_CLI";
  })(ErrorArea = exports2.ErrorArea || (exports2.ErrorArea = {}));
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/IntrospectionEngine.js
var require_IntrospectionEngine2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.IntrospectionEngine = exports2.IntrospectionError = exports2.IntrospectionPanic = void 0;
  const chalk_1 = __importDefault(require_source());
  const child_process_1 = require("child_process");
  const debug_1 = __importDefault(require_dist22());
  const byline_1 = __importDefault(require_byline5());
  const debugCli = debug_1.default("IntrospectionEngine:cli");
  const debugRpc = debug_1.default("IntrospectionEngine:rpc");
  const debugStderr = debug_1.default("IntrospectionEngine:stderr");
  const debugStdin = debug_1.default("IntrospectionEngine:stdin");
  const fs_1 = __importDefault(require("fs"));
  const now_1 = require_now3();
  const panic_1 = require_panic2();
  const resolveBinary_1 = require_resolveBinary2();
  class IntrospectionPanic extends Error {
    constructor(message, rustStack, request) {
      super(message);
      this.rustStack = rustStack;
      this.request = request;
    }
  }
  exports2.IntrospectionPanic = IntrospectionPanic;
  class IntrospectionError extends Error {
    constructor(message, code) {
      super(message);
      this.code = code;
    }
  }
  exports2.IntrospectionError = IntrospectionError;
  let messageId = 1;
  class IntrospectionEngine3 {
    constructor({debug: debug3, cwd} = {
      debug: false,
      cwd: process.cwd()
    }) {
      this.listeners = {};
      this.messages = [];
      this.isRunning = false;
      if (debug3) {
        debug_1.default.enable("IntrospectionEngine*");
      }
      this.debug = Boolean(debug3);
      this.cwd = cwd || process.cwd();
    }
    stop() {
      if (this.child) {
        this.child.kill();
        this.isRunning = false;
      }
    }
    rejectAll(err) {
      Object.entries(this.listeners).map(([id, listener]) => {
        listener(null, err);
        delete this.listeners[id];
      });
    }
    registerCallback(id, callback) {
      this.listeners[id] = callback;
    }
    getDatabaseDescription(schema) {
      return this.runCommand(this.getRPCPayload("getDatabaseDescription", {schema}));
    }
    getDatabaseVersion(schema) {
      return this.runCommand(this.getRPCPayload("getDatabaseVersion", {schema}));
    }
    introspect(schema, force) {
      this.lastUrl = schema;
      return this.runCommand(this.getRPCPayload("introspect", {schema, force}));
    }
    debugPanic() {
      return this.runCommand(this.getRPCPayload("debugPanic", void 0));
    }
    listDatabases(schema) {
      this.lastUrl = schema;
      return this.runCommand(this.getRPCPayload("listDatabases", {schema}));
    }
    getDatabaseMetadata(schema) {
      this.lastUrl = schema;
      return this.runCommand(this.getRPCPayload("getDatabaseMetadata", {schema}));
    }
    handleResponse(response) {
      let result;
      try {
        result = JSON.parse(response);
      } catch (e) {
        console.error(`Could not parse introspection engine response: ${response.slice(0, 200)}`);
      }
      if (result) {
        if (result.backtrace) {
          console.log(result);
        }
        if (!result.id) {
          console.error(`Response ${JSON.stringify(result)} doesn't have an id and I can't handle that (yet)`);
        }
        if (!this.listeners[result.id]) {
          console.error(`Got result for unknown id ${result.id}`);
        }
        if (this.listeners[result.id]) {
          this.listeners[result.id](result);
          delete this.listeners[result.id];
        }
      }
    }
    init() {
      if (!this.initPromise) {
        this.initPromise = this.internalInit();
      }
      return this.initPromise;
    }
    internalInit() {
      return new Promise(async (resolve, reject) => {
        var _a, _b;
        try {
          const binaryPath = await resolveBinary_1.resolveBinary("introspection-engine");
          debugRpc("starting introspection engine with binary: " + binaryPath);
          this.child = child_process_1.spawn(binaryPath, {
            env: process.env,
            cwd: this.cwd,
            stdio: ["pipe", "pipe", "pipe"]
          });
          this.isRunning = true;
          this.child.on("error", (err) => {
            var _a2;
            console.error("[introspection-engine] error: %s", err);
            (_a2 = this.child) === null || _a2 === void 0 ? void 0 : _a2.kill();
            this.rejectAll(err);
            reject(err);
          });
          (_a = this.child.stdin) === null || _a === void 0 ? void 0 : _a.on("error", (err) => {
            var _a2;
            console.error(err);
            (_a2 = this.child) === null || _a2 === void 0 ? void 0 : _a2.kill();
          });
          this.child.on("exit", async (code) => {
            this.isRunning = false;
            if (code === 255 && this.lastError && this.lastError.is_panic) {
              const err2 = new panic_1.RustPanic(this.lastError.message, this.lastError.backtrace, this.lastRequest, panic_1.ErrorArea.INTROSPECTION_CLI, void 0, this.lastUrl);
              this.rejectAll(err2);
              reject(err2);
              return;
            }
            const messages = this.messages.join("\n");
            let err;
            if (code !== 0 || messages.includes("panicked at")) {
              let errorMessage = chalk_1.default.red.bold("Error in introspection engine: ") + messages;
              if (this.lastError && this.lastError.msg === "PANIC") {
                errorMessage = serializePanic(this.lastError);
                err = new IntrospectionPanic(errorMessage, messages, this.lastRequest);
              } else if (messages.includes("panicked at")) {
                err = new IntrospectionPanic(errorMessage, messages, this.lastRequest);
              }
              err = err || new Error(errorMessage);
              this.rejectAll(err);
              reject(err);
            }
          });
          this.child.stdin.on("error", (err) => {
            debugStdin(err);
          });
          byline_1.default(this.child.stderr).on("data", (data) => {
            const msg = String(data);
            this.messages.push(msg);
            debugStderr(msg);
            try {
              const json = JSON.parse(msg);
              if (json.backtrace) {
                this.lastError = json;
              }
              if (json.level === "ERRO") {
                this.lastError = json;
              }
            } catch (e) {
              debugCli(e);
            }
          });
          byline_1.default(this.child.stdout).on("data", (line) => {
            this.handleResponse(String(line));
          });
          setImmediate(() => {
            resolve();
          });
        } catch (e) {
          (_b = this.child) === null || _b === void 0 ? void 0 : _b.kill();
          reject(e);
        }
      });
    }
    async runCommand(request) {
      var _a;
      await this.init();
      if (process.env.FORCE_PANIC_INTROSPECTION_ENGINE) {
        request = this.getRPCPayload("debugPanic", void 0);
      }
      if ((_a = this.child) === null || _a === void 0 ? void 0 : _a.killed) {
        throw new Error(`Can't execute ${JSON.stringify(request)} because introspection engine already exited.`);
      }
      return new Promise((resolve, reject) => {
        this.registerCallback(request.id, async (response, err) => {
          var _a2, _b, _c, _d, _e, _f, _g;
          if (err) {
            return reject(err);
          }
          if (typeof response.result !== "undefined") {
            resolve(response.result);
          } else {
            if (response.error) {
              (_a2 = this.child) === null || _a2 === void 0 ? void 0 : _a2.kill();
              debugRpc(response);
              if ((_b = response.error.data) === null || _b === void 0 ? void 0 : _b.is_panic) {
                const message = (_e = (_d = (_c = response.error.data) === null || _c === void 0 ? void 0 : _c.error) === null || _d === void 0 ? void 0 : _d.message) !== null && _e !== void 0 ? _e : response.error.message;
                reject(new panic_1.RustPanic(message, message, request, panic_1.ErrorArea.INTROSPECTION_CLI, void 0, this.lastUrl));
              } else if ((_f = response.error.data) === null || _f === void 0 ? void 0 : _f.message) {
                let message = `${chalk_1.default.redBright(response.error.data.message)}
`;
                if ((_g = response.error.data) === null || _g === void 0 ? void 0 : _g.error_code) {
                  message = chalk_1.default.redBright(`${response.error.data.error_code}

`) + message;
                  reject(new IntrospectionError(message, response.error.data.error_code));
                } else {
                  reject(new Error(message));
                }
              } else {
                const text = this.persistError(request, this.messages.join("\n"));
                reject(new Error(`${chalk_1.default.redBright("Error in RPC")}
 Request: ${JSON.stringify(request, null, 2)}
Response: ${JSON.stringify(response, null, 2)}
${response.error.message}

${text}
`));
              }
            } else {
              reject(new Error(`Got invalid RPC response without .result property: ${JSON.stringify(response)}`));
            }
          }
        });
        if (this.child.stdin.destroyed) {
          throw new Error(`Can't execute ${JSON.stringify(request)} because introspection engine is destroyed.`);
        }
        debugRpc("SENDING RPC CALL", JSON.stringify(request));
        this.child.stdin.write(JSON.stringify(request) + "\n");
        this.lastRequest = request;
      });
    }
    persistError(request, message) {
      const filename = `failed-${request.method}-${now_1.now()}.md`;
      const file = `# Failed ${request.method} at ${new Date().toISOString()}
## RPC One-Liner
\`\`\`json
${JSON.stringify(request)}
\`\`\`

## RPC Input Readable
\`\`\`json
${JSON.stringify(request, null, 2)}
\`\`\`

## Stack Trace
\`\`\`bash
${message}
\`\`\`
`;
      fs_1.default.writeFileSync(filename, file);
      return `Wrote ${chalk_1.default.bold(filename)} with debugging information.
Please put that file into a gist and post it in Slack.
1. ${chalk_1.default.greenBright(`cat ${filename} | pbcopy`)}
2. Create a gist ${chalk_1.default.greenBright.underline(`https://gist.github.com/new`)}`;
    }
    getRPCPayload(method, params) {
      return {
        id: messageId++,
        jsonrpc: "2.0",
        method,
        params: params ? [{...params}] : void 0
      };
    }
  }
  exports2.IntrospectionEngine = IntrospectionEngine3;
  function serializePanic(log) {
    return `${chalk_1.default.red.bold("Error in introspection engine.\nReason: ")}${chalk_1.default.red(`${log.reason} in ${chalk_1.default.underline(`${log.file}:${log.line}:${log.column}`)}`)}

Please create an issue in the ${chalk_1.default.bold("prisma")} repo with the error 🙏:
${chalk_1.default.underline("https://github.com/prisma/prisma/issues/new")}
`;
  }
});

// ../../node_modules/.pnpm/@prisma/generator-helper@2.11.0-dev.28/node_modules/@prisma/generator-helper/dist/byline.js
var require_byline6 = __commonJS((exports2, module3) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.createLineStream = void 0;
  const stream = require("stream");
  const util4 = require("util");
  function byline(readStream, options) {
    return module3.exports.createStream(readStream, options);
  }
  exports2.default = byline;
  module3.exports.createStream = function(readStream, options) {
    if (readStream) {
      return createLineStream(readStream, options);
    } else {
      return new LineStream(options);
    }
  };
  function createLineStream(readStream, options) {
    if (!readStream) {
      throw new Error("expected readStream");
    }
    if (!readStream.readable) {
      throw new Error("readStream must be readable");
    }
    const ls = new LineStream(options);
    readStream.pipe(ls);
    return ls;
  }
  exports2.createLineStream = createLineStream;
  module3.exports.LineStream = LineStream;
  function LineStream(options) {
    stream.Transform.call(this, options);
    options = options || {};
    this._readableState.objectMode = true;
    this._lineBuffer = [];
    this._keepEmptyLines = options.keepEmptyLines || false;
    this._lastChunkEndedWithCR = false;
    this.on("pipe", function(src) {
      if (!this.encoding) {
        if (src instanceof stream.Readable) {
          this.encoding = src._readableState.encoding;
        }
      }
    });
  }
  util4.inherits(LineStream, stream.Transform);
  LineStream.prototype._transform = function(chunk, encoding, done) {
    encoding = encoding || "utf8";
    if (Buffer.isBuffer(chunk)) {
      if (encoding == "buffer") {
        chunk = chunk.toString();
        encoding = "utf8";
      } else {
        chunk = chunk.toString(encoding);
      }
    }
    this._chunkEncoding = encoding;
    const lines = chunk.split(/\r\n|\r|\n/g);
    if (this._lastChunkEndedWithCR && chunk[0] == "\n") {
      lines.shift();
    }
    if (this._lineBuffer.length > 0) {
      this._lineBuffer[this._lineBuffer.length - 1] += lines[0];
      lines.shift();
    }
    this._lastChunkEndedWithCR = chunk[chunk.length - 1] == "\r";
    this._lineBuffer = this._lineBuffer.concat(lines);
    this._pushBuffer(encoding, 1, done);
  };
  LineStream.prototype._pushBuffer = function(encoding, keep, done) {
    while (this._lineBuffer.length > keep) {
      const line = this._lineBuffer.shift();
      if (this._keepEmptyLines || line.length > 0) {
        if (!this.push(this._reencode(line, encoding))) {
          const self2 = this;
          setImmediate(function() {
            self2._pushBuffer(encoding, keep, done);
          });
          return;
        }
      }
    }
    done();
  };
  LineStream.prototype._flush = function(done) {
    this._pushBuffer(this._chunkEncoding, 0, done);
  };
  LineStream.prototype._reencode = function(line, chunkEncoding) {
    if (this.encoding && this.encoding != chunkEncoding) {
      return Buffer.from(line, chunkEncoding).toString(this.encoding);
    } else if (this.encoding) {
      return line;
    } else {
      return Buffer.from(line, chunkEncoding);
    }
  };
});

// ../../node_modules/.pnpm/@prisma/generator-helper@2.11.0-dev.28/node_modules/@prisma/generator-helper/dist/GeneratorProcess.js
var require_GeneratorProcess2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.GeneratorProcess = exports2.GeneratorError = void 0;
  const cross_spawn_1 = require_cross_spawn();
  const byline_1 = __importDefault(require_byline6());
  const chalk_1 = __importDefault(require_source());
  const debug_1 = __importDefault(require_src2());
  const debug3 = debug_1.default("GeneratorProcess");
  let globalMessageId = 1;
  class GeneratorError extends Error {
    constructor(message, code, data) {
      super(message);
      this.code = code;
      this.data = data;
    }
  }
  exports2.GeneratorError = GeneratorError;
  class GeneratorProcess {
    constructor(executablePath) {
      this.executablePath = executablePath;
      this.listeners = {};
      this.exitCode = null;
      this.stderrLogs = "";
    }
    async init() {
      if (!this.initPromise) {
        this.initPromise = this.initSingleton();
      }
      return this.initPromise;
    }
    initSingleton() {
      return new Promise((resolve, reject) => {
        try {
          this.child = cross_spawn_1.spawn(this.executablePath, {
            stdio: ["pipe", "inherit", "pipe"],
            env: {
              ...process.env,
              PRISMA_GENERATOR_INVOCATION: "true"
            },
            shell: true
          });
          this.child.on("exit", (code) => {
            this.exitCode = code;
            if (code && code > 0 && this.currentGenerateDeferred) {
              this.currentGenerateDeferred.reject(new Error(this.stderrLogs.split("\n").slice(-5).join("\n")));
            }
          });
          this.child.on("error", (err) => {
            this.lastError = err;
            if (err.message.includes("EACCES")) {
              reject(new Error(`The executable at ${this.executablePath} lacks the right chmod. Please use ${chalk_1.default.bold(`chmod +x ${this.executablePath}`)}`));
            } else {
              reject(err);
            }
          });
          byline_1.default(this.child.stderr).on("data", (line) => {
            const response = String(line);
            this.stderrLogs += response + "\n";
            let data;
            try {
              data = JSON.parse(response);
            } catch (e) {
              debug3(response);
            }
            if (data) {
              this.handleResponse(data);
            }
          });
          setTimeout(() => {
            if (this.exitCode && this.exitCode > 0) {
              reject(new Error(`Generator at ${this.executablePath} could not start:

${this.stderrLogs}`));
            } else {
              resolve();
            }
          }, 200);
        } catch (e) {
          reject(e);
        }
      });
    }
    handleResponse(data) {
      if (data.jsonrpc && data.id) {
        if (typeof data.id !== "number") {
          throw new Error(`message.id has to be a number. Found value ${data.id}`);
        }
        if (this.listeners[data.id]) {
          if (data.error) {
            const error = new GeneratorError(data.error.message, data.error.code, data.error.data);
            this.listeners[data.id](null, error);
          } else {
            this.listeners[data.id](data.result);
          }
          delete this.listeners[data.id];
        }
      }
    }
    registerListener(messageId, cb) {
      this.listeners[messageId] = cb;
    }
    sendMessage(message) {
      this.child.stdin.write(JSON.stringify(message) + "\n");
    }
    getMessageId() {
      return globalMessageId++;
    }
    stop() {
      if (!this.child.killed) {
        this.child.kill();
      }
    }
    getManifest() {
      return new Promise((resolve, reject) => {
        const messageId = this.getMessageId();
        this.registerListener(messageId, (result, error) => {
          if (error) {
            return reject(error);
          }
          if (result.manifest) {
            resolve(result.manifest);
          } else {
            resolve(null);
          }
        });
        this.sendMessage({
          jsonrpc: "2.0",
          method: "getManifest",
          params: {},
          id: messageId
        });
      });
    }
    generate(options) {
      return new Promise((resolve, reject) => {
        const messageId = this.getMessageId();
        this.currentGenerateDeferred = {resolve, reject};
        this.registerListener(messageId, (result, error) => {
          if (error) {
            reject(error);
            this.currentGenerateDeferred = void 0;
            return;
          }
          resolve(result);
          this.currentGenerateDeferred = void 0;
        });
        this.sendMessage({
          jsonrpc: "2.0",
          method: "generate",
          params: options,
          id: messageId
        });
      });
    }
  }
  exports2.GeneratorProcess = GeneratorProcess;
});

// ../../node_modules/.pnpm/@prisma/generator-helper@2.11.0-dev.28/node_modules/@prisma/generator-helper/dist/generatorHandler.js
var require_generatorHandler2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.generatorHandler = void 0;
  const byline_1 = __importDefault(require_byline6());
  function generatorHandler(handler) {
    byline_1.default(process.stdin).on("data", async (line) => {
      const json = JSON.parse(String(line));
      if (json.method === "generate" && json.params) {
        try {
          const result = await handler.onGenerate(json.params);
          respond({
            jsonrpc: "2.0",
            result,
            id: json.id
          });
        } catch (e) {
          respond({
            jsonrpc: "2.0",
            error: {
              code: -32e3,
              message: e.stack || e.message,
              data: null
            },
            id: json.id
          });
        }
      }
      if (json.method === "getManifest") {
        if (handler.onManifest) {
          try {
            const manifest = handler.onManifest();
            respond({
              jsonrpc: "2.0",
              result: {
                manifest
              },
              id: json.id
            });
          } catch (e) {
            respond({
              jsonrpc: "2.0",
              error: {
                code: -32e3,
                message: e.stack || e.message,
                data: null
              },
              id: json.id
            });
          }
        } else {
          respond({
            jsonrpc: "2.0",
            result: {
              manifest: null
            },
            id: json.id
          });
        }
      }
    });
    process.stdin.resume();
  }
  exports2.generatorHandler = generatorHandler;
  function respond(response) {
    console.error(JSON.stringify(response));
  }
});

// ../../node_modules/.pnpm/@prisma/generator-helper@2.11.0-dev.28/node_modules/@prisma/generator-helper/dist/types.js
var require_types5 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
});

// ../../node_modules/.pnpm/@prisma/generator-helper@2.11.0-dev.28/node_modules/@prisma/generator-helper/dist/dmmf.js
var require_dmmf2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.DMMF = void 0;
  var DMMF;
  (function(DMMF2) {
    let ModelAction;
    (function(ModelAction2) {
      ModelAction2["findOne"] = "findOne";
      ModelAction2["findFirst"] = "findFirst";
      ModelAction2["findMany"] = "findMany";
      ModelAction2["create"] = "create";
      ModelAction2["update"] = "update";
      ModelAction2["updateMany"] = "updateMany";
      ModelAction2["upsert"] = "upsert";
      ModelAction2["delete"] = "delete";
      ModelAction2["deleteMany"] = "deleteMany";
    })(ModelAction = DMMF2.ModelAction || (DMMF2.ModelAction = {}));
  })(DMMF = exports2.DMMF || (exports2.DMMF = {}));
});

// ../../node_modules/.pnpm/@prisma/generator-helper@2.11.0-dev.28/node_modules/@prisma/generator-helper/dist/index.js
var require_dist23 = __commonJS((exports2) => {
  "use strict";
  var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, {enumerable: true, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __exportStar2 = exports2 && exports2.__exportStar || function(m, exports3) {
    for (var p in m)
      if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
        __createBinding(exports3, m, p);
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.generatorHandler = exports2.GeneratorError = exports2.GeneratorProcess = void 0;
  var GeneratorProcess_1 = require_GeneratorProcess2();
  Object.defineProperty(exports2, "GeneratorProcess", {enumerable: true, get: function() {
    return GeneratorProcess_1.GeneratorProcess;
  }});
  Object.defineProperty(exports2, "GeneratorError", {enumerable: true, get: function() {
    return GeneratorProcess_1.GeneratorError;
  }});
  var generatorHandler_1 = require_generatorHandler2();
  Object.defineProperty(exports2, "generatorHandler", {enumerable: true, get: function() {
    return generatorHandler_1.generatorHandler;
  }});
  __exportStar2(require_types5(), exports2);
  __exportStar2(require_dmmf2(), exports2);
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/Generator.js
var require_Generator2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.Generator = void 0;
  const generator_helper_1 = require_dist23();
  class Generator2 {
    constructor(executablePath) {
      this.executablePath = executablePath;
      this.manifest = null;
      this.generatorProcess = new generator_helper_1.GeneratorProcess(this.executablePath);
    }
    async init() {
      await this.generatorProcess.init();
      this.manifest = await this.generatorProcess.getManifest();
    }
    stop() {
      this.generatorProcess.stop();
    }
    generate() {
      if (!this.options) {
        throw new Error(`Please first run .setOptions() on the Generator to initialize the options`);
      }
      return this.generatorProcess.generate(this.options);
    }
    setOptions(options) {
      this.options = options;
    }
    setBinaryPaths(binaryPaths) {
      if (!this.options) {
        throw new Error(`Please first run .setOptions() on the Generator to initialize the options`);
      }
      this.options.binaryPaths = binaryPaths;
    }
  }
  exports2.Generator = Generator2;
});

// ../../node_modules/.pnpm/onetime@5.1.2/node_modules/onetime/index.js
var require_onetime2 = __commonJS((exports2, module3) => {
  "use strict";
  const mimicFn = require_mimic_fn();
  const calledFunctions = new WeakMap();
  const onetime = (function_, options = {}) => {
    if (typeof function_ !== "function") {
      throw new TypeError("Expected a function");
    }
    let returnValue;
    let callCount = 0;
    const functionName = function_.displayName || function_.name || "<anonymous>";
    const onetime2 = function(...arguments_) {
      calledFunctions.set(onetime2, ++callCount);
      if (callCount === 1) {
        returnValue = function_.apply(this, arguments_);
        function_ = null;
      } else if (options.throw === true) {
        throw new Error(`Function \`${functionName}\` can only be called once`);
      }
      return returnValue;
    };
    mimicFn(onetime2, function_);
    calledFunctions.set(onetime2, callCount);
    return onetime2;
  };
  module3.exports = onetime;
  module3.exports.default = onetime;
  module3.exports.callCount = (function_) => {
    if (!calledFunctions.has(function_)) {
      throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
    }
    return calledFunctions.get(function_);
  };
});

// ../../node_modules/.pnpm/execa@4.0.3/node_modules/execa/lib/error.js
var require_error5 = __commonJS((exports2, module3) => {
  "use strict";
  const {signalsByName} = require_main();
  const getErrorPrefix = ({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled}) => {
    if (timedOut) {
      return `timed out after ${timeout} milliseconds`;
    }
    if (isCanceled) {
      return "was canceled";
    }
    if (errorCode !== void 0) {
      return `failed with ${errorCode}`;
    }
    if (signal !== void 0) {
      return `was killed with ${signal} (${signalDescription})`;
    }
    if (exitCode !== void 0) {
      return `failed with exit code ${exitCode}`;
    }
    return "failed";
  };
  const makeError = ({
    stdout,
    stderr,
    all,
    error,
    signal,
    exitCode,
    command,
    timedOut,
    isCanceled,
    killed,
    parsed: {options: {timeout}}
  }) => {
    exitCode = exitCode === null ? void 0 : exitCode;
    signal = signal === null ? void 0 : signal;
    const signalDescription = signal === void 0 ? void 0 : signalsByName[signal].description;
    const errorCode = error && error.code;
    const prefix = getErrorPrefix({timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled});
    const execaMessage = `Command ${prefix}: ${command}`;
    const isError7 = Object.prototype.toString.call(error) === "[object Error]";
    const shortMessage = isError7 ? `${execaMessage}
${error.message}` : execaMessage;
    const message = [shortMessage, stderr, stdout].filter(Boolean).join("\n");
    if (isError7) {
      error.originalMessage = error.message;
      error.message = message;
    } else {
      error = new Error(message);
    }
    error.shortMessage = shortMessage;
    error.command = command;
    error.exitCode = exitCode;
    error.signal = signal;
    error.signalDescription = signalDescription;
    error.stdout = stdout;
    error.stderr = stderr;
    if (all !== void 0) {
      error.all = all;
    }
    if ("bufferedData" in error) {
      delete error.bufferedData;
    }
    error.failed = true;
    error.timedOut = Boolean(timedOut);
    error.isCanceled = isCanceled;
    error.killed = killed && !timedOut;
    return error;
  };
  module3.exports = makeError;
});

// ../../node_modules/.pnpm/execa@4.0.3/node_modules/execa/lib/stdio.js
var require_stdio2 = __commonJS((exports2, module3) => {
  "use strict";
  const aliases2 = ["stdin", "stdout", "stderr"];
  const hasAlias = (opts) => aliases2.some((alias) => opts[alias] !== void 0);
  const normalizeStdio = (opts) => {
    if (!opts) {
      return;
    }
    const {stdio} = opts;
    if (stdio === void 0) {
      return aliases2.map((alias) => opts[alias]);
    }
    if (hasAlias(opts)) {
      throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${aliases2.map((alias) => `\`${alias}\``).join(", ")}`);
    }
    if (typeof stdio === "string") {
      return stdio;
    }
    if (!Array.isArray(stdio)) {
      throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof stdio}\``);
    }
    const length = Math.max(stdio.length, aliases2.length);
    return Array.from({length}, (value, index) => stdio[index]);
  };
  module3.exports = normalizeStdio;
  module3.exports.node = (opts) => {
    const stdio = normalizeStdio(opts);
    if (stdio === "ipc") {
      return "ipc";
    }
    if (stdio === void 0 || typeof stdio === "string") {
      return [stdio, stdio, stdio, "ipc"];
    }
    if (stdio.includes("ipc")) {
      return stdio;
    }
    return [...stdio, "ipc"];
  };
});

// ../../node_modules/.pnpm/execa@4.0.3/node_modules/execa/lib/kill.js
var require_kill2 = __commonJS((exports2, module3) => {
  "use strict";
  const os3 = require("os");
  const onExit = require_signal_exit();
  const DEFAULT_FORCE_KILL_TIMEOUT = 1e3 * 5;
  const spawnedKill = (kill, signal = "SIGTERM", options = {}) => {
    const killResult = kill(signal);
    setKillTimeout(kill, signal, options, killResult);
    return killResult;
  };
  const setKillTimeout = (kill, signal, options, killResult) => {
    if (!shouldForceKill(signal, options, killResult)) {
      return;
    }
    const timeout = getForceKillAfterTimeout(options);
    const t = setTimeout(() => {
      kill("SIGKILL");
    }, timeout);
    if (t.unref) {
      t.unref();
    }
  };
  const shouldForceKill = (signal, {forceKillAfterTimeout}, killResult) => {
    return isSigterm(signal) && forceKillAfterTimeout !== false && killResult;
  };
  const isSigterm = (signal) => {
    return signal === os3.constants.signals.SIGTERM || typeof signal === "string" && signal.toUpperCase() === "SIGTERM";
  };
  const getForceKillAfterTimeout = ({forceKillAfterTimeout = true}) => {
    if (forceKillAfterTimeout === true) {
      return DEFAULT_FORCE_KILL_TIMEOUT;
    }
    if (!Number.isFinite(forceKillAfterTimeout) || forceKillAfterTimeout < 0) {
      throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${forceKillAfterTimeout}\` (${typeof forceKillAfterTimeout})`);
    }
    return forceKillAfterTimeout;
  };
  const spawnedCancel = (spawned, context) => {
    const killResult = spawned.kill();
    if (killResult) {
      context.isCanceled = true;
    }
  };
  const timeoutKill = (spawned, signal, reject) => {
    spawned.kill(signal);
    reject(Object.assign(new Error("Timed out"), {timedOut: true, signal}));
  };
  const setupTimeout = (spawned, {timeout, killSignal = "SIGTERM"}, spawnedPromise) => {
    if (timeout === 0 || timeout === void 0) {
      return spawnedPromise;
    }
    if (!Number.isFinite(timeout) || timeout < 0) {
      throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${timeout}\` (${typeof timeout})`);
    }
    let timeoutId;
    const timeoutPromise = new Promise((resolve, reject) => {
      timeoutId = setTimeout(() => {
        timeoutKill(spawned, killSignal, reject);
      }, timeout);
    });
    const safeSpawnedPromise = spawnedPromise.finally(() => {
      clearTimeout(timeoutId);
    });
    return Promise.race([timeoutPromise, safeSpawnedPromise]);
  };
  const setExitHandler = async (spawned, {cleanup, detached}, timedPromise) => {
    if (!cleanup || detached) {
      return timedPromise;
    }
    const removeExitHandler = onExit(() => {
      spawned.kill();
    });
    return timedPromise.finally(() => {
      removeExitHandler();
    });
  };
  module3.exports = {
    spawnedKill,
    spawnedCancel,
    setupTimeout,
    setExitHandler
  };
});

// ../../node_modules/.pnpm/get-stream@5.2.0/node_modules/get-stream/buffer-stream.js
var require_buffer_stream3 = __commonJS((exports2, module3) => {
  "use strict";
  const {PassThrough: PassThroughStream} = require("stream");
  module3.exports = (options) => {
    options = {...options};
    const {array} = options;
    let {encoding} = options;
    const isBuffer = encoding === "buffer";
    let objectMode = false;
    if (array) {
      objectMode = !(encoding || isBuffer);
    } else {
      encoding = encoding || "utf8";
    }
    if (isBuffer) {
      encoding = null;
    }
    const stream = new PassThroughStream({objectMode});
    if (encoding) {
      stream.setEncoding(encoding);
    }
    let length = 0;
    const chunks = [];
    stream.on("data", (chunk) => {
      chunks.push(chunk);
      if (objectMode) {
        length = chunks.length;
      } else {
        length += chunk.length;
      }
    });
    stream.getBufferedValue = () => {
      if (array) {
        return chunks;
      }
      return isBuffer ? Buffer.concat(chunks, length) : chunks.join("");
    };
    stream.getBufferedLength = () => length;
    return stream;
  };
});

// ../../node_modules/.pnpm/get-stream@5.2.0/node_modules/get-stream/index.js
var require_get_stream3 = __commonJS((exports2, module3) => {
  "use strict";
  const {constants: BufferConstants} = require("buffer");
  const pump = require_pump();
  const bufferStream = require_buffer_stream3();
  class MaxBufferError extends Error {
    constructor() {
      super("maxBuffer exceeded");
      this.name = "MaxBufferError";
    }
  }
  async function getStream(inputStream, options) {
    if (!inputStream) {
      return Promise.reject(new Error("Expected a stream"));
    }
    options = {
      maxBuffer: Infinity,
      ...options
    };
    const {maxBuffer} = options;
    let stream;
    await new Promise((resolve, reject) => {
      const rejectPromise = (error) => {
        if (error && stream.getBufferedLength() <= BufferConstants.MAX_LENGTH) {
          error.bufferedData = stream.getBufferedValue();
        }
        reject(error);
      };
      stream = pump(inputStream, bufferStream(options), (error) => {
        if (error) {
          rejectPromise(error);
          return;
        }
        resolve();
      });
      stream.on("data", () => {
        if (stream.getBufferedLength() > maxBuffer) {
          rejectPromise(new MaxBufferError());
        }
      });
    });
    return stream.getBufferedValue();
  }
  module3.exports = getStream;
  module3.exports.default = getStream;
  module3.exports.buffer = (stream, options) => getStream(stream, {...options, encoding: "buffer"});
  module3.exports.array = (stream, options) => getStream(stream, {...options, array: true});
  module3.exports.MaxBufferError = MaxBufferError;
});

// ../../node_modules/.pnpm/execa@4.0.3/node_modules/execa/lib/stream.js
var require_stream9 = __commonJS((exports2, module3) => {
  "use strict";
  const isStream = require_is_stream();
  const getStream = require_get_stream3();
  const mergeStream = require_merge_stream();
  const handleInput = (spawned, input) => {
    if (input === void 0 || spawned.stdin === void 0) {
      return;
    }
    if (isStream(input)) {
      input.pipe(spawned.stdin);
    } else {
      spawned.stdin.end(input);
    }
  };
  const makeAllStream = (spawned, {all}) => {
    if (!all || !spawned.stdout && !spawned.stderr) {
      return;
    }
    const mixed = mergeStream();
    if (spawned.stdout) {
      mixed.add(spawned.stdout);
    }
    if (spawned.stderr) {
      mixed.add(spawned.stderr);
    }
    return mixed;
  };
  const getBufferedData = async (stream, streamPromise) => {
    if (!stream) {
      return;
    }
    stream.destroy();
    try {
      return await streamPromise;
    } catch (error) {
      return error.bufferedData;
    }
  };
  const getStreamPromise = (stream, {encoding, buffer, maxBuffer}) => {
    if (!stream || !buffer) {
      return;
    }
    if (encoding) {
      return getStream(stream, {encoding, maxBuffer});
    }
    return getStream.buffer(stream, {maxBuffer});
  };
  const getSpawnedResult = async ({stdout, stderr, all}, {encoding, buffer, maxBuffer}, processDone) => {
    const stdoutPromise = getStreamPromise(stdout, {encoding, buffer, maxBuffer});
    const stderrPromise = getStreamPromise(stderr, {encoding, buffer, maxBuffer});
    const allPromise = getStreamPromise(all, {encoding, buffer, maxBuffer: maxBuffer * 2});
    try {
      return await Promise.all([processDone, stdoutPromise, stderrPromise, allPromise]);
    } catch (error) {
      return Promise.all([
        {error, signal: error.signal, timedOut: error.timedOut},
        getBufferedData(stdout, stdoutPromise),
        getBufferedData(stderr, stderrPromise),
        getBufferedData(all, allPromise)
      ]);
    }
  };
  const validateInputSync = ({input}) => {
    if (isStream(input)) {
      throw new TypeError("The `input` option cannot be a stream in sync mode");
    }
  };
  module3.exports = {
    handleInput,
    makeAllStream,
    getSpawnedResult,
    validateInputSync
  };
});

// ../../node_modules/.pnpm/execa@4.0.3/node_modules/execa/lib/promise.js
var require_promise2 = __commonJS((exports2, module3) => {
  "use strict";
  const nativePromisePrototype = (async () => {
  })().constructor.prototype;
  const descriptors = ["then", "catch", "finally"].map((property) => [
    property,
    Reflect.getOwnPropertyDescriptor(nativePromisePrototype, property)
  ]);
  const mergePromise = (spawned, promise) => {
    for (const [property, descriptor] of descriptors) {
      const value = typeof promise === "function" ? (...args2) => Reflect.apply(descriptor.value, promise(), args2) : descriptor.value.bind(promise);
      Reflect.defineProperty(spawned, property, {...descriptor, value});
    }
    return spawned;
  };
  const getSpawnedPromise = (spawned) => {
    return new Promise((resolve, reject) => {
      spawned.on("exit", (exitCode, signal) => {
        resolve({exitCode, signal});
      });
      spawned.on("error", (error) => {
        reject(error);
      });
      if (spawned.stdin) {
        spawned.stdin.on("error", (error) => {
          reject(error);
        });
      }
    });
  };
  module3.exports = {
    mergePromise,
    getSpawnedPromise
  };
});

// ../../node_modules/.pnpm/execa@4.0.3/node_modules/execa/lib/command.js
var require_command2 = __commonJS((exports2, module3) => {
  "use strict";
  const SPACES_REGEXP = / +/g;
  const joinCommand = (file, args2 = []) => {
    if (!Array.isArray(args2)) {
      return file;
    }
    return [file, ...args2].join(" ");
  };
  const handleEscaping = (tokens, token, index) => {
    if (index === 0) {
      return [token];
    }
    const previousToken = tokens[tokens.length - 1];
    if (previousToken.endsWith("\\")) {
      return [...tokens.slice(0, -1), `${previousToken.slice(0, -1)} ${token}`];
    }
    return [...tokens, token];
  };
  const parseCommand = (command) => {
    return command.trim().split(SPACES_REGEXP).reduce(handleEscaping, []);
  };
  module3.exports = {
    joinCommand,
    parseCommand
  };
});

// ../../node_modules/.pnpm/execa@4.0.3/node_modules/execa/index.js
var require_execa2 = __commonJS((exports2, module3) => {
  "use strict";
  const path19 = require("path");
  const childProcess = require("child_process");
  const crossSpawn = require_cross_spawn();
  const stripFinalNewline = require_strip_final_newline();
  const npmRunPath = require_npm_run_path();
  const onetime = require_onetime2();
  const makeError = require_error5();
  const normalizeStdio = require_stdio2();
  const {spawnedKill, spawnedCancel, setupTimeout, setExitHandler} = require_kill2();
  const {handleInput, getSpawnedResult, makeAllStream, validateInputSync} = require_stream9();
  const {mergePromise, getSpawnedPromise} = require_promise2();
  const {joinCommand, parseCommand} = require_command2();
  const DEFAULT_MAX_BUFFER = 1e3 * 1e3 * 100;
  const getEnv = ({env: envOption, extendEnv, preferLocal, localDir, execPath}) => {
    const env = extendEnv ? {...process.env, ...envOption} : envOption;
    if (preferLocal) {
      return npmRunPath.env({env, cwd: localDir, execPath});
    }
    return env;
  };
  const handleArguments = (file, args2, options = {}) => {
    const parsed = crossSpawn._parse(file, args2, options);
    file = parsed.command;
    args2 = parsed.args;
    options = parsed.options;
    options = {
      maxBuffer: DEFAULT_MAX_BUFFER,
      buffer: true,
      stripFinalNewline: true,
      extendEnv: true,
      preferLocal: false,
      localDir: options.cwd || process.cwd(),
      execPath: process.execPath,
      encoding: "utf8",
      reject: true,
      cleanup: true,
      all: false,
      windowsHide: true,
      ...options
    };
    options.env = getEnv(options);
    options.stdio = normalizeStdio(options);
    if (process.platform === "win32" && path19.basename(file, ".exe") === "cmd") {
      args2.unshift("/q");
    }
    return {file, args: args2, options, parsed};
  };
  const handleOutput = (options, value, error) => {
    if (typeof value !== "string" && !Buffer.isBuffer(value)) {
      return error === void 0 ? void 0 : "";
    }
    if (options.stripFinalNewline) {
      return stripFinalNewline(value);
    }
    return value;
  };
  const execa = (file, args2, options) => {
    const parsed = handleArguments(file, args2, options);
    const command = joinCommand(file, args2);
    let spawned;
    try {
      spawned = childProcess.spawn(parsed.file, parsed.args, parsed.options);
    } catch (error) {
      const dummySpawned = new childProcess.ChildProcess();
      const errorPromise = Promise.reject(makeError({
        error,
        stdout: "",
        stderr: "",
        all: "",
        command,
        parsed,
        timedOut: false,
        isCanceled: false,
        killed: false
      }));
      return mergePromise(dummySpawned, errorPromise);
    }
    const spawnedPromise = getSpawnedPromise(spawned);
    const timedPromise = setupTimeout(spawned, parsed.options, spawnedPromise);
    const processDone = setExitHandler(spawned, parsed.options, timedPromise);
    const context = {isCanceled: false};
    spawned.kill = spawnedKill.bind(null, spawned.kill.bind(spawned));
    spawned.cancel = spawnedCancel.bind(null, spawned, context);
    const handlePromise = async () => {
      const [{error, exitCode, signal, timedOut}, stdoutResult, stderrResult, allResult] = await getSpawnedResult(spawned, parsed.options, processDone);
      const stdout = handleOutput(parsed.options, stdoutResult);
      const stderr = handleOutput(parsed.options, stderrResult);
      const all = handleOutput(parsed.options, allResult);
      if (error || exitCode !== 0 || signal !== null) {
        const returnedError = makeError({
          error,
          exitCode,
          signal,
          stdout,
          stderr,
          all,
          command,
          parsed,
          timedOut,
          isCanceled: context.isCanceled,
          killed: spawned.killed
        });
        if (!parsed.options.reject) {
          return returnedError;
        }
        throw returnedError;
      }
      return {
        command,
        exitCode: 0,
        stdout,
        stderr,
        all,
        failed: false,
        timedOut: false,
        isCanceled: false,
        killed: false
      };
    };
    const handlePromiseOnce = onetime(handlePromise);
    crossSpawn._enoent.hookChildProcess(spawned, parsed.parsed);
    handleInput(spawned, parsed.options.input);
    spawned.all = makeAllStream(spawned, parsed.options);
    return mergePromise(spawned, handlePromiseOnce);
  };
  module3.exports = execa;
  module3.exports.sync = (file, args2, options) => {
    const parsed = handleArguments(file, args2, options);
    const command = joinCommand(file, args2);
    validateInputSync(parsed.options);
    let result;
    try {
      result = childProcess.spawnSync(parsed.file, parsed.args, parsed.options);
    } catch (error) {
      throw makeError({
        error,
        stdout: "",
        stderr: "",
        all: "",
        command,
        parsed,
        timedOut: false,
        isCanceled: false,
        killed: false
      });
    }
    const stdout = handleOutput(parsed.options, result.stdout, result.error);
    const stderr = handleOutput(parsed.options, result.stderr, result.error);
    if (result.error || result.status !== 0 || result.signal !== null) {
      const error = makeError({
        stdout,
        stderr,
        error: result.error,
        signal: result.signal,
        exitCode: result.status,
        command,
        parsed,
        timedOut: result.error && result.error.code === "ETIMEDOUT",
        isCanceled: false,
        killed: result.signal !== null
      });
      if (!parsed.options.reject) {
        return error;
      }
      throw error;
    }
    return {
      command,
      exitCode: 0,
      stdout,
      stderr,
      failed: false,
      timedOut: false,
      isCanceled: false,
      killed: false
    };
  };
  module3.exports.command = (command, options) => {
    const [file, ...args2] = parseCommand(command);
    return execa(file, args2, options);
  };
  module3.exports.commandSync = (command, options) => {
    const [file, ...args2] = parseCommand(command);
    return execa.sync(file, args2, options);
  };
  module3.exports.node = (scriptPath, args2, options = {}) => {
    if (args2 && !Array.isArray(args2) && typeof args2 === "object") {
      options = args2;
      args2 = [];
    }
    const stdio = normalizeStdio.node(options);
    const {nodePath = process.execPath, nodeOptions = process.execArgv} = options;
    return execa(nodePath, [
      ...nodeOptions,
      scriptPath,
      ...Array.isArray(args2) ? args2 : []
    ], {
      ...options,
      stdin: void 0,
      stdout: void 0,
      stderr: void 0,
      stdio,
      shell: false
    });
  };
});

// ../../node_modules/.pnpm/@prisma/fetch-engine@2.11.0-dev.28/node_modules/@prisma/fetch-engine/dist/log.js
var require_log3 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getBar = void 0;
  const progress_1 = __importDefault(require_progress());
  function getBar(text) {
    return new progress_1.default(`> ${text} [:bar] :percent`, {
      stream: process.stdout,
      width: 20,
      complete: "=",
      incomplete: " ",
      total: 100,
      head: "",
      clear: true
    });
  }
  exports2.getBar = getBar;
});

// ../../node_modules/.pnpm/@prisma/fetch-engine@2.11.0-dev.28/node_modules/@prisma/fetch-engine/dist/chmod.js
var require_chmod2 = __commonJS((exports2) => {
  "use strict";
  var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, {enumerable: true, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: true, value: v});
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports2 && exports2.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  const fs17 = __importStar(require("fs"));
  function default_1(file) {
    const s = fs17.statSync(file);
    const newMode = s.mode | 64 | 8 | 1;
    if (s.mode === newMode)
      return;
    const base8 = newMode.toString(8).slice(-3);
    fs17.chmodSync(file, base8);
  }
  exports2.default = default_1;
});

// ../../node_modules/.pnpm/@prisma/fetch-engine@2.11.0-dev.28/node_modules/@prisma/fetch-engine/dist/copy.js
var require_copy3 = __commonJS((exports2) => {
  "use strict";
  var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, {enumerable: true, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: true, value: v});
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports2 && exports2.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.copy = void 0;
  const fs17 = __importStar(require("fs"));
  function copy(src, target) {
    return new Promise((resolve, reject) => {
      fs17.copyFile(src, target, (err) => {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  }
  exports2.copy = copy;
});

// ../../node_modules/.pnpm/@prisma/fetch-engine@2.11.0-dev.28/node_modules/@prisma/fetch-engine/dist/getProxyAgent.js
var require_getProxyAgent2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getProxyAgent = void 0;
  const https_proxy_agent_1 = __importDefault(require_dist4());
  const http_proxy_agent_1 = __importDefault(require_dist6());
  const url_1 = __importDefault(require("url"));
  "use strict";
  function formatHostname(hostname) {
    return hostname.replace(/^\.*/, ".").toLowerCase();
  }
  function parseNoProxyZone(zone) {
    zone = zone.trim().toLowerCase();
    const zoneParts = zone.split(":", 2);
    const zoneHost = formatHostname(zoneParts[0]);
    const zonePort = zoneParts[1];
    const hasPort = zone.includes(":");
    return {hostname: zoneHost, port: zonePort, hasPort};
  }
  function uriInNoProxy(uri, noProxy) {
    const port = uri.port || (uri.protocol === "https:" ? "443" : "80");
    const hostname = formatHostname(uri.hostname);
    const noProxyList = noProxy.split(",");
    return noProxyList.map(parseNoProxyZone).some(function(noProxyZone) {
      const isMatchedAt = hostname.indexOf(noProxyZone.hostname);
      const hostnameMatched = isMatchedAt > -1 && isMatchedAt === hostname.length - noProxyZone.hostname.length;
      if (noProxyZone.hasPort) {
        return port === noProxyZone.port && hostnameMatched;
      }
      return hostnameMatched;
    });
  }
  function getProxyFromURI(uri) {
    const noProxy = process.env.NO_PROXY || process.env.no_proxy || "";
    if (noProxy === "*") {
      return null;
    }
    if (noProxy !== "" && uriInNoProxy(uri, noProxy)) {
      return null;
    }
    if (uri.protocol === "http:") {
      return process.env.HTTP_PROXY || process.env.http_proxy || null;
    }
    if (uri.protocol === "https:") {
      return process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy || null;
    }
    return null;
  }
  function getProxyAgent(url) {
    const uri = url_1.default.parse(url);
    const proxy = getProxyFromURI(uri);
    if (!proxy) {
      return void 0;
    }
    if (uri.protocol === "http:") {
      return http_proxy_agent_1.default(proxy);
    }
    if (uri.protocol === "https:") {
      return https_proxy_agent_1.default(proxy);
    }
    return void 0;
  }
  exports2.getProxyAgent = getProxyAgent;
});

// ../../node_modules/.pnpm/hasha@5.2.2/node_modules/hasha/index.js
var require_hasha2 = __commonJS((exports2, module3) => {
  "use strict";
  const fs17 = require("fs");
  const path19 = require("path");
  const crypto = require("crypto");
  const isStream = require_is_stream();
  const {Worker} = (() => {
    try {
      return require("worker_threads");
    } catch (_2) {
      return {};
    }
  })();
  let worker;
  let taskIdCounter = 0;
  const tasks = new Map();
  const recreateWorkerError = (sourceError) => {
    const error = new Error(sourceError.message);
    for (const [key, value] of Object.entries(sourceError)) {
      if (key !== "message") {
        error[key] = value;
      }
    }
    return error;
  };
  const createWorker = () => {
    worker = new Worker(path19.join(__dirname, "thread.js"));
    worker.on("message", (message) => {
      const task = tasks.get(message.id);
      tasks.delete(message.id);
      if (tasks.size === 0) {
        worker.unref();
      }
      if (message.error === void 0) {
        task.resolve(message.value);
      } else {
        task.reject(recreateWorkerError(message.error));
      }
    });
    worker.on("error", (error) => {
      throw error;
    });
  };
  const taskWorker = (method, args2, transferList) => new Promise((resolve, reject) => {
    const id = taskIdCounter++;
    tasks.set(id, {resolve, reject});
    if (worker === void 0) {
      createWorker();
    }
    worker.ref();
    worker.postMessage({id, method, args: args2}, transferList);
  });
  const hasha = (input, options = {}) => {
    let outputEncoding = options.encoding || "hex";
    if (outputEncoding === "buffer") {
      outputEncoding = void 0;
    }
    const hash = crypto.createHash(options.algorithm || "sha512");
    const update = (buffer) => {
      const inputEncoding = typeof buffer === "string" ? "utf8" : void 0;
      hash.update(buffer, inputEncoding);
    };
    if (Array.isArray(input)) {
      input.forEach(update);
    } else {
      update(input);
    }
    return hash.digest(outputEncoding);
  };
  hasha.stream = (options = {}) => {
    let outputEncoding = options.encoding || "hex";
    if (outputEncoding === "buffer") {
      outputEncoding = void 0;
    }
    const stream = crypto.createHash(options.algorithm || "sha512");
    stream.setEncoding(outputEncoding);
    return stream;
  };
  hasha.fromStream = async (stream, options = {}) => {
    if (!isStream(stream)) {
      throw new TypeError("Expected a stream");
    }
    return new Promise((resolve, reject) => {
      stream.on("error", reject).pipe(hasha.stream(options)).on("error", reject).on("finish", function() {
        resolve(this.read());
      });
    });
  };
  if (Worker === void 0) {
    hasha.fromFile = async (filePath, options) => hasha.fromStream(fs17.createReadStream(filePath), options);
    hasha.async = async (input, options) => hasha(input, options);
  } else {
    hasha.fromFile = async (filePath, {algorithm = "sha512", encoding = "hex"} = {}) => {
      const hash = await taskWorker("hashFile", [algorithm, filePath]);
      if (encoding === "buffer") {
        return Buffer.from(hash);
      }
      return Buffer.from(hash).toString(encoding);
    };
    hasha.async = async (input, {algorithm = "sha512", encoding = "hex"} = {}) => {
      if (encoding === "buffer") {
        encoding = void 0;
      }
      const hash = await taskWorker("hash", [algorithm, input]);
      if (encoding === void 0) {
        return Buffer.from(hash);
      }
      return Buffer.from(hash).toString(encoding);
    };
  }
  hasha.fromFileSync = (filePath, options) => hasha(fs17.readFileSync(filePath), options);
  module3.exports = hasha;
});

// ../../node_modules/.pnpm/@prisma/fetch-engine@2.11.0-dev.28/node_modules/@prisma/fetch-engine/dist/downloadZip.js
var require_downloadZip2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.downloadZip = void 0;
  const zlib_1 = __importDefault(require("zlib"));
  const p_retry_1 = __importDefault(require_p_retry());
  const node_fetch_1 = __importDefault(require_lib2());
  const fs_1 = __importDefault(require("fs"));
  const getProxyAgent_1 = require_getProxyAgent2();
  const tempy_1 = __importDefault(require_tempy());
  const path_1 = __importDefault(require("path"));
  const debug_1 = __importDefault(require_dist22());
  const hasha_1 = __importDefault(require_hasha2());
  const util_1 = require("util");
  const rimraf_1 = __importDefault(require_rimraf());
  const debug3 = debug_1.default("downloadZip");
  const del = util_1.promisify(rimraf_1.default);
  async function fetchSha256(url) {
    const [zippedSha256, sha256] = [
      (await node_fetch_1.default(`${url}.sha256`, {
        agent: getProxyAgent_1.getProxyAgent(url)
      }).then((res) => res.text())).split(/\s+/)[0],
      (await node_fetch_1.default(`${url.slice(0, url.length - 3)}.sha256`, {
        agent: getProxyAgent_1.getProxyAgent(url.slice(0, url.length - 3))
      }).then((res) => res.text())).split(/\s+/)[0]
    ];
    return {sha256, zippedSha256};
  }
  async function downloadZip(url, target, progressCb) {
    const tmpDir = tempy_1.default.directory();
    const partial = path_1.default.join(tmpDir, "partial");
    const {sha256, zippedSha256} = await fetchSha256(url);
    const result = await p_retry_1.default(async () => {
      try {
        const resp = await node_fetch_1.default(url, {
          compress: false,
          agent: getProxyAgent_1.getProxyAgent(url)
        });
        if (resp.status !== 200) {
          throw new Error(resp.statusText + " " + url);
        }
        const lastModified = resp.headers.get("last-modified");
        const size = parseFloat(resp.headers.get("content-length"));
        const ws = fs_1.default.createWriteStream(partial);
        return await new Promise(async (resolve, reject) => {
          let bytesRead = 0;
          resp.body.on("error", reject).on("data", (chunk) => {
            bytesRead += chunk.length;
            if (size && progressCb) {
              progressCb(bytesRead / size);
            }
          });
          const gunzip = zlib_1.default.createGunzip();
          gunzip.on("error", reject);
          const zipStream = resp.body.pipe(gunzip);
          const zippedHashPromise = hasha_1.default.fromStream(resp.body, {
            algorithm: "sha256"
          });
          const hashPromise = hasha_1.default.fromStream(zipStream, {
            algorithm: "sha256"
          });
          zipStream.pipe(ws);
          ws.on("error", reject).on("close", () => {
            resolve({lastModified, sha256, zippedSha256});
          });
          const hash = await hashPromise;
          const zippedHash = await zippedHashPromise;
          if (zippedHash !== zippedSha256) {
            throw new Error(`sha256 of ${url} (zipped) should be ${zippedSha256} but is ${zippedHash}`);
          }
          if (hash !== sha256) {
            throw new Error(`sha256 of ${url} (uzipped) should be ${sha256} but is ${hash}`);
          }
        });
      } finally {
      }
    }, {
      retries: 2,
      onFailedAttempt: (err) => debug3(err)
    });
    fs_1.default.copyFileSync(partial, target);
    try {
      await del(partial);
      await del(tmpDir);
    } catch (e) {
      debug3(e);
    }
    return result;
  }
  exports2.downloadZip = downloadZip;
});

// ../../node_modules/.pnpm/@prisma/fetch-engine@2.11.0-dev.28/node_modules/@prisma/fetch-engine/dist/util.js
var require_util11 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getDownloadUrl = exports2.getCacheDir = exports2.getRootCacheDir = void 0;
  const os_1 = __importDefault(require("os"));
  const make_dir_1 = __importDefault(require_make_dir());
  const find_cache_dir_1 = __importDefault(require_find_cache_dir());
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const debug_1 = __importDefault(require_dist22());
  const debug3 = debug_1.default("cache-dir");
  async function getRootCacheDir() {
    if (os_1.default.platform() === "win32") {
      const cacheDir = await find_cache_dir_1.default({name: "prisma", create: true});
      if (cacheDir) {
        return cacheDir;
      }
      if (process.env.APPDATA) {
        return path_1.default.join(process.env.APPDATA, "Prisma");
      }
    }
    if (process.env.AWS_LAMBDA_FUNCTION_VERSION) {
      try {
        await make_dir_1.default(`/tmp/prisma-download`);
        return `/tmp/prisma-download`;
      } catch (e) {
        return null;
      }
    }
    return path_1.default.join(os_1.default.homedir(), ".cache/prisma");
  }
  exports2.getRootCacheDir = getRootCacheDir;
  async function getCacheDir(channel, version, platform) {
    const rootCacheDir = await getRootCacheDir();
    if (!rootCacheDir) {
      return null;
    }
    const cacheDir = path_1.default.join(rootCacheDir, channel, version, platform);
    try {
      if (!fs_1.default.existsSync(cacheDir)) {
        await make_dir_1.default(cacheDir);
      }
    } catch (e) {
      debug3("The following error is being caught and just there for debugging:");
      debug3(e);
      return null;
    }
    return cacheDir;
  }
  exports2.getCacheDir = getCacheDir;
  function getDownloadUrl(channel, version, platform, binaryName, extension = ".gz") {
    const finalExtension = platform === "windows" ? `.exe${extension}` : extension;
    const baseUrl = process.env.PRISMA_BINARIES_MIRROR || "https://binaries.prisma.sh";
    return `${baseUrl}/${channel}/${version}/${platform}/${binaryName}${finalExtension}`;
  }
  exports2.getDownloadUrl = getDownloadUrl;
});

// ../../node_modules/.pnpm/@prisma/fetch-engine@2.11.0-dev.28/node_modules/@prisma/fetch-engine/dist/cleanupCache.js
var require_cleanupCache2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.cleanupCache = void 0;
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const util_1 = require_util11();
  const rimraf_1 = __importDefault(require_rimraf());
  const util_2 = require("util");
  const p_map_1 = __importDefault(require_p_map());
  const del = util_2.promisify(rimraf_1.default);
  const readdir = util_2.promisify(fs_1.default.readdir);
  const stat = util_2.promisify(fs_1.default.stat);
  async function cleanupCache(n = 5) {
    try {
      const rootCacheDir = await util_1.getRootCacheDir();
      const channel = "master";
      const cacheDir = path_1.default.join(rootCacheDir, channel);
      const dirs = await readdir(cacheDir);
      const dirsWithMeta = await Promise.all(dirs.map(async (dirName) => {
        const dir = path_1.default.join(cacheDir, dirName);
        const statResult = await stat(dir);
        return {
          dir,
          created: statResult.birthtime
        };
      }));
      dirsWithMeta.sort((a, b) => a.created < b.created ? 1 : -1);
      const dirsToRemove = dirsWithMeta.slice(n);
      await p_map_1.default(dirsToRemove, (dir) => del(dir.dir), {concurrency: 20});
    } catch (e) {
    }
  }
  exports2.cleanupCache = cleanupCache;
});

// ../../node_modules/.pnpm/@prisma/fetch-engine@2.11.0-dev.28/node_modules/@prisma/fetch-engine/dist/flatMap.js
var require_flatMap3 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.flatMap = void 0;
  function flatten(array) {
    return Array.prototype.concat.apply([], array);
  }
  function flatMap(array, callbackFn, thisArg) {
    return flatten(array.map(callbackFn, thisArg));
  }
  exports2.flatMap = flatMap;
});

// ../../node_modules/.pnpm/@prisma/fetch-engine@2.11.0-dev.28/node_modules/@prisma/fetch-engine/dist/getLatestTag.js
var require_getLatestTag2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.urlExists = exports2.getAllUrls = exports2.getLatestTag = void 0;
  const node_fetch_1 = __importDefault(require_lib2());
  const getProxyAgent_1 = require_getProxyAgent2();
  const util_1 = require_util11();
  const get_platform_1 = require_dist21();
  const execa_1 = __importDefault(require_execa2());
  const p_map_1 = __importDefault(require_p_map());
  const chalk_1 = __importDefault(require_source());
  async function getLatestTag() {
    if (process.env.RELEASE_PROMOTE_DEV) {
      const versions = await getVersionHashes(process.env.RELEASE_PROMOTE_DEV);
      console.log(`getLatestTag: taking ${versions.engines} as RELEASE_PROMOTE_DEV has been provided`);
      return versions.engines;
    }
    let branch = await getBranch();
    if (branch !== "master" && (!isPatchBranch(branch) && !branch.startsWith("integration/"))) {
      branch = "master";
    }
    branch = branch.replace(/^integration\//, "");
    console.log({branch}, "after replace");
    let commits = await getCommits(branch);
    if ((!commits || !Array.isArray(commits)) && branch !== "master" && !isPatchBranch(branch)) {
      console.log(`Overwriting branch "${branch}" with "master" as it's not a branch we have binaries for`);
      branch = "master";
      commits = await getCommits(branch);
    }
    if (!Array.isArray(commits)) {
      console.error(commits);
      throw new Error(`Could not fetch commits from github: ${JSON.stringify(commits, null, 2)}`);
    }
    return getFirstFinishedCommit(branch, commits);
  }
  exports2.getLatestTag = getLatestTag;
  function getAllUrls(branch, commit) {
    const urls = [];
    const excludedPlatforms = [
      "freebsd",
      "arm",
      "linux-nixos",
      "openbsd",
      "netbsd",
      "freebsd11",
      "freebsd12"
    ];
    const relevantPlatforms = get_platform_1.platforms.filter((p) => !excludedPlatforms.includes(p));
    for (const platform of relevantPlatforms) {
      for (const engine of [
        "query-engine",
        "introspection-engine",
        "migration-engine",
        "prisma-fmt"
      ]) {
        for (const extension of [
          ".gz",
          ".gz.sha256",
          ".gz.sig",
          ".sig",
          ".sha256"
        ]) {
          const downloadUrl = util_1.getDownloadUrl(branch, commit, platform, engine, extension);
          urls.push(downloadUrl);
        }
      }
    }
    return urls;
  }
  exports2.getAllUrls = getAllUrls;
  async function getFirstFinishedCommit(branch, commits) {
    for (const commit of commits) {
      const urls = getAllUrls(branch, commit);
      const exist = await p_map_1.default(urls, urlExists, {concurrency: 10});
      const hasMissing = exist.some((e) => !e);
      if (!hasMissing) {
        return commit;
      } else {
        const missing = urls.filter((_2, i) => !exist[i]);
        if (missing.length !== urls.length) {
          console.log(`${chalk_1.default.blueBright("info")} The engine commit ${commit} is not yet done. We're skipping it as we're in dev. Missing urls: ${missing.length}`);
        }
      }
    }
  }
  async function urlExists(url) {
    try {
      const res = await node_fetch_1.default(url, {
        method: "HEAD",
        agent: getProxyAgent_1.getProxyAgent(url)
      });
      const headers = fromEntries(res.headers.entries());
      if (res.status > 200) {
      }
      if (parseInt(headers["content-length"]) > 0) {
        return res.status < 300;
      }
    } catch (e) {
    }
    return false;
  }
  exports2.urlExists = urlExists;
  function fromEntries(entries) {
    const result = {};
    for (const [key, value] of entries) {
      result[key] = value;
    }
    return result;
  }
  async function getBranch() {
    if (process.env.PATCH_BRANCH) {
      return process.env.PATCH_BRANCH;
    }
    if (process.env.BUILDKITE_BRANCH) {
      return process.env.BUILDKITE_BRANCH;
    }
    if (process.env.GITHUB_CONTEXT) {
      const context = JSON.parse(process.env.GITHUB_CONTEXT);
      return context.head_ref;
    }
    try {
      const result = await execa_1.default.command("git rev-parse --abbrev-ref HEAD", {
        shell: true,
        stdio: "pipe"
      });
      return result.stdout;
    } catch (e) {
      console.error(e);
    }
    return;
  }
  function isPatchBranch(version) {
    return /^2\.(\d+)\.x/.test(version);
  }
  async function getVersionHashes(npmVersion) {
    return node_fetch_1.default(`https://unpkg.com/@prisma/cli@${npmVersion}/package.json`, {
      headers: {
        accept: "application/json"
      }
    }).then((res) => res.json()).then((pkg2) => ({
      engines: pkg2.prisma.version,
      prisma: pkg2.prisma.prismaCommit
    }));
  }
  async function getCommits(branch) {
    const url = `https://github-cache.prisma.workers.dev/repos/prisma/prisma-engines/commits?sha=${branch}`;
    const result = await node_fetch_1.default(url, {
      agent: getProxyAgent_1.getProxyAgent(url),
      headers: {
        Authorization: process.env.GITHUB_TOKEN ? `token ${process.env.GITHUB_TOKEN}` : void 0
      }
    }).then((res) => res.json());
    if (!Array.isArray(result)) {
      return result;
    }
    const commits = result.map((r) => r.sha);
    return commits;
  }
});

// ../../node_modules/.pnpm/@prisma/fetch-engine@2.11.0-dev.28/node_modules/@prisma/fetch-engine/dist/getHash.js
var require_getHash2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getHash = void 0;
  const crypto_1 = __importDefault(require("crypto"));
  const fs_1 = __importDefault(require("fs"));
  function getHash(filePath) {
    const hash = crypto_1.default.createHash("sha256");
    const input = fs_1.default.createReadStream(filePath);
    return new Promise((resolve, reject) => {
      input.on("readable", () => {
        const data = input.read();
        if (data) {
          hash.update(data);
        } else {
          resolve(hash.digest("hex"));
        }
      });
    });
  }
  exports2.getHash = getHash;
});

// ../../node_modules/.pnpm/@prisma/fetch-engine@2.11.0-dev.28/node_modules/@prisma/fetch-engine/dist/download.js
var require_download2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.plusX = exports2.maybeCopyToTmp = exports2.getBinaryEnvVarPath = exports2.getBinaryName = exports2.checkVersionCommand = exports2.getVersion = exports2.download = void 0;
  const fs_1 = __importDefault(require("fs"));
  const util_1 = require("util");
  const chalk_1 = __importDefault(require_source());
  const path_1 = __importDefault(require("path"));
  const debug_1 = __importDefault(require_dist22());
  const make_dir_1 = __importDefault(require_make_dir());
  const execa_1 = __importDefault(require_execa2());
  const p_filter_1 = __importDefault(require_p_filter());
  const temp_dir_1 = __importDefault(require_temp_dir());
  const log_1 = require_log3();
  const chmod_1 = __importDefault(require_chmod2());
  const copy_1 = require_copy3();
  const get_platform_1 = require_dist21();
  const downloadZip_1 = require_downloadZip2();
  const util_2 = require_util11();
  const cleanupCache_1 = require_cleanupCache2();
  const flatMap_1 = require_flatMap3();
  const getLatestTag_1 = require_getLatestTag2();
  const getHash_1 = require_getHash2();
  const debug3 = debug_1.default("download");
  const writeFile = util_1.promisify(fs_1.default.writeFile);
  const exists = util_1.promisify(fs_1.default.exists);
  const readFile2 = util_1.promisify(fs_1.default.readFile);
  const channel = "master";
  const binaryToEnvVar = {
    "migration-engine": "PRISMA_MIGRATION_ENGINE_BINARY",
    "query-engine": "PRISMA_QUERY_ENGINE_BINARY",
    "introspection-engine": "PRISMA_INTROSPECTION_ENGINE_BINARY",
    "prisma-fmt": "PRISMA_FMT_BINARY"
  };
  async function download(options) {
    var _a, _b;
    const platform = await get_platform_1.getPlatform();
    const os = await get_platform_1.getos();
    if (["arm", "nixos"].includes(os.distro)) {
      console.error(`${chalk_1.default.yellow("Warning")} Precompiled binaries are not available for ${os.distro}.`);
    } else if (["freebsd11", "freebsd12", "openbsd", "netbsd"].includes(platform)) {
      console.error(`${chalk_1.default.yellow("Warning")} Precompiled binaries are not available for ${platform}. Read more about building your own binaries at https://pris.ly/d/build-binaries`);
    }
    if (!options.binaries || Object.values(options.binaries).length === 0) {
      return {};
    }
    if (options.binaryTargets && Array.isArray(options.binaryTargets)) {
      const unknownTargets = options.binaryTargets.filter((t) => !get_platform_1.platforms.includes(t));
      if (unknownTargets.length > 0) {
        throw new Error(`Unknown binaryTargets ${unknownTargets.join(", ")}`);
      }
    }
    options = {
      ...options,
      binaryTargets: (_a = options.binaryTargets) !== null && _a !== void 0 ? _a : [platform],
      version: (_b = options.version) !== null && _b !== void 0 ? _b : "latest",
      binaries: mapKeys(options.binaries, (key) => engineTypeToBinaryType(key, platform))
    };
    const binaryJobs = flatMap_1.flatMap(Object.entries(options.binaries), ([binaryName, targetFolder]) => options.binaryTargets.map((binaryTarget) => {
      const fileName = getBinaryName(binaryName, binaryTarget);
      return {
        binaryName,
        targetFolder,
        binaryTarget,
        fileName,
        targetFilePath: path_1.default.join(targetFolder, fileName),
        envVarPath: getBinaryEnvVarPath(binaryName)
      };
    }));
    if (process.env.BINARY_DOWNLOAD_VERSION) {
      options.version = process.env.BINARY_DOWNLOAD_VERSION;
    }
    if (options.version === "latest") {
      options.version = await getLatestTag_1.getLatestTag();
    }
    if (options.printVersion) {
      console.log(`version: ${options.version}`);
    }
    const binariesToDownload = await p_filter_1.default(binaryJobs, async (job) => {
      const needsToBeDownloaded = await binaryNeedsToBeDownloaded(job, platform, options.version, options.failSilent);
      return !job.envVarPath && (options.ignoreCache || needsToBeDownloaded);
    });
    if (binariesToDownload.length > 0) {
      const cleanupPromise = cleanupCache_1.cleanupCache();
      let finishBar;
      let setProgress;
      if (options.showProgress) {
        const collectiveBar = getCollectiveBar(options);
        finishBar = collectiveBar.finishBar;
        setProgress = collectiveBar.setProgress;
      }
      await Promise.all(binariesToDownload.map((job) => downloadBinary({
        ...job,
        version: options.version,
        failSilent: options.failSilent,
        progressCb: setProgress ? setProgress(job.targetFilePath) : void 0
      })));
      await cleanupPromise;
      if (finishBar) {
        finishBar();
      }
    }
    const binaryPaths = binaryJobsToBinaryPaths(binaryJobs);
    const dir = eval("__dirname");
    if (dir.startsWith("/snapshot/")) {
      for (const engineType in binaryPaths) {
        const binaryTargets = binaryPaths[engineType];
        for (const binaryTarget in binaryTargets) {
          const binaryPath = binaryTargets[binaryTarget];
          binaryTargets[binaryTarget] = await maybeCopyToTmp(binaryPath);
        }
      }
    }
    return binaryPaths;
  }
  exports2.download = download;
  function getCollectiveBar(options) {
    const bar = log_1.getBar(`Downloading Prisma engines for ${options.binaryTargets.map((p) => chalk_1.default.bold(p)).join(" and ")}`);
    const progressMap = {};
    const numDownloads = Object.values(options.binaries).length * Object.values(options.binaryTargets).length;
    const setProgress = (sourcePath) => (progress) => {
      progressMap[sourcePath] = progress;
      const progressValues = Object.values(progressMap);
      const totalProgress = progressValues.reduce((acc, curr) => {
        return acc + curr;
      }, 0) / numDownloads;
      if (options.progressCb) {
        options.progressCb(totalProgress);
      }
      if (bar) {
        bar.update(totalProgress);
      }
    };
    return {
      setProgress,
      finishBar: () => {
        bar.update(1);
        bar.terminate();
      }
    };
  }
  function binaryJobsToBinaryPaths(jobs) {
    return jobs.reduce((acc, job) => {
      if (!acc[job.binaryName]) {
        acc[job.binaryName] = {};
      }
      acc[job.binaryName][job.binaryTarget] = job.envVarPath || job.targetFilePath;
      return acc;
    }, {});
  }
  async function binaryNeedsToBeDownloaded(job, nativePlatform, version, failSilent) {
    const targetExists = await exists(job.targetFilePath);
    const cachedFile = await getCachedBinaryPath({
      ...job,
      version,
      failSilent
    });
    if (cachedFile) {
      const sha256FilePath = cachedFile + ".sha256";
      if (await exists(sha256FilePath)) {
        const sha256File = await readFile2(sha256FilePath, "utf-8");
        const sha256Cache = await getHash_1.getHash(cachedFile);
        if (sha256File === sha256Cache) {
          if (!targetExists) {
            await copy_1.copy(cachedFile, job.targetFilePath);
          }
          const targetSha256 = await getHash_1.getHash(job.targetFilePath);
          if (sha256File !== targetSha256) {
            await copy_1.copy(cachedFile, job.targetFilePath);
          }
          return false;
        } else {
          return true;
        }
      } else {
        return true;
      }
    }
    if (!targetExists) {
      return true;
    }
    if (job.binaryTarget === nativePlatform) {
      const works = await checkVersionCommand(job.targetFilePath);
      return !works;
    }
    return false;
  }
  async function getVersion2(enginePath) {
    const result = await execa_1.default(enginePath, ["--version"]);
    return result.stdout;
  }
  exports2.getVersion = getVersion2;
  async function checkVersionCommand(enginePath) {
    try {
      const version = await getVersion2(enginePath);
      return version.length > 0;
    } catch (e) {
      return false;
    }
  }
  exports2.checkVersionCommand = checkVersionCommand;
  function getBinaryName(binaryName, platform) {
    const extension = platform === "windows" ? ".exe" : "";
    return `${binaryName}-${platform}${extension}`;
  }
  exports2.getBinaryName = getBinaryName;
  async function getCachedBinaryPath({version, binaryTarget, binaryName}) {
    const cacheDir = await util_2.getCacheDir(channel, version, binaryTarget);
    if (!cacheDir) {
      return null;
    }
    const cachedTargetPath = path_1.default.join(cacheDir, binaryName);
    if (!fs_1.default.existsSync(cachedTargetPath)) {
      return null;
    }
    if (version !== "latest") {
      return cachedTargetPath;
    }
    if (await exists(cachedTargetPath)) {
      return cachedTargetPath;
    }
    return null;
  }
  function getBinaryEnvVarPath(binaryName) {
    const envVar = binaryToEnvVar[binaryName];
    if (envVar && process.env[envVar]) {
      const envVarPath = path_1.default.resolve(process.cwd(), process.env[envVar]);
      if (!fs_1.default.existsSync(envVarPath)) {
        throw new Error(`Env var ${chalk_1.default.bold(envVar)} is provided but provided path ${chalk_1.default.underline(process.env[envVar])} can't be resolved.`);
      }
      debug3(`Using env var ${chalk_1.default.bold(envVar)} for binary ${chalk_1.default.bold(binaryName)}, which points to ${chalk_1.default.underline(process.env[envVar])}`);
      return envVarPath;
    }
    return null;
  }
  exports2.getBinaryEnvVarPath = getBinaryEnvVarPath;
  async function downloadBinary(options) {
    const {version, progressCb, targetFilePath, binaryTarget, binaryName} = options;
    const downloadUrl = util_2.getDownloadUrl("all_commits", version, binaryTarget, binaryName);
    const targetDir = path_1.default.dirname(targetFilePath);
    try {
      fs_1.default.accessSync(targetDir, fs_1.default.constants.W_OK);
      await make_dir_1.default(targetDir);
    } catch (e) {
      if (options.failSilent || e.code !== "EACCES") {
        return;
      } else {
        throw new Error(`Can't write to ${targetDir} please make sure you install "@prisma/cli" with the right permissions.`);
      }
    }
    debug3(`Downloading ${downloadUrl} to ${targetFilePath}`);
    if (progressCb) {
      progressCb(0);
    }
    const {sha256, zippedSha256} = await downloadZip_1.downloadZip(downloadUrl, targetFilePath, progressCb);
    if (progressCb) {
      progressCb(1);
    }
    if (process.platform !== "win32") {
      chmod_1.default(targetFilePath);
    }
    await saveFileToCache(options, version, sha256, zippedSha256);
  }
  async function saveFileToCache(job, version, sha256, zippedSha256) {
    const cacheDir = await util_2.getCacheDir(channel, version, job.binaryTarget);
    if (!cacheDir) {
      return;
    }
    const cachedTargetPath = path_1.default.join(cacheDir, job.binaryName);
    const cachedSha256Path = path_1.default.join(cacheDir, job.binaryName + ".sha256");
    const cachedSha256ZippedPath = path_1.default.join(cacheDir, job.binaryName + ".gz.sha256");
    try {
      await copy_1.copy(job.targetFilePath, cachedTargetPath);
      await writeFile(cachedSha256Path, sha256);
      await writeFile(cachedSha256ZippedPath, zippedSha256);
    } catch (e) {
      debug3(e);
    }
  }
  function engineTypeToBinaryType(engineType, binaryTarget) {
    if (engineType === "introspectionEngine") {
      return "introspection-engine";
    }
    if (engineType === "migrationEngine") {
      return "migration-engine";
    }
    if (engineType === "queryEngine") {
      return "query-engine";
    }
    if (engineType === "prismaFmt") {
      return "prisma-fmt";
    }
    if (engineType === "native") {
      return binaryTarget;
    }
    return engineType;
  }
  function mapKeys(obj, mapper) {
    return Object.entries(obj).reduce((acc, [key, value]) => {
      acc[mapper(key)] = value;
      return acc;
    }, {});
  }
  async function maybeCopyToTmp(file) {
    const dir = eval("__dirname");
    if (dir.startsWith("/snapshot/")) {
      const targetDir = path_1.default.join(temp_dir_1.default, "prisma-binaries");
      await make_dir_1.default(targetDir);
      const target = path_1.default.join(targetDir, path_1.default.basename(file));
      const data = await readFile2(file);
      await writeFile(target, data);
      plusX(target);
      return target;
    }
    return file;
  }
  exports2.maybeCopyToTmp = maybeCopyToTmp;
  function plusX(file) {
    const s = fs_1.default.statSync(file);
    const newMode = s.mode | 64 | 8 | 1;
    if (s.mode === newMode) {
      return;
    }
    const base8 = newMode.toString(8).slice(-3);
    fs_1.default.chmodSync(file, base8);
  }
  exports2.plusX = plusX;
});

// ../../node_modules/.pnpm/@prisma/fetch-engine@2.11.0-dev.28/node_modules/@prisma/fetch-engine/dist/index.js
var require_dist24 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getBinaryName = exports2.getProxyAgent = exports2.getAllUrls = exports2.urlExists = exports2.getLatestTag = exports2.download = void 0;
  var download_1 = require_download2();
  Object.defineProperty(exports2, "download", {enumerable: true, get: function() {
    return download_1.download;
  }});
  var getLatestTag_1 = require_getLatestTag2();
  Object.defineProperty(exports2, "getLatestTag", {enumerable: true, get: function() {
    return getLatestTag_1.getLatestTag;
  }});
  Object.defineProperty(exports2, "urlExists", {enumerable: true, get: function() {
    return getLatestTag_1.urlExists;
  }});
  Object.defineProperty(exports2, "getAllUrls", {enumerable: true, get: function() {
    return getLatestTag_1.getAllUrls;
  }});
  var getProxyAgent_1 = require_getProxyAgent2();
  Object.defineProperty(exports2, "getProxyAgent", {enumerable: true, get: function() {
    return getProxyAgent_1.getProxyAgent;
  }});
  var download_2 = require_download2();
  Object.defineProperty(exports2, "getBinaryName", {enumerable: true, get: function() {
    return download_2.getBinaryName;
  }});
});

// ../../node_modules/.pnpm/@prisma/engine-core@2.11.0-dev.28/node_modules/@prisma/engine-core/dist/log.js
var require_log4 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.convertLog = exports2.isRustError = void 0;
  function isRustError(e) {
    return typeof e.is_panic !== "undefined";
  }
  exports2.isRustError = isRustError;
  function convertLog(rustLog) {
    const isQuery = isQueryLog(rustLog.fields);
    const level = isQuery ? "query" : rustLog.level.toLowerCase();
    return {
      ...rustLog,
      level,
      timestamp: new Date(new Date().getFullYear() + " " + rustLog.timestamp)
    };
  }
  exports2.convertLog = convertLog;
  function isQueryLog(fields) {
    return Boolean(fields.query);
  }
});

// ../../node_modules/.pnpm/@prisma/engine-core@2.11.0-dev.28/node_modules/@prisma/engine-core/dist/Engine.js
var require_Engine2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getErrorMessageWithLink = exports2.PrismaClientInitializationError = exports2.PrismaClientRustPanicError = exports2.PrismaClientUnknownRequestError = exports2.PrismaClientKnownRequestError = exports2.getMessage = void 0;
  const log_1 = require_log4();
  const debug_1 = require_dist22();
  const util_1 = require_util10();
  const strip_ansi_1 = __importDefault(require_strip_ansi());
  function getMessage(log) {
    if (typeof log === "string") {
      return log;
    } else if (log_1.isRustError(log)) {
      return log.message;
    } else if (log.fields && log.fields.message) {
      if (log.fields.reason) {
        return `${log.fields.message}: ${log.fields.reason}`;
      }
      return log.fields.message;
    } else {
      return JSON.stringify(log);
    }
  }
  exports2.getMessage = getMessage;
  class PrismaClientKnownRequestError extends Error {
    constructor(message, code, clientVersion, meta) {
      super(message);
      this.code = code;
      this.clientVersion = clientVersion;
      this.meta = meta;
    }
  }
  exports2.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
  class PrismaClientUnknownRequestError extends Error {
    constructor(message, clientVersion) {
      super(message);
      this.clientVersion = clientVersion;
    }
  }
  exports2.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError;
  class PrismaClientRustPanicError extends Error {
    constructor(message, clientVersion) {
      super(message);
      this.clientVersion = clientVersion;
    }
  }
  exports2.PrismaClientRustPanicError = PrismaClientRustPanicError;
  class PrismaClientInitializationError extends Error {
    constructor(message, clientVersion) {
      super(message);
      this.clientVersion = clientVersion;
    }
  }
  exports2.PrismaClientInitializationError = PrismaClientInitializationError;
  function getErrorMessageWithLink({version, platform, title, description}) {
    const logs = normalizeLogs(strip_ansi_1.default(debug_1.getLogs()));
    const moreInfo = description ? `# Description
\`\`\`
${description}
\`\`\`` : "";
    const body = strip_ansi_1.default(`Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | ${process.version.padEnd(19)}| 
| OS              | ${platform.padEnd(19)}|
| Prisma Client   | ${version.padEnd(19)}|

${moreInfo}

## Logs
\`\`\`
${logs}
\`\`\``);
    const url = util_1.getGithubIssueUrl({title, body});
    return `${title}

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

${util_1.link(url)}

If you want the Prisma team to look into it, please open the link above 🙏
`;
  }
  exports2.getErrorMessageWithLink = getErrorMessageWithLink;
  function normalizeLogs(logs) {
    return logs.split("\n").map((l) => {
      return l.replace(/^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)\s*/, "").replace(/\+\d+\s*ms$/, "");
    }).join("\n");
  }
});

// ../../node_modules/.pnpm/@prisma/engine-core@2.11.0-dev.28/node_modules/@prisma/engine-core/dist/byline.js
var require_byline7 = __commonJS((exports2, module3) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.createLineStream = void 0;
  var stream = require("stream");
  var util4 = require("util");
  function byline(readStream, options) {
    return module3.exports.createStream(readStream, options);
  }
  exports2.default = byline;
  module3.exports.createStream = function(readStream, options) {
    if (readStream) {
      return createLineStream(readStream, options);
    } else {
      return new LineStream(options);
    }
  };
  function createLineStream(readStream, options) {
    if (!readStream) {
      throw new Error("expected readStream");
    }
    if (!readStream.readable) {
      throw new Error("readStream must be readable");
    }
    var ls = new LineStream(options);
    readStream.pipe(ls);
    return ls;
  }
  exports2.createLineStream = createLineStream;
  module3.exports.LineStream = LineStream;
  function LineStream(options) {
    stream.Transform.call(this, options);
    options = options || {};
    this._readableState.objectMode = true;
    this._lineBuffer = [];
    this._keepEmptyLines = options.keepEmptyLines || false;
    this._lastChunkEndedWithCR = false;
    this.on("pipe", function(src) {
      if (!this.encoding) {
        if (src instanceof stream.Readable) {
          this.encoding = src._readableState.encoding;
        }
      }
    });
  }
  util4.inherits(LineStream, stream.Transform);
  LineStream.prototype._transform = function(chunk, encoding, done) {
    encoding = encoding || "utf8";
    if (Buffer.isBuffer(chunk)) {
      if (encoding == "buffer") {
        chunk = chunk.toString();
        encoding = "utf8";
      } else {
        chunk = chunk.toString(encoding);
      }
    }
    this._chunkEncoding = encoding;
    var lines = chunk.split(/\r\n|\r|\n/g);
    if (this._lastChunkEndedWithCR && chunk[0] == "\n") {
      lines.shift();
    }
    if (this._lineBuffer.length > 0) {
      this._lineBuffer[this._lineBuffer.length - 1] += lines[0];
      lines.shift();
    }
    this._lastChunkEndedWithCR = chunk[chunk.length - 1] == "\r";
    this._lineBuffer = this._lineBuffer.concat(lines);
    this._pushBuffer(encoding, 1, done);
  };
  LineStream.prototype._pushBuffer = function(encoding, keep, done) {
    while (this._lineBuffer.length > keep) {
      var line = this._lineBuffer.shift();
      if (this._keepEmptyLines || line.length > 0) {
        if (!this.push(this._reencode(line, encoding))) {
          var self2 = this;
          setImmediate(function() {
            self2._pushBuffer(encoding, keep, done);
          });
          return;
        }
      }
    }
    done();
  };
  LineStream.prototype._flush = function(done) {
    this._pushBuffer(this._chunkEncoding, 0, done);
  };
  LineStream.prototype._reencode = function(line, chunkEncoding) {
    if (this.encoding && this.encoding != chunkEncoding) {
      return Buffer.from(line, chunkEncoding).toString(this.encoding);
    } else if (this.encoding) {
      return line;
    } else {
      return Buffer.from(line, chunkEncoding);
    }
  };
});

// ../../node_modules/.pnpm/@prisma/engine-core@2.11.0-dev.28/node_modules/@prisma/engine-core/dist/omit.js
var require_omit2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.omit = void 0;
  function omit(obj, keys) {
    return Object.keys(obj).filter((key) => !keys.includes(key)).reduce((result, key) => {
      result[key] = obj[key];
      return result;
    }, {});
  }
  exports2.omit = omit;
});

// ../../node_modules/.pnpm/@prisma/engine-core@2.11.0-dev.28/node_modules/@prisma/engine-core/dist/printGeneratorConfig.js
var require_printGeneratorConfig2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.printDatamodelObject = exports2.GeneratorConfigClass = exports2.printGeneratorConfig = void 0;
  const indent_string_1 = __importDefault(require_indent_string());
  function printGeneratorConfig(config) {
    return String(new GeneratorConfigClass(config));
  }
  exports2.printGeneratorConfig = printGeneratorConfig;
  class GeneratorConfigClass {
    constructor(config) {
      this.config = config;
    }
    toString() {
      const {config} = this;
      const obj = JSON.parse(JSON.stringify({
        provider: config.provider,
        binaryTargets: config.binaryTargets || void 0
      }));
      return `generator ${config.name} {
${indent_string_1.default(printDatamodelObject2(obj), 2)}
}`;
    }
  }
  exports2.GeneratorConfigClass = GeneratorConfigClass;
  function printDatamodelObject2(obj) {
    const maxLength = Object.keys(obj).reduce((max, curr) => Math.max(max, curr.length), 0);
    return Object.entries(obj).map(([key, value]) => `${key.padEnd(maxLength)} = ${niceStringify(value)}`).join("\n");
  }
  exports2.printDatamodelObject = printDatamodelObject2;
  function niceStringify(value) {
    return JSON.parse(JSON.stringify(value, (_2, value2) => {
      if (Array.isArray(value2)) {
        return `[${value2.map((element) => JSON.stringify(element)).join(", ")}]`;
      }
      return JSON.stringify(value2);
    }));
  }
});

// ../../node_modules/.pnpm/undici@2.1.1/node_modules/undici/lib/node/http-parser.js
var require_http_parser2 = __commonJS((exports2, module3) => {
  "use strict";
  const {HTTPParser} = process.binding("http_parser");
  module3.exports = HTTPParser;
});

// ../../node_modules/.pnpm/undici@2.1.1/node_modules/undici/lib/core/symbols.js
var require_symbols2 = __commonJS((exports2, module3) => {
  module3.exports = {
    kUrl: Symbol("url"),
    kWriting: Symbol("writing"),
    kResuming: Symbol("resuming"),
    kQueue: Symbol("queue"),
    kConnect: Symbol("connect"),
    kResume: Symbol("resume"),
    kPause: Symbol("pause"),
    kSocketTimeout: Symbol("socket timeout"),
    kIdleTimeout: Symbol("idle timeout"),
    kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
    kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
    kKeepAliveTimeout: Symbol("keep alive timeout"),
    kKeepAlive: Symbol("keep alive"),
    kTLSServerName: Symbol("server name"),
    kHost: Symbol("host"),
    kTLSOpts: Symbol("TLS Options"),
    kClosed: Symbol("closed"),
    kNeedDrain: Symbol("need drain"),
    kReset: Symbol("reset"),
    kDestroyed: Symbol("destroyed"),
    kMaxHeadersSize: Symbol("max headers size"),
    kHeadersTimeout: Symbol("headers timeout"),
    kRunningIdx: Symbol("running index"),
    kPendingIdx: Symbol("pending index"),
    kError: Symbol("error"),
    kClient: Symbol("client"),
    kParser: Symbol("parser"),
    kOnDestroyed: Symbol("destroy callbacks"),
    kPipelining: Symbol("pipelinig"),
    kRetryDelay: Symbol("retry delay"),
    kSocketPath: Symbol("socket path"),
    kSocket: Symbol("socket"),
    kRetryTimeout: Symbol("retry timeout"),
    kTLSSession: Symbol("tls session cache")
  };
});

// ../../node_modules/.pnpm/undici@2.1.1/node_modules/undici/lib/core/util.js
var require_util12 = __commonJS((exports2, module3) => {
  "use strict";
  const assert = require("assert");
  const {kDestroyed} = require_symbols2();
  const {IncomingMessage} = require("http");
  const util4 = require("util");
  function nop() {
  }
  function isStream(body) {
    return !!(body && typeof body.on === "function");
  }
  function bodyLength(body) {
    if (body && typeof body.on === "function") {
      const state = body._readableState;
      return state && state.ended === true && Number.isFinite(state.length) ? state.length : null;
    }
    assert(!body || Number.isFinite(body.byteLength));
    return body ? body.length : 0;
  }
  function isDestroyed(stream) {
    return !stream || !!(stream.destroyed || stream[kDestroyed]);
  }
  function destroy(stream, err) {
    if (!isStream(stream) || isDestroyed(stream)) {
      return;
    }
    if (typeof stream.destroy === "function") {
      if (err || Object.getPrototypeOf(stream).constructor !== IncomingMessage) {
        stream.destroy(err);
      }
    } else if (err) {
      process.nextTick((stream2, err2) => {
        stream2.emit("error", err2);
      }, stream, err);
    }
    if (stream.destroyed !== true) {
      stream[kDestroyed] = true;
    }
  }
  const KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)s/;
  function parseKeepAliveTimeout(val) {
    const m = val.match(KEEPALIVE_TIMEOUT_EXPR);
    return m ? parseInt(m[1]) * 1e3 : null;
  }
  function parseHeaders(headers) {
    const obj = {};
    for (var i = 0; i < headers.length; i += 2) {
      var key = headers[i].toLowerCase();
      var val = obj[key];
      if (!val) {
        obj[key] = headers[i + 1];
      } else {
        if (!Array.isArray(val)) {
          val = [val];
          obj[key] = val;
        }
        val.push(headers[i + 1]);
      }
    }
    return obj;
  }
  function isBuffer(buffer) {
    return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);
  }
  function errnoException(code, syscall) {
    const name = util4.getSystemErrorName(code);
    const err = new Error(`${syscall} ${name}`);
    err.errno = err;
    err.code = code;
    err.syscall = syscall;
    return err;
  }
  module3.exports = {
    nop,
    errnoException,
    isStream,
    isDestroyed,
    parseHeaders,
    parseKeepAliveTimeout,
    destroy,
    bodyLength,
    isBuffer
  };
});

// ../../node_modules/.pnpm/undici@2.1.1/node_modules/undici/lib/core/errors.js
var require_errors3 = __commonJS((exports2, module3) => {
  "use strict";
  class UndiciError extends Error {
    constructor(message) {
      super(message);
      this.name = "UndiciError";
      this.code = "UND_ERR";
    }
  }
  class HeadersTimeoutError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, HeadersTimeoutError);
      this.name = "HeadersTimeoutError";
      this.message = message || "Headers Timeout Error";
      this.code = "UND_ERR_HEADERS_TIMEOUT";
    }
  }
  class SocketTimeoutError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, SocketTimeoutError);
      this.name = "SocketTimeoutError";
      this.message = message || "Socket Timeout Error";
      this.code = "UND_ERR_SOCKET_TIMEOUT";
    }
  }
  class RequestTimeoutError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, RequestTimeoutError);
      this.name = "RequestTimeoutError";
      this.message = message || "Request Timeout Error";
      this.code = "UND_ERR_REQUEST_TIMEOUT";
    }
  }
  class InvalidArgumentError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, InvalidArgumentError);
      this.name = "InvalidArgumentError";
      this.message = message || "Invalid Argument Error";
      this.code = "UND_ERR_INVALID_ARG";
    }
  }
  class InvalidReturnValueError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, InvalidReturnValueError);
      this.name = "InvalidReturnValueError";
      this.message = message || "Invalid Return Value Error";
      this.code = "UND_ERR_INVALID_RETURN_VALUE";
    }
  }
  class RequestAbortedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, RequestAbortedError);
      this.name = "RequestAbortedError";
      this.message = message || "Request aborted";
      this.code = "UND_ERR_ABORTED";
    }
  }
  class InformationalError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, InformationalError);
      this.name = "InformationalError";
      this.message = message || "Request information";
      this.code = "UND_ERR_INFO";
    }
  }
  class ContentLengthMismatchError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ContentLengthMismatchError);
      this.name = "ContentLengthMismatchError";
      this.message = message || "Request body length does not match content-length header";
      this.code = "UND_ERR_CONTENT_LENGTH_MISMATCH";
    }
  }
  class TrailerMismatchError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, TrailerMismatchError);
      this.name = "TrailerMismatchError";
      this.message = message || "Trailers does not match trailer header";
      this.code = "UND_ERR_TRAILER_MISMATCH";
    }
  }
  class ClientDestroyedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ClientDestroyedError);
      this.name = "ClientDestroyedError";
      this.message = message || "The client is destroyed";
      this.code = "UND_ERR_DESTROYED";
    }
  }
  class ClientClosedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, ClientClosedError);
      this.name = "ClientClosedError";
      this.message = message || "The client is closed";
      this.code = "UND_ERR_CLOSED";
    }
  }
  class SocketError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, SocketError);
      this.name = "SocketError";
      this.message = message || "Socket error";
      this.code = "UND_ERR_SOCKET";
    }
  }
  class NotSupportedError extends UndiciError {
    constructor(message) {
      super(message);
      Error.captureStackTrace(this, NotSupportedError);
      this.name = "NotSupportedError";
      this.message = message || "Not supported error";
      this.code = "UND_ERR_NOT_SUPPORTED";
    }
  }
  module3.exports = {
    UndiciError,
    SocketTimeoutError,
    HeadersTimeoutError,
    RequestTimeoutError,
    ContentLengthMismatchError,
    TrailerMismatchError,
    InvalidArgumentError,
    InvalidReturnValueError,
    RequestAbortedError,
    ClientDestroyedError,
    ClientClosedError,
    InformationalError,
    SocketError,
    NotSupportedError
  };
});

// ../../node_modules/.pnpm/undici@2.1.1/node_modules/undici/lib/core/request.js
var require_request3 = __commonJS((exports2, module3) => {
  "use strict";
  const {
    InvalidArgumentError,
    RequestAbortedError,
    RequestTimeoutError,
    NotSupportedError
  } = require_errors3();
  const util4 = require_util12();
  const assert = require("assert");
  const kRequestTimeout = Symbol("request timeout");
  const kTimeout = Symbol("timeout");
  const kHandler = Symbol("handler");
  class Request2 {
    constructor({
      path: path19,
      method,
      body,
      headers,
      idempotent,
      upgrade,
      requestTimeout
    }, handler) {
      if (typeof path19 !== "string" || path19[0] !== "/") {
        throw new InvalidArgumentError("path must be a valid path");
      }
      if (typeof method !== "string") {
        throw new InvalidArgumentError("method must be a string");
      }
      if (upgrade && typeof upgrade !== "string") {
        throw new InvalidArgumentError("upgrade must be a string");
      }
      if (requestTimeout != null && (!Number.isInteger(requestTimeout) || requestTimeout < 0)) {
        throw new InvalidArgumentError("requestTimeout must be a positive integer or zero");
      }
      this.method = method;
      if (body == null) {
        this.body = null;
      } else if (util4.isStream(body)) {
        this.body = body;
      } else if (util4.isBuffer(body)) {
        this.body = body.length ? body : null;
      } else if (typeof body === "string") {
        this.body = body.length ? Buffer.from(body) : null;
      } else {
        throw new InvalidArgumentError("body must be a string, a Buffer or a Readable stream");
      }
      this.aborted = false;
      this.upgrade = upgrade;
      this.path = path19;
      this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
      this.host = null;
      this.contentLength = null;
      this.headers = "";
      if (Array.isArray(headers)) {
        if (headers.length % 2 !== 0) {
          throw new InvalidArgumentError("headers array must be even");
        }
        for (let i = 0; i < headers.length; i += 2) {
          processHeader(this, headers[i + 0], headers[i + 1]);
        }
      } else if (headers && typeof headers === "object") {
        for (const [key, val] of Object.entries(headers)) {
          processHeader(this, key, val);
        }
      } else if (headers != null) {
        throw new InvalidArgumentError("headers must be an object or an array");
      }
      this[kRequestTimeout] = requestTimeout != null ? requestTimeout : 3e4;
      this[kTimeout] = null;
      this[kHandler] = handler;
    }
    onConnect(resume) {
      assert(!this.aborted);
      const abort = (err) => {
        if (!this.aborted) {
          this.onError(err || new RequestAbortedError());
          resume();
        }
      };
      if (this[kRequestTimeout]) {
        if (this[kTimeout]) {
          clearTimeout(this[kTimeout]);
        }
        this[kTimeout] = setTimeout((abort2) => {
          abort2(new RequestTimeoutError());
        }, this[kRequestTimeout], abort);
      }
      this[kHandler].onConnect(abort);
    }
    onHeaders(statusCode, headers, resume) {
      assert(!this.aborted);
      clearRequestTimeout(this);
      return this[kHandler].onHeaders(statusCode, headers, resume);
    }
    onBody(chunk, offset, length) {
      assert(!this.aborted);
      return this[kHandler].onData(chunk.slice(offset, offset + length));
    }
    onUpgrade(statusCode, headers, socket) {
      assert(!this.aborted);
      clearRequestTimeout(this);
      this[kHandler].onUpgrade(statusCode, headers, socket);
    }
    onComplete(trailers) {
      assert(!this.aborted);
      clearRequestTimeout(this);
      this[kHandler].onComplete(trailers);
    }
    onError(err) {
      if (this.aborted) {
        return;
      }
      this.aborted = true;
      clearRequestTimeout(this);
      this[kHandler].onError(err);
    }
  }
  function processHeader(request, key, val) {
    if (val && typeof val === "object") {
      throw new InvalidArgumentError(`invalid ${key} header`);
    } else if (val === void 0) {
      return;
    }
    if (request.host === null && key.length === 4 && key.toLowerCase() === "host") {
      request.host = val;
      request.headers += `${key}: ${val}\r
`;
    } else if (request.contentLength === null && key.length === 14 && key.toLowerCase() === "content-length") {
      request.contentLength = parseInt(val);
      if (!Number.isFinite(request.contentLength)) {
        throw new InvalidArgumentError("invalid content-length header");
      }
    } else if (key.length === 17 && key.toLowerCase() === "transfer-encoding") {
      throw new InvalidArgumentError("invalid transfer-encoding header");
    } else if (key.length === 10 && key.toLowerCase() === "connection") {
      throw new InvalidArgumentError("invalid connection header");
    } else if (key.length === 10 && key.toLowerCase() === "keep-alive") {
      throw new InvalidArgumentError("invalid keep-alive header");
    } else if (key.length === 7 && key.toLowerCase() === "upgrade") {
      throw new InvalidArgumentError("invalid upgrade header");
    } else if (key.length === 6 && key.toLowerCase() === "expect") {
      throw new NotSupportedError("expect header not supported");
    } else {
      request.headers += `${key}: ${val}\r
`;
    }
  }
  function clearRequestTimeout(request) {
    const {[kTimeout]: timeout} = request;
    if (timeout) {
      request[kTimeout] = null;
      clearTimeout(timeout);
    }
  }
  module3.exports = Request2;
});

// ../../node_modules/.pnpm/undici@2.1.1/node_modules/undici/lib/core/client.js
var require_client3 = __commonJS((exports2, module3) => {
  "use strict";
  const {URL: URL2} = require("url");
  const net = require("net");
  const tls = require("tls");
  const HTTPParser = require_http_parser2();
  const EventEmitter = require("events");
  const assert = require("assert");
  const util4 = require_util12();
  const Request2 = require_request3();
  const {
    ContentLengthMismatchError,
    SocketTimeoutError,
    TrailerMismatchError,
    InvalidArgumentError,
    RequestAbortedError,
    ClientDestroyedError,
    ClientClosedError,
    HeadersTimeoutError,
    SocketError,
    InformationalError
  } = require_errors3();
  const {
    kUrl,
    kReset,
    kPause,
    kHost,
    kResume,
    kClient,
    kParser,
    kConnect,
    kResuming,
    kWriting,
    kQueue,
    kNeedDrain,
    kTLSServerName,
    kIdleTimeout,
    kSocketTimeout,
    kTLSOpts,
    kClosed,
    kDestroyed,
    kPendingIdx,
    kRunningIdx,
    kError,
    kOnDestroyed,
    kPipelining,
    kRetryDelay,
    kRetryTimeout,
    kSocket,
    kSocketPath,
    kKeepAliveTimeout,
    kMaxHeadersSize,
    kHeadersTimeout,
    kKeepAliveMaxTimeout,
    kKeepAliveTimeoutThreshold,
    kKeepAlive,
    kTLSSession
  } = require_symbols2();
  const kHostHeader = Symbol("host header");
  const nodeVersions = process.version.split(".");
  const nodeMajorVersion = parseInt(nodeVersions[0].slice(1));
  const nodeMinorVersion = parseInt(nodeVersions[1]);
  const insecureHTTPParser = process.execArgv.includes("--insecure-http-parser");
  class Client extends EventEmitter {
    constructor(url, {
      maxHeaderSize,
      headersTimeout,
      socketTimeout,
      idleTimeout,
      maxKeepAliveTimeout,
      keepAlive,
      keepAliveMaxTimeout = maxKeepAliveTimeout,
      keepAliveTimeoutThreshold,
      socketPath,
      pipelining,
      tls: tls2
    } = {}) {
      super();
      if (typeof url === "string") {
        url = new URL2(url);
      }
      if (!url || typeof url !== "object") {
        throw new InvalidArgumentError("invalid url");
      }
      if (url.port != null && url.port !== "" && !Number.isFinite(parseInt(url.port))) {
        throw new InvalidArgumentError("invalid port");
      }
      if (socketPath != null && typeof socketPath !== "string") {
        throw new InvalidArgumentError("invalid socketPath");
      }
      if (url.hostname != null && typeof url.hostname !== "string") {
        throw new InvalidArgumentError("invalid hostname");
      }
      if (!/https?/.test(url.protocol)) {
        throw new InvalidArgumentError("invalid protocol");
      }
      if (/\/.+/.test(url.pathname) || url.search || url.hash) {
        throw new InvalidArgumentError("invalid url");
      }
      if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
        throw new InvalidArgumentError("invalid maxHeaderSize");
      }
      if (socketTimeout != null && !Number.isFinite(socketTimeout)) {
        throw new InvalidArgumentError("invalid socketTimeout");
      }
      if (idleTimeout != null && (!Number.isFinite(idleTimeout) || idleTimeout <= 0)) {
        throw new InvalidArgumentError("invalid idleTimeout");
      }
      if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
        throw new InvalidArgumentError("invalid keepAliveMaxTimeout");
      }
      if (keepAlive != null && typeof keepAlive !== "boolean") {
        throw new InvalidArgumentError("invalid keepAlive");
      }
      if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
        throw new InvalidArgumentError("invalid keepAliveTimeoutThreshold");
      }
      if (headersTimeout != null && !Number.isFinite(headersTimeout)) {
        throw new InvalidArgumentError("invalid headersTimeout");
      }
      this[kSocket] = null;
      this[kReset] = false;
      this[kPipelining] = pipelining || 1;
      this[kMaxHeadersSize] = maxHeaderSize || 16384;
      this[kHeadersTimeout] = headersTimeout == null ? 3e4 : headersTimeout;
      this[kUrl] = url;
      this[kSocketPath] = socketPath;
      this[kSocketTimeout] = socketTimeout == null ? 3e4 : socketTimeout;
      this[kIdleTimeout] = idleTimeout == null ? 4e3 : idleTimeout;
      this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 6e5 : keepAliveMaxTimeout;
      this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
      this[kKeepAliveTimeout] = this[kIdleTimeout];
      this[kKeepAlive] = keepAlive == null ? true : keepAlive;
      this[kClosed] = false;
      this[kDestroyed] = false;
      this[kTLSServerName] = tls2 && tls2.servername || null;
      this[kHost] = null;
      this[kTLSOpts] = tls2;
      this[kRetryDelay] = 0;
      this[kRetryTimeout] = null;
      this[kOnDestroyed] = [];
      this[kWriting] = false;
      this[kResuming] = 0;
      this[kNeedDrain] = 0;
      this[kResume] = () => {
        if (this[kResuming] === 0) {
          resume(this, true);
        }
      };
      this[kTLSSession] = null;
      this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}\r
`;
      this[kQueue] = [];
      this[kRunningIdx] = 0;
      this[kPendingIdx] = 0;
    }
    get pipelining() {
      return this[kPipelining];
    }
    set pipelining(value) {
      this[kPipelining] = value;
      resume(this, true);
    }
    get connected() {
      return this[kSocket] && this[kSocket].connecting !== true && (this[kSocket].authorized !== false || this[kSocket].authorizationError) && !this[kSocket].destroyed;
    }
    get pending() {
      return this[kQueue].length - this[kPendingIdx];
    }
    get running() {
      return this[kPendingIdx] - this[kRunningIdx];
    }
    get size() {
      return this[kQueue].length - this[kRunningIdx];
    }
    get busy() {
      return this[kReset] || this[kWriting] || this.pending > 0;
    }
    get destroyed() {
      return this[kDestroyed];
    }
    get closed() {
      return this[kClosed];
    }
    [kConnect](cb) {
      connect(this);
      this.once("connect", cb);
    }
    dispatch(opts, handler) {
      try {
        const request = new Request2(opts, handler);
        if (this[kDestroyed]) {
          throw new ClientDestroyedError();
        }
        if (this[kClosed]) {
          throw new ClientClosedError();
        }
        this[kQueue].push(request);
        if (this[kResuming]) {
        } else if (util4.isStream(request.body)) {
          this[kResuming] = 1;
          process.nextTick(resume, this);
        } else {
          resume(this, true);
        }
      } catch (err) {
        handler.onError(err);
      }
    }
    close(callback) {
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          this.close((err, data) => {
            return err ? reject(err) : resolve(data);
          });
        });
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      if (this[kDestroyed]) {
        process.nextTick(callback, new ClientDestroyedError(), null);
        return;
      }
      this[kClosed] = true;
      if (!this.size) {
        this.destroy(callback);
      } else {
        this[kOnDestroyed].push(callback);
      }
    }
    destroy(err, callback) {
      if (typeof err === "function") {
        callback = err;
        err = null;
      }
      if (callback === void 0) {
        return new Promise((resolve, reject) => {
          this.destroy(err, (err2, data) => {
            return err2 ? reject(err2) : resolve(data);
          });
        });
      }
      if (typeof callback !== "function") {
        throw new InvalidArgumentError("invalid callback");
      }
      if (this[kDestroyed]) {
        if (this[kOnDestroyed]) {
          this[kOnDestroyed].push(callback);
        } else {
          process.nextTick(callback, null, null);
        }
        return;
      }
      if (!err) {
        err = new ClientDestroyedError();
      }
      for (const request of this[kQueue].splice(this[kPendingIdx])) {
        request.onError(err);
      }
      clearTimeout(this[kRetryTimeout]);
      this[kRetryTimeout] = null;
      this[kClosed] = true;
      this[kDestroyed] = true;
      this[kOnDestroyed].push(callback);
      const onDestroyed = () => {
        const callbacks = this[kOnDestroyed];
        this[kOnDestroyed] = null;
        for (const callback2 of callbacks) {
          callback2(null, null);
        }
      };
      if (!this[kSocket]) {
        process.nextTick(onDestroyed);
      } else {
        util4.destroy(this[kSocket].on("close", onDestroyed), err);
      }
      resume(this);
    }
  }
  class Parser extends HTTPParser {
    constructor(client, socket) {
      if (nodeMajorVersion === 12 && nodeMinorVersion < 19) {
        super();
        this.initialize(HTTPParser.RESPONSE, {}, client[kHeadersTimeout]);
      } else if (nodeMajorVersion === 12 && nodeMinorVersion >= 19) {
        super();
        this.initialize(HTTPParser.RESPONSE, {}, client[kMaxHeadersSize], client[kHeadersTimeout]);
      } else if (nodeMajorVersion > 12) {
        super();
        this.initialize(HTTPParser.RESPONSE, {}, client[kMaxHeadersSize], insecureHTTPParser, client[kHeadersTimeout]);
      } else {
        super(HTTPParser.RESPONSE, false);
      }
      this.client = client;
      this.socket = socket;
      this.statusCode = null;
      this.upgrade = false;
      this.headers = null;
      this.shouldKeepAlive = false;
      this.read = 0;
      this.request = null;
    }
    [HTTPParser.kOnTimeout]() {
      if (this.statusCode) {
        this.socket._unrefTimer();
      } else {
        util4.destroy(this.socket, new HeadersTimeoutError());
      }
    }
    [HTTPParser.kOnHeaders](rawHeaders) {
      if (this.headers) {
        Array.prototype.push.apply(this.headers, rawHeaders);
      } else {
        this.headers = rawHeaders;
      }
    }
    [HTTPParser.kOnExecute](ret) {
      const {upgrade, socket} = this;
      if (!Number.isFinite(ret)) {
        assert(ret instanceof Error);
        util4.destroy(socket, ret);
        return;
      }
      socket._unrefTimer();
      if (upgrade && !socket.destroyed) {
        const {client, headers, statusCode, request} = this;
        assert(!socket.destroyed);
        assert(socket === client[kSocket]);
        assert(!socket.isPaused());
        assert(request.upgrade || request.method === "CONNECT");
        this.headers = null;
        this.statusCode = null;
        this.request = null;
        socket._readableState.flowing = null;
        socket.unshift(this.getCurrentBuffer().slice(ret));
        try {
          request.onUpgrade(statusCode, headers, socket);
        } catch (err) {
          util4.destroy(socket, err);
          request.onError(err);
        }
        if (!socket.destroyed && !request.aborted) {
          detachSocket(socket);
          client[kSocket] = null;
          client[kQueue][client[kRunningIdx]++] = null;
          client.emit("disconnect", new InformationalError("upgrade"));
          setImmediate(() => this.close());
          resume(client);
        }
      }
    }
    [HTTPParser.kOnHeadersComplete](versionMajor, versionMinor, rawHeaders, method, url, statusCode, statusMessage, upgrade, shouldKeepAlive) {
      const {client, socket} = this;
      const request = client[kQueue][client[kRunningIdx]];
      if (socket.destroyed) {
        return;
      }
      assert(!this.upgrade);
      assert(this.statusCode < 200);
      if (statusCode === 100) {
        util4.destroy(socket, new SocketError("bad response"));
        return 1;
      }
      if (upgrade !== Boolean(request.upgrade)) {
        util4.destroy(socket, new SocketError("bad upgrade"));
        return 1;
      }
      if (this.headers) {
        Array.prototype.push.apply(this.headers, rawHeaders);
      } else {
        this.headers = rawHeaders;
      }
      this.statusCode = statusCode;
      this.shouldKeepAlive = shouldKeepAlive;
      this.request = request;
      if (upgrade || request.method === "CONNECT") {
        this.unconsume();
        this.upgrade = true;
        return 2;
      }
      let keepAlive;
      let trailers;
      for (let n = 0; n < this.headers.length; n += 2) {
        const key = this.headers[n + 0];
        const val = this.headers[n + 1];
        if (!keepAlive && key.length === 10 && key.toLowerCase() === "keep-alive") {
          keepAlive = val;
        } else if (!trailers && key.length === 7 && key.toLowerCase() === "trailer") {
          trailers = val;
        }
      }
      const {headers} = this;
      this.headers = null;
      this.trailers = trailers ? trailers.toLowerCase().split(/,\s*/) : null;
      if (shouldKeepAlive && client[kKeepAlive]) {
        const keepAliveTimeout = keepAlive ? util4.parseKeepAliveTimeout(keepAlive) : null;
        if (keepAliveTimeout != null) {
          const timeout = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold], client[kKeepAliveMaxTimeout]);
          if (timeout < 1e3) {
            client[kReset] = true;
          } else {
            client[kKeepAliveTimeout] = timeout;
          }
        } else {
          client[kKeepAliveTimeout] = client[kIdleTimeout];
        }
      } else {
        client[kReset] = true;
      }
      try {
        if (request.onHeaders(statusCode, headers, statusCode < 200 ? null : socket[kResume]) === false) {
          socket[kPause]();
        }
      } catch (err) {
        util4.destroy(socket, err);
        return 1;
      }
      return request.method === "HEAD" || statusCode < 200 ? 1 : 0;
    }
    [HTTPParser.kOnBody](chunk, offset, length) {
      const {socket, statusCode, request} = this;
      if (socket.destroyed) {
        return;
      }
      assert(statusCode >= 200);
      try {
        if (request.onBody(chunk, offset, length) === false) {
          socket[kPause]();
        }
      } catch (err) {
        util4.destroy(socket, err);
      }
    }
    [HTTPParser.kOnMessageComplete]() {
      const {client, socket, statusCode, headers, upgrade, request, trailers} = this;
      if (socket.destroyed) {
        return;
      }
      assert(statusCode >= 100);
      if (upgrade) {
        assert(statusCode < 300 || request.method === "CONNECT");
        return;
      }
      this.statusCode = null;
      this.headers = null;
      this.request = null;
      this.trailers = null;
      if (statusCode < 200) {
        assert(!socket.isPaused());
        return;
      }
      try {
        if (trailers) {
          if (!headers) {
            throw new TrailerMismatchError();
          }
          for (const trailer of trailers) {
            let found = false;
            for (let n = 0; n < headers.length; n += 2) {
              const key = headers[n + 0];
              if (key.length === trailer.length && key.toLowerCase() === trailer.toLowerCase()) {
                found = true;
                break;
              }
            }
            if (!found) {
              throw new TrailerMismatchError();
            }
          }
        }
        request.onComplete(headers);
      } catch (err) {
        util4.destroy(socket, err);
        return;
      }
      client[kQueue][client[kRunningIdx]++] = null;
      if (client[kWriting]) {
        util4.destroy(socket, new InformationalError("reset"));
      } else if (!this.shouldKeepAlive) {
        util4.destroy(socket, new InformationalError("reset"));
      } else if (client[kReset] && !client.running) {
        util4.destroy(socket, new InformationalError("reset"));
      } else {
        socket[kResume]();
        resume(client);
      }
    }
    destroy() {
      this.unconsume();
      setImmediate((self2) => self2.close(), this);
    }
  }
  function onSocketConnect() {
    const {[kClient]: client} = this;
    assert(!this.destroyed);
    assert(!client[kWriting]);
    assert(!client[kRetryTimeout]);
    client[kReset] = false;
    client[kRetryDelay] = 0;
    client.emit("connect");
    resume(client);
  }
  function onSocketTimeout() {
    util4.destroy(this, new SocketTimeoutError());
  }
  function onSocketError(err) {
    const {[kClient]: client} = this;
    this[kError] = err;
    if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
      assert(!client.running);
      while (client.pending && client[kQueue][client[kPendingIdx]].host === client[kHost]) {
        client[kQueue][client[kPendingIdx]++].onError(err);
      }
    } else if (!client.running && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
      assert(client[kPendingIdx] === client[kRunningIdx]);
      for (const request of client[kQueue].splice(client[kRunningIdx])) {
        request.onError(err);
      }
    }
  }
  function onSocketEnd() {
    util4.destroy(this, new SocketError("other side closed"));
  }
  function onSocketClose() {
    const {[kClient]: client, [kParser]: parser} = this;
    const err = this[kError] || new SocketError("closed");
    client[kSocket] = null;
    parser.destroy();
    if (err.code !== "UND_ERR_INFO") {
      client[kTLSSession] = null;
    }
    if (client[kDestroyed]) {
      assert(!client.pending);
      for (const request of client[kQueue].splice(client[kRunningIdx])) {
        request.onError(err);
      }
      client[kPendingIdx] = client[kRunningIdx];
    } else {
      if (client.running && err.code !== "UND_ERR_INFO") {
        client[kQueue][client[kRunningIdx]].onError(err);
        client[kQueue][client[kRunningIdx]++] = null;
      }
      client[kPendingIdx] = client[kRunningIdx];
      client.emit("disconnect", err);
    }
    resume(client);
  }
  function onSocketSession(session) {
    const {[kClient]: client} = this;
    client[kTLSSession] = session;
  }
  function detachSocket(socket) {
    socket[kParser].destroy();
    socket[kParser] = null;
    socket[kPause] = null;
    socket[kResume] = null;
    socket[kClient] = null;
    socket[kError] = null;
    socket.removeListener("timeout", onSocketTimeout).removeListener("session", onSocketSession).removeListener("error", onSocketError).removeListener("end", onSocketEnd).removeListener("close", onSocketClose);
  }
  function connect(client) {
    assert(!client[kSocket]);
    assert(!client[kRetryTimeout]);
    const {protocol, port, hostname} = client[kUrl];
    let socket;
    if (protocol === "https:") {
      const tlsOpts = {
        ...client[kTLSOpts],
        servername: client[kTLSServerName],
        session: client[kTLSSession]
      };
      socket = client[kSocketPath] ? tls.connect(client[kSocketPath], tlsOpts) : tls.connect(port || 443, hostname, tlsOpts);
      socket.on("session", onSocketSession);
    } else {
      socket = client[kSocketPath] ? net.connect(client[kSocketPath]) : net.connect(port || 80, hostname);
    }
    client[kSocket] = socket;
    const parser = new Parser(client, socket);
    if (nodeMajorVersion >= 12) {
      assert(socket._handle);
      parser.consume(socket._handle);
    } else {
      assert(socket._handle && socket._handle._externalStream);
      parser.consume(socket._handle._externalStream);
    }
    socket[kPause] = socketPause.bind(socket);
    socket[kResume] = socketResume.bind(socket);
    socket[kError] = null;
    socket[kParser] = parser;
    socket[kClient] = client;
    socket.setNoDelay(true).setTimeout(client[kIdleTimeout]).on(protocol === "https:" ? "secureConnect" : "connect", onSocketConnect).on("timeout", onSocketTimeout).on("error", onSocketError).on("end", onSocketEnd).on("close", onSocketClose);
  }
  function socketPause() {
    if (this._handle && this._handle.reading) {
      this._handle.reading = false;
      const err = this._handle.readStop();
      if (err) {
        this.destroy(util4.errnoException(err, "read"));
      }
    }
  }
  function socketResume() {
    if (this._handle && !this._handle.reading) {
      this._handle.reading = true;
      const err = this._handle.readStart();
      if (err) {
        this.destroy(util4.errnoException(err, "read"));
      }
    }
  }
  function emitDrain(client) {
    client[kNeedDrain] = 0;
    client.emit("drain");
  }
  function resume(client, sync) {
    if (client[kResuming] === 2) {
      return;
    }
    client[kResuming] = 2;
    _resume(client, sync);
    client[kResuming] = 0;
    if (client[kRunningIdx] > 256) {
      client[kQueue].splice(0, client[kRunningIdx]);
      client[kPendingIdx] -= client[kRunningIdx];
      client[kRunningIdx] = 0;
    }
  }
  function _resume(client, sync) {
    while (true) {
      if (client[kDestroyed]) {
        assert(!client.pending);
        return;
      }
      if (client[kClosed] && !client.size) {
        client.destroy(util4.nop);
        continue;
      }
      if (client[kSocket]) {
        const timeout = client.running ? client[kSocketTimeout] : client[kKeepAliveTimeout];
        if (client[kSocket].timeout !== timeout) {
          client[kSocket].setTimeout(timeout);
        }
      }
      if (client.running) {
        const {aborted} = client[kQueue][client[kRunningIdx]];
        if (aborted) {
          util4.destroy(client[kSocket]);
          return;
        }
      }
      if (!client.pending) {
        if (client[kNeedDrain] === 2 && !client.busy) {
          if (sync) {
            client[kNeedDrain] = 1;
            process.nextTick(emitDrain, client);
          } else {
            emitDrain(client);
          }
          continue;
        }
        return;
      } else {
        client[kNeedDrain] = 2;
      }
      if (client.running >= client[kPipelining]) {
        return;
      }
      const request = client[kQueue][client[kPendingIdx]];
      if (client[kUrl].protocol === "https:" && client[kHost] !== request.host) {
        if (client.running) {
          return;
        }
        client[kHost] = request.host;
        const servername = request.host && !/^\[/.test(request.host) && !net.isIP(request.host) ? request.host : client[kTLSOpts] && client[kTLSOpts].servername;
        if (client[kTLSServerName] !== servername) {
          client[kTLSServerName] = servername;
          client[kTLSSession] = null;
          if (client[kSocket]) {
            util4.destroy(client[kSocket], new InformationalError("servername changed"));
            return;
          }
        }
      }
      if (!client[kSocket] && !client[kRetryTimeout]) {
        if (client[kRetryDelay]) {
          client[kRetryTimeout] = setTimeout(() => {
            client[kRetryTimeout] = null;
            connect(client);
          }, client[kRetryDelay]);
          client[kRetryDelay] = Math.min(client[kRetryDelay] * 2, client[kSocketTimeout]);
        } else {
          connect(client);
          client[kRetryDelay] = 1e3;
        }
        return;
      }
      if (!client.connected) {
        return;
      }
      if (client[kWriting] || client[kReset]) {
        return;
      }
      if (client.running && !client[kKeepAlive]) {
        return;
      }
      if (client.running && !request.idempotent) {
        return;
      }
      if (client.running && (request.upgrade || request.method === "CONNECT")) {
        return;
      }
      if (util4.isStream(request.body) && util4.bodyLength(request.body) === 0) {
        request.body.on("data", function() {
          assert(false);
        }).on("error", function(err) {
          request.onError(err);
        }).on("end", function() {
          util4.destroy(this);
        });
        request.body = null;
      }
      if (client.running && util4.isStream(request.body)) {
        return;
      }
      if (write(client, request)) {
        client[kPendingIdx]++;
      } else {
        client[kQueue].splice(client[kPendingIdx], 1);
      }
    }
  }
  function write(client, request) {
    const {body, method, path: path19, host, upgrade, headers} = request;
    const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
    if (body && typeof body.read === "function") {
      body.read(0);
    }
    let contentLength = util4.bodyLength(body);
    if (contentLength === null) {
      contentLength = request.contentLength;
    }
    if (contentLength === 0 && !expectsPayload) {
      contentLength = null;
    }
    if (request.contentLength !== null && request.contentLength !== contentLength) {
      request.onError(new ContentLengthMismatchError());
      return false;
    }
    try {
      request.onConnect(client[kResume]);
    } catch (err) {
      request.onError(err);
      return false;
    }
    if (request.aborted) {
      return false;
    }
    if (method === "HEAD") {
      client[kReset] = true;
    }
    if (method === "CONNECT" || upgrade) {
      client[kReset] = true;
    }
    let header;
    if (upgrade) {
      header = `${method} ${path19} HTTP/1.1\r
connection: upgrade\r
upgrade: ${upgrade}\r
`;
    } else if (client[kKeepAlive]) {
      header = `${method} ${path19} HTTP/1.1\r
connection: keep-alive\r
`;
    } else {
      header = `${method} ${path19} HTTP/1.1\r
connection: close\r
`;
    }
    if (!host) {
      header += client[kHostHeader];
    }
    if (headers) {
      header += headers;
    }
    const socket = client[kSocket];
    if (!body) {
      if (contentLength === 0) {
        socket.write(`${header}content-length: ${contentLength}\r
\r
\r
`, "ascii");
      } else {
        assert(contentLength === null, "no body must not have content length");
        socket.write(`${header}\r
`, "ascii");
      }
    } else if (util4.isBuffer(body)) {
      assert(contentLength !== null, "buffer body must have content length");
      socket.cork();
      socket.write(`${header}content-length: ${contentLength}\r
\r
`, "ascii");
      socket.write(body);
      socket.write("\r\n", "ascii");
      socket.uncork();
      if (!expectsPayload) {
        client[kReset] = true;
      }
    } else {
      client[kWriting] = true;
      assert(util4.isStream(body));
      assert(contentLength !== 0 || !client.running, "stream body cannot be pipelined");
      let finished = false;
      let bytesWritten = 0;
      const onData = function(chunk) {
        try {
          assert(!finished);
          const len = Buffer.byteLength(chunk);
          if (!len) {
            return;
          }
          if (contentLength !== null && bytesWritten + len > contentLength) {
            util4.destroy(socket, new ContentLengthMismatchError());
            return;
          }
          if (bytesWritten === 0) {
            if (!expectsPayload) {
              client[kReset] = true;
            }
            if (contentLength === null) {
              socket.write(`${header}transfer-encoding: chunked\r
`, "ascii");
            } else {
              socket.write(`${header}content-length: ${contentLength}\r
\r
`, "ascii");
            }
          }
          if (contentLength === null) {
            socket.write(`\r
${len.toString(16)}\r
`, "ascii");
          }
          bytesWritten += len;
          if (!socket.write(chunk) && this.pause) {
            this.pause();
          }
        } catch (err) {
          util4.destroy(this, err);
        }
      };
      const onDrain = function() {
        assert(!finished);
        if (body.resume) {
          body.resume();
        }
      };
      const onAbort = function() {
        onFinished(new RequestAbortedError());
      };
      const onFinished = function(err) {
        if (finished) {
          return;
        }
        finished = true;
        assert(client[kWriting] && client.running <= 1);
        client[kWriting] = false;
        if (!err && contentLength !== null && bytesWritten !== contentLength) {
          err = new ContentLengthMismatchError();
        }
        socket.removeListener("drain", onDrain).removeListener("error", onFinished);
        body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
        request.body = null;
        util4.destroy(body, err);
        if (err) {
          util4.destroy(socket, err);
          return;
        }
        if (bytesWritten === 0) {
          if (expectsPayload) {
            socket.write(`${header}content-length: 0\r
\r
\r
`, "ascii");
          } else {
            socket.write(`${header}\r
`, "ascii");
          }
        } else if (contentLength === null) {
          socket.write("\r\n0\r\n\r\n", "ascii");
        }
        resume(client);
      };
      body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
      socket.on("drain", onDrain).on("error", onFinished);
    }
    return true;
  }
  module3.exports = Client;
});

// ../../node_modules/.pnpm/undici@2.1.1/node_modules/undici/lib/node/fixed-queue.js
var require_fixed_queue2 = __commonJS((exports2, module3) => {
  "use strict";
  const kSize = 2048;
  const kMask = kSize - 1;
  class FixedCircularBuffer {
    constructor() {
      this.bottom = 0;
      this.top = 0;
      this.list = new Array(kSize);
      this.next = null;
    }
    isEmpty() {
      return this.top === this.bottom;
    }
    isFull() {
      return (this.top + 1 & kMask) === this.bottom;
    }
    push(data) {
      this.list[this.top] = data;
      this.top = this.top + 1 & kMask;
    }
    shift() {
      const nextItem = this.list[this.bottom];
      if (nextItem === void 0)
        return null;
      this.list[this.bottom] = void 0;
      this.bottom = this.bottom + 1 & kMask;
      return nextItem;
    }
  }
  module3.exports = class FixedQueue {
    constructor() {
      this.head = this.tail = new FixedCircularBuffer();
    }
    isEmpty() {
      return this.head.isEmpty();
    }
    push(data) {
      if (this.head.isFull()) {
        this.head = this.head.next = new FixedCircularBuffer();
      }
      this.head.push(data);
    }
    shift() {
      const tail = this.tail;
      const next = tail.shift();
      if (tail.isEmpty() && tail.next !== null) {
        this.tail = tail.next;
      }
      return next;
    }
  };
});

// ../../node_modules/.pnpm/undici@2.1.1/node_modules/undici/lib/pool.js
var require_pool2 = __commonJS((exports2, module3) => {
  "use strict";
  const Client = require_client3();
  const {
    ClientClosedError,
    InvalidArgumentError,
    ClientDestroyedError
  } = require_errors3();
  const FixedQueue = require_fixed_queue2();
  const kClients = Symbol("clients");
  const kQueue = Symbol("queue");
  const kDestroyed = Symbol("destroyed");
  const kClosedPromise = Symbol("closed promise");
  const kClosedResolve = Symbol("closed resolve");
  class Pool {
    constructor(url, {
      connections,
      ...options
    } = {}) {
      if (connections != null && (!Number.isFinite(connections) || connections <= 0)) {
        throw new InvalidArgumentError("invalid connections");
      }
      this[kQueue] = new FixedQueue();
      this[kClosedPromise] = null;
      this[kClosedResolve] = null;
      this[kDestroyed] = false;
      this[kClients] = Array.from({
        length: connections || 10
      }, () => new Client(url, options));
      const pool = this;
      function onDrain() {
        const queue = pool[kQueue];
        while (!this.busy) {
          const item = queue.shift();
          if (!item) {
            break;
          }
          this.dispatch(item.opts, item.handler);
        }
        if (pool[kClosedResolve] && queue.isEmpty()) {
          Promise.all(pool[kClients].map((c) => c.close())).then(pool[kClosedResolve]);
        }
      }
      for (const client of this[kClients]) {
        client.on("drain", onDrain);
      }
    }
    dispatch(opts, handler) {
      try {
        if (this[kDestroyed]) {
          throw new ClientDestroyedError();
        }
        if (this[kClosedPromise]) {
          throw new ClientClosedError();
        }
        const client = this[kClients].find((client2) => !client2.busy);
        if (!client) {
          this[kQueue].push({opts, handler});
        } else {
          client.dispatch(opts, handler);
        }
      } catch (err) {
        handler.onError(err);
      }
    }
    close(cb) {
      try {
        if (this[kDestroyed]) {
          throw new ClientDestroyedError();
        }
        if (!this[kClosedPromise]) {
          if (this[kQueue].isEmpty()) {
            this[kClosedPromise] = Promise.all(this[kClients].map((c) => c.close()));
          } else {
            this[kClosedPromise] = new Promise((resolve) => {
              this[kClosedResolve] = resolve;
            });
          }
        }
        if (cb) {
          this[kClosedPromise].then(() => cb(null, null));
        } else {
          return this[kClosedPromise];
        }
      } catch (err) {
        if (cb) {
          cb(err);
        } else {
          return Promise.reject(err);
        }
      }
    }
    destroy(err, cb) {
      this[kDestroyed] = true;
      if (typeof err === "function") {
        cb = err;
        err = null;
      }
      if (!err) {
        err = new ClientDestroyedError();
      }
      while (true) {
        const item = this[kQueue].shift();
        if (!item) {
          break;
        }
        item.handler.onError(err);
      }
      const promise = Promise.all(this[kClients].map((c) => c.destroy(err)));
      if (cb) {
        promise.then(() => cb(null, null));
      } else {
        return promise;
      }
    }
  }
  module3.exports = Pool;
});

// ../../node_modules/.pnpm/undici@2.1.1/node_modules/undici/lib/abort-signal.js
var require_abort_signal2 = __commonJS((exports2, module3) => {
  const {RequestAbortedError} = require_errors3();
  const kListener = Symbol("kListener");
  const kSignal = Symbol("kSignal");
  function addSignal(self2, signal) {
    self2[kSignal] = signal;
    self2[kListener] = null;
    if (!signal) {
      return;
    }
    self2[kListener] = () => {
      if (self2.abort) {
        self2.abort();
      } else {
        self2.onError(new RequestAbortedError());
      }
    };
    if ("addEventListener" in self2[kSignal]) {
      self2[kSignal].addEventListener("abort", self2[kListener]);
    } else {
      self2[kSignal].addListener("abort", self2[kListener]);
    }
  }
  function removeSignal(self2) {
    if (!self2[kSignal]) {
      return;
    }
    if ("removeEventListener" in self2[kSignal]) {
      self2[kSignal].removeEventListener("abort", self2[kListener]);
    } else {
      self2[kSignal].removeListener("abort", self2[kListener]);
    }
    self2[kSignal] = null;
    self2[kListener] = null;
  }
  module3.exports = {
    addSignal,
    removeSignal
  };
});

// ../../node_modules/.pnpm/undici@2.1.1/node_modules/undici/lib/client-request.js
var require_client_request2 = __commonJS((exports2, module3) => {
  "use strict";
  const {Readable} = require("stream");
  const {
    InvalidArgumentError,
    RequestAbortedError
  } = require_errors3();
  const util4 = require_util12();
  const {AsyncResource} = require("async_hooks");
  const {addSignal, removeSignal} = require_abort_signal2();
  const kAbort = Symbol("abort");
  class RequestResponse extends Readable {
    constructor(resume, abort) {
      super({autoDestroy: true, read: resume});
      this[kAbort] = abort;
    }
    _destroy(err, callback) {
      if (!err && !this._readableState.endEmitted) {
        err = new RequestAbortedError();
      }
      if (err) {
        this[kAbort]();
      }
      callback(err);
    }
  }
  class RequestHandler extends AsyncResource {
    constructor(opts, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      const {signal, method, opaque, body} = opts;
      try {
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        if (method === "CONNECT") {
          throw new InvalidArgumentError("invalid method");
        }
        super("UNDICI_REQUEST");
      } catch (err) {
        if (util4.isStream(body)) {
          util4.destroy(body.on("error", util4.nop), err);
        }
        throw err;
      }
      this.opaque = opaque || null;
      this.callback = callback;
      this.res = null;
      this.abort = null;
      this.body = body;
      if (util4.isStream(body)) {
        body.on("error", (err) => {
          this.onError(err);
        });
      }
      addSignal(this, signal);
    }
    onConnect(abort) {
      if (!this.callback) {
        abort();
      } else {
        this.abort = abort;
      }
    }
    onHeaders(statusCode, headers, resume) {
      const {callback, opaque, abort} = this;
      if (statusCode < 200) {
        return;
      }
      const body = new RequestResponse(resume, abort);
      this.callback = null;
      this.res = body;
      this.runInAsyncScope(callback, null, null, {
        statusCode,
        headers: util4.parseHeaders(headers),
        opaque,
        body
      });
    }
    onData(chunk) {
      const {res} = this;
      return res.push(chunk);
    }
    onComplete(trailers) {
      const {res} = this;
      removeSignal(this);
      res.push(null);
    }
    onError(err) {
      const {res, callback, body, opaque} = this;
      removeSignal(this);
      if (callback) {
        this.callback = null;
        process.nextTick((self2, callback2, err2, opaque2) => {
          self2.runInAsyncScope(callback2, null, err2, {opaque: opaque2});
        }, this, callback, err, opaque);
      }
      if (res) {
        this.res = null;
        util4.destroy(res, err);
      }
      if (body) {
        this.body = null;
        util4.destroy(body, err);
      }
    }
  }
  function request(opts, callback) {
    if (callback === void 0) {
      return new Promise((resolve, reject) => {
        request.call(this, opts, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    try {
      this.dispatch(opts, new RequestHandler(opts, callback));
    } catch (err) {
      if (typeof callback === "function") {
        process.nextTick(callback, err, {opaque: opts && opts.opaque});
      } else {
        throw err;
      }
    }
  }
  module3.exports = request;
});

// ../../node_modules/.pnpm/undici@2.1.1/node_modules/undici/lib/client-stream.js
var require_client_stream2 = __commonJS((exports2, module3) => {
  "use strict";
  const {finished} = require("stream");
  const {
    InvalidArgumentError,
    InvalidReturnValueError
  } = require_errors3();
  const util4 = require_util12();
  const {AsyncResource} = require("async_hooks");
  const {addSignal, removeSignal} = require_abort_signal2();
  class StreamHandler extends AsyncResource {
    constructor(opts, factory, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      const {signal, method, opaque, body} = opts;
      try {
        if (typeof callback !== "function") {
          throw new InvalidArgumentError("invalid callback");
        }
        if (typeof factory !== "function") {
          throw new InvalidArgumentError("invalid factory");
        }
        if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
          throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
        }
        if (method === "CONNECT") {
          throw new InvalidArgumentError("invalid method");
        }
        super("UNDICI_STREAM");
      } catch (err) {
        if (util4.isStream(body)) {
          util4.destroy(body.on("error", util4.nop), err);
        }
        throw err;
      }
      this.opaque = opaque || null;
      this.factory = factory;
      this.callback = callback;
      this.res = null;
      this.abort = null;
      this.trailers = null;
      this.body = body;
      if (util4.isStream(body)) {
        body.on("error", (err) => {
          this.onError(err);
        });
      }
      addSignal(this, signal);
    }
    onConnect(abort) {
      if (!this.callback) {
        abort();
      } else {
        this.abort = abort;
      }
    }
    onHeaders(statusCode, headers, resume) {
      const {factory, opaque} = this;
      if (statusCode < 200) {
        return;
      }
      this.factory = null;
      const res = this.runInAsyncScope(factory, null, {
        statusCode,
        headers: util4.parseHeaders(headers),
        opaque
      });
      if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") {
        throw new InvalidReturnValueError("expected Writable");
      }
      res.on("drain", resume);
      finished(res, {readable: false}, (err) => {
        const {callback, res: res2, opaque: opaque2, trailers, abort} = this;
        this.res = null;
        if (err || !res2.readable) {
          util4.destroy(res2, err);
        }
        this.callback = null;
        this.runInAsyncScope(callback, null, err || null, {opaque: opaque2, trailers});
        if (err) {
          abort();
        }
      });
      this.res = res;
    }
    onData(chunk) {
      const {res} = this;
      return res.write(chunk);
    }
    onComplete(trailers) {
      const {res} = this;
      removeSignal(this);
      this.trailers = trailers ? util4.parseHeaders(trailers) : {};
      res.end();
    }
    onError(err) {
      const {res, callback, opaque, body} = this;
      removeSignal(this);
      this.factory = null;
      if (res) {
        this.res = null;
        util4.destroy(res, err);
      } else if (callback) {
        this.callback = null;
        process.nextTick((self2, callback2, err2, opaque2) => {
          self2.runInAsyncScope(callback2, null, err2, {opaque: opaque2});
        }, this, callback, err, opaque);
      }
      if (body) {
        this.body = null;
        util4.destroy(body, err);
      }
    }
  }
  function stream(opts, factory, callback) {
    if (callback === void 0) {
      return new Promise((resolve, reject) => {
        stream.call(this, opts, factory, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    try {
      this.dispatch(opts, new StreamHandler(opts, factory, callback));
    } catch (err) {
      if (typeof callback === "function") {
        process.nextTick(callback, err, {opaque: opts && opts.opaque});
      } else {
        throw err;
      }
    }
  }
  module3.exports = stream;
});

// ../../node_modules/.pnpm/undici@2.1.1/node_modules/undici/lib/client-pipeline.js
var require_client_pipeline2 = __commonJS((exports2, module3) => {
  "use strict";
  const {
    Readable,
    Duplex,
    PassThrough
  } = require("stream");
  const {
    InvalidArgumentError,
    InvalidReturnValueError,
    RequestAbortedError
  } = require_errors3();
  const util4 = require_util12();
  const {AsyncResource} = require("async_hooks");
  const {assert} = require("console");
  const {addSignal, removeSignal} = require_abort_signal2();
  const kResume = Symbol("resume");
  class PipelineRequest extends Readable {
    constructor() {
      super({autoDestroy: true});
      this[kResume] = null;
    }
    _read() {
      const {[kResume]: resume} = this;
      if (resume) {
        this[kResume] = null;
        resume();
      }
    }
    _destroy(err, callback) {
      this._read();
      assert(err || this._readableState.endEmitted);
      callback(err);
    }
  }
  class PipelineResponse extends Readable {
    constructor(resume) {
      super({autoDestroy: true});
      this[kResume] = resume;
    }
    _read() {
      this[kResume]();
    }
    _destroy(err, callback) {
      if (!err && !this._readableState.endEmitted) {
        err = new RequestAbortedError();
      }
      callback(err);
    }
  }
  class PipelineHandler extends AsyncResource {
    constructor(opts, handler) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      if (typeof handler !== "function") {
        throw new InvalidArgumentError("invalid handler");
      }
      const {signal, method, opaque} = opts;
      if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
        throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      }
      if (method === "CONNECT") {
        throw new InvalidArgumentError("invalid method");
      }
      super("UNDICI_PIPELINE");
      this.opaque = opaque || null;
      this.handler = handler;
      this.abort = null;
      addSignal(this, signal);
      this.req = new PipelineRequest().on("error", util4.nop);
      this.ret = new Duplex({
        readableObjectMode: opts.objectMode,
        autoDestroy: true,
        read: () => {
          const {body} = this;
          if (body && body.resume) {
            body.resume();
          }
        },
        write: (chunk, encoding, callback) => {
          const {req} = this;
          if (req.push(chunk, encoding) || req._readableState.destroyed) {
            callback();
          } else {
            req[kResume] = callback;
          }
        },
        destroy: (err, callback) => {
          const {body, req, res, ret, abort} = this;
          if (!err && !ret._readableState.endEmitted) {
            err = new RequestAbortedError();
          }
          if (abort && err) {
            abort();
          }
          util4.destroy(body, err);
          util4.destroy(req, err);
          util4.destroy(res, err);
          removeSignal(this);
          callback(err);
        }
      }).on("prefinish", () => {
        const {req} = this;
        req.push(null);
      });
      this.res = null;
    }
    onConnect(abort) {
      const {ret} = this;
      if (ret.destroyed) {
        abort();
      } else {
        this.abort = abort;
      }
    }
    onHeaders(statusCode, headers, resume) {
      const {opaque, handler} = this;
      if (statusCode < 200) {
        return;
      }
      this.res = new PipelineResponse(resume);
      let body;
      try {
        this.handler = null;
        body = this.runInAsyncScope(handler, null, {
          statusCode,
          headers: util4.parseHeaders(headers),
          opaque,
          body: this.res
        });
      } catch (err) {
        this.res.on("error", util4.nop);
        throw err;
      }
      if (!body || typeof body.on !== "function") {
        throw new InvalidReturnValueError("expected Readable");
      }
      body.on("data", (chunk) => {
        const {ret, body: body2} = this;
        if (!ret.push(chunk) && body2.pause) {
          body2.pause();
        }
      }).on("error", (err) => {
        const {ret} = this;
        util4.destroy(ret, err);
      }).on("end", () => {
        const {ret} = this;
        ret.push(null);
      }).on("close", () => {
        const {ret} = this;
        if (!ret._readableState.ended) {
          util4.destroy(ret, new RequestAbortedError());
        }
      });
      this.body = body;
    }
    onData(chunk) {
      const {res} = this;
      return res.push(chunk);
    }
    onComplete(trailers) {
      const {res} = this;
      res.push(null);
    }
    onError(err) {
      const {ret} = this;
      this.handler = null;
      util4.destroy(ret, err);
    }
  }
  function pipeline(opts, handler) {
    try {
      const pipelineHandler = new PipelineHandler(opts, handler);
      const {
        path: path19,
        method,
        headers,
        idempotent,
        servername,
        signal,
        requestTimeout
      } = opts;
      this.dispatch({
        path: path19,
        method,
        body: pipelineHandler.req,
        headers,
        idempotent,
        servername,
        signal,
        requestTimeout
      }, pipelineHandler);
      return pipelineHandler.ret;
    } catch (err) {
      return new PassThrough().destroy(err);
    }
  }
  module3.exports = pipeline;
});

// ../../node_modules/.pnpm/undici@2.1.1/node_modules/undici/lib/client-upgrade.js
var require_client_upgrade2 = __commonJS((exports2, module3) => {
  "use strict";
  const {InvalidArgumentError} = require_errors3();
  const {AsyncResource} = require("async_hooks");
  const util4 = require_util12();
  const {addSignal, removeSignal} = require_abort_signal2();
  class UpgradeHandler extends AsyncResource {
    constructor(opts, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      const {signal, opaque} = opts;
      if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
        throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      }
      super("UNDICI_UPGRADE");
      this.opaque = opaque || null;
      this.callback = callback;
      this.abort = null;
      addSignal(this, signal);
    }
    onConnect(abort) {
      if (!this.callback) {
        abort();
      } else {
        this.abort = abort;
      }
    }
    onUpgrade(statusCode, headers, socket) {
      const {callback, opaque} = this;
      removeSignal(this);
      this.callback = null;
      this.runInAsyncScope(callback, null, null, {
        headers: util4.parseHeaders(headers),
        socket,
        opaque
      });
    }
    onError(err) {
      const {callback, opaque} = this;
      removeSignal(this);
      if (callback) {
        this.callback = null;
        process.nextTick((self2, callback2, err2, opaque2) => {
          self2.runInAsyncScope(callback2, null, err2, {opaque: opaque2});
        }, this, callback, err, opaque);
      }
    }
  }
  function upgrade(opts, callback) {
    if (callback === void 0) {
      return new Promise((resolve, reject) => {
        upgrade.call(this, opts, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    if (typeof callback !== "function") {
      throw new InvalidArgumentError("invalid callback");
    }
    try {
      const upgradeHandler = new UpgradeHandler(opts, callback);
      const {
        path: path19,
        method,
        headers,
        servername,
        signal,
        requestTimeout,
        protocol
      } = opts;
      this.dispatch({
        path: path19,
        method: method || "GET",
        headers,
        servername,
        signal,
        requestTimeout,
        upgrade: protocol || "Websocket"
      }, upgradeHandler);
    } catch (err) {
      process.nextTick(callback, err, {opaque: opts && opts.opaque});
    }
  }
  module3.exports = upgrade;
});

// ../../node_modules/.pnpm/undici@2.1.1/node_modules/undici/lib/client-connect.js
var require_client_connect2 = __commonJS((exports2, module3) => {
  "use strict";
  const {InvalidArgumentError} = require_errors3();
  const {AsyncResource} = require("async_hooks");
  const util4 = require_util12();
  const {addSignal, removeSignal} = require_abort_signal2();
  class ConnectHandler extends AsyncResource {
    constructor(opts, callback) {
      if (!opts || typeof opts !== "object") {
        throw new InvalidArgumentError("invalid opts");
      }
      const {signal, opaque} = opts;
      if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
        throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
      }
      super("UNDICI_CONNECT");
      this.opaque = opaque || null;
      this.callback = callback;
      this.abort = null;
      addSignal(this, signal);
    }
    onConnect(abort) {
      if (!this.callback) {
        abort();
      } else {
        this.abort = abort;
      }
    }
    onUpgrade(statusCode, headers, socket) {
      const {callback, opaque} = this;
      removeSignal(this);
      this.callback = null;
      this.runInAsyncScope(callback, null, null, {
        statusCode,
        headers: util4.parseHeaders(headers),
        socket,
        opaque
      });
    }
    onError(err) {
      const {callback, opaque} = this;
      removeSignal(this);
      if (callback) {
        this.callback = null;
        process.nextTick((self2, callback2, err2, opaque2) => {
          self2.runInAsyncScope(callback2, null, err2, {opaque: opaque2});
        }, this, callback, err, opaque);
      }
    }
  }
  function connect(opts, callback) {
    if (callback === void 0) {
      return new Promise((resolve, reject) => {
        connect.call(this, opts, (err, data) => {
          return err ? reject(err) : resolve(data);
        });
      });
    }
    if (typeof callback !== "function") {
      throw new InvalidArgumentError("invalid callback");
    }
    try {
      const connectHandler = new ConnectHandler(opts, callback);
      const {
        path: path19,
        headers,
        servername,
        signal,
        requestTimeout
      } = opts;
      this.dispatch({
        path: path19,
        method: "CONNECT",
        headers,
        servername,
        signal,
        requestTimeout
      }, connectHandler);
    } catch (err) {
      process.nextTick(callback, err, {opaque: opts && opts.opaque});
    }
  }
  module3.exports = connect;
});

// ../../node_modules/.pnpm/undici@2.1.1/node_modules/undici/index.js
var require_undici3 = __commonJS((exports2, module3) => {
  "use strict";
  const Client = require_client3();
  const errors = require_errors3();
  const Pool = require_pool2();
  Client.prototype.request = require_client_request2();
  Client.prototype.stream = require_client_stream2();
  Client.prototype.pipeline = require_client_pipeline2();
  Client.prototype.upgrade = require_client_upgrade2();
  Client.prototype.connect = require_client_connect2();
  Pool.prototype.request = require_client_request2();
  Pool.prototype.stream = require_client_stream2();
  Pool.prototype.pipeline = require_client_pipeline2();
  Pool.prototype.upgrade = require_client_upgrade2();
  Pool.prototype.connect = require_client_connect2();
  function undici(url, opts) {
    return new Pool(url, opts);
  }
  undici.Pool = Pool;
  undici.Client = Client;
  undici.errors = errors;
  module3.exports = undici;
});

// ../../node_modules/.pnpm/@prisma/engine-core@2.11.0-dev.28/node_modules/@prisma/engine-core/dist/undici.js
var require_undici4 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.Undici = void 0;
  const getStream = require_get_stream2();
  const undici_1 = require_undici3();
  class Undici {
    constructor(url, moreArgs) {
      this.closed = false;
      this.pool = new undici_1.Pool(url, {
        connections: 100,
        pipelining: 10,
        requestTimeout: 0,
        socketTimeout: 0,
        ...moreArgs
      });
    }
    request(body, customHeaders) {
      return new Promise((resolve, reject) => {
        this.pool.request({
          path: "/",
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            ...customHeaders
          },
          body
        }, async (err, result) => {
          if (err) {
            reject(err);
          } else {
            const {statusCode, headers, body: body2} = result;
            const data = JSON.parse(await getStream(body2));
            resolve({statusCode, headers, data});
          }
        });
      });
    }
    status() {
      return new Promise((resolve, reject) => {
        this.pool.request({
          path: "/",
          method: "GET"
        }, async (err, result) => {
          if (err) {
            reject(err);
          } else {
            const {statusCode, headers, body} = result;
            const data = JSON.parse(await getStream(body));
            resolve({statusCode, headers, data});
          }
        });
      });
    }
    close() {
      if (!this.closed) {
        this.pool.close(() => {
        });
      }
      this.closed = true;
    }
  }
  exports2.Undici = Undici;
});

// ../../node_modules/.pnpm/@prisma/engine-core@2.11.0-dev.28/node_modules/@prisma/engine-core/dist/NodeEngine.js
var require_NodeEngine2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.NodeEngine = void 0;
  const engines_1 = require("@prisma/engines");
  const get_platform_1 = require_dist21();
  const chalk_1 = __importDefault(require_source());
  const child_process_1 = require("child_process");
  const debug_1 = __importDefault(require_src2());
  const events_1 = __importDefault(require("events"));
  const execa_1 = __importDefault(require_execa2());
  const fs_1 = __importDefault(require("fs"));
  const net_1 = __importDefault(require("net"));
  const p_retry_1 = __importDefault(require_p_retry());
  const path_1 = __importDefault(require("path"));
  const util_1 = require("util");
  const byline_1 = __importDefault(require_byline7());
  const Engine_1 = require_Engine2();
  const log_1 = require_log4();
  const omit_1 = require_omit2();
  const printGeneratorConfig_1 = require_printGeneratorConfig2();
  const undici_1 = require_undici4();
  const util_2 = require_util10();
  const debug3 = debug_1.default("engine");
  const exists = util_1.promisify(fs_1.default.exists);
  const readdir = util_1.promisify(fs_1.default.readdir);
  const knownPlatforms = [
    "native",
    "darwin",
    "debian-openssl-1.0.x",
    "debian-openssl-1.1.x",
    "rhel-openssl-1.0.x",
    "rhel-openssl-1.1.x",
    "linux-musl",
    "linux-nixos",
    "windows",
    "freebsd11",
    "freebsd12",
    "openbsd",
    "netbsd",
    "arm"
  ];
  const engines5 = [];
  const socketPaths = [];
  class NodeEngine {
    constructor({cwd, datamodelPath, prismaPath, generator, datasources, showColors, logLevel, logQueries, env, flags, clientVersion, enableExperimental, engineEndpoint, enableDebugLogs, enableEngineDebugMode, useUds}) {
      var _a;
      this.restartCount = 0;
      this.queryEngineStarted = false;
      this.enableExperimental = [];
      this.useUds = false;
      this.queryEngineKilled = false;
      this.managementApiEnabled = false;
      this.ready = false;
      this.stderrLogs = "";
      this.stdoutLogs = "";
      this.handleRequestError = async (error, graceful) => {
        var _a2, _b, _c, _d, _e, _f, _g;
        debug3({error});
        let err;
        if (this.currentRequestPromise.isCanceled && this.lastError) {
          if (this.lastError.is_panic) {
            err = new Engine_1.PrismaClientRustPanicError(Engine_1.getErrorMessageWithLink({
              platform: this.platform,
              title: Engine_1.getMessage(this.lastError),
              version: this.clientVersion
            }), this.clientVersion);
            this.lastPanic = err;
          } else {
            err = new Engine_1.PrismaClientUnknownRequestError(Engine_1.getErrorMessageWithLink({
              platform: this.platform,
              title: Engine_1.getMessage(this.lastError),
              version: this.clientVersion
            }), this.clientVersion);
          }
        } else if (this.currentRequestPromise.isCanceled && this.lastErrorLog) {
          if (((_b = (_a2 = this.lastErrorLog) === null || _a2 === void 0 ? void 0 : _a2.fields) === null || _b === void 0 ? void 0 : _b.message) === "PANIC") {
            err = new Engine_1.PrismaClientRustPanicError(Engine_1.getErrorMessageWithLink({
              platform: this.platform,
              title: Engine_1.getMessage(this.lastErrorLog),
              version: this.clientVersion
            }), this.clientVersion);
            this.lastPanic = err;
          } else {
            err = new Engine_1.PrismaClientUnknownRequestError(Engine_1.getErrorMessageWithLink({
              platform: this.platform,
              title: Engine_1.getMessage(this.lastErrorLog),
              version: this.clientVersion
            }), this.clientVersion);
          }
        } else if (error.code && error.code === "ECONNRESET" || error.code === "ECONNREFUSED" || error.code === "UND_ERR_SOCKET" && error.message.toLowerCase().includes("closed") || error.message.toLowerCase().includes("client is destroyed") || error.message.toLowerCase().includes("other side closed") || error.code === "UND_ERR_CLOSED") {
          if (this.globalKillSignalReceived && !this.child.connected) {
            throw new Engine_1.PrismaClientUnknownRequestError(`The Node.js process already received a ${this.globalKillSignalReceived} signal, therefore the Prisma query engine exited
and your request can't be processed.
You probably have some open handle that prevents your process from exiting.
It could be an open http server or stream that didn't close yet.
We recommend using the \`wtfnode\` package to debug open handles.`, this.clientVersion);
          }
          if (this.restartCount > 4) {
            throw new Error(`Query engine is trying to restart, but can't.
Please look into the logs or turn on the env var DEBUG=* to debug the constantly restarting query engine.`);
          }
          if (this.lastError) {
            if (this.lastError.is_panic) {
              err = new Engine_1.PrismaClientRustPanicError(Engine_1.getErrorMessageWithLink({
                platform: this.platform,
                title: Engine_1.getMessage(this.lastError),
                version: this.clientVersion
              }), this.clientVersion);
              this.lastPanic = err;
            } else {
              err = new Engine_1.PrismaClientUnknownRequestError(Engine_1.getErrorMessageWithLink({
                platform: this.platform,
                title: Engine_1.getMessage(this.lastError),
                version: this.clientVersion
              }), this.clientVersion);
            }
          } else if (this.lastErrorLog) {
            if (((_d = (_c = this.lastErrorLog) === null || _c === void 0 ? void 0 : _c.fields) === null || _d === void 0 ? void 0 : _d.message) === "PANIC") {
              err = new Engine_1.PrismaClientRustPanicError(Engine_1.getErrorMessageWithLink({
                platform: this.platform,
                title: Engine_1.getMessage(this.lastErrorLog),
                version: this.clientVersion
              }), this.clientVersion);
              this.lastPanic = err;
            } else {
              err = new Engine_1.PrismaClientUnknownRequestError(Engine_1.getErrorMessageWithLink({
                platform: this.platform,
                title: Engine_1.getMessage(this.lastErrorLog),
                version: this.clientVersion
              }), this.clientVersion);
            }
          }
          if (!err) {
            let lastLog = this.getLastLog();
            if (!lastLog) {
              await new Promise((r) => setTimeout(r, 500));
              lastLog = this.getLastLog();
            }
            const logs = lastLog || this.stderrLogs || this.stdoutLogs;
            let title = lastLog !== null && lastLog !== void 0 ? lastLog : error.message;
            let description = error.stack + "\nExit code: " + this.exitCode + "\n" + logs;
            description = `signalCode: ${(_e = this.child) === null || _e === void 0 ? void 0 : _e.signalCode} | exitCode: ${(_f = this.child) === null || _f === void 0 ? void 0 : _f.exitCode} | killed: ${(_g = this.child) === null || _g === void 0 ? void 0 : _g.killed}
` + description;
            err = new Engine_1.PrismaClientUnknownRequestError(Engine_1.getErrorMessageWithLink({
              platform: this.platform,
              title,
              version: this.clientVersion,
              description
            }), this.clientVersion);
            debug3(err.message);
            if (graceful) {
              return false;
            }
          }
        }
        if (err) {
          throw err;
        }
        throw error;
      };
      this.env = env;
      this.cwd = this.resolveCwd(cwd);
      this.enableDebugLogs = enableDebugLogs !== null && enableDebugLogs !== void 0 ? enableDebugLogs : false;
      this.enableEngineDebugMode = enableEngineDebugMode !== null && enableEngineDebugMode !== void 0 ? enableEngineDebugMode : false;
      this.datamodelPath = datamodelPath;
      this.prismaPath = (_a = process.env.PRISMA_QUERY_ENGINE_BINARY) !== null && _a !== void 0 ? _a : prismaPath;
      this.generator = generator;
      this.datasources = datasources;
      this.logEmitter = new events_1.default();
      this.showColors = showColors !== null && showColors !== void 0 ? showColors : false;
      this.logLevel = logLevel;
      this.logQueries = logQueries !== null && logQueries !== void 0 ? logQueries : false;
      this.clientVersion = clientVersion;
      this.flags = flags !== null && flags !== void 0 ? flags : [];
      this.enableExperimental = enableExperimental !== null && enableExperimental !== void 0 ? enableExperimental : [];
      const removedFlags = [
        "middlewares",
        "aggregateApi",
        "distinct",
        "aggregations",
        "insensitiveFilters",
        "atomicNumberOperations",
        "transactionApi",
        "transaction",
        "connectOrCreate"
      ];
      const filteredFlags = ["nativeTypes"];
      const removedFlagsUsed = this.enableExperimental.filter((e) => removedFlags.includes(e));
      if (removedFlagsUsed.length > 0) {
        console.log(`${chalk_1.default.blueBright("info")} The preview flags \`${removedFlagsUsed.join("`, `")}\` were removed, you can now safely remove them from your schema.prisma.`);
      }
      this.enableExperimental = this.enableExperimental.filter((e) => !removedFlags.includes(e) && !filteredFlags.includes(e));
      this.engineEndpoint = engineEndpoint;
      if (useUds && process.platform !== "win32") {
        this.socketPath = `/tmp/prisma-${util_2.getRandomString()}.sock`;
        socketPaths.push(this.socketPath);
        this.useUds = useUds;
      }
      if (engineEndpoint) {
        const url = new URL(engineEndpoint);
        this.port = Number(url.port);
      }
      this.logEmitter.on("error", (log) => {
        if (this.enableDebugLogs) {
          debug_1.default("engine:log")(log);
        }
        if (log instanceof Error) {
          debug_1.default("engine:error")(log);
        } else {
          this.lastErrorLog = log;
          if (log.fields.message === "PANIC") {
            this.handlePanic(log);
          }
        }
      });
      if (this.platform) {
        if (!knownPlatforms.includes(this.platform) && !fs_1.default.existsSync(this.platform)) {
          throw new Engine_1.PrismaClientInitializationError(`Unknown ${chalk_1.default.red("PRISMA_QUERY_ENGINE_BINARY")} ${chalk_1.default.redBright.bold(this.platform)}. Possible binaryTargets: ${chalk_1.default.greenBright(knownPlatforms.join(", "))} or a path to the query engine binary.
You may have to run ${chalk_1.default.greenBright("prisma generate")} for your changes to take effect.`, this.clientVersion);
        }
      } else {
        this.getPlatform();
      }
      if (this.enableDebugLogs) {
        debug_1.default.enable("*");
      }
      engines5.push(this);
    }
    resolveCwd(cwd) {
      if (cwd && fs_1.default.existsSync(cwd) && fs_1.default.lstatSync(cwd).isDirectory()) {
        return cwd;
      }
      return process.cwd();
    }
    on(event, listener) {
      if (event === "beforeExit") {
        this.beforeExitListener = listener;
      } else {
        this.logEmitter.on(event, listener);
      }
    }
    async emitExit() {
      if (this.beforeExitListener) {
        try {
          await this.beforeExitListener();
        } catch (e) {
          console.error(e);
        }
      }
    }
    async getPlatform() {
      if (this.platformPromise) {
        return this.platformPromise;
      }
      this.platformPromise = get_platform_1.getPlatform();
      return this.platformPromise;
    }
    getQueryEnginePath(platform, prefix = __dirname) {
      let queryEnginePath = path_1.default.join(prefix, `query-engine-${platform}`);
      if (platform === "windows") {
        queryEnginePath = `${queryEnginePath}.exe`;
      }
      return queryEnginePath;
    }
    handlePanic(log) {
      var _a;
      (_a = this.child) === null || _a === void 0 ? void 0 : _a.kill();
      if (this.currentRequestPromise) {
        this.currentRequestPromise.cancel();
      }
    }
    async resolvePrismaPath() {
      var _a, _b;
      const searchedLocations = [];
      let enginePath;
      if (this.prismaPath) {
        return {prismaPath: this.prismaPath, searchedLocations};
      }
      const platform = await this.getPlatform();
      if (this.platform && this.platform !== platform) {
        this.incorrectlyPinnedBinaryTarget = this.platform;
      }
      this.platform = this.platform || platform;
      if (__filename.includes("NodeEngine")) {
        enginePath = this.getQueryEnginePath(this.platform, engines_1.getEnginesPath());
        return {prismaPath: enginePath, searchedLocations};
      }
      const searchLocations = [
        eval(`require('path').join(__dirname, '../../../.prisma/client')`),
        (_b = (_a = this.generator) === null || _a === void 0 ? void 0 : _a.output) !== null && _b !== void 0 ? _b : eval("__dirname"),
        path_1.default.join(eval("__dirname"), ".."),
        path_1.default.dirname(this.datamodelPath),
        this.cwd
      ];
      for (const location of searchLocations) {
        searchedLocations.push(location);
        debug3(`Search for Query Engine in ${location}`);
        enginePath = await this.getQueryEnginePath(this.platform, location);
        if (fs_1.default.existsSync(enginePath)) {
          return {prismaPath: enginePath, searchedLocations};
        }
      }
      enginePath = await this.getQueryEnginePath(this.platform);
      return {prismaPath: enginePath !== null && enginePath !== void 0 ? enginePath : "", searchedLocations};
    }
    async getPrismaPath() {
      const {prismaPath, searchedLocations} = await this.resolvePrismaPath();
      const platform = await this.getPlatform();
      if (!await exists(prismaPath)) {
        const pinnedStr = this.incorrectlyPinnedBinaryTarget ? `
You incorrectly pinned it to ${chalk_1.default.redBright.bold(`${this.incorrectlyPinnedBinaryTarget}`)}
` : "";
        let errorText = `Query engine binary for current platform "${chalk_1.default.bold(platform)}" could not be found.${pinnedStr}
This probably happens, because you built Prisma Client on a different platform.
(Prisma Client looked in "${chalk_1.default.underline(prismaPath)}")

Searched Locations:

${searchedLocations.map((f) => `  ${f}`).join("\n")}
`;
        if (this.generator) {
          if (this.generator.binaryTargets.includes(this.platform) || this.generator.binaryTargets.includes("native")) {
            errorText += `
You already added the platform${this.generator.binaryTargets.length > 1 ? "s" : ""} ${this.generator.binaryTargets.map((t) => `"${chalk_1.default.bold(t)}"`).join(", ")} to the "${chalk_1.default.underline("generator")}" block
in the "schema.prisma" file as described in https://pris.ly/d/client-generator,
but something went wrong. That's suboptimal.

Please create an issue at https://github.com/prisma/prisma-client-js/issues/new`;
            errorText += ``;
          } else {
            errorText += `

To solve this problem, add the platform "${this.platform}" to the "${chalk_1.default.underline("generator")}" block in the "schema.prisma" file:
${chalk_1.default.greenBright(this.getFixedGenerator())}

Then run "${chalk_1.default.greenBright("prisma generate")}" for your changes to take effect.
Read more about deploying Prisma Client: https://pris.ly/d/client-generator`;
          }
        } else {
          errorText += `

Read more about deploying Prisma Client: https://pris.ly/d/client-generator
`;
        }
        throw new Engine_1.PrismaClientInitializationError(errorText, this.clientVersion);
      }
      if (this.incorrectlyPinnedBinaryTarget) {
        console.error(`${chalk_1.default.yellow("Warning:")} You pinned the platform ${chalk_1.default.bold(this.incorrectlyPinnedBinaryTarget)}, but Prisma Client detects ${chalk_1.default.bold(await this.getPlatform())}.
This means you should very likely pin the platform ${chalk_1.default.greenBright(await this.getPlatform())} instead.
${chalk_1.default.dim("In case we're mistaken, please report this to us 🙏.")}`);
      }
      if (process.platform !== "win32") {
        util_2.plusX(prismaPath);
      }
      return prismaPath;
    }
    getFixedGenerator() {
      const fixedGenerator = {
        ...this.generator,
        binaryTargets: util_2.fixBinaryTargets(this.generator.binaryTargets, this.platform)
      };
      return printGeneratorConfig_1.printGeneratorConfig(fixedGenerator);
    }
    printDatasources() {
      if (this.datasources) {
        return JSON.stringify(this.datasources);
      }
      return "[]";
    }
    async start() {
      if (!this.startPromise) {
        this.startPromise = this.internalStart();
      }
      return this.startPromise;
    }
    async getEngineEnvVars() {
      const env = {
        PRISMA_DML_PATH: this.datamodelPath,
        RUST_BACKTRACE: "1",
        RUST_LOG: "info"
      };
      if (!this.useUds) {
        env.PORT = String(this.port);
        debug3(`port: ${this.port}`);
      }
      if (this.logQueries || this.logLevel === "info") {
        env.RUST_LOG = "info";
        if (this.logQueries) {
          env.LOG_QUERIES = "true";
        }
      }
      if (this.datasources) {
        env.OVERWRITE_DATASOURCES = this.printDatasources();
      }
      if (!process.env.NO_COLOR && this.showColors) {
        env.CLICOLOR_FORCE = "1";
      }
      return {
        ...this.env,
        ...process.env,
        ...env
      };
    }
    internalStart() {
      return new Promise(async (resolve, reject) => {
        var _a, _b, _c;
        await new Promise((r) => process.nextTick(r));
        if (this.stopPromise) {
          await this.stopPromise;
        }
        if (this.engineEndpoint) {
          try {
            await p_retry_1.default(() => this.undici.status(), {
              retries: 10
            });
          } catch (e) {
            return reject(e);
          }
          return resolve();
        }
        try {
          if (((_a = this.child) === null || _a === void 0 ? void 0 : _a.connected) || this.child && !((_b = this.child) === null || _b === void 0 ? void 0 : _b.killed)) {
            debug3(`There is a child that still runs and we want to start again`);
          }
          this.queryEngineStarted = false;
          this.lastError = void 0;
          this.lastErrorLog = void 0;
          this.lastPanic = void 0;
          this.queryEngineKilled = false;
          this.globalKillSignalReceived = void 0;
          debug3({cwd: this.cwd});
          const prismaPath = await this.getPrismaPath();
          const experimentalFlags = this.enableExperimental && Array.isArray(this.enableExperimental) && this.enableExperimental.length > 0 ? [`--enable-experimental=${this.enableExperimental.join(",")}`] : [];
          const debugFlag = this.enableEngineDebugMode ? ["--debug"] : [];
          const flags = [
            ...experimentalFlags,
            ...debugFlag,
            "--enable-raw-queries",
            ...this.flags
          ];
          if (this.useUds) {
            flags.push("--unix-path", this.socketPath);
          }
          debug3({flags});
          this.port = await this.getFreePort();
          const env = await this.getEngineEnvVars();
          this.child = child_process_1.spawn(prismaPath, flags, {
            env,
            cwd: this.cwd,
            windowsHide: true,
            stdio: ["ignore", "pipe", "pipe"]
          });
          byline_1.default(this.child.stderr).on("data", (msg) => {
            const data = String(msg);
            debug3("stderr", data);
            try {
              const json = JSON.parse(data);
              if (typeof json.is_panic !== "undefined") {
                debug3(json);
                this.lastError = json;
                if (this.engineStartDeferred) {
                  const err = new Engine_1.PrismaClientInitializationError(this.lastError.message, this.clientVersion);
                  this.engineStartDeferred.reject(err);
                }
              }
            } catch (e) {
              if (!data.includes("Printing to stderr") && !data.includes("Listening on ")) {
                this.stderrLogs += "\n" + data;
              }
            }
          });
          byline_1.default(this.child.stdout).on("data", (msg) => {
            var _a2;
            const data = String(msg);
            try {
              const json = JSON.parse(data);
              debug3("stdout", json);
              if (this.engineStartDeferred && json.level === "INFO" && json.target === "query_engine::server" && ((_a2 = json.fields) === null || _a2 === void 0 ? void 0 : _a2.message.startsWith("Started http server"))) {
                if (this.useUds) {
                  this.undici = new undici_1.Undici({
                    hostname: "localhost",
                    protocol: "http:"
                  }, {
                    socketPath: this.socketPath
                  });
                } else {
                  this.undici = new undici_1.Undici(`http://localhost:${this.port}`);
                }
                this.engineStartDeferred.resolve();
                this.engineStartDeferred = void 0;
                this.queryEngineStarted = true;
              }
              if (typeof json.is_panic === "undefined") {
                const log = log_1.convertLog(json);
                this.logEmitter.emit(log.level, log);
                this.lastLog = log;
              } else {
                this.lastError = json;
              }
            } catch (e) {
              debug3(e, data);
            }
          });
          this.child.on("exit", (code) => {
            var _a2, _b2;
            if (this.engineStopDeferred) {
              this.engineStopDeferred.resolve(code);
              return;
            }
            (_a2 = this.undici) === null || _a2 === void 0 ? void 0 : _a2.close();
            this.exitCode = code;
            if (!this.queryEngineKilled && this.queryEngineStarted && this.restartCount < 5) {
              p_retry_1.default(async (attempt) => {
                debug3(`Restart attempt ${attempt}. Waiting for backoff`);
                if (this.backoffPromise) {
                  await this.backoffPromise;
                }
                debug3(`Restart attempt ${attempt}. Backoff done`);
                this.restartCount++;
                const wait = Math.random() * 2 * Math.pow(Math.E, this.restartCount);
                this.startPromise = void 0;
                this.backoffPromise = new Promise((r) => setTimeout(r, wait));
                return this.start();
              }, {
                retries: 4,
                randomize: true,
                minTimeout: 1e3,
                maxTimeout: 60 * 1e3,
                factor: Math.E,
                onFailedAttempt: (e) => {
                  debug3(e);
                }
              });
              return;
            }
            if (code !== 0 && this.engineStartDeferred) {
              let err;
              if (code !== null) {
                err = new Engine_1.PrismaClientInitializationError(`Query engine exited with code ${code}
` + this.stderrLogs, this.clientVersion);
              } else if ((_b2 = this.child) === null || _b2 === void 0 ? void 0 : _b2.signalCode) {
                err = new Engine_1.PrismaClientInitializationError(`Query engine process killed with signal ${this.child.signalCode} for unknown reason.
Make sure that the engine binary at ${prismaPath} is not corrupt.
` + this.stderrLogs, this.clientVersion);
              } else {
                err = new Engine_1.PrismaClientInitializationError(this.stderrLogs, this.clientVersion);
              }
              this.engineStartDeferred.reject(err);
            }
            if (!this.child) {
              return;
            }
            if (this.lastError) {
              return;
            }
            if (this.lastErrorLog) {
              this.lastErrorLog.target = "exit";
              return;
            }
            if (code === 126) {
              this.lastErrorLog = {
                timestamp: new Date(),
                target: "exit",
                level: "error",
                fields: {
                  message: `Couldn't start query engine as it's not executable on this operating system.
You very likely have the wrong "binaryTarget" defined in the schema.prisma file.`
                }
              };
            } else {
              this.lastErrorLog = {
                target: "exit",
                timestamp: new Date(),
                level: "error",
                fields: {
                  message: (this.stderrLogs || "") + (this.stdoutLogs || "") + `
Exit code: ${code}`
                }
              };
            }
          });
          this.child.on("error", (err) => {
            this.lastError = {
              message: err.message,
              backtrace: "Could not start query engine",
              is_panic: false
            };
            reject(err);
          });
          this.child.on("close", (code, signal) => {
            var _a2, _b2;
            (_a2 = this.undici) === null || _a2 === void 0 ? void 0 : _a2.close();
            if (code === null && signal === "SIGABRT" && this.child) {
              const error = new Engine_1.PrismaClientRustPanicError(Engine_1.getErrorMessageWithLink({
                platform: this.platform,
                title: `Panic in Query Engine with SIGABRT signal`,
                description: this.stderrLogs,
                version: this.clientVersion
              }), this.clientVersion);
              this.logEmitter.emit("error", error);
            } else if (code === 255 && signal === null && ((_b2 = this.lastErrorLog) === null || _b2 === void 0 ? void 0 : _b2.fields.message) === "PANIC" && !this.lastPanic) {
              const error = new Engine_1.PrismaClientRustPanicError(Engine_1.getErrorMessageWithLink({
                platform: this.platform,
                title: `${this.lastErrorLog.fields.message}: ${this.lastErrorLog.fields.reason} in
${this.lastErrorLog.fields.file}:${this.lastErrorLog.fields.line}:${this.lastErrorLog.fields.column}`,
                version: this.clientVersion
              }), this.clientVersion);
              this.logEmitter.emit("error", error);
            }
          });
          if (this.lastError) {
            return reject(new Engine_1.PrismaClientInitializationError(Engine_1.getMessage(this.lastError), this.clientVersion));
          }
          if (this.lastErrorLog) {
            return reject(new Engine_1.PrismaClientInitializationError(Engine_1.getMessage(this.lastErrorLog), this.clientVersion));
          }
          try {
            await new Promise((resolve2, reject2) => {
              this.engineStartDeferred = {resolve: resolve2, reject: reject2};
            });
          } catch (err) {
            (_c = this.child) === null || _c === void 0 ? void 0 : _c.kill();
            throw err;
          }
          this.url = `http://localhost:${this.port}`;
          (async () => {
            const engineVersion = await this.version();
            debug3(`Client Version ${this.clientVersion}`);
            debug3(`Engine Version ${engineVersion}`);
          })();
          this.stopPromise = void 0;
          resolve();
        } catch (e) {
          reject(e);
        }
      });
    }
    async stop() {
      if (!this.stopPromise) {
        this.stopPromise = this._stop();
      }
      return this.stopPromise;
    }
    async _stop() {
      var _a, _b;
      if (this.startPromise) {
        await this.startPromise;
      }
      await new Promise((resolve) => process.nextTick(resolve));
      if (this.currentRequestPromise) {
        try {
          await this.currentRequestPromise;
        } catch (e) {
        }
      }
      this.getConfigPromise = void 0;
      let stopChildPromise;
      if (this.child) {
        debug3(`Stopping Prisma engine4`);
        if (this.startPromise) {
          debug3(`Waiting for start promise`);
          await this.startPromise;
        }
        debug3(`Done waiting for start promise`);
        stopChildPromise = new Promise((resolve, reject) => {
          this.engineStopDeferred = {resolve, reject};
        });
        this.queryEngineKilled = true;
        (_a = this.undici) === null || _a === void 0 ? void 0 : _a.close();
        (_b = this.child) === null || _b === void 0 ? void 0 : _b.kill();
        this.child = void 0;
      }
      if (stopChildPromise) {
        await stopChildPromise;
      }
      await new Promise((r) => process.nextTick(r));
      this.startPromise = void 0;
      this.engineStopDeferred = void 0;
      setTimeout(() => {
        if (this.socketPath) {
          try {
            fs_1.default.unlinkSync(this.socketPath);
          } catch (e) {
            debug3(e);
          }
          socketPaths.splice(socketPaths.indexOf(this.socketPath), 1);
          this.socketPath = void 0;
        }
      });
    }
    async kill(signal) {
      var _a, _b;
      this.getConfigPromise = void 0;
      this.globalKillSignalReceived = signal;
      this.queryEngineKilled = true;
      (_a = this.child) === null || _a === void 0 ? void 0 : _a.kill();
      (_b = this.undici) === null || _b === void 0 ? void 0 : _b.close();
    }
    getFreePort() {
      return new Promise((resolve, reject) => {
        const server = net_1.default.createServer((s) => s.end(""));
        server.unref();
        server.on("error", reject);
        server.listen(0, () => {
          const address = server.address();
          const port = typeof address === "string" ? parseInt(address.split(":").slice(-1)[0], 10) : address.port;
          server.close((e) => {
            if (e) {
              reject(e);
            }
            resolve(port);
          });
        });
      });
    }
    async getConfig() {
      if (!this.getConfigPromise) {
        this.getConfigPromise = this._getConfig();
      }
      return this.getConfigPromise;
    }
    async _getConfig() {
      const prismaPath = await this.getPrismaPath();
      const env = await this.getEngineEnvVars();
      const result = await execa_1.default(prismaPath, ["cli", "get-config"], {
        env: omit_1.omit(env, ["PORT"]),
        cwd: this.cwd
      });
      return JSON.parse(result.stdout);
    }
    async version() {
      const prismaPath = await this.getPrismaPath();
      const result = await execa_1.default(prismaPath, ["--version"], {
        env: {
          ...process.env
        }
      });
      return result.stdout;
    }
    async request(query, headers, numTry = 1) {
      if (this.stopPromise) {
        await this.stopPromise;
      }
      await this.start();
      if (!this.child && !this.engineEndpoint) {
        throw new Engine_1.PrismaClientUnknownRequestError(`Can't perform request, as the Engine has already been stopped`, this.clientVersion);
      }
      this.currentRequestPromise = this.undici.request(stringifyQuery(query), headers);
      return this.currentRequestPromise.then(({data, headers: headers2}) => {
        if (data.errors) {
          if (data.errors.length === 1) {
            throw this.graphQLToJSError(data.errors[0]);
          }
          throw new Error(JSON.stringify(data.errors));
        }
        const elapsed = parseInt(headers2["x-elapsed"]) / 1e3;
        if (this.restartCount > 0) {
          this.restartCount = 0;
        }
        return {data, elapsed};
      }).catch(async (e) => {
        const isError7 = await this.handleRequestError(e, numTry < 3);
        if (!isError7) {
          if (numTry < 3) {
            await new Promise((r) => setTimeout(r, Math.random() * 1e3));
            return this.request(query, headers, numTry + 1);
          }
        }
        throw isError7;
      });
    }
    async requestBatch(queries, transaction = false, numTry = 1) {
      await this.start();
      if (!this.child && !this.engineEndpoint) {
        throw new Engine_1.PrismaClientUnknownRequestError(`Can't perform request, as the Engine has already been stopped`, this.clientVersion);
      }
      const variables = {};
      const body = {
        batch: queries.map((query) => ({query, variables})),
        transaction
      };
      this.currentRequestPromise = this.undici.request(JSON.stringify(body));
      return this.currentRequestPromise.then(({data, headers}) => {
        const elapsed = parseInt(headers["x-elapsed"]) / 1e3;
        if (Array.isArray(data)) {
          return data.map((result) => {
            if (result.errors) {
              return this.graphQLToJSError(result.errors[0]);
            }
            return {
              data: result,
              elapsed
            };
          });
        } else {
          if (data.errors && data.errors.length === 1) {
            throw new Error(data.errors[0].error);
          }
          throw new Error(JSON.stringify(data));
        }
      }).catch(async (e) => {
        const isError7 = await this.handleRequestError(e, numTry < 3);
        if (!isError7) {
          if (numTry < 3) {
            await new Promise((r) => setTimeout(r, Math.random() * 1e3));
            return this.requestBatch(queries, transaction, numTry + 1);
          }
        }
        throw isError7;
      });
    }
    getLastLog() {
      var _a, _b, _c;
      const message = (_b = (_a = this.lastLog) === null || _a === void 0 ? void 0 : _a.fields) === null || _b === void 0 ? void 0 : _b.message;
      if (message) {
        const fields = Object.entries((_c = this.lastLog) === null || _c === void 0 ? void 0 : _c.fields).filter(([key]) => key !== "message").map(([key, value]) => {
          return `${key}: ${value}`;
        }).join(", ");
        if (fields) {
          return `${message}  ${fields}`;
        }
        return message;
      }
      return null;
    }
    graphQLToJSError(error) {
      if (error.user_facing_error.error_code) {
        return new Engine_1.PrismaClientKnownRequestError(error.user_facing_error.message, error.user_facing_error.error_code, this.clientVersion, error.user_facing_error.meta);
      }
      return new Engine_1.PrismaClientUnknownRequestError(error.user_facing_error.message, this.clientVersion);
    }
  }
  exports2.NodeEngine = NodeEngine;
  function stringifyQuery(q) {
    return `{"variables":{},"query":${JSON.stringify(q)}}`;
  }
  function hookProcess(handler, exit = false) {
    process.once(handler, async () => {
      for (const engine of engines5) {
        await engine.emitExit();
        engine.kill(handler);
      }
      engines5.splice(0, engines5.length);
      if (socketPaths.length > 0) {
        for (const socketPath of socketPaths) {
          try {
            fs_1.default.unlinkSync(socketPath);
          } catch (e) {
          }
        }
      }
      if (exit && process.listenerCount(handler) === 0) {
        process.exit();
      }
    });
  }
  hookProcess("beforeExit");
  hookProcess("exit");
  hookProcess("SIGINT", true);
  hookProcess("SIGUSR1", true);
  hookProcess("SIGUSR2", true);
  hookProcess("SIGTERM", true);
});

// ../../node_modules/.pnpm/@prisma/engine-core@2.11.0-dev.28/node_modules/@prisma/engine-core/dist/getInternalDatamodelJson.js
var require_getInternalDatamodelJson2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getInternalDatamodelJson = void 0;
  const path_1 = __importDefault(require("path"));
  const child_process_1 = require("child_process");
  const byline_1 = __importDefault(require_byline7());
  function getInternalDatamodelJson(datamodel, schemaInferrerPath = path_1.default.join(__dirname, "../schema-inferrer-bin")) {
    return new Promise((resolve, reject) => {
      const proc = child_process_1.spawn(schemaInferrerPath, {
        stdio: ["pipe", "pipe", process.stderr]
      });
      proc.on("error", function(err) {
        console.error("[schema-inferrer-bin] error: %s", err);
        reject(err);
      });
      proc.on("exit", function(code, signal) {
        if (code !== 0) {
          console.error("[schema-inferrer-bin] exit: code=%s signal=%s", code, signal);
        }
        reject();
      });
      const out = byline_1.default(proc.stdout);
      out.on("data", (line) => {
        const result = JSON.parse(line);
        const resultB64 = Buffer.from(JSON.stringify(result)).toString("base64");
        resolve(resultB64);
      });
      const cut = datamodel.replace(/\n/g, " ");
      proc.stdin.write(JSON.stringify({dataModel: cut}) + "\n");
    });
  }
  exports2.getInternalDatamodelJson = getInternalDatamodelJson;
});

// ../../node_modules/.pnpm/@prisma/engine-core@2.11.0-dev.28/node_modules/@prisma/engine-core/dist/index.js
var require_dist25 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.fixBinaryTargets = exports2.printGeneratorConfig = exports2.getInternalDatamodelJson = exports2.Engine = exports2.PrismaClientRustPanicError = exports2.PrismaClientInitializationError = exports2.PrismaClientUnknownRequestError = exports2.PrismaClientKnownRequestError = void 0;
  var Engine_1 = require_Engine2();
  Object.defineProperty(exports2, "PrismaClientKnownRequestError", {enumerable: true, get: function() {
    return Engine_1.PrismaClientKnownRequestError;
  }});
  Object.defineProperty(exports2, "PrismaClientUnknownRequestError", {enumerable: true, get: function() {
    return Engine_1.PrismaClientUnknownRequestError;
  }});
  Object.defineProperty(exports2, "PrismaClientInitializationError", {enumerable: true, get: function() {
    return Engine_1.PrismaClientInitializationError;
  }});
  Object.defineProperty(exports2, "PrismaClientRustPanicError", {enumerable: true, get: function() {
    return Engine_1.PrismaClientRustPanicError;
  }});
  var NodeEngine_1 = require_NodeEngine2();
  Object.defineProperty(exports2, "Engine", {enumerable: true, get: function() {
    return NodeEngine_1.NodeEngine;
  }});
  var getInternalDatamodelJson_1 = require_getInternalDatamodelJson2();
  Object.defineProperty(exports2, "getInternalDatamodelJson", {enumerable: true, get: function() {
    return getInternalDatamodelJson_1.getInternalDatamodelJson;
  }});
  var printGeneratorConfig_1 = require_printGeneratorConfig2();
  Object.defineProperty(exports2, "printGeneratorConfig", {enumerable: true, get: function() {
    return printGeneratorConfig_1.printGeneratorConfig;
  }});
  var util_1 = require_util10();
  Object.defineProperty(exports2, "fixBinaryTargets", {enumerable: true, get: function() {
    return util_1.fixBinaryTargets;
  }});
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/engineCommands.js
var require_engineCommands2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getVersion = exports2.formatSchema = exports2.getConfig = exports2.getDMMF = void 0;
  const chalk_1 = __importDefault(require_source());
  const execa_1 = __importDefault(require_execa2());
  const temp_write_1 = __importDefault(require_temp_write());
  const fs_1 = __importDefault(require("fs"));
  const util_1 = require("util");
  const debug_1 = __importDefault(require_dist22());
  const resolveBinary_1 = require_resolveBinary2();
  const debug3 = debug_1.default("engineCommands");
  const unlink = util_1.promisify(fs_1.default.unlink);
  const MAX_BUFFER = 1e9;
  async function getDMMF4({datamodel, cwd = process.cwd(), prismaPath: queryEnginePath, datamodelPath, retry = 4, enableExperimental}) {
    queryEnginePath = await resolveBinary_1.resolveBinary("query-engine", queryEnginePath);
    let result;
    try {
      let tempDatamodelPath = datamodelPath;
      if (!tempDatamodelPath) {
        try {
          tempDatamodelPath = await temp_write_1.default(datamodel);
        } catch (err) {
          throw new Error(chalk_1.default.redBright.bold("Get DMMF ") + "unable to write temp data model path");
        }
      }
      const options = {
        cwd,
        env: {
          ...process.env,
          PRISMA_DML_PATH: tempDatamodelPath,
          RUST_BACKTRACE: "1",
          ...process.env.NO_COLOR ? {} : {CLICOLOR_FORCE: "1"}
        },
        maxBuffer: MAX_BUFFER
      };
      const removedFeatureFlagMap = {
        insensitiveFilters: `${chalk_1.default.blueBright("info")} The preview flag "insensitiveFilters" is not needed anymore, please remove it from your schema.prisma`,
        atomicNumberOperations: `${chalk_1.default.blueBright("info")} The preview flag "atomicNumberOperations" is not needed anymore, please remove it from your schema.prisma`,
        connectOrCreate: `${chalk_1.default.blueBright("info")} The preview flag "connectOrCreate" is not needed anymore, please remove it from your schema.prisma`,
        transaction: `${chalk_1.default.blueBright("info")} The preview flag "transactionApi" is not needed anymore, please remove it from your schema.prisma`,
        transactionApi: `${chalk_1.default.blueBright("info")} The preview flag "transactionApi" is not needed anymore, please remove it from your schema.prisma`
      };
      if (enableExperimental) {
        enableExperimental = enableExperimental.filter((f) => {
          const removeMessage = removedFeatureFlagMap[f];
          if (removeMessage) {
            console.log(removeMessage);
            return false;
          }
          return true;
        }).filter((e) => !["middlewares", "aggregateApi", "distinct", "aggregations", "nativeTypes", "atomicNumberOperations"].includes(e));
      }
      const experimentalFlags = enableExperimental && Array.isArray(enableExperimental) && enableExperimental.length > 0 ? [`--enable-experimental=${enableExperimental.join(",")}`] : [];
      const args2 = [...experimentalFlags, "--enable-raw-queries", "cli", "dmmf"];
      result = await execa_1.default(queryEnginePath, args2, options);
      if (!datamodelPath) {
        await unlink(tempDatamodelPath);
      }
      if (result.stdout.includes("Please wait until the") && retry > 0) {
        debug3('Retrying after "Please wait until"');
        await new Promise((r) => setTimeout(r, 5e3));
        return getDMMF4({
          datamodel,
          cwd,
          prismaPath: queryEnginePath,
          datamodelPath,
          retry: retry - 1
        });
      }
      const firstCurly = result.stdout.indexOf("{");
      const stdout = result.stdout.slice(firstCurly);
      return JSON.parse(stdout);
    } catch (e) {
      debug3("getDMMF failed", e);
      if (e.message.includes("Command failed with exit code 26 (ETXTBSY)") && retry > 0) {
        await new Promise((resolve) => setTimeout(resolve, 500));
        debug3("Retrying after ETXTBSY");
        return getDMMF4({
          datamodel,
          cwd,
          prismaPath: queryEnginePath,
          datamodelPath,
          retry: retry - 1
        });
      }
      const output = e.stderr || e.stdout;
      if (output) {
        let json;
        try {
          json = JSON.parse(output);
        } catch (e2) {
        }
        let message = json && json.message || output;
        if (message.includes("debian-openssl-1.1.x: error while loading shared libraries: libssl.so.1.1: cannot open shared object file: No such file or directory") || message.includes("debian-openssl-1.0.x: error while loading shared libraries: libssl.so.1.0.0: cannot open shared object file: No such file or directory")) {
          message += `
${chalk_1.default.green(`Your linux installation misses the openssl package. You can install it like so:
`)}${chalk_1.default.green.bold("apt-get -qy update && apt-get -qy install openssl")}`;
        }
        throw new Error(chalk_1.default.redBright.bold("Schema parsing\n") + message);
      }
      if (e.message.includes("in JSON at position")) {
        throw new Error(`Problem while parsing the query engine response at ${queryEnginePath}. ${result.stdout}
${e.stack}`);
      }
      throw new Error(e);
    }
  }
  exports2.getDMMF = getDMMF4;
  async function getConfig5({datamodel, cwd = process.cwd(), prismaPath: queryEnginePath, datamodelPath, ignoreEnvVarErrors}) {
    queryEnginePath = await resolveBinary_1.resolveBinary("query-engine", queryEnginePath);
    let tempDatamodelPath = datamodelPath;
    if (!tempDatamodelPath) {
      try {
        tempDatamodelPath = await temp_write_1.default(datamodel);
      } catch (err) {
        throw new Error(chalk_1.default.redBright.bold("Get DMMF ") + "unable to write temp data model path");
      }
    }
    const args2 = ignoreEnvVarErrors ? ["--ignoreEnvVarErrors"] : [];
    try {
      const result = await execa_1.default(queryEnginePath, ["cli", "get-config", ...args2], {
        cwd,
        env: {
          ...process.env,
          PRISMA_DML_PATH: tempDatamodelPath,
          RUST_BACKTRACE: "1"
        },
        maxBuffer: MAX_BUFFER
      });
      if (!datamodelPath) {
        await unlink(tempDatamodelPath);
      }
      return JSON.parse(result.stdout);
    } catch (e) {
      if (e.stderr || e.stdout) {
        const error = e.stderr ? e.stderr : e.stout;
        let jsonError, message;
        try {
          jsonError = JSON.parse(error);
          message = `${chalk_1.default.redBright.bold("Get config ")}
${chalk_1.default.redBright(jsonError.message)}
`;
          if (jsonError.error_code) {
            if (jsonError.error_code === "P1012") {
              message = chalk_1.default.redBright(`Schema Parsing ${jsonError.error_code}

`) + message;
            } else {
              message = chalk_1.default.redBright(`${jsonError.error_code}

`) + message;
            }
          }
        } catch (e2) {
          throw new Error(chalk_1.default.redBright.bold("Get config ") + error);
        }
        throw new Error(message);
      }
      throw new Error(chalk_1.default.redBright.bold("Get config ") + e);
    }
  }
  exports2.getConfig = getConfig5;
  async function formatSchema2({schemaPath, schema}) {
    if (!schema && !schemaPath) {
      throw new Error(`Paramater schema or schemaPath must be passed.`);
    }
    const prismaFmtPath = await resolveBinary_1.resolveBinary("prisma-fmt");
    const showColors = !process.env.NO_COLOR && process.stdout.isTTY;
    const options = {
      env: {
        ...process.env,
        RUST_BACKTRACE: "1",
        ...showColors ? {CLICOLOR_FORCE: "1"} : {}
      },
      maxBuffer: MAX_BUFFER
    };
    let result;
    if (schemaPath) {
      if (!fs_1.default.existsSync(schemaPath)) {
        throw new Error(`Schema at ${schemaPath} does not exist.`);
      }
      result = await execa_1.default(prismaFmtPath, ["format", "-i", schemaPath], options);
    } else if (schema) {
      result = await execa_1.default(prismaFmtPath, ["format"], {
        ...options,
        input: schema
      });
    }
    return result.stdout;
  }
  exports2.formatSchema = formatSchema2;
  async function getVersion2(enginePath) {
    enginePath = await resolveBinary_1.resolveBinary("query-engine", enginePath);
    const result = await execa_1.default(enginePath, ["--version"], {
      env: {
        ...process.env
      },
      maxBuffer: MAX_BUFFER
    });
    return result.stdout;
  }
  exports2.getVersion = getVersion2;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/resolveOutput.js
var require_resolveOutput2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.resolveOutput = void 0;
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const util_1 = require("util");
  const exists = util_1.promisify(fs_1.default.exists);
  async function resolveNodeModulesBase(cwd) {
    if (await exists(path_1.default.resolve(process.cwd(), "prisma/schema.prisma"))) {
      return process.cwd();
    }
    if (path_1.default.relative(process.cwd(), cwd) === "prisma" && await exists(path_1.default.resolve(process.cwd(), "package.json"))) {
      return process.cwd();
    }
    if (await exists(path_1.default.resolve(cwd, "node_modules"))) {
      return cwd;
    }
    if (await exists(path_1.default.resolve(cwd, "../node_modules"))) {
      return path_1.default.join(cwd, "../");
    }
    if (await exists(path_1.default.resolve(cwd, "package.json"))) {
      return cwd;
    }
    if (await exists(path_1.default.resolve(cwd, "../package.json"))) {
      return path_1.default.join(cwd, "../");
    }
    return cwd;
  }
  async function resolveOutput(options) {
    const defaultOutput = stripRelativePath(options.defaultOutput);
    if (defaultOutput.startsWith("node_modules")) {
      const nodeModulesBase = await resolveNodeModulesBase(options.baseDir);
      return path_1.default.resolve(nodeModulesBase, defaultOutput);
    }
    return path_1.default.resolve(options.baseDir, defaultOutput);
  }
  exports2.resolveOutput = resolveOutput;
  function stripRelativePath(pathString) {
    if (pathString.startsWith("./")) {
      return pathString.slice(2);
    }
    return pathString;
  }
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/isCurrentBinInstalledGlobally.js
var require_isCurrentBinInstalledGlobally2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.isCurrentBinInstalledGlobally = void 0;
  const fs_1 = __importDefault(require("fs"));
  const global_dirs_1 = __importDefault(require_global_dirs());
  function isCurrentBinInstalledGlobally3() {
    try {
      const realPrismaPath = fs_1.default.realpathSync(process.argv[1]);
      const usingGlobalYarn = realPrismaPath.indexOf(global_dirs_1.default.yarn.packages) === 0;
      const usingGlobalNpm = realPrismaPath.indexOf(fs_1.default.realpathSync(global_dirs_1.default.npm.packages)) === 0;
      if (usingGlobalNpm) {
        return "npm";
      }
      if (usingGlobalYarn) {
        return "yarn";
      } else {
        false;
      }
    } catch (e) {
    }
    return false;
  }
  exports2.isCurrentBinInstalledGlobally = isCurrentBinInstalledGlobally3;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/getCommandWithExecutor.js
var require_getCommandWithExecutor2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getCommandWithExecutor = void 0;
  const isCurrentBinInstalledGlobally_1 = require_isCurrentBinInstalledGlobally2();
  function getCommandWithExecutor4(command) {
    var _a;
    if (isCurrentBinInstalledGlobally_1.isCurrentBinInstalledGlobally()) {
      return command;
    } else {
      const yarnUsed = (_a = process.env.npm_config_user_agent) === null || _a === void 0 ? void 0 : _a.includes("yarn");
      const npxUsed = __dirname.includes("_npx");
      if (npxUsed) {
        return `npx ${command}`;
      } else if (yarnUsed) {
        return `yarn ${command}`;
      } else {
        return command;
      }
    }
  }
  exports2.getCommandWithExecutor = getCommandWithExecutor4;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/predefinedGeneratorResolvers.js
var require_predefinedGeneratorResolvers2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.predefinedGeneratorResolvers = void 0;
  const resolve_pkg_1 = __importDefault(require_resolve_pkg());
  const chalk_1 = __importDefault(require_source());
  const has_yarn_1 = __importDefault(require_has_yarn());
  const execa_1 = __importDefault(require_execa2());
  const path_1 = __importDefault(require("path"));
  const fs_1 = __importDefault(require("fs"));
  const getCommandWithExecutor_1 = require_getCommandWithExecutor2();
  const debug_1 = __importDefault(require_dist22());
  const debugEnabled = debug_1.default.enabled("generator");
  exports2.predefinedGeneratorResolvers = {
    photonjs: () => {
      throw new Error(`Oops! Photon has been renamed to Prisma Client. Please make the following adjustments:
  1. Rename ${chalk_1.default.red('provider = "photonjs"')} to ${chalk_1.default.green('provider = "prisma-client-js"')} in your ${chalk_1.default.bold("schema.prisma")} file.
  2. Replace your ${chalk_1.default.bold("package.json")}'s ${chalk_1.default.red("@prisma/photon")} dependency to ${chalk_1.default.green("@prisma/client")}
  3. Replace ${chalk_1.default.red("import { Photon } from '@prisma/photon'")} with ${chalk_1.default.green("import { PrismaClient } from '@prisma/client'")} in your code.
  4. Run ${chalk_1.default.green(getCommandWithExecutor_1.getCommandWithExecutor("prisma generate"))} again.
      `);
    },
    "prisma-client-js": async (baseDir, version) => {
      let prismaClientDir = resolve_pkg_1.default("@prisma/client", {cwd: baseDir});
      checkYarnVersion();
      if (debugEnabled) {
        console.log({prismaClientDir});
      }
      if (!prismaClientDir && !process.env.PRISMA_GENERATE_SKIP_AUTOINSTALL) {
        if (!fs_1.default.existsSync(path_1.default.join(process.cwd(), "package.json")) && !fs_1.default.existsSync(path_1.default.join(process.cwd(), "../package.json"))) {
          const defaultPackageJson = `{
  "name": "my-prisma-project",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \\"Error: no test specified\\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC"
}
        `;
          fs_1.default.writeFileSync(path_1.default.join(process.cwd(), "package.json"), defaultPackageJson);
          console.info(`✔ Created ${chalk_1.default.bold.green("./package.json")}`);
        }
        await installPackage(baseDir, `-D @prisma/cli@${version !== null && version !== void 0 ? version : "latest"}`);
        await installPackage(baseDir, `@prisma/client@${version !== null && version !== void 0 ? version : "latest"}`);
        prismaClientDir = resolve_pkg_1.default("@prisma/client", {cwd: baseDir});
        if (!prismaClientDir) {
          throw new Error(`Could not resolve @prisma/client despite the installation that we just tried.
Please try to install it by hand with ${chalk_1.default.bold.greenBright("npm install @prisma/client")} and rerun ${chalk_1.default.bold(getCommandWithExecutor_1.getCommandWithExecutor("prisma generate"))} 🙏.`);
        }
        console.info(`
✔ Installed the ${chalk_1.default.bold.green("@prisma/client")} and ${chalk_1.default.bold.green("prisma")} packages in your project`);
      }
      if (!prismaClientDir) {
        throw new Error(`Could not resolve @prisma/client. 
Please try to install it with ${chalk_1.default.bold.greenBright("npm install @prisma/client")} and rerun ${chalk_1.default.bold(getCommandWithExecutor_1.getCommandWithExecutor("prisma generate"))} 🙏.`);
      }
      return {
        outputPath: prismaClientDir,
        generatorPath: `node --max-old-space-size=8096 "${path_1.default.resolve(prismaClientDir, "generator-build/index.js")}"`
      };
    }
  };
  async function installPackage(baseDir, pkg2) {
    const yarnUsed = has_yarn_1.default(baseDir) || has_yarn_1.default(path_1.default.join(baseDir, ".."));
    const cmdName = yarnUsed ? "yarn add" : "npm install";
    await execa_1.default.command(`${cmdName} ${pkg2}`, {
      cwd: baseDir,
      stdio: "inherit",
      env: {
        ...process.env,
        SKIP_GENERATE: "true"
      }
    });
  }
  function checkYarnVersion() {
    if (process.env.npm_config_user_agent) {
      const match = parseUserAgentString(process.env.npm_config_user_agent);
      if (match) {
        const {agent, major, minor, patch} = match;
        if (agent === "yarn" && major === 1) {
          const currentYarnVersion = `${major}.${minor}.${patch}`;
          const minYarnVersion = "1.19.2";
          if (semverLt(currentYarnVersion, minYarnVersion)) {
            console.error(`${chalk_1.default.yellow("warning")} Your ${chalk_1.default.bold("yarn")} has version ${currentYarnVersion}, which is outdated. Please update it to ${chalk_1.default.bold(minYarnVersion)} or ${chalk_1.default.bold("newer")} in order to use Prisma.`);
          }
        }
      }
    }
  }
  function semverLt(a, b) {
    const [major1, minor1, patch1] = a.split(".");
    const [major2, minor2, patch2] = b.split(".");
    if (major1 < major2) {
      return true;
    }
    if (major1 > major2) {
      return false;
    }
    if (minor1 < minor2) {
      return true;
    }
    if (minor1 > minor2) {
      return false;
    }
    if (patch1 < patch2) {
      return true;
    }
    if (patch1 > patch2) {
      return false;
    }
    return false;
  }
  function parseUserAgentString(str) {
    const userAgentRegex = /(\w+)\/(\d+)\.(\d+)\.(\d+)/;
    const match = userAgentRegex.exec(str);
    if (match) {
      const agent = match[1];
      const major = parseInt(match[2]);
      const minor = parseInt(match[3]);
      const patch = parseInt(match[4]);
      return {agent, major, minor, patch};
    }
    return null;
  }
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/utils/extractPreviewFeatures.js
var require_extractPreviewFeatures2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.extractPreviewFeatures = void 0;
  function extractPreviewFeatures(config) {
    var _a;
    return ((_a = config.generators.find((g) => g.provider === "prisma-client-js")) === null || _a === void 0 ? void 0 : _a.previewFeatures) || [];
  }
  exports2.extractPreviewFeatures = extractPreviewFeatures;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/utils/mapPreviewFeatures.js
var require_mapPreviewFeatures2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.mapPreviewFeatures = void 0;
  const featureFlagMap = {
    transactionApi: "transaction",
    aggregateApi: "aggregations"
  };
  function mapPreviewFeatures(features) {
    if (Array.isArray(features) && features.length > 0) {
      return features.map((f) => {
        var _a;
        return (_a = featureFlagMap[f]) !== null && _a !== void 0 ? _a : f;
      });
    }
    return [];
  }
  exports2.mapPreviewFeatures = mapPreviewFeatures;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/versions.js
var require_versions2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.engineVersions = void 0;
  exports2.engineVersions = {"2.0.0-preview025": "8814060fa684793b73d07dbfccd4b7777b3361ae", "2.0.0-beta.1": "2accb9c7eacdc984874eaeb63377fe705dfd3203", "2.0.0-beta.2": "76857c35ba1e1764dd5473656ecbbb2f739e1822", "2.0.0-beta.3": "2fb8f444d9cdf7c0beee7b041194b42d7a9ce1e6", "2.0.0-beta.4": "afd294205618b1c825b013ba6f5a6ebe4aa4a514", "2.0.0-beta.5": "0c2ec197653b278b2978845ef958db88824cd82e", "2.0.0-beta.6": "c48b94aa8d1d9a0e5582dcd14e25202b76303dca", "2.0.0-beta.7": "5d39801acf2e3475bd9dab029a63634358b07bf1", "2.0.0-beta.8": "ff6959d77f8880ec037ed8201fff4a92f3aabaa0", "2.0.0-beta.9": "de2bc1cbdb5561ad73d2f08463fa2eec48993f56", "2.0.0": "de2bc1cbdb5561ad73d2f08463fa2eec48993f56", "2.1.0-dev.1": "de2bc1cbdb5561ad73d2f08463fa2eec48993f56", "2.1.0-dev.3": "de2bc1cbdb5561ad73d2f08463fa2eec48993f56", "2.1.0-dev.4": "de2bc1cbdb5561ad73d2f08463fa2eec48993f56", "2.1.0-dev.5": "8276c7c5aa78dbfea6213a4f9918200ee909b9a1", "2.1.0-dev.6": "f64916f0b6ce4210f7793b551f6bf9bfab7fd45a", "2.1.0-dev.7": "f64916f0b6ce4210f7793b551f6bf9bfab7fd45a", "2.1.0-dev.8": "f64916f0b6ce4210f7793b551f6bf9bfab7fd45a", "2.1.0-dev.9": "dc0f43d1460553447c563479493914279205d48f", "2.1.0-dev.10": "dc0f43d1460553447c563479493914279205d48f", "2.1.0-dev.11": "dc0f43d1460553447c563479493914279205d48f", "2.1.0-dev.12": "e52ce7fbe503b390ca40425e62efeb5bc2cefb7e", "2.1.0-dev.13": "6c7b34889020f8b10eea253f37022b6a1a935de3", "2.1.0-dev.14": "d75f4952ce0649fcf62c068cf03c18944b0bce34", "2.1.0-dev.15": "e172ae243853e2a47c75a1abe5547d0677980346", "2.1.0-dev.16": "077166a5c1ab914cf3d9764adc44ed812c7aa5b3", "2.1.0-dev.17": "7862cc88dc37aad8eb16913b5c09af408e5239fc", "2.1.0-dev.18": "487d9dd9cd33fa68a3eb9f3a991be11927fee9aa", "2.1.0-dev.19": "4e71ba30f44f81b4a62e51502941aa71e451be66", "2.1.0-dev.20": "55f869ed93b06baf167e981f5d4f2d8161f49998", "2.1.0-dev.21": "55f869ed93b06baf167e981f5d4f2d8161f49998", "2.1.0-dev.22": "55f869ed93b06baf167e981f5d4f2d8161f49998", "2.1.0-dev.24": "55f869ed93b06baf167e981f5d4f2d8161f49998", "2.1.0-dev.25": "8375158b46e194d6f48fb78be6e4ac58e693f2d4", "2.1.0-dev.26": "8375158b46e194d6f48fb78be6e4ac58e693f2d4", "2.1.0-dev.27": "8375158b46e194d6f48fb78be6e4ac58e693f2d4", "2.0.1-dev.1": "7d77a7cd570c9dedb4cdf31a1cbec615cf2e1eda", "2.0.1-dev.2": "7d77a7cd570c9dedb4cdf31a1cbec615cf2e1eda", "2.1.0-dev.28": "6838566f3107ff9f8de79e3bb8a731e70c02fb00", "2.1.0-dev.29": "6838566f3107ff9f8de79e3bb8a731e70c02fb00", "2.0.1-dev.3": "7d77a7cd570c9dedb4cdf31a1cbec615cf2e1eda", "2.0.1": "7d77a7cd570c9dedb4cdf31a1cbec615cf2e1eda", "2.1.0-dev.30": "2e65011d592bae491ee9dd5f8a6159c85c35e767", "2.1.0-dev.31": "2e65011d592bae491ee9dd5f8a6159c85c35e767", "2.1.0-dev.32": "2e65011d592bae491ee9dd5f8a6159c85c35e767", "2.1.0-dev.33": "2e65011d592bae491ee9dd5f8a6159c85c35e767", "2.1.0-dev.34": "2e65011d592bae491ee9dd5f8a6159c85c35e767", "2.1.0-dev.35": "2e65011d592bae491ee9dd5f8a6159c85c35e767", "2.1.0-dev.36": "12d156ebbe4bd254b3d20a2fa132bcc66a802502", "2.1.0-dev.37": "12d156ebbe4bd254b3d20a2fa132bcc66a802502", "2.1.0-dev.38": "12d156ebbe4bd254b3d20a2fa132bcc66a802502", "2.1.0-dev.39": "ffc156935b82a02a6770ab5e355e33312a0d0706", "2.1.0-dev.40": "bb1356b9cbd72b74787bfa66bbe5c8e338810b05", "2.1.0-dev.41": "bb1356b9cbd72b74787bfa66bbe5c8e338810b05", "2.1.0-dev.42": "bb1356b9cbd72b74787bfa66bbe5c8e338810b05", "2.1.0-dev.43": "bb1356b9cbd72b74787bfa66bbe5c8e338810b05", "2.1.0-dev.44": "9a43c75685826419972aa2ee5847d7a7107a176f", "2.1.0-dev.45": "9a43c75685826419972aa2ee5847d7a7107a176f", "2.1.0-dev.46": "9a43c75685826419972aa2ee5847d7a7107a176f", "2.1.0-dev.47": "9a43c75685826419972aa2ee5847d7a7107a176f", "2.1.0-dev.48": "dbeb321de898f94b03cd6f9b525c0187d93c3119", "2.1.0-dev.49": "64064ad0b1018ccb2309d97cbe958b666e5c55ea", "2.1.0-dev.50": "eef69002f93443908594c3293eca977e22008b22", "2.1.0-dev.51": "38d970371091514dcd2965847e30e9bf56820057", "2.1.0-dev.52": "c60e0db03225f303cfed42afcb6814999c95c6d8", "2.1.0-dev.53": "18c02927ce69cd6d593e1bfca4647ec46ee172d7", "2.1.0-dev.54": "6b10f7bfb5c09d707016877e7ec2e0c35f26eb67", "2.1.0-dev.55": "713204c8241b1870c0ae1145a256232744708cce", "2.1.0-dev.56": "713204c8241b1870c0ae1145a256232744708cce", "2.1.0-dev.57": "713204c8241b1870c0ae1145a256232744708cce", "2.1.0-dev.58": "4440772035795a0424be62040e2295c56e5c6ad0", "2.1.0-dev.59": "4440772035795a0424be62040e2295c56e5c6ad0", "2.1.0": "4440772035795a0424be62040e2295c56e5c6ad0", "2.2.0-dev.1": "30a3b13a02ea2b9a1bfa980e7c25b41bdbf77ea5", "2.2.0-dev.2": "30a3b13a02ea2b9a1bfa980e7c25b41bdbf77ea5", "2.1.1-dev.2": "34b761660584e32d715c3e86ecec3e2c4d50d0d9", "2.1.1": "34b761660584e32d715c3e86ecec3e2c4d50d0d9", "2.2.0-dev.3": "34b761660584e32d715c3e86ecec3e2c4d50d0d9", "2.2.0-dev.4": "43a04d7fe56db1d914cdd3619ef5c819c783d243", "2.2.0-dev.5": "219a8d806a3568142dee4c8673e767750e9d0136", "2.2.0-dev.6": "36247a04e8ff91aec3ecd2af1680494201048f34", "2.2.0-dev.7": "36247a04e8ff91aec3ecd2af1680494201048f34", "2.2.0-dev.8": "e006ba7fcfd6257d81e616e4e1bbbab8e017a9fe", "2.2.0-dev.9": "632c075edd87eff798b1babf16a4965ae2b45a9b", "2.2.0-dev.10": "632c075edd87eff798b1babf16a4965ae2b45a9b", "2.2.0-dev.11": "4414d4e066670f6edb6da381e6c8fcf544d6178f", "2.2.0-dev.12": "d23f217662512ed9c9a4a6a920c377154053a0a4", "2.2.0-dev.13": "700298ef090d8d45bed3750e99f56ba0be03673d", "2.2.0-dev.14": "700298ef090d8d45bed3750e99f56ba0be03673d", "2.2.0-dev.15": "297d4dddf12cd89b7c6de31ef15c42967f5cc559", "2.1.2-dev.1": "363f5a521d6b06543e53d134652a0037a3096d41", "2.1.2-dev.2": "363f5a521d6b06543e53d134652a0037a3096d41", "2.1.2": "363f5a521d6b06543e53d134652a0037a3096d41", "2.1.3-dev.1": "363f5a521d6b06543e53d134652a0037a3096d41", "2.1.3": "363f5a521d6b06543e53d134652a0037a3096d41", "2.2.0-dev.16": "297d4dddf12cd89b7c6de31ef15c42967f5cc559", "2.2.0-dev.17": "297d4dddf12cd89b7c6de31ef15c42967f5cc559", "2.2.0-dev.18": "297d4dddf12cd89b7c6de31ef15c42967f5cc559", "2.2.0-dev.19": "cb47e060d4a557e1e7870f50fc7b3c014f278114", "2.2.0-dev.20": "9216be08662d7280cc02246b4f5cc5f4b93cf8a3", "2.2.0-dev.21": "9216be08662d7280cc02246b4f5cc5f4b93cf8a3", "2.2.0-dev.23": "9216be08662d7280cc02246b4f5cc5f4b93cf8a3", "2.2.0-dev.24": "9216be08662d7280cc02246b4f5cc5f4b93cf8a3", "2.2.0-dev.25": "9216be08662d7280cc02246b4f5cc5f4b93cf8a3", "2.2.0-dev.26": "c29fbcd0f57c67e11722e479b9d135b346767e69", "2.2.0-dev.27": "c29fbcd0f57c67e11722e479b9d135b346767e69", "2.2.0-dev.28": "d6ff7119649922b84e413b3b69660e2f49e2ddf3", "2.2.0-dev.29": "d6ff7119649922b84e413b3b69660e2f49e2ddf3", "2.2.0-dev.30": "f5632770336d9cd89b6fa90204c3decf335c065a", "2.2.0-dev.31": "f5632770336d9cd89b6fa90204c3decf335c065a", "2.2.0-dev.32": "f5632770336d9cd89b6fa90204c3decf335c065a", "2.2.0-dev.33": "f5632770336d9cd89b6fa90204c3decf335c065a", "2.2.0-dev.34": "75d49d38ea10c8099ff9e90336c721fa6b47b90a", "2.2.0-dev.35": "c65f7b5d18ee8dbd0f43f654571bd3e85b625d80", "2.2.0-dev.36": "a0b56e4a4bc0dc6216e1cb26bd91a4094b868010", "2.2.0-dev.37": "ea035543e59571161e00ccd4063f5638283bfba7", "2.2.0-dev.38": "ea035543e59571161e00ccd4063f5638283bfba7", "2.2.0-dev.39": "ea035543e59571161e00ccd4063f5638283bfba7", "2.2.0-dev.40": "ea035543e59571161e00ccd4063f5638283bfba7", "2.2.0-dev.41": "1c840bb755d3b03acf9259f689303db93159c7b5", "2.2.0-dev.42": "1c840bb755d3b03acf9259f689303db93159c7b5", "2.2.0-dev.43": "ed51c9476579e3aa52ec43079fb2a351c70f5bb7", "2.2.0-dev.44": "ed51c9476579e3aa52ec43079fb2a351c70f5bb7", "2.2.0-dev.45": "ed51c9476579e3aa52ec43079fb2a351c70f5bb7", "2.2.0-dev.46": "ed51c9476579e3aa52ec43079fb2a351c70f5bb7", "2.2.0-dev.47": "ed51c9476579e3aa52ec43079fb2a351c70f5bb7", "2.2.0-dev.48": "ed51c9476579e3aa52ec43079fb2a351c70f5bb7", "2.2.0-dev.49": "ed51c9476579e3aa52ec43079fb2a351c70f5bb7", "2.2.0-dev.50": "83ac782d5d93dcee37efeba8ccbeff596701148a", "2.2.0-dev.51": "83ac782d5d93dcee37efeba8ccbeff596701148a", "2.2.0-dev.52": "83ac782d5d93dcee37efeba8ccbeff596701148a", "2.2.0-dev.53": "83ac782d5d93dcee37efeba8ccbeff596701148a", "2.2.0-dev.54": "83ac782d5d93dcee37efeba8ccbeff596701148a", "2.2.0-dev.55": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.56": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.57": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.58": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.59": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.60": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.61": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.62": "87846242af9393fb8fe9d3644cbb2dec2e322155", "2.2.0-dev.63": "45c4da4dd3ccd6a322796b228bdf937c7ce884e8", "2.2.0": "45c4da4dd3ccd6a322796b228bdf937c7ce884e8", "2.3.0-dev.1": "3b7bab56afd3c41d2b1e92b21607c25527376819", "2.3.0-dev.2": "341b5a03061332a0a107760fc5be098168b7af49", "2.3.0-dev.3": "f21b611f21983123efdd86b230717b552898db2c", "2.3.0-dev.4": "7c61a28fce591bca9794f84bada575727c8d3a81", "2.3.0-dev.5": "7c61a28fce591bca9794f84bada575727c8d3a81", "2.3.0-dev.6": "9a238f2a34ac96b4006d0622063cda5d7c550f39", "2.3.0-dev.7": "225c75492b90e646e0224803ae30926eb676bdd0", "2.3.0-dev.8": "6b4130069651151477456fde7c6f1adce7e5aba1", "2.3.0-dev.9": "6b4130069651151477456fde7c6f1adce7e5aba1", "2.3.0-dev.10": "9fa0e57d0617e4e18ceae3b23280702f90b18412", "2.3.0-dev.11": "9fa0e57d0617e4e18ceae3b23280702f90b18412", "2.3.0-dev.12": "68efc71c4b657c5dbd59b177ecf2daf18e5b0201", "2.2.1-dev.1": "832e37683666c748b0a1cbdc2c5068b5e443e816", "2.2.1-dev.2": "832e37683666c748b0a1cbdc2c5068b5e443e816", "2.3.0-dev.13": "ba2d82113a01f9d56c88cf52279fb0bd5f74fac0", "2.2.1-dev.3": "832e37683666c748b0a1cbdc2c5068b5e443e816", "2.2.1-dev.4": "832e37683666c748b0a1cbdc2c5068b5e443e816", "2.3.0-dev.14": "21bd701db858e37b8f3157190a86da93e21ec5df", "2.2.1-dev.5": "832e37683666c748b0a1cbdc2c5068b5e443e816", "2.3.0-dev.15": "21bd701db858e37b8f3157190a86da93e21ec5df", "2.3.0-dev.16": "21bd701db858e37b8f3157190a86da93e21ec5df", "2.3.0-dev.17": "21bd701db858e37b8f3157190a86da93e21ec5df", "2.2.1-dev.6": "832e37683666c748b0a1cbdc2c5068b5e443e816", "2.3.0-dev.18": "21bd701db858e37b8f3157190a86da93e21ec5df", "2.2.1": "832e37683666c748b0a1cbdc2c5068b5e443e816", "2.3.0-dev.19": "81e452517f2e53825001cddd130dc09e0862711b", "2.2.2-dev.1": "a9e8c3d97ef2a0cf59256e6b26097f2a80f0a6a4", "2.2.2": "a9e8c3d97ef2a0cf59256e6b26097f2a80f0a6a4", "2.3.0-dev.20": "7dd62871982e0897f81591928ef43d4669b2a176", "2.3.0-dev.21": "7dd62871982e0897f81591928ef43d4669b2a176", "2.3.0-dev.23": "b032e1220061befb095deef6f8ee2e36bacbf4d9", "2.3.0-dev.25": "b032e1220061befb095deef6f8ee2e36bacbf4d9", "2.3.0-dev.26": "b032e1220061befb095deef6f8ee2e36bacbf4d9", "2.3.0-dev.27": "b032e1220061befb095deef6f8ee2e36bacbf4d9", "2.3.0-dev.28": "b032e1220061befb095deef6f8ee2e36bacbf4d9", "2.3.0-dev.29": "99bc0e4998e8148ef5716312495fcaa7293b62ff", "2.3.0-dev.30": "a1ea05fcba2ecf3d741a559a8394a61a0958b662", "2.3.0-dev.31": "a1ea05fcba2ecf3d741a559a8394a61a0958b662", "2.3.0-dev.32": "a6590bef185927e77afebb0bf8a1bc3defe5d0ad", "2.3.0-dev.33": "ba26cce0f10f923f1de113aae0763d2412e18247", "2.3.0-dev.34": "ba26cce0f10f923f1de113aae0763d2412e18247", "2.3.0-dev.35": "ba26cce0f10f923f1de113aae0763d2412e18247", "2.3.0-dev.36": "0335c039a0bc842a20ffe7832d26e592f34ea916", "2.3.0-dev.37": "0335c039a0bc842a20ffe7832d26e592f34ea916", "2.3.0-dev.38": "cdc255245a255c24b3dd50db25a050636973ec77", "2.3.0-dev.39": "1efe9b96955f1316d84351b2e771d81246873022", "2.3.0-dev.40": "156ad9546453b9b64fd2feeede6ad8991bb9de22", "2.3.0-dev.41": "8619f7cdd8edc678160849a499cdaaf73dc9b63c", "2.3.0-dev.42": "f7829d796be36394ee9a64f1fc67c643aae046f2", "2.3.0-dev.43": "f7829d796be36394ee9a64f1fc67c643aae046f2", "2.3.0-dev.44": "ede20e7638e18c628b4f70b3d2483c87b919982a", "2.3.0-dev.45": "862d67e6b9ca50e232d4cdbc3b12b3f1f08cec8a", "2.3.0-dev.46": "862d67e6b9ca50e232d4cdbc3b12b3f1f08cec8a", "2.3.0-dev.47": "862d67e6b9ca50e232d4cdbc3b12b3f1f08cec8a", "2.3.0-dev.48": "143a8265b75aefe077e9f483f4a275ab5e0ad5f6", "2.3.0-dev.49": "143a8265b75aefe077e9f483f4a275ab5e0ad5f6", "2.3.0-dev.50": "143a8265b75aefe077e9f483f4a275ab5e0ad5f6", "2.3.0-dev.51": "143a8265b75aefe077e9f483f4a275ab5e0ad5f6", "2.3.0-dev.52": "143a8265b75aefe077e9f483f4a275ab5e0ad5f6", "2.3.0-dev.53": "b1c5396ac9832eb8481b3c7f36c393ab1747211d", "2.3.0-dev.54": "b1c5396ac9832eb8481b3c7f36c393ab1747211d", "2.3.0-dev.55": "b1c5396ac9832eb8481b3c7f36c393ab1747211d", "2.3.0-dev.56": "b1c5396ac9832eb8481b3c7f36c393ab1747211d", "2.3.0-dev.57": "e11114fa1ea826f9e7b4fa1ced34e78892fe8e0e", "2.3.0": "e11114fa1ea826f9e7b4fa1ced34e78892fe8e0e", "2.4.0-dev.1": "bbc9be76da4bf5af6bacb8655633ae4ea56b6f6f", "2.4.0-dev.2": "346c7b5b70ae5ed4e10b0342b556e7d53c27c0af", "2.4.0-dev.3": "84202350ac21bc9479513fe91cc3510629aac69f", "2.4.0-dev.4": "1fdb184ea79af011b9c0ac677562719088f490af", "2.4.0-dev.5": "d995a75689d1bd4e90b019fd083d90d6fa2d48fa", "2.4.0-dev.6": "d995a75689d1bd4e90b019fd083d90d6fa2d48fa", "2.4.0-dev.7": "0f3750ce5b6509b766811fbe350e83f232daa57f", "2.4.0-dev.8": "0f3750ce5b6509b766811fbe350e83f232daa57f", "2.4.0-dev.9": "05ff93c8e9cea55e82b3bd3e50f71a571c6b0de5", "2.4.0-dev.10": "1e19628edbd4755d416300449b4c7bbb9d85e03f", "2.4.0-dev.11": "70bbce05e86a6109ced7ad133bd5dca095b3fa58", "2.4.0-dev.12": "054d8fd21e5ab5c9955492c3aad62dbb8c15f40b", "2.4.0-dev.13": "0912eb4031e6d77c4e13637447099b7100e602a3", "2.4.0-dev.14": "3a3fd0fe2660782248c1e42fa75ae0731fed8819", "2.4.0-dev.15": "9d759290dff266f4d4c39e415d8ac846827a4053", "2.4.0-dev.16": "ab6fccbd80bff0d30b57f371c8929de7b48c77e2", "2.4.0-dev.17": "fed4a488fd2a7c81fc556262f9ece4eb3fe6bd23", "2.4.0-dev.18": "b5c495e1e22d312e3ade4f4d8dbf5123e1ff9e30", "2.4.0-dev.19": "37468de984a57c89edf7ebde8c5ebd81d1e7183b", "2.4.0-dev.20": "37468de984a57c89edf7ebde8c5ebd81d1e7183b", "2.4.0-dev.21": "37468de984a57c89edf7ebde8c5ebd81d1e7183b", "2.4.0-dev.22": "37468de984a57c89edf7ebde8c5ebd81d1e7183b", "2.4.0-dev.23": "37468de984a57c89edf7ebde8c5ebd81d1e7183b", "2.4.0-dev.24": "37468de984a57c89edf7ebde8c5ebd81d1e7183b", "2.4.0-dev.25": "37468de984a57c89edf7ebde8c5ebd81d1e7183b", "2.4.0-dev.26": "f12ffba327775df35dca10f5cbcb829e866614e8", "2.4.0-dev.27": "1e72e2311f531c77af7675b1e1acac595d26bb49", "2.4.0-dev.28": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.29": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.30": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.31": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.32": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.33": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.34": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.35": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.36": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.37": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.38": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.39": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.40": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.41": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.42": "8eb4af13db3ce3b6b0e02e11d4d236082544281a", "2.4.0-dev.43": "8337329d29aec488119918879493ab6fd38c880e", "2.4.0-dev.44": "8337329d29aec488119918879493ab6fd38c880e", "2.4.0-dev.45": "8337329d29aec488119918879493ab6fd38c880e", "2.4.0-dev.46": "8337329d29aec488119918879493ab6fd38c880e", "2.4.0-dev.47": "8337329d29aec488119918879493ab6fd38c880e", "2.4.0-dev.48": "8337329d29aec488119918879493ab6fd38c880e", "2.4.0-dev.49": "4c91943360cd3d09eb0a9d55286c2670ed9e5e88", "2.4.0-dev.50": "4c91943360cd3d09eb0a9d55286c2670ed9e5e88", "2.4.0-dev.51": "4c91943360cd3d09eb0a9d55286c2670ed9e5e88", "2.4.0-dev.52": "d65a057850f62704205d0e392faf01613293d6f4", "2.4.0-dev.53": "bb57b5bea80ee2dd82fcae105e0204a2349a54c2", "2.4.0-dev.54": "bb57b5bea80ee2dd82fcae105e0204a2349a54c2", "2.4.0-dev.55": "6c777331554df4c3e0a90dd841339c7b0619d0e1", "2.4.0-dev.56": "6c777331554df4c3e0a90dd841339c7b0619d0e1", "2.4.0-dev.57": "6c777331554df4c3e0a90dd841339c7b0619d0e1", "2.4.0-dev.58": "6c777331554df4c3e0a90dd841339c7b0619d0e1", "2.4.0-dev.59": "6c777331554df4c3e0a90dd841339c7b0619d0e1", "2.4.0-dev.60": "6c777331554df4c3e0a90dd841339c7b0619d0e1", "2.4.0": "6c777331554df4c3e0a90dd841339c7b0619d0e1", "2.5.0-dev.1": "8badef702a0bb0e6121197ccec5976d9af178cc4", "2.5.0-dev.2": "8badef702a0bb0e6121197ccec5976d9af178cc4", "2.5.0-dev.3": "e745b5f2a9bea5d04faeb768b619aa761d176b7d", "2.5.0-dev.4": "e745b5f2a9bea5d04faeb768b619aa761d176b7d", "2.5.0-dev.5": "6e674469fff1a603c0139a09a5c7665af0c0b915", "2.4.1-dev.1": "195d4bdc2d16132977f4ba7a8ca312f7906cb086", "2.4.1": "195d4bdc2d16132977f4ba7a8ca312f7906cb086", "2.5.0-dev.6": "a4c0b19a07ff370234d8e6205a60aa885daed3c9", "2.5.0-dev.7": "2d5db567f479b50d4a793d4141fb3dad6b6d14af", "2.5.0-dev.8": "2dbcdc81e4161f23e736d2d7a5356926f4abfda7", "2.5.0-dev.9": "8e4f3a5c140fa60e254d5ca37536c5991960dc7f", "2.5.0-dev.10": "734ab53bd8e2cadf18b8b71cb53bf2d2bed46517", "2.5.0-dev.11": "734ab53bd8e2cadf18b8b71cb53bf2d2bed46517", "2.5.0-dev.12": "96dcc3c34f040c9808059de63409f04687c9beff", "2.5.0-dev.13": "2deb6252cdc82d12effe3a000748397cd6a1ba6e", "2.5.0-dev.14": "2deb6252cdc82d12effe3a000748397cd6a1ba6e", "2.5.0-dev.15": "2deb6252cdc82d12effe3a000748397cd6a1ba6e", "2.5.0-dev.16": "9f61a69f7e2e04c849ba039136a8ee3625e03859", "2.5.0-dev.17": "9f61a69f7e2e04c849ba039136a8ee3625e03859", "2.5.0-dev.18": "9f61a69f7e2e04c849ba039136a8ee3625e03859", "2.5.0-dev.19": "9f61a69f7e2e04c849ba039136a8ee3625e03859", "2.5.0-dev.20": "6fa13fa129a579cce403a8cdf65aa3bd7a19028b", "2.5.0-dev.21": "e8c86b2eed97ef06abd25651f450e957b21f5c31", "2.5.0-dev.22": "e8c86b2eed97ef06abd25651f450e957b21f5c31", "2.5.0-dev.23": "e8c86b2eed97ef06abd25651f450e957b21f5c31", "2.5.0-dev.24": "e8c86b2eed97ef06abd25651f450e957b21f5c31", "2.5.0-dev.25": "e8c86b2eed97ef06abd25651f450e957b21f5c31", "2.5.0-dev.26": "b6c3e2ef9589d6e08cb9ad74d68e733f4007650c", "2.5.0-dev.27": "ac051172582b2c03c3d6e2f1470a0eccb274e4c5", "2.5.0-dev.28": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.29": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.30": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.31": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.32": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.33": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.34": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.35": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.36": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.37": "c0231c315abebc8c3ed7c32927a2a091bffda4a3", "2.5.0-dev.38": "31a949effe4ea834d8ccd4f8087e0375bcffccfa", "2.5.0-dev.39": "ee46c0006296d91f8a23684a8ced0ce259386cea", "2.5.0-dev.40": "ee46c0006296d91f8a23684a8ced0ce259386cea", "2.5.0-dev.41": "5ae6907bd5ffc701ed7d93ba74080da8d2f7c158", "2.5.0-dev.42": "5ae6907bd5ffc701ed7d93ba74080da8d2f7c158", "2.5.0-dev.43": "5ae6907bd5ffc701ed7d93ba74080da8d2f7c158", "2.5.0-dev.44": "5ae6907bd5ffc701ed7d93ba74080da8d2f7c158", "2.5.0-dev.45": "5ae6907bd5ffc701ed7d93ba74080da8d2f7c158", "2.5.0-dev.46": "5ae6907bd5ffc701ed7d93ba74080da8d2f7c158", "2.5.0-dev.47": "f3df39ce7a842e659445cf7436ee8b268b8bff17", "2.5.0-dev.48": "f3df39ce7a842e659445cf7436ee8b268b8bff17", "2.5.0-dev.49": "f3df39ce7a842e659445cf7436ee8b268b8bff17", "2.5.0-dev.50": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.51": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.52": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.53": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.54": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.55": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.56": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.57": "8f08c6fa89afd00710e41d99621786150b7eebbe", "2.5.0-dev.58": "cc6843945c4485b397f541fcbe18d1bd94346ef7", "2.5.0-dev.59": "cc6843945c4485b397f541fcbe18d1bd94346ef7", "2.5.0-dev.60": "cc6843945c4485b397f541fcbe18d1bd94346ef7", "2.5.0-dev.61": "cc6843945c4485b397f541fcbe18d1bd94346ef7", "2.5.0-dev.62": "fa212b81aa9797f9cc8290b31cf74f49a242cb4a", "2.5.0-dev.63": "fa212b81aa9797f9cc8290b31cf74f49a242cb4a", "2.5.0-dev.64": "fa212b81aa9797f9cc8290b31cf74f49a242cb4a", "2.5.0-dev.65": "e280b792354efc65b91253bfb9a0f4b73dca85e7", "2.5.0-dev.66": "e280b792354efc65b91253bfb9a0f4b73dca85e7", "2.5.0-dev.67": "e280b792354efc65b91253bfb9a0f4b73dca85e7", "2.5.0-dev.68": "f2e54efb31f58a6c1c6d697e0c40aaddbb306993", "2.5.0-dev.69": "f2e54efb31f58a6c1c6d697e0c40aaddbb306993", "2.5.0-dev.70": "f2e54efb31f58a6c1c6d697e0c40aaddbb306993", "2.5.0-dev.71": "9a670138b1db276001d785a2adcba1584c869d24", "2.5.0-dev.72": "9a670138b1db276001d785a2adcba1584c869d24", "2.5.0-dev.73": "9a670138b1db276001d785a2adcba1584c869d24", "2.5.0": "9a670138b1db276001d785a2adcba1584c869d24", "2.6.0-dev.1": "03bb4d5bc838046aeb5f477d8fd5940864f0ecd8", "2.6.0-dev.2": "03bb4d5bc838046aeb5f477d8fd5940864f0ecd8", "2.6.0-dev.3": "499fa463c4bce9f1e4773876b7659d1a0a1c59fe", "2.6.0-dev.4": "499fa463c4bce9f1e4773876b7659d1a0a1c59fe", "2.6.0-dev.5": "499fa463c4bce9f1e4773876b7659d1a0a1c59fe", "2.6.0-dev.6": "499fa463c4bce9f1e4773876b7659d1a0a1c59fe", "2.6.0-dev.7": "62c83f00cd815bc777fd0f326c7284d5b1556f8f", "2.6.0-dev.8": "62c83f00cd815bc777fd0f326c7284d5b1556f8f", "2.5.1-dev.1": "9a670138b1db276001d785a2adcba1584c869d24", "2.5.1-dev.2": "9a670138b1db276001d785a2adcba1584c869d24", "2.5.1-dev.3": "9a670138b1db276001d785a2adcba1584c869d24", "2.5.1-dev.4": "c88925ce44a9b89b4351aec85ba6a28979d2658e", "2.6.0-dev.9": "24a240e041612473ba2085961b4571205450fc13", "2.5.1-dev.5": "c88925ce44a9b89b4351aec85ba6a28979d2658e", "2.5.1": "c88925ce44a9b89b4351aec85ba6a28979d2658e", "2.6.0-dev.10": "08d3349c7d493866c34e5e403fe1a4220509b1b6", "2.6.0-dev.11": "08d3349c7d493866c34e5e403fe1a4220509b1b6", "2.6.0-dev.12": "08d3349c7d493866c34e5e403fe1a4220509b1b6", "2.6.0-dev.13": "fff0920741f15deea278830b4afd16f5fa81708b", "2.6.0-dev.14": "22ce6892be334bb50f8d7dcb5829d0ee124cd444", "2.6.0-dev.15": "62af2a2328bf6013fb6633f83eaf8c31617e641a", "2.6.0-dev.16": "62af2a2328bf6013fb6633f83eaf8c31617e641a", "2.6.0-dev.17": "acfba31b83f7edec8e740dc4d94e0aec0855b2d6", "2.6.0-dev.18": "acfba31b83f7edec8e740dc4d94e0aec0855b2d6", "2.6.0-dev.19": "a5fde664c5c57de5ac374be1138dd0f7ec5dc5ab", "2.6.0-dev.20": "a5fde664c5c57de5ac374be1138dd0f7ec5dc5ab", "2.6.0-dev.21": "a5fde664c5c57de5ac374be1138dd0f7ec5dc5ab", "2.6.0-dev.22": "a5fde664c5c57de5ac374be1138dd0f7ec5dc5ab", "2.6.0-dev.23": "a5fde664c5c57de5ac374be1138dd0f7ec5dc5ab", "2.6.0-dev.24": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.25": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.26": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.27": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.28": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.29": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.30": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.31": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.32": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.33": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.34": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.35": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.36": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.37": "4207c64a590fe98ef0e456b5f49e99ea4f7f0ce0", "2.6.0-dev.38": "0250d982a01f9505bba89c380f5d8b0a7649633e", "2.6.0-dev.39": "96965f6c3db61abe3a54aee1a2f2af4e9bddace1", "2.6.0-dev.40": "96965f6c3db61abe3a54aee1a2f2af4e9bddace1", "2.6.0-dev.41": "ef1b5f6a28c2cf3933b0be3b48677edd6e0852a0", "2.6.0-dev.42": "ef1b5f6a28c2cf3933b0be3b48677edd6e0852a0", "2.6.0-dev.43": "b9dcf38b7fb0a74d3a8c9a0e8234bf7cee8417c2", "2.6.0-dev.44": "686b1f56ade7661ab2f1e60a6b3346abe2746175", "2.6.0-dev.45": "919f9059847d54a5f74e5c6e1f0ca9e036b91925", "2.6.0-dev.46": "a0b427d77d040aa7a76ddeedfb63e269351d63d7", "2.6.0-dev.47": "9da5ffb8b4a4d6b30bb6a124b6427493733e25c0", "2.6.0-dev.48": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.49": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.50": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.51": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.52": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.53": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.54": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.55": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.56": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.57": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.58": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.59": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.60": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0-dev.61": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.0": "650b5d0348ec38ae61e1e7db69bb54808418ede4", "2.6.1-dev.1": "6a8054bb549e4cc23f157b0010cb2e95cb2637fb", "2.7.0-dev.1": "0dfa041d0d802be2e3ae0dd1ce2e4c307e39038b", "2.7.0-dev.2": "d1dd8a0508dfc82ae8bd83d91159e0ac807593ec", "2.6.1-dev.2": "6a8054bb549e4cc23f157b0010cb2e95cb2637fb", "2.6.1": "6a8054bb549e4cc23f157b0010cb2e95cb2637fb", "2.7.0-dev.3": "d1dd8a0508dfc82ae8bd83d91159e0ac807593ec", "2.7.0-dev.4": "d1dd8a0508dfc82ae8bd83d91159e0ac807593ec", "2.7.0-dev.5": "d1dd8a0508dfc82ae8bd83d91159e0ac807593ec", "2.7.0-dev.6": "d1dd8a0508dfc82ae8bd83d91159e0ac807593ec", "2.7.0-dev.7": "d1dd8a0508dfc82ae8bd83d91159e0ac807593ec", "2.7.0-dev.8": "e7e85356e6a71c0fda2447148512ca5ee761dbea", "2.6.2-dev.1": "6a8054bb549e4cc23f157b0010cb2e95cb2637fb", "2.7.0-dev.9": "7fe7c5b50aa571ac388a8183b3abae2114f948e8", "2.7.0-dev.10": "7fe7c5b50aa571ac388a8183b3abae2114f948e8", "2.7.0-dev.11": "7c19ae69057b1b46b2e7f90d531d99909cc85502", "2.6.2-dev.2": "6a8054bb549e4cc23f157b0010cb2e95cb2637fb", "2.6.2": "6a8054bb549e4cc23f157b0010cb2e95cb2637fb", "2.7.0-dev.12": "7c19ae69057b1b46b2e7f90d531d99909cc85502", "2.7.0-dev.13": "7c19ae69057b1b46b2e7f90d531d99909cc85502", "2.7.0-dev.14": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.15": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.16": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.17": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.18": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.19": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.20": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.21": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.22": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.23": "8ac7250d6543fc68cb07fb097003323856fb77fd", "2.7.0-dev.24": "66ab5fb1ad3262553bee50cedb3144f3c26f67a7", "2.7.0-dev.25": "66ab5fb1ad3262553bee50cedb3144f3c26f67a7", "2.7.0-dev.26": "66ab5fb1ad3262553bee50cedb3144f3c26f67a7", "2.7.0-dev.27": "66ab5fb1ad3262553bee50cedb3144f3c26f67a7", "2.7.0-dev.28": "66ab5fb1ad3262553bee50cedb3144f3c26f67a7", "2.7.0-dev.29": "0d6f8376a03ae544c2be7c0279bc58a42d4bd302", "2.7.0-dev.30": "69cfbd5356b6cc807550b1660a501d6343cd805e", "2.7.0-dev.31": "69cfbd5356b6cc807550b1660a501d6343cd805e", "2.7.0-dev.32": "69cfbd5356b6cc807550b1660a501d6343cd805e", "2.7.0-dev.33": "69cfbd5356b6cc807550b1660a501d6343cd805e", "2.7.0-dev.34": "e6ec802febb5404ce4444eb440b0771ac896e3a4", "2.7.0-dev.35": "8b73a3e33a902f2b1f66f0ee82aecd716d3df824", "2.7.0-dev.36": "9552a36ff01a7ca7c7b811dc629ca3678da321f4", "2.7.0-dev.37": "a25d3c320c457986fe1b343b25c7f9182d8072f7", "2.7.0-dev.38": "a70da9750b0dd1eabc6b11c8548c40b856e298db", "2.7.0-dev.39": "a70da9750b0dd1eabc6b11c8548c40b856e298db", "2.7.0-dev.40": "a70da9750b0dd1eabc6b11c8548c40b856e298db", "2.7.0-dev.41": "a70da9750b0dd1eabc6b11c8548c40b856e298db", "2.7.0-dev.42": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.43": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.44": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.45": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.46": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.47": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.48": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.49": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.50": "a25edead86c5f3f39055ab41b078b8d7cb36477a", "2.7.0-dev.51": "3425da02811ca5d0994ba994c81192f304545fbc", "2.7.0-dev.52": "3425da02811ca5d0994ba994c81192f304545fbc", "2.7.0-dev.53": "3425da02811ca5d0994ba994c81192f304545fbc", "2.7.0-dev.54": "3425da02811ca5d0994ba994c81192f304545fbc", "2.7.0-dev.55": "1326cc350d369f69e2b4c0ea3bddc97ff384629e", "2.7.0-dev.56": "c508cbd521381ba4f3926e3f5ab1878a2881537d", "2.7.0-dev.57": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.58": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.59": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.60": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.61": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.62": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.63": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.64": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.65": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.66": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.67": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.68": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.69": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.70": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.71": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.72": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.73": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.74": "a6a6ecba74cbaeee0756c312b1b0f2502b27e49c", "2.7.0-dev.75": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0-dev.76": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0-dev.77": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0-dev.78": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0-dev.79": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0-dev.80": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0-dev.81": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0-dev.82": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.7.0": "eaade828a21d8ee3f4940f0af7da3ae0922db4df", "2.8.0-dev.1": "290eb7c11a5561ad869041aa86323b85b337b12d", "2.8.0-dev.2": "2b4c3254badf30765f7839e350e4aa11a0842a8d", "2.8.0-dev.3": "2b4c3254badf30765f7839e350e4aa11a0842a8d", "2.7.1-dev.1": "5c2ad460cf4fe8c9330e6640b266c046542c8b6a", "2.8.0-dev.4": "2b4c3254badf30765f7839e350e4aa11a0842a8d", "2.8.0-dev.5": "d516bd2a52ad91031ba1c2ff3bd6d4429e727322", "2.8.0-dev.6": "d516bd2a52ad91031ba1c2ff3bd6d4429e727322", "2.7.1": "5c2ad460cf4fe8c9330e6640b266c046542c8b6a", "2.8.0-dev.7": "d516bd2a52ad91031ba1c2ff3bd6d4429e727322", "2.8.0-dev.8": "d516bd2a52ad91031ba1c2ff3bd6d4429e727322", "2.8.0-dev.9": "d516bd2a52ad91031ba1c2ff3bd6d4429e727322", "2.8.0-dev.10": "296e3b5c93fde73fdf2df594765395c51ddbdae0", "2.8.0-dev.11": "296e3b5c93fde73fdf2df594765395c51ddbdae0", "2.8.0-dev.12": "a1097622fd3779393f345f246e050da017d3aa2d", "2.8.0-dev.13": "97b83cec7c1e2276d16624341947ddf44379cff6", "2.8.0-dev.14": "97b83cec7c1e2276d16624341947ddf44379cff6", "2.8.0-dev.15": "014c300b2749e2f856db131ea8fdc8ad4a3c00e8", "2.8.0-dev.16": "16b2e7be003d50a60b7f0ebff88ae7e2c8caf863", "2.8.0-dev.17": "16b2e7be003d50a60b7f0ebff88ae7e2c8caf863", "2.8.0-dev.18": "16b2e7be003d50a60b7f0ebff88ae7e2c8caf863", "2.8.0-dev.19": "16b2e7be003d50a60b7f0ebff88ae7e2c8caf863", "2.8.0-dev.20": "16b2e7be003d50a60b7f0ebff88ae7e2c8caf863", "2.8.0-dev.21": "16b2e7be003d50a60b7f0ebff88ae7e2c8caf863", "2.8.0-dev.22": "2c8f6b14f5d65afe712de0b8b7a18eae29446d45", "2.8.0-dev.23": "1c3ee33299fa6f9ae067f6b37867467d1749f74d", "2.8.0-dev.24": "4ad878f36e79cf50b5b4f9781fd8be266a2e8eea", "2.8.0-dev.25": "b2ba0251835a0fb068871fe65272136853245dd3", "2.8.0-dev.26": "ee3559ca54391582e5fe8c208f93ae6e178aeed8", "2.8.0-dev.27": "7aef029819840cd88e6333b5037105264c82e2f4", "2.8.0-dev.28": "37b9492b5e3f80c980323b027712a9ec227ebb07", "2.8.0-dev.29": "37b9492b5e3f80c980323b027712a9ec227ebb07", "2.8.0-dev.30": "62fcc29194c5c1ed16d16c65c21b944d60acfd81", "2.8.0-dev.31": "62fcc29194c5c1ed16d16c65c21b944d60acfd81", "2.8.0-dev.32": "62fcc29194c5c1ed16d16c65c21b944d60acfd81", "2.8.0-dev.33": "62fcc29194c5c1ed16d16c65c21b944d60acfd81", "2.8.0-dev.34": "9b958b23288b9108f357c08d16ab5a054e9456b8", "2.8.0-dev.35": "9b958b23288b9108f357c08d16ab5a054e9456b8", "2.8.0-dev.36": "9b958b23288b9108f357c08d16ab5a054e9456b8", "2.8.0-dev.37": "5ed0deef17ce35faf058462e43ccc86fed761dfe", "2.8.0-dev.38": "fc6db18a9ab2e659cbf600340f5d4f4abb0b1974", "2.8.0-dev.39": "4a88935fd579c4284cec066046b3fcfe32f0c0fa", "2.8.0-dev.40": "eff0f4d1aecdbd12d9f5ca2ff0a21b54f4b90bf5", "2.8.0-dev.41": "3eba5fc0d5e2f0b42c495e3fcb677f16157a0549", "2.8.0-dev.42": "3eba5fc0d5e2f0b42c495e3fcb677f16157a0549", "2.8.0-dev.43": "2c65c7e137baad4c34f9d7c410633f3b0398a373", "2.8.0-dev.44": "4f4fb2e5ea3d830a9cf8f4e83b824f844fa43a0d", "2.8.0-dev.45": "2c65c7e137baad4c34f9d7c410633f3b0398a373", "2.8.0-dev.46": "2c65c7e137baad4c34f9d7c410633f3b0398a373", "2.8.0-dev.47": "2c65c7e137baad4c34f9d7c410633f3b0398a373", "2.8.0-dev.48": "301a95d643e1ba39474bb520faba726ce856884c", "2.8.0-dev.49": "301a95d643e1ba39474bb520faba726ce856884c", "2.8.0-dev.50": "b2d67bfad6619134331404603b61ab85fde90771", "2.8.0-dev.51": "aff73c7aeee85c32082de75962424f199530284d"};
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/getAllVersions.js
var require_getAllVersions2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.engineVersions = void 0;
  const node_fetch_1 = __importDefault(require_lib2());
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  var versions_1 = require_versions2();
  Object.defineProperty(exports2, "engineVersions", {enumerable: true, get: function() {
    return versions_1.engineVersions;
  }});
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/utils/printConfigWarnings.js
var require_printConfigWarnings = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.printConfigWarnings = void 0;
  const chalk_1 = __importDefault(require_source());
  function printConfigWarnings(warnings) {
    if (warnings && warnings.length > 0) {
      const message = warnings.map((warning) => `${chalk_1.default.yellow("warn")} ${warning}`).join("\n");
      console.warn(message);
    }
  }
  exports2.printConfigWarnings = printConfigWarnings;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/getGenerators.js
var require_getGenerators2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.knownBinaryTargets = exports2.skipIndex = exports2.getGenerator = exports2.getGenerators = void 0;
  const fs_1 = __importDefault(require("fs"));
  const p_map_1 = __importDefault(require_p_map());
  const path_1 = __importDefault(require("path"));
  const chalk_1 = __importDefault(require_source());
  const fetch_engine_1 = require_dist24();
  const get_platform_1 = require_dist21();
  const engine_core_1 = require_dist25();
  const engineCommands_1 = require_engineCommands2();
  const make_dir_1 = __importDefault(require_make_dir());
  const pick_1 = require_pick2();
  const Generator_1 = require_Generator2();
  const resolveOutput_1 = require_resolveOutput2();
  const predefinedGeneratorResolvers_1 = require_predefinedGeneratorResolvers2();
  const missingGeneratorMessage_1 = require_missingGeneratorMessage2();
  const extractPreviewFeatures_1 = require_extractPreviewFeatures2();
  const mapPreviewFeatures_1 = require_mapPreviewFeatures2();
  const getAllVersions_1 = require_getAllVersions2();
  const engines_1 = require("@prisma/engines");
  const printConfigWarnings_1 = require_printConfigWarnings();
  async function getGenerators2({
    schemaPath,
    providerAliases: aliases,
    version,
    cliVersion,
    printDownloadProgress,
    baseDir = path_1.default.dirname(schemaPath),
    overrideGenerators,
    skipDownload
  }) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    if (!schemaPath) {
      throw new Error(`schemaPath for getGenerators got invalid value ${schemaPath}`);
    }
    if (!fs_1.default.existsSync(schemaPath)) {
      throw new Error(`${schemaPath} does not exist`);
    }
    const platform = await get_platform_1.getPlatform();
    let prismaPath = void 0;
    if (version) {
      const potentialPath = eval(`require('path').join(__dirname, '..')`);
      if (!potentialPath.startsWith("/snapshot/")) {
        const downloadParams = {
          binaries: {
            "query-engine": potentialPath
          },
          binaryTargets: [platform],
          showProgress: false,
          version,
          skipDownload
        };
        const binaryPathsWithEngineType = await fetch_engine_1.download(downloadParams);
        prismaPath = binaryPathsWithEngineType["query-engine"][platform];
      }
    }
    const datamodel = fs_1.default.readFileSync(schemaPath, "utf-8");
    const config = await engineCommands_1.getConfig({
      datamodel,
      datamodelPath: schemaPath,
      prismaPath,
      ignoreEnvVarErrors: true
    });
    printConfigWarnings_1.printConfigWarnings(config.warnings);
    const experimentalFeatures = mapPreviewFeatures_1.mapPreviewFeatures(extractPreviewFeatures_1.extractPreviewFeatures(config));
    const dmmf = await engineCommands_1.getDMMF({
      datamodel,
      datamodelPath: schemaPath,
      prismaPath,
      enableExperimental: experimentalFeatures
    });
    if (dmmf.datamodel.models.length === 0) {
      throw new Error(missingGeneratorMessage_1.missingModelMessage);
    }
    const generatorConfigs = overrideGenerators || config.generators;
    await validateGenerators(generatorConfigs);
    const runningGenerators = [];
    try {
      const generators = await p_map_1.default(generatorConfigs, async (generator, index) => {
        let generatorPath = generator.provider;
        let paths;
        if (aliases && aliases[generator.provider]) {
          generatorPath = aliases[generator.provider].generatorPath;
          paths = aliases[generator.provider];
        } else if (predefinedGeneratorResolvers_1.predefinedGeneratorResolvers[generator.provider]) {
          paths = await predefinedGeneratorResolvers_1.predefinedGeneratorResolvers[generator.provider](baseDir, cliVersion);
          generatorPath = paths.generatorPath;
        }
        const generatorInstance = new Generator_1.Generator(generatorPath);
        await generatorInstance.init();
        if (generator.output) {
          generator.output = path_1.default.resolve(baseDir, generator.output);
          generator.isCustomOutput = true;
        } else if (paths) {
          generator.output = paths.outputPath;
        } else {
          if (!generatorInstance.manifest || !generatorInstance.manifest.defaultOutput) {
            throw new Error(`Can't resolve output dir for generator ${chalk_1.default.bold(generator.name)} with provider ${chalk_1.default.bold(generator.provider)}.
The generator needs to either define the \`defaultOutput\` path in the manifest or you need to define \`output\` in the datamodel.prisma file.`);
          }
          generator.output = await resolveOutput_1.resolveOutput({
            defaultOutput: generatorInstance.manifest.defaultOutput,
            baseDir
          });
        }
        const options = {
          datamodel,
          datasources: config.datasources,
          generator,
          dmmf,
          otherGenerators: skipIndex(generatorConfigs, index),
          schemaPath,
          version: version || engines_1.enginesVersion
        };
        generatorInstance.setOptions(options);
        runningGenerators.push(generatorInstance);
        return generatorInstance;
      }, {
        stopOnError: false
      });
      const neededVersions = Object.create(null);
      for (const g of generators) {
        if (((_a = g.manifest) === null || _a === void 0 ? void 0 : _a.requiresEngines) && Array.isArray((_b = g.manifest) === null || _b === void 0 ? void 0 : _b.requiresEngines) && g.manifest.requiresEngines.length > 0) {
          const neededVersion = getEngineVersionForGenerator(g.manifest, version);
          if (!neededVersions[neededVersion]) {
            neededVersions[neededVersion] = {engines: [], binaryTargets: []};
          }
          for (const engine of (_c = g.manifest) === null || _c === void 0 ? void 0 : _c.requiresEngines) {
            if (!neededVersions[neededVersion].engines.includes(engine)) {
              neededVersions[neededVersion].engines.push(engine);
            }
          }
          if (((_e = (_d = g.options) === null || _d === void 0 ? void 0 : _d.generator) === null || _e === void 0 ? void 0 : _e.binaryTargets) && ((_g = (_f = g.options) === null || _f === void 0 ? void 0 : _f.generator) === null || _g === void 0 ? void 0 : _g.binaryTargets.length) > 0) {
            for (let binaryTarget of (_j = (_h = g.options) === null || _h === void 0 ? void 0 : _h.generator) === null || _j === void 0 ? void 0 : _j.binaryTargets) {
              if (binaryTarget === "native") {
                binaryTarget = platform;
              }
              if (!neededVersions[neededVersion].binaryTargets.includes(binaryTarget)) {
                neededVersions[neededVersion].binaryTargets.push(binaryTarget);
              }
            }
          }
        }
      }
      const binaryPathsByVersion = Object.create(null);
      for (let currentVersion in neededVersions) {
        const neededVersion = neededVersions[currentVersion];
        if (neededVersion.binaryTargets.length === 0) {
          neededVersion.binaryTargets.push(platform);
          if (neededVersion.binaryTargets.length === 0) {
            neededVersion.binaryTargets = [platform];
          }
        }
        if (process.env.NETLIFY && !neededVersion.binaryTargets.includes("rhel-openssl-1.0.x")) {
          neededVersion.binaryTargets.push("rhel-openssl-1.0.x");
        }
        let binaryTargetBaseDir = eval(`require('path').join(__dirname, '..')`);
        if (version !== currentVersion) {
          binaryTargetBaseDir = path_1.default.join(binaryTargetBaseDir, `./engines/${currentVersion}/`);
          await make_dir_1.default(binaryTargetBaseDir).catch((e) => console.error(e));
        }
        const binariesConfig = neededVersion.engines.reduce((acc, curr) => {
          acc[engineTypeToBinaryType(curr)] = binaryTargetBaseDir;
          return acc;
        }, Object.create(null));
        const downloadParams = {
          binaries: binariesConfig,
          binaryTargets: neededVersion.binaryTargets,
          showProgress: typeof printDownloadProgress === "boolean" ? printDownloadProgress : true,
          version: currentVersion && currentVersion !== "latest" ? currentVersion : engines_1.enginesVersion,
          skipDownload
        };
        const binaryPathsWithEngineType = await fetch_engine_1.download(downloadParams);
        const binaryPaths = mapKeys(binaryPathsWithEngineType, binaryTypeToEngineType);
        binaryPathsByVersion[currentVersion] = binaryPaths;
      }
      for (const generator of generators) {
        if (generator.manifest && generator.manifest.requiresEngines) {
          const engineVersion = getEngineVersionForGenerator(generator.manifest, version);
          const binaryPaths = binaryPathsByVersion[engineVersion];
          const generatorBinaryPaths = pick_1.pick(binaryPaths, generator.manifest.requiresEngines);
          generator.setBinaryPaths(generatorBinaryPaths);
          if (engineVersion !== version && generator.options && generator.manifest.requiresEngines.includes("queryEngine") && generatorBinaryPaths.queryEngine && generatorBinaryPaths.queryEngine[platform]) {
            const customDmmf = await engineCommands_1.getDMMF({
              datamodel,
              datamodelPath: schemaPath,
              prismaPath: generatorBinaryPaths.queryEngine[platform],
              enableExperimental: experimentalFeatures
            });
            const options = {...generator.options, dmmf: customDmmf};
            generator.setOptions(options);
          }
        }
      }
      return generators;
    } catch (e) {
      runningGenerators.forEach((g) => g.stop());
      throw e;
    }
  }
  exports2.getGenerators = getGenerators2;
  async function getGenerator(options) {
    const generators = await getGenerators2(options);
    return generators[0];
  }
  exports2.getGenerator = getGenerator;
  function skipIndex(arr, index) {
    return [...arr.slice(0, index), ...arr.slice(index + 1)];
  }
  exports2.skipIndex = skipIndex;
  exports2.knownBinaryTargets = [
    "native",
    "darwin",
    "debian-openssl-1.0.x",
    "debian-openssl-1.1.x",
    "rhel-openssl-1.0.x",
    "rhel-openssl-1.1.x",
    "linux-musl",
    "linux-nixos",
    "windows",
    "freebsd11",
    "freebsd12",
    "openbsd",
    "netbsd",
    "arm"
  ];
  const oldToNewBinaryTargetsMapping = {
    "linux-glibc-libssl1.0.1": "debian-openssl-1.0.x",
    "linux-glibc-libssl1.0.2": "debian-openssl-1.0.x",
    "linux-glibc-libssl1.1.0": "debian-openssl1.1.x"
  };
  async function validateGenerators(generators) {
    const platform = await get_platform_1.getPlatform();
    for (const generator of generators) {
      if (generator.provider === "photonjs") {
        throw new Error(`Oops! Photon has been renamed to Prisma Client. Please make the following adjustments:
  1. Rename ${chalk_1.default.red('provider = "photonjs"')} to ${chalk_1.default.green('provider = "prisma-client-js"')} in your ${chalk_1.default.bold("schema.prisma")} file.
  2. Replace your ${chalk_1.default.bold("package.json")}'s ${chalk_1.default.red("@prisma/photon")} dependency to ${chalk_1.default.green("@prisma/client")}
  3. Replace ${chalk_1.default.red("import { Photon } from '@prisma/photon'")} with ${chalk_1.default.green("import { PrismaClient } from '@prisma/client'")} in your code.
  4. Run ${chalk_1.default.green("prisma generate")} again.
      `);
      }
      if (generator.provider === "nexus-prisma") {
        throw new Error("`nexus-prisma` is no longer a generator. You can read more at https://pris.ly/nexus-prisma-upgrade-0.4");
      }
      if (generator.config.platforms) {
        throw new Error(`The \`platforms\` field on the generator definition is deprecated. Please rename it to \`binaryTargets\`.`);
      }
      if (generator.config.pinnedBinaryTargets) {
        throw new Error(`The \`pinnedBinaryTargets\` field on the generator definition is deprecated.
Please use the PRISMA_QUERY_ENGINE_BINARY env var instead to pin the binary target.`);
      }
      if (generator.binaryTargets) {
        for (const binaryTarget of generator.binaryTargets) {
          if (oldToNewBinaryTargetsMapping[binaryTarget]) {
            throw new Error(`Binary target ${chalk_1.default.red.bold(binaryTarget)} is deprecated. Please use ${chalk_1.default.green.bold(oldToNewBinaryTargetsMapping[binaryTarget])} instead.`);
          }
          if (!exports2.knownBinaryTargets.includes(binaryTarget)) {
            throw new Error(`Unknown binary target ${chalk_1.default.red(binaryTarget)} in generator ${chalk_1.default.bold(generator.name)}.
Possible binaryTargets: ${chalk_1.default.greenBright(exports2.knownBinaryTargets.join(", "))}`);
          }
        }
        const binaryTargets = generator.binaryTargets && generator.binaryTargets.length > 0 ? generator.binaryTargets : ["native"];
        const resolvedBinaryTargets = binaryTargets.map((p) => p === "native" ? platform : p);
        if (!resolvedBinaryTargets.includes(platform)) {
          if (generator) {
            console.log(`${chalk_1.default.yellow("Warning:")} Your current platform \`${chalk_1.default.bold(platform)}\` is not included in your generator's \`binaryTargets\` configuration ${JSON.stringify(generator.binaryTargets)}.
    To fix it, use this generator config in your ${chalk_1.default.bold("schema.prisma")}:
    ${chalk_1.default.greenBright(engine_core_1.printGeneratorConfig({
              ...generator,
              binaryTargets: engine_core_1.fixBinaryTargets(generator.binaryTargets, platform)
            }))}
    ${chalk_1.default.gray(`Note, that by providing \`native\`, Prisma Client automatically resolves \`${platform}\`.
    Read more about deploying Prisma Client: ${chalk_1.default.underline("https://github.com/prisma/prisma/blob/master/docs/core/generators/prisma-client-js.md")}`)}
`);
          } else {
            console.log(`${chalk_1.default.yellow("Warning")} The binaryTargets ${JSON.stringify(binaryTargets)} don't include your local platform ${platform}, which you can also point to with \`native\`.
    In case you want to fix this, you can provide ${chalk_1.default.greenBright(`binaryTargets: ${JSON.stringify(["native", ...binaryTargets || []])}`)} in the schema.prisma file.`);
          }
        }
      }
    }
  }
  function engineTypeToBinaryType(engineType) {
    if (engineType === "introspectionEngine") {
      return "introspection-engine";
    }
    if (engineType === "migrationEngine") {
      return "migration-engine";
    }
    if (engineType === "queryEngine") {
      return "query-engine";
    }
    if (engineType === "prismaFmt") {
      return "prisma-fmt";
    }
    throw new Error(`Could not convert engine type ${engineType}`);
  }
  function binaryTypeToEngineType(binaryType) {
    if (binaryType === "introspection-engine") {
      return "introspectionEngine";
    }
    if (binaryType === "migration-engine") {
      return "migrationEngine";
    }
    if (binaryType === "query-engine") {
      return "queryEngine";
    }
    if (binaryType === "prisma-fmt") {
      return "prismaFmt";
    }
    throw new Error(`Could not convert binary type ${binaryType}`);
  }
  function mapKeys(obj, mapper) {
    return Object.entries(obj).reduce((acc, [key, value]) => {
      acc[mapper(key)] = value;
      return acc;
    }, {});
  }
  function getEngineVersionForGenerator(manifest, defaultVersion) {
    let neededVersion = manifest === null || manifest === void 0 ? void 0 : manifest.requiresEngineVersion;
    if ((manifest === null || manifest === void 0 ? void 0 : manifest.version) && getAllVersions_1.engineVersions[manifest === null || manifest === void 0 ? void 0 : manifest.version]) {
      neededVersion = getAllVersions_1.engineVersions[manifest === null || manifest === void 0 ? void 0 : manifest.version];
    }
    neededVersion = neededVersion !== null && neededVersion !== void 0 ? neededVersion : defaultVersion;
    return neededVersion !== null && neededVersion !== void 0 ? neededVersion : "latest";
  }
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/high-level-opt.js
var require_high_level_opt2 = __commonJS((exports2, module3) => {
  "use strict";
  const argmap = new Map([
    ["C", "cwd"],
    ["f", "file"],
    ["z", "gzip"],
    ["P", "preservePaths"],
    ["U", "unlink"],
    ["strip-components", "strip"],
    ["stripComponents", "strip"],
    ["keep-newer", "newer"],
    ["keepNewer", "newer"],
    ["keep-newer-files", "newer"],
    ["keepNewerFiles", "newer"],
    ["k", "keep"],
    ["keep-existing", "keep"],
    ["keepExisting", "keep"],
    ["m", "noMtime"],
    ["no-mtime", "noMtime"],
    ["p", "preserveOwner"],
    ["L", "follow"],
    ["h", "follow"]
  ]);
  const parse = module3.exports = (opt) => opt ? Object.keys(opt).map((k) => [
    argmap.has(k) ? argmap.get(k) : k,
    opt[k]
  ]).reduce((set, kv) => (set[kv[0]] = kv[1], set), Object.create(null)) : {};
});

// ../../node_modules/.pnpm/minizlib@2.1.2/node_modules/minizlib/constants.js
var require_constants7 = __commonJS((exports2, module3) => {
  const realZlibConstants = require("zlib").constants || {ZLIB_VERNUM: 4736};
  module3.exports = Object.freeze(Object.assign(Object.create(null), {
    Z_NO_FLUSH: 0,
    Z_PARTIAL_FLUSH: 1,
    Z_SYNC_FLUSH: 2,
    Z_FULL_FLUSH: 3,
    Z_FINISH: 4,
    Z_BLOCK: 5,
    Z_OK: 0,
    Z_STREAM_END: 1,
    Z_NEED_DICT: 2,
    Z_ERRNO: -1,
    Z_STREAM_ERROR: -2,
    Z_DATA_ERROR: -3,
    Z_MEM_ERROR: -4,
    Z_BUF_ERROR: -5,
    Z_VERSION_ERROR: -6,
    Z_NO_COMPRESSION: 0,
    Z_BEST_SPEED: 1,
    Z_BEST_COMPRESSION: 9,
    Z_DEFAULT_COMPRESSION: -1,
    Z_FILTERED: 1,
    Z_HUFFMAN_ONLY: 2,
    Z_RLE: 3,
    Z_FIXED: 4,
    Z_DEFAULT_STRATEGY: 0,
    DEFLATE: 1,
    INFLATE: 2,
    GZIP: 3,
    GUNZIP: 4,
    DEFLATERAW: 5,
    INFLATERAW: 6,
    UNZIP: 7,
    BROTLI_DECODE: 8,
    BROTLI_ENCODE: 9,
    Z_MIN_WINDOWBITS: 8,
    Z_MAX_WINDOWBITS: 15,
    Z_DEFAULT_WINDOWBITS: 15,
    Z_MIN_CHUNK: 64,
    Z_MAX_CHUNK: Infinity,
    Z_DEFAULT_CHUNK: 16384,
    Z_MIN_MEMLEVEL: 1,
    Z_MAX_MEMLEVEL: 9,
    Z_DEFAULT_MEMLEVEL: 8,
    Z_MIN_LEVEL: -1,
    Z_MAX_LEVEL: 9,
    Z_DEFAULT_LEVEL: -1,
    BROTLI_OPERATION_PROCESS: 0,
    BROTLI_OPERATION_FLUSH: 1,
    BROTLI_OPERATION_FINISH: 2,
    BROTLI_OPERATION_EMIT_METADATA: 3,
    BROTLI_MODE_GENERIC: 0,
    BROTLI_MODE_TEXT: 1,
    BROTLI_MODE_FONT: 2,
    BROTLI_DEFAULT_MODE: 0,
    BROTLI_MIN_QUALITY: 0,
    BROTLI_MAX_QUALITY: 11,
    BROTLI_DEFAULT_QUALITY: 11,
    BROTLI_MIN_WINDOW_BITS: 10,
    BROTLI_MAX_WINDOW_BITS: 24,
    BROTLI_LARGE_MAX_WINDOW_BITS: 30,
    BROTLI_DEFAULT_WINDOW: 22,
    BROTLI_MIN_INPUT_BLOCK_BITS: 16,
    BROTLI_MAX_INPUT_BLOCK_BITS: 24,
    BROTLI_PARAM_MODE: 0,
    BROTLI_PARAM_QUALITY: 1,
    BROTLI_PARAM_LGWIN: 2,
    BROTLI_PARAM_LGBLOCK: 3,
    BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: 4,
    BROTLI_PARAM_SIZE_HINT: 5,
    BROTLI_PARAM_LARGE_WINDOW: 6,
    BROTLI_PARAM_NPOSTFIX: 7,
    BROTLI_PARAM_NDIRECT: 8,
    BROTLI_DECODER_RESULT_ERROR: 0,
    BROTLI_DECODER_RESULT_SUCCESS: 1,
    BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: 2,
    BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: 3,
    BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: 0,
    BROTLI_DECODER_PARAM_LARGE_WINDOW: 1,
    BROTLI_DECODER_NO_ERROR: 0,
    BROTLI_DECODER_SUCCESS: 1,
    BROTLI_DECODER_NEEDS_MORE_INPUT: 2,
    BROTLI_DECODER_NEEDS_MORE_OUTPUT: 3,
    BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: -1,
    BROTLI_DECODER_ERROR_FORMAT_RESERVED: -2,
    BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: -3,
    BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: -4,
    BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: -5,
    BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: -6,
    BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: -7,
    BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: -8,
    BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: -9,
    BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: -10,
    BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: -11,
    BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: -12,
    BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: -13,
    BROTLI_DECODER_ERROR_FORMAT_PADDING_1: -14,
    BROTLI_DECODER_ERROR_FORMAT_PADDING_2: -15,
    BROTLI_DECODER_ERROR_FORMAT_DISTANCE: -16,
    BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: -19,
    BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: -20,
    BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: -21,
    BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: -22,
    BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: -25,
    BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: -26,
    BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: -27,
    BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: -30,
    BROTLI_DECODER_ERROR_UNREACHABLE: -31
  }, realZlibConstants));
});

// ../../node_modules/.pnpm/minizlib@2.1.2/node_modules/minizlib/index.js
var require_minizlib2 = __commonJS((exports2) => {
  "use strict";
  const assert = require("assert");
  const Buffer2 = require("buffer").Buffer;
  const realZlib = require("zlib");
  const constants = exports2.constants = require_constants7();
  const Minipass = require_minipass();
  const OriginalBufferConcat = Buffer2.concat;
  const _superWrite = Symbol("_superWrite");
  class ZlibError extends Error {
    constructor(err) {
      super("zlib: " + err.message);
      this.code = err.code;
      this.errno = err.errno;
      if (!this.code)
        this.code = "ZLIB_ERROR";
      this.message = "zlib: " + err.message;
      Error.captureStackTrace(this, this.constructor);
    }
    get name() {
      return "ZlibError";
    }
  }
  const _opts = Symbol("opts");
  const _flushFlag = Symbol("flushFlag");
  const _finishFlushFlag = Symbol("finishFlushFlag");
  const _fullFlushFlag = Symbol("fullFlushFlag");
  const _handle = Symbol("handle");
  const _onError = Symbol("onError");
  const _sawError = Symbol("sawError");
  const _level = Symbol("level");
  const _strategy = Symbol("strategy");
  const _ended = Symbol("ended");
  const _defaultFullFlush = Symbol("_defaultFullFlush");
  class ZlibBase extends Minipass {
    constructor(opts, mode) {
      if (!opts || typeof opts !== "object")
        throw new TypeError("invalid options for ZlibBase constructor");
      super(opts);
      this[_sawError] = false;
      this[_ended] = false;
      this[_opts] = opts;
      this[_flushFlag] = opts.flush;
      this[_finishFlushFlag] = opts.finishFlush;
      try {
        this[_handle] = new realZlib[mode](opts);
      } catch (er) {
        throw new ZlibError(er);
      }
      this[_onError] = (err) => {
        if (this[_sawError])
          return;
        this[_sawError] = true;
        this.close();
        this.emit("error", err);
      };
      this[_handle].on("error", (er) => this[_onError](new ZlibError(er)));
      this.once("end", () => this.close);
    }
    close() {
      if (this[_handle]) {
        this[_handle].close();
        this[_handle] = null;
        this.emit("close");
      }
    }
    reset() {
      if (!this[_sawError]) {
        assert(this[_handle], "zlib binding closed");
        return this[_handle].reset();
      }
    }
    flush(flushFlag) {
      if (this.ended)
        return;
      if (typeof flushFlag !== "number")
        flushFlag = this[_fullFlushFlag];
      this.write(Object.assign(Buffer2.alloc(0), {[_flushFlag]: flushFlag}));
    }
    end(chunk, encoding, cb) {
      if (chunk)
        this.write(chunk, encoding);
      this.flush(this[_finishFlushFlag]);
      this[_ended] = true;
      return super.end(null, null, cb);
    }
    get ended() {
      return this[_ended];
    }
    write(chunk, encoding, cb) {
      if (typeof encoding === "function")
        cb = encoding, encoding = "utf8";
      if (typeof chunk === "string")
        chunk = Buffer2.from(chunk, encoding);
      if (this[_sawError])
        return;
      assert(this[_handle], "zlib binding closed");
      const nativeHandle = this[_handle]._handle;
      const originalNativeClose = nativeHandle.close;
      nativeHandle.close = () => {
      };
      const originalClose = this[_handle].close;
      this[_handle].close = () => {
      };
      Buffer2.concat = (args2) => args2;
      let result;
      try {
        const flushFlag = typeof chunk[_flushFlag] === "number" ? chunk[_flushFlag] : this[_flushFlag];
        result = this[_handle]._processChunk(chunk, flushFlag);
        Buffer2.concat = OriginalBufferConcat;
      } catch (err) {
        Buffer2.concat = OriginalBufferConcat;
        this[_onError](new ZlibError(err));
      } finally {
        if (this[_handle]) {
          this[_handle]._handle = nativeHandle;
          nativeHandle.close = originalNativeClose;
          this[_handle].close = originalClose;
          this[_handle].removeAllListeners("error");
        }
      }
      if (this[_handle])
        this[_handle].on("error", (er) => this[_onError](new ZlibError(er)));
      let writeReturn;
      if (result) {
        if (Array.isArray(result) && result.length > 0) {
          writeReturn = this[_superWrite](Buffer2.from(result[0]));
          for (let i = 1; i < result.length; i++) {
            writeReturn = this[_superWrite](result[i]);
          }
        } else {
          writeReturn = this[_superWrite](Buffer2.from(result));
        }
      }
      if (cb)
        cb();
      return writeReturn;
    }
    [_superWrite](data) {
      return super.write(data);
    }
  }
  class Zlib extends ZlibBase {
    constructor(opts, mode) {
      opts = opts || {};
      opts.flush = opts.flush || constants.Z_NO_FLUSH;
      opts.finishFlush = opts.finishFlush || constants.Z_FINISH;
      super(opts, mode);
      this[_fullFlushFlag] = constants.Z_FULL_FLUSH;
      this[_level] = opts.level;
      this[_strategy] = opts.strategy;
    }
    params(level, strategy) {
      if (this[_sawError])
        return;
      if (!this[_handle])
        throw new Error("cannot switch params when binding is closed");
      if (!this[_handle].params)
        throw new Error("not supported in this implementation");
      if (this[_level] !== level || this[_strategy] !== strategy) {
        this.flush(constants.Z_SYNC_FLUSH);
        assert(this[_handle], "zlib binding closed");
        const origFlush = this[_handle].flush;
        this[_handle].flush = (flushFlag, cb) => {
          this.flush(flushFlag);
          cb();
        };
        try {
          this[_handle].params(level, strategy);
        } finally {
          this[_handle].flush = origFlush;
        }
        if (this[_handle]) {
          this[_level] = level;
          this[_strategy] = strategy;
        }
      }
    }
  }
  class Deflate extends Zlib {
    constructor(opts) {
      super(opts, "Deflate");
    }
  }
  class Inflate extends Zlib {
    constructor(opts) {
      super(opts, "Inflate");
    }
  }
  const _portable = Symbol("_portable");
  class Gzip extends Zlib {
    constructor(opts) {
      super(opts, "Gzip");
      this[_portable] = opts && !!opts.portable;
    }
    [_superWrite](data) {
      if (!this[_portable])
        return super[_superWrite](data);
      this[_portable] = false;
      data[9] = 255;
      return super[_superWrite](data);
    }
  }
  class Gunzip extends Zlib {
    constructor(opts) {
      super(opts, "Gunzip");
    }
  }
  class DeflateRaw extends Zlib {
    constructor(opts) {
      super(opts, "DeflateRaw");
    }
  }
  class InflateRaw extends Zlib {
    constructor(opts) {
      super(opts, "InflateRaw");
    }
  }
  class Unzip extends Zlib {
    constructor(opts) {
      super(opts, "Unzip");
    }
  }
  class Brotli extends ZlibBase {
    constructor(opts, mode) {
      opts = opts || {};
      opts.flush = opts.flush || constants.BROTLI_OPERATION_PROCESS;
      opts.finishFlush = opts.finishFlush || constants.BROTLI_OPERATION_FINISH;
      super(opts, mode);
      this[_fullFlushFlag] = constants.BROTLI_OPERATION_FLUSH;
    }
  }
  class BrotliCompress extends Brotli {
    constructor(opts) {
      super(opts, "BrotliCompress");
    }
  }
  class BrotliDecompress extends Brotli {
    constructor(opts) {
      super(opts, "BrotliDecompress");
    }
  }
  exports2.Deflate = Deflate;
  exports2.Inflate = Inflate;
  exports2.Gzip = Gzip;
  exports2.Gunzip = Gunzip;
  exports2.DeflateRaw = DeflateRaw;
  exports2.InflateRaw = InflateRaw;
  exports2.Unzip = Unzip;
  if (typeof realZlib.BrotliCompress === "function") {
    exports2.BrotliCompress = BrotliCompress;
    exports2.BrotliDecompress = BrotliDecompress;
  } else {
    exports2.BrotliCompress = exports2.BrotliDecompress = class {
      constructor() {
        throw new Error("Brotli is not supported in this version of Node.js");
      }
    };
  }
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/types.js
var require_types6 = __commonJS((exports2) => {
  "use strict";
  exports2.name = new Map([
    ["0", "File"],
    ["", "OldFile"],
    ["1", "Link"],
    ["2", "SymbolicLink"],
    ["3", "CharacterDevice"],
    ["4", "BlockDevice"],
    ["5", "Directory"],
    ["6", "FIFO"],
    ["7", "ContiguousFile"],
    ["g", "GlobalExtendedHeader"],
    ["x", "ExtendedHeader"],
    ["A", "SolarisACL"],
    ["D", "GNUDumpDir"],
    ["I", "Inode"],
    ["K", "NextFileHasLongLinkpath"],
    ["L", "NextFileHasLongPath"],
    ["M", "ContinuationFile"],
    ["N", "OldGnuLongPath"],
    ["S", "SparseFile"],
    ["V", "TapeVolumeHeader"],
    ["X", "OldExtendedHeader"]
  ]);
  exports2.code = new Map(Array.from(exports2.name).map((kv) => [kv[1], kv[0]]));
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/read-entry.js
var require_read_entry2 = __commonJS((exports2, module3) => {
  "use strict";
  const types = require_types6();
  const MiniPass = require_minipass();
  const SLURP = Symbol("slurp");
  module3.exports = class ReadEntry extends MiniPass {
    constructor(header, ex, gex) {
      super();
      this.pause();
      this.extended = ex;
      this.globalExtended = gex;
      this.header = header;
      this.startBlockSize = 512 * Math.ceil(header.size / 512);
      this.blockRemain = this.startBlockSize;
      this.remain = header.size;
      this.type = header.type;
      this.meta = false;
      this.ignore = false;
      switch (this.type) {
        case "File":
        case "OldFile":
        case "Link":
        case "SymbolicLink":
        case "CharacterDevice":
        case "BlockDevice":
        case "Directory":
        case "FIFO":
        case "ContiguousFile":
        case "GNUDumpDir":
          break;
        case "NextFileHasLongLinkpath":
        case "NextFileHasLongPath":
        case "OldGnuLongPath":
        case "GlobalExtendedHeader":
        case "ExtendedHeader":
        case "OldExtendedHeader":
          this.meta = true;
          break;
        default:
          this.ignore = true;
      }
      this.path = header.path;
      this.mode = header.mode;
      if (this.mode)
        this.mode = this.mode & 4095;
      this.uid = header.uid;
      this.gid = header.gid;
      this.uname = header.uname;
      this.gname = header.gname;
      this.size = header.size;
      this.mtime = header.mtime;
      this.atime = header.atime;
      this.ctime = header.ctime;
      this.linkpath = header.linkpath;
      this.uname = header.uname;
      this.gname = header.gname;
      if (ex)
        this[SLURP](ex);
      if (gex)
        this[SLURP](gex, true);
    }
    write(data) {
      const writeLen = data.length;
      if (writeLen > this.blockRemain)
        throw new Error("writing more to entry than is appropriate");
      const r = this.remain;
      const br = this.blockRemain;
      this.remain = Math.max(0, r - writeLen);
      this.blockRemain = Math.max(0, br - writeLen);
      if (this.ignore)
        return true;
      if (r >= writeLen)
        return super.write(data);
      return super.write(data.slice(0, r));
    }
    [SLURP](ex, global2) {
      for (let k in ex) {
        if (ex[k] !== null && ex[k] !== void 0 && !(global2 && k === "path"))
          this[k] = ex[k];
      }
    }
  };
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/large-numbers.js
var require_large_numbers2 = __commonJS((exports2) => {
  "use strict";
  const encode = exports2.encode = (num, buf) => {
    if (!Number.isSafeInteger(num))
      throw Error("cannot encode number outside of javascript safe integer range");
    else if (num < 0)
      encodeNegative(num, buf);
    else
      encodePositive(num, buf);
    return buf;
  };
  const encodePositive = (num, buf) => {
    buf[0] = 128;
    for (var i = buf.length; i > 1; i--) {
      buf[i - 1] = num & 255;
      num = Math.floor(num / 256);
    }
  };
  const encodeNegative = (num, buf) => {
    buf[0] = 255;
    var flipped = false;
    num = num * -1;
    for (var i = buf.length; i > 1; i--) {
      var byte = num & 255;
      num = Math.floor(num / 256);
      if (flipped)
        buf[i - 1] = onesComp(byte);
      else if (byte === 0)
        buf[i - 1] = 0;
      else {
        flipped = true;
        buf[i - 1] = twosComp(byte);
      }
    }
  };
  const parse = exports2.parse = (buf) => {
    var post = buf[buf.length - 1];
    var pre = buf[0];
    var value;
    if (pre === 128)
      value = pos(buf.slice(1, buf.length));
    else if (pre === 255)
      value = twos(buf);
    else
      throw Error("invalid base256 encoding");
    if (!Number.isSafeInteger(value))
      throw Error("parsed number outside of javascript safe integer range");
    return value;
  };
  const twos = (buf) => {
    var len = buf.length;
    var sum = 0;
    var flipped = false;
    for (var i = len - 1; i > -1; i--) {
      var byte = buf[i];
      var f;
      if (flipped)
        f = onesComp(byte);
      else if (byte === 0)
        f = byte;
      else {
        flipped = true;
        f = twosComp(byte);
      }
      if (f !== 0)
        sum -= f * Math.pow(256, len - i - 1);
    }
    return sum;
  };
  const pos = (buf) => {
    var len = buf.length;
    var sum = 0;
    for (var i = len - 1; i > -1; i--) {
      var byte = buf[i];
      if (byte !== 0)
        sum += byte * Math.pow(256, len - i - 1);
    }
    return sum;
  };
  const onesComp = (byte) => (255 ^ byte) & 255;
  const twosComp = (byte) => (255 ^ byte) + 1 & 255;
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/header.js
var require_header2 = __commonJS((exports2, module3) => {
  "use strict";
  const types = require_types6();
  const pathModule = require("path").posix;
  const large = require_large_numbers2();
  const SLURP = Symbol("slurp");
  const TYPE = Symbol("type");
  class Header {
    constructor(data, off, ex, gex) {
      this.cksumValid = false;
      this.needPax = false;
      this.nullBlock = false;
      this.block = null;
      this.path = null;
      this.mode = null;
      this.uid = null;
      this.gid = null;
      this.size = null;
      this.mtime = null;
      this.cksum = null;
      this[TYPE] = "0";
      this.linkpath = null;
      this.uname = null;
      this.gname = null;
      this.devmaj = 0;
      this.devmin = 0;
      this.atime = null;
      this.ctime = null;
      if (Buffer.isBuffer(data))
        this.decode(data, off || 0, ex, gex);
      else if (data)
        this.set(data);
    }
    decode(buf, off, ex, gex) {
      if (!off)
        off = 0;
      if (!buf || !(buf.length >= off + 512))
        throw new Error("need 512 bytes for header");
      this.path = decString(buf, off, 100);
      this.mode = decNumber(buf, off + 100, 8);
      this.uid = decNumber(buf, off + 108, 8);
      this.gid = decNumber(buf, off + 116, 8);
      this.size = decNumber(buf, off + 124, 12);
      this.mtime = decDate(buf, off + 136, 12);
      this.cksum = decNumber(buf, off + 148, 12);
      this[SLURP](ex);
      this[SLURP](gex, true);
      this[TYPE] = decString(buf, off + 156, 1);
      if (this[TYPE] === "")
        this[TYPE] = "0";
      if (this[TYPE] === "0" && this.path.substr(-1) === "/")
        this[TYPE] = "5";
      if (this[TYPE] === "5")
        this.size = 0;
      this.linkpath = decString(buf, off + 157, 100);
      if (buf.slice(off + 257, off + 265).toString() === "ustar\x0000") {
        this.uname = decString(buf, off + 265, 32);
        this.gname = decString(buf, off + 297, 32);
        this.devmaj = decNumber(buf, off + 329, 8);
        this.devmin = decNumber(buf, off + 337, 8);
        if (buf[off + 475] !== 0) {
          const prefix = decString(buf, off + 345, 155);
          this.path = prefix + "/" + this.path;
        } else {
          const prefix = decString(buf, off + 345, 130);
          if (prefix)
            this.path = prefix + "/" + this.path;
          this.atime = decDate(buf, off + 476, 12);
          this.ctime = decDate(buf, off + 488, 12);
        }
      }
      let sum = 8 * 32;
      for (let i = off; i < off + 148; i++) {
        sum += buf[i];
      }
      for (let i = off + 156; i < off + 512; i++) {
        sum += buf[i];
      }
      this.cksumValid = sum === this.cksum;
      if (this.cksum === null && sum === 8 * 32)
        this.nullBlock = true;
    }
    [SLURP](ex, global2) {
      for (let k in ex) {
        if (ex[k] !== null && ex[k] !== void 0 && !(global2 && k === "path"))
          this[k] = ex[k];
      }
    }
    encode(buf, off) {
      if (!buf) {
        buf = this.block = Buffer.alloc(512);
        off = 0;
      }
      if (!off)
        off = 0;
      if (!(buf.length >= off + 512))
        throw new Error("need 512 bytes for header");
      const prefixSize = this.ctime || this.atime ? 130 : 155;
      const split = splitPrefix(this.path || "", prefixSize);
      const path19 = split[0];
      const prefix = split[1];
      this.needPax = split[2];
      this.needPax = encString(buf, off, 100, path19) || this.needPax;
      this.needPax = encNumber(buf, off + 100, 8, this.mode) || this.needPax;
      this.needPax = encNumber(buf, off + 108, 8, this.uid) || this.needPax;
      this.needPax = encNumber(buf, off + 116, 8, this.gid) || this.needPax;
      this.needPax = encNumber(buf, off + 124, 12, this.size) || this.needPax;
      this.needPax = encDate(buf, off + 136, 12, this.mtime) || this.needPax;
      buf[off + 156] = this[TYPE].charCodeAt(0);
      this.needPax = encString(buf, off + 157, 100, this.linkpath) || this.needPax;
      buf.write("ustar\x0000", off + 257, 8);
      this.needPax = encString(buf, off + 265, 32, this.uname) || this.needPax;
      this.needPax = encString(buf, off + 297, 32, this.gname) || this.needPax;
      this.needPax = encNumber(buf, off + 329, 8, this.devmaj) || this.needPax;
      this.needPax = encNumber(buf, off + 337, 8, this.devmin) || this.needPax;
      this.needPax = encString(buf, off + 345, prefixSize, prefix) || this.needPax;
      if (buf[off + 475] !== 0)
        this.needPax = encString(buf, off + 345, 155, prefix) || this.needPax;
      else {
        this.needPax = encString(buf, off + 345, 130, prefix) || this.needPax;
        this.needPax = encDate(buf, off + 476, 12, this.atime) || this.needPax;
        this.needPax = encDate(buf, off + 488, 12, this.ctime) || this.needPax;
      }
      let sum = 8 * 32;
      for (let i = off; i < off + 148; i++) {
        sum += buf[i];
      }
      for (let i = off + 156; i < off + 512; i++) {
        sum += buf[i];
      }
      this.cksum = sum;
      encNumber(buf, off + 148, 8, this.cksum);
      this.cksumValid = true;
      return this.needPax;
    }
    set(data) {
      for (let i in data) {
        if (data[i] !== null && data[i] !== void 0)
          this[i] = data[i];
      }
    }
    get type() {
      return types.name.get(this[TYPE]) || this[TYPE];
    }
    get typeKey() {
      return this[TYPE];
    }
    set type(type) {
      if (types.code.has(type))
        this[TYPE] = types.code.get(type);
      else
        this[TYPE] = type;
    }
  }
  const splitPrefix = (p, prefixSize) => {
    const pathSize = 100;
    let pp = p;
    let prefix = "";
    let ret;
    const root = pathModule.parse(p).root || ".";
    if (Buffer.byteLength(pp) < pathSize)
      ret = [pp, prefix, false];
    else {
      prefix = pathModule.dirname(pp);
      pp = pathModule.basename(pp);
      do {
        if (Buffer.byteLength(pp) <= pathSize && Buffer.byteLength(prefix) <= prefixSize)
          ret = [pp, prefix, false];
        else if (Buffer.byteLength(pp) > pathSize && Buffer.byteLength(prefix) <= prefixSize)
          ret = [pp.substr(0, pathSize - 1), prefix, true];
        else {
          pp = pathModule.join(pathModule.basename(prefix), pp);
          prefix = pathModule.dirname(prefix);
        }
      } while (prefix !== root && !ret);
      if (!ret)
        ret = [p.substr(0, pathSize - 1), "", true];
    }
    return ret;
  };
  const decString = (buf, off, size) => buf.slice(off, off + size).toString("utf8").replace(/\0.*/, "");
  const decDate = (buf, off, size) => numToDate(decNumber(buf, off, size));
  const numToDate = (num) => num === null ? null : new Date(num * 1e3);
  const decNumber = (buf, off, size) => buf[off] & 128 ? large.parse(buf.slice(off, off + size)) : decSmallNumber(buf, off, size);
  const nanNull = (value) => isNaN(value) ? null : value;
  const decSmallNumber = (buf, off, size) => nanNull(parseInt(buf.slice(off, off + size).toString("utf8").replace(/\0.*$/, "").trim(), 8));
  const MAXNUM = {
    12: 8589934591,
    8: 2097151
  };
  const encNumber = (buf, off, size, number) => number === null ? false : number > MAXNUM[size] || number < 0 ? (large.encode(number, buf.slice(off, off + size)), true) : (encSmallNumber(buf, off, size, number), false);
  const encSmallNumber = (buf, off, size, number) => buf.write(octalString(number, size), off, size, "ascii");
  const octalString = (number, size) => padOctal(Math.floor(number).toString(8), size);
  const padOctal = (string, size) => (string.length === size - 1 ? string : new Array(size - string.length - 1).join("0") + string + " ") + "\0";
  const encDate = (buf, off, size, date) => date === null ? false : encNumber(buf, off, size, date.getTime() / 1e3);
  const NULLS = new Array(156).join("\0");
  const encString = (buf, off, size, string) => string === null ? false : (buf.write(string + NULLS, off, size, "utf8"), string.length !== Buffer.byteLength(string) || string.length > size);
  module3.exports = Header;
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/pax.js
var require_pax2 = __commonJS((exports2, module3) => {
  "use strict";
  const Header = require_header2();
  const path19 = require("path");
  class Pax {
    constructor(obj, global2) {
      this.atime = obj.atime || null;
      this.charset = obj.charset || null;
      this.comment = obj.comment || null;
      this.ctime = obj.ctime || null;
      this.gid = obj.gid || null;
      this.gname = obj.gname || null;
      this.linkpath = obj.linkpath || null;
      this.mtime = obj.mtime || null;
      this.path = obj.path || null;
      this.size = obj.size || null;
      this.uid = obj.uid || null;
      this.uname = obj.uname || null;
      this.dev = obj.dev || null;
      this.ino = obj.ino || null;
      this.nlink = obj.nlink || null;
      this.global = global2 || false;
    }
    encode() {
      const body = this.encodeBody();
      if (body === "")
        return null;
      const bodyLen = Buffer.byteLength(body);
      const bufLen = 512 * Math.ceil(1 + bodyLen / 512);
      const buf = Buffer.allocUnsafe(bufLen);
      for (let i = 0; i < 512; i++) {
        buf[i] = 0;
      }
      new Header({
        path: ("PaxHeader/" + path19.basename(this.path)).slice(0, 99),
        mode: this.mode || 420,
        uid: this.uid || null,
        gid: this.gid || null,
        size: bodyLen,
        mtime: this.mtime || null,
        type: this.global ? "GlobalExtendedHeader" : "ExtendedHeader",
        linkpath: "",
        uname: this.uname || "",
        gname: this.gname || "",
        devmaj: 0,
        devmin: 0,
        atime: this.atime || null,
        ctime: this.ctime || null
      }).encode(buf);
      buf.write(body, 512, bodyLen, "utf8");
      for (let i = bodyLen + 512; i < buf.length; i++) {
        buf[i] = 0;
      }
      return buf;
    }
    encodeBody() {
      return this.encodeField("path") + this.encodeField("ctime") + this.encodeField("atime") + this.encodeField("dev") + this.encodeField("ino") + this.encodeField("nlink") + this.encodeField("charset") + this.encodeField("comment") + this.encodeField("gid") + this.encodeField("gname") + this.encodeField("linkpath") + this.encodeField("mtime") + this.encodeField("size") + this.encodeField("uid") + this.encodeField("uname");
    }
    encodeField(field) {
      if (this[field] === null || this[field] === void 0)
        return "";
      const v = this[field] instanceof Date ? this[field].getTime() / 1e3 : this[field];
      const s = " " + (field === "dev" || field === "ino" || field === "nlink" ? "SCHILY." : "") + field + "=" + v + "\n";
      const byteLen = Buffer.byteLength(s);
      let digits = Math.floor(Math.log(byteLen) / Math.log(10)) + 1;
      if (byteLen + digits >= Math.pow(10, digits))
        digits += 1;
      const len = digits + byteLen;
      return len + s;
    }
  }
  Pax.parse = (string, ex, g) => new Pax(merge(parseKV(string), ex), g);
  const merge = (a, b) => b ? Object.keys(a).reduce((s, k) => (s[k] = a[k], s), b) : a;
  const parseKV = (string) => string.replace(/\n$/, "").split("\n").reduce(parseKVLine, Object.create(null));
  const parseKVLine = (set, line) => {
    const n = parseInt(line, 10);
    if (n !== Buffer.byteLength(line) + 1)
      return set;
    line = line.substr((n + " ").length);
    const kv = line.split("=");
    const k = kv.shift().replace(/^SCHILY\.(dev|ino|nlink)/, "$1");
    if (!k)
      return set;
    const v = kv.join("=");
    set[k] = /^([A-Z]+\.)?([mac]|birth|creation)time$/.test(k) ? new Date(v * 1e3) : /^[0-9]+$/.test(v) ? +v : v;
    return set;
  };
  module3.exports = Pax;
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/warn-mixin.js
var require_warn_mixin2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (Base) => class extends Base {
    warn(code, message, data = {}) {
      if (this.file)
        data.file = this.file;
      if (this.cwd)
        data.cwd = this.cwd;
      data.code = message instanceof Error && message.code || code;
      data.tarCode = code;
      if (!this.strict && data.recoverable !== false) {
        if (message instanceof Error) {
          data = Object.assign(message, data);
          message = message.message;
        }
        this.emit("warn", data.tarCode, message, data);
      } else if (message instanceof Error) {
        this.emit("error", Object.assign(message, data));
      } else
        this.emit("error", Object.assign(new Error(`${code}: ${message}`), data));
    }
  };
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/winchars.js
var require_winchars2 = __commonJS((exports2, module3) => {
  "use strict";
  const raw = [
    "|",
    "<",
    ">",
    "?",
    ":"
  ];
  const win = raw.map((char) => String.fromCharCode(61440 + char.charCodeAt(0)));
  const toWin = new Map(raw.map((char, i) => [char, win[i]]));
  const toRaw = new Map(win.map((char, i) => [char, raw[i]]));
  module3.exports = {
    encode: (s) => raw.reduce((s2, c) => s2.split(c).join(toWin.get(c)), s),
    decode: (s) => win.reduce((s2, c) => s2.split(c).join(toRaw.get(c)), s)
  };
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/mode-fix.js
var require_mode_fix2 = __commonJS((exports2, module3) => {
  "use strict";
  module3.exports = (mode, isDir, portable) => {
    mode &= 4095;
    if (portable) {
      mode = (mode | 384) & ~18;
    }
    if (isDir) {
      if (mode & 256)
        mode |= 64;
      if (mode & 32)
        mode |= 8;
      if (mode & 4)
        mode |= 1;
    }
    return mode;
  };
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/write-entry.js
var require_write_entry2 = __commonJS((exports2, module3) => {
  "use strict";
  const MiniPass = require_minipass();
  const Pax = require_pax2();
  const Header = require_header2();
  const ReadEntry = require_read_entry2();
  const fs17 = require("fs");
  const path19 = require("path");
  const types = require_types6();
  const maxReadSize = 16 * 1024 * 1024;
  const PROCESS = Symbol("process");
  const FILE = Symbol("file");
  const DIRECTORY = Symbol("directory");
  const SYMLINK = Symbol("symlink");
  const HARDLINK = Symbol("hardlink");
  const HEADER = Symbol("header");
  const READ = Symbol("read");
  const LSTAT = Symbol("lstat");
  const ONLSTAT = Symbol("onlstat");
  const ONREAD = Symbol("onread");
  const ONREADLINK = Symbol("onreadlink");
  const OPENFILE = Symbol("openfile");
  const ONOPENFILE = Symbol("onopenfile");
  const CLOSE = Symbol("close");
  const MODE = Symbol("mode");
  const warner = require_warn_mixin2();
  const winchars = require_winchars2();
  const modeFix = require_mode_fix2();
  const WriteEntry = warner(class WriteEntry2 extends MiniPass {
    constructor(p, opt) {
      opt = opt || {};
      super(opt);
      if (typeof p !== "string")
        throw new TypeError("path is required");
      this.path = p;
      this.portable = !!opt.portable;
      this.myuid = process.getuid && process.getuid();
      this.myuser = process.env.USER || "";
      this.maxReadSize = opt.maxReadSize || maxReadSize;
      this.linkCache = opt.linkCache || new Map();
      this.statCache = opt.statCache || new Map();
      this.preservePaths = !!opt.preservePaths;
      this.cwd = opt.cwd || process.cwd();
      this.strict = !!opt.strict;
      this.noPax = !!opt.noPax;
      this.noMtime = !!opt.noMtime;
      this.mtime = opt.mtime || null;
      if (typeof opt.onwarn === "function")
        this.on("warn", opt.onwarn);
      let pathWarn = false;
      if (!this.preservePaths && path19.win32.isAbsolute(p)) {
        const parsed = path19.win32.parse(p);
        this.path = p.substr(parsed.root.length);
        pathWarn = parsed.root;
      }
      this.win32 = !!opt.win32 || process.platform === "win32";
      if (this.win32) {
        this.path = winchars.decode(this.path.replace(/\\/g, "/"));
        p = p.replace(/\\/g, "/");
      }
      this.absolute = opt.absolute || path19.resolve(this.cwd, p);
      if (this.path === "")
        this.path = "./";
      if (pathWarn) {
        this.warn("TAR_ENTRY_INFO", `stripping ${pathWarn} from absolute path`, {
          entry: this,
          path: pathWarn + this.path
        });
      }
      if (this.statCache.has(this.absolute))
        this[ONLSTAT](this.statCache.get(this.absolute));
      else
        this[LSTAT]();
    }
    [LSTAT]() {
      fs17.lstat(this.absolute, (er, stat) => {
        if (er)
          return this.emit("error", er);
        this[ONLSTAT](stat);
      });
    }
    [ONLSTAT](stat) {
      this.statCache.set(this.absolute, stat);
      this.stat = stat;
      if (!stat.isFile())
        stat.size = 0;
      this.type = getType(stat);
      this.emit("stat", stat);
      this[PROCESS]();
    }
    [PROCESS]() {
      switch (this.type) {
        case "File":
          return this[FILE]();
        case "Directory":
          return this[DIRECTORY]();
        case "SymbolicLink":
          return this[SYMLINK]();
        default:
          return this.end();
      }
    }
    [MODE](mode) {
      return modeFix(mode, this.type === "Directory", this.portable);
    }
    [HEADER]() {
      if (this.type === "Directory" && this.portable)
        this.noMtime = true;
      this.header = new Header({
        path: this.path,
        linkpath: this.linkpath,
        mode: this[MODE](this.stat.mode),
        uid: this.portable ? null : this.stat.uid,
        gid: this.portable ? null : this.stat.gid,
        size: this.stat.size,
        mtime: this.noMtime ? null : this.mtime || this.stat.mtime,
        type: this.type,
        uname: this.portable ? null : this.stat.uid === this.myuid ? this.myuser : "",
        atime: this.portable ? null : this.stat.atime,
        ctime: this.portable ? null : this.stat.ctime
      });
      if (this.header.encode() && !this.noPax)
        this.write(new Pax({
          atime: this.portable ? null : this.header.atime,
          ctime: this.portable ? null : this.header.ctime,
          gid: this.portable ? null : this.header.gid,
          mtime: this.noMtime ? null : this.mtime || this.header.mtime,
          path: this.path,
          linkpath: this.linkpath,
          size: this.header.size,
          uid: this.portable ? null : this.header.uid,
          uname: this.portable ? null : this.header.uname,
          dev: this.portable ? null : this.stat.dev,
          ino: this.portable ? null : this.stat.ino,
          nlink: this.portable ? null : this.stat.nlink
        }).encode());
      this.write(this.header.block);
    }
    [DIRECTORY]() {
      if (this.path.substr(-1) !== "/")
        this.path += "/";
      this.stat.size = 0;
      this[HEADER]();
      this.end();
    }
    [SYMLINK]() {
      fs17.readlink(this.absolute, (er, linkpath) => {
        if (er)
          return this.emit("error", er);
        this[ONREADLINK](linkpath);
      });
    }
    [ONREADLINK](linkpath) {
      this.linkpath = linkpath.replace(/\\/g, "/");
      this[HEADER]();
      this.end();
    }
    [HARDLINK](linkpath) {
      this.type = "Link";
      this.linkpath = path19.relative(this.cwd, linkpath).replace(/\\/g, "/");
      this.stat.size = 0;
      this[HEADER]();
      this.end();
    }
    [FILE]() {
      if (this.stat.nlink > 1) {
        const linkKey = this.stat.dev + ":" + this.stat.ino;
        if (this.linkCache.has(linkKey)) {
          const linkpath = this.linkCache.get(linkKey);
          if (linkpath.indexOf(this.cwd) === 0)
            return this[HARDLINK](linkpath);
        }
        this.linkCache.set(linkKey, this.absolute);
      }
      this[HEADER]();
      if (this.stat.size === 0)
        return this.end();
      this[OPENFILE]();
    }
    [OPENFILE]() {
      fs17.open(this.absolute, "r", (er, fd) => {
        if (er)
          return this.emit("error", er);
        this[ONOPENFILE](fd);
      });
    }
    [ONOPENFILE](fd) {
      const blockLen = 512 * Math.ceil(this.stat.size / 512);
      const bufLen = Math.min(blockLen, this.maxReadSize);
      const buf = Buffer.allocUnsafe(bufLen);
      this[READ](fd, buf, 0, buf.length, 0, this.stat.size, blockLen);
    }
    [READ](fd, buf, offset, length, pos, remain, blockRemain) {
      fs17.read(fd, buf, offset, length, pos, (er, bytesRead) => {
        if (er) {
          return this[CLOSE](fd, () => this.emit("error", er));
        }
        this[ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead);
      });
    }
    [CLOSE](fd, cb) {
      fs17.close(fd, cb);
    }
    [ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead) {
      if (bytesRead <= 0 && remain > 0) {
        const er = new Error("encountered unexpected EOF");
        er.path = this.absolute;
        er.syscall = "read";
        er.code = "EOF";
        return this[CLOSE](fd, () => this.emit("error", er));
      }
      if (bytesRead > remain) {
        const er = new Error("did not encounter expected EOF");
        er.path = this.absolute;
        er.syscall = "read";
        er.code = "EOF";
        return this[CLOSE](fd, () => this.emit("error", er));
      }
      if (bytesRead === remain) {
        for (let i = bytesRead; i < length && bytesRead < blockRemain; i++) {
          buf[i + offset] = 0;
          bytesRead++;
          remain++;
        }
      }
      const writeBuf = offset === 0 && bytesRead === buf.length ? buf : buf.slice(offset, offset + bytesRead);
      remain -= bytesRead;
      blockRemain -= bytesRead;
      pos += bytesRead;
      offset += bytesRead;
      this.write(writeBuf);
      if (!remain) {
        if (blockRemain)
          this.write(Buffer.alloc(blockRemain));
        return this[CLOSE](fd, (er) => er ? this.emit("error", er) : this.end());
      }
      if (offset >= length) {
        buf = Buffer.allocUnsafe(length);
        offset = 0;
      }
      length = buf.length - offset;
      this[READ](fd, buf, offset, length, pos, remain, blockRemain);
    }
  });
  class WriteEntrySync extends WriteEntry {
    constructor(path20, opt) {
      super(path20, opt);
    }
    [LSTAT]() {
      this[ONLSTAT](fs17.lstatSync(this.absolute));
    }
    [SYMLINK]() {
      this[ONREADLINK](fs17.readlinkSync(this.absolute));
    }
    [OPENFILE]() {
      this[ONOPENFILE](fs17.openSync(this.absolute, "r"));
    }
    [READ](fd, buf, offset, length, pos, remain, blockRemain) {
      let threw = true;
      try {
        const bytesRead = fs17.readSync(fd, buf, offset, length, pos);
        this[ONREAD](fd, buf, offset, length, pos, remain, blockRemain, bytesRead);
        threw = false;
      } finally {
        if (threw)
          try {
            this[CLOSE](fd, () => {
            });
          } catch (er) {
          }
      }
    }
    [CLOSE](fd, cb) {
      fs17.closeSync(fd);
      cb();
    }
  }
  const WriteEntryTar = warner(class WriteEntryTar2 extends MiniPass {
    constructor(readEntry, opt) {
      opt = opt || {};
      super(opt);
      this.preservePaths = !!opt.preservePaths;
      this.portable = !!opt.portable;
      this.strict = !!opt.strict;
      this.noPax = !!opt.noPax;
      this.noMtime = !!opt.noMtime;
      this.readEntry = readEntry;
      this.type = readEntry.type;
      if (this.type === "Directory" && this.portable)
        this.noMtime = true;
      this.path = readEntry.path;
      this.mode = this[MODE](readEntry.mode);
      this.uid = this.portable ? null : readEntry.uid;
      this.gid = this.portable ? null : readEntry.gid;
      this.uname = this.portable ? null : readEntry.uname;
      this.gname = this.portable ? null : readEntry.gname;
      this.size = readEntry.size;
      this.mtime = this.noMtime ? null : opt.mtime || readEntry.mtime;
      this.atime = this.portable ? null : readEntry.atime;
      this.ctime = this.portable ? null : readEntry.ctime;
      this.linkpath = readEntry.linkpath;
      if (typeof opt.onwarn === "function")
        this.on("warn", opt.onwarn);
      let pathWarn = false;
      if (path19.isAbsolute(this.path) && !this.preservePaths) {
        const parsed = path19.parse(this.path);
        pathWarn = parsed.root;
        this.path = this.path.substr(parsed.root.length);
      }
      this.remain = readEntry.size;
      this.blockRemain = readEntry.startBlockSize;
      this.header = new Header({
        path: this.path,
        linkpath: this.linkpath,
        mode: this.mode,
        uid: this.portable ? null : this.uid,
        gid: this.portable ? null : this.gid,
        size: this.size,
        mtime: this.noMtime ? null : this.mtime,
        type: this.type,
        uname: this.portable ? null : this.uname,
        atime: this.portable ? null : this.atime,
        ctime: this.portable ? null : this.ctime
      });
      if (pathWarn) {
        this.warn("TAR_ENTRY_INFO", `stripping ${pathWarn} from absolute path`, {
          entry: this,
          path: pathWarn + this.path
        });
      }
      if (this.header.encode() && !this.noPax)
        super.write(new Pax({
          atime: this.portable ? null : this.atime,
          ctime: this.portable ? null : this.ctime,
          gid: this.portable ? null : this.gid,
          mtime: this.noMtime ? null : this.mtime,
          path: this.path,
          linkpath: this.linkpath,
          size: this.size,
          uid: this.portable ? null : this.uid,
          uname: this.portable ? null : this.uname,
          dev: this.portable ? null : this.readEntry.dev,
          ino: this.portable ? null : this.readEntry.ino,
          nlink: this.portable ? null : this.readEntry.nlink
        }).encode());
      super.write(this.header.block);
      readEntry.pipe(this);
    }
    [MODE](mode) {
      return modeFix(mode, this.type === "Directory", this.portable);
    }
    write(data) {
      const writeLen = data.length;
      if (writeLen > this.blockRemain)
        throw new Error("writing more to entry than is appropriate");
      this.blockRemain -= writeLen;
      return super.write(data);
    }
    end() {
      if (this.blockRemain)
        this.write(Buffer.alloc(this.blockRemain));
      return super.end();
    }
  });
  WriteEntry.Sync = WriteEntrySync;
  WriteEntry.Tar = WriteEntryTar;
  const getType = (stat) => stat.isFile() ? "File" : stat.isDirectory() ? "Directory" : stat.isSymbolicLink() ? "SymbolicLink" : "Unsupported";
  module3.exports = WriteEntry;
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/pack.js
var require_pack3 = __commonJS((exports2, module3) => {
  "use strict";
  class PackJob {
    constructor(path20, absolute) {
      this.path = path20 || "./";
      this.absolute = absolute;
      this.entry = null;
      this.stat = null;
      this.readdir = null;
      this.pending = false;
      this.ignore = false;
      this.piped = false;
    }
  }
  const MiniPass = require_minipass();
  const zlib = require_minizlib2();
  const ReadEntry = require_read_entry2();
  const WriteEntry = require_write_entry2();
  const WriteEntrySync = WriteEntry.Sync;
  const WriteEntryTar = WriteEntry.Tar;
  const Yallist = require_yallist();
  const EOF = Buffer.alloc(1024);
  const ONSTAT = Symbol("onStat");
  const ENDED = Symbol("ended");
  const QUEUE = Symbol("queue");
  const CURRENT = Symbol("current");
  const PROCESS = Symbol("process");
  const PROCESSING = Symbol("processing");
  const PROCESSJOB = Symbol("processJob");
  const JOBS = Symbol("jobs");
  const JOBDONE = Symbol("jobDone");
  const ADDFSENTRY = Symbol("addFSEntry");
  const ADDTARENTRY = Symbol("addTarEntry");
  const STAT = Symbol("stat");
  const READDIR = Symbol("readdir");
  const ONREADDIR = Symbol("onreaddir");
  const PIPE = Symbol("pipe");
  const ENTRY = Symbol("entry");
  const ENTRYOPT = Symbol("entryOpt");
  const WRITEENTRYCLASS = Symbol("writeEntryClass");
  const WRITE = Symbol("write");
  const ONDRAIN = Symbol("ondrain");
  const fs17 = require("fs");
  const path19 = require("path");
  const warner = require_warn_mixin2();
  const Pack = warner(class Pack2 extends MiniPass {
    constructor(opt) {
      super(opt);
      opt = opt || Object.create(null);
      this.opt = opt;
      this.file = opt.file || "";
      this.cwd = opt.cwd || process.cwd();
      this.maxReadSize = opt.maxReadSize;
      this.preservePaths = !!opt.preservePaths;
      this.strict = !!opt.strict;
      this.noPax = !!opt.noPax;
      this.prefix = (opt.prefix || "").replace(/(\\|\/)+$/, "");
      this.linkCache = opt.linkCache || new Map();
      this.statCache = opt.statCache || new Map();
      this.readdirCache = opt.readdirCache || new Map();
      this[WRITEENTRYCLASS] = WriteEntry;
      if (typeof opt.onwarn === "function")
        this.on("warn", opt.onwarn);
      this.portable = !!opt.portable;
      this.zip = null;
      if (opt.gzip) {
        if (typeof opt.gzip !== "object")
          opt.gzip = {};
        if (this.portable)
          opt.gzip.portable = true;
        this.zip = new zlib.Gzip(opt.gzip);
        this.zip.on("data", (chunk) => super.write(chunk));
        this.zip.on("end", (_2) => super.end());
        this.zip.on("drain", (_2) => this[ONDRAIN]());
        this.on("resume", (_2) => this.zip.resume());
      } else
        this.on("drain", this[ONDRAIN]);
      this.noDirRecurse = !!opt.noDirRecurse;
      this.follow = !!opt.follow;
      this.noMtime = !!opt.noMtime;
      this.mtime = opt.mtime || null;
      this.filter = typeof opt.filter === "function" ? opt.filter : (_2) => true;
      this[QUEUE] = new Yallist();
      this[JOBS] = 0;
      this.jobs = +opt.jobs || 4;
      this[PROCESSING] = false;
      this[ENDED] = false;
    }
    [WRITE](chunk) {
      return super.write(chunk);
    }
    add(path20) {
      this.write(path20);
      return this;
    }
    end(path20) {
      if (path20)
        this.write(path20);
      this[ENDED] = true;
      this[PROCESS]();
      return this;
    }
    write(path20) {
      if (this[ENDED])
        throw new Error("write after end");
      if (path20 instanceof ReadEntry)
        this[ADDTARENTRY](path20);
      else
        this[ADDFSENTRY](path20);
      return this.flowing;
    }
    [ADDTARENTRY](p) {
      const absolute = path19.resolve(this.cwd, p.path);
      if (this.prefix)
        p.path = this.prefix + "/" + p.path.replace(/^\.(\/+|$)/, "");
      if (!this.filter(p.path, p))
        p.resume();
      else {
        const job = new PackJob(p.path, absolute, false);
        job.entry = new WriteEntryTar(p, this[ENTRYOPT](job));
        job.entry.on("end", (_2) => this[JOBDONE](job));
        this[JOBS] += 1;
        this[QUEUE].push(job);
      }
      this[PROCESS]();
    }
    [ADDFSENTRY](p) {
      const absolute = path19.resolve(this.cwd, p);
      if (this.prefix)
        p = this.prefix + "/" + p.replace(/^\.(\/+|$)/, "");
      this[QUEUE].push(new PackJob(p, absolute));
      this[PROCESS]();
    }
    [STAT](job) {
      job.pending = true;
      this[JOBS] += 1;
      const stat = this.follow ? "stat" : "lstat";
      fs17[stat](job.absolute, (er, stat2) => {
        job.pending = false;
        this[JOBS] -= 1;
        if (er)
          this.emit("error", er);
        else
          this[ONSTAT](job, stat2);
      });
    }
    [ONSTAT](job, stat) {
      this.statCache.set(job.absolute, stat);
      job.stat = stat;
      if (!this.filter(job.path, stat))
        job.ignore = true;
      this[PROCESS]();
    }
    [READDIR](job) {
      job.pending = true;
      this[JOBS] += 1;
      fs17.readdir(job.absolute, (er, entries) => {
        job.pending = false;
        this[JOBS] -= 1;
        if (er)
          return this.emit("error", er);
        this[ONREADDIR](job, entries);
      });
    }
    [ONREADDIR](job, entries) {
      this.readdirCache.set(job.absolute, entries);
      job.readdir = entries;
      this[PROCESS]();
    }
    [PROCESS]() {
      if (this[PROCESSING])
        return;
      this[PROCESSING] = true;
      for (let w = this[QUEUE].head; w !== null && this[JOBS] < this.jobs; w = w.next) {
        this[PROCESSJOB](w.value);
        if (w.value.ignore) {
          const p = w.next;
          this[QUEUE].removeNode(w);
          w.next = p;
        }
      }
      this[PROCESSING] = false;
      if (this[ENDED] && !this[QUEUE].length && this[JOBS] === 0) {
        if (this.zip)
          this.zip.end(EOF);
        else {
          super.write(EOF);
          super.end();
        }
      }
    }
    get [CURRENT]() {
      return this[QUEUE] && this[QUEUE].head && this[QUEUE].head.value;
    }
    [JOBDONE](job) {
      this[QUEUE].shift();
      this[JOBS] -= 1;
      this[PROCESS]();
    }
    [PROCESSJOB](job) {
      if (job.pending)
        return;
      if (job.entry) {
        if (job === this[CURRENT] && !job.piped)
          this[PIPE](job);
        return;
      }
      if (!job.stat) {
        if (this.statCache.has(job.absolute))
          this[ONSTAT](job, this.statCache.get(job.absolute));
        else
          this[STAT](job);
      }
      if (!job.stat)
        return;
      if (job.ignore)
        return;
      if (!this.noDirRecurse && job.stat.isDirectory() && !job.readdir) {
        if (this.readdirCache.has(job.absolute))
          this[ONREADDIR](job, this.readdirCache.get(job.absolute));
        else
          this[READDIR](job);
        if (!job.readdir)
          return;
      }
      job.entry = this[ENTRY](job);
      if (!job.entry) {
        job.ignore = true;
        return;
      }
      if (job === this[CURRENT] && !job.piped)
        this[PIPE](job);
    }
    [ENTRYOPT](job) {
      return {
        onwarn: (code, msg, data) => this.warn(code, msg, data),
        noPax: this.noPax,
        cwd: this.cwd,
        absolute: job.absolute,
        preservePaths: this.preservePaths,
        maxReadSize: this.maxReadSize,
        strict: this.strict,
        portable: this.portable,
        linkCache: this.linkCache,
        statCache: this.statCache,
        noMtime: this.noMtime,
        mtime: this.mtime
      };
    }
    [ENTRY](job) {
      this[JOBS] += 1;
      try {
        return new this[WRITEENTRYCLASS](job.path, this[ENTRYOPT](job)).on("end", () => this[JOBDONE](job)).on("error", (er) => this.emit("error", er));
      } catch (er) {
        this.emit("error", er);
      }
    }
    [ONDRAIN]() {
      if (this[CURRENT] && this[CURRENT].entry)
        this[CURRENT].entry.resume();
    }
    [PIPE](job) {
      job.piped = true;
      if (job.readdir)
        job.readdir.forEach((entry) => {
          const p = this.prefix ? job.path.slice(this.prefix.length + 1) || "./" : job.path;
          const base = p === "./" ? "" : p.replace(/\/*$/, "/");
          this[ADDFSENTRY](base + entry);
        });
      const source = job.entry;
      const zip = this.zip;
      if (zip)
        source.on("data", (chunk) => {
          if (!zip.write(chunk))
            source.pause();
        });
      else
        source.on("data", (chunk) => {
          if (!super.write(chunk))
            source.pause();
        });
    }
    pause() {
      if (this.zip)
        this.zip.pause();
      return super.pause();
    }
  });
  class PackSync extends Pack {
    constructor(opt) {
      super(opt);
      this[WRITEENTRYCLASS] = WriteEntrySync;
    }
    pause() {
    }
    resume() {
    }
    [STAT](job) {
      const stat = this.follow ? "statSync" : "lstatSync";
      this[ONSTAT](job, fs17[stat](job.absolute));
    }
    [READDIR](job, stat) {
      this[ONREADDIR](job, fs17.readdirSync(job.absolute));
    }
    [PIPE](job) {
      const source = job.entry;
      const zip = this.zip;
      if (job.readdir)
        job.readdir.forEach((entry) => {
          const p = this.prefix ? job.path.slice(this.prefix.length + 1) || "./" : job.path;
          const base = p === "./" ? "" : p.replace(/\/*$/, "/");
          this[ADDFSENTRY](base + entry);
        });
      if (zip)
        source.on("data", (chunk) => {
          zip.write(chunk);
        });
      else
        source.on("data", (chunk) => {
          super[WRITE](chunk);
        });
    }
  }
  Pack.Sync = PackSync;
  module3.exports = Pack;
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/parse.js
var require_parse8 = __commonJS((exports2, module3) => {
  "use strict";
  const warner = require_warn_mixin2();
  const path19 = require("path");
  const Header = require_header2();
  const EE = require("events");
  const Yallist = require_yallist();
  const maxMetaEntrySize = 1024 * 1024;
  const Entry = require_read_entry2();
  const Pax = require_pax2();
  const zlib = require_minizlib2();
  const gzipHeader = Buffer.from([31, 139]);
  const STATE = Symbol("state");
  const WRITEENTRY = Symbol("writeEntry");
  const READENTRY = Symbol("readEntry");
  const NEXTENTRY = Symbol("nextEntry");
  const PROCESSENTRY = Symbol("processEntry");
  const EX = Symbol("extendedHeader");
  const GEX = Symbol("globalExtendedHeader");
  const META = Symbol("meta");
  const EMITMETA = Symbol("emitMeta");
  const BUFFER = Symbol("buffer");
  const QUEUE = Symbol("queue");
  const ENDED = Symbol("ended");
  const EMITTEDEND = Symbol("emittedEnd");
  const EMIT = Symbol("emit");
  const UNZIP = Symbol("unzip");
  const CONSUMECHUNK = Symbol("consumeChunk");
  const CONSUMECHUNKSUB = Symbol("consumeChunkSub");
  const CONSUMEBODY = Symbol("consumeBody");
  const CONSUMEMETA = Symbol("consumeMeta");
  const CONSUMEHEADER = Symbol("consumeHeader");
  const CONSUMING = Symbol("consuming");
  const BUFFERCONCAT = Symbol("bufferConcat");
  const MAYBEEND = Symbol("maybeEnd");
  const WRITING = Symbol("writing");
  const ABORTED = Symbol("aborted");
  const DONE = Symbol("onDone");
  const SAW_VALID_ENTRY = Symbol("sawValidEntry");
  const SAW_NULL_BLOCK = Symbol("sawNullBlock");
  const SAW_EOF = Symbol("sawEOF");
  const noop = (_2) => true;
  module3.exports = warner(class Parser extends EE {
    constructor(opt) {
      opt = opt || {};
      super(opt);
      this.file = opt.file || "";
      this[SAW_VALID_ENTRY] = null;
      this.on(DONE, (_2) => {
        if (this[STATE] === "begin" || this[SAW_VALID_ENTRY] === false) {
          this.warn("TAR_BAD_ARCHIVE", "Unrecognized archive format");
        }
      });
      if (opt.ondone)
        this.on(DONE, opt.ondone);
      else
        this.on(DONE, (_2) => {
          this.emit("prefinish");
          this.emit("finish");
          this.emit("end");
          this.emit("close");
        });
      this.strict = !!opt.strict;
      this.maxMetaEntrySize = opt.maxMetaEntrySize || maxMetaEntrySize;
      this.filter = typeof opt.filter === "function" ? opt.filter : noop;
      this.writable = true;
      this.readable = false;
      this[QUEUE] = new Yallist();
      this[BUFFER] = null;
      this[READENTRY] = null;
      this[WRITEENTRY] = null;
      this[STATE] = "begin";
      this[META] = "";
      this[EX] = null;
      this[GEX] = null;
      this[ENDED] = false;
      this[UNZIP] = null;
      this[ABORTED] = false;
      this[SAW_NULL_BLOCK] = false;
      this[SAW_EOF] = false;
      if (typeof opt.onwarn === "function")
        this.on("warn", opt.onwarn);
      if (typeof opt.onentry === "function")
        this.on("entry", opt.onentry);
    }
    [CONSUMEHEADER](chunk, position) {
      if (this[SAW_VALID_ENTRY] === null)
        this[SAW_VALID_ENTRY] = false;
      let header;
      try {
        header = new Header(chunk, position, this[EX], this[GEX]);
      } catch (er) {
        return this.warn("TAR_ENTRY_INVALID", er);
      }
      if (header.nullBlock) {
        if (this[SAW_NULL_BLOCK]) {
          this[SAW_EOF] = true;
          if (this[STATE] === "begin")
            this[STATE] = "header";
          this[EMIT]("eof");
        } else {
          this[SAW_NULL_BLOCK] = true;
          this[EMIT]("nullBlock");
        }
      } else {
        this[SAW_NULL_BLOCK] = false;
        if (!header.cksumValid)
          this.warn("TAR_ENTRY_INVALID", "checksum failure", {header});
        else if (!header.path)
          this.warn("TAR_ENTRY_INVALID", "path is required", {header});
        else {
          const type = header.type;
          if (/^(Symbolic)?Link$/.test(type) && !header.linkpath)
            this.warn("TAR_ENTRY_INVALID", "linkpath required", {header});
          else if (!/^(Symbolic)?Link$/.test(type) && header.linkpath)
            this.warn("TAR_ENTRY_INVALID", "linkpath forbidden", {header});
          else {
            const entry = this[WRITEENTRY] = new Entry(header, this[EX], this[GEX]);
            if (!this[SAW_VALID_ENTRY]) {
              if (entry.remain) {
                const onend = () => {
                  if (!entry.invalid)
                    this[SAW_VALID_ENTRY] = true;
                };
                entry.on("end", onend);
              } else {
                this[SAW_VALID_ENTRY] = true;
              }
            }
            if (entry.meta) {
              if (entry.size > this.maxMetaEntrySize) {
                entry.ignore = true;
                this[EMIT]("ignoredEntry", entry);
                this[STATE] = "ignore";
                entry.resume();
              } else if (entry.size > 0) {
                this[META] = "";
                entry.on("data", (c) => this[META] += c);
                this[STATE] = "meta";
              }
            } else {
              this[EX] = null;
              entry.ignore = entry.ignore || !this.filter(entry.path, entry);
              if (entry.ignore) {
                this[EMIT]("ignoredEntry", entry);
                this[STATE] = entry.remain ? "ignore" : "header";
                entry.resume();
              } else {
                if (entry.remain)
                  this[STATE] = "body";
                else {
                  this[STATE] = "header";
                  entry.end();
                }
                if (!this[READENTRY]) {
                  this[QUEUE].push(entry);
                  this[NEXTENTRY]();
                } else
                  this[QUEUE].push(entry);
              }
            }
          }
        }
      }
    }
    [PROCESSENTRY](entry) {
      let go = true;
      if (!entry) {
        this[READENTRY] = null;
        go = false;
      } else if (Array.isArray(entry))
        this.emit.apply(this, entry);
      else {
        this[READENTRY] = entry;
        this.emit("entry", entry);
        if (!entry.emittedEnd) {
          entry.on("end", (_2) => this[NEXTENTRY]());
          go = false;
        }
      }
      return go;
    }
    [NEXTENTRY]() {
      do {
      } while (this[PROCESSENTRY](this[QUEUE].shift()));
      if (!this[QUEUE].length) {
        const re = this[READENTRY];
        const drainNow = !re || re.flowing || re.size === re.remain;
        if (drainNow) {
          if (!this[WRITING])
            this.emit("drain");
        } else
          re.once("drain", (_2) => this.emit("drain"));
      }
    }
    [CONSUMEBODY](chunk, position) {
      const entry = this[WRITEENTRY];
      const br = entry.blockRemain;
      const c = br >= chunk.length && position === 0 ? chunk : chunk.slice(position, position + br);
      entry.write(c);
      if (!entry.blockRemain) {
        this[STATE] = "header";
        this[WRITEENTRY] = null;
        entry.end();
      }
      return c.length;
    }
    [CONSUMEMETA](chunk, position) {
      const entry = this[WRITEENTRY];
      const ret = this[CONSUMEBODY](chunk, position);
      if (!this[WRITEENTRY])
        this[EMITMETA](entry);
      return ret;
    }
    [EMIT](ev, data, extra) {
      if (!this[QUEUE].length && !this[READENTRY])
        this.emit(ev, data, extra);
      else
        this[QUEUE].push([ev, data, extra]);
    }
    [EMITMETA](entry) {
      this[EMIT]("meta", this[META]);
      switch (entry.type) {
        case "ExtendedHeader":
        case "OldExtendedHeader":
          this[EX] = Pax.parse(this[META], this[EX], false);
          break;
        case "GlobalExtendedHeader":
          this[GEX] = Pax.parse(this[META], this[GEX], true);
          break;
        case "NextFileHasLongPath":
        case "OldGnuLongPath":
          this[EX] = this[EX] || Object.create(null);
          this[EX].path = this[META].replace(/\0.*/, "");
          break;
        case "NextFileHasLongLinkpath":
          this[EX] = this[EX] || Object.create(null);
          this[EX].linkpath = this[META].replace(/\0.*/, "");
          break;
        default:
          throw new Error("unknown meta: " + entry.type);
      }
    }
    abort(error) {
      this[ABORTED] = true;
      this.emit("abort", error);
      this.warn("TAR_ABORT", error, {recoverable: false});
    }
    write(chunk) {
      if (this[ABORTED])
        return;
      if (this[UNZIP] === null && chunk) {
        if (this[BUFFER]) {
          chunk = Buffer.concat([this[BUFFER], chunk]);
          this[BUFFER] = null;
        }
        if (chunk.length < gzipHeader.length) {
          this[BUFFER] = chunk;
          return true;
        }
        for (let i = 0; this[UNZIP] === null && i < gzipHeader.length; i++) {
          if (chunk[i] !== gzipHeader[i])
            this[UNZIP] = false;
        }
        if (this[UNZIP] === null) {
          const ended = this[ENDED];
          this[ENDED] = false;
          this[UNZIP] = new zlib.Unzip();
          this[UNZIP].on("data", (chunk2) => this[CONSUMECHUNK](chunk2));
          this[UNZIP].on("error", (er) => this.abort(er));
          this[UNZIP].on("end", (_2) => {
            this[ENDED] = true;
            this[CONSUMECHUNK]();
          });
          this[WRITING] = true;
          const ret2 = this[UNZIP][ended ? "end" : "write"](chunk);
          this[WRITING] = false;
          return ret2;
        }
      }
      this[WRITING] = true;
      if (this[UNZIP])
        this[UNZIP].write(chunk);
      else
        this[CONSUMECHUNK](chunk);
      this[WRITING] = false;
      const ret = this[QUEUE].length ? false : this[READENTRY] ? this[READENTRY].flowing : true;
      if (!ret && !this[QUEUE].length)
        this[READENTRY].once("drain", (_2) => this.emit("drain"));
      return ret;
    }
    [BUFFERCONCAT](c) {
      if (c && !this[ABORTED])
        this[BUFFER] = this[BUFFER] ? Buffer.concat([this[BUFFER], c]) : c;
    }
    [MAYBEEND]() {
      if (this[ENDED] && !this[EMITTEDEND] && !this[ABORTED] && !this[CONSUMING]) {
        this[EMITTEDEND] = true;
        const entry = this[WRITEENTRY];
        if (entry && entry.blockRemain) {
          const have = this[BUFFER] ? this[BUFFER].length : 0;
          this.warn("TAR_BAD_ARCHIVE", `Truncated input (needed ${entry.blockRemain} more bytes, only ${have} available)`, {entry});
          if (this[BUFFER])
            entry.write(this[BUFFER]);
          entry.end();
        }
        this[EMIT](DONE);
      }
    }
    [CONSUMECHUNK](chunk) {
      if (this[CONSUMING])
        this[BUFFERCONCAT](chunk);
      else if (!chunk && !this[BUFFER])
        this[MAYBEEND]();
      else {
        this[CONSUMING] = true;
        if (this[BUFFER]) {
          this[BUFFERCONCAT](chunk);
          const c = this[BUFFER];
          this[BUFFER] = null;
          this[CONSUMECHUNKSUB](c);
        } else {
          this[CONSUMECHUNKSUB](chunk);
        }
        while (this[BUFFER] && this[BUFFER].length >= 512 && !this[ABORTED] && !this[SAW_EOF]) {
          const c = this[BUFFER];
          this[BUFFER] = null;
          this[CONSUMECHUNKSUB](c);
        }
        this[CONSUMING] = false;
      }
      if (!this[BUFFER] || this[ENDED])
        this[MAYBEEND]();
    }
    [CONSUMECHUNKSUB](chunk) {
      let position = 0;
      let length = chunk.length;
      while (position + 512 <= length && !this[ABORTED] && !this[SAW_EOF]) {
        switch (this[STATE]) {
          case "begin":
          case "header":
            this[CONSUMEHEADER](chunk, position);
            position += 512;
            break;
          case "ignore":
          case "body":
            position += this[CONSUMEBODY](chunk, position);
            break;
          case "meta":
            position += this[CONSUMEMETA](chunk, position);
            break;
          default:
            throw new Error("invalid state: " + this[STATE]);
        }
      }
      if (position < length) {
        if (this[BUFFER])
          this[BUFFER] = Buffer.concat([chunk.slice(position), this[BUFFER]]);
        else
          this[BUFFER] = chunk.slice(position);
      }
    }
    end(chunk) {
      if (!this[ABORTED]) {
        if (this[UNZIP])
          this[UNZIP].end(chunk);
        else {
          this[ENDED] = true;
          this.write(chunk);
        }
      }
    }
  });
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/list.js
var require_list2 = __commonJS((exports2, module3) => {
  "use strict";
  const hlo = require_high_level_opt2();
  const Parser = require_parse8();
  const fs17 = require("fs");
  const fsm = require_fs_minipass();
  const path19 = require("path");
  const t = module3.exports = (opt_, files, cb) => {
    if (typeof opt_ === "function")
      cb = opt_, files = null, opt_ = {};
    else if (Array.isArray(opt_))
      files = opt_, opt_ = {};
    if (typeof files === "function")
      cb = files, files = null;
    if (!files)
      files = [];
    else
      files = Array.from(files);
    const opt = hlo(opt_);
    if (opt.sync && typeof cb === "function")
      throw new TypeError("callback not supported for sync tar functions");
    if (!opt.file && typeof cb === "function")
      throw new TypeError("callback only supported with file option");
    if (files.length)
      filesFilter(opt, files);
    if (!opt.noResume)
      onentryFunction(opt);
    return opt.file && opt.sync ? listFileSync(opt) : opt.file ? listFile(opt, cb) : list(opt);
  };
  const onentryFunction = (opt) => {
    const onentry = opt.onentry;
    opt.onentry = onentry ? (e) => {
      onentry(e);
      e.resume();
    } : (e) => e.resume();
  };
  const filesFilter = (opt, files) => {
    const map = new Map(files.map((f) => [f.replace(/\/+$/, ""), true]));
    const filter = opt.filter;
    const mapHas = (file, r) => {
      const root = r || path19.parse(file).root || ".";
      const ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path19.dirname(file), root);
      map.set(file, ret);
      return ret;
    };
    opt.filter = filter ? (file, entry) => filter(file, entry) && mapHas(file.replace(/\/+$/, "")) : (file) => mapHas(file.replace(/\/+$/, ""));
  };
  const listFileSync = (opt) => {
    const p = list(opt);
    const file = opt.file;
    let threw = true;
    let fd;
    try {
      const stat = fs17.statSync(file);
      const readSize = opt.maxReadSize || 16 * 1024 * 1024;
      if (stat.size < readSize) {
        p.end(fs17.readFileSync(file));
      } else {
        let pos = 0;
        const buf = Buffer.allocUnsafe(readSize);
        fd = fs17.openSync(file, "r");
        while (pos < stat.size) {
          let bytesRead = fs17.readSync(fd, buf, 0, readSize, pos);
          pos += bytesRead;
          p.write(buf.slice(0, bytesRead));
        }
        p.end();
      }
      threw = false;
    } finally {
      if (threw && fd)
        try {
          fs17.closeSync(fd);
        } catch (er) {
        }
    }
  };
  const listFile = (opt, cb) => {
    const parse = new Parser(opt);
    const readSize = opt.maxReadSize || 16 * 1024 * 1024;
    const file = opt.file;
    const p = new Promise((resolve, reject) => {
      parse.on("error", reject);
      parse.on("end", resolve);
      fs17.stat(file, (er, stat) => {
        if (er)
          reject(er);
        else {
          const stream = new fsm.ReadStream(file, {
            readSize,
            size: stat.size
          });
          stream.on("error", reject);
          stream.pipe(parse);
        }
      });
    });
    return cb ? p.then(cb, cb) : p;
  };
  const list = (opt) => new Parser(opt);
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/create.js
var require_create3 = __commonJS((exports2, module3) => {
  "use strict";
  const hlo = require_high_level_opt2();
  const Pack = require_pack3();
  const fs17 = require("fs");
  const fsm = require_fs_minipass();
  const t = require_list2();
  const path19 = require("path");
  const c = module3.exports = (opt_, files, cb) => {
    if (typeof files === "function")
      cb = files;
    if (Array.isArray(opt_))
      files = opt_, opt_ = {};
    if (!files || !Array.isArray(files) || !files.length)
      throw new TypeError("no files or directories specified");
    files = Array.from(files);
    const opt = hlo(opt_);
    if (opt.sync && typeof cb === "function")
      throw new TypeError("callback not supported for sync tar functions");
    if (!opt.file && typeof cb === "function")
      throw new TypeError("callback only supported with file option");
    return opt.file && opt.sync ? createFileSync(opt, files) : opt.file ? createFile(opt, files, cb) : opt.sync ? createSync(opt, files) : create(opt, files);
  };
  const createFileSync = (opt, files) => {
    const p = new Pack.Sync(opt);
    const stream = new fsm.WriteStreamSync(opt.file, {
      mode: opt.mode || 438
    });
    p.pipe(stream);
    addFilesSync(p, files);
  };
  const createFile = (opt, files, cb) => {
    const p = new Pack(opt);
    const stream = new fsm.WriteStream(opt.file, {
      mode: opt.mode || 438
    });
    p.pipe(stream);
    const promise = new Promise((res, rej) => {
      stream.on("error", rej);
      stream.on("close", res);
      p.on("error", rej);
    });
    addFilesAsync(p, files);
    return cb ? promise.then(cb, cb) : promise;
  };
  const addFilesSync = (p, files) => {
    files.forEach((file) => {
      if (file.charAt(0) === "@")
        t({
          file: path19.resolve(p.cwd, file.substr(1)),
          sync: true,
          noResume: true,
          onentry: (entry) => p.add(entry)
        });
      else
        p.add(file);
    });
    p.end();
  };
  const addFilesAsync = (p, files) => {
    while (files.length) {
      const file = files.shift();
      if (file.charAt(0) === "@")
        return t({
          file: path19.resolve(p.cwd, file.substr(1)),
          noResume: true,
          onentry: (entry) => p.add(entry)
        }).then((_2) => addFilesAsync(p, files));
      else
        p.add(file);
    }
    p.end();
  };
  const createSync = (opt, files) => {
    const p = new Pack.Sync(opt);
    addFilesSync(p, files);
    return p;
  };
  const create = (opt, files) => {
    const p = new Pack(opt);
    addFilesAsync(p, files);
    return p;
  };
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/replace.js
var require_replace2 = __commonJS((exports2, module3) => {
  "use strict";
  const hlo = require_high_level_opt2();
  const Pack = require_pack3();
  const Parse = require_parse8();
  const fs17 = require("fs");
  const fsm = require_fs_minipass();
  const t = require_list2();
  const path19 = require("path");
  const Header = require_header2();
  const r = module3.exports = (opt_, files, cb) => {
    const opt = hlo(opt_);
    if (!opt.file)
      throw new TypeError("file is required");
    if (opt.gzip)
      throw new TypeError("cannot append to compressed archives");
    if (!files || !Array.isArray(files) || !files.length)
      throw new TypeError("no files or directories specified");
    files = Array.from(files);
    return opt.sync ? replaceSync(opt, files) : replace(opt, files, cb);
  };
  const replaceSync = (opt, files) => {
    const p = new Pack.Sync(opt);
    let threw = true;
    let fd;
    let position;
    try {
      try {
        fd = fs17.openSync(opt.file, "r+");
      } catch (er) {
        if (er.code === "ENOENT")
          fd = fs17.openSync(opt.file, "w+");
        else
          throw er;
      }
      const st = fs17.fstatSync(fd);
      const headBuf = Buffer.alloc(512);
      POSITION:
        for (position = 0; position < st.size; position += 512) {
          for (let bufPos = 0, bytes = 0; bufPos < 512; bufPos += bytes) {
            bytes = fs17.readSync(fd, headBuf, bufPos, headBuf.length - bufPos, position + bufPos);
            if (position === 0 && headBuf[0] === 31 && headBuf[1] === 139)
              throw new Error("cannot append to compressed archives");
            if (!bytes)
              break POSITION;
          }
          let h = new Header(headBuf);
          if (!h.cksumValid)
            break;
          let entryBlockSize = 512 * Math.ceil(h.size / 512);
          if (position + entryBlockSize + 512 > st.size)
            break;
          position += entryBlockSize;
          if (opt.mtimeCache)
            opt.mtimeCache.set(h.path, h.mtime);
        }
      threw = false;
      streamSync(opt, p, position, fd, files);
    } finally {
      if (threw)
        try {
          fs17.closeSync(fd);
        } catch (er) {
        }
    }
  };
  const streamSync = (opt, p, position, fd, files) => {
    const stream = new fsm.WriteStreamSync(opt.file, {
      fd,
      start: position
    });
    p.pipe(stream);
    addFilesSync(p, files);
  };
  const replace = (opt, files, cb) => {
    files = Array.from(files);
    const p = new Pack(opt);
    const getPos = (fd, size, cb_) => {
      const cb2 = (er, pos) => {
        if (er)
          fs17.close(fd, (_2) => cb_(er));
        else
          cb_(null, pos);
      };
      let position = 0;
      if (size === 0)
        return cb2(null, 0);
      let bufPos = 0;
      const headBuf = Buffer.alloc(512);
      const onread = (er, bytes) => {
        if (er)
          return cb2(er);
        bufPos += bytes;
        if (bufPos < 512 && bytes)
          return fs17.read(fd, headBuf, bufPos, headBuf.length - bufPos, position + bufPos, onread);
        if (position === 0 && headBuf[0] === 31 && headBuf[1] === 139)
          return cb2(new Error("cannot append to compressed archives"));
        if (bufPos < 512)
          return cb2(null, position);
        const h = new Header(headBuf);
        if (!h.cksumValid)
          return cb2(null, position);
        const entryBlockSize = 512 * Math.ceil(h.size / 512);
        if (position + entryBlockSize + 512 > size)
          return cb2(null, position);
        position += entryBlockSize + 512;
        if (position >= size)
          return cb2(null, position);
        if (opt.mtimeCache)
          opt.mtimeCache.set(h.path, h.mtime);
        bufPos = 0;
        fs17.read(fd, headBuf, 0, 512, position, onread);
      };
      fs17.read(fd, headBuf, 0, 512, position, onread);
    };
    const promise = new Promise((resolve, reject) => {
      p.on("error", reject);
      let flag = "r+";
      const onopen = (er, fd) => {
        if (er && er.code === "ENOENT" && flag === "r+") {
          flag = "w+";
          return fs17.open(opt.file, flag, onopen);
        }
        if (er)
          return reject(er);
        fs17.fstat(fd, (er2, st) => {
          if (er2)
            return reject(er2);
          getPos(fd, st.size, (er3, position) => {
            if (er3)
              return reject(er3);
            const stream = new fsm.WriteStream(opt.file, {
              fd,
              start: position
            });
            p.pipe(stream);
            stream.on("error", reject);
            stream.on("close", resolve);
            addFilesAsync(p, files);
          });
        });
      };
      fs17.open(opt.file, flag, onopen);
    });
    return cb ? promise.then(cb, cb) : promise;
  };
  const addFilesSync = (p, files) => {
    files.forEach((file) => {
      if (file.charAt(0) === "@")
        t({
          file: path19.resolve(p.cwd, file.substr(1)),
          sync: true,
          noResume: true,
          onentry: (entry) => p.add(entry)
        });
      else
        p.add(file);
    });
    p.end();
  };
  const addFilesAsync = (p, files) => {
    while (files.length) {
      const file = files.shift();
      if (file.charAt(0) === "@")
        return t({
          file: path19.resolve(p.cwd, file.substr(1)),
          noResume: true,
          onentry: (entry) => p.add(entry)
        }).then((_2) => addFilesAsync(p, files));
      else
        p.add(file);
    }
    p.end();
  };
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/update.js
var require_update2 = __commonJS((exports2, module3) => {
  "use strict";
  const hlo = require_high_level_opt2();
  const r = require_replace2();
  const u = module3.exports = (opt_, files, cb) => {
    const opt = hlo(opt_);
    if (!opt.file)
      throw new TypeError("file is required");
    if (opt.gzip)
      throw new TypeError("cannot append to compressed archives");
    if (!files || !Array.isArray(files) || !files.length)
      throw new TypeError("no files or directories specified");
    files = Array.from(files);
    mtimeFilter(opt);
    return r(opt, files, cb);
  };
  const mtimeFilter = (opt) => {
    const filter = opt.filter;
    if (!opt.mtimeCache)
      opt.mtimeCache = new Map();
    opt.filter = filter ? (path19, stat) => filter(path19, stat) && !(opt.mtimeCache.get(path19) > stat.mtime) : (path19, stat) => !(opt.mtimeCache.get(path19) > stat.mtime);
  };
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/mkdir.js
var require_mkdir2 = __commonJS((exports2, module3) => {
  "use strict";
  const mkdirp = require_mkdirp();
  const fs17 = require("fs");
  const path19 = require("path");
  const chownr = require_chownr();
  class SymlinkError extends Error {
    constructor(symlink, path20) {
      super("Cannot extract through symbolic link");
      this.path = path20;
      this.symlink = symlink;
    }
    get name() {
      return "SylinkError";
    }
  }
  class CwdError extends Error {
    constructor(path20, code) {
      super(code + ": Cannot cd into '" + path20 + "'");
      this.path = path20;
      this.code = code;
    }
    get name() {
      return "CwdError";
    }
  }
  const mkdir = module3.exports = (dir, opt, cb) => {
    const umask = opt.umask;
    const mode = opt.mode | 448;
    const needChmod = (mode & umask) !== 0;
    const uid = opt.uid;
    const gid = opt.gid;
    const doChown = typeof uid === "number" && typeof gid === "number" && (uid !== opt.processUid || gid !== opt.processGid);
    const preserve = opt.preserve;
    const unlink = opt.unlink;
    const cache = opt.cache;
    const cwd = opt.cwd;
    const done = (er, created) => {
      if (er)
        cb(er);
      else {
        cache.set(dir, true);
        if (created && doChown)
          chownr(created, uid, gid, (er2) => done(er2));
        else if (needChmod)
          fs17.chmod(dir, mode, cb);
        else
          cb();
      }
    };
    if (cache && cache.get(dir) === true)
      return done();
    if (dir === cwd)
      return fs17.stat(dir, (er, st) => {
        if (er || !st.isDirectory())
          er = new CwdError(dir, er && er.code || "ENOTDIR");
        done(er);
      });
    if (preserve)
      return mkdirp(dir, {mode}).then((made) => done(null, made), done);
    const sub = path19.relative(cwd, dir);
    const parts = sub.split(/\/|\\/);
    mkdir_(cwd, parts, mode, cache, unlink, cwd, null, done);
  };
  const mkdir_ = (base, parts, mode, cache, unlink, cwd, created, cb) => {
    if (!parts.length)
      return cb(null, created);
    const p = parts.shift();
    const part = base + "/" + p;
    if (cache.get(part))
      return mkdir_(part, parts, mode, cache, unlink, cwd, created, cb);
    fs17.mkdir(part, mode, onmkdir(part, parts, mode, cache, unlink, cwd, created, cb));
  };
  const onmkdir = (part, parts, mode, cache, unlink, cwd, created, cb) => (er) => {
    if (er) {
      if (er.path && path19.dirname(er.path) === cwd && (er.code === "ENOTDIR" || er.code === "ENOENT"))
        return cb(new CwdError(cwd, er.code));
      fs17.lstat(part, (statEr, st) => {
        if (statEr)
          cb(statEr);
        else if (st.isDirectory())
          mkdir_(part, parts, mode, cache, unlink, cwd, created, cb);
        else if (unlink)
          fs17.unlink(part, (er2) => {
            if (er2)
              return cb(er2);
            fs17.mkdir(part, mode, onmkdir(part, parts, mode, cache, unlink, cwd, created, cb));
          });
        else if (st.isSymbolicLink())
          return cb(new SymlinkError(part, part + "/" + parts.join("/")));
        else
          cb(er);
      });
    } else {
      created = created || part;
      mkdir_(part, parts, mode, cache, unlink, cwd, created, cb);
    }
  };
  const mkdirSync = module3.exports.sync = (dir, opt) => {
    const umask = opt.umask;
    const mode = opt.mode | 448;
    const needChmod = (mode & umask) !== 0;
    const uid = opt.uid;
    const gid = opt.gid;
    const doChown = typeof uid === "number" && typeof gid === "number" && (uid !== opt.processUid || gid !== opt.processGid);
    const preserve = opt.preserve;
    const unlink = opt.unlink;
    const cache = opt.cache;
    const cwd = opt.cwd;
    const done = (created2) => {
      cache.set(dir, true);
      if (created2 && doChown)
        chownr.sync(created2, uid, gid);
      if (needChmod)
        fs17.chmodSync(dir, mode);
    };
    if (cache && cache.get(dir) === true)
      return done();
    if (dir === cwd) {
      let ok = false;
      let code = "ENOTDIR";
      try {
        ok = fs17.statSync(dir).isDirectory();
      } catch (er) {
        code = er.code;
      } finally {
        if (!ok)
          throw new CwdError(dir, code);
      }
      done();
      return;
    }
    if (preserve)
      return done(mkdirp.sync(dir, mode));
    const sub = path19.relative(cwd, dir);
    const parts = sub.split(/\/|\\/);
    let created = null;
    for (let p = parts.shift(), part = cwd; p && (part += "/" + p); p = parts.shift()) {
      if (cache.get(part))
        continue;
      try {
        fs17.mkdirSync(part, mode);
        created = created || part;
        cache.set(part, true);
      } catch (er) {
        if (er.path && path19.dirname(er.path) === cwd && (er.code === "ENOTDIR" || er.code === "ENOENT"))
          return new CwdError(cwd, er.code);
        const st = fs17.lstatSync(part);
        if (st.isDirectory()) {
          cache.set(part, true);
          continue;
        } else if (unlink) {
          fs17.unlinkSync(part);
          fs17.mkdirSync(part, mode);
          created = created || part;
          cache.set(part, true);
          continue;
        } else if (st.isSymbolicLink())
          return new SymlinkError(part, part + "/" + parts.join("/"));
      }
    }
    return done(created);
  };
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/path-reservations.js
var require_path_reservations2 = __commonJS((exports2, module3) => {
  const assert = require("assert");
  module3.exports = () => {
    const queues = new Map();
    const reservations = new Map();
    const {join} = require("path");
    const getDirs = (path19) => join(path19).split(/[\\\/]/).slice(0, -1).reduce((set, path20) => set.length ? set.concat(join(set[set.length - 1], path20)) : [path20], []);
    const running = new Set();
    const getQueues = (fn) => {
      const res = reservations.get(fn);
      if (!res)
        throw new Error("function does not have any path reservations");
      return {
        paths: res.paths.map((path19) => queues.get(path19)),
        dirs: [...res.dirs].map((path19) => queues.get(path19))
      };
    };
    const check2 = (fn) => {
      const {paths, dirs} = getQueues(fn);
      return paths.every((q) => q[0] === fn) && dirs.every((q) => q[0] instanceof Set && q[0].has(fn));
    };
    const run = (fn) => {
      if (running.has(fn) || !check2(fn))
        return false;
      running.add(fn);
      fn(() => clear(fn));
      return true;
    };
    const clear = (fn) => {
      if (!running.has(fn))
        return false;
      const {paths, dirs} = reservations.get(fn);
      const next = new Set();
      paths.forEach((path19) => {
        const q = queues.get(path19);
        assert.equal(q[0], fn);
        if (q.length === 1)
          queues.delete(path19);
        else {
          q.shift();
          if (typeof q[0] === "function")
            next.add(q[0]);
          else
            q[0].forEach((fn2) => next.add(fn2));
        }
      });
      dirs.forEach((dir) => {
        const q = queues.get(dir);
        assert(q[0] instanceof Set);
        if (q[0].size === 1 && q.length === 1) {
          queues.delete(dir);
        } else if (q[0].size === 1) {
          q.shift();
          next.add(q[0]);
        } else
          q[0].delete(fn);
      });
      running.delete(fn);
      next.forEach((fn2) => run(fn2));
      return true;
    };
    const reserve = (paths, fn) => {
      const dirs = new Set(paths.map((path19) => getDirs(path19)).reduce((a, b) => a.concat(b)));
      reservations.set(fn, {dirs, paths});
      paths.forEach((path19) => {
        const q = queues.get(path19);
        if (!q)
          queues.set(path19, [fn]);
        else
          q.push(fn);
      });
      dirs.forEach((dir) => {
        const q = queues.get(dir);
        if (!q)
          queues.set(dir, [new Set([fn])]);
        else if (q[q.length - 1] instanceof Set)
          q[q.length - 1].add(fn);
        else
          q.push(new Set([fn]));
      });
      return run(fn);
    };
    return {check: check2, reserve};
  };
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/get-write-flag.js
var require_get_write_flag2 = __commonJS((exports2, module3) => {
  const platform = process.env.__FAKE_PLATFORM__ || process.platform;
  const isWindows = platform === "win32";
  const fs17 = global.__FAKE_TESTING_FS__ || require("fs");
  const {O_CREAT, O_TRUNC, O_WRONLY, UV_FS_O_FILEMAP = 0} = fs17.constants;
  const fMapEnabled = isWindows && !!UV_FS_O_FILEMAP;
  const fMapLimit = 512 * 1024;
  const fMapFlag = UV_FS_O_FILEMAP | O_TRUNC | O_CREAT | O_WRONLY;
  module3.exports = !fMapEnabled ? () => "w" : (size) => size < fMapLimit ? fMapFlag : "w";
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/unpack.js
var require_unpack2 = __commonJS((exports2, module3) => {
  "use strict";
  const assert = require("assert");
  const EE = require("events").EventEmitter;
  const Parser = require_parse8();
  const fs17 = require("fs");
  const fsm = require_fs_minipass();
  const path19 = require("path");
  const mkdir = require_mkdir2();
  const mkdirSync = mkdir.sync;
  const wc = require_winchars2();
  const pathReservations = require_path_reservations2();
  const ONENTRY = Symbol("onEntry");
  const CHECKFS = Symbol("checkFs");
  const CHECKFS2 = Symbol("checkFs2");
  const ISREUSABLE = Symbol("isReusable");
  const MAKEFS = Symbol("makeFs");
  const FILE = Symbol("file");
  const DIRECTORY = Symbol("directory");
  const LINK = Symbol("link");
  const SYMLINK = Symbol("symlink");
  const HARDLINK = Symbol("hardlink");
  const UNSUPPORTED = Symbol("unsupported");
  const UNKNOWN = Symbol("unknown");
  const CHECKPATH = Symbol("checkPath");
  const MKDIR = Symbol("mkdir");
  const ONERROR = Symbol("onError");
  const PENDING = Symbol("pending");
  const PEND = Symbol("pend");
  const UNPEND = Symbol("unpend");
  const ENDED = Symbol("ended");
  const MAYBECLOSE = Symbol("maybeClose");
  const SKIP = Symbol("skip");
  const DOCHOWN = Symbol("doChown");
  const UID = Symbol("uid");
  const GID = Symbol("gid");
  const crypto = require("crypto");
  const getFlag = require_get_write_flag2();
  const neverCalled = () => {
    throw new Error("sync function called cb somehow?!?");
  };
  const unlinkFile = (path20, cb) => {
    if (process.platform !== "win32")
      return fs17.unlink(path20, cb);
    const name = path20 + ".DELETE." + crypto.randomBytes(16).toString("hex");
    fs17.rename(path20, name, (er) => {
      if (er)
        return cb(er);
      fs17.unlink(name, cb);
    });
  };
  const unlinkFileSync = (path20) => {
    if (process.platform !== "win32")
      return fs17.unlinkSync(path20);
    const name = path20 + ".DELETE." + crypto.randomBytes(16).toString("hex");
    fs17.renameSync(path20, name);
    fs17.unlinkSync(name);
  };
  const uint32 = (a, b, c) => a === a >>> 0 ? a : b === b >>> 0 ? b : c;
  class Unpack extends Parser {
    constructor(opt) {
      if (!opt)
        opt = {};
      opt.ondone = (_2) => {
        this[ENDED] = true;
        this[MAYBECLOSE]();
      };
      super(opt);
      this.reservations = pathReservations();
      this.transform = typeof opt.transform === "function" ? opt.transform : null;
      this.writable = true;
      this.readable = false;
      this[PENDING] = 0;
      this[ENDED] = false;
      this.dirCache = opt.dirCache || new Map();
      if (typeof opt.uid === "number" || typeof opt.gid === "number") {
        if (typeof opt.uid !== "number" || typeof opt.gid !== "number")
          throw new TypeError("cannot set owner without number uid and gid");
        if (opt.preserveOwner)
          throw new TypeError("cannot preserve owner in archive and also set owner explicitly");
        this.uid = opt.uid;
        this.gid = opt.gid;
        this.setOwner = true;
      } else {
        this.uid = null;
        this.gid = null;
        this.setOwner = false;
      }
      if (opt.preserveOwner === void 0 && typeof opt.uid !== "number")
        this.preserveOwner = process.getuid && process.getuid() === 0;
      else
        this.preserveOwner = !!opt.preserveOwner;
      this.processUid = (this.preserveOwner || this.setOwner) && process.getuid ? process.getuid() : null;
      this.processGid = (this.preserveOwner || this.setOwner) && process.getgid ? process.getgid() : null;
      this.forceChown = opt.forceChown === true;
      this.win32 = !!opt.win32 || process.platform === "win32";
      this.newer = !!opt.newer;
      this.keep = !!opt.keep;
      this.noMtime = !!opt.noMtime;
      this.preservePaths = !!opt.preservePaths;
      this.unlink = !!opt.unlink;
      this.cwd = path19.resolve(opt.cwd || process.cwd());
      this.strip = +opt.strip || 0;
      this.processUmask = process.umask();
      this.umask = typeof opt.umask === "number" ? opt.umask : this.processUmask;
      this.dmode = opt.dmode || 511 & ~this.umask;
      this.fmode = opt.fmode || 438 & ~this.umask;
      this.on("entry", (entry) => this[ONENTRY](entry));
    }
    warn(code, msg, data = {}) {
      if (code === "TAR_BAD_ARCHIVE" || code === "TAR_ABORT")
        data.recoverable = false;
      return super.warn(code, msg, data);
    }
    [MAYBECLOSE]() {
      if (this[ENDED] && this[PENDING] === 0) {
        this.emit("prefinish");
        this.emit("finish");
        this.emit("end");
        this.emit("close");
      }
    }
    [CHECKPATH](entry) {
      if (this.strip) {
        const parts = entry.path.split(/\/|\\/);
        if (parts.length < this.strip)
          return false;
        entry.path = parts.slice(this.strip).join("/");
        if (entry.type === "Link") {
          const linkparts = entry.linkpath.split(/\/|\\/);
          if (linkparts.length >= this.strip)
            entry.linkpath = linkparts.slice(this.strip).join("/");
        }
      }
      if (!this.preservePaths) {
        const p = entry.path;
        if (p.match(/(^|\/|\\)\.\.(\\|\/|$)/)) {
          this.warn("TAR_ENTRY_ERROR", `path contains '..'`, {
            entry,
            path: p
          });
          return false;
        }
        if (path19.win32.isAbsolute(p)) {
          const parsed = path19.win32.parse(p);
          entry.path = p.substr(parsed.root.length);
          const r = parsed.root;
          this.warn("TAR_ENTRY_INFO", `stripping ${r} from absolute path`, {
            entry,
            path: p
          });
        }
      }
      if (this.win32) {
        const parsed = path19.win32.parse(entry.path);
        entry.path = parsed.root === "" ? wc.encode(entry.path) : parsed.root + wc.encode(entry.path.substr(parsed.root.length));
      }
      if (path19.isAbsolute(entry.path))
        entry.absolute = entry.path;
      else
        entry.absolute = path19.resolve(this.cwd, entry.path);
      return true;
    }
    [ONENTRY](entry) {
      if (!this[CHECKPATH](entry))
        return entry.resume();
      assert.equal(typeof entry.absolute, "string");
      switch (entry.type) {
        case "Directory":
        case "GNUDumpDir":
          if (entry.mode)
            entry.mode = entry.mode | 448;
        case "File":
        case "OldFile":
        case "ContiguousFile":
        case "Link":
        case "SymbolicLink":
          return this[CHECKFS](entry);
        case "CharacterDevice":
        case "BlockDevice":
        case "FIFO":
          return this[UNSUPPORTED](entry);
      }
    }
    [ONERROR](er, entry) {
      if (er.name === "CwdError")
        this.emit("error", er);
      else {
        this.warn("TAR_ENTRY_ERROR", er, {entry});
        this[UNPEND]();
        entry.resume();
      }
    }
    [MKDIR](dir, mode, cb) {
      mkdir(dir, {
        uid: this.uid,
        gid: this.gid,
        processUid: this.processUid,
        processGid: this.processGid,
        umask: this.processUmask,
        preserve: this.preservePaths,
        unlink: this.unlink,
        cache: this.dirCache,
        cwd: this.cwd,
        mode
      }, cb);
    }
    [DOCHOWN](entry) {
      return this.forceChown || this.preserveOwner && (typeof entry.uid === "number" && entry.uid !== this.processUid || typeof entry.gid === "number" && entry.gid !== this.processGid) || (typeof this.uid === "number" && this.uid !== this.processUid || typeof this.gid === "number" && this.gid !== this.processGid);
    }
    [UID](entry) {
      return uint32(this.uid, entry.uid, this.processUid);
    }
    [GID](entry) {
      return uint32(this.gid, entry.gid, this.processGid);
    }
    [FILE](entry, fullyDone) {
      const mode = entry.mode & 4095 || this.fmode;
      const stream = new fsm.WriteStream(entry.absolute, {
        flags: getFlag(entry.size),
        mode,
        autoClose: false
      });
      stream.on("error", (er) => this[ONERROR](er, entry));
      let actions = 1;
      const done = (er) => {
        if (er)
          return this[ONERROR](er, entry);
        if (--actions === 0) {
          fs17.close(stream.fd, (er2) => {
            fullyDone();
            er2 ? this[ONERROR](er2, entry) : this[UNPEND]();
          });
        }
      };
      stream.on("finish", (_2) => {
        const abs = entry.absolute;
        const fd = stream.fd;
        if (entry.mtime && !this.noMtime) {
          actions++;
          const atime = entry.atime || new Date();
          const mtime = entry.mtime;
          fs17.futimes(fd, atime, mtime, (er) => er ? fs17.utimes(abs, atime, mtime, (er2) => done(er2 && er)) : done());
        }
        if (this[DOCHOWN](entry)) {
          actions++;
          const uid = this[UID](entry);
          const gid = this[GID](entry);
          fs17.fchown(fd, uid, gid, (er) => er ? fs17.chown(abs, uid, gid, (er2) => done(er2 && er)) : done());
        }
        done();
      });
      const tx = this.transform ? this.transform(entry) || entry : entry;
      if (tx !== entry) {
        tx.on("error", (er) => this[ONERROR](er, entry));
        entry.pipe(tx);
      }
      tx.pipe(stream);
    }
    [DIRECTORY](entry, fullyDone) {
      const mode = entry.mode & 4095 || this.dmode;
      this[MKDIR](entry.absolute, mode, (er) => {
        if (er) {
          fullyDone();
          return this[ONERROR](er, entry);
        }
        let actions = 1;
        const done = (_2) => {
          if (--actions === 0) {
            fullyDone();
            this[UNPEND]();
            entry.resume();
          }
        };
        if (entry.mtime && !this.noMtime) {
          actions++;
          fs17.utimes(entry.absolute, entry.atime || new Date(), entry.mtime, done);
        }
        if (this[DOCHOWN](entry)) {
          actions++;
          fs17.chown(entry.absolute, this[UID](entry), this[GID](entry), done);
        }
        done();
      });
    }
    [UNSUPPORTED](entry) {
      entry.unsupported = true;
      this.warn("TAR_ENTRY_UNSUPPORTED", `unsupported entry type: ${entry.type}`, {entry});
      entry.resume();
    }
    [SYMLINK](entry, done) {
      this[LINK](entry, entry.linkpath, "symlink", done);
    }
    [HARDLINK](entry, done) {
      this[LINK](entry, path19.resolve(this.cwd, entry.linkpath), "link", done);
    }
    [PEND]() {
      this[PENDING]++;
    }
    [UNPEND]() {
      this[PENDING]--;
      this[MAYBECLOSE]();
    }
    [SKIP](entry) {
      this[UNPEND]();
      entry.resume();
    }
    [ISREUSABLE](entry, st) {
      return entry.type === "File" && !this.unlink && st.isFile() && st.nlink <= 1 && process.platform !== "win32";
    }
    [CHECKFS](entry) {
      this[PEND]();
      const paths = [entry.path];
      if (entry.linkpath)
        paths.push(entry.linkpath);
      this.reservations.reserve(paths, (done) => this[CHECKFS2](entry, done));
    }
    [CHECKFS2](entry, done) {
      this[MKDIR](path19.dirname(entry.absolute), this.dmode, (er) => {
        if (er) {
          done();
          return this[ONERROR](er, entry);
        }
        fs17.lstat(entry.absolute, (er2, st) => {
          if (st && (this.keep || this.newer && st.mtime > entry.mtime)) {
            this[SKIP](entry);
            done();
          } else if (er2 || this[ISREUSABLE](entry, st)) {
            this[MAKEFS](null, entry, done);
          } else if (st.isDirectory()) {
            if (entry.type === "Directory") {
              if (!entry.mode || (st.mode & 4095) === entry.mode)
                this[MAKEFS](null, entry, done);
              else
                fs17.chmod(entry.absolute, entry.mode, (er3) => this[MAKEFS](er3, entry, done));
            } else
              fs17.rmdir(entry.absolute, (er3) => this[MAKEFS](er3, entry, done));
          } else
            unlinkFile(entry.absolute, (er3) => this[MAKEFS](er3, entry, done));
        });
      });
    }
    [MAKEFS](er, entry, done) {
      if (er)
        return this[ONERROR](er, entry);
      switch (entry.type) {
        case "File":
        case "OldFile":
        case "ContiguousFile":
          return this[FILE](entry, done);
        case "Link":
          return this[HARDLINK](entry, done);
        case "SymbolicLink":
          return this[SYMLINK](entry, done);
        case "Directory":
        case "GNUDumpDir":
          return this[DIRECTORY](entry, done);
      }
    }
    [LINK](entry, linkpath, link5, done) {
      fs17[link5](linkpath, entry.absolute, (er) => {
        if (er)
          return this[ONERROR](er, entry);
        done();
        this[UNPEND]();
        entry.resume();
      });
    }
  }
  class UnpackSync extends Unpack {
    constructor(opt) {
      super(opt);
    }
    [CHECKFS](entry) {
      const er = this[MKDIR](path19.dirname(entry.absolute), this.dmode, neverCalled);
      if (er)
        return this[ONERROR](er, entry);
      try {
        const st = fs17.lstatSync(entry.absolute);
        if (this.keep || this.newer && st.mtime > entry.mtime)
          return this[SKIP](entry);
        else if (this[ISREUSABLE](entry, st))
          return this[MAKEFS](null, entry, neverCalled);
        else {
          try {
            if (st.isDirectory()) {
              if (entry.type === "Directory") {
                if (entry.mode && (st.mode & 4095) !== entry.mode)
                  fs17.chmodSync(entry.absolute, entry.mode);
              } else
                fs17.rmdirSync(entry.absolute);
            } else
              unlinkFileSync(entry.absolute);
            return this[MAKEFS](null, entry, neverCalled);
          } catch (er2) {
            return this[ONERROR](er2, entry);
          }
        }
      } catch (er2) {
        return this[MAKEFS](null, entry, neverCalled);
      }
    }
    [FILE](entry, _2) {
      const mode = entry.mode & 4095 || this.fmode;
      const oner = (er) => {
        let closeError;
        try {
          fs17.closeSync(fd);
        } catch (e) {
          closeError = e;
        }
        if (er || closeError)
          this[ONERROR](er || closeError, entry);
      };
      let stream;
      let fd;
      try {
        fd = fs17.openSync(entry.absolute, getFlag(entry.size), mode);
      } catch (er) {
        return oner(er);
      }
      const tx = this.transform ? this.transform(entry) || entry : entry;
      if (tx !== entry) {
        tx.on("error", (er) => this[ONERROR](er, entry));
        entry.pipe(tx);
      }
      tx.on("data", (chunk) => {
        try {
          fs17.writeSync(fd, chunk, 0, chunk.length);
        } catch (er) {
          oner(er);
        }
      });
      tx.on("end", (_3) => {
        let er = null;
        if (entry.mtime && !this.noMtime) {
          const atime = entry.atime || new Date();
          const mtime = entry.mtime;
          try {
            fs17.futimesSync(fd, atime, mtime);
          } catch (futimeser) {
            try {
              fs17.utimesSync(entry.absolute, atime, mtime);
            } catch (utimeser) {
              er = futimeser;
            }
          }
        }
        if (this[DOCHOWN](entry)) {
          const uid = this[UID](entry);
          const gid = this[GID](entry);
          try {
            fs17.fchownSync(fd, uid, gid);
          } catch (fchowner) {
            try {
              fs17.chownSync(entry.absolute, uid, gid);
            } catch (chowner) {
              er = er || fchowner;
            }
          }
        }
        oner(er);
      });
    }
    [DIRECTORY](entry, _2) {
      const mode = entry.mode & 4095 || this.dmode;
      const er = this[MKDIR](entry.absolute, mode);
      if (er)
        return this[ONERROR](er, entry);
      if (entry.mtime && !this.noMtime) {
        try {
          fs17.utimesSync(entry.absolute, entry.atime || new Date(), entry.mtime);
        } catch (er2) {
        }
      }
      if (this[DOCHOWN](entry)) {
        try {
          fs17.chownSync(entry.absolute, this[UID](entry), this[GID](entry));
        } catch (er2) {
        }
      }
      entry.resume();
    }
    [MKDIR](dir, mode) {
      try {
        return mkdir.sync(dir, {
          uid: this.uid,
          gid: this.gid,
          processUid: this.processUid,
          processGid: this.processGid,
          umask: this.processUmask,
          preserve: this.preservePaths,
          unlink: this.unlink,
          cache: this.dirCache,
          cwd: this.cwd,
          mode
        });
      } catch (er) {
        return er;
      }
    }
    [LINK](entry, linkpath, link5, _2) {
      try {
        fs17[link5 + "Sync"](linkpath, entry.absolute);
        entry.resume();
      } catch (er) {
        return this[ONERROR](er, entry);
      }
    }
  }
  Unpack.Sync = UnpackSync;
  module3.exports = Unpack;
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/lib/extract.js
var require_extract3 = __commonJS((exports2, module3) => {
  "use strict";
  const hlo = require_high_level_opt2();
  const Unpack = require_unpack2();
  const fs17 = require("fs");
  const fsm = require_fs_minipass();
  const path19 = require("path");
  const x = module3.exports = (opt_, files, cb) => {
    if (typeof opt_ === "function")
      cb = opt_, files = null, opt_ = {};
    else if (Array.isArray(opt_))
      files = opt_, opt_ = {};
    if (typeof files === "function")
      cb = files, files = null;
    if (!files)
      files = [];
    else
      files = Array.from(files);
    const opt = hlo(opt_);
    if (opt.sync && typeof cb === "function")
      throw new TypeError("callback not supported for sync tar functions");
    if (!opt.file && typeof cb === "function")
      throw new TypeError("callback only supported with file option");
    if (files.length)
      filesFilter(opt, files);
    return opt.file && opt.sync ? extractFileSync(opt) : opt.file ? extractFile(opt, cb) : opt.sync ? extractSync(opt) : extract(opt);
  };
  const filesFilter = (opt, files) => {
    const map = new Map(files.map((f) => [f.replace(/\/+$/, ""), true]));
    const filter = opt.filter;
    const mapHas = (file, r) => {
      const root = r || path19.parse(file).root || ".";
      const ret = file === root ? false : map.has(file) ? map.get(file) : mapHas(path19.dirname(file), root);
      map.set(file, ret);
      return ret;
    };
    opt.filter = filter ? (file, entry) => filter(file, entry) && mapHas(file.replace(/\/+$/, "")) : (file) => mapHas(file.replace(/\/+$/, ""));
  };
  const extractFileSync = (opt) => {
    const u = new Unpack.Sync(opt);
    const file = opt.file;
    let threw = true;
    let fd;
    const stat = fs17.statSync(file);
    const readSize = opt.maxReadSize || 16 * 1024 * 1024;
    const stream = new fsm.ReadStreamSync(file, {
      readSize,
      size: stat.size
    });
    stream.pipe(u);
  };
  const extractFile = (opt, cb) => {
    const u = new Unpack(opt);
    const readSize = opt.maxReadSize || 16 * 1024 * 1024;
    const file = opt.file;
    const p = new Promise((resolve, reject) => {
      u.on("error", reject);
      u.on("close", resolve);
      fs17.stat(file, (er, stat) => {
        if (er)
          reject(er);
        else {
          const stream = new fsm.ReadStream(file, {
            readSize,
            size: stat.size
          });
          stream.on("error", reject);
          stream.pipe(u);
        }
      });
    });
    return cb ? p.then(cb, cb) : p;
  };
  const extractSync = (opt) => {
    return new Unpack.Sync(opt);
  };
  const extract = (opt) => {
    return new Unpack(opt);
  };
});

// ../../node_modules/.pnpm/tar@6.0.5/node_modules/tar/index.js
var require_tar3 = __commonJS((exports2) => {
  "use strict";
  exports2.c = exports2.create = require_create3();
  exports2.r = exports2.replace = require_replace2();
  exports2.t = exports2.list = require_list2();
  exports2.u = exports2.update = require_update2();
  exports2.x = exports2.extract = require_extract3();
  exports2.Pack = require_pack3();
  exports2.Unpack = require_unpack2();
  exports2.Parse = require_parse8();
  exports2.ReadEntry = require_read_entry2();
  exports2.WriteEntry = require_write_entry2();
  exports2.Header = require_header2();
  exports2.Pax = require_pax2();
  exports2.types = require_types6();
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/getPackedPackage.js
var require_getPackedPackage2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getPackedPackage = void 0;
  const execa_1 = __importDefault(require_execa2());
  const path_1 = __importDefault(require("path"));
  const tempy_1 = __importDefault(require_tempy());
  const fs_1 = __importDefault(require("fs"));
  const resolve_pkg_1 = __importDefault(require_resolve_pkg());
  const tar_1 = __importDefault(require_tar3());
  const copy_1 = __importDefault(require_copy2());
  const make_dir_1 = __importDefault(require_make_dir());
  const util_1 = require("util");
  const rimraf_1 = __importDefault(require_rimraf());
  const read_pkg_up_1 = __importDefault(require_read_pkg_up());
  const del = util_1.promisify(rimraf_1.default);
  async function getPackedPackage(name, target, packageDir) {
    packageDir = packageDir || resolve_pkg_1.default(name, {cwd: __dirname}) || resolve_pkg_1.default(name, {cwd: target});
    if (!packageDir) {
      const pkg2 = await read_pkg_up_1.default({
        cwd: target
      });
      if (pkg2 && pkg2.packageJson.name === name) {
        packageDir = path_1.default.dirname(pkg2.path);
      }
    }
    if (!packageDir && fs_1.default.existsSync(path_1.default.join(process.cwd(), "package.json"))) {
      packageDir = process.cwd();
    }
    if (!packageDir) {
      throw new Error(`Error in getPackage: Could not resolve package ${name} from ${__dirname}`);
    }
    const tmpDir = tempy_1.default.directory();
    const archivePath = path_1.default.join(tmpDir, `package.tgz`);
    await execa_1.default.command(`yarn pack -f ${archivePath}`, {
      shell: true,
      cwd: packageDir
    });
    await tar_1.default.extract({
      cwd: tmpDir,
      file: archivePath
    });
    await del(archivePath);
    if (target) {
      await make_dir_1.default(target);
      await copy_1.default({
        from: path_1.default.join(tmpDir, "package"),
        to: target,
        recursive: true,
        parallelJobs: 20,
        overwrite: true
      });
      await del(tmpDir);
    }
    return path_1.default.join(tmpDir, "package");
  }
  exports2.getPackedPackage = getPackedPackage;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/convertCredentials.js
var require_convertCredentials2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.databaseTypeToConnectorType = exports2.uriToCredentials = exports2.credentialsToUri = void 0;
  const url_parse_1 = __importDefault(require_url_parse());
  const path_1 = __importDefault(require("path"));
  function credentialsToUri(credentials) {
    const type = databaseTypeToProtocol(credentials.type);
    if (credentials.type === "mongo") {
      return credentials.uri;
    }
    const url = new url_parse_1.default(type + "//", true);
    if (credentials.host) {
      url.hostname = credentials.host;
    }
    if (credentials.type === "postgresql") {
      if (credentials.database) {
        url.pathname = "/" + credentials.database;
      }
      if (credentials.schema) {
        url.query.schema = credentials.schema;
      }
      if (credentials.socket) {
        url.query.host = credentials.socket;
      }
    } else if (credentials.type === "mysql") {
      url.pathname = "/" + (credentials.database || credentials.schema || "");
      if (credentials.socket) {
        url.query.socket = credentials.socket;
      }
    }
    if (credentials.ssl) {
      url.query.sslmode = "prefer";
    }
    if (credentials.user) {
      url.username = credentials.user;
    }
    if (credentials.password) {
      url.password = credentials.password;
    }
    if (credentials.port) {
      url.port = String(credentials.port);
    }
    url.host = `${url.hostname}${url.port ? `:${url.port}` : ""}`;
    if (credentials.extraFields) {
      for (const [key, value] of Object.entries(credentials.extraFields)) {
        url.query[key] = value;
      }
    }
    if (url.pathname === "/") {
      url.pathname = "";
    }
    if (credentials.type === "sqlite") {
      return credentials.uri;
    }
    return url.toString((q) => Object.entries(q).map(([key, value]) => `${key}=${value}`).join("&"));
  }
  exports2.credentialsToUri = credentialsToUri;
  function uriToCredentials3(connectionString) {
    const uri = new url_parse_1.default(connectionString, true);
    const type = protocolToDatabaseType(uri.protocol);
    const exists = (str) => str && str.length > 0;
    if (type === "mongo") {
      return {
        type,
        uri: connectionString
      };
    }
    const {schema, socket, host, ...extraFields} = uri.query;
    let database = void 0;
    if (type === "sqlite" && uri.pathname) {
      if (uri.pathname.startsWith("file:")) {
        database = uri.pathname.slice(5);
      }
      if (uri.pathname.startsWith("sqlite:")) {
        database = uri.pathname.slice(7);
      } else {
        database = path_1.default.basename(uri.pathname);
      }
    } else if (uri.pathname.length > 1) {
      database = uri.pathname.slice(1);
    }
    return {
      type,
      host: exists(uri.hostname) ? uri.hostname : void 0,
      user: exists(uri.username) ? uri.username : void 0,
      port: exists(uri.port) ? Number(uri.port) : void 0,
      password: exists(uri.password) ? uri.password : void 0,
      database,
      schema: uri.query.schema || void 0,
      uri: connectionString,
      ssl: Boolean(uri.query.sslmode),
      socket: uri.query.socket || uri.query.host,
      extraFields
    };
  }
  exports2.uriToCredentials = uriToCredentials3;
  function databaseTypeToProtocol(databaseType) {
    switch (databaseType) {
      case "postgresql":
        return "postgresql:";
      case "mysql":
        return "mysql:";
      case "mongo":
        return "mongodb:";
      case "sqlite":
        return "sqlite:";
      case "sqlserver":
        return "sqlserver:";
    }
  }
  function protocolToDatabaseType(protocol) {
    switch (protocol) {
      case "postgresql:":
      case "postgres:":
        return "postgresql";
      case "mongodb:":
        return "mongo";
      case "mysql:":
        return "mysql";
      case "file:":
      case "sqlite:":
        return "sqlite";
      case "sqlserver:":
      case "jdbc:sqlserver:":
        return "sqlserver";
    }
    throw new Error(`Unknown database type ${protocol}`);
  }
  function databaseTypeToConnectorType2(databaseType) {
    switch (databaseType) {
      case "postgresql":
        return "postgresql";
      case "mysql":
        return "mysql";
      case "sqlite":
        return "sqlite";
      case "sqlserver":
        return "sqlserver";
    }
    throw new Error(`Mongo is not yet supported`);
  }
  exports2.databaseTypeToConnectorType = databaseTypeToConnectorType2;
});

// ../../node_modules/.pnpm/async@3.2.0/node_modules/async/dist/async.js
var require_async9 = __commonJS((exports2, module3) => {
  (function(global2, factory) {
    typeof exports2 === "object" && typeof module3 !== "undefined" ? factory(exports2) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.async = {});
  })(exports2, function(exports3) {
    "use strict";
    function apply(fn, ...args2) {
      return (...callArgs) => fn(...args2, ...callArgs);
    }
    function initialParams(fn) {
      return function(...args2) {
        var callback = args2.pop();
        return fn.call(this, args2, callback);
      };
    }
    var hasSetImmediate = typeof setImmediate === "function" && setImmediate;
    var hasNextTick = typeof process === "object" && typeof process.nextTick === "function";
    function fallback(fn) {
      setTimeout(fn, 0);
    }
    function wrap(defer) {
      return (fn, ...args2) => defer(() => fn(...args2));
    }
    var _defer;
    if (hasSetImmediate) {
      _defer = setImmediate;
    } else if (hasNextTick) {
      _defer = process.nextTick;
    } else {
      _defer = fallback;
    }
    var setImmediate$1 = wrap(_defer);
    function asyncify(func) {
      if (isAsync(func)) {
        return function(...args2) {
          const callback = args2.pop();
          const promise = func.apply(this, args2);
          return handlePromise(promise, callback);
        };
      }
      return initialParams(function(args2, callback) {
        var result;
        try {
          result = func.apply(this, args2);
        } catch (e) {
          return callback(e);
        }
        if (result && typeof result.then === "function") {
          return handlePromise(result, callback);
        } else {
          callback(null, result);
        }
      });
    }
    function handlePromise(promise, callback) {
      return promise.then((value) => {
        invokeCallback(callback, null, value);
      }, (err) => {
        invokeCallback(callback, err && err.message ? err : new Error(err));
      });
    }
    function invokeCallback(callback, error, value) {
      try {
        callback(error, value);
      } catch (err) {
        setImmediate$1((e) => {
          throw e;
        }, err);
      }
    }
    function isAsync(fn) {
      return fn[Symbol.toStringTag] === "AsyncFunction";
    }
    function isAsyncGenerator(fn) {
      return fn[Symbol.toStringTag] === "AsyncGenerator";
    }
    function isAsyncIterable(obj) {
      return typeof obj[Symbol.asyncIterator] === "function";
    }
    function wrapAsync(asyncFn) {
      if (typeof asyncFn !== "function")
        throw new Error("expected a function");
      return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;
    }
    function awaitify(asyncFn, arity = asyncFn.length) {
      if (!arity)
        throw new Error("arity is undefined");
      function awaitable(...args2) {
        if (typeof args2[arity - 1] === "function") {
          return asyncFn.apply(this, args2);
        }
        return new Promise((resolve, reject2) => {
          args2[arity - 1] = (err, ...cbArgs) => {
            if (err)
              return reject2(err);
            resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
          };
          asyncFn.apply(this, args2);
        });
      }
      return awaitable;
    }
    function applyEach(eachfn) {
      return function applyEach2(fns, ...callArgs) {
        const go = awaitify(function(callback) {
          var that = this;
          return eachfn(fns, (fn, cb) => {
            wrapAsync(fn).apply(that, callArgs.concat(cb));
          }, callback);
        });
        return go;
      };
    }
    function _asyncMap(eachfn, arr, iteratee, callback) {
      arr = arr || [];
      var results = [];
      var counter = 0;
      var _iteratee = wrapAsync(iteratee);
      return eachfn(arr, (value, _2, iterCb) => {
        var index2 = counter++;
        _iteratee(value, (err, v) => {
          results[index2] = v;
          iterCb(err);
        });
      }, (err) => {
        callback(err, results);
      });
    }
    function isArrayLike(value) {
      return value && typeof value.length === "number" && value.length >= 0 && value.length % 1 === 0;
    }
    const breakLoop = {};
    function once(fn) {
      function wrapper(...args2) {
        if (fn === null)
          return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, args2);
      }
      Object.assign(wrapper, fn);
      return wrapper;
    }
    function getIterator(coll) {
      return coll[Symbol.iterator] && coll[Symbol.iterator]();
    }
    function createArrayIterator(coll) {
      var i = -1;
      var len = coll.length;
      return function next() {
        return ++i < len ? {value: coll[i], key: i} : null;
      };
    }
    function createES2015Iterator(iterator) {
      var i = -1;
      return function next() {
        var item = iterator.next();
        if (item.done)
          return null;
        i++;
        return {value: item.value, key: i};
      };
    }
    function createObjectIterator(obj) {
      var okeys = obj ? Object.keys(obj) : [];
      var i = -1;
      var len = okeys.length;
      return function next() {
        var key = okeys[++i];
        return i < len ? {value: obj[key], key} : null;
      };
    }
    function createIterator(coll) {
      if (isArrayLike(coll)) {
        return createArrayIterator(coll);
      }
      var iterator = getIterator(coll);
      return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
    }
    function onlyOnce(fn) {
      return function(...args2) {
        if (fn === null)
          throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, args2);
      };
    }
    function asyncEachOfLimit(generator, limit, iteratee, callback) {
      let done = false;
      let canceled = false;
      let awaiting = false;
      let running = 0;
      let idx = 0;
      function replenish() {
        if (running >= limit || awaiting || done)
          return;
        awaiting = true;
        generator.next().then(({value, done: iterDone}) => {
          if (canceled || done)
            return;
          awaiting = false;
          if (iterDone) {
            done = true;
            if (running <= 0) {
              callback(null);
            }
            return;
          }
          running++;
          iteratee(value, idx, iterateeCallback);
          idx++;
          replenish();
        }).catch(handleError);
      }
      function iterateeCallback(err, result) {
        running -= 1;
        if (canceled)
          return;
        if (err)
          return handleError(err);
        if (err === false) {
          done = true;
          canceled = true;
          return;
        }
        if (result === breakLoop || done && running <= 0) {
          done = true;
          return callback(null);
        }
        replenish();
      }
      function handleError(err) {
        if (canceled)
          return;
        awaiting = false;
        done = true;
        callback(err);
      }
      replenish();
    }
    var eachOfLimit = (limit) => {
      return (obj, iteratee, callback) => {
        callback = once(callback);
        if (limit <= 0) {
          throw new RangeError("concurrency limit cannot be less than 1");
        }
        if (!obj) {
          return callback(null);
        }
        if (isAsyncGenerator(obj)) {
          return asyncEachOfLimit(obj, limit, iteratee, callback);
        }
        if (isAsyncIterable(obj)) {
          return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback);
        }
        var nextElem = createIterator(obj);
        var done = false;
        var canceled = false;
        var running = 0;
        var looping = false;
        function iterateeCallback(err, value) {
          if (canceled)
            return;
          running -= 1;
          if (err) {
            done = true;
            callback(err);
          } else if (err === false) {
            done = true;
            canceled = true;
          } else if (value === breakLoop || done && running <= 0) {
            done = true;
            return callback(null);
          } else if (!looping) {
            replenish();
          }
        }
        function replenish() {
          looping = true;
          while (running < limit && !done) {
            var elem = nextElem();
            if (elem === null) {
              done = true;
              if (running <= 0) {
                callback(null);
              }
              return;
            }
            running += 1;
            iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
          }
          looping = false;
        }
        replenish();
      };
    };
    function eachOfLimit$1(coll, limit, iteratee, callback) {
      return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);
    }
    var eachOfLimit$2 = awaitify(eachOfLimit$1, 4);
    function eachOfArrayLike(coll, iteratee, callback) {
      callback = once(callback);
      var index2 = 0, completed = 0, {length} = coll, canceled = false;
      if (length === 0) {
        callback(null);
      }
      function iteratorCallback(err, value) {
        if (err === false) {
          canceled = true;
        }
        if (canceled === true)
          return;
        if (err) {
          callback(err);
        } else if (++completed === length || value === breakLoop) {
          callback(null);
        }
      }
      for (; index2 < length; index2++) {
        iteratee(coll[index2], index2, onlyOnce(iteratorCallback));
      }
    }
    function eachOfGeneric(coll, iteratee, callback) {
      return eachOfLimit$2(coll, Infinity, iteratee, callback);
    }
    function eachOf(coll, iteratee, callback) {
      var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
      return eachOfImplementation(coll, wrapAsync(iteratee), callback);
    }
    var eachOf$1 = awaitify(eachOf, 3);
    function map(coll, iteratee, callback) {
      return _asyncMap(eachOf$1, coll, iteratee, callback);
    }
    var map$1 = awaitify(map, 3);
    var applyEach$1 = applyEach(map$1);
    function eachOfSeries(coll, iteratee, callback) {
      return eachOfLimit$2(coll, 1, iteratee, callback);
    }
    var eachOfSeries$1 = awaitify(eachOfSeries, 3);
    function mapSeries(coll, iteratee, callback) {
      return _asyncMap(eachOfSeries$1, coll, iteratee, callback);
    }
    var mapSeries$1 = awaitify(mapSeries, 3);
    var applyEachSeries = applyEach(mapSeries$1);
    const PROMISE_SYMBOL = Symbol("promiseCallback");
    function promiseCallback() {
      let resolve, reject2;
      function callback(err, ...args2) {
        if (err)
          return reject2(err);
        resolve(args2.length > 1 ? args2 : args2[0]);
      }
      callback[PROMISE_SYMBOL] = new Promise((res, rej) => {
        resolve = res, reject2 = rej;
      });
      return callback;
    }
    function auto(tasks, concurrency, callback) {
      if (typeof concurrency !== "number") {
        callback = concurrency;
        concurrency = null;
      }
      callback = once(callback || promiseCallback());
      var numTasks = Object.keys(tasks).length;
      if (!numTasks) {
        return callback(null);
      }
      if (!concurrency) {
        concurrency = numTasks;
      }
      var results = {};
      var runningTasks = 0;
      var canceled = false;
      var hasError = false;
      var listeners = Object.create(null);
      var readyTasks = [];
      var readyToCheck = [];
      var uncheckedDependencies = {};
      Object.keys(tasks).forEach((key) => {
        var task = tasks[key];
        if (!Array.isArray(task)) {
          enqueueTask(key, [task]);
          readyToCheck.push(key);
          return;
        }
        var dependencies = task.slice(0, task.length - 1);
        var remainingDependencies = dependencies.length;
        if (remainingDependencies === 0) {
          enqueueTask(key, task);
          readyToCheck.push(key);
          return;
        }
        uncheckedDependencies[key] = remainingDependencies;
        dependencies.forEach((dependencyName) => {
          if (!tasks[dependencyName]) {
            throw new Error("async.auto task `" + key + "` has a non-existent dependency `" + dependencyName + "` in " + dependencies.join(", "));
          }
          addListener(dependencyName, () => {
            remainingDependencies--;
            if (remainingDependencies === 0) {
              enqueueTask(key, task);
            }
          });
        });
      });
      checkForDeadlocks();
      processQueue();
      function enqueueTask(key, task) {
        readyTasks.push(() => runTask(key, task));
      }
      function processQueue() {
        if (canceled)
          return;
        if (readyTasks.length === 0 && runningTasks === 0) {
          return callback(null, results);
        }
        while (readyTasks.length && runningTasks < concurrency) {
          var run = readyTasks.shift();
          run();
        }
      }
      function addListener(taskName, fn) {
        var taskListeners = listeners[taskName];
        if (!taskListeners) {
          taskListeners = listeners[taskName] = [];
        }
        taskListeners.push(fn);
      }
      function taskComplete(taskName) {
        var taskListeners = listeners[taskName] || [];
        taskListeners.forEach((fn) => fn());
        processQueue();
      }
      function runTask(key, task) {
        if (hasError)
          return;
        var taskCallback = onlyOnce((err, ...result) => {
          runningTasks--;
          if (err === false) {
            canceled = true;
            return;
          }
          if (result.length < 2) {
            [result] = result;
          }
          if (err) {
            var safeResults = {};
            Object.keys(results).forEach((rkey) => {
              safeResults[rkey] = results[rkey];
            });
            safeResults[key] = result;
            hasError = true;
            listeners = Object.create(null);
            if (canceled)
              return;
            callback(err, safeResults);
          } else {
            results[key] = result;
            taskComplete(key);
          }
        });
        runningTasks++;
        var taskFn = wrapAsync(task[task.length - 1]);
        if (task.length > 1) {
          taskFn(results, taskCallback);
        } else {
          taskFn(taskCallback);
        }
      }
      function checkForDeadlocks() {
        var currentTask;
        var counter = 0;
        while (readyToCheck.length) {
          currentTask = readyToCheck.pop();
          counter++;
          getDependents(currentTask).forEach((dependent) => {
            if (--uncheckedDependencies[dependent] === 0) {
              readyToCheck.push(dependent);
            }
          });
        }
        if (counter !== numTasks) {
          throw new Error("async.auto cannot execute tasks due to a recursive dependency");
        }
      }
      function getDependents(taskName) {
        var result = [];
        Object.keys(tasks).forEach((key) => {
          const task = tasks[key];
          if (Array.isArray(task) && task.indexOf(taskName) >= 0) {
            result.push(key);
          }
        });
        return result;
      }
      return callback[PROMISE_SYMBOL];
    }
    var FN_ARGS = /^(?:async\s+)?(?:function)?\s*\w*\s*\(\s*([^)]+)\s*\)(?:\s*{)/;
    var ARROW_FN_ARGS = /^(?:async\s+)?\(?\s*([^)=]+)\s*\)?(?:\s*=>)/;
    var FN_ARG_SPLIT = /,/;
    var FN_ARG = /(=.+)?(\s*)$/;
    var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
    function parseParams(func) {
      const src = func.toString().replace(STRIP_COMMENTS, "");
      let match = src.match(FN_ARGS);
      if (!match) {
        match = src.match(ARROW_FN_ARGS);
      }
      if (!match)
        throw new Error("could not parse args in autoInject\nSource:\n" + src);
      let [, args2] = match;
      return args2.replace(/\s/g, "").split(FN_ARG_SPLIT).map((arg11) => arg11.replace(FN_ARG, "").trim());
    }
    function autoInject(tasks, callback) {
      var newTasks = {};
      Object.keys(tasks).forEach((key) => {
        var taskFn = tasks[key];
        var params;
        var fnIsAsync = isAsync(taskFn);
        var hasNoDeps = !fnIsAsync && taskFn.length === 1 || fnIsAsync && taskFn.length === 0;
        if (Array.isArray(taskFn)) {
          params = [...taskFn];
          taskFn = params.pop();
          newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);
        } else if (hasNoDeps) {
          newTasks[key] = taskFn;
        } else {
          params = parseParams(taskFn);
          if (taskFn.length === 0 && !fnIsAsync && params.length === 0) {
            throw new Error("autoInject task functions require explicit parameters.");
          }
          if (!fnIsAsync)
            params.pop();
          newTasks[key] = params.concat(newTask);
        }
        function newTask(results, taskCb) {
          var newArgs = params.map((name) => results[name]);
          newArgs.push(taskCb);
          wrapAsync(taskFn)(...newArgs);
        }
      });
      return auto(newTasks, callback);
    }
    class DLL {
      constructor() {
        this.head = this.tail = null;
        this.length = 0;
      }
      removeLink(node) {
        if (node.prev)
          node.prev.next = node.next;
        else
          this.head = node.next;
        if (node.next)
          node.next.prev = node.prev;
        else
          this.tail = node.prev;
        node.prev = node.next = null;
        this.length -= 1;
        return node;
      }
      empty() {
        while (this.head)
          this.shift();
        return this;
      }
      insertAfter(node, newNode) {
        newNode.prev = node;
        newNode.next = node.next;
        if (node.next)
          node.next.prev = newNode;
        else
          this.tail = newNode;
        node.next = newNode;
        this.length += 1;
      }
      insertBefore(node, newNode) {
        newNode.prev = node.prev;
        newNode.next = node;
        if (node.prev)
          node.prev.next = newNode;
        else
          this.head = newNode;
        node.prev = newNode;
        this.length += 1;
      }
      unshift(node) {
        if (this.head)
          this.insertBefore(this.head, node);
        else
          setInitial(this, node);
      }
      push(node) {
        if (this.tail)
          this.insertAfter(this.tail, node);
        else
          setInitial(this, node);
      }
      shift() {
        return this.head && this.removeLink(this.head);
      }
      pop() {
        return this.tail && this.removeLink(this.tail);
      }
      toArray() {
        return [...this];
      }
      *[Symbol.iterator]() {
        var cur = this.head;
        while (cur) {
          yield cur.data;
          cur = cur.next;
        }
      }
      remove(testFn) {
        var curr = this.head;
        while (curr) {
          var {next} = curr;
          if (testFn(curr)) {
            this.removeLink(curr);
          }
          curr = next;
        }
        return this;
      }
    }
    function setInitial(dll, node) {
      dll.length = 1;
      dll.head = dll.tail = node;
    }
    function queue(worker, concurrency, payload) {
      if (concurrency == null) {
        concurrency = 1;
      } else if (concurrency === 0) {
        throw new RangeError("Concurrency must not be zero");
      }
      var _worker = wrapAsync(worker);
      var numRunning = 0;
      var workersList = [];
      const events = {
        error: [],
        drain: [],
        saturated: [],
        unsaturated: [],
        empty: []
      };
      function on(event, handler) {
        events[event].push(handler);
      }
      function once2(event, handler) {
        const handleAndRemove = (...args2) => {
          off(event, handleAndRemove);
          handler(...args2);
        };
        events[event].push(handleAndRemove);
      }
      function off(event, handler) {
        if (!event)
          return Object.keys(events).forEach((ev) => events[ev] = []);
        if (!handler)
          return events[event] = [];
        events[event] = events[event].filter((ev) => ev !== handler);
      }
      function trigger(event, ...args2) {
        events[event].forEach((handler) => handler(...args2));
      }
      var processingScheduled = false;
      function _insert(data, insertAtFront, rejectOnError, callback) {
        if (callback != null && typeof callback !== "function") {
          throw new Error("task callback must be a function");
        }
        q.started = true;
        var res, rej;
        function promiseCallback2(err, ...args2) {
          if (err)
            return rejectOnError ? rej(err) : res();
          if (args2.length <= 1)
            return res(args2[0]);
          res(args2);
        }
        var item = {
          data,
          callback: rejectOnError ? promiseCallback2 : callback || promiseCallback2
        };
        if (insertAtFront) {
          q._tasks.unshift(item);
        } else {
          q._tasks.push(item);
        }
        if (!processingScheduled) {
          processingScheduled = true;
          setImmediate$1(() => {
            processingScheduled = false;
            q.process();
          });
        }
        if (rejectOnError || !callback) {
          return new Promise((resolve, reject2) => {
            res = resolve;
            rej = reject2;
          });
        }
      }
      function _createCB(tasks) {
        return function(err, ...args2) {
          numRunning -= 1;
          for (var i = 0, l = tasks.length; i < l; i++) {
            var task = tasks[i];
            var index2 = workersList.indexOf(task);
            if (index2 === 0) {
              workersList.shift();
            } else if (index2 > 0) {
              workersList.splice(index2, 1);
            }
            task.callback(err, ...args2);
            if (err != null) {
              trigger("error", err, task.data);
            }
          }
          if (numRunning <= q.concurrency - q.buffer) {
            trigger("unsaturated");
          }
          if (q.idle()) {
            trigger("drain");
          }
          q.process();
        };
      }
      function _maybeDrain(data) {
        if (data.length === 0 && q.idle()) {
          setImmediate$1(() => trigger("drain"));
          return true;
        }
        return false;
      }
      const eventMethod = (name) => (handler) => {
        if (!handler) {
          return new Promise((resolve, reject2) => {
            once2(name, (err, data) => {
              if (err)
                return reject2(err);
              resolve(data);
            });
          });
        }
        off(name);
        on(name, handler);
      };
      var isProcessing = false;
      var q = {
        _tasks: new DLL(),
        *[Symbol.iterator]() {
          yield* q._tasks[Symbol.iterator]();
        },
        concurrency,
        payload,
        buffer: concurrency / 4,
        started: false,
        paused: false,
        push(data, callback) {
          if (Array.isArray(data)) {
            if (_maybeDrain(data))
              return;
            return data.map((datum) => _insert(datum, false, false, callback));
          }
          return _insert(data, false, false, callback);
        },
        pushAsync(data, callback) {
          if (Array.isArray(data)) {
            if (_maybeDrain(data))
              return;
            return data.map((datum) => _insert(datum, false, true, callback));
          }
          return _insert(data, false, true, callback);
        },
        kill() {
          off();
          q._tasks.empty();
        },
        unshift(data, callback) {
          if (Array.isArray(data)) {
            if (_maybeDrain(data))
              return;
            return data.map((datum) => _insert(datum, true, false, callback));
          }
          return _insert(data, true, false, callback);
        },
        unshiftAsync(data, callback) {
          if (Array.isArray(data)) {
            if (_maybeDrain(data))
              return;
            return data.map((datum) => _insert(datum, true, true, callback));
          }
          return _insert(data, true, true, callback);
        },
        remove(testFn) {
          q._tasks.remove(testFn);
        },
        process() {
          if (isProcessing) {
            return;
          }
          isProcessing = true;
          while (!q.paused && numRunning < q.concurrency && q._tasks.length) {
            var tasks = [], data = [];
            var l = q._tasks.length;
            if (q.payload)
              l = Math.min(l, q.payload);
            for (var i = 0; i < l; i++) {
              var node = q._tasks.shift();
              tasks.push(node);
              workersList.push(node);
              data.push(node.data);
            }
            numRunning += 1;
            if (q._tasks.length === 0) {
              trigger("empty");
            }
            if (numRunning === q.concurrency) {
              trigger("saturated");
            }
            var cb = onlyOnce(_createCB(tasks));
            _worker(data, cb);
          }
          isProcessing = false;
        },
        length() {
          return q._tasks.length;
        },
        running() {
          return numRunning;
        },
        workersList() {
          return workersList;
        },
        idle() {
          return q._tasks.length + numRunning === 0;
        },
        pause() {
          q.paused = true;
        },
        resume() {
          if (q.paused === false) {
            return;
          }
          q.paused = false;
          setImmediate$1(q.process);
        }
      };
      Object.defineProperties(q, {
        saturated: {
          writable: false,
          value: eventMethod("saturated")
        },
        unsaturated: {
          writable: false,
          value: eventMethod("unsaturated")
        },
        empty: {
          writable: false,
          value: eventMethod("empty")
        },
        drain: {
          writable: false,
          value: eventMethod("drain")
        },
        error: {
          writable: false,
          value: eventMethod("error")
        }
      });
      return q;
    }
    function cargo(worker, payload) {
      return queue(worker, 1, payload);
    }
    function cargo$1(worker, concurrency, payload) {
      return queue(worker, concurrency, payload);
    }
    function reduce(coll, memo, iteratee, callback) {
      callback = once(callback);
      var _iteratee = wrapAsync(iteratee);
      return eachOfSeries$1(coll, (x, i, iterCb) => {
        _iteratee(memo, x, (err, v) => {
          memo = v;
          iterCb(err);
        });
      }, (err) => callback(err, memo));
    }
    var reduce$1 = awaitify(reduce, 4);
    function seq(...functions) {
      var _functions = functions.map(wrapAsync);
      return function(...args2) {
        var that = this;
        var cb = args2[args2.length - 1];
        if (typeof cb == "function") {
          args2.pop();
        } else {
          cb = promiseCallback();
        }
        reduce$1(_functions, args2, (newargs, fn, iterCb) => {
          fn.apply(that, newargs.concat((err, ...nextargs) => {
            iterCb(err, nextargs);
          }));
        }, (err, results) => cb(err, ...results));
        return cb[PROMISE_SYMBOL];
      };
    }
    function compose(...args2) {
      return seq(...args2.reverse());
    }
    function mapLimit(coll, limit, iteratee, callback) {
      return _asyncMap(eachOfLimit(limit), coll, iteratee, callback);
    }
    var mapLimit$1 = awaitify(mapLimit, 4);
    function concatLimit(coll, limit, iteratee, callback) {
      var _iteratee = wrapAsync(iteratee);
      return mapLimit$1(coll, limit, (val, iterCb) => {
        _iteratee(val, (err, ...args2) => {
          if (err)
            return iterCb(err);
          return iterCb(err, args2);
        });
      }, (err, mapResults) => {
        var result = [];
        for (var i = 0; i < mapResults.length; i++) {
          if (mapResults[i]) {
            result = result.concat(...mapResults[i]);
          }
        }
        return callback(err, result);
      });
    }
    var concatLimit$1 = awaitify(concatLimit, 4);
    function concat(coll, iteratee, callback) {
      return concatLimit$1(coll, Infinity, iteratee, callback);
    }
    var concat$1 = awaitify(concat, 3);
    function concatSeries(coll, iteratee, callback) {
      return concatLimit$1(coll, 1, iteratee, callback);
    }
    var concatSeries$1 = awaitify(concatSeries, 3);
    function constant(...args2) {
      return function(...ignoredArgs) {
        var callback = ignoredArgs.pop();
        return callback(null, ...args2);
      };
    }
    function _createTester(check2, getResult) {
      return (eachfn, arr, _iteratee, cb) => {
        var testPassed = false;
        var testResult;
        const iteratee = wrapAsync(_iteratee);
        eachfn(arr, (value, _2, callback) => {
          iteratee(value, (err, result) => {
            if (err || err === false)
              return callback(err);
            if (check2(result) && !testResult) {
              testPassed = true;
              testResult = getResult(true, value);
              return callback(null, breakLoop);
            }
            callback();
          });
        }, (err) => {
          if (err)
            return cb(err);
          cb(null, testPassed ? testResult : getResult(false));
        });
      };
    }
    function detect(coll, iteratee, callback) {
      return _createTester((bool) => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback);
    }
    var detect$1 = awaitify(detect, 3);
    function detectLimit(coll, limit, iteratee, callback) {
      return _createTester((bool) => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback);
    }
    var detectLimit$1 = awaitify(detectLimit, 4);
    function detectSeries(coll, iteratee, callback) {
      return _createTester((bool) => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback);
    }
    var detectSeries$1 = awaitify(detectSeries, 3);
    function consoleFunc(name) {
      return (fn, ...args2) => wrapAsync(fn)(...args2, (err, ...resultArgs) => {
        if (typeof console === "object") {
          if (err) {
            if (console.error) {
              console.error(err);
            }
          } else if (console[name]) {
            resultArgs.forEach((x) => console[name](x));
          }
        }
      });
    }
    var dir = consoleFunc("dir");
    function doWhilst(iteratee, test, callback) {
      callback = onlyOnce(callback);
      var _fn = wrapAsync(iteratee);
      var _test = wrapAsync(test);
      var results;
      function next(err, ...args2) {
        if (err)
          return callback(err);
        if (err === false)
          return;
        results = args2;
        _test(...args2, check2);
      }
      function check2(err, truth) {
        if (err)
          return callback(err);
        if (err === false)
          return;
        if (!truth)
          return callback(null, ...results);
        _fn(next);
      }
      return check2(null, true);
    }
    var doWhilst$1 = awaitify(doWhilst, 3);
    function doUntil(iteratee, test, callback) {
      const _test = wrapAsync(test);
      return doWhilst$1(iteratee, (...args2) => {
        const cb = args2.pop();
        _test(...args2, (err, truth) => cb(err, !truth));
      }, callback);
    }
    function _withoutIndex(iteratee) {
      return (value, index2, callback) => iteratee(value, callback);
    }
    function eachLimit(coll, iteratee, callback) {
      return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);
    }
    var each = awaitify(eachLimit, 3);
    function eachLimit$1(coll, limit, iteratee, callback) {
      return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);
    }
    var eachLimit$2 = awaitify(eachLimit$1, 4);
    function eachSeries(coll, iteratee, callback) {
      return eachLimit$2(coll, 1, iteratee, callback);
    }
    var eachSeries$1 = awaitify(eachSeries, 3);
    function ensureAsync(fn) {
      if (isAsync(fn))
        return fn;
      return function(...args2) {
        var callback = args2.pop();
        var sync = true;
        args2.push((...innerArgs) => {
          if (sync) {
            setImmediate$1(() => callback(...innerArgs));
          } else {
            callback(...innerArgs);
          }
        });
        fn.apply(this, args2);
        sync = false;
      };
    }
    function every(coll, iteratee, callback) {
      return _createTester((bool) => !bool, (res) => !res)(eachOf$1, coll, iteratee, callback);
    }
    var every$1 = awaitify(every, 3);
    function everyLimit(coll, limit, iteratee, callback) {
      return _createTester((bool) => !bool, (res) => !res)(eachOfLimit(limit), coll, iteratee, callback);
    }
    var everyLimit$1 = awaitify(everyLimit, 4);
    function everySeries(coll, iteratee, callback) {
      return _createTester((bool) => !bool, (res) => !res)(eachOfSeries$1, coll, iteratee, callback);
    }
    var everySeries$1 = awaitify(everySeries, 3);
    function filterArray(eachfn, arr, iteratee, callback) {
      var truthValues = new Array(arr.length);
      eachfn(arr, (x, index2, iterCb) => {
        iteratee(x, (err, v) => {
          truthValues[index2] = !!v;
          iterCb(err);
        });
      }, (err) => {
        if (err)
          return callback(err);
        var results = [];
        for (var i = 0; i < arr.length; i++) {
          if (truthValues[i])
            results.push(arr[i]);
        }
        callback(null, results);
      });
    }
    function filterGeneric(eachfn, coll, iteratee, callback) {
      var results = [];
      eachfn(coll, (x, index2, iterCb) => {
        iteratee(x, (err, v) => {
          if (err)
            return iterCb(err);
          if (v) {
            results.push({index: index2, value: x});
          }
          iterCb(err);
        });
      }, (err) => {
        if (err)
          return callback(err);
        callback(null, results.sort((a, b) => a.index - b.index).map((v) => v.value));
      });
    }
    function _filter(eachfn, coll, iteratee, callback) {
      var filter2 = isArrayLike(coll) ? filterArray : filterGeneric;
      return filter2(eachfn, coll, wrapAsync(iteratee), callback);
    }
    function filter(coll, iteratee, callback) {
      return _filter(eachOf$1, coll, iteratee, callback);
    }
    var filter$1 = awaitify(filter, 3);
    function filterLimit(coll, limit, iteratee, callback) {
      return _filter(eachOfLimit(limit), coll, iteratee, callback);
    }
    var filterLimit$1 = awaitify(filterLimit, 4);
    function filterSeries(coll, iteratee, callback) {
      return _filter(eachOfSeries$1, coll, iteratee, callback);
    }
    var filterSeries$1 = awaitify(filterSeries, 3);
    function forever(fn, errback) {
      var done = onlyOnce(errback);
      var task = wrapAsync(ensureAsync(fn));
      function next(err) {
        if (err)
          return done(err);
        if (err === false)
          return;
        task(next);
      }
      return next();
    }
    var forever$1 = awaitify(forever, 2);
    function groupByLimit(coll, limit, iteratee, callback) {
      var _iteratee = wrapAsync(iteratee);
      return mapLimit$1(coll, limit, (val, iterCb) => {
        _iteratee(val, (err, key) => {
          if (err)
            return iterCb(err);
          return iterCb(err, {key, val});
        });
      }, (err, mapResults) => {
        var result = {};
        var {hasOwnProperty} = Object.prototype;
        for (var i = 0; i < mapResults.length; i++) {
          if (mapResults[i]) {
            var {key} = mapResults[i];
            var {val} = mapResults[i];
            if (hasOwnProperty.call(result, key)) {
              result[key].push(val);
            } else {
              result[key] = [val];
            }
          }
        }
        return callback(err, result);
      });
    }
    var groupByLimit$1 = awaitify(groupByLimit, 4);
    function groupBy(coll, iteratee, callback) {
      return groupByLimit$1(coll, Infinity, iteratee, callback);
    }
    function groupBySeries(coll, iteratee, callback) {
      return groupByLimit$1(coll, 1, iteratee, callback);
    }
    var log = consoleFunc("log");
    function mapValuesLimit(obj, limit, iteratee, callback) {
      callback = once(callback);
      var newObj = {};
      var _iteratee = wrapAsync(iteratee);
      return eachOfLimit(limit)(obj, (val, key, next) => {
        _iteratee(val, key, (err, result) => {
          if (err)
            return next(err);
          newObj[key] = result;
          next(err);
        });
      }, (err) => callback(err, newObj));
    }
    var mapValuesLimit$1 = awaitify(mapValuesLimit, 4);
    function mapValues(obj, iteratee, callback) {
      return mapValuesLimit$1(obj, Infinity, iteratee, callback);
    }
    function mapValuesSeries(obj, iteratee, callback) {
      return mapValuesLimit$1(obj, 1, iteratee, callback);
    }
    function memoize(fn, hasher = (v) => v) {
      var memo = Object.create(null);
      var queues = Object.create(null);
      var _fn = wrapAsync(fn);
      var memoized = initialParams((args2, callback) => {
        var key = hasher(...args2);
        if (key in memo) {
          setImmediate$1(() => callback(null, ...memo[key]));
        } else if (key in queues) {
          queues[key].push(callback);
        } else {
          queues[key] = [callback];
          _fn(...args2, (err, ...resultArgs) => {
            if (!err) {
              memo[key] = resultArgs;
            }
            var q = queues[key];
            delete queues[key];
            for (var i = 0, l = q.length; i < l; i++) {
              q[i](err, ...resultArgs);
            }
          });
        }
      });
      memoized.memo = memo;
      memoized.unmemoized = fn;
      return memoized;
    }
    var _defer$1;
    if (hasNextTick) {
      _defer$1 = process.nextTick;
    } else if (hasSetImmediate) {
      _defer$1 = setImmediate;
    } else {
      _defer$1 = fallback;
    }
    var nextTick = wrap(_defer$1);
    var parallel = awaitify((eachfn, tasks, callback) => {
      var results = isArrayLike(tasks) ? [] : {};
      eachfn(tasks, (task, key, taskCb) => {
        wrapAsync(task)((err, ...result) => {
          if (result.length < 2) {
            [result] = result;
          }
          results[key] = result;
          taskCb(err);
        });
      }, (err) => callback(err, results));
    }, 3);
    function parallel$1(tasks, callback) {
      return parallel(eachOf$1, tasks, callback);
    }
    function parallelLimit(tasks, limit, callback) {
      return parallel(eachOfLimit(limit), tasks, callback);
    }
    function queue$1(worker, concurrency) {
      var _worker = wrapAsync(worker);
      return queue((items, cb) => {
        _worker(items[0], cb);
      }, concurrency, 1);
    }
    class Heap {
      constructor() {
        this.heap = [];
        this.pushCount = Number.MIN_SAFE_INTEGER;
      }
      get length() {
        return this.heap.length;
      }
      empty() {
        this.heap = [];
        return this;
      }
      percUp(index2) {
        let p;
        while (index2 > 0 && smaller(this.heap[index2], this.heap[p = parent(index2)])) {
          let t = this.heap[index2];
          this.heap[index2] = this.heap[p];
          this.heap[p] = t;
          index2 = p;
        }
      }
      percDown(index2) {
        let l;
        while ((l = leftChi(index2)) < this.heap.length) {
          if (l + 1 < this.heap.length && smaller(this.heap[l + 1], this.heap[l])) {
            l = l + 1;
          }
          if (smaller(this.heap[index2], this.heap[l])) {
            break;
          }
          let t = this.heap[index2];
          this.heap[index2] = this.heap[l];
          this.heap[l] = t;
          index2 = l;
        }
      }
      push(node) {
        node.pushCount = ++this.pushCount;
        this.heap.push(node);
        this.percUp(this.heap.length - 1);
      }
      unshift(node) {
        return this.heap.push(node);
      }
      shift() {
        let [top] = this.heap;
        this.heap[0] = this.heap[this.heap.length - 1];
        this.heap.pop();
        this.percDown(0);
        return top;
      }
      toArray() {
        return [...this];
      }
      *[Symbol.iterator]() {
        for (let i = 0; i < this.heap.length; i++) {
          yield this.heap[i].data;
        }
      }
      remove(testFn) {
        let j = 0;
        for (let i = 0; i < this.heap.length; i++) {
          if (!testFn(this.heap[i])) {
            this.heap[j] = this.heap[i];
            j++;
          }
        }
        this.heap.splice(j);
        for (let i = parent(this.heap.length - 1); i >= 0; i--) {
          this.percDown(i);
        }
        return this;
      }
    }
    function leftChi(i) {
      return (i << 1) + 1;
    }
    function parent(i) {
      return (i + 1 >> 1) - 1;
    }
    function smaller(x, y) {
      if (x.priority !== y.priority) {
        return x.priority < y.priority;
      } else {
        return x.pushCount < y.pushCount;
      }
    }
    function priorityQueue(worker, concurrency) {
      var q = queue$1(worker, concurrency);
      q._tasks = new Heap();
      q.push = function(data, priority = 0, callback = () => {
      }) {
        if (typeof callback !== "function") {
          throw new Error("task callback must be a function");
        }
        q.started = true;
        if (!Array.isArray(data)) {
          data = [data];
        }
        if (data.length === 0 && q.idle()) {
          return setImmediate$1(() => q.drain());
        }
        for (var i = 0, l = data.length; i < l; i++) {
          var item = {
            data: data[i],
            priority,
            callback
          };
          q._tasks.push(item);
        }
        setImmediate$1(q.process);
      };
      delete q.unshift;
      return q;
    }
    function race(tasks, callback) {
      callback = once(callback);
      if (!Array.isArray(tasks))
        return callback(new TypeError("First argument to race must be an array of functions"));
      if (!tasks.length)
        return callback();
      for (var i = 0, l = tasks.length; i < l; i++) {
        wrapAsync(tasks[i])(callback);
      }
    }
    var race$1 = awaitify(race, 2);
    function reduceRight(array, memo, iteratee, callback) {
      var reversed = [...array].reverse();
      return reduce$1(reversed, memo, iteratee, callback);
    }
    function reflect(fn) {
      var _fn = wrapAsync(fn);
      return initialParams(function reflectOn(args2, reflectCallback) {
        args2.push((error, ...cbArgs) => {
          let retVal = {};
          if (error) {
            retVal.error = error;
          }
          if (cbArgs.length > 0) {
            var value = cbArgs;
            if (cbArgs.length <= 1) {
              [value] = cbArgs;
            }
            retVal.value = value;
          }
          reflectCallback(null, retVal);
        });
        return _fn.apply(this, args2);
      });
    }
    function reflectAll(tasks) {
      var results;
      if (Array.isArray(tasks)) {
        results = tasks.map(reflect);
      } else {
        results = {};
        Object.keys(tasks).forEach((key) => {
          results[key] = reflect.call(this, tasks[key]);
        });
      }
      return results;
    }
    function reject(eachfn, arr, _iteratee, callback) {
      const iteratee = wrapAsync(_iteratee);
      return _filter(eachfn, arr, (value, cb) => {
        iteratee(value, (err, v) => {
          cb(err, !v);
        });
      }, callback);
    }
    function reject$1(coll, iteratee, callback) {
      return reject(eachOf$1, coll, iteratee, callback);
    }
    var reject$2 = awaitify(reject$1, 3);
    function rejectLimit(coll, limit, iteratee, callback) {
      return reject(eachOfLimit(limit), coll, iteratee, callback);
    }
    var rejectLimit$1 = awaitify(rejectLimit, 4);
    function rejectSeries(coll, iteratee, callback) {
      return reject(eachOfSeries$1, coll, iteratee, callback);
    }
    var rejectSeries$1 = awaitify(rejectSeries, 3);
    function constant$1(value) {
      return function() {
        return value;
      };
    }
    const DEFAULT_TIMES = 5;
    const DEFAULT_INTERVAL = 0;
    function retry(opts, task, callback) {
      var options = {
        times: DEFAULT_TIMES,
        intervalFunc: constant$1(DEFAULT_INTERVAL)
      };
      if (arguments.length < 3 && typeof opts === "function") {
        callback = task || promiseCallback();
        task = opts;
      } else {
        parseTimes(options, opts);
        callback = callback || promiseCallback();
      }
      if (typeof task !== "function") {
        throw new Error("Invalid arguments for async.retry");
      }
      var _task = wrapAsync(task);
      var attempt = 1;
      function retryAttempt() {
        _task((err, ...args2) => {
          if (err === false)
            return;
          if (err && attempt++ < options.times && (typeof options.errorFilter != "function" || options.errorFilter(err))) {
            setTimeout(retryAttempt, options.intervalFunc(attempt - 1));
          } else {
            callback(err, ...args2);
          }
        });
      }
      retryAttempt();
      return callback[PROMISE_SYMBOL];
    }
    function parseTimes(acc, t) {
      if (typeof t === "object") {
        acc.times = +t.times || DEFAULT_TIMES;
        acc.intervalFunc = typeof t.interval === "function" ? t.interval : constant$1(+t.interval || DEFAULT_INTERVAL);
        acc.errorFilter = t.errorFilter;
      } else if (typeof t === "number" || typeof t === "string") {
        acc.times = +t || DEFAULT_TIMES;
      } else {
        throw new Error("Invalid arguments for async.retry");
      }
    }
    function retryable(opts, task) {
      if (!task) {
        task = opts;
        opts = null;
      }
      let arity = opts && opts.arity || task.length;
      if (isAsync(task)) {
        arity += 1;
      }
      var _task = wrapAsync(task);
      return initialParams((args2, callback) => {
        if (args2.length < arity - 1 || callback == null) {
          args2.push(callback);
          callback = promiseCallback();
        }
        function taskFn(cb) {
          _task(...args2, cb);
        }
        if (opts)
          retry(opts, taskFn, callback);
        else
          retry(taskFn, callback);
        return callback[PROMISE_SYMBOL];
      });
    }
    function series(tasks, callback) {
      return parallel(eachOfSeries$1, tasks, callback);
    }
    function some(coll, iteratee, callback) {
      return _createTester(Boolean, (res) => res)(eachOf$1, coll, iteratee, callback);
    }
    var some$1 = awaitify(some, 3);
    function someLimit(coll, limit, iteratee, callback) {
      return _createTester(Boolean, (res) => res)(eachOfLimit(limit), coll, iteratee, callback);
    }
    var someLimit$1 = awaitify(someLimit, 4);
    function someSeries(coll, iteratee, callback) {
      return _createTester(Boolean, (res) => res)(eachOfSeries$1, coll, iteratee, callback);
    }
    var someSeries$1 = awaitify(someSeries, 3);
    function sortBy(coll, iteratee, callback) {
      var _iteratee = wrapAsync(iteratee);
      return map$1(coll, (x, iterCb) => {
        _iteratee(x, (err, criteria) => {
          if (err)
            return iterCb(err);
          iterCb(err, {value: x, criteria});
        });
      }, (err, results) => {
        if (err)
          return callback(err);
        callback(null, results.sort(comparator).map((v) => v.value));
      });
      function comparator(left, right) {
        var a = left.criteria, b = right.criteria;
        return a < b ? -1 : a > b ? 1 : 0;
      }
    }
    var sortBy$1 = awaitify(sortBy, 3);
    function timeout(asyncFn, milliseconds, info) {
      var fn = wrapAsync(asyncFn);
      return initialParams((args2, callback) => {
        var timedOut = false;
        var timer;
        function timeoutCallback() {
          var name = asyncFn.name || "anonymous";
          var error = new Error('Callback function "' + name + '" timed out.');
          error.code = "ETIMEDOUT";
          if (info) {
            error.info = info;
          }
          timedOut = true;
          callback(error);
        }
        args2.push((...cbArgs) => {
          if (!timedOut) {
            callback(...cbArgs);
            clearTimeout(timer);
          }
        });
        timer = setTimeout(timeoutCallback, milliseconds);
        fn(...args2);
      });
    }
    function range(size) {
      var result = Array(size);
      while (size--) {
        result[size] = size;
      }
      return result;
    }
    function timesLimit(count, limit, iteratee, callback) {
      var _iteratee = wrapAsync(iteratee);
      return mapLimit$1(range(count), limit, _iteratee, callback);
    }
    function times(n, iteratee, callback) {
      return timesLimit(n, Infinity, iteratee, callback);
    }
    function timesSeries(n, iteratee, callback) {
      return timesLimit(n, 1, iteratee, callback);
    }
    function transform(coll, accumulator, iteratee, callback) {
      if (arguments.length <= 3 && typeof accumulator === "function") {
        callback = iteratee;
        iteratee = accumulator;
        accumulator = Array.isArray(coll) ? [] : {};
      }
      callback = once(callback || promiseCallback());
      var _iteratee = wrapAsync(iteratee);
      eachOf$1(coll, (v, k, cb) => {
        _iteratee(accumulator, v, k, cb);
      }, (err) => callback(err, accumulator));
      return callback[PROMISE_SYMBOL];
    }
    function tryEach(tasks, callback) {
      var error = null;
      var result;
      return eachSeries$1(tasks, (task, taskCb) => {
        wrapAsync(task)((err, ...args2) => {
          if (err === false)
            return taskCb(err);
          if (args2.length < 2) {
            [result] = args2;
          } else {
            result = args2;
          }
          error = err;
          taskCb(err ? null : {});
        });
      }, () => callback(error, result));
    }
    var tryEach$1 = awaitify(tryEach);
    function unmemoize(fn) {
      return (...args2) => {
        return (fn.unmemoized || fn)(...args2);
      };
    }
    function whilst(test, iteratee, callback) {
      callback = onlyOnce(callback);
      var _fn = wrapAsync(iteratee);
      var _test = wrapAsync(test);
      var results = [];
      function next(err, ...rest) {
        if (err)
          return callback(err);
        results = rest;
        if (err === false)
          return;
        _test(check2);
      }
      function check2(err, truth) {
        if (err)
          return callback(err);
        if (err === false)
          return;
        if (!truth)
          return callback(null, ...results);
        _fn(next);
      }
      return _test(check2);
    }
    var whilst$1 = awaitify(whilst, 3);
    function until(test, iteratee, callback) {
      const _test = wrapAsync(test);
      return whilst$1((cb) => _test((err, truth) => cb(err, !truth)), iteratee, callback);
    }
    function waterfall(tasks, callback) {
      callback = once(callback);
      if (!Array.isArray(tasks))
        return callback(new Error("First argument to waterfall must be an array of functions"));
      if (!tasks.length)
        return callback();
      var taskIndex = 0;
      function nextTask(args2) {
        var task = wrapAsync(tasks[taskIndex++]);
        task(...args2, onlyOnce(next));
      }
      function next(err, ...args2) {
        if (err === false)
          return;
        if (err || taskIndex === tasks.length) {
          return callback(err, ...args2);
        }
        nextTask(args2);
      }
      nextTask([]);
    }
    var waterfall$1 = awaitify(waterfall);
    var index = {
      apply,
      applyEach: applyEach$1,
      applyEachSeries,
      asyncify,
      auto,
      autoInject,
      cargo,
      cargoQueue: cargo$1,
      compose,
      concat: concat$1,
      concatLimit: concatLimit$1,
      concatSeries: concatSeries$1,
      constant,
      detect: detect$1,
      detectLimit: detectLimit$1,
      detectSeries: detectSeries$1,
      dir,
      doUntil,
      doWhilst: doWhilst$1,
      each,
      eachLimit: eachLimit$2,
      eachOf: eachOf$1,
      eachOfLimit: eachOfLimit$2,
      eachOfSeries: eachOfSeries$1,
      eachSeries: eachSeries$1,
      ensureAsync,
      every: every$1,
      everyLimit: everyLimit$1,
      everySeries: everySeries$1,
      filter: filter$1,
      filterLimit: filterLimit$1,
      filterSeries: filterSeries$1,
      forever: forever$1,
      groupBy,
      groupByLimit: groupByLimit$1,
      groupBySeries,
      log,
      map: map$1,
      mapLimit: mapLimit$1,
      mapSeries: mapSeries$1,
      mapValues,
      mapValuesLimit: mapValuesLimit$1,
      mapValuesSeries,
      memoize,
      nextTick,
      parallel: parallel$1,
      parallelLimit,
      priorityQueue,
      queue: queue$1,
      race: race$1,
      reduce: reduce$1,
      reduceRight,
      reflect,
      reflectAll,
      reject: reject$2,
      rejectLimit: rejectLimit$1,
      rejectSeries: rejectSeries$1,
      retry,
      retryable,
      seq,
      series,
      setImmediate: setImmediate$1,
      some: some$1,
      someLimit: someLimit$1,
      someSeries: someSeries$1,
      sortBy: sortBy$1,
      timeout,
      times,
      timesLimit,
      timesSeries,
      transform,
      tryEach: tryEach$1,
      unmemoize,
      until,
      waterfall: waterfall$1,
      whilst: whilst$1,
      all: every$1,
      allLimit: everyLimit$1,
      allSeries: everySeries$1,
      any: some$1,
      anyLimit: someLimit$1,
      anySeries: someSeries$1,
      find: detect$1,
      findLimit: detectLimit$1,
      findSeries: detectSeries$1,
      flatMap: concat$1,
      flatMapLimit: concatLimit$1,
      flatMapSeries: concatSeries$1,
      forEach: each,
      forEachSeries: eachSeries$1,
      forEachLimit: eachLimit$2,
      forEachOf: eachOf$1,
      forEachOfSeries: eachOfSeries$1,
      forEachOfLimit: eachOfLimit$2,
      inject: reduce$1,
      foldl: reduce$1,
      foldr: reduceRight,
      select: filter$1,
      selectLimit: filterLimit$1,
      selectSeries: filterSeries$1,
      wrapSync: asyncify,
      during: whilst$1,
      doDuring: doWhilst$1
    };
    exports3.default = index;
    exports3.apply = apply;
    exports3.applyEach = applyEach$1;
    exports3.applyEachSeries = applyEachSeries;
    exports3.asyncify = asyncify;
    exports3.auto = auto;
    exports3.autoInject = autoInject;
    exports3.cargo = cargo;
    exports3.cargoQueue = cargo$1;
    exports3.compose = compose;
    exports3.concat = concat$1;
    exports3.concatLimit = concatLimit$1;
    exports3.concatSeries = concatSeries$1;
    exports3.constant = constant;
    exports3.detect = detect$1;
    exports3.detectLimit = detectLimit$1;
    exports3.detectSeries = detectSeries$1;
    exports3.dir = dir;
    exports3.doUntil = doUntil;
    exports3.doWhilst = doWhilst$1;
    exports3.each = each;
    exports3.eachLimit = eachLimit$2;
    exports3.eachOf = eachOf$1;
    exports3.eachOfLimit = eachOfLimit$2;
    exports3.eachOfSeries = eachOfSeries$1;
    exports3.eachSeries = eachSeries$1;
    exports3.ensureAsync = ensureAsync;
    exports3.every = every$1;
    exports3.everyLimit = everyLimit$1;
    exports3.everySeries = everySeries$1;
    exports3.filter = filter$1;
    exports3.filterLimit = filterLimit$1;
    exports3.filterSeries = filterSeries$1;
    exports3.forever = forever$1;
    exports3.groupBy = groupBy;
    exports3.groupByLimit = groupByLimit$1;
    exports3.groupBySeries = groupBySeries;
    exports3.log = log;
    exports3.map = map$1;
    exports3.mapLimit = mapLimit$1;
    exports3.mapSeries = mapSeries$1;
    exports3.mapValues = mapValues;
    exports3.mapValuesLimit = mapValuesLimit$1;
    exports3.mapValuesSeries = mapValuesSeries;
    exports3.memoize = memoize;
    exports3.nextTick = nextTick;
    exports3.parallel = parallel$1;
    exports3.parallelLimit = parallelLimit;
    exports3.priorityQueue = priorityQueue;
    exports3.queue = queue$1;
    exports3.race = race$1;
    exports3.reduce = reduce$1;
    exports3.reduceRight = reduceRight;
    exports3.reflect = reflect;
    exports3.reflectAll = reflectAll;
    exports3.reject = reject$2;
    exports3.rejectLimit = rejectLimit$1;
    exports3.rejectSeries = rejectSeries$1;
    exports3.retry = retry;
    exports3.retryable = retryable;
    exports3.seq = seq;
    exports3.series = series;
    exports3.setImmediate = setImmediate$1;
    exports3.some = some$1;
    exports3.someLimit = someLimit$1;
    exports3.someSeries = someSeries$1;
    exports3.sortBy = sortBy$1;
    exports3.timeout = timeout;
    exports3.times = times;
    exports3.timesLimit = timesLimit;
    exports3.timesSeries = timesSeries;
    exports3.transform = transform;
    exports3.tryEach = tryEach$1;
    exports3.unmemoize = unmemoize;
    exports3.until = until;
    exports3.waterfall = waterfall$1;
    exports3.whilst = whilst$1;
    exports3.all = every$1;
    exports3.allLimit = everyLimit$1;
    exports3.allSeries = everySeries$1;
    exports3.any = some$1;
    exports3.anyLimit = someLimit$1;
    exports3.anySeries = someSeries$1;
    exports3.find = detect$1;
    exports3.findLimit = detectLimit$1;
    exports3.findSeries = detectSeries$1;
    exports3.flatMap = concat$1;
    exports3.flatMapLimit = concatLimit$1;
    exports3.flatMapSeries = concatSeries$1;
    exports3.forEach = each;
    exports3.forEachSeries = eachSeries$1;
    exports3.forEachLimit = eachLimit$2;
    exports3.forEachOf = eachOf$1;
    exports3.forEachOfSeries = eachOfSeries$1;
    exports3.forEachOfLimit = eachOfLimit$2;
    exports3.inject = reduce$1;
    exports3.foldl = reduce$1;
    exports3.foldr = reduceRight;
    exports3.select = filter$1;
    exports3.selectLimit = filterLimit$1;
    exports3.selectSeries = filterSeries$1;
    exports3.wrapSync = asyncify;
    exports3.during = whilst$1;
    exports3.doDuring = doWhilst$1;
    Object.defineProperty(exports3, "__esModule", {value: true});
  });
});

// ../../node_modules/.pnpm/archiver@4.0.2/node_modules/archiver/lib/error.js
var require_error6 = __commonJS((exports2, module3) => {
  /**
   * Archiver Core
   *
   * @ignore
   * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}
   * @copyright (c) 2012-2014 Chris Talkington, contributors.
   */
  var util4 = require("util");
  const ERROR_CODES = {
    ABORTED: "archive was aborted",
    DIRECTORYDIRPATHREQUIRED: "diretory dirpath argument must be a non-empty string value",
    DIRECTORYFUNCTIONINVALIDDATA: "invalid data returned by directory custom data function",
    ENTRYNAMEREQUIRED: "entry name must be a non-empty string value",
    FILEFILEPATHREQUIRED: "file filepath argument must be a non-empty string value",
    FINALIZING: "archive already finalizing",
    QUEUECLOSED: "queue closed",
    NOENDMETHOD: "no suitable finalize/end method defined by module",
    DIRECTORYNOTSUPPORTED: "support for directory entries not defined by module",
    FORMATSET: "archive format already set",
    INPUTSTEAMBUFFERREQUIRED: "input source must be valid Stream or Buffer instance",
    MODULESET: "module already set",
    SYMLINKNOTSUPPORTED: "support for symlink entries not defined by module",
    SYMLINKFILEPATHREQUIRED: "symlink filepath argument must be a non-empty string value",
    SYMLINKTARGETREQUIRED: "symlink target argument must be a non-empty string value",
    ENTRYNOTSUPPORTED: "entry not supported"
  };
  function ArchiverError(code, data) {
    Error.captureStackTrace(this, this.constructor);
    this.message = ERROR_CODES[code] || code;
    this.code = code;
    this.data = data;
  }
  util4.inherits(ArchiverError, Error);
  exports2 = module3.exports = ArchiverError;
});

// ../../node_modules/.pnpm/archiver@4.0.2/node_modules/archiver/lib/core.js
var require_core6 = __commonJS((exports2, module3) => {
  /**
   * Archiver Core
   *
   * @ignore
   * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}
   * @copyright (c) 2012-2014 Chris Talkington, contributors.
   */
  var fs17 = require("fs");
  var glob = require_glob();
  var async = require_async9();
  var path19 = require("path");
  var util4 = require_archiver_utils();
  var inherits = require("util").inherits;
  var ArchiverError = require_error6();
  var Transform = require_readable2().Transform;
  var win32 = process.platform === "win32";
  var Archiver = function(format11, options) {
    if (!(this instanceof Archiver)) {
      return new Archiver(format11, options);
    }
    if (typeof format11 !== "string") {
      options = format11;
      format11 = "zip";
    }
    options = this.options = util4.defaults(options, {
      highWaterMark: 1024 * 1024,
      statConcurrency: 4
    });
    Transform.call(this, options);
    this._format = false;
    this._module = false;
    this._pending = 0;
    this._pointer = 0;
    this._entriesCount = 0;
    this._entriesProcessedCount = 0;
    this._fsEntriesTotalBytes = 0;
    this._fsEntriesProcessedBytes = 0;
    this._queue = async.queue(this._onQueueTask.bind(this), 1);
    this._queue.drain(this._onQueueDrain.bind(this));
    this._statQueue = async.queue(this._onStatQueueTask.bind(this), options.statConcurrency);
    this._statQueue.drain(this._onQueueDrain.bind(this));
    this._state = {
      aborted: false,
      finalize: false,
      finalizing: false,
      finalized: false,
      modulePiped: false
    };
    this._streams = [];
  };
  inherits(Archiver, Transform);
  Archiver.prototype._abort = function() {
    this._state.aborted = true;
    this._queue.kill();
    this._statQueue.kill();
    if (this._queue.idle()) {
      this._shutdown();
    }
  };
  Archiver.prototype._append = function(filepath, data) {
    data = data || {};
    var task = {
      source: null,
      filepath
    };
    if (!data.name) {
      data.name = filepath;
    }
    data.sourcePath = filepath;
    task.data = data;
    this._entriesCount++;
    if (data.stats && data.stats instanceof fs17.Stats) {
      task = this._updateQueueTaskWithStats(task, data.stats);
      if (task) {
        if (data.stats.size) {
          this._fsEntriesTotalBytes += data.stats.size;
        }
        this._queue.push(task);
      }
    } else {
      this._statQueue.push(task);
    }
  };
  Archiver.prototype._finalize = function() {
    if (this._state.finalizing || this._state.finalized || this._state.aborted) {
      return;
    }
    this._state.finalizing = true;
    this._moduleFinalize();
    this._state.finalizing = false;
    this._state.finalized = true;
  };
  Archiver.prototype._maybeFinalize = function() {
    if (this._state.finalizing || this._state.finalized || this._state.aborted) {
      return false;
    }
    if (this._state.finalize && this._pending === 0 && this._queue.idle() && this._statQueue.idle()) {
      this._finalize();
      return true;
    }
    return false;
  };
  Archiver.prototype._moduleAppend = function(source, data, callback) {
    if (this._state.aborted) {
      callback();
      return;
    }
    this._module.append(source, data, function(err) {
      this._task = null;
      if (this._state.aborted) {
        this._shutdown();
        return;
      }
      if (err) {
        this.emit("error", err);
        setImmediate(callback);
        return;
      }
      this.emit("entry", data);
      this._entriesProcessedCount++;
      if (data.stats && data.stats.size) {
        this._fsEntriesProcessedBytes += data.stats.size;
      }
      this.emit("progress", {
        entries: {
          total: this._entriesCount,
          processed: this._entriesProcessedCount
        },
        fs: {
          totalBytes: this._fsEntriesTotalBytes,
          processedBytes: this._fsEntriesProcessedBytes
        }
      });
      setImmediate(callback);
    }.bind(this));
  };
  Archiver.prototype._moduleFinalize = function() {
    if (typeof this._module.finalize === "function") {
      this._module.finalize();
    } else if (typeof this._module.end === "function") {
      this._module.end();
    } else {
      this.emit("error", new ArchiverError("NOENDMETHOD"));
    }
  };
  Archiver.prototype._modulePipe = function() {
    this._module.on("error", this._onModuleError.bind(this));
    this._module.pipe(this);
    this._state.modulePiped = true;
  };
  Archiver.prototype._moduleSupports = function(key) {
    if (!this._module.supports || !this._module.supports[key]) {
      return false;
    }
    return this._module.supports[key];
  };
  Archiver.prototype._moduleUnpipe = function() {
    this._module.unpipe(this);
    this._state.modulePiped = false;
  };
  Archiver.prototype._normalizeEntryData = function(data, stats) {
    data = util4.defaults(data, {
      type: "file",
      name: null,
      date: null,
      mode: null,
      prefix: null,
      sourcePath: null,
      stats: false
    });
    if (stats && data.stats === false) {
      data.stats = stats;
    }
    var isDir = data.type === "directory";
    if (data.name) {
      if (typeof data.prefix === "string" && data.prefix !== "") {
        data.name = data.prefix + "/" + data.name;
        data.prefix = null;
      }
      data.name = util4.sanitizePath(data.name);
      if (data.type !== "symlink" && data.name.slice(-1) === "/") {
        isDir = true;
        data.type = "directory";
      } else if (isDir) {
        data.name += "/";
      }
    }
    if (typeof data.mode === "number") {
      if (win32) {
        data.mode &= 511;
      } else {
        data.mode &= 4095;
      }
    } else if (data.stats && data.mode === null) {
      if (win32) {
        data.mode = data.stats.mode & 511;
      } else {
        data.mode = data.stats.mode & 4095;
      }
      if (win32 && isDir) {
        data.mode = 493;
      }
    } else if (data.mode === null) {
      data.mode = isDir ? 493 : 420;
    }
    if (data.stats && data.date === null) {
      data.date = data.stats.mtime;
    } else {
      data.date = util4.dateify(data.date);
    }
    return data;
  };
  Archiver.prototype._onModuleError = function(err) {
    this.emit("error", err);
  };
  Archiver.prototype._onQueueDrain = function() {
    if (this._state.finalizing || this._state.finalized || this._state.aborted) {
      return;
    }
    if (this._state.finalize && this._pending === 0 && this._queue.idle() && this._statQueue.idle()) {
      this._finalize();
    }
  };
  Archiver.prototype._onQueueTask = function(task, callback) {
    if (this._state.finalizing || this._state.finalized || this._state.aborted) {
      callback();
      return;
    }
    this._task = task;
    this._moduleAppend(task.source, task.data, callback);
  };
  Archiver.prototype._onStatQueueTask = function(task, callback) {
    if (this._state.finalizing || this._state.finalized || this._state.aborted) {
      callback();
      return;
    }
    fs17.lstat(task.filepath, function(err, stats) {
      if (this._state.aborted) {
        setImmediate(callback);
        return;
      }
      if (err) {
        this._entriesCount--;
        this.emit("warning", err);
        setImmediate(callback);
        return;
      }
      task = this._updateQueueTaskWithStats(task, stats);
      if (task) {
        if (stats.size) {
          this._fsEntriesTotalBytes += stats.size;
        }
        this._queue.push(task);
      }
      setImmediate(callback);
    }.bind(this));
  };
  Archiver.prototype._shutdown = function() {
    this._moduleUnpipe();
    this.end();
  };
  Archiver.prototype._transform = function(chunk, encoding, callback) {
    if (chunk) {
      this._pointer += chunk.length;
    }
    callback(null, chunk);
  };
  Archiver.prototype._updateQueueTaskWithStats = function(task, stats) {
    if (stats.isFile()) {
      task.data.type = "file";
      task.data.sourceType = "stream";
      task.source = util4.lazyReadStream(task.filepath);
    } else if (stats.isDirectory() && this._moduleSupports("directory")) {
      task.data.name = util4.trailingSlashIt(task.data.name);
      task.data.type = "directory";
      task.data.sourcePath = util4.trailingSlashIt(task.filepath);
      task.data.sourceType = "buffer";
      task.source = Buffer.concat([]);
    } else if (stats.isSymbolicLink() && this._moduleSupports("symlink")) {
      var linkPath = fs17.readlinkSync(task.filepath);
      var dirName = path19.dirname(task.filepath);
      task.data.type = "symlink";
      task.data.linkname = path19.relative(dirName, path19.resolve(dirName, linkPath));
      task.data.sourceType = "buffer";
      task.source = Buffer.concat([]);
    } else {
      if (stats.isDirectory()) {
        this.emit("warning", new ArchiverError("DIRECTORYNOTSUPPORTED", task.data));
      } else if (stats.isSymbolicLink()) {
        this.emit("warning", new ArchiverError("SYMLINKNOTSUPPORTED", task.data));
      } else {
        this.emit("warning", new ArchiverError("ENTRYNOTSUPPORTED", task.data));
      }
      return null;
    }
    task.data = this._normalizeEntryData(task.data, stats);
    return task;
  };
  Archiver.prototype.abort = function() {
    if (this._state.aborted || this._state.finalized) {
      return this;
    }
    this._abort();
    return this;
  };
  Archiver.prototype.append = function(source, data) {
    if (this._state.finalize || this._state.aborted) {
      this.emit("error", new ArchiverError("QUEUECLOSED"));
      return this;
    }
    data = this._normalizeEntryData(data);
    if (typeof data.name !== "string" || data.name.length === 0) {
      this.emit("error", new ArchiverError("ENTRYNAMEREQUIRED"));
      return this;
    }
    if (data.type === "directory" && !this._moduleSupports("directory")) {
      this.emit("error", new ArchiverError("DIRECTORYNOTSUPPORTED", {name: data.name}));
      return this;
    }
    source = util4.normalizeInputSource(source);
    if (Buffer.isBuffer(source)) {
      data.sourceType = "buffer";
    } else if (util4.isStream(source)) {
      data.sourceType = "stream";
    } else {
      this.emit("error", new ArchiverError("INPUTSTEAMBUFFERREQUIRED", {name: data.name}));
      return this;
    }
    this._entriesCount++;
    this._queue.push({
      data,
      source
    });
    return this;
  };
  Archiver.prototype.directory = function(dirpath, destpath, data) {
    if (this._state.finalize || this._state.aborted) {
      this.emit("error", new ArchiverError("QUEUECLOSED"));
      return this;
    }
    if (typeof dirpath !== "string" || dirpath.length === 0) {
      this.emit("error", new ArchiverError("DIRECTORYDIRPATHREQUIRED"));
      return this;
    }
    this._pending++;
    if (destpath === false) {
      destpath = "";
    } else if (typeof destpath !== "string") {
      destpath = dirpath;
    }
    var dataFunction = false;
    if (typeof data === "function") {
      dataFunction = data;
      data = {};
    } else if (typeof data !== "object") {
      data = {};
    }
    var globOptions = {
      stat: false,
      dot: true,
      cwd: dirpath
    };
    function onGlobEnd() {
      this._pending--;
      this._maybeFinalize();
    }
    function onGlobError(err) {
      this.emit("error", err);
    }
    function onGlobMatch(match) {
      var ignoreMatch = false;
      var entryData = Object.assign({}, data);
      entryData.name = match;
      entryData.prefix = destpath;
      match = globber._makeAbs(match);
      try {
        if (dataFunction) {
          entryData = dataFunction(entryData);
          if (entryData === false) {
            ignoreMatch = true;
          } else if (typeof entryData !== "object") {
            throw new ArchiverError("DIRECTORYFUNCTIONINVALIDDATA", {dirpath});
          }
        }
      } catch (e) {
        this.emit("error", e);
        return;
      }
      if (ignoreMatch) {
        return;
      }
      this._append(match, entryData);
    }
    var globber = glob("**", globOptions);
    globber.on("error", onGlobError.bind(this));
    globber.on("match", onGlobMatch.bind(this));
    globber.on("end", onGlobEnd.bind(this));
    return this;
  };
  Archiver.prototype.file = function(filepath, data) {
    if (this._state.finalize || this._state.aborted) {
      this.emit("error", new ArchiverError("QUEUECLOSED"));
      return this;
    }
    if (typeof filepath !== "string" || filepath.length === 0) {
      this.emit("error", new ArchiverError("FILEFILEPATHREQUIRED"));
      return this;
    }
    this._append(filepath, data);
    return this;
  };
  Archiver.prototype.glob = function(pattern, options, data) {
    this._pending++;
    options = util4.defaults(options, {
      stat: false
    });
    function onGlobEnd() {
      this._pending--;
      this._maybeFinalize();
    }
    function onGlobError(err) {
      this.emit("error", err);
    }
    function onGlobMatch(match) {
      var entryData = Object.assign({}, data);
      if (options.cwd) {
        entryData.name = match;
        match = globber._makeAbs(match);
      }
      this._append(match, entryData);
    }
    var globber = glob(pattern, options);
    globber.on("error", onGlobError.bind(this));
    globber.on("match", onGlobMatch.bind(this));
    globber.on("end", onGlobEnd.bind(this));
    return this;
  };
  Archiver.prototype.finalize = function() {
    if (this._state.aborted) {
      this.emit("error", new ArchiverError("ABORTED"));
      return this;
    }
    if (this._state.finalize) {
      this.emit("error", new ArchiverError("FINALIZING"));
      return this;
    }
    this._state.finalize = true;
    if (this._pending === 0 && this._queue.idle() && this._statQueue.idle()) {
      this._finalize();
    }
    var self2 = this;
    return new Promise(function(resolve, reject) {
      var errored;
      self2._module.on("end", function() {
        if (!errored) {
          resolve();
        }
      });
      self2._module.on("error", function(err) {
        errored = true;
        reject(err);
      });
    });
  };
  Archiver.prototype.setFormat = function(format11) {
    if (this._format) {
      this.emit("error", new ArchiverError("FORMATSET"));
      return this;
    }
    this._format = format11;
    return this;
  };
  Archiver.prototype.setModule = function(module4) {
    if (this._state.aborted) {
      this.emit("error", new ArchiverError("ABORTED"));
      return this;
    }
    if (this._state.module) {
      this.emit("error", new ArchiverError("MODULESET"));
      return this;
    }
    this._module = module4;
    this._modulePipe();
    return this;
  };
  Archiver.prototype.symlink = function(filepath, target) {
    if (this._state.finalize || this._state.aborted) {
      this.emit("error", new ArchiverError("QUEUECLOSED"));
      return this;
    }
    if (typeof filepath !== "string" || filepath.length === 0) {
      this.emit("error", new ArchiverError("SYMLINKFILEPATHREQUIRED"));
      return this;
    }
    if (typeof target !== "string" || target.length === 0) {
      this.emit("error", new ArchiverError("SYMLINKTARGETREQUIRED", {filepath}));
      return this;
    }
    if (!this._moduleSupports("symlink")) {
      this.emit("error", new ArchiverError("SYMLINKNOTSUPPORTED", {filepath}));
      return this;
    }
    var data = {};
    data.type = "symlink";
    data.name = filepath.replace(/\\/g, "/");
    data.linkname = target.replace(/\\/g, "/");
    data.sourceType = "buffer";
    this._entriesCount++;
    this._queue.push({
      data,
      source: Buffer.concat([])
    });
    return this;
  };
  Archiver.prototype.pointer = function() {
    return this._pointer;
  };
  Archiver.prototype.use = function(plugin) {
    this._streams.push(plugin);
    return this;
  };
  module3.exports = Archiver;
});

// ../../node_modules/.pnpm/archiver@4.0.2/node_modules/archiver/lib/plugins/zip.js
var require_zip2 = __commonJS((exports2, module3) => {
  /**
   * ZIP Format Plugin
   *
   * @module plugins/zip
   * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}
   * @copyright (c) 2012-2014 Chris Talkington, contributors.
   */
  var engine = require_zip_stream();
  var util4 = require_archiver_utils();
  var Zip = function(options) {
    if (!(this instanceof Zip)) {
      return new Zip(options);
    }
    options = this.options = util4.defaults(options, {
      comment: "",
      forceUTC: false,
      store: false
    });
    this.supports = {
      directory: true,
      symlink: true
    };
    this.engine = new engine(options);
  };
  Zip.prototype.append = function(source, data, callback) {
    this.engine.entry(source, data, callback);
  };
  Zip.prototype.finalize = function() {
    this.engine.finalize();
  };
  Zip.prototype.on = function() {
    return this.engine.on.apply(this.engine, arguments);
  };
  Zip.prototype.pipe = function() {
    return this.engine.pipe.apply(this.engine, arguments);
  };
  Zip.prototype.unpipe = function() {
    return this.engine.unpipe.apply(this.engine, arguments);
  };
  module3.exports = Zip;
});

// ../../node_modules/.pnpm/tar-stream@2.1.4/node_modules/tar-stream/headers.js
var require_headers2 = __commonJS((exports2) => {
  var alloc = Buffer.alloc;
  var ZEROS = "0000000000000000000";
  var SEVENS = "7777777777777777777";
  var ZERO_OFFSET = "0".charCodeAt(0);
  var USTAR_MAGIC = Buffer.from("ustar\0", "binary");
  var USTAR_VER = Buffer.from("00", "binary");
  var GNU_MAGIC = Buffer.from("ustar ", "binary");
  var GNU_VER = Buffer.from(" \0", "binary");
  var MASK = parseInt("7777", 8);
  var MAGIC_OFFSET = 257;
  var VERSION_OFFSET = 263;
  var clamp = function(index, len, defaultValue) {
    if (typeof index !== "number")
      return defaultValue;
    index = ~~index;
    if (index >= len)
      return len;
    if (index >= 0)
      return index;
    index += len;
    if (index >= 0)
      return index;
    return 0;
  };
  var toType = function(flag) {
    switch (flag) {
      case 0:
        return "file";
      case 1:
        return "link";
      case 2:
        return "symlink";
      case 3:
        return "character-device";
      case 4:
        return "block-device";
      case 5:
        return "directory";
      case 6:
        return "fifo";
      case 7:
        return "contiguous-file";
      case 72:
        return "pax-header";
      case 55:
        return "pax-global-header";
      case 27:
        return "gnu-long-link-path";
      case 28:
      case 30:
        return "gnu-long-path";
    }
    return null;
  };
  var toTypeflag = function(flag) {
    switch (flag) {
      case "file":
        return 0;
      case "link":
        return 1;
      case "symlink":
        return 2;
      case "character-device":
        return 3;
      case "block-device":
        return 4;
      case "directory":
        return 5;
      case "fifo":
        return 6;
      case "contiguous-file":
        return 7;
      case "pax-header":
        return 72;
    }
    return 0;
  };
  var indexOf = function(block, num, offset, end) {
    for (; offset < end; offset++) {
      if (block[offset] === num)
        return offset;
    }
    return end;
  };
  var cksum = function(block) {
    var sum = 8 * 32;
    for (var i = 0; i < 148; i++)
      sum += block[i];
    for (var j = 156; j < 512; j++)
      sum += block[j];
    return sum;
  };
  var encodeOct = function(val, n) {
    val = val.toString(8);
    if (val.length > n)
      return SEVENS.slice(0, n) + " ";
    else
      return ZEROS.slice(0, n - val.length) + val + " ";
  };
  function parse256(buf) {
    var positive;
    if (buf[0] === 128)
      positive = true;
    else if (buf[0] === 255)
      positive = false;
    else
      return null;
    var tuple = [];
    for (var i = buf.length - 1; i > 0; i--) {
      var byte = buf[i];
      if (positive)
        tuple.push(byte);
      else
        tuple.push(255 - byte);
    }
    var sum = 0;
    var l = tuple.length;
    for (i = 0; i < l; i++) {
      sum += tuple[i] * Math.pow(256, i);
    }
    return positive ? sum : -1 * sum;
  }
  var decodeOct = function(val, offset, length) {
    val = val.slice(offset, offset + length);
    offset = 0;
    if (val[offset] & 128) {
      return parse256(val);
    } else {
      while (offset < val.length && val[offset] === 32)
        offset++;
      var end = clamp(indexOf(val, 32, offset, val.length), val.length, val.length);
      while (offset < end && val[offset] === 0)
        offset++;
      if (end === offset)
        return 0;
      return parseInt(val.slice(offset, end).toString(), 8);
    }
  };
  var decodeStr = function(val, offset, length, encoding) {
    return val.slice(offset, indexOf(val, 0, offset, offset + length)).toString(encoding);
  };
  var addLength = function(str) {
    var len = Buffer.byteLength(str);
    var digits = Math.floor(Math.log(len) / Math.log(10)) + 1;
    if (len + digits >= Math.pow(10, digits))
      digits++;
    return len + digits + str;
  };
  exports2.decodeLongPath = function(buf, encoding) {
    return decodeStr(buf, 0, buf.length, encoding);
  };
  exports2.encodePax = function(opts) {
    var result = "";
    if (opts.name)
      result += addLength(" path=" + opts.name + "\n");
    if (opts.linkname)
      result += addLength(" linkpath=" + opts.linkname + "\n");
    var pax = opts.pax;
    if (pax) {
      for (var key in pax) {
        result += addLength(" " + key + "=" + pax[key] + "\n");
      }
    }
    return Buffer.from(result);
  };
  exports2.decodePax = function(buf) {
    var result = {};
    while (buf.length) {
      var i = 0;
      while (i < buf.length && buf[i] !== 32)
        i++;
      var len = parseInt(buf.slice(0, i).toString(), 10);
      if (!len)
        return result;
      var b = buf.slice(i + 1, len - 1).toString();
      var keyIndex = b.indexOf("=");
      if (keyIndex === -1)
        return result;
      result[b.slice(0, keyIndex)] = b.slice(keyIndex + 1);
      buf = buf.slice(len);
    }
    return result;
  };
  exports2.encode = function(opts) {
    var buf = alloc(512);
    var name = opts.name;
    var prefix = "";
    if (opts.typeflag === 5 && name[name.length - 1] !== "/")
      name += "/";
    if (Buffer.byteLength(name) !== name.length)
      return null;
    while (Buffer.byteLength(name) > 100) {
      var i = name.indexOf("/");
      if (i === -1)
        return null;
      prefix += prefix ? "/" + name.slice(0, i) : name.slice(0, i);
      name = name.slice(i + 1);
    }
    if (Buffer.byteLength(name) > 100 || Buffer.byteLength(prefix) > 155)
      return null;
    if (opts.linkname && Buffer.byteLength(opts.linkname) > 100)
      return null;
    buf.write(name);
    buf.write(encodeOct(opts.mode & MASK, 6), 100);
    buf.write(encodeOct(opts.uid, 6), 108);
    buf.write(encodeOct(opts.gid, 6), 116);
    buf.write(encodeOct(opts.size, 11), 124);
    buf.write(encodeOct(opts.mtime.getTime() / 1e3 | 0, 11), 136);
    buf[156] = ZERO_OFFSET + toTypeflag(opts.type);
    if (opts.linkname)
      buf.write(opts.linkname, 157);
    USTAR_MAGIC.copy(buf, MAGIC_OFFSET);
    USTAR_VER.copy(buf, VERSION_OFFSET);
    if (opts.uname)
      buf.write(opts.uname, 265);
    if (opts.gname)
      buf.write(opts.gname, 297);
    buf.write(encodeOct(opts.devmajor || 0, 6), 329);
    buf.write(encodeOct(opts.devminor || 0, 6), 337);
    if (prefix)
      buf.write(prefix, 345);
    buf.write(encodeOct(cksum(buf), 6), 148);
    return buf;
  };
  exports2.decode = function(buf, filenameEncoding) {
    var typeflag = buf[156] === 0 ? 0 : buf[156] - ZERO_OFFSET;
    var name = decodeStr(buf, 0, 100, filenameEncoding);
    var mode = decodeOct(buf, 100, 8);
    var uid = decodeOct(buf, 108, 8);
    var gid = decodeOct(buf, 116, 8);
    var size = decodeOct(buf, 124, 12);
    var mtime = decodeOct(buf, 136, 12);
    var type = toType(typeflag);
    var linkname = buf[157] === 0 ? null : decodeStr(buf, 157, 100, filenameEncoding);
    var uname = decodeStr(buf, 265, 32);
    var gname = decodeStr(buf, 297, 32);
    var devmajor = decodeOct(buf, 329, 8);
    var devminor = decodeOct(buf, 337, 8);
    var c = cksum(buf);
    if (c === 8 * 32)
      return null;
    if (c !== decodeOct(buf, 148, 8))
      throw new Error("Invalid tar header. Maybe the tar is corrupted or it needs to be gunzipped?");
    if (USTAR_MAGIC.compare(buf, MAGIC_OFFSET, MAGIC_OFFSET + 6) === 0) {
      if (buf[345])
        name = decodeStr(buf, 345, 155, filenameEncoding) + "/" + name;
    } else if (GNU_MAGIC.compare(buf, MAGIC_OFFSET, MAGIC_OFFSET + 6) === 0 && GNU_VER.compare(buf, VERSION_OFFSET, VERSION_OFFSET + 2) === 0) {
    } else {
      throw new Error("Invalid tar header: unknown format.");
    }
    if (typeflag === 0 && name && name[name.length - 1] === "/")
      typeflag = 5;
    return {
      name,
      mode,
      uid,
      gid,
      size,
      mtime: new Date(1e3 * mtime),
      type,
      linkname,
      uname,
      gname,
      devmajor,
      devminor
    };
  };
});

// ../../node_modules/.pnpm/tar-stream@2.1.4/node_modules/tar-stream/extract.js
var require_extract4 = __commonJS((exports2, module3) => {
  var util4 = require("util");
  var bl = require_bl();
  var headers = require_headers2();
  var Writable = require_readable2().Writable;
  var PassThrough = require_readable2().PassThrough;
  var noop = function() {
  };
  var overflow = function(size) {
    size &= 511;
    return size && 512 - size;
  };
  var emptyStream = function(self2, offset) {
    var s = new Source(self2, offset);
    s.end();
    return s;
  };
  var mixinPax = function(header, pax) {
    if (pax.path)
      header.name = pax.path;
    if (pax.linkpath)
      header.linkname = pax.linkpath;
    if (pax.size)
      header.size = parseInt(pax.size, 10);
    header.pax = pax;
    return header;
  };
  var Source = function(self2, offset) {
    this._parent = self2;
    this.offset = offset;
    PassThrough.call(this, {autoDestroy: false});
  };
  util4.inherits(Source, PassThrough);
  Source.prototype.destroy = function(err) {
    this._parent.destroy(err);
  };
  var Extract = function(opts) {
    if (!(this instanceof Extract))
      return new Extract(opts);
    Writable.call(this, opts);
    opts = opts || {};
    this._offset = 0;
    this._buffer = bl();
    this._missing = 0;
    this._partial = false;
    this._onparse = noop;
    this._header = null;
    this._stream = null;
    this._overflow = null;
    this._cb = null;
    this._locked = false;
    this._destroyed = false;
    this._pax = null;
    this._paxGlobal = null;
    this._gnuLongPath = null;
    this._gnuLongLinkPath = null;
    var self2 = this;
    var b = self2._buffer;
    var oncontinue = function() {
      self2._continue();
    };
    var onunlock = function(err) {
      self2._locked = false;
      if (err)
        return self2.destroy(err);
      if (!self2._stream)
        oncontinue();
    };
    var onstreamend = function() {
      self2._stream = null;
      var drain = overflow(self2._header.size);
      if (drain)
        self2._parse(drain, ondrain);
      else
        self2._parse(512, onheader);
      if (!self2._locked)
        oncontinue();
    };
    var ondrain = function() {
      self2._buffer.consume(overflow(self2._header.size));
      self2._parse(512, onheader);
      oncontinue();
    };
    var onpaxglobalheader = function() {
      var size = self2._header.size;
      self2._paxGlobal = headers.decodePax(b.slice(0, size));
      b.consume(size);
      onstreamend();
    };
    var onpaxheader = function() {
      var size = self2._header.size;
      self2._pax = headers.decodePax(b.slice(0, size));
      if (self2._paxGlobal)
        self2._pax = Object.assign({}, self2._paxGlobal, self2._pax);
      b.consume(size);
      onstreamend();
    };
    var ongnulongpath = function() {
      var size = self2._header.size;
      this._gnuLongPath = headers.decodeLongPath(b.slice(0, size), opts.filenameEncoding);
      b.consume(size);
      onstreamend();
    };
    var ongnulonglinkpath = function() {
      var size = self2._header.size;
      this._gnuLongLinkPath = headers.decodeLongPath(b.slice(0, size), opts.filenameEncoding);
      b.consume(size);
      onstreamend();
    };
    var onheader = function() {
      var offset = self2._offset;
      var header;
      try {
        header = self2._header = headers.decode(b.slice(0, 512), opts.filenameEncoding);
      } catch (err) {
        self2.emit("error", err);
      }
      b.consume(512);
      if (!header) {
        self2._parse(512, onheader);
        oncontinue();
        return;
      }
      if (header.type === "gnu-long-path") {
        self2._parse(header.size, ongnulongpath);
        oncontinue();
        return;
      }
      if (header.type === "gnu-long-link-path") {
        self2._parse(header.size, ongnulonglinkpath);
        oncontinue();
        return;
      }
      if (header.type === "pax-global-header") {
        self2._parse(header.size, onpaxglobalheader);
        oncontinue();
        return;
      }
      if (header.type === "pax-header") {
        self2._parse(header.size, onpaxheader);
        oncontinue();
        return;
      }
      if (self2._gnuLongPath) {
        header.name = self2._gnuLongPath;
        self2._gnuLongPath = null;
      }
      if (self2._gnuLongLinkPath) {
        header.linkname = self2._gnuLongLinkPath;
        self2._gnuLongLinkPath = null;
      }
      if (self2._pax) {
        self2._header = header = mixinPax(header, self2._pax);
        self2._pax = null;
      }
      self2._locked = true;
      if (!header.size || header.type === "directory") {
        self2._parse(512, onheader);
        self2.emit("entry", header, emptyStream(self2, offset), onunlock);
        return;
      }
      self2._stream = new Source(self2, offset);
      self2.emit("entry", header, self2._stream, onunlock);
      self2._parse(header.size, onstreamend);
      oncontinue();
    };
    this._onheader = onheader;
    this._parse(512, onheader);
  };
  util4.inherits(Extract, Writable);
  Extract.prototype.destroy = function(err) {
    if (this._destroyed)
      return;
    this._destroyed = true;
    if (err)
      this.emit("error", err);
    this.emit("close");
    if (this._stream)
      this._stream.emit("close");
  };
  Extract.prototype._parse = function(size, onparse) {
    if (this._destroyed)
      return;
    this._offset += size;
    this._missing = size;
    if (onparse === this._onheader)
      this._partial = false;
    this._onparse = onparse;
  };
  Extract.prototype._continue = function() {
    if (this._destroyed)
      return;
    var cb = this._cb;
    this._cb = noop;
    if (this._overflow)
      this._write(this._overflow, void 0, cb);
    else
      cb();
  };
  Extract.prototype._write = function(data, enc, cb) {
    if (this._destroyed)
      return;
    var s = this._stream;
    var b = this._buffer;
    var missing = this._missing;
    if (data.length)
      this._partial = true;
    if (data.length < missing) {
      this._missing -= data.length;
      this._overflow = null;
      if (s)
        return s.write(data, cb);
      b.append(data);
      return cb();
    }
    this._cb = cb;
    this._missing = 0;
    var overflow2 = null;
    if (data.length > missing) {
      overflow2 = data.slice(missing);
      data = data.slice(0, missing);
    }
    if (s)
      s.end(data);
    else
      b.append(data);
    this._overflow = overflow2;
    this._onparse();
  };
  Extract.prototype._final = function(cb) {
    if (this._partial)
      return this.destroy(new Error("Unexpected end of data"));
    cb();
  };
  module3.exports = Extract;
});

// ../../node_modules/.pnpm/tar-stream@2.1.4/node_modules/tar-stream/pack.js
var require_pack4 = __commonJS((exports2, module3) => {
  var constants = require_fs_constants();
  var eos = require_end_of_stream();
  var inherits = require_inherits();
  var alloc = Buffer.alloc;
  var Readable = require_readable2().Readable;
  var Writable = require_readable2().Writable;
  var StringDecoder = require("string_decoder").StringDecoder;
  var headers = require_headers2();
  var DMODE = parseInt("755", 8);
  var FMODE = parseInt("644", 8);
  var END_OF_TAR = alloc(1024);
  var noop = function() {
  };
  var overflow = function(self2, size) {
    size &= 511;
    if (size)
      self2.push(END_OF_TAR.slice(0, 512 - size));
  };
  function modeToType(mode) {
    switch (mode & constants.S_IFMT) {
      case constants.S_IFBLK:
        return "block-device";
      case constants.S_IFCHR:
        return "character-device";
      case constants.S_IFDIR:
        return "directory";
      case constants.S_IFIFO:
        return "fifo";
      case constants.S_IFLNK:
        return "symlink";
    }
    return "file";
  }
  var Sink = function(to) {
    Writable.call(this);
    this.written = 0;
    this._to = to;
    this._destroyed = false;
  };
  inherits(Sink, Writable);
  Sink.prototype._write = function(data, enc, cb) {
    this.written += data.length;
    if (this._to.push(data))
      return cb();
    this._to._drain = cb;
  };
  Sink.prototype.destroy = function() {
    if (this._destroyed)
      return;
    this._destroyed = true;
    this.emit("close");
  };
  var LinkSink = function() {
    Writable.call(this);
    this.linkname = "";
    this._decoder = new StringDecoder("utf-8");
    this._destroyed = false;
  };
  inherits(LinkSink, Writable);
  LinkSink.prototype._write = function(data, enc, cb) {
    this.linkname += this._decoder.write(data);
    cb();
  };
  LinkSink.prototype.destroy = function() {
    if (this._destroyed)
      return;
    this._destroyed = true;
    this.emit("close");
  };
  var Void = function() {
    Writable.call(this);
    this._destroyed = false;
  };
  inherits(Void, Writable);
  Void.prototype._write = function(data, enc, cb) {
    cb(new Error("No body allowed for this entry"));
  };
  Void.prototype.destroy = function() {
    if (this._destroyed)
      return;
    this._destroyed = true;
    this.emit("close");
  };
  var Pack = function(opts) {
    if (!(this instanceof Pack))
      return new Pack(opts);
    Readable.call(this, opts);
    this._drain = noop;
    this._finalized = false;
    this._finalizing = false;
    this._destroyed = false;
    this._stream = null;
  };
  inherits(Pack, Readable);
  Pack.prototype.entry = function(header, buffer, callback) {
    if (this._stream)
      throw new Error("already piping an entry");
    if (this._finalized || this._destroyed)
      return;
    if (typeof buffer === "function") {
      callback = buffer;
      buffer = null;
    }
    if (!callback)
      callback = noop;
    var self2 = this;
    if (!header.size || header.type === "symlink")
      header.size = 0;
    if (!header.type)
      header.type = modeToType(header.mode);
    if (!header.mode)
      header.mode = header.type === "directory" ? DMODE : FMODE;
    if (!header.uid)
      header.uid = 0;
    if (!header.gid)
      header.gid = 0;
    if (!header.mtime)
      header.mtime = new Date();
    if (typeof buffer === "string")
      buffer = Buffer.from(buffer);
    if (Buffer.isBuffer(buffer)) {
      header.size = buffer.length;
      this._encode(header);
      var ok = this.push(buffer);
      overflow(self2, header.size);
      if (ok)
        process.nextTick(callback);
      else
        this._drain = callback;
      return new Void();
    }
    if (header.type === "symlink" && !header.linkname) {
      var linkSink = new LinkSink();
      eos(linkSink, function(err) {
        if (err) {
          self2.destroy();
          return callback(err);
        }
        header.linkname = linkSink.linkname;
        self2._encode(header);
        callback();
      });
      return linkSink;
    }
    this._encode(header);
    if (header.type !== "file" && header.type !== "contiguous-file") {
      process.nextTick(callback);
      return new Void();
    }
    var sink = new Sink(this);
    this._stream = sink;
    eos(sink, function(err) {
      self2._stream = null;
      if (err) {
        self2.destroy();
        return callback(err);
      }
      if (sink.written !== header.size) {
        self2.destroy();
        return callback(new Error("size mismatch"));
      }
      overflow(self2, header.size);
      if (self2._finalizing)
        self2.finalize();
      callback();
    });
    return sink;
  };
  Pack.prototype.finalize = function() {
    if (this._stream) {
      this._finalizing = true;
      return;
    }
    if (this._finalized)
      return;
    this._finalized = true;
    this.push(END_OF_TAR);
    this.push(null);
  };
  Pack.prototype.destroy = function(err) {
    if (this._destroyed)
      return;
    this._destroyed = true;
    if (err)
      this.emit("error", err);
    this.emit("close");
    if (this._stream && this._stream.destroy)
      this._stream.destroy();
  };
  Pack.prototype._encode = function(header) {
    if (!header.pax) {
      var buf = headers.encode(header);
      if (buf) {
        this.push(buf);
        return;
      }
    }
    this._encodePax(header);
  };
  Pack.prototype._encodePax = function(header) {
    var paxHeader = headers.encodePax({
      name: header.name,
      linkname: header.linkname,
      pax: header.pax
    });
    var newHeader = {
      name: "PaxHeader",
      mode: header.mode,
      uid: header.uid,
      gid: header.gid,
      size: paxHeader.length,
      mtime: header.mtime,
      type: "pax-header",
      linkname: header.linkname && "PaxHeader",
      uname: header.uname,
      gname: header.gname,
      devmajor: header.devmajor,
      devminor: header.devminor
    };
    this.push(headers.encode(newHeader));
    this.push(paxHeader);
    overflow(this, paxHeader.length);
    newHeader.size = header.size;
    newHeader.type = header.type;
    this.push(headers.encode(newHeader));
  };
  Pack.prototype._read = function(n) {
    var drain = this._drain;
    this._drain = noop;
    drain();
  };
  module3.exports = Pack;
});

// ../../node_modules/.pnpm/tar-stream@2.1.4/node_modules/tar-stream/index.js
var require_tar_stream2 = __commonJS((exports2) => {
  exports2.extract = require_extract4();
  exports2.pack = require_pack4();
});

// ../../node_modules/.pnpm/archiver@4.0.2/node_modules/archiver/lib/plugins/tar.js
var require_tar4 = __commonJS((exports2, module3) => {
  /**
   * TAR Format Plugin
   *
   * @module plugins/tar
   * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}
   * @copyright (c) 2012-2014 Chris Talkington, contributors.
   */
  var zlib = require("zlib");
  var engine = require_tar_stream2();
  var util4 = require_archiver_utils();
  var Tar = function(options) {
    if (!(this instanceof Tar)) {
      return new Tar(options);
    }
    options = this.options = util4.defaults(options, {
      gzip: false
    });
    if (typeof options.gzipOptions !== "object") {
      options.gzipOptions = {};
    }
    this.supports = {
      directory: true,
      symlink: true
    };
    this.engine = engine.pack(options);
    this.compressor = false;
    if (options.gzip) {
      this.compressor = zlib.createGzip(options.gzipOptions);
      this.compressor.on("error", this._onCompressorError.bind(this));
    }
  };
  Tar.prototype._onCompressorError = function(err) {
    this.engine.emit("error", err);
  };
  Tar.prototype.append = function(source, data, callback) {
    var self2 = this;
    data.mtime = data.date;
    function append(err, sourceBuffer) {
      if (err) {
        callback(err);
        return;
      }
      self2.engine.entry(data, sourceBuffer, function(err2) {
        callback(err2, data);
      });
    }
    if (data.sourceType === "buffer") {
      append(null, source);
    } else if (data.sourceType === "stream" && data.stats) {
      data.size = data.stats.size;
      var entry = self2.engine.entry(data, function(err) {
        callback(err, data);
      });
      source.pipe(entry);
    } else if (data.sourceType === "stream") {
      util4.collectStream(source, append);
    }
  };
  Tar.prototype.finalize = function() {
    this.engine.finalize();
  };
  Tar.prototype.on = function() {
    return this.engine.on.apply(this.engine, arguments);
  };
  Tar.prototype.pipe = function(destination, options) {
    if (this.compressor) {
      return this.engine.pipe.apply(this.engine, [this.compressor]).pipe(destination, options);
    } else {
      return this.engine.pipe.apply(this.engine, arguments);
    }
  };
  Tar.prototype.unpipe = function() {
    if (this.compressor) {
      return this.compressor.unpipe.apply(this.compressor, arguments);
    } else {
      return this.engine.unpipe.apply(this.engine, arguments);
    }
  };
  module3.exports = Tar;
});

// ../../node_modules/.pnpm/archiver@4.0.2/node_modules/archiver/lib/plugins/json.js
var require_json4 = __commonJS((exports2, module3) => {
  /**
   * JSON Format Plugin
   *
   * @module plugins/json
   * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}
   * @copyright (c) 2012-2014 Chris Talkington, contributors.
   */
  var inherits = require("util").inherits;
  var Transform = require_readable2().Transform;
  var crc32 = require_buffer_crc32();
  var util4 = require_archiver_utils();
  var Json = function(options) {
    if (!(this instanceof Json)) {
      return new Json(options);
    }
    options = this.options = util4.defaults(options, {});
    Transform.call(this, options);
    this.supports = {
      directory: true,
      symlink: true
    };
    this.files = [];
  };
  inherits(Json, Transform);
  Json.prototype._transform = function(chunk, encoding, callback) {
    callback(null, chunk);
  };
  Json.prototype._writeStringified = function() {
    var fileString = JSON.stringify(this.files);
    this.write(fileString);
  };
  Json.prototype.append = function(source, data, callback) {
    var self2 = this;
    data.crc32 = 0;
    function onend(err, sourceBuffer) {
      if (err) {
        callback(err);
        return;
      }
      data.size = sourceBuffer.length || 0;
      data.crc32 = crc32.unsigned(sourceBuffer);
      self2.files.push(data);
      callback(null, data);
    }
    if (data.sourceType === "buffer") {
      onend(null, source);
    } else if (data.sourceType === "stream") {
      util4.collectStream(source, onend);
    }
  };
  Json.prototype.finalize = function() {
    this._writeStringified();
    this.end();
  };
  module3.exports = Json;
});

// ../../node_modules/.pnpm/archiver@4.0.2/node_modules/archiver/index.js
var require_archiver2 = __commonJS((exports2, module3) => {
  /**
   * Archiver Vending
   *
   * @ignore
   * @license [MIT]{@link https://github.com/archiverjs/node-archiver/blob/master/LICENSE}
   * @copyright (c) 2012-2014 Chris Talkington, contributors.
   */
  var Archiver = require_core6();
  var formats = {};
  var vending = function(format11, options) {
    return vending.create(format11, options);
  };
  vending.create = function(format11, options) {
    if (formats[format11]) {
      var instance = new Archiver(format11, options);
      instance.setFormat(format11);
      instance.setModule(new formats[format11](options));
      return instance;
    } else {
      throw new Error("create(" + format11 + "): format not registered");
    }
  };
  vending.registerFormat = function(format11, module4) {
    if (formats[format11]) {
      throw new Error("register(" + format11 + "): format already registered");
    }
    if (typeof module4 !== "function") {
      throw new Error("register(" + format11 + "): format module invalid");
    }
    if (typeof module4.prototype.append !== "function" || typeof module4.prototype.finalize !== "function") {
      throw new Error("register(" + format11 + "): format module missing methods");
    }
    formats[format11] = module4;
  };
  vending.registerFormat("zip", require_zip2());
  vending.registerFormat("tar", require_tar4());
  vending.registerFormat("json", require_json4());
  module3.exports = vending;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/utils/maskSchema.js
var require_maskSchema2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.mapScalarValues = exports2.maskSchema = void 0;
  function maskSchema(schema) {
    const regex = /url\s*=\s*.+/;
    return schema.split("\n").map((line) => {
      const match = regex.exec(line);
      if (match) {
        return `${line.slice(0, match.index)}url = "***"`;
      }
      return line;
    }).join("\n");
  }
  exports2.maskSchema = maskSchema;
  function mapScalarValues(obj, mapper) {
    const result = {};
    for (const key in obj) {
      if (typeof obj[key] === "object") {
        result[key] = mapScalarValues(obj[key], mapper);
      } else {
        result[key] = mapper(obj[key]);
      }
    }
    return result;
  }
  exports2.mapScalarValues = mapScalarValues;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/sendPanic.js
var require_sendPanic2 = __commonJS((exports2) => {
  "use strict";
  var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    Object.defineProperty(o, k2, {enumerable: true, get: function() {
      return m[k];
    }});
  } : function(o, m, k, k2) {
    if (k2 === void 0)
      k2 = k;
    o[k2] = m[k];
  });
  var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {enumerable: true, value: v});
  } : function(o, v) {
    o["default"] = v;
  });
  var __importStar = exports2 && exports2.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.makeErrorReportCompleted = exports2.createErrorReport = exports2.ErrorKind = exports2.sendPanic = void 0;
  const get_platform_1 = require_dist21();
  const archiver_1 = __importDefault(require_archiver2());
  const debug_1 = __importDefault(require_dist22());
  const fs_1 = __importDefault(require("fs"));
  const globby_1 = __importDefault(require_globby());
  const node_fetch_1 = __importDefault(require_lib2());
  const os_1 = __importDefault(require("os"));
  const path_1 = __importDefault(require("path"));
  const strip_ansi_1 = __importDefault(require_strip_ansi());
  const tmp_1 = __importDefault(require_tmp());
  const checkpoint3 = __importStar(require_dist10());
  const maskSchema_1 = require_maskSchema2();
  const panic_1 = require_panic2();
  const fetch_engine_1 = require_dist24();
  const IntrospectionEngine_1 = require_IntrospectionEngine2();
  const debug3 = debug_1.default("sendPanic");
  tmp_1.default.setGracefulCleanup();
  async function sendPanic(error, cliVersion, binaryVersion) {
    try {
      let schema;
      let maskedSchema;
      if (error.schemaPath) {
        schema = fs_1.default.readFileSync(error.schemaPath, "utf-8");
      }
      if (error.schema) {
        schema = error.schema;
      }
      if (schema) {
        maskedSchema = maskSchema_1.maskSchema(schema);
      }
      let sqlDump;
      let dbVersion;
      const schemaOrUrl = error.schema || error.introspectionUrl;
      if (error.area === panic_1.ErrorArea.INTROSPECTION_CLI && schemaOrUrl) {
        let engine;
        try {
          engine = new IntrospectionEngine_1.IntrospectionEngine();
          sqlDump = await engine.getDatabaseDescription(schemaOrUrl);
          dbVersion = await engine.getDatabaseVersion(schemaOrUrl);
          engine.stop();
        } catch (e) {
          debug3(e);
          if (engine && engine.isRunning) {
            engine.stop();
          }
        }
      }
      const migrateRequest = error.request ? JSON.stringify(maskSchema_1.mapScalarValues(error.request, (value) => {
        if (typeof value === "string") {
          return maskSchema_1.maskSchema(value);
        }
        return value;
      })) : void 0;
      const params = {
        area: error.area,
        kind: ErrorKind.RUST_PANIC,
        cliVersion,
        binaryVersion,
        command: getCommand(),
        jsStackTrace: strip_ansi_1.default(error.stack || error.message),
        rustStackTrace: error.rustStack,
        operatingSystem: `${os_1.default.arch()} ${os_1.default.platform()} ${os_1.default.release()}`,
        platform: await get_platform_1.getPlatform(),
        liftRequest: migrateRequest,
        schemaFile: maskedSchema,
        fingerprint: await checkpoint3.getSignature(),
        sqlDump,
        dbVersion
      };
      const signedUrl = await createErrorReport(params);
      if (error.schemaPath) {
        const zip = await makeErrorZip(error);
        await uploadZip(zip, signedUrl);
      }
      const id = await makeErrorReportCompleted(signedUrl);
      return id;
    } catch (e) {
      debug3(e);
    }
  }
  exports2.sendPanic = sendPanic;
  function getCommand() {
    if (process.argv[2] === "introspect") {
      return "introspect";
    }
    return process.argv.slice(2).join(" ");
  }
  async function uploadZip(zip, url) {
    return await node_fetch_1.default(url, {
      method: "PUT",
      agent: fetch_engine_1.getProxyAgent(url),
      headers: {
        "Content-Length": String(zip.byteLength)
      },
      body: zip
    });
  }
  async function makeErrorZip(error) {
    if (!error.schemaPath) {
      throw new Error(`Can't make zip without schema path`);
    }
    const schemaDir = path_1.default.dirname(error.schemaPath);
    const tmpFileObj = tmp_1.default.fileSync();
    const outputFile = fs_1.default.createWriteStream(tmpFileObj.name);
    const zip = archiver_1.default("zip", {zlib: {level: 9}});
    zip.pipe(outputFile);
    const schemaFile = maskSchema_1.maskSchema(fs_1.default.readFileSync(error.schemaPath, "utf-8"));
    zip.append(schemaFile, {name: path_1.default.basename(error.schemaPath)});
    if (fs_1.default.existsSync(schemaDir)) {
      const filePaths = await globby_1.default("migrations/**/*", {
        cwd: schemaDir
      });
      for (const filePath of filePaths) {
        let file = fs_1.default.readFileSync(path_1.default.resolve(schemaDir, filePath), "utf-8");
        if (filePath.endsWith("schema.prisma") || filePath.endsWith(path_1.default.basename(error.schemaPath))) {
          file = maskSchema_1.maskSchema(file);
        }
        zip.append(file, {name: path_1.default.basename(filePath)});
      }
    }
    zip.finalize();
    return new Promise((resolve, reject) => {
      outputFile.on("close", () => {
        const buffer = fs_1.default.readFileSync(tmpFileObj.name);
        resolve(buffer);
      });
      zip.on("error", (err) => {
        reject(err);
      });
    });
  }
  var ErrorKind;
  (function(ErrorKind2) {
    ErrorKind2["JS_ERROR"] = "JS_ERROR";
    ErrorKind2["RUST_PANIC"] = "RUST_PANIC";
  })(ErrorKind = exports2.ErrorKind || (exports2.ErrorKind = {}));
  async function createErrorReport(data) {
    const result = await request(`mutation ($data: CreateErrorReportInput!) {
    createErrorReport(data: $data)
  }`, {data});
    return result.createErrorReport;
  }
  exports2.createErrorReport = createErrorReport;
  async function makeErrorReportCompleted(signedUrl) {
    const result = await request(`mutation ($signedUrl: String!) {
  markErrorReportCompleted(signedUrl: $signedUrl)
}`, {signedUrl});
    return result.markErrorReportCompleted;
  }
  exports2.makeErrorReportCompleted = makeErrorReportCompleted;
  async function request(query, variables) {
    const url = "https://error-reports.prisma.sh/";
    const body = JSON.stringify({
      query,
      variables
    });
    return await node_fetch_1.default(url, {
      method: "POST",
      agent: fetch_engine_1.getProxyAgent(url),
      body,
      headers: {
        Accept: "application/json",
        "Content-Type": "application/json"
      }
    }).then((res) => res.json()).then((res) => {
      if (res.errors) {
        throw new Error(JSON.stringify(res.errors));
      }
      return res.data;
    });
  }
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/drawBox.js
var require_drawBox2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.drawBox = void 0;
  const chalk_1 = __importDefault(require_source());
  const cli_truncate_1 = __importDefault(require_cli_truncate());
  const string_width_1 = __importDefault(require_string_width());
  const chars = {
    topLeft: "┌",
    topRight: "┐",
    bottomRight: "┘",
    bottomLeft: "└",
    vertical: "│",
    horizontal: "─"
  };
  function maxLineLength(str) {
    return str.split("\n").reduce((max, curr) => Math.max(max, string_width_1.default(curr)), 0) + 2;
  }
  function drawBox3({title, width, height, str, horizontalPadding, verticalPadding}) {
    horizontalPadding = horizontalPadding || 0;
    verticalPadding = verticalPadding || 0;
    width = width || maxLineLength(str) + horizontalPadding * 2;
    const topLine = title ? chalk_1.default.grey(chars.topLeft + chars.horizontal) + " " + chalk_1.default.reset.bold(title) + " " + chalk_1.default.grey(chars.horizontal.repeat(width - title.length - 2 - 3) + chars.topRight) + chalk_1.default.reset() : chalk_1.default.grey(chars.topLeft + chars.horizontal) + chalk_1.default.grey(chars.horizontal.repeat(width - 3) + chars.topRight);
    const bottomLine = chars.bottomLeft + chars.horizontal.repeat(width - 2) + chars.bottomRight;
    const lines = str.split("\n");
    if (lines.length < height) {
      lines.push(...new Array(height - lines.length).fill(""));
    }
    const mappedLines = lines.slice(-height).map((l) => {
      const lineWidth = Math.min(string_width_1.default(l), width);
      const paddingRight = Math.max(width - lineWidth - 2, 0);
      return `${chalk_1.default.grey(chars.vertical)}${" ".repeat(horizontalPadding)}${chalk_1.default.reset(cli_truncate_1.default(l, width - 2))}${" ".repeat(paddingRight - horizontalPadding)}${chalk_1.default.grey(chars.vertical)}`;
    }).join("\n");
    return chalk_1.default.grey(topLine + "\n" + mappedLines + "\n" + bottomLine);
  }
  exports2.drawBox = drawBox3;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/isCi.js
var require_isCi2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.isCi = void 0;
  const is_ci_1 = require_is_ci();
  exports2.isCi = () => {
    return !process.stdout.isTTY || is_ci_1.isCi || Boolean(process.env.GITHUB_ACTIONS);
  };
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/cli/Help.js
var require_Help2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.HelpError = exports2.unknownCommand = void 0;
  const chalk_1 = __importDefault(require_source());
  function unknownCommand2(helpTemplate, cmd) {
    return new HelpError11(`
${chalk_1.default.bold.red(`!`)} Unknown command "${cmd}"
${helpTemplate}`);
  }
  exports2.unknownCommand = unknownCommand2;
  class HelpError11 extends Error {
    constructor(msg) {
      super(msg);
      Object.setPrototypeOf(this, HelpError11.prototype);
    }
  }
  exports2.HelpError = HelpError11;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/cli/getSchema.js
var require_getSchema2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getSchemaSync = exports2.getSchemaDirSync = exports2.getSchemaPathFromPackageJsonSync = exports2.getSchemaPathSyncInternal = exports2.getSchemaPathSync = exports2.getSchema = exports2.getSchemaDir = exports2.getRelativeSchemaPath = exports2.getSchemaPathFromPackageJson = exports2.getSchemaPathInternal = exports2.getSchemaPath = void 0;
  const chalk_1 = __importDefault(require_source());
  const execa_1 = __importDefault(require_execa2());
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const read_pkg_up_1 = __importDefault(require_read_pkg_up());
  const util_1 = require("util");
  const exists = util_1.promisify(fs_1.default.exists);
  const readFile2 = util_1.promisify(fs_1.default.readFile);
  async function getSchemaPath8(schemaPathFromArgs) {
    return getSchemaPathInternal(schemaPathFromArgs, {
      cwd: process.cwd()
    });
  }
  exports2.getSchemaPath = getSchemaPath8;
  async function getSchemaPathInternal(schemaPathFromArgs, opts = {
    cwd: process.cwd()
  }) {
    var _a, _b;
    if (schemaPathFromArgs) {
      const customSchemaPath = await getAbsoluteSchemaPath(path_1.default.resolve(schemaPathFromArgs));
      if (!customSchemaPath) {
        throw new Error(`Provided --schema at ${schemaPathFromArgs} doesn't exist.`);
      }
      return customSchemaPath;
    }
    const schemaPath = (_b = (_a = await getSchemaPathFromPackageJson(opts.cwd)) !== null && _a !== void 0 ? _a : await getRelativeSchemaPath(opts.cwd)) !== null && _b !== void 0 ? _b : await resolveYarnSchema(opts.cwd);
    if (schemaPath) {
      return schemaPath;
    }
    return null;
  }
  exports2.getSchemaPathInternal = getSchemaPathInternal;
  async function getSchemaPathFromPackageJson(cwd) {
    var _a, _b;
    const pkgJson = await read_pkg_up_1.default({cwd});
    const schemaPathFromPkgJson = (_b = (_a = pkgJson === null || pkgJson === void 0 ? void 0 : pkgJson.packageJson) === null || _a === void 0 ? void 0 : _a.prisma) === null || _b === void 0 ? void 0 : _b.schema;
    if (!schemaPathFromPkgJson || !pkgJson) {
      return null;
    }
    if (typeof schemaPathFromPkgJson !== "string") {
      throw new Error(`Provided schema path \`${schemaPathFromPkgJson}\` from \`${path_1.default.relative(cwd, pkgJson.path)}\` must be of type string`);
    }
    const absoluteSchemaPath = path_1.default.isAbsolute(schemaPathFromPkgJson) ? schemaPathFromPkgJson : path_1.default.resolve(path_1.default.dirname(pkgJson.path), schemaPathFromPkgJson);
    if (await exists(absoluteSchemaPath) === false) {
      throw new Error(`Provided schema path \`${path_1.default.relative(cwd, absoluteSchemaPath)}\` from \`${path_1.default.relative(cwd, pkgJson.path)}\` doesn't exist.`);
    }
    return absoluteSchemaPath;
  }
  exports2.getSchemaPathFromPackageJson = getSchemaPathFromPackageJson;
  async function resolveYarnSchema(cwd) {
    var _a, _b, _c;
    if ((_a = process.env.npm_config_user_agent) === null || _a === void 0 ? void 0 : _a.includes("yarn")) {
      try {
        const {stdout: version} = await execa_1.default.command("yarn --version", {
          cwd
        });
        if (version.startsWith("2")) {
          return null;
        }
        const {stdout} = await execa_1.default.command("yarn workspaces info --json", {
          cwd
        });
        const json = getJson(stdout);
        const workspaces = Object.values(json);
        const workspaceRootDir = await findWorkspaceRoot(cwd);
        if (!workspaceRootDir) {
          return null;
        }
        for (const workspace of workspaces) {
          const workspacePath = path_1.default.join(workspaceRootDir, workspace.location);
          const workspaceSchemaPath = (_b = getSchemaPathFromPackageJsonSync(workspacePath)) !== null && _b !== void 0 ? _b : getRelativeSchemaPathSync(workspacePath);
          if (workspaceSchemaPath) {
            return workspaceSchemaPath;
          }
        }
        const workspaceSchemaPathFromRoot = (_c = getSchemaPathFromPackageJsonSync(workspaceRootDir)) !== null && _c !== void 0 ? _c : getRelativeSchemaPathSync(workspaceRootDir);
        if (workspaceSchemaPathFromRoot) {
          return workspaceSchemaPathFromRoot;
        }
      } catch (e) {
        return null;
      }
    }
    return null;
  }
  function resolveYarnSchemaSync(cwd) {
    var _a, _b, _c;
    if ((_a = process.env.npm_config_user_agent) === null || _a === void 0 ? void 0 : _a.includes("yarn")) {
      try {
        const {stdout: version} = execa_1.default.commandSync("yarn --version", {
          cwd
        });
        if (version.startsWith("2")) {
          return null;
        }
        const {stdout} = execa_1.default.commandSync("yarn workspaces info --json", {
          cwd
        });
        const json = getJson(stdout);
        const workspaces = Object.values(json);
        const workspaceRootDir = findWorkspaceRootSync(cwd);
        if (!workspaceRootDir) {
          return null;
        }
        for (const workspace of workspaces) {
          const workspacePath = path_1.default.join(workspaceRootDir, workspace.location);
          const workspaceSchemaPath = (_b = getSchemaPathFromPackageJsonSync(workspacePath)) !== null && _b !== void 0 ? _b : getRelativeSchemaPathSync(workspacePath);
          if (workspaceSchemaPath) {
            return workspaceSchemaPath;
          }
        }
        const workspaceSchemaPathFromRoot = (_c = getSchemaPathFromPackageJsonSync(workspaceRootDir)) !== null && _c !== void 0 ? _c : getRelativeSchemaPathSync(workspaceRootDir);
        if (workspaceSchemaPathFromRoot) {
          return workspaceSchemaPathFromRoot;
        }
      } catch (e) {
        return null;
      }
    }
    return null;
  }
  async function getAbsoluteSchemaPath(schemaPath) {
    if (await exists(schemaPath)) {
      return schemaPath;
    }
    return null;
  }
  async function getRelativeSchemaPath(cwd) {
    let schemaPath = path_1.default.join(cwd, "schema.prisma");
    if (await exists(schemaPath)) {
      return schemaPath;
    }
    schemaPath = path_1.default.join(cwd, `prisma/schema.prisma`);
    if (await exists(schemaPath)) {
      return schemaPath;
    }
    return null;
  }
  exports2.getRelativeSchemaPath = getRelativeSchemaPath;
  async function getSchemaDir(schemaPathFromArgs) {
    if (schemaPathFromArgs) {
      return path_1.default.resolve(path_1.default.dirname(schemaPathFromArgs));
    }
    const schemaPath = await getSchemaPath8(schemaPathFromArgs);
    if (!schemaPath) {
      return null;
    }
    return path_1.default.dirname(schemaPath);
  }
  exports2.getSchemaDir = getSchemaDir;
  async function getSchema3(schemaPathFromArgs) {
    const schemaPath = await getSchemaPath8(schemaPathFromArgs);
    if (!schemaPath) {
      throw new Error(`Could not find a ${chalk_1.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk_1.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk_1.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
    }
    return readFile2(schemaPath, "utf-8");
  }
  exports2.getSchema = getSchema3;
  function getSchemaPathSync(schemaPathFromArgs) {
    return getSchemaPathSyncInternal(schemaPathFromArgs, {
      cwd: process.cwd()
    });
  }
  exports2.getSchemaPathSync = getSchemaPathSync;
  function getSchemaPathSyncInternal(schemaPathFromArgs, opts = {
    cwd: process.cwd()
  }) {
    var _a, _b;
    if (schemaPathFromArgs) {
      const customSchemaPath = getAbsoluteSchemaPathSync(path_1.default.resolve(schemaPathFromArgs));
      if (!customSchemaPath) {
        throw new Error(`Provided --schema at ${schemaPathFromArgs} doesn't exist.`);
      }
      return customSchemaPath;
    }
    const schemaPath = (_b = (_a = getSchemaPathFromPackageJsonSync(opts.cwd)) !== null && _a !== void 0 ? _a : getRelativeSchemaPathSync(opts.cwd)) !== null && _b !== void 0 ? _b : resolveYarnSchemaSync(opts.cwd);
    if (schemaPath) {
      return schemaPath;
    }
    return null;
  }
  exports2.getSchemaPathSyncInternal = getSchemaPathSyncInternal;
  function getSchemaPathFromPackageJsonSync(cwd) {
    var _a, _b;
    const pkgJson = read_pkg_up_1.default.sync({cwd});
    const schemaPathFromPkgJson = (_b = (_a = pkgJson === null || pkgJson === void 0 ? void 0 : pkgJson.packageJson) === null || _a === void 0 ? void 0 : _a.prisma) === null || _b === void 0 ? void 0 : _b.schema;
    if (!schemaPathFromPkgJson || !pkgJson) {
      return null;
    }
    if (typeof schemaPathFromPkgJson !== "string") {
      throw new Error(`Provided schema path \`${schemaPathFromPkgJson}\` from \`${path_1.default.relative(cwd, pkgJson.path)}\` must be of type string`);
    }
    const absoluteSchemaPath = path_1.default.isAbsolute(schemaPathFromPkgJson) ? schemaPathFromPkgJson : path_1.default.resolve(path_1.default.dirname(pkgJson.path), schemaPathFromPkgJson);
    if (fs_1.default.existsSync(absoluteSchemaPath) === false) {
      throw new Error(`Provided schema path \`${path_1.default.relative(cwd, absoluteSchemaPath)}\` from \`${path_1.default.relative(cwd, pkgJson.path)}\` doesn't exist.`);
    }
    return absoluteSchemaPath;
  }
  exports2.getSchemaPathFromPackageJsonSync = getSchemaPathFromPackageJsonSync;
  function getAbsoluteSchemaPathSync(schemaPath) {
    if (fs_1.default.existsSync(schemaPath)) {
      return schemaPath;
    }
    return null;
  }
  function getRelativeSchemaPathSync(cwd) {
    let schemaPath = path_1.default.join(cwd, "schema.prisma");
    if (fs_1.default.existsSync(schemaPath)) {
      return schemaPath;
    }
    schemaPath = path_1.default.join(cwd, `prisma/schema.prisma`);
    if (fs_1.default.existsSync(schemaPath)) {
      return schemaPath;
    }
    return null;
  }
  function getSchemaDirSync(schemaPathFromArgs) {
    if (schemaPathFromArgs) {
      return path_1.default.resolve(path_1.default.dirname(schemaPathFromArgs));
    }
    const schemaPath = getSchemaPathSync(schemaPathFromArgs);
    if (schemaPath) {
      return path_1.default.dirname(schemaPath);
    }
    return null;
  }
  exports2.getSchemaDirSync = getSchemaDirSync;
  function getSchemaSync(schemaPathFromArgs) {
    const schemaPath = getSchemaPathSync(schemaPathFromArgs);
    if (!schemaPath) {
      throw new Error(`Could not find a ${chalk_1.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk_1.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk_1.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
    }
    return fs_1.default.readFileSync(schemaPath, "utf-8");
  }
  exports2.getSchemaSync = getSchemaSync;
  function getJson(stdout) {
    const firstCurly = stdout.indexOf("{");
    const lastCurly = stdout.lastIndexOf("}");
    const sliced = stdout.slice(firstCurly, lastCurly + 1);
    return JSON.parse(sliced);
  }
  function isPkgJsonWorkspaceRoot(pkgJson) {
    const workspaces = pkgJson.workspaces;
    if (!workspaces) {
      return false;
    }
    return Array.isArray(workspaces) || workspaces.packages !== void 0;
  }
  async function isNearestPkgJsonWorkspaceRoot(cwd) {
    const pkgJson = await read_pkg_up_1.default({cwd});
    if (!pkgJson) {
      return null;
    }
    return {
      isRoot: isPkgJsonWorkspaceRoot(pkgJson.packageJson),
      path: pkgJson.path
    };
  }
  function isNearestPkgJsonWorkspaceRootSync(cwd) {
    const pkgJson = read_pkg_up_1.default.sync({cwd});
    if (!pkgJson) {
      return null;
    }
    return {
      isRoot: isPkgJsonWorkspaceRoot(pkgJson.packageJson),
      path: pkgJson.path
    };
  }
  async function findWorkspaceRoot(cwd) {
    let pkgJson = await isNearestPkgJsonWorkspaceRoot(cwd);
    if (!pkgJson) {
      return null;
    }
    if (pkgJson.isRoot === true) {
      return path_1.default.dirname(pkgJson.path);
    }
    const pkgJsonParentDir = path_1.default.dirname(path_1.default.dirname(pkgJson.path));
    pkgJson = await isNearestPkgJsonWorkspaceRoot(pkgJsonParentDir);
    if (!pkgJson || pkgJson.isRoot === false) {
      return null;
    }
    return path_1.default.dirname(pkgJson.path);
  }
  function findWorkspaceRootSync(cwd) {
    let pkgJson = isNearestPkgJsonWorkspaceRootSync(cwd);
    if (!pkgJson) {
      return null;
    }
    if (pkgJson.isRoot === true) {
      return path_1.default.dirname(pkgJson.path);
    }
    const pkgJsonParentDir = path_1.default.dirname(path_1.default.dirname(pkgJson.path));
    pkgJson = isNearestPkgJsonWorkspaceRootSync(pkgJsonParentDir);
    if (!pkgJson || pkgJson.isRoot === false) {
      return null;
    }
    return path_1.default.dirname(pkgJson.path);
  }
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/cli/utils.js
var require_utils8 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.isError = exports2.arg = exports2.format = void 0;
  const strip_indent_1 = __importDefault(require_strip_indent());
  const arg_1 = __importDefault(require_arg());
  function format11(input = "") {
    return strip_indent_1.default(input).trimRight() + "\n";
  }
  exports2.format = format11;
  function arg11(argv, spec, stopAtPositional = true, permissive = false) {
    try {
      return arg_1.default(spec, {argv, stopAtPositional, permissive});
    } catch (err) {
      return err;
    }
  }
  exports2.arg = arg11;
  function isError7(result) {
    return result instanceof Error;
  }
  exports2.isError = isError7;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/cli/hashes.js
var require_hashes2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.getCLIPathHash = exports2.getProjectHash = void 0;
  const getSchema_1 = require_getSchema2();
  const utils_1 = require_utils8();
  const crypto_1 = __importDefault(require("crypto"));
  async function getProjectHash3() {
    const args2 = utils_1.arg(process.argv.slice(3), {"--schema": String});
    let projectPath = await getSchema_1.getSchemaPath(args2["--schema"]);
    projectPath = projectPath || process.cwd();
    return crypto_1.default.createHash("sha256").update(projectPath).digest("hex").substring(0, 8);
  }
  exports2.getProjectHash = getProjectHash3;
  function getCLIPathHash3() {
    const cliPath = process.argv[1];
    return crypto_1.default.createHash("sha256").update(cliPath).digest("hex").substring(0, 8);
  }
  exports2.getCLIPathHash = getCLIPathHash3;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/dotenvExpand.js
var require_dotenvExpand2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.dotenvExpand = void 0;
  function dotenvExpand(config) {
    const environment = config.ignoreProcessEnv ? {} : process.env;
    const interpolate = (envValue) => {
      var matches = envValue.match(/(.?\${(?:[a-zA-Z0-9_]+)?})/g) || [];
      return matches.reduce(function(newEnv, match) {
        const parts = /(.?)\${([a-zA-Z0-9_]+)?}/g.exec(match);
        if (!parts) {
          return newEnv;
        }
        const prefix = parts[1];
        let value, replacePart;
        if (prefix === "\\") {
          replacePart = parts[0];
          value = replacePart.replace("\\$", "$");
        } else {
          const key = parts[2];
          replacePart = parts[0].substring(prefix.length);
          value = environment.hasOwnProperty(key) ? environment[key] : config.parsed[key] || "";
          value = interpolate(value);
        }
        return newEnv.replace(replacePart, value);
      }, envValue);
    };
    for (const configKey in config.parsed) {
      const value = environment.hasOwnProperty(configKey) ? environment[configKey] : config.parsed[configKey];
      config.parsed[configKey] = interpolate(value);
    }
    for (var processKey in config.parsed) {
      environment[processKey] = config.parsed[processKey];
    }
    return config;
  }
  exports2.dotenvExpand = dotenvExpand;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/utils/loadEnv.js
var require_loadEnv = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.tryLoadEnv = void 0;
  const chalk_1 = __importDefault(require_source());
  const debug_1 = __importDefault(require_src2());
  const dotenv_1 = __importDefault(require_main2());
  const find_up_1 = __importDefault(require_find_up2());
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const getSchema_1 = require_getSchema2();
  const dotenvExpand_1 = require_dotenvExpand2();
  const debug3 = debug_1.default("loadEnv");
  function tryLoadEnv(schemaPath, opts = {cwd: process.cwd()}) {
    var _a, _b;
    const rootEnvInfo = loadEnvFromProjectRoot(opts);
    const schemaEnvPathFromArgs = schemaPathToEnvPath(schemaPath);
    const schemaEnvPathFromPkgJson = schemaPathToEnvPath(readSchemaPathFromPkgJson());
    const schemaEnvPaths = [
      schemaEnvPathFromArgs,
      schemaEnvPathFromPkgJson,
      "./prisma/.env",
      "./.env"
    ];
    let schemaEnvInfo = null;
    for (const envPath of schemaEnvPaths) {
      if ((rootEnvInfo === null || rootEnvInfo === void 0 ? void 0 : rootEnvInfo.path) && envPath && path_1.default.resolve(rootEnvInfo.path) === path_1.default.resolve(envPath)) {
        continue;
      }
      debug3(`Searching in ${envPath}`);
      checkForConflicts(rootEnvInfo, envPath);
      schemaEnvInfo = loadEnv(envPath);
      if (schemaEnvInfo)
        break;
    }
    if (!rootEnvInfo && !schemaEnvInfo) {
      debug3("No Environment variables loaded");
    }
    if (schemaEnvInfo === null || schemaEnvInfo === void 0 ? void 0 : schemaEnvInfo.dotenvResult.error) {
      return console.error(chalk_1.default.redBright.bold("Schema Env Error: ") + schemaEnvInfo.dotenvResult.error);
    }
    const messages = [rootEnvInfo === null || rootEnvInfo === void 0 ? void 0 : rootEnvInfo.message, schemaEnvInfo === null || schemaEnvInfo === void 0 ? void 0 : schemaEnvInfo.message].filter(Boolean);
    return {
      message: messages.join("\n"),
      parsed: {
        ...(_a = rootEnvInfo === null || rootEnvInfo === void 0 ? void 0 : rootEnvInfo.dotenvResult) === null || _a === void 0 ? void 0 : _a.parsed,
        ...(_b = schemaEnvInfo === null || schemaEnvInfo === void 0 ? void 0 : schemaEnvInfo.dotenvResult) === null || _b === void 0 ? void 0 : _b.parsed
      }
    };
  }
  exports2.tryLoadEnv = tryLoadEnv;
  function readSchemaPathFromPkgJson() {
    try {
      return getSchema_1.getSchemaPathFromPackageJsonSync(process.cwd());
    } catch (_a) {
      return null;
    }
  }
  function checkForConflicts(rootEnvInfo, envPath) {
    const notTheSame = (rootEnvInfo === null || rootEnvInfo === void 0 ? void 0 : rootEnvInfo.path) && envPath && path_1.default.resolve(rootEnvInfo === null || rootEnvInfo === void 0 ? void 0 : rootEnvInfo.path) !== path_1.default.resolve(envPath);
    const parsedRootEnv = rootEnvInfo === null || rootEnvInfo === void 0 ? void 0 : rootEnvInfo.dotenvResult.parsed;
    if (parsedRootEnv && envPath && notTheSame && fs_1.default.existsSync(envPath)) {
      const envConfig = dotenv_1.default.parse(fs_1.default.readFileSync(envPath));
      const conflicts = [];
      for (const k in envConfig) {
        if (parsedRootEnv[k] === envConfig[k]) {
          conflicts.push(k);
        }
      }
      if (conflicts.length > 0) {
        throw new Error(`
      You are trying to load env variables which are already present in your project root .env
      	Root: ${rootEnvInfo === null || rootEnvInfo === void 0 ? void 0 : rootEnvInfo.path}
      	Prisma: ${envPath}
      	Env Conflicts:
      ${conflicts.map((conflict) => `		${conflict}`).join("\n")}

      You can fix this by removing the .env file from "${envPath}" and move its contents to your .env file at the root "${rootEnvInfo === null || rootEnvInfo === void 0 ? void 0 : rootEnvInfo.path}"
      `);
      }
    }
  }
  function findRootPkg(opts) {
    const pkgJson = find_up_1.default.sync((dir) => {
      const pkgPath = path_1.default.join(dir, "package.json");
      if (find_up_1.default.exists(pkgPath)) {
        try {
          let pkg2 = require(pkgPath);
          if (pkg2["name"] !== ".prisma/client") {
            return pkgPath;
          }
        } catch (e) {
          debug3(e);
        }
      }
    }, opts);
    return pkgJson;
  }
  function loadEnvFromProjectRoot(opts) {
    const pkgJsonPath = findRootPkg(opts);
    const rootDir = pkgJsonPath && path_1.default.dirname(pkgJsonPath);
    const envPath = rootDir && path_1.default.join(rootDir, ".env");
    return loadEnv(envPath);
  }
  function loadEnv(envPath) {
    if (envPath && fs_1.default.existsSync(envPath)) {
      debug3(`Environment variables loaded from ${envPath}`);
      return {
        dotenvResult: dotenvExpand_1.dotenvExpand(dotenv_1.default.config({path: envPath})),
        message: chalk_1.default.dim(`Environment variables loaded from ${envPath}`),
        path: envPath
      };
    }
    return null;
  }
  function schemaPathToEnvPath(schemaPath) {
    if (!schemaPath)
      return null;
    return path_1.default.join(path_1.default.dirname(schemaPath), ".env");
  }
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/utils/trimBlocksFromSchema.js
var require_trimBlocksFromSchema2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.trimBlocksFromSchema = exports2.trimNewLine = void 0;
  function trimNewLine(str) {
    if (str === "") {
      return str;
    }
    let newStr = str;
    if (/\r?\n|\r/.exec(newStr[0])) {
      newStr = newStr.slice(1);
    }
    if (newStr.length > 0 && /\r?\n|\r/.exec(newStr[newStr.length - 1])) {
      newStr = newStr.slice(0, newStr.length - 1);
    }
    return newStr;
  }
  exports2.trimNewLine = trimNewLine;
  function trimBlocksFromSchema2(str, blocks = ["model", "enum", "datasource", "generator"]) {
    const lines = str.split("\n");
    if (lines.length <= 2) {
      return str;
    }
    const modelPositions = [];
    let blockOpen = false;
    let currentStart = -1;
    lines.forEach((line, index) => {
      const trimmed = line.trim();
      if (blocks.some((b) => line.startsWith(b)) && line.endsWith("{")) {
        blockOpen = true;
        currentStart = index;
      }
      if (trimmed.endsWith("}") && currentStart > -1 && blockOpen) {
        modelPositions.push({
          start: currentStart,
          end: index
        });
        blockOpen = false;
        currentStart = -1;
      }
    });
    if (modelPositions.length === 0) {
      return str;
    }
    return trimNewLine(modelPositions.reduceRight((acc, position) => {
      acc.splice(position.start, position.end - position.start + 1);
      return acc;
    }, lines).join("\n"));
  }
  exports2.trimBlocksFromSchema = trimBlocksFromSchema2;
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/migrateEngineCommands.js
var require_migrateEngineCommands2 = __commonJS((exports2) => {
  "use strict";
  var __importDefault = exports2 && exports2.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {default: mod};
  };
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.dropDatabase = exports2.createDatabase = exports2.canConnectToDatabase = void 0;
  const execa_1 = __importDefault(require_execa2());
  const fs_1 = __importDefault(require("fs"));
  const path_1 = __importDefault(require("path"));
  const util_1 = require("util");
  const convertCredentials_1 = require_convertCredentials2();
  const resolveBinary_1 = require_resolveBinary2();
  const getSchema_1 = require_getSchema2();
  const exists = util_1.promisify(fs_1.default.exists);
  async function canConnectToDatabase3(connectionString, cwd = process.cwd(), migrationEnginePath) {
    const credentials = convertCredentials_1.uriToCredentials(connectionString);
    if (credentials.type === "sqlite") {
      const sqliteExists = await doesSqliteDbExist(connectionString, cwd);
      if (sqliteExists) {
        return true;
      } else {
        return {
          code: "P1003",
          message: "SQLite database file doesn't exist"
        };
      }
    }
    migrationEnginePath = migrationEnginePath || await resolveBinary_1.resolveBinary("migration-engine");
    try {
      await execa_1.default(migrationEnginePath, ["cli", "--datasource", connectionString, "can-connect-to-database"], {
        cwd,
        env: {
          ...process.env,
          RUST_BACKTRACE: "1",
          RUST_LOG: "info"
        }
      });
      return true;
    } catch (e) {
      if (e.stdout) {
        let json;
        try {
          json = JSON.parse(e.stdout);
        } catch (e2) {
          throw new Error(`Can't parse migration engine response:
${e2.stdout}`);
        }
        return {
          code: json.error_code,
          message: json.message,
          meta: json.meta
        };
      } else if (e.stderr) {
        throw new Error(`Migration engine error:
${e.stderr}`);
      } else {
        throw new Error(`Migration engine exited.`);
      }
    }
  }
  exports2.canConnectToDatabase = canConnectToDatabase3;
  async function createDatabase(connectionString, cwd = process.cwd(), migrationEnginePath) {
    const dbExists = await canConnectToDatabase3(connectionString, cwd, migrationEnginePath);
    if (dbExists === true) {
      return false;
    }
    migrationEnginePath = migrationEnginePath || await resolveBinary_1.resolveBinary("migration-engine");
    await execa_1.default(migrationEnginePath, ["cli", "--datasource", connectionString, "create-database"], {
      cwd,
      env: {
        ...process.env,
        RUST_BACKTRACE: "1",
        RUST_LOG: "info"
      }
    });
    return true;
  }
  exports2.createDatabase = createDatabase;
  async function dropDatabase(connectionString, cwd = process.cwd(), migrationEnginePath) {
    migrationEnginePath = migrationEnginePath || await resolveBinary_1.resolveBinary("migration-engine");
    return await execa_1.default(migrationEnginePath, ["cli", "--datasource", connectionString, "drop-database"], {
      cwd,
      env: {
        ...process.env,
        RUST_BACKTRACE: "1",
        RUST_LOG: "info"
      }
    });
  }
  exports2.dropDatabase = dropDatabase;
  async function doesSqliteDbExist(connectionString, schemaDir) {
    let filePath = connectionString;
    if (filePath.startsWith("file:")) {
      filePath = filePath.slice(5);
    } else if (filePath.startsWith("sqlite:")) {
      filePath = filePath.slice(7);
    }
    const cwd = schemaDir || await getSchema_1.getSchemaDir();
    if (!cwd) {
      throw new Error(`Could not find schema.prisma in ${process.cwd()}`);
    }
    const absoluteTarget = path_1.default.resolve(cwd, filePath);
    return exists(absoluteTarget);
  }
});

// ../../node_modules/.pnpm/@prisma/sdk@2.11.0-dev.28/node_modules/@prisma/sdk/dist/index.js
var require_dist26 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  exports2.printConfigWarnings = exports2.dropDatabase = exports2.createDatabase = exports2.canConnectToDatabase = exports2.trimNewLine = exports2.trimBlocksFromSchema = exports2.mapPreviewFeatures = exports2.extractPreviewFeatures = exports2.tryLoadEnv = exports2.getSchemaPathFromPackageJsonSync = exports2.getSchemaPathFromPackageJson = exports2.getSchemaDirSync = exports2.getSchemaSync = exports2.getSchemaPathSync = exports2.getSchema = exports2.getSchemaDir = exports2.getSchemaPath = exports2.getRelativeSchemaPath = exports2.isError = exports2.format = exports2.arg = exports2.getProjectHash = exports2.getCLIPathHash = exports2.unknownCommand = exports2.HelpError = exports2.isCi = exports2.getCommandWithExecutor = exports2.isCurrentBinInstalledGlobally = exports2.drawBox = exports2.maskSchema = exports2.sendPanic = exports2.link = exports2.ErrorArea = exports2.RustPanic = exports2.uriToCredentials = exports2.credentialsToUri = exports2.getPackedPackage = exports2.formatSchema = exports2.getVersion = exports2.getConfig = exports2.getDMMF = exports2.getGenerator = exports2.getGenerators = exports2.Generator = exports2.IntrospectionEngine = exports2.highlightTS = exports2.highlightSql = exports2.highlightDatamodel = exports2.missingGeneratorMessage = exports2.resolveBinary = exports2.keyBy = exports2.pick = void 0;
  var pick_1 = require_pick2();
  Object.defineProperty(exports2, "pick", {enumerable: true, get: function() {
    return pick_1.pick;
  }});
  var keyBy_1 = require_keyBy2();
  Object.defineProperty(exports2, "keyBy", {enumerable: true, get: function() {
    return keyBy_1.keyBy;
  }});
  var resolveBinary_1 = require_resolveBinary2();
  Object.defineProperty(exports2, "resolveBinary", {enumerable: true, get: function() {
    return resolveBinary_1.resolveBinary;
  }});
  var missingGeneratorMessage_1 = require_missingGeneratorMessage2();
  Object.defineProperty(exports2, "missingGeneratorMessage", {enumerable: true, get: function() {
    return missingGeneratorMessage_1.missingGeneratorMessage;
  }});
  var highlight_1 = require_highlight2();
  Object.defineProperty(exports2, "highlightDatamodel", {enumerable: true, get: function() {
    return highlight_1.highlightDatamodel;
  }});
  Object.defineProperty(exports2, "highlightSql", {enumerable: true, get: function() {
    return highlight_1.highlightSql;
  }});
  Object.defineProperty(exports2, "highlightTS", {enumerable: true, get: function() {
    return highlight_1.highlightTS;
  }});
  var IntrospectionEngine_1 = require_IntrospectionEngine2();
  Object.defineProperty(exports2, "IntrospectionEngine", {enumerable: true, get: function() {
    return IntrospectionEngine_1.IntrospectionEngine;
  }});
  var Generator_1 = require_Generator2();
  Object.defineProperty(exports2, "Generator", {enumerable: true, get: function() {
    return Generator_1.Generator;
  }});
  var getGenerators_1 = require_getGenerators2();
  Object.defineProperty(exports2, "getGenerators", {enumerable: true, get: function() {
    return getGenerators_1.getGenerators;
  }});
  Object.defineProperty(exports2, "getGenerator", {enumerable: true, get: function() {
    return getGenerators_1.getGenerator;
  }});
  var engineCommands_1 = require_engineCommands2();
  Object.defineProperty(exports2, "getDMMF", {enumerable: true, get: function() {
    return engineCommands_1.getDMMF;
  }});
  Object.defineProperty(exports2, "getConfig", {enumerable: true, get: function() {
    return engineCommands_1.getConfig;
  }});
  Object.defineProperty(exports2, "getVersion", {enumerable: true, get: function() {
    return engineCommands_1.getVersion;
  }});
  Object.defineProperty(exports2, "formatSchema", {enumerable: true, get: function() {
    return engineCommands_1.formatSchema;
  }});
  var getPackedPackage_1 = require_getPackedPackage2();
  Object.defineProperty(exports2, "getPackedPackage", {enumerable: true, get: function() {
    return getPackedPackage_1.getPackedPackage;
  }});
  var convertCredentials_1 = require_convertCredentials2();
  Object.defineProperty(exports2, "credentialsToUri", {enumerable: true, get: function() {
    return convertCredentials_1.credentialsToUri;
  }});
  Object.defineProperty(exports2, "uriToCredentials", {enumerable: true, get: function() {
    return convertCredentials_1.uriToCredentials;
  }});
  var panic_1 = require_panic2();
  Object.defineProperty(exports2, "RustPanic", {enumerable: true, get: function() {
    return panic_1.RustPanic;
  }});
  Object.defineProperty(exports2, "ErrorArea", {enumerable: true, get: function() {
    return panic_1.ErrorArea;
  }});
  var link_1 = require_link2();
  Object.defineProperty(exports2, "link", {enumerable: true, get: function() {
    return link_1.link;
  }});
  var sendPanic_1 = require_sendPanic2();
  Object.defineProperty(exports2, "sendPanic", {enumerable: true, get: function() {
    return sendPanic_1.sendPanic;
  }});
  var maskSchema_1 = require_maskSchema2();
  Object.defineProperty(exports2, "maskSchema", {enumerable: true, get: function() {
    return maskSchema_1.maskSchema;
  }});
  var drawBox_1 = require_drawBox2();
  Object.defineProperty(exports2, "drawBox", {enumerable: true, get: function() {
    return drawBox_1.drawBox;
  }});
  var isCurrentBinInstalledGlobally_1 = require_isCurrentBinInstalledGlobally2();
  Object.defineProperty(exports2, "isCurrentBinInstalledGlobally", {enumerable: true, get: function() {
    return isCurrentBinInstalledGlobally_1.isCurrentBinInstalledGlobally;
  }});
  var getCommandWithExecutor_1 = require_getCommandWithExecutor2();
  Object.defineProperty(exports2, "getCommandWithExecutor", {enumerable: true, get: function() {
    return getCommandWithExecutor_1.getCommandWithExecutor;
  }});
  var isCi_1 = require_isCi2();
  Object.defineProperty(exports2, "isCi", {enumerable: true, get: function() {
    return isCi_1.isCi;
  }});
  var Help_1 = require_Help2();
  Object.defineProperty(exports2, "HelpError", {enumerable: true, get: function() {
    return Help_1.HelpError;
  }});
  Object.defineProperty(exports2, "unknownCommand", {enumerable: true, get: function() {
    return Help_1.unknownCommand;
  }});
  var hashes_1 = require_hashes2();
  Object.defineProperty(exports2, "getCLIPathHash", {enumerable: true, get: function() {
    return hashes_1.getCLIPathHash;
  }});
  Object.defineProperty(exports2, "getProjectHash", {enumerable: true, get: function() {
    return hashes_1.getProjectHash;
  }});
  var utils_1 = require_utils8();
  Object.defineProperty(exports2, "arg", {enumerable: true, get: function() {
    return utils_1.arg;
  }});
  Object.defineProperty(exports2, "format", {enumerable: true, get: function() {
    return utils_1.format;
  }});
  Object.defineProperty(exports2, "isError", {enumerable: true, get: function() {
    return utils_1.isError;
  }});
  var getSchema_1 = require_getSchema2();
  Object.defineProperty(exports2, "getRelativeSchemaPath", {enumerable: true, get: function() {
    return getSchema_1.getRelativeSchemaPath;
  }});
  Object.defineProperty(exports2, "getSchemaPath", {enumerable: true, get: function() {
    return getSchema_1.getSchemaPath;
  }});
  Object.defineProperty(exports2, "getSchemaDir", {enumerable: true, get: function() {
    return getSchema_1.getSchemaDir;
  }});
  Object.defineProperty(exports2, "getSchema", {enumerable: true, get: function() {
    return getSchema_1.getSchema;
  }});
  Object.defineProperty(exports2, "getSchemaPathSync", {enumerable: true, get: function() {
    return getSchema_1.getSchemaPathSync;
  }});
  Object.defineProperty(exports2, "getSchemaSync", {enumerable: true, get: function() {
    return getSchema_1.getSchemaSync;
  }});
  Object.defineProperty(exports2, "getSchemaDirSync", {enumerable: true, get: function() {
    return getSchema_1.getSchemaDirSync;
  }});
  Object.defineProperty(exports2, "getSchemaPathFromPackageJson", {enumerable: true, get: function() {
    return getSchema_1.getSchemaPathFromPackageJson;
  }});
  Object.defineProperty(exports2, "getSchemaPathFromPackageJsonSync", {enumerable: true, get: function() {
    return getSchema_1.getSchemaPathFromPackageJsonSync;
  }});
  var loadEnv_1 = require_loadEnv();
  Object.defineProperty(exports2, "tryLoadEnv", {enumerable: true, get: function() {
    return loadEnv_1.tryLoadEnv;
  }});
  var extractPreviewFeatures_1 = require_extractPreviewFeatures2();
  Object.defineProperty(exports2, "extractPreviewFeatures", {enumerable: true, get: function() {
    return extractPreviewFeatures_1.extractPreviewFeatures;
  }});
  var mapPreviewFeatures_1 = require_mapPreviewFeatures2();
  Object.defineProperty(exports2, "mapPreviewFeatures", {enumerable: true, get: function() {
    return mapPreviewFeatures_1.mapPreviewFeatures;
  }});
  var trimBlocksFromSchema_1 = require_trimBlocksFromSchema2();
  Object.defineProperty(exports2, "trimBlocksFromSchema", {enumerable: true, get: function() {
    return trimBlocksFromSchema_1.trimBlocksFromSchema;
  }});
  Object.defineProperty(exports2, "trimNewLine", {enumerable: true, get: function() {
    return trimBlocksFromSchema_1.trimNewLine;
  }});
  var migrateEngineCommands_1 = require_migrateEngineCommands2();
  Object.defineProperty(exports2, "canConnectToDatabase", {enumerable: true, get: function() {
    return migrateEngineCommands_1.canConnectToDatabase;
  }});
  Object.defineProperty(exports2, "createDatabase", {enumerable: true, get: function() {
    return migrateEngineCommands_1.createDatabase;
  }});
  Object.defineProperty(exports2, "dropDatabase", {enumerable: true, get: function() {
    return migrateEngineCommands_1.dropDatabase;
  }});
  var printConfigWarnings_1 = require_printConfigWarnings();
  Object.defineProperty(exports2, "printConfigWarnings", {enumerable: true, get: function() {
    return printConfigWarnings_1.printConfigWarnings;
  }});
});

// ../../node_modules/.pnpm/@prisma/studio-transports@0.304.0/node_modules/@prisma/studio-transports/build/photon.js
var require_photon = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const path19 = require("path");
  const rimraf = require_rimraf();
  const Sentry = require_dist20();
  const sdk_1 = require_dist26();
  class Photon {
    constructor() {
      this.__photon = null;
      this.queuedRequests = [];
      this.introspect = async (credentials) => {
        return "";
      };
      this.generate = async ({schemaPath, photon}) => {
        try {
          await new Promise((res) => rimraf(photon.outputDir, res));
          const {datasources, generators} = await sdk_1.getConfig({
            datamodelPath: schemaPath
          });
          if (!datasources || datasources.length < 1) {
            throw "Could not find a `datasource` declaration in your Prisma Schema. Please declare one, then try again. Read more about the Prisma Schema: https://pris.ly/prisma-schema";
          }
          const previewFeatures = generators.map((g) => g.previewFeatures).reduce((acc, pf) => {
            acc = acc.concat(pf);
            return acc;
          }, []);
          const generator = await sdk_1.getGenerator({
            schemaPath,
            overrideGenerators: [
              {
                binaryTargets: [],
                previewFeatures: Array.from(new Set([...previewFeatures, "transactionApi"])),
                config: {
                  copyRuntime: "true"
                },
                name: "photon",
                provider: "prisma-client-js",
                output: photon.outputDir
              }
            ],
            skipDownload: photon.skipDownload,
            printDownloadProgress: true,
            providerAliases: photon.providerAliases,
            version: photon.version
          });
          const {prismaClientDmmf, fileMap} = await generator.generate();
          generator.stop();
          return {
            datasourceProvider: datasources[0].activeProvider,
            dmmf: prismaClientDmmf,
            typings: fileMap["index.d.ts"]
          };
        } catch (e) {
          Sentry.captureException(e);
          throw e;
        }
      };
      this.start = async ({binaryPaths, photonDir}) => {
        try {
          delete require.cache[require.resolve(photonDir)];
          delete require.cache[photonDir];
        } catch (e) {
        }
        try {
          const {PrismaClient, PrismaClientKnownRequestError, PrismaClientRustPanicError, PrismaClientInitializationError, PrismaClientValidationError} = require(photonDir);
          await this.stop();
          let prismaClientConfig = {
            errorFormat: "minimal"
          };
          if (binaryPaths) {
            prismaClientConfig.engine = {
              binaryPath: path19.resolve(binaryPaths.queryEngine)
            };
          }
          this.__photon = new PrismaClient(prismaClientConfig);
          this.__photon.$use(async (params, next) => {
            try {
              return await next(params);
            } catch (e) {
              const type = e instanceof PrismaClientKnownRequestError ? "PrismaClientKnownRequestError" : e instanceof PrismaClientRustPanicError ? "PrismaClientRustPanicError" : e instanceof PrismaClientInitializationError ? "PrismaClientInitializationError" : e instanceof PrismaClientValidationError ? "PrismaClientValidationError" : "PrismaClientUnknownRequestError";
              return {
                error: {
                  type,
                  code: e.code,
                  meta: e.meta,
                  message: e.message,
                  stack: e.stack
                }
              };
            }
          });
          this.__photon.$use(async (params, next) => {
            return {
              params,
              response: await next(params)
            };
          });
          await this.replayQueuedRequests();
          return {};
        } catch (e) {
          console.error("Unable to start Prisma Client: ", e);
          throw e.message || e;
        }
      };
      this.request = async (options) => {
        if (!this.__photon) {
          return new Promise((resolve) => this.queuedRequests.push({type: "request", args: options, resolve}));
        }
        let {query} = options;
        query = query.trim();
        try {
          if (query === "") {
            throw {
              message: "Query is empty",
              stack: null
            };
          }
          const AsyncFunction = Object.getPrototypeOf(async function() {
          }).constructor;
          const photonResponse = await new AsyncFunction("prisma", "__dirname", `
          return ${query}
        `)(this.__photon, eval("__dirname"));
          const {error, params, response} = photonResponse;
          if (error) {
            throw {
              type: error.type,
              code: error.code,
              message: error.message,
              stack: error.stack
            };
          }
          if (Array.isArray(photonResponse)) {
            return photonResponse;
          }
          if (response === void 0 && error === void 0) {
            throw {
              message: "Invalid query",
              stack: null
            };
          }
          return {
            params,
            response
          };
        } catch (e) {
          throw e;
        }
      };
      this.stop = async () => {
        try {
          if (this.__photon) {
            await this.__photon.$disconnect();
          }
          delete this.__photon;
          this.__photon = null;
        } catch (e) {
          console.error("Error stopping Prisma Client: ", e);
          throw e;
        }
      };
      this.replayQueuedRequests = async () => {
        for (let action of this.queuedRequests) {
          action.resolve(await this.request(action.args));
        }
        this.queuedRequests = [];
      };
    }
  }
  Photon.validateCredentials = async (credentials) => {
    try {
      return true;
    } catch (e) {
      throw new Error("Invalid credentials");
    }
  };
  exports2.default = Photon;
});

// ../../node_modules/.pnpm/@prisma/studio-transports@0.304.0/node_modules/@prisma/studio-transports/build/index.js
var require_build = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const Sentry = require_dist20();
  if (process.env.NODE_ENV === "production") {
    Sentry.init({
      dsn: "https://4bfc6b0e17ad4924a0d892e6145b86ad@sentry.io/1762791"
    });
  }
  var photon_1 = require_photon();
  exports2.Photon = photon_1.default;
});

// ../../node_modules/.pnpm/@prisma/studio-server@0.304.0/node_modules/@prisma/studio-server/build/utils/getCacheDirectory.js
var require_getCacheDirectory = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const path19 = require("path");
  const getCacheDirectory = (projectId) => {
    switch (process.platform) {
      case "win32":
        return path19.resolve(process.env.APPDATA, "Prisma\\Studio", projectId);
      default:
        return path19.resolve(process.env.HOME, ".cache/prisma/studio", projectId);
    }
  };
  exports2.default = getCacheDirectory;
});

// ../../node_modules/.pnpm/@prisma/studio-server@0.304.0/node_modules/@prisma/studio-server/build/services/PhotonService.js
var require_PhotonService = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const Sentry = require_dist20();
  const sdk_1 = require_dist26();
  const get_platform_1 = require_dist21();
  const studio_transports_1 = require_build();
  const getCacheDirectory_1 = require_getCacheDirectory();
  class PhotonService {
    constructor() {
      this.setDefaults = async ({projectId, schemaPath, binaryPaths, dir, generator}) => {
        const platform = await get_platform_1.getPlatform();
        this.options = {
          projectId,
          schemaPath
        };
        this.options.binaryPaths = {};
        this.options.binaryPaths.queryEngine = binaryPaths === null || binaryPaths === void 0 ? void 0 : binaryPaths.queryEngine;
        if (!this.options.binaryPaths.queryEngine) {
          try {
            this.options.binaryPaths.queryEngine = eval(`require.resolve('@prisma/engines/query-engine-${platform}')`);
          } catch (e) {
            throw new Error("Could not resolve `binaryPaths.queryEngine` for Studio Server");
          }
        }
        this.options.dir = dir || getCacheDirectory_1.default(projectId);
        if (generator) {
          this.options.generator = {
            providerAliases: generator.providerAliases,
            version: generator.version
          };
        }
      };
      this.init = async (options) => {
        await this.setDefaults(options);
        this.photon = new studio_transports_1.Photon();
        if (!this.options.generator && !this.options.dir) {
          throw new Error("At least one of `prismaClient.dir` or `prismaClient.generator` is required");
        }
        if (this.options.generator) {
          process.stdout.write("Generating Prisma Client ... ");
          try {
            const {dmmf, typings, datasourceProvider} = await this.photon.generate({
              schemaPath: this.options.schemaPath,
              photon: {
                providerAliases: this.options.generator.providerAliases,
                outputDir: this.options.dir,
                version: this.options.generator.version
              }
            });
            process.stdout.write("done\n");
            this.dmmf = dmmf;
            this.typings = typings;
            this.datasourceProvider = datasourceProvider;
          } catch (e) {
            process.stdout.write("failed\n");
            throw e;
          }
        } else if (this.options.dir) {
          delete require.cache[require.resolve(this.options.dir)];
          const {dmmf} = require(this.options.dir);
          const {datasources} = await sdk_1.getConfig({
            datamodelPath: this.options.schemaPath
          });
          if (!datasources || datasources.length < 1) {
            throw "Could not find a `datasource` declaration in your Prisma Schema. Please declare one, then try again. Read more about the Prisma Schema: https://pris.ly/prisma-schema";
          }
          this.dmmf = dmmf;
          this.typings = "";
          this.datasourceProvider = datasources[0].activeProvider;
        }
      };
      this.respond = async (action, {data}) => {
        const responsePayload = {
          error: null,
          data: null
        };
        try {
          switch (action) {
            case "start":
              await this.photon.start({
                binaryPaths: this.options.binaryPaths,
                photonDir: this.options.dir
              });
              responsePayload.data = {
                dmmf: this.dmmf,
                typings: this.typings,
                datasourceProvider: this.datasourceProvider
              };
              break;
            case "request":
              responsePayload.data = await this.photon.request({
                query: data.query
              });
              break;
            case "stop":
              responsePayload.data = await this.photon.stop();
              break;
          }
        } catch (e) {
          responsePayload.error = Object.getOwnPropertyNames(e).reduce((acc, key) => {
            acc[key] = e[key];
            return acc;
          }, {});
        }
        return responsePayload;
      };
      this.destroy = async () => {
        try {
          if (this.photon) {
            await this.photon.stop();
          }
          this.photon = null;
          this.dmmf = null;
          this.typings = null;
        } catch (e) {
          Sentry.captureException(e);
        }
      };
    }
  }
  exports2.default = new PhotonService();
});

// ../../node_modules/.pnpm/checkpoint-client@1.1.11/node_modules/checkpoint-client/dist/index.js
var require_dist27 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  function _interopDefault(ex) {
    return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
  }
  var fs17 = _interopDefault(require("fs"));
  var path19 = _interopDefault(require("path"));
  var crypto = _interopDefault(require("crypto"));
  var os3 = _interopDefault(require("os"));
  var util4 = require("util");
  var util__default = _interopDefault(util4);
  var child_process = _interopDefault(require("child_process"));
  const {open: open3, write, close, rename, fsync, unlink} = fs17;
  const {join, dirname} = path19;
  var counter = 0;
  function cleanup(dest, err, cb) {
    unlink(dest, function() {
      cb(err);
    });
  }
  function closeAndCleanup(fd, dest, err, cb) {
    close(fd, cleanup.bind(null, dest, err, cb));
  }
  function writeLoop(fd, content, contentLength, offset, cb) {
    write(fd, content, offset, function(err, bytesWritten) {
      if (err) {
        cb(err);
        return;
      }
      return bytesWritten < contentLength - offset ? writeLoop(fd, content, contentLength, offset + bytesWritten, cb) : cb(null);
    });
  }
  function openLoop(dest, cb) {
    open3(dest, "w", function(err, fd) {
      if (err) {
        return err.code === "EMFILE" ? openLoop(dest, cb) : cb(err);
      }
      cb(null, fd);
    });
  }
  function writeAtomic(path20, content, cb) {
    const tmp = join(dirname(path20), "." + process.pid + "." + counter++);
    openLoop(tmp, function(err, fd) {
      if (err) {
        cb(err);
        return;
      }
      const contentLength = Buffer.byteLength(content);
      writeLoop(fd, content, contentLength, 0, function(err2) {
        if (err2) {
          closeAndCleanup(fd, tmp, err2, cb);
          return;
        }
        fsync(fd, function(err3) {
          if (err3) {
            closeAndCleanup(fd, tmp, err3, cb);
            return;
          }
          close(fd, function(err4) {
            if (err4) {
              cleanup(tmp, err4, cb);
              return;
            }
            rename(tmp, path20, (err5) => {
              if (err5) {
                cleanup(tmp, err5, cb);
                return;
              }
              cb(null);
            });
          });
        });
      });
      content = null;
    });
  }
  var fastWriteAtomic = writeAtomic;
  const rnds8 = new Uint8Array(16);
  function rng() {
    return crypto.randomFillSync(rnds8);
  }
  const byteToHex = [];
  for (let i = 0; i < 256; ++i) {
    byteToHex.push((i + 256).toString(16).substr(1));
  }
  function bytesToUuid(buf, offset) {
    const i = offset || 0;
    const bth = byteToHex;
    return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + "-" + bth[buf[i + 4]] + bth[buf[i + 5]] + "-" + bth[buf[i + 6]] + bth[buf[i + 7]] + "-" + bth[buf[i + 8]] + bth[buf[i + 9]] + "-" + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();
  }
  function v4(options, buf, offset) {
    if (typeof options === "string") {
      buf = options === "binary" ? new Uint8Array(16) : null;
      options = null;
    }
    options = options || {};
    const rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      const start = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[start + i] = rnds[i];
      }
      return buf;
    }
    return bytesToUuid(rnds);
  }
  const homedir = os3.homedir();
  const tmpdir = os3.tmpdir();
  const {env} = process;
  const macos = (name) => {
    const library = path19.join(homedir, "Library");
    return {
      data: path19.join(library, "Application Support", name),
      config: path19.join(library, "Preferences", name),
      cache: path19.join(library, "Caches", name),
      log: path19.join(library, "Logs", name),
      temp: path19.join(tmpdir, name)
    };
  };
  const windows = (name) => {
    const appData = env.APPDATA || path19.join(homedir, "AppData", "Roaming");
    const localAppData = env.LOCALAPPDATA || path19.join(homedir, "AppData", "Local");
    return {
      data: path19.join(localAppData, name, "Data"),
      config: path19.join(appData, name, "Config"),
      cache: path19.join(localAppData, name, "Cache"),
      log: path19.join(localAppData, name, "Log"),
      temp: path19.join(tmpdir, name)
    };
  };
  const linux = (name) => {
    const username = path19.basename(homedir);
    return {
      data: path19.join(env.XDG_DATA_HOME || path19.join(homedir, ".local", "share"), name),
      config: path19.join(env.XDG_CONFIG_HOME || path19.join(homedir, ".config"), name),
      cache: path19.join(env.XDG_CACHE_HOME || path19.join(homedir, ".cache"), name),
      log: path19.join(env.XDG_STATE_HOME || path19.join(homedir, ".local", "state"), name),
      temp: path19.join(tmpdir, username, name)
    };
  };
  const envPaths = (name, options) => {
    if (typeof name !== "string") {
      throw new TypeError(`Expected string, got ${typeof name}`);
    }
    options = Object.assign({suffix: "nodejs"}, options);
    if (options.suffix) {
      name += `-${options.suffix}`;
    }
    if (process.platform === "darwin") {
      return macos(name);
    }
    if (process.platform === "win32") {
      return windows(name);
    }
    return linux(name);
  };
  var envPaths_1 = envPaths;
  var _default = envPaths;
  envPaths_1.default = _default;
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  function createCommonjsModule(fn, basedir, module4) {
    return module4 = {
      path: basedir,
      exports: {},
      require: function(path20, base) {
        return commonjsRequire(path20, base === void 0 || base === null ? module4.path : base);
      }
    }, fn(module4, module4.exports), module4.exports;
  }
  function getCjsExportFromNamespace(n) {
    return n && n["default"] || n;
  }
  function commonjsRequire() {
    throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
  }
  var semver = createCommonjsModule(function(module4, exports3) {
    exports3 = module4.exports = SemVer;
    var debug3;
    if (typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
      debug3 = function() {
        var args2 = Array.prototype.slice.call(arguments, 0);
        args2.unshift("SEMVER");
        console.log.apply(console, args2);
      };
    } else {
      debug3 = function() {
      };
    }
    exports3.SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var re = exports3.re = [];
    var src = exports3.src = [];
    var t = exports3.tokens = {};
    var R = 0;
    function tok(n) {
      t[n] = R++;
    }
    tok("NUMERICIDENTIFIER");
    src[t.NUMERICIDENTIFIER] = "0|[1-9]\\d*";
    tok("NUMERICIDENTIFIERLOOSE");
    src[t.NUMERICIDENTIFIERLOOSE] = "[0-9]+";
    tok("NONNUMERICIDENTIFIER");
    src[t.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*";
    tok("MAINVERSION");
    src[t.MAINVERSION] = "(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")";
    tok("MAINVERSIONLOOSE");
    src[t.MAINVERSIONLOOSE] = "(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")";
    tok("PRERELEASEIDENTIFIER");
    src[t.PRERELEASEIDENTIFIER] = "(?:" + src[t.NUMERICIDENTIFIER] + "|" + src[t.NONNUMERICIDENTIFIER] + ")";
    tok("PRERELEASEIDENTIFIERLOOSE");
    src[t.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t.NUMERICIDENTIFIERLOOSE] + "|" + src[t.NONNUMERICIDENTIFIER] + ")";
    tok("PRERELEASE");
    src[t.PRERELEASE] = "(?:-(" + src[t.PRERELEASEIDENTIFIER] + "(?:\\." + src[t.PRERELEASEIDENTIFIER] + ")*))";
    tok("PRERELEASELOOSE");
    src[t.PRERELEASELOOSE] = "(?:-?(" + src[t.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t.PRERELEASEIDENTIFIERLOOSE] + ")*))";
    tok("BUILDIDENTIFIER");
    src[t.BUILDIDENTIFIER] = "[0-9A-Za-z-]+";
    tok("BUILD");
    src[t.BUILD] = "(?:\\+(" + src[t.BUILDIDENTIFIER] + "(?:\\." + src[t.BUILDIDENTIFIER] + ")*))";
    tok("FULL");
    tok("FULLPLAIN");
    src[t.FULLPLAIN] = "v?" + src[t.MAINVERSION] + src[t.PRERELEASE] + "?" + src[t.BUILD] + "?";
    src[t.FULL] = "^" + src[t.FULLPLAIN] + "$";
    tok("LOOSEPLAIN");
    src[t.LOOSEPLAIN] = "[v=\\s]*" + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + "?" + src[t.BUILD] + "?";
    tok("LOOSE");
    src[t.LOOSE] = "^" + src[t.LOOSEPLAIN] + "$";
    tok("GTLT");
    src[t.GTLT] = "((?:<|>)?=?)";
    tok("XRANGEIDENTIFIERLOOSE");
    src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*";
    tok("XRANGEIDENTIFIER");
    src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + "|x|X|\\*";
    tok("XRANGEPLAIN");
    src[t.XRANGEPLAIN] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:" + src[t.PRERELEASE] + ")?" + src[t.BUILD] + "?)?)?";
    tok("XRANGEPLAINLOOSE");
    src[t.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t.PRERELEASELOOSE] + ")?" + src[t.BUILD] + "?)?)?";
    tok("XRANGE");
    src[t.XRANGE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAIN] + "$";
    tok("XRANGELOOSE");
    src[t.XRANGELOOSE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAINLOOSE] + "$";
    tok("COERCE");
    src[t.COERCE] = "(^|[^\\d])(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "})(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:\\.(\\d{1," + MAX_SAFE_COMPONENT_LENGTH + "}))?(?:$|[^\\d])";
    tok("COERCERTL");
    re[t.COERCERTL] = new RegExp(src[t.COERCE], "g");
    tok("LONETILDE");
    src[t.LONETILDE] = "(?:~>?)";
    tok("TILDETRIM");
    src[t.TILDETRIM] = "(\\s*)" + src[t.LONETILDE] + "\\s+";
    re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], "g");
    var tildeTrimReplace = "$1~";
    tok("TILDE");
    src[t.TILDE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAIN] + "$";
    tok("TILDELOOSE");
    src[t.TILDELOOSE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + "$";
    tok("LONECARET");
    src[t.LONECARET] = "(?:\\^)";
    tok("CARETTRIM");
    src[t.CARETTRIM] = "(\\s*)" + src[t.LONECARET] + "\\s+";
    re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], "g");
    var caretTrimReplace = "$1^";
    tok("CARET");
    src[t.CARET] = "^" + src[t.LONECARET] + src[t.XRANGEPLAIN] + "$";
    tok("CARETLOOSE");
    src[t.CARETLOOSE] = "^" + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + "$";
    tok("COMPARATORLOOSE");
    src[t.COMPARATORLOOSE] = "^" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + ")$|^$";
    tok("COMPARATOR");
    src[t.COMPARATOR] = "^" + src[t.GTLT] + "\\s*(" + src[t.FULLPLAIN] + ")$|^$";
    tok("COMPARATORTRIM");
    src[t.COMPARATORTRIM] = "(\\s*)" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + "|" + src[t.XRANGEPLAIN] + ")";
    re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], "g");
    var comparatorTrimReplace = "$1$2$3";
    tok("HYPHENRANGE");
    src[t.HYPHENRANGE] = "^\\s*(" + src[t.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t.XRANGEPLAIN] + ")\\s*$";
    tok("HYPHENRANGELOOSE");
    src[t.HYPHENRANGELOOSE] = "^\\s*(" + src[t.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t.XRANGEPLAINLOOSE] + ")\\s*$";
    tok("STAR");
    src[t.STAR] = "(<|>)?=?\\s*\\*";
    for (var i = 0; i < R; i++) {
      debug3(i, src[i]);
      if (!re[i]) {
        re[i] = new RegExp(src[i]);
      }
    }
    exports3.parse = parse2;
    function parse2(version, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version !== "string") {
        return null;
      }
      if (version.length > MAX_LENGTH) {
        return null;
      }
      var r = options.loose ? re[t.LOOSE] : re[t.FULL];
      if (!r.test(version)) {
        return null;
      }
      try {
        return new SemVer(version, options);
      } catch (er) {
        return null;
      }
    }
    exports3.valid = valid;
    function valid(version, options) {
      var v = parse2(version, options);
      return v ? v.version : null;
    }
    exports3.clean = clean;
    function clean(version, options) {
      var s2 = parse2(version.trim().replace(/^[=v]+/, ""), options);
      return s2 ? s2.version : null;
    }
    exports3.SemVer = SemVer;
    function SemVer(version, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        if (version.loose === options.loose) {
          return version;
        } else {
          version = version.version;
        }
      } else if (typeof version !== "string") {
        throw new TypeError("Invalid Version: " + version);
      }
      if (version.length > MAX_LENGTH) {
        throw new TypeError("version is longer than " + MAX_LENGTH + " characters");
      }
      if (!(this instanceof SemVer)) {
        return new SemVer(version, options);
      }
      debug3("SemVer", version, options);
      this.options = options;
      this.loose = !!options.loose;
      var m2 = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
      if (!m2) {
        throw new TypeError("Invalid Version: " + version);
      }
      this.raw = version;
      this.major = +m2[1];
      this.minor = +m2[2];
      this.patch = +m2[3];
      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError("Invalid major version");
      }
      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError("Invalid minor version");
      }
      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError("Invalid patch version");
      }
      if (!m2[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m2[4].split(".").map(function(id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num;
            }
          }
          return id;
        });
      }
      this.build = m2[5] ? m2[5].split(".") : [];
      this.format();
    }
    SemVer.prototype.format = function() {
      this.version = this.major + "." + this.minor + "." + this.patch;
      if (this.prerelease.length) {
        this.version += "-" + this.prerelease.join(".");
      }
      return this.version;
    };
    SemVer.prototype.toString = function() {
      return this.version;
    };
    SemVer.prototype.compare = function(other) {
      debug3("SemVer.compare", this.version, this.options, other);
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return this.compareMain(other) || this.comparePre(other);
    };
    SemVer.prototype.compareMain = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
    };
    SemVer.prototype.comparePre = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      if (this.prerelease.length && !other.prerelease.length) {
        return -1;
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1;
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0;
      }
      var i2 = 0;
      do {
        var a = this.prerelease[i2];
        var b = other.prerelease[i2];
        debug3("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    };
    SemVer.prototype.compareBuild = function(other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }
      var i2 = 0;
      do {
        var a = this.build[i2];
        var b = other.build[i2];
        debug3("prerelease compare", i2, a, b);
        if (a === void 0 && b === void 0) {
          return 0;
        } else if (b === void 0) {
          return 1;
        } else if (a === void 0) {
          return -1;
        } else if (a === b) {
          continue;
        } else {
          return compareIdentifiers(a, b);
        }
      } while (++i2);
    };
    SemVer.prototype.inc = function(release, identifier) {
      switch (release) {
        case "premajor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc("pre", identifier);
          break;
        case "preminor":
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc("pre", identifier);
          break;
        case "prepatch":
          this.prerelease.length = 0;
          this.inc("patch", identifier);
          this.inc("pre", identifier);
          break;
        case "prerelease":
          if (this.prerelease.length === 0) {
            this.inc("patch", identifier);
          }
          this.inc("pre", identifier);
          break;
        case "major":
          if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break;
        case "minor":
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break;
        case "patch":
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break;
        case "pre":
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i2 = this.prerelease.length;
            while (--i2 >= 0) {
              if (typeof this.prerelease[i2] === "number") {
                this.prerelease[i2]++;
                i2 = -2;
              }
            }
            if (i2 === -1) {
              this.prerelease.push(0);
            }
          }
          if (identifier) {
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0];
              }
            } else {
              this.prerelease = [identifier, 0];
            }
          }
          break;
        default:
          throw new Error("invalid increment argument: " + release);
      }
      this.format();
      this.raw = this.version;
      return this;
    };
    exports3.inc = inc;
    function inc(version, release, loose, identifier) {
      if (typeof loose === "string") {
        identifier = loose;
        loose = void 0;
      }
      try {
        return new SemVer(version, loose).inc(release, identifier).version;
      } catch (er) {
        return null;
      }
    }
    exports3.diff = diff;
    function diff(version1, version2) {
      if (eq(version1, version2)) {
        return null;
      } else {
        var v1 = parse2(version1);
        var v2 = parse2(version2);
        var prefix = "";
        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = "pre";
          var defaultResult = "prerelease";
        }
        for (var key in v1) {
          if (key === "major" || key === "minor" || key === "patch") {
            if (v1[key] !== v2[key]) {
              return prefix + key;
            }
          }
        }
        return defaultResult;
      }
    }
    exports3.compareIdentifiers = compareIdentifiers;
    var numeric = /^[0-9]+$/;
    function compareIdentifiers(a, b) {
      var anum = numeric.test(a);
      var bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    }
    exports3.rcompareIdentifiers = rcompareIdentifiers;
    function rcompareIdentifiers(a, b) {
      return compareIdentifiers(b, a);
    }
    exports3.major = major;
    function major(a, loose) {
      return new SemVer(a, loose).major;
    }
    exports3.minor = minor;
    function minor(a, loose) {
      return new SemVer(a, loose).minor;
    }
    exports3.patch = patch;
    function patch(a, loose) {
      return new SemVer(a, loose).patch;
    }
    exports3.compare = compare;
    function compare(a, b, loose) {
      return new SemVer(a, loose).compare(new SemVer(b, loose));
    }
    exports3.compareLoose = compareLoose;
    function compareLoose(a, b) {
      return compare(a, b, true);
    }
    exports3.compareBuild = compareBuild;
    function compareBuild(a, b, loose) {
      var versionA = new SemVer(a, loose);
      var versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    }
    exports3.rcompare = rcompare;
    function rcompare(a, b, loose) {
      return compare(b, a, loose);
    }
    exports3.sort = sort;
    function sort(list, loose) {
      return list.sort(function(a, b) {
        return exports3.compareBuild(a, b, loose);
      });
    }
    exports3.rsort = rsort;
    function rsort(list, loose) {
      return list.sort(function(a, b) {
        return exports3.compareBuild(b, a, loose);
      });
    }
    exports3.gt = gt;
    function gt(a, b, loose) {
      return compare(a, b, loose) > 0;
    }
    exports3.lt = lt;
    function lt(a, b, loose) {
      return compare(a, b, loose) < 0;
    }
    exports3.eq = eq;
    function eq(a, b, loose) {
      return compare(a, b, loose) === 0;
    }
    exports3.neq = neq;
    function neq(a, b, loose) {
      return compare(a, b, loose) !== 0;
    }
    exports3.gte = gte;
    function gte(a, b, loose) {
      return compare(a, b, loose) >= 0;
    }
    exports3.lte = lte;
    function lte(a, b, loose) {
      return compare(a, b, loose) <= 0;
    }
    exports3.cmp = cmp;
    function cmp(a, op, b, loose) {
      switch (op) {
        case "===":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a === b;
        case "!==":
          if (typeof a === "object")
            a = a.version;
          if (typeof b === "object")
            b = b.version;
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError("Invalid operator: " + op);
      }
    }
    exports3.Comparator = Comparator;
    function Comparator(comp, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp;
        } else {
          comp = comp.value;
        }
      }
      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options);
      }
      debug3("comparator", comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);
      if (this.semver === ANY) {
        this.value = "";
      } else {
        this.value = this.operator + this.semver.version;
      }
      debug3("comp", this);
    }
    var ANY = {};
    Comparator.prototype.parse = function(comp) {
      var r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
      var m2 = comp.match(r);
      if (!m2) {
        throw new TypeError("Invalid comparator: " + comp);
      }
      this.operator = m2[1] !== void 0 ? m2[1] : "";
      if (this.operator === "=") {
        this.operator = "";
      }
      if (!m2[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m2[2], this.options.loose);
      }
    };
    Comparator.prototype.toString = function() {
      return this.value;
    };
    Comparator.prototype.test = function(version) {
      debug3("Comparator.test", version, this.options.loose);
      if (this.semver === ANY || version === ANY) {
        return true;
      }
      if (typeof version === "string") {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }
      return cmp(version, this.operator, this.semver, this.options);
    };
    Comparator.prototype.intersects = function(comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError("a Comparator is required");
      }
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      var rangeTmp;
      if (this.operator === "") {
        if (this.value === "") {
          return true;
        }
        rangeTmp = new Range(comp.value, options);
        return satisfies(this.value, rangeTmp, options);
      } else if (comp.operator === "") {
        if (comp.value === "") {
          return true;
        }
        rangeTmp = new Range(this.value, options);
        return satisfies(comp.semver, rangeTmp, options);
      }
      var sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
      var sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
      var oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && ((this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<"));
      var oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ((this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">"));
      return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
    };
    exports3.Range = Range;
    function Range(range, options) {
      if (!options || typeof options !== "object") {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (range instanceof Range) {
        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
          return range;
        } else {
          return new Range(range.raw, options);
        }
      }
      if (range instanceof Comparator) {
        return new Range(range.value, options);
      }
      if (!(this instanceof Range)) {
        return new Range(range, options);
      }
      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;
      this.raw = range;
      this.set = range.split(/\s*\|\|\s*/).map(function(range2) {
        return this.parseRange(range2.trim());
      }, this).filter(function(c) {
        return c.length;
      });
      if (!this.set.length) {
        throw new TypeError("Invalid SemVer Range: " + range);
      }
      this.format();
    }
    Range.prototype.format = function() {
      this.range = this.set.map(function(comps) {
        return comps.join(" ").trim();
      }).join("||").trim();
      return this.range;
    };
    Range.prototype.toString = function() {
      return this.range;
    };
    Range.prototype.parseRange = function(range) {
      var loose = this.options.loose;
      range = range.trim();
      var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
      range = range.replace(hr, hyphenReplace);
      debug3("hyphen replace", range);
      range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
      debug3("comparator trim", range, re[t.COMPARATORTRIM]);
      range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
      range = range.replace(re[t.CARETTRIM], caretTrimReplace);
      range = range.split(/\s+/).join(" ");
      var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
      var set = range.split(" ").map(function(comp) {
        return parseComparator(comp, this.options);
      }, this).join(" ").split(/\s+/);
      if (this.options.loose) {
        set = set.filter(function(comp) {
          return !!comp.match(compRe);
        });
      }
      set = set.map(function(comp) {
        return new Comparator(comp, this.options);
      }, this);
      return set;
    };
    Range.prototype.intersects = function(range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError("a Range is required");
      }
      return this.set.some(function(thisComparators) {
        return isSatisfiable(thisComparators, options) && range.set.some(function(rangeComparators) {
          return isSatisfiable(rangeComparators, options) && thisComparators.every(function(thisComparator) {
            return rangeComparators.every(function(rangeComparator) {
              return thisComparator.intersects(rangeComparator, options);
            });
          });
        });
      });
    };
    function isSatisfiable(comparators, options) {
      var result = true;
      var remainingComparators = comparators.slice();
      var testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every(function(otherComparator) {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    }
    exports3.toComparators = toComparators;
    function toComparators(range, options) {
      return new Range(range, options).set.map(function(comp) {
        return comp.map(function(c) {
          return c.value;
        }).join(" ").trim().split(" ");
      });
    }
    function parseComparator(comp, options) {
      debug3("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug3("caret", comp);
      comp = replaceTildes(comp, options);
      debug3("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug3("xrange", comp);
      comp = replaceStars(comp, options);
      debug3("stars", comp);
      return comp;
    }
    function isX(id) {
      return !id || id.toLowerCase() === "x" || id === "*";
    }
    function replaceTildes(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceTilde(comp2, options);
      }).join(" ");
    }
    function replaceTilde(comp, options) {
      var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, function(_2, M, m2, p, pr) {
        debug3("tilde", comp, _2, M, m2, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m2)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          ret = ">=" + M + "." + m2 + ".0 <" + M + "." + (+m2 + 1) + ".0";
        } else if (pr) {
          debug3("replaceTilde pr", pr);
          ret = ">=" + M + "." + m2 + "." + p + "-" + pr + " <" + M + "." + (+m2 + 1) + ".0";
        } else {
          ret = ">=" + M + "." + m2 + "." + p + " <" + M + "." + (+m2 + 1) + ".0";
        }
        debug3("tilde return", ret);
        return ret;
      });
    }
    function replaceCarets(comp, options) {
      return comp.trim().split(/\s+/).map(function(comp2) {
        return replaceCaret(comp2, options);
      }).join(" ");
    }
    function replaceCaret(comp, options) {
      debug3("caret", comp, options);
      var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
      return comp.replace(r, function(_2, M, m2, p, pr) {
        debug3("caret", comp, _2, M, m2, p, pr);
        var ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m2)) {
          ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0";
        } else if (isX(p)) {
          if (M === "0") {
            ret = ">=" + M + "." + m2 + ".0 <" + M + "." + (+m2 + 1) + ".0";
          } else {
            ret = ">=" + M + "." + m2 + ".0 <" + (+M + 1) + ".0.0";
          }
        } else if (pr) {
          debug3("replaceCaret pr", pr);
          if (M === "0") {
            if (m2 === "0") {
              ret = ">=" + M + "." + m2 + "." + p + "-" + pr + " <" + M + "." + m2 + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m2 + "." + p + "-" + pr + " <" + M + "." + (+m2 + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m2 + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0";
          }
        } else {
          debug3("no pr");
          if (M === "0") {
            if (m2 === "0") {
              ret = ">=" + M + "." + m2 + "." + p + " <" + M + "." + m2 + "." + (+p + 1);
            } else {
              ret = ">=" + M + "." + m2 + "." + p + " <" + M + "." + (+m2 + 1) + ".0";
            }
          } else {
            ret = ">=" + M + "." + m2 + "." + p + " <" + (+M + 1) + ".0.0";
          }
        }
        debug3("caret return", ret);
        return ret;
      });
    }
    function replaceXRanges(comp, options) {
      debug3("replaceXRanges", comp, options);
      return comp.split(/\s+/).map(function(comp2) {
        return replaceXRange(comp2, options);
      }).join(" ");
    }
    function replaceXRange(comp, options) {
      comp = comp.trim();
      var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, function(ret, gtlt, M, m2, p, pr) {
        debug3("xRange", comp, ret, gtlt, M, m2, p, pr);
        var xM = isX(M);
        var xm = xM || isX(m2);
        var xp = xm || isX(p);
        var anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m2 = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m2 = 0;
              p = 0;
            } else {
              m2 = +m2 + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m2 = +m2 + 1;
            }
          }
          ret = gtlt + M + "." + m2 + "." + p + pr;
        } else if (xm) {
          ret = ">=" + M + ".0.0" + pr + " <" + (+M + 1) + ".0.0" + pr;
        } else if (xp) {
          ret = ">=" + M + "." + m2 + ".0" + pr + " <" + M + "." + (+m2 + 1) + ".0" + pr;
        }
        debug3("xRange return", ret);
        return ret;
      });
    }
    function replaceStars(comp, options) {
      debug3("replaceStars", comp, options);
      return comp.trim().replace(re[t.STAR], "");
    }
    function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = ">=" + fM + ".0.0";
      } else if (isX(fp)) {
        from = ">=" + fM + "." + fm + ".0";
      } else {
        from = ">=" + from;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = "<" + (+tM + 1) + ".0.0";
      } else if (isX(tp)) {
        to = "<" + tM + "." + (+tm + 1) + ".0";
      } else if (tpr) {
        to = "<=" + tM + "." + tm + "." + tp + "-" + tpr;
      } else {
        to = "<=" + to;
      }
      return (from + " " + to).trim();
    }
    Range.prototype.test = function(version) {
      if (!version) {
        return false;
      }
      if (typeof version === "string") {
        try {
          version = new SemVer(version, this.options);
        } catch (er) {
          return false;
        }
      }
      for (var i2 = 0; i2 < this.set.length; i2++) {
        if (testSet(this.set[i2], version, this.options)) {
          return true;
        }
      }
      return false;
    };
    function testSet(set, version, options) {
      for (var i2 = 0; i2 < set.length; i2++) {
        if (!set[i2].test(version)) {
          return false;
        }
      }
      if (version.prerelease.length && !options.includePrerelease) {
        for (i2 = 0; i2 < set.length; i2++) {
          debug3(set[i2].semver);
          if (set[i2].semver === ANY) {
            continue;
          }
          if (set[i2].semver.prerelease.length > 0) {
            var allowed = set[i2].semver;
            if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    }
    exports3.satisfies = satisfies;
    function satisfies(version, range, options) {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version);
    }
    exports3.maxSatisfying = maxSatisfying;
    function maxSatisfying(versions, range, options) {
      var max = null;
      var maxSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max;
    }
    exports3.minSatisfying = minSatisfying;
    function minSatisfying(versions, range, options) {
      var min = null;
      var minSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null;
      }
      versions.forEach(function(v) {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min;
    }
    exports3.minVersion = minVersion;
    function minVersion(range, loose) {
      range = new Range(range, loose);
      var minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        comparators.forEach(function(comparator) {
          var compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!minver || gt(minver, compver)) {
                minver = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error("Unexpected operation: " + comparator.operator);
          }
        });
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    }
    exports3.validRange = validRange;
    function validRange(range, options) {
      try {
        return new Range(range, options).range || "*";
      } catch (er) {
        return null;
      }
    }
    exports3.ltr = ltr;
    function ltr(version, range, options) {
      return outside(version, range, "<", options);
    }
    exports3.gtr = gtr;
    function gtr(version, range, options) {
      return outside(version, range, ">", options);
    }
    exports3.outside = outside;
    function outside(version, range, hilo, options) {
      version = new SemVer(version, options);
      range = new Range(range, options);
      var gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version, range, options)) {
        return false;
      }
      for (var i2 = 0; i2 < range.set.length; ++i2) {
        var comparators = range.set[i2];
        var high = null;
        var low = null;
        comparators.forEach(function(comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }
      return true;
    }
    exports3.prerelease = prerelease;
    function prerelease(version, options) {
      var parsed = parse2(version, options);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    }
    exports3.intersects = intersects;
    function intersects(r1, r2, options) {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2);
    }
    exports3.coerce = coerce;
    function coerce(version, options) {
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version === "number") {
        version = String(version);
      }
      if (typeof version !== "string") {
        return null;
      }
      options = options || {};
      var match = null;
      if (!options.rtl) {
        match = version.match(re[t.COERCE]);
      } else {
        var next;
        while ((next = re[t.COERCERTL].exec(version)) && (!match || match.index + match[0].length !== version.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        re[t.COERCERTL].lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      return parse2(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
    }
  });
  var semver_1 = semver.SEMVER_SPEC_VERSION;
  var semver_2 = semver.re;
  var semver_3 = semver.src;
  var semver_4 = semver.tokens;
  var semver_5 = semver.parse;
  var semver_6 = semver.valid;
  var semver_7 = semver.clean;
  var semver_8 = semver.SemVer;
  var semver_9 = semver.inc;
  var semver_10 = semver.diff;
  var semver_11 = semver.compareIdentifiers;
  var semver_12 = semver.rcompareIdentifiers;
  var semver_13 = semver.major;
  var semver_14 = semver.minor;
  var semver_15 = semver.patch;
  var semver_16 = semver.compare;
  var semver_17 = semver.compareLoose;
  var semver_18 = semver.compareBuild;
  var semver_19 = semver.rcompare;
  var semver_20 = semver.sort;
  var semver_21 = semver.rsort;
  var semver_22 = semver.gt;
  var semver_23 = semver.lt;
  var semver_24 = semver.eq;
  var semver_25 = semver.neq;
  var semver_26 = semver.gte;
  var semver_27 = semver.lte;
  var semver_28 = semver.cmp;
  var semver_29 = semver.Comparator;
  var semver_30 = semver.Range;
  var semver_31 = semver.toComparators;
  var semver_32 = semver.satisfies;
  var semver_33 = semver.maxSatisfying;
  var semver_34 = semver.minSatisfying;
  var semver_35 = semver.minVersion;
  var semver_36 = semver.validRange;
  var semver_37 = semver.ltr;
  var semver_38 = semver.gtr;
  var semver_39 = semver.outside;
  var semver_40 = semver.prerelease;
  var semver_41 = semver.intersects;
  var semver_42 = semver.coerce;
  const {promisify: promisify3} = util__default;
  const useNativeRecursiveOption = semver.satisfies(process.version, ">=10.12.0");
  const checkPath = (pth) => {
    if (process.platform === "win32") {
      const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path19.parse(pth).root, ""));
      if (pathHasInvalidWinCharacters) {
        const error = new Error(`Path contains invalid characters: ${pth}`);
        error.code = "EINVAL";
        throw error;
      }
    }
  };
  const processOptions = (options) => {
    const defaults = {
      mode: 511,
      fs: fs17
    };
    return {
      ...defaults,
      ...options
    };
  };
  const permissionError = (pth) => {
    const error = new Error(`operation not permitted, mkdir '${pth}'`);
    error.code = "EPERM";
    error.errno = -4048;
    error.path = pth;
    error.syscall = "mkdir";
    return error;
  };
  const makeDir = async (input, options) => {
    checkPath(input);
    options = processOptions(options);
    const mkdir = promisify3(options.fs.mkdir);
    const stat = promisify3(options.fs.stat);
    if (useNativeRecursiveOption && options.fs.mkdir === fs17.mkdir) {
      const pth = path19.resolve(input);
      await mkdir(pth, {
        mode: options.mode,
        recursive: true
      });
      return pth;
    }
    const make = async (pth) => {
      try {
        await mkdir(pth, options.mode);
        return pth;
      } catch (error) {
        if (error.code === "EPERM") {
          throw error;
        }
        if (error.code === "ENOENT") {
          if (path19.dirname(pth) === pth) {
            throw permissionError(pth);
          }
          if (error.message.includes("null bytes")) {
            throw error;
          }
          await make(path19.dirname(pth));
          return make(pth);
        }
        try {
          const stats = await stat(pth);
          if (!stats.isDirectory()) {
            throw new Error("The path is not a directory");
          }
        } catch (_2) {
          throw error;
        }
        return pth;
      }
    };
    return make(path19.resolve(input));
  };
  var makeDir_1 = makeDir;
  var sync = (input, options) => {
    checkPath(input);
    options = processOptions(options);
    if (useNativeRecursiveOption && options.fs.mkdirSync === fs17.mkdirSync) {
      const pth = path19.resolve(input);
      fs17.mkdirSync(pth, {
        mode: options.mode,
        recursive: true
      });
      return pth;
    }
    const make = (pth) => {
      try {
        options.fs.mkdirSync(pth, options.mode);
      } catch (error) {
        if (error.code === "EPERM") {
          throw error;
        }
        if (error.code === "ENOENT") {
          if (path19.dirname(pth) === pth) {
            throw permissionError(pth);
          }
          if (error.message.includes("null bytes")) {
            throw error;
          }
          make(path19.dirname(pth));
          return make(pth);
        }
        try {
          if (!options.fs.statSync(pth).isDirectory()) {
            throw new Error("The path is not a directory");
          }
        } catch (_2) {
          throw error;
        }
      }
      return pth;
    };
    return make(path19.resolve(input));
  };
  makeDir_1.sync = sync;
  const exists = util4.promisify(fs17.exists);
  const readFile2 = util4.promisify(fs17.readFile);
  const writeFile = util4.promisify(fastWriteAtomic);
  const PRISMA_SIGNATURE = "signature";
  const PRISMA_CACHE_FILE = "prisma";
  async function getSignature(signatureFile, cacheFile) {
    const dirs = envPaths_1(`checkpoint`);
    cacheFile = cacheFile || path19.join(dirs.cache, PRISMA_CACHE_FILE);
    signatureFile = signatureFile || path19.join(dirs.cache, PRISMA_SIGNATURE);
    if (await exists(signatureFile)) {
      const signature = await readSignature(signatureFile);
      if (signature) {
        return signature;
      }
    }
    if (await exists(cacheFile)) {
      const signature = await readSignature(cacheFile);
      if (signature) {
        await createSignatureFile(signatureFile, signature);
        return signature;
      }
    }
    return await createSignatureFile(signatureFile);
  }
  function isSignatureValid(signature) {
    return typeof signature === "string" && signature.length === 36;
  }
  async function readSignature(file) {
    try {
      const data = await readFile2(file, "utf8");
      const {signature} = JSON.parse(data);
      if (isSignatureValid(signature)) {
        return signature;
      }
      return "";
    } catch (err) {
      return "";
    }
  }
  async function createSignatureFile(signatureFile, signature) {
    const signatureState = {
      signature: signature || v4()
    };
    await makeDir_1(path19.dirname(signatureFile));
    await writeFile(signatureFile, JSON.stringify(signatureState, null, "  "));
    return signatureState.signature;
  }
  const readdir = util__default.promisify(fs17.readdir);
  const readFile$1 = util__default.promisify(fs17.readFile);
  async function getInfo2() {
    const cachePath = envPaths_1("checkpoint").cache;
    const dir = await readdir(cachePath);
    const cacheItems = [];
    for (const item of dir) {
      if (!item.includes("-")) {
        continue;
      }
      try {
        const jsonData = JSON.parse(await readFile$1(path19.join(cachePath, item), {encoding: "utf-8"}));
        if (jsonData.output && !jsonData.output.cli_path_hash) {
          jsonData.output.cli_path_hash = item.split("-")[1];
        }
        cacheItems.push(jsonData);
      } catch (e) {
        console.error(e);
      }
    }
    return {
      signature: await getSignature(),
      cachePath,
      cacheItems
    };
  }
  const writeFile$1 = util__default.promisify(fastWriteAtomic);
  const readFile$2 = util__default.promisify(fs17.readFile);
  const unlink$1 = util__default.promisify(fs17.unlink);
  const defaultSchema2 = {
    last_reminder: 0,
    cached_at: 0,
    version: "",
    cli_path: "",
    previous_client_event_id: "",
    output: {
      product: "",
      cli_path_hash: "",
      local_timestamp: "",
      previous_version: "",
      current_version: "",
      current_release_date: 0,
      current_download_url: "",
      current_changelog_url: "",
      package: "",
      release_tag: "",
      install_command: "",
      project_website: "",
      outdated: false,
      alerts: []
    }
  };
  class Config {
    static async new(state, schema = defaultSchema2) {
      await makeDir_1(path19.dirname(state.cache_file));
      return new Config(state, schema);
    }
    constructor(state, defaultSchema3) {
      this.state = state;
      this.defaultSchema = defaultSchema3;
    }
    async checkCache(newState) {
      const now = newState.now();
      const cache = await this.all();
      if (!cache) {
        return void 0;
      }
      if (newState.version !== cache.version) {
        await this.delete();
        return void 0;
      }
      if (now - cache.cached_at > newState.cache_duration) {
        await this.delete();
        return void 0;
      }
      return cache;
    }
    async set(update) {
      const existing = await this.all() || {};
      const schema = Object.assign(existing, update);
      for (let k in this.defaultSchema) {
        if (typeof schema[k] === "undefined") {
          schema[k] = this.defaultSchema[k];
        }
      }
      await writeFile$1(this.state.cache_file, JSON.stringify(schema, null, "  "));
      return;
    }
    async all() {
      try {
        const data = await readFile$2(this.state.cache_file, "utf8");
        return JSON.parse(data);
      } catch (err) {
        return;
      }
    }
    async get(key) {
      const schema = await this.all();
      if (typeof schema === "undefined") {
        return;
      }
      return schema[key];
    }
    async reset() {
      await writeFile$1(this.state.cache_file, JSON.stringify(this.defaultSchema, null, "  "));
      return;
    }
    async delete() {
      try {
        await unlink$1(this.state.cache_file);
        return;
      } catch (err) {
        return;
      }
    }
  }
  var windows$1 = isexe;
  isexe.sync = sync$1;
  function checkPathExt(path20, options) {
    var pathext = options.pathExt !== void 0 ? options.pathExt : process.env.PATHEXT;
    if (!pathext) {
      return true;
    }
    pathext = pathext.split(";");
    if (pathext.indexOf("") !== -1) {
      return true;
    }
    for (var i = 0; i < pathext.length; i++) {
      var p = pathext[i].toLowerCase();
      if (p && path20.substr(-p.length).toLowerCase() === p) {
        return true;
      }
    }
    return false;
  }
  function checkStat(stat, path20, options) {
    if (!stat.isSymbolicLink() && !stat.isFile()) {
      return false;
    }
    return checkPathExt(path20, options);
  }
  function isexe(path20, options, cb) {
    fs17.stat(path20, function(er, stat) {
      cb(er, er ? false : checkStat(stat, path20, options));
    });
  }
  function sync$1(path20, options) {
    return checkStat(fs17.statSync(path20), path20, options);
  }
  var mode = isexe$1;
  isexe$1.sync = sync$2;
  function isexe$1(path20, options, cb) {
    fs17.stat(path20, function(er, stat) {
      cb(er, er ? false : checkStat$1(stat, options));
    });
  }
  function sync$2(path20, options) {
    return checkStat$1(fs17.statSync(path20), options);
  }
  function checkStat$1(stat, options) {
    return stat.isFile() && checkMode(stat, options);
  }
  function checkMode(stat, options) {
    var mod = stat.mode;
    var uid = stat.uid;
    var gid = stat.gid;
    var myUid = options.uid !== void 0 ? options.uid : process.getuid && process.getuid();
    var myGid = options.gid !== void 0 ? options.gid : process.getgid && process.getgid();
    var u = parseInt("100", 8);
    var g = parseInt("010", 8);
    var o = parseInt("001", 8);
    var ug = u | g;
    var ret = mod & o || mod & g && gid === myGid || mod & u && uid === myUid || mod & ug && myUid === 0;
    return ret;
  }
  var core;
  if (process.platform === "win32" || commonjsGlobal.TESTING_WINDOWS) {
    core = windows$1;
  } else {
    core = mode;
  }
  var isexe_1 = isexe$2;
  isexe$2.sync = sync$3;
  function isexe$2(path20, options, cb) {
    if (typeof options === "function") {
      cb = options;
      options = {};
    }
    if (!cb) {
      if (typeof Promise !== "function") {
        throw new TypeError("callback not provided");
      }
      return new Promise(function(resolve, reject) {
        isexe$2(path20, options || {}, function(er, is) {
          if (er) {
            reject(er);
          } else {
            resolve(is);
          }
        });
      });
    }
    core(path20, options || {}, function(er, is) {
      if (er) {
        if (er.code === "EACCES" || options && options.ignoreErrors) {
          er = null;
          is = false;
        }
      }
      cb(er, is);
    });
  }
  function sync$3(path20, options) {
    try {
      return core.sync(path20, options || {});
    } catch (er) {
      if (options && options.ignoreErrors || er.code === "EACCES") {
        return false;
      } else {
        throw er;
      }
    }
  }
  const isWindows = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
  const COLON = isWindows ? ";" : ":";
  const getNotFoundError = (cmd) => Object.assign(new Error(`not found: ${cmd}`), {code: "ENOENT"});
  const getPathInfo = (cmd, opt) => {
    const colon = opt.colon || COLON;
    const pathEnv = cmd.match(/\//) || isWindows && cmd.match(/\\/) ? [""] : [
      ...isWindows ? [process.cwd()] : [],
      ...(opt.path || process.env.PATH || "").split(colon)
    ];
    const pathExtExe = isWindows ? opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "";
    const pathExt = isWindows ? pathExtExe.split(colon) : [""];
    if (isWindows) {
      if (cmd.indexOf(".") !== -1 && pathExt[0] !== "")
        pathExt.unshift("");
    }
    return {
      pathEnv,
      pathExt,
      pathExtExe
    };
  };
  const which = (cmd, opt, cb) => {
    if (typeof opt === "function") {
      cb = opt;
      opt = {};
    }
    if (!opt)
      opt = {};
    const {pathEnv, pathExt, pathExtExe} = getPathInfo(cmd, opt);
    const found = [];
    const step = (i) => new Promise((resolve, reject) => {
      if (i === pathEnv.length)
        return opt.all && found.length ? resolve(found) : reject(getNotFoundError(cmd));
      const ppRaw = pathEnv[i];
      const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
      const pCmd = path19.join(pathPart, cmd);
      const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
      resolve(subStep(p, i, 0));
    });
    const subStep = (p, i, ii) => new Promise((resolve, reject) => {
      if (ii === pathExt.length)
        return resolve(step(i + 1));
      const ext = pathExt[ii];
      isexe_1(p + ext, {pathExt: pathExtExe}, (er, is) => {
        if (!er && is) {
          if (opt.all)
            found.push(p + ext);
          else
            return resolve(p + ext);
        }
        return resolve(subStep(p, i, ii + 1));
      });
    });
    return cb ? step(0).then((res) => cb(null, res), cb) : step(0);
  };
  const whichSync = (cmd, opt) => {
    opt = opt || {};
    const {pathEnv, pathExt, pathExtExe} = getPathInfo(cmd, opt);
    const found = [];
    for (let i = 0; i < pathEnv.length; i++) {
      const ppRaw = pathEnv[i];
      const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
      const pCmd = path19.join(pathPart, cmd);
      const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
      for (let j = 0; j < pathExt.length; j++) {
        const cur = p + pathExt[j];
        try {
          const is = isexe_1.sync(cur, {pathExt: pathExtExe});
          if (is) {
            if (opt.all)
              found.push(cur);
            else
              return cur;
          }
        } catch (ex) {
        }
      }
    }
    if (opt.all && found.length)
      return found;
    if (opt.nothrow)
      return null;
    throw getNotFoundError(cmd);
  };
  var which_1 = which;
  which.sync = whichSync;
  const pathKey = (options = {}) => {
    const environment = options.env || process.env;
    const platform = options.platform || process.platform;
    if (platform !== "win32") {
      return "PATH";
    }
    return Object.keys(environment).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
  };
  var pathKey_1 = pathKey;
  var _default$1 = pathKey;
  pathKey_1.default = _default$1;
  function resolveCommandAttempt(parsed, withoutPathExt) {
    const env2 = parsed.options.env || process.env;
    const cwd = process.cwd();
    const hasCustomCwd = parsed.options.cwd != null;
    const shouldSwitchCwd = hasCustomCwd && process.chdir !== void 0 && !process.chdir.disabled;
    if (shouldSwitchCwd) {
      try {
        process.chdir(parsed.options.cwd);
      } catch (err) {
      }
    }
    let resolved;
    try {
      resolved = which_1.sync(parsed.command, {
        path: env2[pathKey_1({env: env2})],
        pathExt: withoutPathExt ? path19.delimiter : void 0
      });
    } catch (e) {
    } finally {
      if (shouldSwitchCwd) {
        process.chdir(cwd);
      }
    }
    if (resolved) {
      resolved = path19.resolve(hasCustomCwd ? parsed.options.cwd : "", resolved);
    }
    return resolved;
  }
  function resolveCommand(parsed) {
    return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
  }
  var resolveCommand_1 = resolveCommand;
  const metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
  function escapeCommand(arg11) {
    arg11 = arg11.replace(metaCharsRegExp, "^$1");
    return arg11;
  }
  function escapeArgument(arg11, doubleEscapeMetaChars) {
    arg11 = `${arg11}`;
    arg11 = arg11.replace(/(\\*)"/g, '$1$1\\"');
    arg11 = arg11.replace(/(\\*)$/, "$1$1");
    arg11 = `"${arg11}"`;
    arg11 = arg11.replace(metaCharsRegExp, "^$1");
    if (doubleEscapeMetaChars) {
      arg11 = arg11.replace(metaCharsRegExp, "^$1");
    }
    return arg11;
  }
  var command = escapeCommand;
  var argument = escapeArgument;
  var _escape = {
    command,
    argument
  };
  var shebangRegex = /^#!(.*)/;
  var shebangCommand = (string = "") => {
    const match = string.match(shebangRegex);
    if (!match) {
      return null;
    }
    const [path20, argument2] = match[0].replace(/#! ?/, "").split(" ");
    const binary = path20.split("/").pop();
    if (binary === "env") {
      return argument2;
    }
    return argument2 ? `${binary} ${argument2}` : binary;
  };
  function readShebang(command2) {
    const size = 150;
    const buffer = Buffer.alloc(size);
    let fd;
    try {
      fd = fs17.openSync(command2, "r");
      fs17.readSync(fd, buffer, 0, size, 0);
      fs17.closeSync(fd);
    } catch (e) {
    }
    return shebangCommand(buffer.toString());
  }
  var readShebang_1 = readShebang;
  const isWin = process.platform === "win32";
  const isExecutableRegExp = /\.(?:com|exe)$/i;
  const isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
  function detectShebang(parsed) {
    parsed.file = resolveCommand_1(parsed);
    const shebang = parsed.file && readShebang_1(parsed.file);
    if (shebang) {
      parsed.args.unshift(parsed.file);
      parsed.command = shebang;
      return resolveCommand_1(parsed);
    }
    return parsed.file;
  }
  function parseNonShell(parsed) {
    if (!isWin) {
      return parsed;
    }
    const commandFile = detectShebang(parsed);
    const needsShell = !isExecutableRegExp.test(commandFile);
    if (parsed.options.forceShell || needsShell) {
      const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
      parsed.command = path19.normalize(parsed.command);
      parsed.command = _escape.command(parsed.command);
      parsed.args = parsed.args.map((arg11) => _escape.argument(arg11, needsDoubleEscapeMetaChars));
      const shellCommand = [parsed.command].concat(parsed.args).join(" ");
      parsed.args = ["/d", "/s", "/c", `"${shellCommand}"`];
      parsed.command = process.env.comspec || "cmd.exe";
      parsed.options.windowsVerbatimArguments = true;
    }
    return parsed;
  }
  function parse(command2, args2, options) {
    if (args2 && !Array.isArray(args2)) {
      options = args2;
      args2 = null;
    }
    args2 = args2 ? args2.slice(0) : [];
    options = Object.assign({}, options);
    const parsed = {
      command: command2,
      args: args2,
      options,
      file: void 0,
      original: {
        command: command2,
        args: args2
      }
    };
    return options.shell ? parsed : parseNonShell(parsed);
  }
  var parse_1 = parse;
  const isWin$1 = process.platform === "win32";
  function notFoundError(original, syscall) {
    return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
      code: "ENOENT",
      errno: "ENOENT",
      syscall: `${syscall} ${original.command}`,
      path: original.command,
      spawnargs: original.args
    });
  }
  function hookChildProcess(cp, parsed) {
    if (!isWin$1) {
      return;
    }
    const originalEmit = cp.emit;
    cp.emit = function(name, arg1) {
      if (name === "exit") {
        const err = verifyENOENT(arg1, parsed);
        if (err) {
          return originalEmit.call(cp, "error", err);
        }
      }
      return originalEmit.apply(cp, arguments);
    };
  }
  function verifyENOENT(status, parsed) {
    if (isWin$1 && status === 1 && !parsed.file) {
      return notFoundError(parsed.original, "spawn");
    }
    return null;
  }
  function verifyENOENTSync(status, parsed) {
    if (isWin$1 && status === 1 && !parsed.file) {
      return notFoundError(parsed.original, "spawnSync");
    }
    return null;
  }
  var enoent = {
    hookChildProcess,
    verifyENOENT,
    verifyENOENTSync,
    notFoundError
  };
  function spawn(command2, args2, options) {
    const parsed = parse_1(command2, args2, options);
    const spawned = child_process.spawn(parsed.command, parsed.args, parsed.options);
    enoent.hookChildProcess(spawned, parsed);
    return spawned;
  }
  function spawnSync(command2, args2, options) {
    const parsed = parse_1(command2, args2, options);
    const result = child_process.spawnSync(parsed.command, parsed.args, parsed.options);
    result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
    return result;
  }
  var crossSpawn = spawn;
  var spawn_1 = spawn;
  var sync$4 = spawnSync;
  var _parse = parse_1;
  var _enoent = enoent;
  crossSpawn.spawn = spawn_1;
  crossSpawn.sync = sync$4;
  crossSpawn._parse = _parse;
  crossSpawn._enoent = _enoent;
  var vendors = [
    {
      name: "AppVeyor",
      constant: "APPVEYOR",
      env: "APPVEYOR",
      pr: "APPVEYOR_PULL_REQUEST_NUMBER"
    },
    {
      name: "Azure Pipelines",
      constant: "AZURE_PIPELINES",
      env: "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI",
      pr: "SYSTEM_PULLREQUEST_PULLREQUESTID"
    },
    {
      name: "Bamboo",
      constant: "BAMBOO",
      env: "bamboo_planKey"
    },
    {
      name: "Bitbucket Pipelines",
      constant: "BITBUCKET",
      env: "BITBUCKET_COMMIT",
      pr: "BITBUCKET_PR_ID"
    },
    {
      name: "Bitrise",
      constant: "BITRISE",
      env: "BITRISE_IO",
      pr: "BITRISE_PULL_REQUEST"
    },
    {
      name: "Buddy",
      constant: "BUDDY",
      env: "BUDDY_WORKSPACE_ID",
      pr: "BUDDY_EXECUTION_PULL_REQUEST_ID"
    },
    {
      name: "Buildkite",
      constant: "BUILDKITE",
      env: "BUILDKITE",
      pr: {
        env: "BUILDKITE_PULL_REQUEST",
        ne: "false"
      }
    },
    {
      name: "CircleCI",
      constant: "CIRCLE",
      env: "CIRCLECI",
      pr: "CIRCLE_PULL_REQUEST"
    },
    {
      name: "Cirrus CI",
      constant: "CIRRUS",
      env: "CIRRUS_CI",
      pr: "CIRRUS_PR"
    },
    {
      name: "AWS CodeBuild",
      constant: "CODEBUILD",
      env: "CODEBUILD_BUILD_ARN"
    },
    {
      name: "Codeship",
      constant: "CODESHIP",
      env: {
        CI_NAME: "codeship"
      }
    },
    {
      name: "Drone",
      constant: "DRONE",
      env: "DRONE",
      pr: {
        DRONE_BUILD_EVENT: "pull_request"
      }
    },
    {
      name: "dsari",
      constant: "DSARI",
      env: "DSARI"
    },
    {
      name: "GitHub Actions",
      constant: "GITHUB_ACTIONS",
      env: "GITHUB_ACTIONS",
      pr: {
        GITHUB_EVENT_NAME: "pull_request"
      }
    },
    {
      name: "GitLab CI",
      constant: "GITLAB",
      env: "GITLAB_CI"
    },
    {
      name: "GoCD",
      constant: "GOCD",
      env: "GO_PIPELINE_LABEL"
    },
    {
      name: "Hudson",
      constant: "HUDSON",
      env: "HUDSON_URL"
    },
    {
      name: "Jenkins",
      constant: "JENKINS",
      env: [
        "JENKINS_URL",
        "BUILD_ID"
      ],
      pr: {
        any: [
          "ghprbPullId",
          "CHANGE_ID"
        ]
      }
    },
    {
      name: "Magnum CI",
      constant: "MAGNUM",
      env: "MAGNUM"
    },
    {
      name: "Netlify CI",
      constant: "NETLIFY",
      env: "NETLIFY_BUILD_BASE",
      pr: {
        env: "PULL_REQUEST",
        ne: "false"
      }
    },
    {
      name: "Nevercode",
      constant: "NEVERCODE",
      env: "NEVERCODE",
      pr: {
        env: "NEVERCODE_PULL_REQUEST",
        ne: "false"
      }
    },
    {
      name: "Sail CI",
      constant: "SAIL",
      env: "SAILCI",
      pr: "SAIL_PULL_REQUEST_NUMBER"
    },
    {
      name: "Semaphore",
      constant: "SEMAPHORE",
      env: "SEMAPHORE",
      pr: "PULL_REQUEST_NUMBER"
    },
    {
      name: "Shippable",
      constant: "SHIPPABLE",
      env: "SHIPPABLE",
      pr: {
        IS_PULL_REQUEST: "true"
      }
    },
    {
      name: "Solano CI",
      constant: "SOLANO",
      env: "TDDIUM",
      pr: "TDDIUM_PR_ID"
    },
    {
      name: "Strider CD",
      constant: "STRIDER",
      env: "STRIDER"
    },
    {
      name: "TaskCluster",
      constant: "TASKCLUSTER",
      env: [
        "TASK_ID",
        "RUN_ID"
      ]
    },
    {
      name: "TeamCity",
      constant: "TEAMCITY",
      env: "TEAMCITY_VERSION"
    },
    {
      name: "Travis CI",
      constant: "TRAVIS",
      env: "TRAVIS",
      pr: {
        env: "TRAVIS_PULL_REQUEST",
        ne: "false"
      }
    },
    {
      name: "Zeit Now",
      constant: "ZEIT_NOW",
      env: "NOW_BUILDER"
    }
  ];
  var vendors$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    default: vendors
  });
  var vendors$2 = getCjsExportFromNamespace(vendors$1);
  var ciInfo = createCommonjsModule(function(module4, exports3) {
    var env2 = process.env;
    Object.defineProperty(exports3, "_vendors", {
      value: vendors$2.map(function(v) {
        return v.constant;
      })
    });
    exports3.name = null;
    exports3.isPR = null;
    vendors$2.forEach(function(vendor) {
      var envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];
      var isCI = envs.every(function(obj) {
        return checkEnv(obj);
      });
      exports3[vendor.constant] = isCI;
      if (isCI) {
        exports3.name = vendor.name;
        switch (typeof vendor.pr) {
          case "string":
            exports3.isPR = !!env2[vendor.pr];
            break;
          case "object":
            if ("env" in vendor.pr) {
              exports3.isPR = vendor.pr.env in env2 && env2[vendor.pr.env] !== vendor.pr.ne;
            } else if ("any" in vendor.pr) {
              exports3.isPR = vendor.pr.any.some(function(key) {
                return !!env2[key];
              });
            } else {
              exports3.isPR = checkEnv(vendor.pr);
            }
            break;
          default:
            exports3.isPR = null;
        }
      }
    });
    exports3.isCI = !!(env2.CI || env2.CONTINUOUS_INTEGRATION || env2.BUILD_NUMBER || env2.RUN_ID || exports3.name || false);
    function checkEnv(obj) {
      if (typeof obj === "string")
        return !!env2[obj];
      return Object.keys(obj).every(function(k) {
        return env2[k] === obj[k];
      });
    }
  });
  var ciInfo_1 = ciInfo._vendors;
  var ciInfo_2 = ciInfo.name;
  var ciInfo_3 = ciInfo.isPR;
  var ciInfo_4 = ciInfo.isCI;
  var s = 1e3;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;
  var ms = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse$1(val);
    } else if (type === "number" && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
  function parse$1(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "weeks":
      case "week":
      case "w":
        return n * w;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return void 0;
    }
  }
  function fmtShort(ms2) {
    var msAbs = Math.abs(ms2);
    if (msAbs >= d) {
      return Math.round(ms2 / d) + "d";
    }
    if (msAbs >= h) {
      return Math.round(ms2 / h) + "h";
    }
    if (msAbs >= m) {
      return Math.round(ms2 / m) + "m";
    }
    if (msAbs >= s) {
      return Math.round(ms2 / s) + "s";
    }
    return ms2 + "ms";
  }
  function fmtLong(ms2) {
    var msAbs = Math.abs(ms2);
    if (msAbs >= d) {
      return plural(ms2, msAbs, d, "day");
    }
    if (msAbs >= h) {
      return plural(ms2, msAbs, h, "hour");
    }
    if (msAbs >= m) {
      return plural(ms2, msAbs, m, "minute");
    }
    if (msAbs >= s) {
      return plural(ms2, msAbs, s, "second");
    }
    return ms2 + " ms";
  }
  function plural(ms2, msAbs, n, name) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms2 / n) + " " + name + (isPlural ? "s" : "");
  }
  const childPath = path19.join(eval("__dirname"), "child");
  async function check2(input) {
    const defaultCache = getCacheFile(input.product, input.cli_path_hash || "default");
    const state = {
      product: input.product,
      version: input.version,
      cli_install_type: input.cli_install_type || "",
      information: input.information || "",
      local_timestamp: input.local_timestamp || rfc3339(new Date()),
      project_hash: input.project_hash,
      cli_path: input.cli_path || "",
      cli_path_hash: input.cli_path_hash || "",
      endpoint: input.endpoint || "https://checkpoint.prisma.io",
      disable: typeof input.disable === "undefined" ? false : input.disable,
      arch: input.arch || os3.arch(),
      os: input.os || os3.platform(),
      node_version: input.node_version || process.version,
      ci: typeof input.ci !== "undefined" ? input.ci : ciInfo.isCI,
      ci_name: typeof input.ci_name !== "undefined" ? input.ci_name || "" : ciInfo.name || "",
      command: input.command || "",
      schema_providers: input.schema_providers || [],
      schema_preview_features: input.schema_preview_features || [],
      schema_generators_providers: input.schema_generators_providers || [],
      cache_file: input.cache_file || defaultCache,
      cache_duration: typeof input.cache_duration === "undefined" ? ms("12h") : input.cache_duration,
      remind_duration: typeof input.remind_duration === "undefined" ? ms("48h") : input.remind_duration,
      force: typeof input.force === "undefined" ? false : input.force,
      timeout: getTimeout(input.timeout),
      unref: typeof input.unref === "undefined" ? true : input.unref,
      child_path: input.child_path || childPath,
      now: () => Date.now(),
      previous_client_event_id: input.previous_client_event_id || ""
    };
    if ((process.env["CHECKPOINT_DISABLE"] || state.disable) && !state.force) {
      return {
        status: "disabled"
      };
    }
    const config = await Config.new(state);
    const cache = await config.checkCache(state);
    if (!cache) {
      const child = spawn$1(state);
      state.unref && child.unref();
      return {
        status: "waiting",
        data: child
      };
    }
    const userReminded = state.now() - cache.last_reminder < state.remind_duration;
    if (userReminded) {
      return {
        status: "reminded",
        data: cache.output
      };
    }
    await config.set({
      last_reminder: state.now()
    });
    return {
      status: "ok",
      data: cache.output
    };
  }
  function getCacheFile(product, cacheIdentifier) {
    const dirs = envPaths_1(`checkpoint`);
    return path19.join(dirs.cache, `${product}-${cacheIdentifier}`);
  }
  function getTimeout(inputTimeout) {
    if (typeof inputTimeout !== "undefined") {
      return inputTimeout;
    }
    const timeoutString = process.env["CHECKPOINT_TIMEOUT"];
    if (typeof timeoutString === "undefined") {
      return 5e3;
    }
    const timeout = parseInt(timeoutString, 10);
    if (isNaN(timeout)) {
      return 5e3;
    }
    return timeout;
  }
  function spawn$1(state) {
    return crossSpawn.spawn(process.execPath, [state.child_path, JSON.stringify(state)], state.unref ? {
      detached: true,
      stdio: "ignore"
    } : {
      detached: false,
      stdio: "pipe"
    });
  }
  function rfc3339(d2) {
    function pad(n) {
      return n < 10 ? "0" + n : n;
    }
    function timezoneOffset(offset) {
      let sign;
      if (offset === 0) {
        return "Z";
      }
      sign = offset > 0 ? "-" : "+";
      offset = Math.abs(offset);
      return sign + pad(Math.floor(offset / 60)) + ":" + pad(offset % 60);
    }
    return d2.getFullYear() + "-" + pad(d2.getMonth() + 1) + "-" + pad(d2.getDate()) + "T" + pad(d2.getHours()) + ":" + pad(d2.getMinutes()) + ":" + pad(d2.getSeconds()) + timezoneOffset(d2.getTimezoneOffset());
  }
  exports2.check = check2;
  exports2.getInfo = getInfo2;
  exports2.getSignature = getSignature;
});

// ../../node_modules/.pnpm/@prisma/studio-server@0.304.0/node_modules/@prisma/studio-server/build/utils/getProjectHash.js
var require_getProjectHash = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const crypto_1 = require("crypto");
  const getProjectHash3 = (schemaPath) => {
    return crypto_1.createHash("sha256").update(schemaPath).digest("hex").substring(0, 8);
  };
  exports2.default = getProjectHash3;
});

// ../../node_modules/.pnpm/@prisma/studio-server@0.304.0/node_modules/@prisma/studio-server/build/services/TelemetryService.js
var require_TelemetryService = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const checkpoint_client_1 = require_dist27();
  const getProjectHash_1 = require_getProjectHash();
  class TelemetryService {
    constructor() {
      this.respond = async (action, payload) => {
        const responsePayload = {
          error: null,
          data: null
        };
        try {
          switch (action) {
            case "send":
              await this.send(payload.data);
              break;
          }
        } catch (e) {
          responsePayload.error = e;
        }
        return responsePayload;
      };
      this.send = async ({command, commandDetails, commandContext}) => {
        if (process.env.NODE_ENV !== "production") {
          return;
        }
        if (!this.options.telemetry) {
          return;
        }
        checkpoint_client_1.check({
          product: "prisma-studio",
          command,
          version: this.options.versions.prisma2,
          project_hash: getProjectHash_1.default(this.options.schemaPath)
        });
      };
    }
    async init(options) {
      var _a;
      this.options = {
        schemaPath: options.schemaPath,
        telemetry: (_a = options.telemetry) !== null && _a !== void 0 ? _a : true,
        versions: options.versions
      };
      await checkpoint_client_1.getSignature();
    }
  }
  exports2.default = new TelemetryService();
});

// ../../node_modules/.pnpm/@prisma/studio-server@0.304.0/node_modules/@prisma/studio-server/build/utils/getProjectPath.js
var require_getProjectPath = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const getProjectPath = (schemaPath) => {
    let projectPath = schemaPath;
    if (projectPath.endsWith("/prisma/schema.prisma") || projectPath.endsWith("\\prisma\\schema.prisma")) {
      projectPath = projectPath.slice(0, -1 * "/prisma/schema.prisma".length);
    }
    if (projectPath.endsWith("/schema.prisma") || projectPath.endsWith("\\schema.prisma")) {
      projectPath = projectPath.slice(0, -1 * "/schema.prisma".length);
    }
    return projectPath;
  };
  exports2.default = getProjectPath;
});

// ../../node_modules/.pnpm/@prisma/studio-server@0.304.0/node_modules/@prisma/studio-server/build/utils/getProjectId.js
var require_getProjectId = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const getProjectPath_1 = require_getProjectPath();
  const getProjectId = (schemaPath) => {
    let projectPath = getProjectPath_1.default(schemaPath);
    if (projectPath.endsWith("/") || projectPath.endsWith("\\")) {
      projectPath = projectPath.slice(0, -1);
    }
    if (projectPath.startsWith("/") || projectPath.startsWith("\\")) {
      projectPath = projectPath.slice(1);
    }
    return projectPath.replace(RegExp(/\/|\\/, "gi"), "-");
  };
  exports2.default = getProjectId;
});

// ../../node_modules/.pnpm/@prisma/studio-server@0.304.0/node_modules/@prisma/studio-server/build/StudioServer.js
var require_StudioServer = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const Sentry = require_dist20();
  const PingService_1 = require_PingService();
  const ProjectService_1 = require_ProjectService();
  const ExpressService_1 = require_ExpressService();
  const PhotonService_1 = require_PhotonService();
  const TelemetryService_1 = require_TelemetryService();
  const debug_1 = require_debug2();
  const getProjectId_1 = require_getProjectId();
  const getProjectPath_1 = require_getProjectPath();
  if (process.env.NODE_ENV !== "development") {
    Sentry.init({
      dsn: "https://77e775402e30484c845a8c26b660a9ad@sentry.io/1762789"
    });
  }
  class StudioServer2 {
    constructor(options) {
      this.start = async () => {
        try {
          console.log("Starting Prisma Studio ...");
          await PhotonService_1.default.init({
            projectId: ProjectService_1.default.get().id,
            schemaPath: this.options.schemaPath,
            binaryPaths: this.options.binaryPaths,
            dir: this.options.prismaClient.dir,
            generator: this.options.prismaClient.generator
          });
          await ExpressService_1.default.init({
            port: this.options.port,
            staticAssetDir: this.options.staticAssetDir,
            callback: this.onWSMessage
          });
          await TelemetryService_1.default.init({
            telemetry: this.options.telemetry,
            versions: this.options.versions,
            schemaPath: this.options.schemaPath
          });
        } catch (e) {
          console.log("An error occured while starting Studio:\n\n", e);
          process.exit(1);
        }
      };
      this.stop = async (reason) => {
        try {
          debug_1.default("Stopping Studio server. Reason:", reason);
          await ExpressService_1.default.destroy();
          await PhotonService_1.default.destroy();
        } catch (e) {
          Sentry.captureException(e);
        }
      };
      this.onWSMessage = async (ws, msg) => {
        debug_1.default(`Request from client: ${JSON.stringify(msg, null, 2)}`);
        const {requestId, channel, action, payload} = JSON.parse(msg);
        let responsePayload;
        if (channel === "ping") {
          responsePayload = await PingService_1.default.respond(action, payload);
        } else if (channel === "project") {
          responsePayload = await ProjectService_1.default.respond(action, payload);
        } else if (channel === "photon") {
          responsePayload = await PhotonService_1.default.respond(action, payload);
        } else if (channel === "telemetry") {
          responsePayload = await TelemetryService_1.default.respond(action, payload);
        }
        ExpressService_1.default.send(ws, {
          channel: `-${channel}`,
          action,
          requestId,
          payload: responsePayload
        });
      };
      this.options = options;
      ProjectService_1.default.init({
        id: getProjectId_1.default(this.options.schemaPath),
        name: "Prisma Studio",
        path: getProjectPath_1.default(this.options.schemaPath)
      });
    }
  }
  exports2.default = StudioServer2;
});

// ../../node_modules/.pnpm/@prisma/studio-server@0.304.0/node_modules/@prisma/studio-server/build/index.js
var require_build2 = __commonJS((exports2) => {
  "use strict";
  Object.defineProperty(exports2, "__esModule", {value: true});
  const StudioServer_1 = require_StudioServer();
  exports2.default = StudioServer_1.default;
});

// ../../node_modules/.pnpm/get-port@5.1.1/node_modules/get-port/index.js
var require_get_port = __commonJS((exports2, module3) => {
  "use strict";
  const net = require("net");
  class Locked extends Error {
    constructor(port) {
      super(`${port} is locked`);
    }
  }
  const lockedPorts = {
    old: new Set(),
    young: new Set()
  };
  const releaseOldLockedPortsIntervalMs = 1e3 * 15;
  let interval;
  const getAvailablePort = (options) => new Promise((resolve, reject) => {
    const server = net.createServer();
    server.unref();
    server.on("error", reject);
    server.listen(options, () => {
      const {port} = server.address();
      server.close(() => {
        resolve(port);
      });
    });
  });
  const portCheckSequence = function* (ports) {
    if (ports) {
      yield* ports;
    }
    yield 0;
  };
  module3.exports = async (options) => {
    let ports;
    if (options) {
      ports = typeof options.port === "number" ? [options.port] : options.port;
    }
    if (interval === void 0) {
      interval = setInterval(() => {
        lockedPorts.old = lockedPorts.young;
        lockedPorts.young = new Set();
      }, releaseOldLockedPortsIntervalMs);
      if (interval.unref) {
        interval.unref();
      }
    }
    for (const port of portCheckSequence(ports)) {
      try {
        let availablePort = await getAvailablePort({...options, port});
        while (lockedPorts.old.has(availablePort) || lockedPorts.young.has(availablePort)) {
          if (port !== 0) {
            throw new Locked(port);
          }
          availablePort = await getAvailablePort({...options, port});
        }
        lockedPorts.young.add(availablePort);
        return availablePort;
      } catch (error) {
        if (!["EADDRINUSE", "EACCES"].includes(error.code) && !(error instanceof Locked)) {
          throw error;
        }
      }
    }
    throw new Error("No available ports found");
  };
  module3.exports.makeRange = (from, to) => {
    if (!Number.isInteger(from) || !Number.isInteger(to)) {
      throw new TypeError("`from` and `to` must be integer numbers");
    }
    if (from < 1024 || from > 65535) {
      throw new RangeError("`from` must be between 1024 and 65535");
    }
    if (to < 1024 || to > 65536) {
      throw new RangeError("`to` must be between 1024 and 65536");
    }
    if (to < from) {
      throw new RangeError("`to` must be greater than or equal to `from`");
    }
    const generator = function* (from2, to2) {
      for (let port = from2; port <= to2; port++) {
        yield port;
      }
    };
    return generator(from, to);
  };
});

// ../../node_modules/.pnpm/open@7.2.1/node_modules/open/index.js
var require_open2 = __commonJS((exports2, module3) => {
  "use strict";
  const {promisify: promisify3} = require("util");
  const path19 = require("path");
  const childProcess = require("child_process");
  const fs17 = require("fs");
  const isWsl = require_is_wsl();
  const isDocker = require_is_docker();
  const pAccess = promisify3(fs17.access);
  const pExecFile = promisify3(childProcess.execFile);
  const localXdgOpenPath = path19.join(__dirname, "xdg-open");
  const wslToWindowsPath = async (path20) => {
    const {stdout} = await pExecFile("wslpath", ["-w", path20]);
    return stdout.trim();
  };
  module3.exports = async (target, options) => {
    if (typeof target !== "string") {
      throw new TypeError("Expected a `target`");
    }
    options = {
      wait: false,
      background: false,
      allowNonzeroExitCode: false,
      ...options
    };
    let command;
    let {app} = options;
    let appArguments = [];
    const cliArguments = [];
    const childProcessOptions = {};
    if (Array.isArray(app)) {
      appArguments = app.slice(1);
      app = app[0];
    }
    if (process.platform === "darwin") {
      command = "open";
      if (options.wait) {
        cliArguments.push("--wait-apps");
      }
      if (options.background) {
        cliArguments.push("--background");
      }
      if (app) {
        cliArguments.push("-a", app);
      }
    } else if (process.platform === "win32" || isWsl && !isDocker()) {
      command = "powershell" + (isWsl ? ".exe" : "");
      cliArguments.push("-NoProfile", "-NonInteractive", "–ExecutionPolicy", "Bypass", "-EncodedCommand");
      if (!isWsl) {
        childProcessOptions.windowsVerbatimArguments = true;
      }
      const encodedArguments = ["Start"];
      if (options.wait) {
        encodedArguments.push("-Wait");
      }
      if (app) {
        if (isWsl && app.startsWith("/mnt/")) {
          const windowsPath = await wslToWindowsPath(app);
          app = windowsPath;
        }
        encodedArguments.push(`"\`"${app}\`""`, "-ArgumentList");
        appArguments.unshift(target);
      } else {
        encodedArguments.push(`"\`"${target}\`""`);
      }
      if (appArguments.length > 0) {
        appArguments = appArguments.map((arg11) => `"\`"${arg11}\`""`);
        encodedArguments.push(appArguments.join(","));
      }
      target = Buffer.from(encodedArguments.join(" "), "utf16le").toString("base64");
    } else {
      if (app) {
        command = app;
      } else {
        const isBundled = !__dirname || __dirname === "/";
        let exeLocalXdgOpen = false;
        try {
          await pAccess(localXdgOpenPath, fs17.constants.X_OK);
          exeLocalXdgOpen = true;
        } catch (_2) {
        }
        const useSystemXdgOpen = process.versions.electron || process.platform === "android" || isBundled || !exeLocalXdgOpen;
        command = useSystemXdgOpen ? "xdg-open" : localXdgOpenPath;
      }
      if (appArguments.length > 0) {
        cliArguments.push(...appArguments);
      }
      if (!options.wait) {
        childProcessOptions.stdio = "ignore";
        childProcessOptions.detached = true;
      }
    }
    cliArguments.push(target);
    if (process.platform === "darwin" && appArguments.length > 0) {
      cliArguments.push("--args", ...appArguments);
    }
    const subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);
    if (options.wait) {
      return new Promise((resolve, reject) => {
        subprocess.once("error", reject);
        subprocess.once("close", (exitCode) => {
          if (options.allowNonzeroExitCode && exitCode > 0) {
            reject(new Error(`Exited with code ${exitCode}`));
            return;
          }
          resolve(subprocess);
        });
      });
    }
    subprocess.unref();
    return subprocess;
  };
});

// src/bin.ts
const sdk17 = __toModule(require_dist11());
const chalk25 = __toModule(require_source());
const debug = __toModule(require_src2());
const checkpoint2 = __toModule(require_dist10());
const sdk18 = __toModule(require_dist11());
const migrate = __toModule(require_dist13());

// src/CLI.ts
const chalk3 = __toModule(require_source());
const sdk2 = __toModule(require_dist11());

// src/Version.ts
const get_platform = __toModule(require_dist());
const sdk = __toModule(require_dist11());
const fs3 = __toModule(require("fs"));
const path = __toModule(require("path"));
const chalk = __toModule(require_source());

// src/utils/getClientVersion.ts
const fs = __toModule(require("fs"));
const module2 = __toModule(require("module"));
const pkg_up = __toModule(require_pkg_up());
const util = __toModule(require("util"));
const readFileAsync = util.promisify(fs.default.readFile);
async function getInstalledPrismaClientVersion(cwd = process.cwd()) {
  var _a;
  return (_a = await getPrismaClientVersionFromNodeModules(cwd)) != null ? _a : await getPrismaClientVersionFromLocalPackageJson(cwd);
}
async function getPrismaClientVersionFromNodeModules(cwd = process.cwd()) {
  try {
    const pkgJsonPath = requireResolveFrom("@prisma/client/package.json", cwd);
    if (!pkgJsonPath) {
      return null;
    }
    const pkgJsonString = await readFileAsync(pkgJsonPath, "utf-8");
    const pkgJson = JSON.parse(pkgJsonString);
    if (!pkgJson.version) {
      return null;
    }
    return pkgJson.version;
  } catch (e) {
    return null;
  }
}
async function getPrismaClientVersionFromLocalPackageJson(cwd = process.cwd()) {
  var _a, _b, _c;
  try {
    const pkgJsonPath = await pkg_up.default({cwd});
    if (!pkgJsonPath) {
      return null;
    }
    const pkgJsonString = await readFileAsync(pkgJsonPath, "utf-8");
    const pkgJson = JSON.parse(pkgJsonString);
    const clientVersion = (_c = (_a = pkgJson.dependencies) == null ? void 0 : _a["@prisma/client"]) != null ? _c : (_b = pkgJson.devDependencies) == null ? void 0 : _b["@prisma/client"];
    if (!clientVersion) {
      return null;
    }
    return clientVersion;
  } catch (e) {
    return null;
  }
}
function requireResolveFrom(moduleId, fromDir) {
  try {
    const resolvedPath = require.resolve(moduleId, {
      paths: module2.default._nodeModulePaths(fromDir)
    });
    return resolvedPath;
  } catch (e) {
    return null;
  }
}

// src/Version.ts
const packageJson = require_package2();
class Version {
  static new() {
    return new Version();
  }
  async parse(argv) {
    const args2 = sdk.arg(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--version": Boolean,
      "-v": "--version",
      "--json": Boolean,
      "--telemetry-information": String
    });
    if (sdk.isError(args2)) {
      return this.help(args2.message);
    }
    if (args2["--help"]) {
      return this.help();
    }
    const platform = await get_platform.getPlatform();
    const introspectionEngine = await this.resolveEngine("introspection-engine", "PRISMA_INTROSPECTION_ENGINE_BINARY", platform);
    const migrationEngine = await this.resolveEngine("migration-engine", "PRISMA_MIGRATION_ENGINE_BINARY", platform);
    const queryEngine = await this.resolveEngine("query-engine", "PRISMA_QUERY_ENGINE_BINARY", platform);
    const fmtBinary = await this.resolveEngine("prisma-fmt", "PRISMA_FMT_BINARY", platform);
    const prismaClientVersion = await getInstalledPrismaClientVersion();
    const rows = [
      [packageJson.name, packageJson.version],
      ["@prisma/client", prismaClientVersion != null ? prismaClientVersion : "Not found"],
      ["Current platform", platform],
      ["Query Engine", this.printBinaryInfo(queryEngine)],
      ["Migration Engine", this.printBinaryInfo(migrationEngine)],
      ["Introspection Engine", this.printBinaryInfo(introspectionEngine)],
      ["Format Binary", this.printBinaryInfo(fmtBinary)],
      ["Studio", packageJson.devDependencies["@prisma/studio-server"]]
    ];
    const schemaPath = await sdk.getSchemaPath();
    const featureFlags = await this.getFeatureFlags(schemaPath);
    if (featureFlags && featureFlags.length > 0) {
      rows.push(["Preview Features", featureFlags.join(", ")]);
    }
    return this.printTable(rows, args2["--json"]);
  }
  async getFeatureFlags(schemaPath) {
    if (!schemaPath) {
      return [];
    }
    try {
      const datamodel = await sdk.getSchema();
      const config = await sdk.getConfig({
        datamodel
      });
      const generator = config.generators.find((g) => g.previewFeatures.length > 0);
      if (generator) {
        return generator.previewFeatures;
      }
    } catch (e) {
    }
    return [];
  }
  printBinaryInfo({
    path: absolutePath,
    version,
    fromEnvVar
  }) {
    const resolved = fromEnvVar ? `, resolved by ${fromEnvVar}` : "";
    return `${version} (at ${path.default.relative(process.cwd(), absolutePath)}${resolved})`;
  }
  async resolveEngine(binaryName, envVar, platform) {
    const pathFromEnv = process.env[envVar];
    if (pathFromEnv && fs3.default.existsSync(pathFromEnv)) {
      const version2 = await sdk.getVersion(pathFromEnv);
      return {version: version2, path: pathFromEnv, fromEnvVar: envVar};
    }
    const binaryPath = await sdk.resolveBinary(binaryName);
    const version = await sdk.getVersion(binaryPath);
    return {path: binaryPath, version};
  }
  printTable(rows, json = false) {
    if (json) {
      const result = rows.reduce((acc, [name, value]) => {
        acc[slugify(name)] = value;
        return acc;
      }, {});
      return JSON.stringify(result, null, 2);
    }
    const maxPad = rows.reduce((acc, curr) => Math.max(acc, curr[0].length), 0);
    return rows.map(([left, right]) => `${left.padEnd(maxPad)} : ${right}`).join("\n");
  }
  help(error) {
    if (error) {
      return new sdk.HelpError(`
${chalk.default.bold.red(`!`)} ${error}
${Version.help}`);
    }
    return Version.help;
  }
}
Version.help = sdk.format(`
  Print current version of Prisma components

  ${chalk.default.bold("Usage")}

    ${chalk.default.dim("$")} prisma -v [options]
    ${chalk.default.dim("$")} prisma version [options]

  ${chalk.default.bold("Options")}

    -h, --help     Displays this help message
        --json     Output JSON
`);
function slugify(str) {
  return str.toString().toLowerCase().replace(/\s+/g, "-");
}

// src/CLI.ts
const sdk3 = __toModule(require_dist11());
const engines = __toModule(require("@prisma/engines"));
class CLI {
  constructor(cmds, ensureBinaries) {
    this.cmds = cmds;
    this.ensureBinaries = ensureBinaries;
  }
  static new(cmds, ensureBinaries) {
    return new CLI(cmds, ensureBinaries);
  }
  async parse(argv) {
    const args2 = sdk2.arg(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--version": Boolean,
      "-v": "--version",
      "--json": Boolean,
      "--experimental": Boolean,
      "--telemetry-information": String
    });
    if (sdk2.isError(args2)) {
      return this.help(args2.message);
    }
    if (args2["--version"]) {
      await engines.ensureBinariesExist();
      return Version.new().parse(argv);
    }
    if (args2._.length === 0 || args2["--help"]) {
      if (args2["--experimental"]) {
        return CLI.experimentalHelp;
      }
      return CLI.help;
    }
    const cmdName = args2._[0];
    if (cmdName === "lift") {
      throw new Error(`${chalk3.default.red("prisma lift")} has been renamed to ${chalk3.default.green("prisma migrate")}`);
    }
    const cmd = this.cmds[cmdName];
    if (cmd) {
      if (this.ensureBinaries.includes(cmdName)) {
        await engines.ensureBinariesExist();
      }
      let argsForCmd;
      if (args2["--experimental"]) {
        argsForCmd = [
          ...args2._.slice(1),
          `--experimental=${args2["--experimental"]}`
        ];
      } else if (args2["--preview-feature"]) {
        argsForCmd = argsForCmd = [
          ...args2._.slice(1),
          `--preview-feature=${args2["--preview-feature"]}`
        ];
      } else {
        argsForCmd = args2._.slice(1);
      }
      return cmd.parse(argsForCmd);
    }
    return sdk2.unknownCommand(CLI.help, args2._[0]);
  }
  help(error) {
    if (error) {
      return new sdk2.HelpError(`
${chalk3.default.bold.red(`!`)} ${error}
${CLI.help}`);
    }
    return CLI.help;
  }
}
CLI.help = sdk2.format(`
    ${process.platform === "win32" ? "" : chalk3.default.bold.green("◭  ")}Prisma is a modern DB toolkit to query, migrate and model your database (${sdk3.link("https://prisma.io")})

    ${chalk3.default.bold("Usage")}

      ${chalk3.default.dim("$")} prisma [command]

    ${chalk3.default.bold("Commands")}

                init   Setup Prisma for your app
          introspect   Get the datamodel of your database
            generate   Generate artifacts (e.g. Prisma Client)
              studio   Open Prisma Studio
              format   Format your schema
                  db   Manage your database schema and lifecycle ${chalk3.default.dim("(preview)")}

    ${chalk3.default.bold("Flags")}

      --experimental   Show and run experimental Prisma commands
   --preview-feature   Run preview Prisma commands

    ${chalk3.default.bold("Examples")}

      Setup a new Prisma project
      ${chalk3.default.dim("$")} prisma init

      Introspect an existing database
      ${chalk3.default.dim("$")} prisma introspect

      Generate artifacts (e.g. Prisma Client)
      ${chalk3.default.dim("$")} prisma generate

      Browse your data
      ${chalk3.default.dim("$")} prisma studio

      Push the Prisma schema state to the database
      ${chalk3.default.dim("$")} prisma db push --preview-feature
  `);
CLI.experimentalHelp = sdk2.format(`
    ${process.platform === "win32" ? "" : chalk3.default.bold.green("◭  ")}Prisma is a modern DB toolkit to query, migrate and model your database (${sdk3.link("https://prisma.io")})

    ${chalk3.default.bold("Usage")}

      ${chalk3.default.dim("$")} prisma [command]

    ${chalk3.default.bold("Commands")}

                init   Setup Prisma for your app
          introspect   Get the datamodel of your database
            generate   Generate artifacts (e.g. Prisma Client)
              studio   Open Prisma Studio
              format   Format your schema
                  db   Manage your database schema and lifecycle ${chalk3.default.dim("(preview)")}
             migrate   Migrate your schema ${chalk3.default.dim("(experimental)")}

    ${chalk3.default.bold("Flags")}

      --experimental   Show and run experimental Prisma commands
   --preview-feature   Run preview Prisma commands

    ${chalk3.default.bold("Examples")}

      Setup a new Prisma project
      ${chalk3.default.dim("$")} prisma init

      Introspect an existing database
      ${chalk3.default.dim("$")} prisma introspect

      Generate artifacts (e.g. Prisma Client)
      ${chalk3.default.dim("$")} prisma generate
      
      Browse your data
      ${chalk3.default.dim("$")} prisma studio

      Push the Prisma schema state to the database
      ${chalk3.default.dim("$")} prisma db push --preview-feature

      Create a migration for your database
      ${chalk3.default.dim("$")} prisma migrate save --experimental
  `);

// src/Init.ts
const sdk4 = __toModule(require_dist11());
const util2 = __toModule(require("util"));
const fs5 = __toModule(require("fs"));
const path3 = __toModule(require("path"));
const chalk7 = __toModule(require_source());

// src/prompt/utils/print.ts
const chalk5 = __toModule(require_source());
function printError(text) {
  return chalk5.default.bold.bgRed(" ERROR ") + " " + chalk5.default.red(text);
}

// src/Init.ts
const sdk5 = __toModule(require_dist11());
const defaultSchema = (provider = "postgresql") => `// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "${provider}"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
`;
const defaultEnv = (url = "postgresql://johndoe:randompassword@localhost:5432/mydb?schema=public") => `# Environment variables declared in this file are automatically made available to Prisma.
# See the documentation for more detail: https://pris.ly/d/prisma-schema#using-environment-variables

# Prisma supports the native connection string format for PostgreSQL, MySQL and SQLite.
# See the documentation for all the connection string options: https://pris.ly/d/connection-strings

DATABASE_URL="${url}"`;
class Init {
  static new() {
    return new Init();
  }
  async parse(argv) {
    const args2 = sdk4.arg(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--url": String
    });
    if (util2.isError(args2) || args2["--help"]) {
      return this.help();
    }
    const outputDirName = args2._[0];
    if (outputDirName) {
      throw Error("The init command does not take any argument.");
    }
    const outputDir = process.cwd();
    const prismaFolder = path3.default.join(outputDir, "prisma");
    if (fs5.default.existsSync(path3.default.join(outputDir, "schema.prisma"))) {
      console.log(printError(`File ${chalk7.default.bold("schema.prisma")} already exists in your project.
        Please try again in a project that is not yet using Prisma.
      `));
      process.exit(1);
    }
    if (fs5.default.existsSync(prismaFolder)) {
      console.log(printError(`A folder called ${chalk7.default.bold("prisma")} already exists in your project.
        Please try again in a project that is not yet using Prisma.
      `));
      process.exit(1);
    }
    if (fs5.default.existsSync(path3.default.join(prismaFolder, "schema.prisma"))) {
      console.log(printError(`File ${chalk7.default.bold("prisma/schema.prisma")} already exists in your project.
        Please try again in a project that is not yet using Prisma.
      `));
      process.exit(1);
    }
    let provider;
    let url;
    if (args2["--url"]) {
      const canConnect = await sdk5.canConnectToDatabase(args2["--url"]);
      if (canConnect !== true) {
        const {code, message} = canConnect;
        if (code !== "P1003") {
          if (code) {
            throw new Error(`${code}: ${message}`);
          } else {
            throw new Error(message);
          }
        }
      }
      const credentials = sdk4.uriToCredentials(args2["--url"]);
      provider = credentials.type;
      url = args2["--url"];
    }
    if (!fs5.default.existsSync(outputDir)) {
      fs5.default.mkdirSync(outputDir);
    }
    if (!fs5.default.existsSync(prismaFolder)) {
      fs5.default.mkdirSync(prismaFolder);
    }
    fs5.default.writeFileSync(path3.default.join(prismaFolder, "schema.prisma"), defaultSchema(provider));
    fs5.default.writeFileSync(path3.default.join(prismaFolder, ".env"), defaultEnv(url));
    const steps = [
      `Run ${chalk7.default.green(sdk4.getCommandWithExecutor("prisma introspect"))} to turn your database schema into a Prisma data model.`,
      `Run ${chalk7.default.green(sdk4.getCommandWithExecutor("prisma generate"))} to install Prisma Client. You can then start querying your database.`
    ];
    if (!url) {
      steps.unshift(`Set the ${chalk7.default.green("provider")} of the ${chalk7.default.green("datasource")} block in ${chalk7.default.green("schema.prisma")} to match your database: ${chalk7.default.green("postgresql")}, ${chalk7.default.green("mysql")} or ${chalk7.default.green("sqlite")}.`);
      steps.unshift(`Set the ${chalk7.default.green("DATABASE_URL")} in the ${chalk7.default.green(".env")} file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started.`);
    }
    return `
✔ Your Prisma schema was created at ${chalk7.default.green("prisma/schema.prisma")}.
  You can now open it in your favorite editor.

Next steps:
${steps.map((s, i) => `${i + 1}. ${s}`).join("\n")}

More information in our documentation:
${sdk5.link("https://pris.ly/d/getting-started")}
    `;
  }
  help(error) {
    if (error) {
      return new sdk4.HelpError(`
${chalk7.default.bold.red(`!`)} ${error}
${Init.help}`);
    }
    return Init.help;
  }
}
Init.help = sdk4.format(`
    Setup a new Prisma project
    
    ${chalk7.default.bold("Usage")}

      ${chalk7.default.dim("$")} prisma init
  `);

// src/Introspect.ts
const sdk7 = __toModule(require_dist11());
const chalk9 = __toModule(require_source());
const path5 = __toModule(require("path"));
const sdk8 = __toModule(require_dist11());

// src/utils/formatms.ts
function formatms(ms) {
  if (ms < 1e3) {
    return `${ms}ms`;
  }
  return (ms / 1e3).toFixed(2) + "s";
}

// src/Introspect.ts
const fs7 = __toModule(require("fs"));
const convertCredentials = __toModule(require_convertCredentials());

// src/prompt/utils/printDatasources.ts
const indent_string = __toModule(require_indent_string());
function printDatasources(internalDatasources) {
  return internalDatasources.map((d) => String(new InternalDataSourceClass(d))).join("\n\n");
}
const tab = 2;
class InternalDataSourceClass {
  constructor(dataSource) {
    this.dataSource = dataSource;
  }
  toString() {
    const {dataSource} = this;
    const obj = {
      provider: dataSource.provider,
      url: dataSource.url
    };
    if (dataSource.config && typeof dataSource.config === "object") {
      Object.assign(obj, dataSource.config);
    }
    return `datasource ${dataSource.name} {
${indent_string.default(printDatamodelObject(obj), tab)}
}`;
  }
}
function printDatamodelObject(obj) {
  const maxLength = Object.keys(obj).reduce((max, curr) => Math.max(max, curr.length), 0);
  return Object.entries(obj).map(([key, value]) => `${key.padEnd(maxLength)} = ${typeof value === "object" && value && value.value ? JSON.stringify(value.value) : JSON.stringify(value)}`).join("\n");
}

// src/utils/removeDatasource.ts
const sdk6 = __toModule(require_dist11());
function removeDatasource(schema) {
  return sdk6.trimBlocksFromSchema(schema, ["datasource"]).trim();
}

// src/Introspect.ts
class Introspect {
  static new() {
    return new Introspect();
  }
  printUrlAsDatasource(url) {
    const provider = convertCredentials.databaseTypeToConnectorType(sdk8.uriToCredentials(url).type);
    return printDatasources([
      {
        config: {},
        provider: [provider],
        name: "db",
        url
      }
    ]);
  }
  async parse(argv) {
    const args2 = sdk7.arg(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--url": String,
      "--print": Boolean,
      "--schema": String,
      "--force": Boolean,
      "--experimental-reintrospection": Boolean,
      "--clean": Boolean
    });
    const log = (...messages) => {
      if (!args2["--print"]) {
        console.log(...messages);
      }
    };
    if (args2 instanceof Error) {
      return this.help(args2.message);
    }
    if (args2["--help"]) {
      return this.help();
    }
    if (args2["--clean"] || args2["--experimental-reintrospection"]) {
      const renamedMessages = [];
      if (args2["--experimental-reintrospection"]) {
        renamedMessages.push(`The ${chalk9.default.redBright("--experimental-reintrospection")} flag has been removed and is now the default behavior of ${chalk9.default.greenBright("prisma introspect")}.`);
      }
      if (args2["--clean"]) {
        renamedMessages.push(`The ${chalk9.default.redBright("--clean")} flag has been renamed to ${chalk9.default.greenBright("--force")}.`);
      }
      console.error(`
${renamedMessages.join("\n")}
`);
      process.exit(1);
    }
    const url = args2["--url"];
    let schemaPath = await sdk7.getSchemaPath(args2["--schema"]);
    if (schemaPath) {
      console.log(chalk9.default.dim(`Prisma schema loaded from ${path5.default.relative(process.cwd(), schemaPath)}`));
    }
    if (!url && !schemaPath) {
      throw new Error(`Could not find a ${chalk9.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk9.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk9.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
    }
    let schema = null;
    if (url && schemaPath) {
      schema = this.printUrlAsDatasource(url);
      const rawSchema = fs7.default.readFileSync(schemaPath, "utf-8");
      schema += removeDatasource(rawSchema);
    } else if (url) {
      schema = this.printUrlAsDatasource(url);
    } else if (schemaPath) {
      schema = fs7.default.readFileSync(schemaPath, "utf-8");
    } else {
      throw new Error("Could not find a `schema.prisma` file");
    }
    const engine = new sdk8.IntrospectionEngine({
      cwd: schemaPath ? path5.default.dirname(schemaPath) : void 0
    });
    const basedOn = !args2["--url"] && schemaPath ? ` based on datasource defined in ${chalk9.default.underline(path5.default.relative(process.cwd(), schemaPath))}` : "";
    log(`
Introspecting${basedOn} …`);
    const before = Date.now();
    let introspectionSchema = "";
    let introspectionWarnings;
    let introspectionSchemaVersion;
    try {
      const introspectionResult = await engine.introspect(schema, args2["--force"]);
      introspectionSchema = introspectionResult.datamodel;
      introspectionWarnings = introspectionResult.warnings;
      introspectionSchemaVersion = introspectionResult.version;
    } catch (e) {
      if (e.code === "P4001") {
        if (introspectionSchema.trim() === "") {
          throw new Error(`
${chalk9.default.red.bold("P4001 ")}${chalk9.default.red("The introspected database was empty:")} ${url ? chalk9.default.underline(url) : ""}

${chalk9.default.bold("prisma introspect")} could not create any models in your ${chalk9.default.bold("schema.prisma")} file and you will not be able to generate Prisma Client with the ${chalk9.default.bold(sdk7.getCommandWithExecutor("prisma generate"))} command.

${chalk9.default.bold("To fix this, you have two options:")}

- manually create a table in your database (using SQL).
- make sure the database connection URL inside the ${chalk9.default.bold("datasource")} block in ${chalk9.default.bold("schema.prisma")} points to a database that is not empty (it must contain at least one table).

Then you can run ${chalk9.default.green(sdk7.getCommandWithExecutor("prisma introspect"))} again. 
`);
        }
      } else if (e.code === "P1012") {
        console.log();
        throw new Error(`${chalk9.default.red(`${e.code} Introspection failed as your current Prisma schema file is invalid`)}

Please fix your current schema manually, use ${chalk9.default.green(sdk7.getCommandWithExecutor("prisma validate"))} to confirm it is valid and then run this command again.
Or run this command with the ${chalk9.default.green("--force")} flag to ignore your current schema and overwrite it. All local modifications will be lost.
`);
      }
      throw e;
    }
    function getWarningMessage(warnings) {
      if (warnings.length > 0) {
        let message = `
*** WARNING ***
`;
        for (const warning of warnings) {
          message += `
${warning.message}
`;
          if (warning.code === 0) {
          } else if (warning.code === 1) {
            message += warning.affected.map((it) => `- "${it.model}"`).join("\n");
          } else if (warning.code === 2) {
            const modelsGrouped = warning.affected.reduce((acc, it) => {
              if (!acc[it.model]) {
                acc[it.model] = [];
              }
              acc[it.model].push(it.field);
              return acc;
            }, {});
            message += Object.entries(modelsGrouped).map(([model, fields]) => `- Model: "${model}"
  Field(s): "${fields.join('", "')}"`).join("\n");
          } else if (warning.code === 3) {
            message += warning.affected.map((it) => `- Model "${it.model}", field: "${it.field}", original data type: "${it.tpe}"`).join("\n");
          } else if (warning.code === 4) {
            message += warning.affected.map((it) => `- Enum "${it.enm}", value: "${it.value}"`).join("\n");
          } else if (warning.code === 5 || warning.code === 6 || warning.code === 8 || warning.code === 11 || warning.code === 12 || warning.code === 13) {
            message += warning.affected.map((it) => `- Model "${it.model}", field: "${it.field}"`).join("\n");
          } else if (warning.code === 7) {
            message += warning.affected.map((it) => `- Model "${it.model}"`).join("\n");
          } else if (warning.code === 9 || warning.code === 10) {
            message += warning.affected.map((it) => `- Enum "${it.enm}"`).join("\n");
          } else if (warning.affected) {
            message += `Code ${warning.code}
${JSON.stringify(warning.affected, null, 2)}`;
          }
          message += `
`;
        }
        return message;
      }
    }
    const introspectionWarningsMessage = getWarningMessage(introspectionWarnings) || "";
    const prisma1UpgradeMessage = introspectionSchemaVersion.includes("Prisma1") ? `
${chalk9.default.bold("Upgrading from Prisma 1 to Prisma 2")}
      
The database you introspected seems to belong to a Prisma 1 project.

Please run the following command to upgrade to Prisma 2.0:
${chalk9.default.green("npx prisma-upgrade [path-to-prisma-yml] [path-to-schema-prisma]")}

Note: \`prisma.yml\` and \`schema.prisma\` paths are optional.
 
Learn more about the upgrade process in the docs:
${sdk7.link("https://pris.ly/d/upgrading-to-prisma2")}` : "";
    const prisma1UpgradeMessageBox = prisma1UpgradeMessage ? "\n\n" + sdk7.drawBox({
      height: 13,
      width: 74,
      str: prisma1UpgradeMessage,
      horizontalPadding: 2
    }) : "";
    if (args2["--print"]) {
      console.log(introspectionSchema);
      introspectionSchemaVersion && console.log(`
// introspectionSchemaVersion: ${introspectionSchemaVersion}`, prisma1UpgradeMessage.replace(/(\n)/gm, "\n// "));
      if (introspectionWarningsMessage.trim().length > 0) {
        console.error(introspectionWarningsMessage);
      }
    } else {
      schemaPath = schemaPath || "schema.prisma";
      fs7.default.writeFileSync(schemaPath, introspectionSchema);
      const modelsCount = (introspectionSchema.match(/^model\s+/gm) || []).length;
      log(`
✔ Introspected ${modelsCount} ${modelsCount > 1 ? "models and wrote them" : "model and wrote it"} into ${chalk9.default.underline(path5.default.relative(process.cwd(), schemaPath))} in ${chalk9.default.bold(formatms(Date.now() - before))}${prisma1UpgradeMessageBox}
      ${chalk9.default.keyword("orange")(introspectionWarningsMessage)}
${prisma1UpgradeMessage ? `Once you upgraded your database schema to Prisma 2.0, run ${chalk9.default.green(sdk7.getCommandWithExecutor("prisma generate"))} to generate Prisma Client.` : `Run ${chalk9.default.green(sdk7.getCommandWithExecutor("prisma generate"))} to generate Prisma Client.`}`);
    }
    engine.stop();
    return "";
  }
  help(error) {
    if (error) {
      return new sdk7.HelpError(`
${chalk9.default.bold.red(`!`)} ${error}
${Introspect.help}`);
    }
    return Introspect.help;
  }
}
Introspect.help = sdk7.format(`
    Introspect a database and save the result to a Prisma schema.

    ${chalk9.default.bold("Usage")}

    With an existing Prisma schema
      ${chalk9.default.dim("$")} prisma introspect

    Or specify a Prisma schema path
      ${chalk9.default.dim("$")} prisma introspect --schema=./schema.prisma'

    Instead of saving the result to the filesystem, you can also print it
      ${chalk9.default.dim("$")} prisma introspect --print'

    ${chalk9.default.bold("Flag")}

      --force     Ignore current Prisma schema file
  `);

// src/Dev.ts
const sdk9 = __toModule(require_dist11());
const chalk11 = __toModule(require_source());
class Dev {
  static new() {
    return new Dev();
  }
  async parse(argv) {
    return sdk9.format(`
      ${chalk11.default.redBright("Prisma CLI does not include a `dev` command any more right now.")}

      If you want to run Prisma Studio, use ${chalk11.default.green("prisma studio")}.
      If you want to generate the Prisma Client, use ${chalk11.default.green("prisma generate")} (or ${chalk11.default.green("prisma generate --watch")})
      If you want to update your schema, use ${chalk11.default.green("prisma introspect")}.
      If you want to migrate your database, use ${chalk11.default.green("prisma migrate")}.
    `);
  }
}

// src/Generate.ts
const engines2 = __toModule(require("@prisma/engines"));
const sdk10 = __toModule(require_dist11());
const chalk13 = __toModule(require_source());
const fs9 = __toModule(require("fs"));
const log_update = __toModule(require_log_update());
const path7 = __toModule(require("path"));

// src/utils/simpleDebounce.ts
function simpleDebounce(fn) {
  let executing = false;
  let pendingExecution = null;
  return async (...args2) => {
    if (executing) {
      pendingExecution = args2;
      return null;
    }
    executing = true;
    await fn(...args2).catch((e) => console.error(e));
    if (pendingExecution) {
      await fn(...args2).catch((e) => console.error(e));
      pendingExecution = null;
    }
    executing = false;
  };
}

// src/Generate.ts
const pkg = eval(`require('../package.json')`);
class Generate {
  constructor() {
    this.logText = "";
    this.hasGeneratorErrored = false;
    this.runGenerate = simpleDebounce(async ({generators}) => {
      var _a;
      const message = [];
      for (const generator of generators) {
        const toStr = generator.options.generator.output ? chalk13.default.dim(` to .${path7.default.sep}${path7.default.relative(process.cwd(), generator.options.generator.output)}`) : "";
        const name = generator.manifest ? generator.manifest.prettyName : generator.options.generator.provider;
        const before = Date.now();
        try {
          await generator.generate();
          const after = Date.now();
          const version = (_a = generator.manifest) == null ? void 0 : _a.version;
          message.push(`✔ Generated ${chalk13.default.bold(name)}${version ? ` (version: ${version})` : ""}${toStr} in ${formatms(after - before)}
`);
          generator.stop();
        } catch (err) {
          this.hasGeneratorErrored = true;
          message.push(`${err.message}

`);
          generator.stop();
        }
      }
      this.logText += message.join("\n");
    });
  }
  static new() {
    return new Generate();
  }
  async parse(argv) {
    var _a, _b, _c;
    const args2 = sdk10.arg(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--watch": Boolean,
      "--schema": String,
      "--postinstall": String,
      "--telemetry-information": String
    });
    const isPostinstall = process.env.PRISMA_GENERATE_IN_POSTINSTALL;
    if (sdk10.isError(args2)) {
      return this.help(args2.message);
    }
    if (args2["--help"]) {
      return this.help();
    }
    const watchMode = args2["--watch"] || false;
    const schemaPath = await sdk10.getSchemaPath(args2["--schema"]);
    if (!schemaPath) {
      if (isPostinstall) {
        console.error(`${chalk13.default.yellow("warning")} The postinstall script automatically ran \`prisma generate\` and did not find your \`prisma/schema.prisma\`.
If you have a Prisma schema file in a custom path, you will need to run
\`prisma generate --schema=./path/to/your/schema.prisma\` to generate Prisma Client.
If you do not have a Prisma schema file yet, you can ignore this message.`);
        return "";
      }
      throw new Error(`Could not find a ${chalk13.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk13.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk13.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
    }
    console.log(chalk13.default.dim(`Prisma schema loaded from ${path7.default.relative(process.cwd(), schemaPath)}`));
    let isJSClient;
    let generators;
    try {
      generators = await sdk10.getGenerators({
        schemaPath,
        printDownloadProgress: !watchMode,
        version: engines2.enginesVersion,
        cliVersion: pkg.version
      });
      if (!generators || generators.length === 0) {
        this.logText += `${sdk10.missingGeneratorMessage}
`;
      } else {
        isJSClient = generators.find((g) => g.options && g.options.generator.provider === "prisma-client-js");
        try {
          await this.runGenerate({generators});
        } catch (errRunGenerate) {
          this.logText += `${errRunGenerate.message}

`;
        }
      }
    } catch (errGetGenerators) {
      if (isPostinstall) {
        console.error(`${chalk13.default.blueBright("info")} The postinstall script automatically ran \`prisma generate\`, which failed.
The postinstall script still succeeds but won't generate the Prisma Client.
Please run \`${sdk10.getCommandWithExecutor("prisma generate")}\` to see the errors.`);
        return "";
      }
      if (watchMode) {
        this.logText += `${errGetGenerators.message}

`;
      } else {
        throw errGetGenerators;
      }
    }
    const watchingText = `
${chalk13.default.green("Watching...")} ${chalk13.default.dim(schemaPath)}
`;
    if (!watchMode) {
      const prismaClientJSGenerator = generators == null ? void 0 : generators.find((g) => {
        var _a2;
        return ((_a2 = g.options) == null ? void 0 : _a2.generator.provider) === "prisma-client-js";
      });
      let hint = "";
      if (prismaClientJSGenerator) {
        const importPath = ((_b = (_a = prismaClientJSGenerator.options) == null ? void 0 : _a.generator) == null ? void 0 : _b.isCustomOutput) ? prefixRelativePathIfNecessary(path7.default.relative(process.cwd(), (_c = prismaClientJSGenerator.options) == null ? void 0 : _c.generator.output)) : "@prisma/client";
        hint = `
You can now start using Prisma Client in your code:

\`\`\`
${sdk10.highlightTS(`import { PrismaClient } from '${importPath}'
// or const { PrismaClient } = require('${importPath}')

const prisma = new PrismaClient()`)}
\`\`\`

Explore the full API: ${sdk10.link("http://pris.ly/d/client")}`;
      }
      const message = "\n" + this.logText + (isJSClient && !this.hasGeneratorErrored ? hint : "");
      if (this.hasGeneratorErrored) {
        if (isPostinstall) {
          console.error(`${chalk13.default.blueBright("info")} The postinstall script automatically ran \`prisma generate\`, which failed.
The postinstall script still succeeds but won't generate the Prisma Client.
Please run \`${sdk10.getCommandWithExecutor("prisma generate")}\` to see the errors.`);
          return "";
        }
        throw new Error(message);
      } else {
        return message;
      }
    } else {
      log_update.default(watchingText + "\n" + this.logText);
      fs9.default.watch(schemaPath, async (eventType) => {
        if (eventType === "change") {
          let generatorsWatch;
          try {
            generatorsWatch = await sdk10.getGenerators({
              schemaPath,
              printDownloadProgress: !watchMode,
              version: engines2.enginesVersion,
              cliVersion: pkg.version
            });
            if (!generatorsWatch || generatorsWatch.length === 0) {
              this.logText += `${sdk10.missingGeneratorMessage}
`;
            } else {
              log_update.default(`
${chalk13.default.green("Building...")}

${this.logText}`);
              try {
                await this.runGenerate({
                  generators: generatorsWatch
                });
                log_update.default(watchingText + "\n" + this.logText);
              } catch (errRunGenerate) {
                this.logText += `${errRunGenerate.message}

`;
                log_update.default(watchingText + "\n" + this.logText);
              }
            }
          } catch (errGetGenerators) {
            this.logText += `${errGetGenerators.message}

`;
            log_update.default(watchingText + "\n" + this.logText);
          }
        }
      });
      await new Promise((_2) => null);
    }
    return "";
  }
  help(error) {
    if (error) {
      return new sdk10.HelpError(`
${chalk13.default.bold.red(`!`)} ${error}
${Generate.help}`);
    }
    return Generate.help;
  }
}
Generate.help = sdk10.format(`
    Generate artifacts (e.g. Prisma Client)

    ${chalk13.default.bold("Usage")}

    With an existing Prisma schema
      ${chalk13.default.dim("$")} prisma generate

    Or specify a schema:
      ${chalk13.default.dim("$")} prisma generate --schema=./schema.prisma'

    ${chalk13.default.bold("Flag")}

      --watch    Watch the Prisma schema and rerun after a change
  `);
function prefixRelativePathIfNecessary(relativePath) {
  if (relativePath.startsWith("..")) {
    return relativePath;
  }
  return `./${relativePath}`;
}

// src/bin.ts
const sdk19 = __toModule(require_dist11());

// src/Validate.ts
const sdk11 = __toModule(require_dist11());
const chalk15 = __toModule(require_source());
const fs11 = __toModule(require("fs"));
const path9 = __toModule(require("path"));
class Validate {
  static new() {
    return new Validate();
  }
  async parse(argv) {
    const args2 = sdk11.arg(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--schema": String,
      "--telemetry-information": String
    });
    if (args2 instanceof Error) {
      return this.help(args2.message);
    }
    if (args2["--help"]) {
      return this.help();
    }
    const schemaPath = await sdk11.getSchemaPath(args2["--schema"]);
    if (!schemaPath) {
      throw new Error(`Could not find a ${chalk15.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk15.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk15.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
    }
    console.log(chalk15.default.dim(`Prisma schema loaded from ${path9.default.relative(process.cwd(), schemaPath)}`));
    const schema = fs11.default.readFileSync(schemaPath, "utf-8");
    await sdk11.getDMMF({
      datamodel: schema
    });
    await sdk11.getConfig({
      datamodel: schema
    });
    return `The schema at ${chalk15.default.underline(schemaPath)} is valid 🚀`;
  }
  help(error) {
    if (error) {
      return new sdk11.HelpError(`
${chalk15.default.bold.red(`!`)} ${error}
${Validate.help}`);
    }
    return Validate.help;
  }
}
Validate.help = sdk11.format(`
    Validate a Prisma schema.

    ${chalk15.default.bold("Usage")}

    With an existing Prisma schema
      ${chalk15.default.dim("$")} prisma validate

    Or specify a Prisma schema path
      ${chalk15.default.dim("$")} prisma validate --schema=./schema.prisma
  `);

// src/Format.ts
const sdk12 = __toModule(require_dist11());
const chalk17 = __toModule(require_source());
const fs13 = __toModule(require("fs"));
const os = __toModule(require("os"));
const path11 = __toModule(require("path"));
class Format {
  static new() {
    return new Format();
  }
  async parse(argv) {
    const before = Date.now();
    const args2 = sdk12.arg(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--schema": String,
      "--telemetry-information": String
    });
    if (args2 instanceof Error) {
      return this.help(args2.message);
    }
    if (args2["--help"]) {
      return this.help();
    }
    const schemaPath = await sdk12.getSchemaPath(args2["--schema"]);
    if (!schemaPath) {
      throw new Error(`Could not find a ${chalk17.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk17.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk17.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
    }
    console.log(chalk17.default.dim(`Prisma schema loaded from ${path11.default.relative(process.cwd(), schemaPath)}`));
    const schema = fs13.default.readFileSync(schemaPath, "utf-8");
    await sdk12.getDMMF({
      datamodel: schema
    });
    let output = await sdk12.formatSchema({
      schemaPath
    });
    output = output.trimEnd() + os.default.EOL;
    fs13.default.writeFileSync(schemaPath, output);
    const after = Date.now();
    return `Formatted ${chalk17.default.underline(schemaPath)} in ${formatms(after - before)} 🚀`;
  }
  help(error) {
    if (error) {
      return new sdk12.HelpError(`
${chalk17.default.bold.red(`!`)} ${error}
${Format.help}`);
    }
    return Format.help;
  }
}
Format.help = sdk12.format(`
    Format a Prisma schema.

    ${chalk17.default.bold("Usage")}

    With an existing Prisma schema
      ${chalk17.default.dim("$")} prisma format

    Or specify a Prisma schema path
      ${chalk17.default.dim("$")} prisma format --schema=./schema.prisma

  `);

// src/Doctor.ts
const sdk13 = __toModule(require_dist11());
const chalk19 = __toModule(require_source());
const fs15 = __toModule(require("fs"));
const path13 = __toModule(require("path"));
const util3 = __toModule(require("util"));
const fast_deep_equal = __toModule(require_fast_deep_equal());
const readFile = util3.promisify(fs15.default.readFile);
class Doctor {
  static new() {
    return new Doctor();
  }
  async parse(argv) {
    const args2 = sdk13.arg(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--schema": String,
      "--telemetry-information": String
    });
    if (args2 instanceof Error) {
      return this.help(args2.message);
    }
    if (args2["--help"]) {
      return this.help();
    }
    const schemaPath = await sdk13.getSchemaPath(args2["--schema"]);
    if (!schemaPath) {
      throw new Error(`Could not find a ${chalk19.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk19.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk19.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
    }
    console.log(chalk19.default.dim(`Prisma schema loaded from ${path13.default.relative(process.cwd(), schemaPath)}`));
    const schema = await readFile(schemaPath, "utf-8");
    const localDmmf = await sdk13.getDMMF({datamodel: schema});
    const config = await sdk13.getConfig({datamodel: schema});
    console.error(`👩‍⚕️🏥 Prisma Doctor checking the database...`);
    const connectionString = config.datasources[0].url;
    const canConnect = await sdk13.canConnectToDatabase(connectionString.value, path13.default.dirname(schemaPath));
    if (typeof canConnect !== "boolean") {
      throw new Error(`${canConnect.code}: ${canConnect.message}`);
    }
    const engine = new sdk13.IntrospectionEngine({
      cwd: path13.default.dirname(schemaPath)
    });
    let datamodel;
    try {
      const result = await engine.introspect(schema);
      datamodel = result.datamodel;
    } finally {
      engine.stop();
    }
    const remoteDmmf = await sdk13.getDMMF({datamodel});
    const remoteModels = sdk13.keyBy(remoteDmmf.datamodel.models, (m) => {
      var _a;
      return (_a = m.dbName) != null ? _a : m.name;
    });
    const modelPairs = localDmmf.datamodel.models.map((localModel) => {
      var _a;
      return {
        localModel,
        remoteModel: remoteModels[(_a = localModel.dbName) != null ? _a : localModel.name]
      };
    });
    const getFieldName = (f) => f.dbNames && f.dbNames.length > 0 ? f.dbNames[0] : f.name;
    const messages = [];
    for (const {localModel, remoteModel} of modelPairs) {
      let missingModel = false;
      const missingFields = [];
      const incorrectFieldType = [];
      if (!remoteModel) {
        missingModel = true;
      } else {
        const remoteFields = sdk13.keyBy(remoteModel.fields, getFieldName);
        for (const localField of localModel.fields) {
          const remoteField = remoteFields[getFieldName(localField)];
          if (!remoteField) {
            missingFields.push(localField);
          } else if (!fast_deep_equal.default(sdk13.pick(localField, ["type", "isList"]), sdk13.pick(remoteField, ["type", "isList"]))) {
            incorrectFieldType.push({localField, remoteField});
          }
        }
      }
      const msg = printModelMessage({
        model: localModel,
        missingModel,
        missingFields,
        incorrectFieldType
      });
      if (msg) {
        messages.push(msg);
      }
    }
    if (messages.length > 0) {
      throw new Error("\n\n" + messages.join("\n\n"));
    }
    return `Everything in sync 🔄`;
  }
  help(error) {
    if (error) {
      return new sdk13.HelpError(`
${chalk19.default.bold.red(`!`)} ${error}
${Doctor.help}`);
    }
    return Doctor.help;
  }
}
Doctor.help = sdk13.format(`
    Check, if the schema and the database are in sync.

    ${chalk19.default.bold("Usage")}

    With an existing schema.prisma:
      ${chalk19.default.dim("$")} prisma doctor

    Or specify a schema:
      ${chalk19.default.dim("$")} prisma doctor --schema=./schema.prisma

  `);
function printModelMessage({
  model,
  missingModel,
  missingFields,
  incorrectFieldType
}) {
  if (!missingModel && missingFields.length === 0 && incorrectFieldType.length === 0) {
    return null;
  }
  let msg = `${chalk19.default.bold.underline(model.name)}
`;
  if (missingModel) {
    msg += `↪ Model is missing in database
`;
  }
  for (const field of missingFields) {
    msg += `↪ Field ${chalk19.default.bold(field.name)} is missing in database
`;
  }
  for (const {localField, remoteField} of incorrectFieldType) {
    const printFieldType = (f) => f.type + (f.isList ? "[]" : "");
    msg += `↪ Field ${localField.name} has type ${chalk19.default.greenBright(printFieldType(localField))} locally, but ${chalk19.default.redBright(printFieldType(remoteField))} remote
`;
  }
  return msg;
}

// src/Studio.ts
const engines3 = __toModule(require("@prisma/engines"));
const get_platform2 = __toModule(require_dist());
const sdk14 = __toModule(require_dist11());
const studio_server = __toModule(require_build2());
const chalk21 = __toModule(require_source());
const get_port = __toModule(require_get_port());
const open = __toModule(require_open2());
const path15 = __toModule(require("path"));
const packageJson2 = require_package2();
class Studio {
  constructor(providerAliases) {
    this.providerAliases = providerAliases;
    this.providerAliases = providerAliases;
  }
  static new(providerAliases) {
    return new Studio(providerAliases);
  }
  async parse(argv) {
    const args = sdk14.arg(argv, {
      "--help": Boolean,
      "-h": "--help",
      "--port": Number,
      "-p": "--port",
      "--browser": String,
      "-b": "--browser",
      "--schema": String,
      "--experimental": Boolean,
      "--telemetry-information": String
    });
    if (sdk14.isError(args)) {
      return this.help(args.message);
    }
    if (args["--help"]) {
      return this.help();
    }
    if (args["--experimental"]) {
      console.warn(`${chalk21.default.yellow("warn")} --experimental is no longer required for this command as Studio is now Generally Available.`);
    }
    const schemaPath = await sdk14.getSchemaPath(args["--schema"]);
    if (!schemaPath) {
      throw new Error(`Could not find a ${chalk21.default.bold("schema.prisma")} file that is required for this command.
You can either provide it with ${chalk21.default.greenBright("--schema")}, set it as \`prisma.schema\` in your package.json or put it into the default location ${chalk21.default.greenBright("./prisma/schema.prisma")} https://pris.ly/d/prisma-schema-location`);
    }
    console.log(chalk21.default.dim(`Prisma schema loaded from ${path15.default.relative(process.cwd(), schemaPath)}`));
    const port = args["--port"] || await get_port.default({port: get_port.default.makeRange(5555, 5600)});
    const browser = args["--browser"] || process.env.BROWSER;
    const platform = await get_platform2.getPlatform();
    const extension = platform === "windows" ? ".exe" : "";
    const queryEnginePath = process.env.NODE_ENV === "production" ? eval(`require('path').join(__dirname, '../query-engine-${platform}${extension}')`) : eval(`require('path').join(__dirname, '../node_modules/@prisma/engines/query-engine-${platform}${extension}')`);
    const staticAssetDir = process.env.NODE_ENV === "production" ? path15.default.resolve(__dirname, "./public") : path15.default.resolve(__dirname, "../dist/public");
    const studio = new studio_server.default({
      schemaPath,
      port,
      prismaClient: {
        generator: {
          version: engines3.enginesVersion,
          providerAliases: this.providerAliases
        }
      },
      binaryPaths: {
        queryEngine: queryEnginePath
      },
      staticAssetDir,
      versions: {
        prisma2: packageJson2.version,
        queryEngine: engines3.enginesVersion
      }
    });
    await studio.start();
    const serverUrl = `http://localhost:${port}`;
    if (!browser || browser.toLowerCase() !== "none") {
      await open.default(serverUrl, {
        app: browser,
        url: true
      }).catch(() => {
      });
    }
    this.instance = studio;
    return `Prisma Studio is up on ${serverUrl}`;
  }
  help(error) {
    if (error) {
      return new sdk14.HelpError(`
${chalk21.default.bold.red(`!`)} ${error}
${Studio.help}`);
    }
    return Studio.help;
  }
}
Studio.help = sdk14.format(`
    Browse your data with Prisma Studio

    ${chalk21.default.bold("Usage")}

      ${chalk21.default.dim("$")} prisma studio

    ${chalk21.default.bold("Options")}

      -h, --help        Displays this help message
      -p, --port        Port to start Studio on
      -b, --browser     Browser to open Studio in

    ${chalk21.default.bold("Examples")}

      Start Studio on the default port
      ${chalk21.default.dim("$")} prisma studio

      Start Studio on a custom port
      ${chalk21.default.dim("$")} prisma studio --port 5555

      Start Studio in a specific browser
      ${chalk21.default.dim("$")} prisma studio --port 5555 --browser firefox
      ${chalk21.default.dim("$")} BROWSER=firefox prisma studio --port 5555

      Start Studio without opening in a browser
      ${chalk21.default.dim("$")} prisma studio --port 5555 --browser none
      ${chalk21.default.dim("$")} BROWSER=none prisma studio --port 5555
  `);

// src/Telemetry.ts
const checkpoint = __toModule(require_dist10());
const sdk15 = __toModule(require_dist11());
class Telemetry {
  static new() {
    return new Telemetry();
  }
  async parse(argv) {
    const info = await checkpoint.getInfo();
    const projectPathHash = await sdk15.getProjectHash();
    const cliPathHash = sdk15.getCLIPathHash();
    const cacheItems = info.cacheItems.map((it) => {
      return {
        product: it.output.product,
        version: it.version,
        package: it.output.package,
        release_tag: it.output.release_tag,
        cli_path: it.cli_path,
        cli_path_hash: it.output.cli_path_hash,
        last_reminder: it.last_reminder,
        cached_at: it.cached_at
      };
    });
    return JSON.stringify({
      signature: info.signature,
      cachePath: info.cachePath,
      current: {
        projectPathHash,
        cliPathHash
      },
      cacheItems
    }, void 0, 2);
  }
}

// src/utils/printUpdateMessage.ts
const sdk16 = __toModule(require_dist11());
const chalk23 = __toModule(require_source());
const isPrismaInstalledGlobally = sdk16.isCurrentBinInstalledGlobally();
function printUpdateMessage(checkResult) {
  console.error(sdk16.drawBox({
    height: 4,
    width: 59,
    str: `
${chalk23.default.blue("Update available")} ${checkResult.data.previous_version} -> ${checkResult.data.current_version}
Run the following to update
  ${chalk23.default.bold(makeInstallCommand(checkResult.data.package, checkResult.data.release_tag))}
  ${chalk23.default.bold(makeInstallCommand("@prisma/client", checkResult.data.release_tag, {
      canBeGlobal: false,
      canBeDev: false
    }))}`,
    horizontalPadding: 2
  }));
}
function makeInstallCommand(packageName, tag, options = {
  canBeGlobal: true,
  canBeDev: true
}) {
  var _a;
  const yarnUsed = (_a = process.env.npm_config_user_agent) == null ? void 0 : _a.includes("yarn");
  let command = "";
  if (isPrismaInstalledGlobally === "yarn" && options.canBeGlobal) {
    command = `yarn global add ${packageName}`;
  } else if (isPrismaInstalledGlobally === "npm" && options.canBeGlobal) {
    command = `npm i -g ${packageName}`;
  } else if (yarnUsed && options.canBeDev) {
    command = `yarn add --dev ${packageName}`;
  } else if (options.canBeDev) {
    command = `npm i --save-dev ${packageName}`;
  } else if (yarnUsed) {
    command = `yarn add ${packageName}`;
  } else {
    command = `npm i ${packageName}`;
  }
  if (tag && tag !== "latest") {
    command += `@${tag}`;
  }
  return command;
}

// src/bin.ts
const engines4 = __toModule(require("@prisma/engines"));
const path17 = __toModule(require("path"));
process.env.NODE_NO_WARNINGS = "1";
const packageJson3 = require_package2();
const debug2 = debug.default("prisma");
process.on("uncaughtException", (e) => {
  debug2(e);
});
process.on("unhandledRejection", (e) => {
  debug2(e);
});
if (process[Symbol.for("ts-node.register.instance")]) {
  process.env.NODE_ENV = "development";
} else {
  process.env.NODE_ENV = "production";
}
if (process.argv.length > 1 && process.argv[1].endsWith("prisma2")) {
  console.log(chalk25.default.yellow("deprecated") + `  The ${chalk25.default.redBright("prisma2")} command is deprecated and has been renamed to ${chalk25.default.greenBright("prisma")}.
Please execute ${chalk25.default.bold.greenBright("prisma" + (process.argv.length > 2 ? " " + process.argv.slice(2).join(" ") : ""))} instead.
`);
}
const args = sdk17.arg(process.argv.slice(2), {
  "--schema": String,
  "--telemetry-information": String
}, false, true);
if (process.argv.length > 2) {
  try {
    const envPaths = sdk17.getEnvPaths(args["--schema"]);
    const envData = sdk17.tryLoadEnvs(envPaths, {conflictCheck: "error"});
    envData && console.log(envData.message);
  } catch (e) {
    handleIndividualError(e);
  }
}
const aliases = {
  "prisma-client-js": {
    generatorPath: `node --max-old-space-size=8096 "${eval(`require('path').join(__dirname, '../prisma-client/generator-build/index.js')`)}"`,
    outputPath: eval(`require('path').join(__dirname, '../prisma-client/')`)
  }
};
if (process.env.NO_COLOR) {
  chalk25.default.level = 0;
}
const isPrismaInstalledGlobally2 = sdk19.isCurrentBinInstalledGlobally();
async function main() {
  const cli = CLI.new({
    init: Init.new(),
    migrate: migrate.MigrateCommand.new({
      save: migrate.MigrateSave.new(),
      up: migrate.MigrateUp.new(),
      down: migrate.MigrateDown.new()
    }),
    db: migrate.DbCommand.new({
      push: migrate.DbPush.new()
    }),
    "tmp-prepare": migrate.MigrateTmpPrepare.new(),
    introspect: Introspect.new(),
    dev: Dev.new(),
    studio: Studio.new(aliases),
    generate: Generate.new(),
    version: Version.new(),
    validate: Validate.new(),
    format: Format.new(),
    doctor: Doctor.new(),
    telemetry: Telemetry.new()
  }, [
    "version",
    "init",
    "migrate",
    "db",
    "tmp-prepare",
    "introspect",
    "dev",
    "studio",
    "generate",
    "validate",
    "format",
    "doctor",
    "telemetry"
  ]);
  const result = await cli.parse(process.argv.slice(2));
  if (result instanceof sdk18.HelpError) {
    console.error(result.message);
    return 1;
  } else if (sdk18.isError(result)) {
    console.error(result);
    return 1;
  }
  console.log(result);
  try {
    const projectPathHash = await sdk17.getProjectHash();
    const cliPathHash = sdk17.getCLIPathHash();
    let schemaProviders;
    let schemaPreviewFeatures;
    let schemaGeneratorsProviders;
    try {
      const schema = await sdk17.getSchema(args["--schema"]);
      const config = await sdk17.getConfig({
        datamodel: schema
      });
      if (config.datasources.length > 0) {
        schemaProviders = config.datasources[0].provider;
      }
      const generator = config.generators.find((gen) => gen.previewFeatures.length > 0);
      if (generator) {
        schemaPreviewFeatures = generator.previewFeatures;
      }
      schemaGeneratorsProviders = config.generators.map((gen) => gen.provider);
    } catch (e) {
      debug2(e);
    }
    const checkResult = await checkpoint2.check({
      product: "prisma",
      cli_path_hash: cliPathHash,
      project_hash: projectPathHash,
      version: packageJson3.version,
      schema_providers: schemaProviders,
      schema_preview_features: schemaPreviewFeatures,
      schema_generators_providers: schemaGeneratorsProviders,
      cli_path: process.argv[1],
      cli_install_type: isPrismaInstalledGlobally2 ? "global" : "local",
      command: process.argv.slice(2).join(" "),
      information: args["--telemetry-information"] || process.env.PRISMA_TELEMETRY_INFORMATION
    });
    const shouldHide = process.env.PRISMA_HIDE_UPDATE_MESSAGE;
    if (checkResult.status === "ok" && checkResult.data.outdated && !shouldHide) {
      printUpdateMessage(checkResult);
    }
  } catch (e) {
    debug2(e);
  }
  return 0;
}
process.on("SIGINT", () => {
  process.exit(0);
});
if (require.main === module) {
  main().then((code) => {
    if (code !== 0) {
      process.exit(code);
    }
  }).catch((err) => {
    if (typeof err[Symbol.iterator] === "function") {
      for (const individualError of err) {
        handleIndividualError(individualError);
      }
    } else {
      handleIndividualError(err);
    }
  });
}
function handleIndividualError(error) {
  if (error.rustStack) {
    migrate.handlePanic(error, packageJson3.version, engines4.enginesVersion).catch((e) => {
      if (debug.default.enabled("prisma")) {
        console.error(chalk25.default.redBright.bold("Error: ") + e.stack);
      } else {
        console.error(chalk25.default.redBright.bold("Error: ") + e.message);
      }
    }).finally(() => {
      process.exit(1);
    });
  } else {
    if (debug.default.enabled("prisma")) {
      console.error(chalk25.default.redBright.bold("Error: ") + error.stack);
    } else {
      console.error(chalk25.default.redBright.bold("Error: ") + error.message);
    }
    process.exit(1);
  }
}
path17.default.join(__dirname, "../../engines/query-engine-darwin");
path17.default.join(__dirname, "../../engines/introspection-engine-darwin");
path17.default.join(__dirname, "../../engines/prisma-fmt-darwin");
path17.default.join(__dirname, "../../engines/query-engine-debian-openssl-1.0.x");
path17.default.join(__dirname, "../../engines/introspection-engine-debian-openssl-1.0.x");
path17.default.join(__dirname, "../../engines/prisma-fmt-debian-openssl-1.0.x");
path17.default.join(__dirname, "../../engines/query-engine-debian-openssl-1.1.x");
path17.default.join(__dirname, "../../engines/introspection-engine-debian-openssl-1.1.x");
path17.default.join(__dirname, "../../engines/prisma-fmt-debian-openssl-1.1.x");
path17.default.join(__dirname, "../../engines/query-engine-rhel-openssl-1.0.x");
path17.default.join(__dirname, "../../engines/introspection-engine-rhel-openssl-1.0.x");
path17.default.join(__dirname, "../../engines/prisma-fmt-rhel-openssl-1.0.x");
path17.default.join(__dirname, "../../engines/query-engine-rhel-openssl-1.1.x");
path17.default.join(__dirname, "../../engines/introspection-engine-rhel-openssl-1.1.x");
path17.default.join(__dirname, "../../engines/prisma-fmt-rhel-openssl-1.1.x");
